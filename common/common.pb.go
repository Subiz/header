// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/common.proto

package common

import (
	fmt "fmt"
	auth "git.subiz.net/header/auth"
	lang "git.subiz.net/header/lang"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type E int32

const (
	E_no_error                                   E = 0
	E_unknown                                    E = 1
	E_missing_account_id                         E = 10
	E_proto_marshal_error                        E = 11
	E_database_error                             E = 12
	E_access_deny                                E = 13
	E_json_marshal_error                         E = 14
	E_idempotency_input_changed                  E = 15
	E_account_not_found                          E = 16
	E_invalid_credential                         E = 17
	E_http_call_error                            E = 18
	E_agent_group_not_found                      E = 20
	E_token_type_is_invalid                      E = 21
	E_jwt_token_is_invalid                       E = 22
	E_agent_not_found                            E = 23
	E_account_fullname_is_empty                  E = 24
	E_password_is_empty                          E = 25
	E_password_too_weak                          E = 26
	E_email_is_empty                             E = 27
	E_email_is_invalid                           E = 28
	E_email_is_used                              E = 29
	E_token_is_invalid                           E = 30
	E_token_expired                              E = 31
	E_agent_is_not_active                        E = 32
	E_wrong_password                             E = 33
	E_change_own_state                           E = 34
	E_owner_state_cannot_be_changed              E = 35
	E_pending_agent_state_cannot_be_changed      E = 36
	E_deleted_agent_state_cannot_be_changed      E = 37
	E_invalid_form_web_type                      E = 38
	E_invalid_form_mobile_type                   E = 39
	E_invalid_form_email_type                    E = 40
	E_permission_not_enough                      E = 41
	E_invalid_filestore_credential               E = 102
	E_filestore_error                            E = 103
	E_filestore_write_error                      E = 104
	E_filestore_read_error                       E = 105
	E_filestore_acl_error                        E = 106
	E_kv_key_not_found                           E = 1500
	E_subscription_not_found                     E = 1012
	E_payment_method_not_found                   E = 1013
	E_missing_primary_payment_method             E = 1014
	E_payment_method_state_is_failed             E = 1015
	E_primary_payment_method_is_not_credit_card  E = 1016
	E_missing_payment_method_id                  E = 1017
	E_plan_not_found                             E = 1018
	E_invalid_plan_cannot_buy                    E = 1019
	E_missing_next_billing_cycle_month           E = 1020
	E_trial_package_cannot_buy                   E = 1021
	E_missing_billing_cycle_month                E = 1022
	E_primary_payment_method_must_be_credit_card E = 1023
	E_bank_transfer_payment_method_not_found     E = 1024
	E_invoice_not_found                          E = 1025
	E_invoice_template_error                     E = 1026
	E_execute_invoice_template_error             E = 1027
	E_missing_stripe_token                       E = 1028
	E_missing_stripe_info                        E = 1029
	E_stripe_call_error                          E = 1030
	E_missing_stripe_customer_id                 E = 1031
	E_invalid_invoice_id                         E = 1032
	E_invalid_payment_log_id                     E = 1034
	E_invalid_bill_id                            E = 1035
	E_unable_to_load_permission                  E = 1036
	E_auto_charge_is_not_enabled                 E = 1037
	E_stripe_customer_is_not_valid               E = 1038
	E_kafka_rpc_timeout                          E = 2150
	E_s3_call_error                              E = 1503
	E_pdf_generate_error                         E = 1504
	E_subscription_started_is_invalid            E = 1505
	E_subscription_is_nil                        E = 1506
	E_client_not_found                           E = 3004
	E_missing_redirect_url                       E = 3005
	E_missing_client_name                        E = 3006
	E_corrupted_user_data                        E = 3007
	E_auth_token_expired                         E = 3008
	E_hash_bcrypt_error                          E = 3009
	E_invalid_cipher_size                        E = 3010
	E_invalid_google_auth_response               E = 3011
	E_inactive_agent                             E = 4000
)

var E_name = map[int32]string{
	0:    "no_error",
	1:    "unknown",
	10:   "missing_account_id",
	11:   "proto_marshal_error",
	12:   "database_error",
	13:   "access_deny",
	14:   "json_marshal_error",
	15:   "idempotency_input_changed",
	16:   "account_not_found",
	17:   "invalid_credential",
	18:   "http_call_error",
	20:   "agent_group_not_found",
	21:   "token_type_is_invalid",
	22:   "jwt_token_is_invalid",
	23:   "agent_not_found",
	24:   "account_fullname_is_empty",
	25:   "password_is_empty",
	26:   "password_too_weak",
	27:   "email_is_empty",
	28:   "email_is_invalid",
	29:   "email_is_used",
	30:   "token_is_invalid",
	31:   "token_expired",
	32:   "agent_is_not_active",
	33:   "wrong_password",
	34:   "change_own_state",
	35:   "owner_state_cannot_be_changed",
	36:   "pending_agent_state_cannot_be_changed",
	37:   "deleted_agent_state_cannot_be_changed",
	38:   "invalid_form_web_type",
	39:   "invalid_form_mobile_type",
	40:   "invalid_form_email_type",
	41:   "permission_not_enough",
	102:  "invalid_filestore_credential",
	103:  "filestore_error",
	104:  "filestore_write_error",
	105:  "filestore_read_error",
	106:  "filestore_acl_error",
	1500: "kv_key_not_found",
	1012: "subscription_not_found",
	1013: "payment_method_not_found",
	1014: "missing_primary_payment_method",
	1015: "payment_method_state_is_failed",
	1016: "primary_payment_method_is_not_credit_card",
	1017: "missing_payment_method_id",
	1018: "plan_not_found",
	1019: "invalid_plan_cannot_buy",
	1020: "missing_next_billing_cycle_month",
	1021: "trial_package_cannot_buy",
	1022: "missing_billing_cycle_month",
	1023: "primary_payment_method_must_be_credit_card",
	1024: "bank_transfer_payment_method_not_found",
	1025: "invoice_not_found",
	1026: "invoice_template_error",
	1027: "execute_invoice_template_error",
	1028: "missing_stripe_token",
	1029: "missing_stripe_info",
	1030: "stripe_call_error",
	1031: "missing_stripe_customer_id",
	1032: "invalid_invoice_id",
	1034: "invalid_payment_log_id",
	1035: "invalid_bill_id",
	1036: "unable_to_load_permission",
	1037: "auto_charge_is_not_enabled",
	1038: "stripe_customer_is_not_valid",
	2150: "kafka_rpc_timeout",
	1503: "s3_call_error",
	1504: "pdf_generate_error",
	1505: "subscription_started_is_invalid",
	1506: "subscription_is_nil",
	3004: "client_not_found",
	3005: "missing_redirect_url",
	3006: "missing_client_name",
	3007: "corrupted_user_data",
	3008: "auth_token_expired",
	3009: "hash_bcrypt_error",
	3010: "invalid_cipher_size",
	3011: "invalid_google_auth_response",
	4000: "inactive_agent",
}

var E_value = map[string]int32{
	"no_error":                                   0,
	"unknown":                                    1,
	"missing_account_id":                         10,
	"proto_marshal_error":                        11,
	"database_error":                             12,
	"access_deny":                                13,
	"json_marshal_error":                         14,
	"idempotency_input_changed":                  15,
	"account_not_found":                          16,
	"invalid_credential":                         17,
	"http_call_error":                            18,
	"agent_group_not_found":                      20,
	"token_type_is_invalid":                      21,
	"jwt_token_is_invalid":                       22,
	"agent_not_found":                            23,
	"account_fullname_is_empty":                  24,
	"password_is_empty":                          25,
	"password_too_weak":                          26,
	"email_is_empty":                             27,
	"email_is_invalid":                           28,
	"email_is_used":                              29,
	"token_is_invalid":                           30,
	"token_expired":                              31,
	"agent_is_not_active":                        32,
	"wrong_password":                             33,
	"change_own_state":                           34,
	"owner_state_cannot_be_changed":              35,
	"pending_agent_state_cannot_be_changed":      36,
	"deleted_agent_state_cannot_be_changed":      37,
	"invalid_form_web_type":                      38,
	"invalid_form_mobile_type":                   39,
	"invalid_form_email_type":                    40,
	"permission_not_enough":                      41,
	"invalid_filestore_credential":               102,
	"filestore_error":                            103,
	"filestore_write_error":                      104,
	"filestore_read_error":                       105,
	"filestore_acl_error":                        106,
	"kv_key_not_found":                           1500,
	"subscription_not_found":                     1012,
	"payment_method_not_found":                   1013,
	"missing_primary_payment_method":             1014,
	"payment_method_state_is_failed":             1015,
	"primary_payment_method_is_not_credit_card":  1016,
	"missing_payment_method_id":                  1017,
	"plan_not_found":                             1018,
	"invalid_plan_cannot_buy":                    1019,
	"missing_next_billing_cycle_month":           1020,
	"trial_package_cannot_buy":                   1021,
	"missing_billing_cycle_month":                1022,
	"primary_payment_method_must_be_credit_card": 1023,
	"bank_transfer_payment_method_not_found":     1024,
	"invoice_not_found":                          1025,
	"invoice_template_error":                     1026,
	"execute_invoice_template_error":             1027,
	"missing_stripe_token":                       1028,
	"missing_stripe_info":                        1029,
	"stripe_call_error":                          1030,
	"missing_stripe_customer_id":                 1031,
	"invalid_invoice_id":                         1032,
	"invalid_payment_log_id":                     1034,
	"invalid_bill_id":                            1035,
	"unable_to_load_permission":                  1036,
	"auto_charge_is_not_enabled":                 1037,
	"stripe_customer_is_not_valid":               1038,
	"kafka_rpc_timeout":                          2150,
	"s3_call_error":                              1503,
	"pdf_generate_error":                         1504,
	"subscription_started_is_invalid":            1505,
	"subscription_is_nil":                        1506,
	"client_not_found":                           3004,
	"missing_redirect_url":                       3005,
	"missing_client_name":                        3006,
	"corrupted_user_data":                        3007,
	"auth_token_expired":                         3008,
	"hash_bcrypt_error":                          3009,
	"invalid_cipher_size":                        3010,
	"invalid_google_auth_response":               3011,
	"inactive_agent":                             4000,
}

func (x E) String() string {
	return proto.EnumName(E_name, int32(x))
}

func (E) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}

type Event int32

const (
	Event_Send_    Event = 0
	Event_ApiReply Event = 2
)

var Event_name = map[int32]string{
	0: "Send_",
	2: "ApiReply",
}

var Event_value = map[string]int32{
	"Send_":    0,
	"ApiReply": 2,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{1}
}

type Device_DeviceType int32

const (
	Device_unknown Device_DeviceType = 0
	Device_mobile  Device_DeviceType = 1
	Device_tablet  Device_DeviceType = 2
	Device_desktop Device_DeviceType = 3
)

var Device_DeviceType_name = map[int32]string{
	0: "unknown",
	1: "mobile",
	2: "tablet",
	3: "desktop",
}

var Device_DeviceType_value = map[string]int32{
	"unknown": 0,
	"mobile":  1,
	"tablet":  2,
	"desktop": 3,
}

func (x Device_DeviceType) String() string {
	return proto.EnumName(Device_DeviceType_name, int32(x))
}

func (Device_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{5, 0}
}

type Empty struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type Id struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Id) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ids                  []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ids) Reset()         { *m = Ids{} }
func (m *Ids) String() string { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()    {}
func (*Ids) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{2}
}

func (m *Ids) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ids.Unmarshal(m, b)
}
func (m *Ids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ids.Marshal(b, m, deterministic)
}
func (m *Ids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ids.Merge(m, src)
}
func (m *Ids) XXX_Size() int {
	return xxx_messageInfo_Ids.Size(m)
}
func (m *Ids) XXX_DiscardUnknown() {
	xxx_messageInfo_Ids.DiscardUnknown(m)
}

var xxx_messageInfo_Ids proto.InternalMessageInfo

func (m *Ids) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Ids) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Context struct {
	EventId    string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	State      []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Node       string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	ReplyTopic string `protobuf:"bytes,4,opt,name=reply_topic,json=replyTopic,proto3" json:"reply_topic,omitempty"`
	// 	optional int32 reply_partition = 5;
	Credential *auth.Credential `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty"`
	Tracing    []byte           `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	ReplyKey   string           `protobuf:"bytes,8,opt,name=reply_key,json=replyKey,proto3" json:"reply_key,omitempty"`
	ByDevice   *Device          `protobuf:"bytes,10,opt,name=by_device,json=byDevice,proto3" json:"by_device,omitempty"`
	// for kafka
	Topic                string   `protobuf:"bytes,11,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition            int32    `protobuf:"varint,13,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset               int64    `protobuf:"varint,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Term                 uint64   `protobuf:"varint,15,opt,name=term,proto3" json:"term,omitempty"`
	RouterTopic          string   `protobuf:"bytes,16,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	IdempotencyKey       string   `protobuf:"bytes,17,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{3}
}

func (m *Context) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Context.Unmarshal(m, b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Context.Marshal(b, m, deterministic)
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return xxx_messageInfo_Context.Size(m)
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Context) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Context) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Context) GetReplyTopic() string {
	if m != nil {
		return m.ReplyTopic
	}
	return ""
}

func (m *Context) GetCredential() *auth.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *Context) GetTracing() []byte {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *Context) GetReplyKey() string {
	if m != nil {
		return m.ReplyKey
	}
	return ""
}

func (m *Context) GetByDevice() *Device {
	if m != nil {
		return m.ByDevice
	}
	return nil
}

func (m *Context) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Context) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *Context) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Context) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Context) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *Context) GetIdempotencyKey() string {
	if m != nil {
		return m.IdempotencyKey
	}
	return ""
}

type Reply struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	EventId              string   `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	State                []byte   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Service              string   `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ServiceId            string   `protobuf:"bytes,6,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Err                  bool     `protobuf:"varint,10,opt,name=err,proto3" json:"err,omitempty"`
	ErrDescription       string   `protobuf:"bytes,12,opt,name=err_description,json=errDescription,proto3" json:"err_description,omitempty"`
	ErrCode              lang.T   `protobuf:"varint,13,opt,name=err_code,json=errCode,proto3,enum=lang.T" json:"err_code,omitempty"`
	ErrClass             int32    `protobuf:"varint,15,opt,name=err_class,json=errClass,proto3" json:"err_class,omitempty"`
	ErrHash              string   `protobuf:"bytes,16,opt,name=err_hash,json=errHash,proto3" json:"err_hash,omitempty"`
	Payload              []byte   `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	Published            int64    `protobuf:"varint,20,opt,name=published,proto3" json:"published,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{4}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Reply) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Reply) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Reply) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Reply) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *Reply) GetErr() bool {
	if m != nil {
		return m.Err
	}
	return false
}

func (m *Reply) GetErrDescription() string {
	if m != nil {
		return m.ErrDescription
	}
	return ""
}

func (m *Reply) GetErrCode() lang.T {
	if m != nil {
		return m.ErrCode
	}
	return lang.T_undefined
}

func (m *Reply) GetErrClass() int32 {
	if m != nil {
		return m.ErrClass
	}
	return 0
}

func (m *Reply) GetErrHash() string {
	if m != nil {
		return m.ErrHash
	}
	return ""
}

func (m *Reply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Reply) GetPublished() int64 {
	if m != nil {
		return m.Published
	}
	return 0
}

type Device struct {
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent            string   `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ScreenResolution     string   `protobuf:"bytes,5,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	Timezone             string   `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Language             string   `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	Referrer             string   `protobuf:"bytes,8,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Type                 string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{5}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Device) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Device) GetScreenResolution() string {
	if m != nil {
		return m.ScreenResolution
	}
	return ""
}

func (m *Device) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Device) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Device) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Error struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Debug                string   `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	Hash                 string   `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Class                int32    `protobuf:"varint,6,opt,name=class,proto3" json:"class,omitempty"`
	Stack                string   `protobuf:"bytes,7,opt,name=stack,proto3" json:"stack,omitempty"`
	Created              int64    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Code                 string   `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{6}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Error) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *Error) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Error) GetClass() int32 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *Error) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *Error) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type PingRequest struct {
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{7}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Pong struct {
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{8}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("common.E", E_name, E_value)
	proto.RegisterEnum("common.Event", Event_name, Event_value)
	proto.RegisterEnum("common.Device_DeviceType", Device_DeviceType_name, Device_DeviceType_value)
	proto.RegisterType((*Empty)(nil), "common.Empty")
	proto.RegisterType((*Id)(nil), "common.Id")
	proto.RegisterType((*Ids)(nil), "common.Ids")
	proto.RegisterType((*Context)(nil), "common.Context")
	proto.RegisterType((*Reply)(nil), "common.Reply")
	proto.RegisterType((*Device)(nil), "common.Device")
	proto.RegisterType((*Error)(nil), "common.Error")
	proto.RegisterType((*PingRequest)(nil), "common.PingRequest")
	proto.RegisterType((*Pong)(nil), "common.Pong")
}

func init() { proto.RegisterFile("common/common.proto", fileDescriptor_8f954d82c0b891f6) }

var fileDescriptor_8f954d82c0b891f6 = []byte{
	// 1848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x6f, 0x1b, 0xb9,
	0x15, 0x8e, 0xac, 0xd8, 0x92, 0x8e, 0x1c, 0x9b, 0xa6, 0x9d, 0x58, 0x8e, 0x9d, 0x44, 0xd1, 0x26,
	0x1b, 0x27, 0x01, 0x9c, 0x22, 0xfb, 0x5e, 0x60, 0x91, 0x0d, 0xd0, 0x60, 0x5f, 0x16, 0x6a, 0x50,
	0xa0, 0x4f, 0x04, 0x35, 0x73, 0x24, 0x31, 0x1a, 0x91, 0x53, 0x92, 0x63, 0x47, 0x79, 0xea, 0x6d,
	0xdb, 0xa2, 0xdd, 0xf6, 0x37, 0xf4, 0x2f, 0xf4, 0xbd, 0xf7, 0xfe, 0x81, 0xfe, 0x80, 0x02, 0xbd,
	0x01, 0xfd, 0x05, 0xbd, 0xdf, 0x71, 0xc8, 0x19, 0x69, 0xec, 0x4d, 0xd0, 0x3c, 0xf4, 0xc5, 0xe6,
	0xb9, 0xf0, 0xf0, 0x9c, 0xef, 0x7c, 0x73, 0x48, 0xc1, 0x6e, 0x62, 0xe6, 0x73, 0xa3, 0x1f, 0xc5,
	0x7f, 0x27, 0xb9, 0x35, 0xde, 0xf0, 0x8d, 0x28, 0x5d, 0xbf, 0x33, 0x51, 0xfe, 0xc4, 0x15, 0x23,
	0xf5, 0xea, 0x44, 0xa3, 0x7f, 0x34, 0x45, 0x99, 0xa2, 0x7d, 0x94, 0x49, 0x3d, 0x09, 0x7f, 0xa2,
	0xf7, 0x1b, 0xbc, 0x64, 0xe1, 0xa7, 0xe1, 0x4f, 0xf4, 0x1a, 0x3c, 0x80, 0xf5, 0xa7, 0xf3, 0xdc,
	0x2f, 0xf8, 0x6d, 0x68, 0x26, 0xfe, 0x65, 0xaf, 0xd1, 0x6f, 0x1c, 0x77, 0x1f, 0x6f, 0x9f, 0x94,
	0x07, 0x3f, 0x31, 0xda, 0xe3, 0x4b, 0x3f, 0x24, 0xdb, 0xe0, 0x0b, 0xb0, 0xf6, 0x2c, 0x7d, 0x0b,
	0x47, 0x7e, 0x03, 0x40, 0x26, 0x89, 0x29, 0xb4, 0x17, 0x2a, 0xed, 0xad, 0xf5, 0x1b, 0xc7, 0x9d,
	0x61, 0xa7, 0xd4, 0x3c, 0x4b, 0xf9, 0x16, 0xac, 0xa9, 0xb4, 0xd7, 0x0c, 0xea, 0x35, 0x95, 0x0e,
	0xbe, 0x08, 0xcd, 0x67, 0xa9, 0xfb, 0x3f, 0x04, 0x66, 0xd0, 0x54, 0xa9, 0xeb, 0x35, 0xfb, 0xcd,
	0xe3, 0xce, 0x90, 0x96, 0x83, 0x1f, 0x34, 0xa1, 0x55, 0x46, 0xe0, 0x07, 0xd0, 0xc6, 0x53, 0x8c,
	0x5b, 0x1b, 0x61, 0x6b, 0x2b, 0xc8, 0xcf, 0x52, 0xbe, 0x07, 0xeb, 0xce, 0x4b, 0x8f, 0x21, 0xe4,
	0xe6, 0x30, 0x0a, 0x9c, 0xc3, 0x65, 0x6d, 0x52, 0x2c, 0x33, 0x0d, 0x6b, 0x7e, 0x0b, 0xba, 0x16,
	0xf3, 0x6c, 0x21, 0xbc, 0xc9, 0x55, 0xd2, 0xbb, 0x1c, 0x4c, 0x10, 0x54, 0xcf, 0x49, 0xc3, 0x3f,
	0x03, 0x90, 0x58, 0x4c, 0x51, 0x7b, 0x25, 0xb3, 0xde, 0x46, 0x28, 0x86, 0x9d, 0x04, 0xc4, 0x9f,
	0x2c, 0xf5, 0xc3, 0x9a, 0x0f, 0xef, 0x41, 0xcb, 0x5b, 0x99, 0x28, 0x3d, 0xe9, 0xb5, 0xc2, 0xf1,
	0x95, 0xc8, 0x0f, 0xa1, 0x13, 0x0f, 0x9b, 0xe1, 0xa2, 0xd7, 0x0e, 0x47, 0xb5, 0x83, 0xe2, 0x43,
	0x5c, 0xf0, 0x87, 0xd0, 0x19, 0x2d, 0x44, 0x8a, 0xa7, 0x2a, 0xc1, 0x1e, 0x84, 0x73, 0xb6, 0x2a,
	0xd0, 0x3e, 0x08, 0xda, 0x61, 0x7b, 0xb4, 0x88, 0x2b, 0x2a, 0x30, 0x26, 0xdc, 0x0d, 0x51, 0xa2,
	0xc0, 0x8f, 0xa0, 0x93, 0x4b, 0xeb, 0x95, 0x57, 0x46, 0xf7, 0xae, 0xf4, 0x1b, 0xc7, 0xeb, 0xc3,
	0x95, 0x82, 0x5f, 0x83, 0x0d, 0x33, 0x1e, 0x3b, 0xf4, 0xbd, 0xad, 0x7e, 0xe3, 0xb8, 0x39, 0x2c,
	0x25, 0x82, 0xc5, 0xa3, 0x9d, 0xf7, 0xb6, 0xfb, 0x8d, 0xe3, 0xcb, 0xc3, 0xb0, 0xe6, 0xb7, 0x61,
	0xd3, 0x9a, 0xc2, 0xa3, 0x2d, 0x71, 0x61, 0xe1, 0x98, 0x6e, 0xd4, 0x45, 0x60, 0xee, 0xc1, 0xb6,
	0x4a, 0x71, 0x9e, 0x1b, 0x8f, 0x3a, 0x89, 0x25, 0xed, 0x04, 0xaf, 0xad, 0x9a, 0xfa, 0x43, 0x5c,
	0x0c, 0x7e, 0xbf, 0x06, 0xeb, 0x43, 0xaa, 0xf2, 0x6d, 0x18, 0x51, 0x6f, 0x6a, 0xf3, 0x6d, 0x9a,
	0xda, 0x83, 0x96, 0x43, 0x1b, 0x40, 0x5b, 0x8f, 0xfe, 0xa5, 0x48, 0xe4, 0x2a, 0x97, 0x14, 0x6c,
	0x23, 0x92, 0xab, 0xd4, 0x44, 0x72, 0xa1, 0xb5, 0x01, 0xe9, 0xf6, 0x90, 0x96, 0x54, 0x11, 0x5a,
	0x2b, 0x52, 0x74, 0x89, 0x55, 0x79, 0x00, 0x71, 0x33, 0x56, 0x84, 0xd6, 0x7e, 0xb0, 0xd2, 0xf2,
	0x01, 0xb4, 0xc9, 0x31, 0x21, 0x32, 0x11, 0xcc, 0x5b, 0x8f, 0x5b, 0x27, 0xe1, 0x4b, 0x7d, 0x3e,
	0x6c, 0xa1, 0xb5, 0x4f, 0x88, 0x58, 0x87, 0xd0, 0x09, 0x3e, 0x99, 0x74, 0x2e, 0x40, 0xbb, 0x3e,
	0xa4, 0x4d, 0x4f, 0x48, 0x0e, 0x55, 0x5a, 0x2b, 0xa6, 0xd2, 0x4d, 0x4b, 0x68, 0x69, 0xdf, 0xe7,
	0xa4, 0x9b, 0x52, 0x3d, 0xb9, 0x5c, 0x64, 0x46, 0xa6, 0x15, 0x7b, 0x4a, 0x31, 0x74, 0xb7, 0x18,
	0x65, 0xca, 0x4d, 0x31, 0xed, 0xed, 0x85, 0x16, 0xae, 0x14, 0x83, 0x4f, 0xd6, 0x60, 0xa3, 0x24,
	0x07, 0x7d, 0x8f, 0xf9, 0xf2, 0x7b, 0xcc, 0x09, 0x88, 0xc2, 0xa1, 0x15, 0x72, 0x82, 0xda, 0x97,
	0x14, 0xef, 0x90, 0xe6, 0x7d, 0x52, 0xf0, 0x87, 0xb0, 0xe3, 0x12, 0x8b, 0xa8, 0x85, 0x45, 0x67,
	0xb2, 0x22, 0x14, 0x1e, 0xb1, 0x64, 0xd1, 0x30, 0x5c, 0xea, 0xf9, 0x75, 0x68, 0x7b, 0x35, 0xc7,
	0x57, 0x46, 0x63, 0x09, 0xe9, 0x52, 0x26, 0x1b, 0xa1, 0x50, 0xc8, 0x09, 0x86, 0xdc, 0x3b, 0xc3,
	0xa5, 0x4c, 0x36, 0x8b, 0x63, 0xb4, 0x16, 0xed, 0x8a, 0xf9, 0x51, 0x0e, 0x04, 0x5c, 0xe4, 0xd8,
	0xeb, 0xc4, 0xef, 0x92, 0xd6, 0x83, 0xcf, 0x02, 0xc4, 0x6a, 0x9e, 0x2f, 0x72, 0xe4, 0x5d, 0x68,
	0x15, 0x7a, 0xa6, 0xcd, 0x99, 0x66, 0x97, 0x38, 0xc0, 0xc6, 0xdc, 0x8c, 0x54, 0x86, 0xac, 0x41,
	0x6b, 0x2f, 0x47, 0x19, 0x7a, 0xb6, 0x46, 0x4e, 0x29, 0xba, 0x99, 0x37, 0x39, 0x6b, 0x0e, 0x7e,
	0xd9, 0x80, 0xf5, 0xa7, 0xd6, 0x1a, 0xfb, 0x36, 0xa4, 0xeb, 0x43, 0xb7, 0xde, 0xf4, 0x38, 0x87,
	0xea, 0x2a, 0xe2, 0x5e, 0x8a, 0xa3, 0x62, 0x52, 0xa2, 0x1a, 0x05, 0x4a, 0x3c, 0xb4, 0x30, 0x82,
	0x15, 0xd6, 0xe4, 0x19, 0x7b, 0xbe, 0x11, 0x7a, 0x1e, 0x85, 0x92, 0xbb, 0xc9, 0xac, 0xc4, 0x25,
	0x0a, 0xd4, 0xeb, 0xc4, 0xa2, 0xf4, 0x98, 0x06, 0x4c, 0x9a, 0xc3, 0x4a, 0xa4, 0xc8, 0x81, 0x5d,
	0xb1, 0x59, 0x61, 0x3d, 0xb8, 0x07, 0xdd, 0x8f, 0x94, 0x9e, 0x0c, 0xf1, 0x4b, 0x05, 0x3a, 0x4f,
	0x9b, 0xe7, 0xe8, 0x1c, 0x81, 0x1d, 0x13, 0xae, 0xc4, 0x41, 0x1f, 0x2e, 0x7f, 0x64, 0xf4, 0xa4,
	0xee, 0xd1, 0x3c, 0xe7, 0xf1, 0xe0, 0xe3, 0x1d, 0x68, 0x3c, 0xe5, 0x9b, 0xd0, 0xd6, 0x46, 0x20,
	0xa1, 0xc4, 0x2e, 0xd5, 0x31, 0x6e, 0xf0, 0x6b, 0xc0, 0xe7, 0xca, 0x39, 0xa5, 0x27, 0x62, 0x35,
	0xa0, 0x19, 0xf0, 0x7d, 0xd8, 0x0d, 0xf7, 0x8c, 0x98, 0x4b, 0xeb, 0xa6, 0x32, 0x2b, 0x77, 0x77,
	0x39, 0x87, 0xad, 0x54, 0x7a, 0x39, 0x92, 0x0e, 0x4b, 0xdd, 0x26, 0xdf, 0x86, 0xae, 0x4c, 0x12,
	0x74, 0x4e, 0xa4, 0xa8, 0x17, 0xec, 0x0a, 0x45, 0x7d, 0xe1, 0x8c, 0xbe, 0xb0, 0x79, 0x8b, 0xdf,
	0x80, 0x83, 0xfa, 0x28, 0x51, 0x3a, 0x2f, 0xbc, 0x48, 0xa6, 0x52, 0x4f, 0x30, 0x65, 0xdb, 0xfc,
	0x2a, 0xec, 0x54, 0x49, 0x68, 0xe3, 0xc5, 0xd8, 0x14, 0x3a, 0x65, 0x8c, 0xa2, 0x29, 0x7d, 0x2a,
	0x33, 0x95, 0x8a, 0xd5, 0xf4, 0x65, 0x3b, 0x7c, 0x17, 0xb6, 0xa7, 0xde, 0xe7, 0x22, 0x91, 0x59,
	0x75, 0x04, 0xe7, 0x07, 0x70, 0x35, 0xd0, 0x5f, 0x4c, 0xac, 0x29, 0xf2, 0x5a, 0x9c, 0x3d, 0x32,
	0x79, 0x33, 0x43, 0x2d, 0x88, 0x78, 0x42, 0x39, 0x51, 0x46, 0x65, 0x57, 0x79, 0x0f, 0xf6, 0x5e,
	0x9c, 0x79, 0x11, 0xcd, 0x35, 0xcb, 0x35, 0x3a, 0x24, 0xc6, 0x5b, 0x45, 0xda, 0xa7, 0x3a, 0xaa,
	0x44, 0xc7, 0x45, 0x96, 0x69, 0x39, 0x0f, 0xf1, 0x90, 0x2e, 0x64, 0xd6, 0xa3, 0x3a, 0x72, 0xe9,
	0xdc, 0x99, 0xb1, 0xe9, 0x4a, 0x7d, 0x70, 0x4e, 0xed, 0x8d, 0x11, 0x67, 0x28, 0x67, 0xec, 0x3a,
	0x21, 0x8a, 0x73, 0xa9, 0xb2, 0x95, 0xeb, 0x21, 0xdf, 0x03, 0xb6, 0xd4, 0x55, 0xb9, 0x1c, 0xf1,
	0x1d, 0xb8, 0xb2, 0xd4, 0x16, 0x0e, 0x53, 0x76, 0x83, 0x1c, 0x3f, 0x95, 0xf4, 0x4d, 0x72, 0x8c,
	0x5a, 0x7c, 0x99, 0x2b, 0x8b, 0x29, 0xbb, 0x45, 0x0d, 0x8d, 0x75, 0x28, 0x17, 0x4a, 0x91, 0x89,
	0x57, 0xa7, 0xc8, 0xfa, 0x74, 0xfc, 0x99, 0x35, 0x7a, 0x22, 0xaa, 0xdc, 0xd8, 0x6d, 0x8a, 0x1a,
	0xbb, 0x22, 0xcc, 0x99, 0x16, 0x61, 0xfe, 0xb2, 0x01, 0xbf, 0x0d, 0x37, 0xcc, 0x99, 0x46, 0x1b,
	0x15, 0x22, 0x91, 0x9a, 0x02, 0x8d, 0x70, 0xd9, 0xc1, 0x77, 0xf8, 0x7d, 0xb8, 0x9b, 0xa3, 0x4e,
	0x03, 0x9d, 0xc2, 0x69, 0x6f, 0x72, 0xbd, 0x43, 0xae, 0x29, 0x66, 0xe8, 0x31, 0xfd, 0x1f, 0xae,
	0x77, 0xa9, 0x71, 0x15, 0x01, 0xc6, 0xc6, 0xce, 0xc5, 0x19, 0x8e, 0x42, 0x0f, 0xd9, 0xbb, 0xfc,
	0x08, 0x7a, 0xe7, 0x4c, 0x71, 0x60, 0x44, 0xeb, 0x3d, 0x7e, 0x08, 0xfb, 0xe7, 0xac, 0x11, 0xbd,
	0x60, 0x3c, 0xa6, 0xa8, 0x39, 0xda, 0xc0, 0x7e, 0xa3, 0x03, 0x26, 0xa8, 0x4d, 0x31, 0x99, 0xb2,
	0xfb, 0xbc, 0x0f, 0x47, 0xcb, 0x7d, 0x2a, 0x43, 0xe7, 0x8d, 0xc5, 0x3a, 0xf7, 0xc6, 0x44, 0x8b,
	0x95, 0x25, 0x72, 0x6f, 0x42, 0x11, 0x57, 0xca, 0x33, 0xab, 0x7c, 0x65, 0xa2, 0x69, 0xbf, 0xb7,
	0x32, 0x59, 0x94, 0x69, 0x69, 0x51, 0xd4, 0x98, 0x95, 0x45, 0x26, 0x15, 0x93, 0x5f, 0xf0, 0xab,
	0xc0, 0x66, 0xa7, 0x74, 0xdd, 0xd6, 0xa8, 0xf7, 0xab, 0x2e, 0x3f, 0x84, 0x6b, 0xae, 0x18, 0x2d,
	0x27, 0x56, 0xcd, 0xf8, 0xc7, 0x16, 0xbf, 0x01, 0xbd, 0x5c, 0x2e, 0xe6, 0x04, 0xe7, 0x1c, 0xfd,
	0xd4, 0xa4, 0x35, 0xf3, 0x9f, 0x5a, 0xfc, 0x1d, 0xb8, 0x59, 0x7d, 0xed, 0xb9, 0x55, 0x73, 0x69,
	0x17, 0xe2, 0xbc, 0x3b, 0xfb, 0x73, 0x70, 0xba, 0x10, 0x23, 0x76, 0x46, 0x39, 0x31, 0x96, 0x2a,
	0xc3, 0x94, 0xfd, 0xa5, 0xc5, 0x4f, 0xe0, 0xfe, 0xeb, 0x23, 0x54, 0xfc, 0x22, 0xb4, 0x94, 0x17,
	0x89, 0xb4, 0x29, 0xfb, 0x6b, 0x8b, 0xdf, 0x84, 0x83, 0xe5, 0xc9, 0x17, 0xfc, 0x53, 0xf6, 0xb7,
	0x16, 0xdf, 0x85, 0xad, 0x3c, 0x93, 0xf5, 0x6a, 0xfe, 0xde, 0xe2, 0x47, 0xab, 0xf6, 0x05, 0x63,
	0xc5, 0x8d, 0x62, 0xc1, 0xfe, 0xd1, 0xe2, 0x77, 0xa1, 0x5f, 0x85, 0xd4, 0xf8, 0xd2, 0x8b, 0x91,
	0xca, 0x32, 0x12, 0x92, 0x45, 0x92, 0xa1, 0x98, 0x1b, 0xed, 0xa7, 0xec, 0x9f, 0x01, 0x12, 0x6f,
	0x95, 0xcc, 0x44, 0x2e, 0x93, 0x99, 0x9c, 0x60, 0x3d, 0xca, 0xbf, 0x5a, 0xbc, 0x0f, 0x87, 0x55,
	0x94, 0xd7, 0x05, 0xf8, 0x77, 0x8b, 0x3f, 0x82, 0x07, 0x6f, 0x28, 0x75, 0x5e, 0xb8, 0xc8, 0xd4,
	0x5a, 0xad, 0xff, 0x69, 0xf1, 0x87, 0xf0, 0xee, 0x48, 0xea, 0x99, 0xf0, 0x56, 0x6a, 0x37, 0x46,
	0x2b, 0xde, 0xd8, 0x92, 0x2f, 0xb7, 0xf9, 0x35, 0xd8, 0x51, 0xfa, 0xd4, 0xd0, 0xe3, 0x65, 0xa5,
	0xff, 0x4a, 0x9b, 0xda, 0x5c, 0xe9, 0x3d, 0xce, 0xf3, 0x4c, 0x2e, 0xc9, 0xf4, 0xd5, 0x36, 0xb5,
	0x08, 0x5f, 0x62, 0x52, 0x50, 0x57, 0x5e, 0xef, 0xf4, 0xb5, 0x36, 0x3f, 0x80, 0xbd, 0xaa, 0x32,
	0xe7, 0xad, 0xca, 0x31, 0x8e, 0x37, 0xf6, 0xf5, 0x36, 0xef, 0xc1, 0xee, 0x05, 0x93, 0xd2, 0x63,
	0xc3, 0x3e, 0x0e, 0xe9, 0x94, 0x9a, 0xda, 0x54, 0xfd, 0x46, 0x9b, 0xdf, 0x82, 0xeb, 0x17, 0x76,
	0x24, 0x85, 0xf3, 0x66, 0x8e, 0x96, 0x1a, 0xf8, 0xcd, 0x36, 0xdf, 0x5f, 0x0d, 0xe9, 0x2a, 0x25,
	0x95, 0xb2, 0x6f, 0x55, 0x85, 0xc4, 0x26, 0x96, 0x38, 0x64, 0x66, 0x42, 0xc6, 0x6f, 0xb7, 0xf9,
	0x1e, 0x6c, 0x57, 0x46, 0x42, 0x9f, 0xb4, 0xdf, 0x69, 0x13, 0x59, 0x0a, 0x4d, 0xb7, 0xbd, 0xf0,
	0x46, 0xd0, 0x93, 0x48, 0xac, 0x3e, 0x54, 0xf6, 0x49, 0x48, 0x46, 0x16, 0xde, 0xd0, 0x84, 0xb0,
	0x13, 0xac, 0x18, 0x87, 0x61, 0x4b, 0xca, 0xbe, 0xdb, 0xe6, 0xb7, 0xe1, 0xe8, 0x53, 0x59, 0x46,
	0xa7, 0x38, 0x21, 0xbf, 0x17, 0x0a, 0x9d, 0xc9, 0xf1, 0x4c, 0x0a, 0x9b, 0x27, 0x82, 0x5e, 0x36,
	0xa6, 0xf0, 0xec, 0x0f, 0x8c, 0x73, 0xb8, 0xe2, 0xde, 0xab, 0x17, 0xff, 0xeb, 0x2e, 0xd5, 0x96,
	0xa7, 0x63, 0x31, 0x41, 0x8d, 0x76, 0x05, 0xf1, 0x6f, 0xba, 0xfc, 0x0e, 0xdc, 0x3a, 0xf7, 0x2d,
	0x3a, 0x2f, 0x2d, 0x0d, 0xb4, 0xda, 0x30, 0xfe, 0x6d, 0x97, 0xd0, 0x3e, 0xe7, 0x45, 0xa9, 0xa8,
	0x8c, 0xfd, 0xae, 0x4b, 0x9f, 0x78, 0x92, 0xa9, 0xf3, 0xb7, 0xcb, 0x0f, 0xf7, 0xeb, 0x9d, 0x23,
	0x66, 0x59, 0x4c, 0xbc, 0x28, 0x6c, 0xc6, 0x7e, 0xb4, 0x5f, 0xef, 0x5c, 0xb5, 0x53, 0xce, 0x91,
	0xfd, 0x38, 0x58, 0x12, 0x63, 0x6d, 0x91, 0x53, 0x02, 0xe1, 0x19, 0x48, 0xf7, 0x34, 0xfb, 0xc9,
	0x3e, 0xa5, 0x4f, 0x3f, 0x63, 0xc4, 0xf9, 0x2b, 0xe1, 0xa7, 0xfb, 0x84, 0x01, 0x3d, 0x65, 0xc4,
	0x28, 0xb1, 0x8b, 0xdc, 0x97, 0x65, 0xfd, 0x2c, 0x84, 0x5a, 0x5e, 0xb8, 0x2a, 0x9f, 0xd2, 0xc4,
	0x57, 0xaf, 0x90, 0xfd, 0x7c, 0x9f, 0x80, 0xad, 0x2c, 0x13, 0x63, 0x26, 0x19, 0x8a, 0x10, 0xd9,
	0xa2, 0xcb, 0x8d, 0x76, 0xc8, 0x7e, 0xb1, 0x4f, 0x5f, 0xb2, 0xd2, 0xf1, 0x76, 0x89, 0x83, 0x9d,
	0x7d, 0xff, 0xd6, 0x83, 0x3e, 0xac, 0x3f, 0xa5, 0xd7, 0x3d, 0xef, 0xc0, 0xfa, 0xe7, 0x51, 0xa7,
	0x82, 0x5d, 0xa2, 0x57, 0xc9, 0xfb, 0xb9, 0x0a, 0x3f, 0x18, 0xd8, 0xda, 0xe3, 0xc7, 0xb0, 0x1e,
	0x5f, 0xa9, 0xf7, 0xe1, 0x32, 0xbd, 0x7e, 0xf8, 0x6e, 0xf5, 0x82, 0xab, 0xbd, 0x85, 0xae, 0x6f,
	0x2e, 0x95, 0x46, 0x4f, 0x46, 0x1b, 0xe1, 0x89, 0xf2, 0xde, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0x58, 0x5a, 0x8b, 0x75, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/common.Agent/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	Ping(context.Context, *PingRequest) (*Pong, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.Agent/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Agent_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/common.proto",
}
