syntax = "proto3";

package logan;

import "bitbucket.org/subiz/header/common/common.proto";

message Trace {
	MemStats mem_stats = 2;
	int32 num_cpu = 3;
	int32 num_goroutine = 4;
	bytes stack_trace = 5;
	string hostname = 6;
}

message KafkaInfo {
	string topic = 2;
	int32 partition = 3;
	int64 offset = 4;
}

message Log {
	common.Context ctx = 1;
	string trace_id = 2;
	int64 created = 8;
	string level = 10;

	Trace trace = 22;
	KafkaInfo kafka = 23;
	bytes text = 24;
}

enum Level {
	debug = 0;
	info = 1;
	notice = 2;
	warning = 3;
	error = 4;
	critical = 5;
	alert = 6;
	emergency = 7;
	panic = 8;
	fatal = 9;
}

enum Event {
	LogLogRequested = 0;
	LogRequested = 1000;
	LogSynced = 1001;
}

message MemStats {
	uint64 alloc = 2;

	// TotalAlloc is cumulative bytes allocated for heap objects.
	//
	// TotalAlloc increases as heap objects are allocated, but
	// unlike Alloc and HeapAlloc, it does not decrease when
	// objects are freed.
	uint64 total_alloc = 3;

	// Sys is the total bytes of memory obtained from the OS.
	//
	// Sys is the sum of the XSys fields below. Sys measures the
	// virtual address space reserved by the Go runtime for the
	// heap, stacks, and other internal data structures. It's
	// likely that not all of the virtual address space is backed
	// by physical memory at any given moment, though in general
	// it all was at some point.
	uint64 sys = 4;

	// Lookups is the number of pointer lookups performed by the
	// runtime.
	//
	// This is primarily useful for debugging runtime internals.
	uint64 lookups = 5;

	// Mallocs is the cumulative count of heap objects allocated.
	// The number of live objects is Mallocs - Frees.
	uint64 mallocs = 6;

	// Frees is the cumulative count of heap objects freed.
	uint64 frees = 7;

	// HeapAlloc is bytes of allocated heap objects.
	//
	// "Allocated" heap objects include all reachable objects, as
	// well as unreachable objects that the garbage collector has
	// not yet freed. Specifically, HeapAlloc increases as heap
	// objects are allocated and decreases as the heap is swept
	// and unreachable objects are freed. Sweeping occurs
	// incrementally between GC cycles, so these two processes
	// occur simultaneously, and as a result HeapAlloc tends to
	// change smoothly (in contrast with the sawtooth that is
	// typical of stop-the-world garbage collectors).
	uint64 heap_alloc = 8;

	// HeapSys is bytes of heap memory obtained from the OS.
	//
	// HeapSys measures the amount of virtual address space
	// reserved for the heap. This includes virtual address space
	// that has been reserved but not yet used, which consumes no
	// physical memory, but tends to be small, as well as virtual
	// address space for which the physical memory has been
	// returned to the OS after it became unused (see HeapReleased
	// for a measure of the latter).
	//
	// HeapSys estimates the largest size the heap has had.
	uint64 heap_sys = 9;

	// HeapIdle is bytes in idle (unused) spans.
	//
	// Idle spans have no objects in them. These spans could be
	// (and may already have been) returned to the OS, or they can
	// be reused for heap allocations, or they can be reused as
	// stack memory.
	//
	// HeapIdle minus HeapReleased estimates the amount of memory
	// that could be returned to the OS, but is being retained by
	// the runtime so it can grow the heap without requesting more
	// memory from the OS. If this difference is significantly
	// larger than the heap size, it indicates there was a recent
	// transient spike in live heap size.
	uint64 heap_idle = 10;

	// HeapInuse is bytes in in-use spans.
	//
	// In-use spans have at least one object in them. These spans
	// can only be used for other objects of roughly the same
	// size.
	//
	// HeapInuse minus HeapAlloc esimates the amount of memory
	// that has been dedicated to particular size classes, but is
	// not currently being used. This is an upper bound on
	// fragmentation, but in general this memory can be reused
	// efficiently.
	uint64 heap_inuse = 11;

	// HeapReleased is bytes of physical memory returned to the OS.
	//
	// This counts heap memory from idle spans that was returned
	// to the OS and has not yet been reacquired for the heap.
	uint64 heap_released = 12;

	// HeapObjects is the number of allocated heap objects.
	//
	// Like HeapAlloc, this increases as objects are allocated and
	// decreases as the heap is swept and unreachable objects are
	// freed.
	uint64 heap_objects = 13;

	// StackInuse is bytes in stack spans.
	//
	// In-use stack spans have at least one stack in them. These
	// spans can only be used for other stacks of the same size.
	//
	// There is no StackIdle because unused stack spans are
	// returned to the heap (and hence counted toward HeapIdle).
	uint64 stack_inuse = 14;

	// StackSys is bytes of stack memory obtained from the OS.
	//
	// StackSys is StackInuse, plus any memory obtained directly
	// from the OS for OS thread stacks (which should be minimal).
	uint64 stack_sys = 15;

	// MSpanInuse is bytes of allocated mspan structures.
	uint64 m_span_inuse = 16;

	// MSpanSys is bytes of memory obtained from the OS for mspan
	// structures.
	uint64 m_span_sys = 17;

	// MCacheInuse is bytes of allocated mcache structures.
	uint64 m_cache_inuse = 18;

	// MCacheSys is bytes of memory obtained from the OS for
	// mcache structures.
	uint64 m_cache_sys = 19;

	// BuckHashSys is bytes of memory in profiling bucket hash tables.
	uint64 buck_hash_sys = 20;

	// GCSys is bytes of memory in garbage collection metadata.
	uint64 gc_sys = 21;

	// OtherSys is bytes of memory in miscellaneous off-heap
	// runtime allocations.
	uint64 other_sys = 22;

	// NextGC is the target heap size of the next GC cycle.
	//
	// The garbage collector's goal is to keep HeapAlloc â‰¤ NextGC.
	// At the end of each GC cycle, the target for the next cycle
	// is computed based on the amount of reachable data and the
	// value of GOGC.
	uint64 next_gc = 23;

	// LastGC is the time the last garbage collection finished, as
	// nanoseconds since 1970 (the UNIX epoch).
	uint64 last_gc = 24;

	// PauseTotalNs is the cumulative nanoseconds in GC
	// stop-the-world pauses since the program started.
	//
	// During a stop-the-world pause, all goroutines are paused
	// and only the garbage collector can run.
	uint64 pause_total_ns = 25;

	// NumGC is the number of completed GC cycles.
	uint32 num_gc = 26;

	// NumForcedGC is the number of GC cycles that were forced by
	// the application calling the GC function.
	uint32 num_forced_gc = 27;

	// GCCPUFraction is the fraction of this program's available
	// CPU time used by the GC since the program started.
	//
	// GCCPUFraction is expressed as a number between 0 and 1,
	// where 0 means GC has consumed none of this program's CPU. A
	// program's available CPU time is defined as the integral of
	// GOMAXPROCS since the program started. That is, if
	// GOMAXPROCS is 2 and a program has been running for 10
	// seconds, its "available CPU" is 20 seconds. GCCPUFraction
	// does not include CPU time used for write barrier activity.
	//
	// This is the same as the fraction of CPU reported by
	// GODEBUG=gctrace=1.
	double gc_cpu_fraction = 28;
}