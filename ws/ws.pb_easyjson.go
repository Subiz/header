// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ws

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDfe29628DecodeGithubComSubizHeaderWs(in *jlexer.Lexer, out *myServerClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfe29628EncodeGithubComSubizHeaderWs(out *jwriter.Writer, in myServerClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v myServerClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfe29628EncodeGithubComSubizHeaderWs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v myServerClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfe29628EncodeGithubComSubizHeaderWs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *myServerClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfe29628DecodeGithubComSubizHeaderWs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *myServerClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfe29628DecodeGithubComSubizHeaderWs(l, v)
}
func easyjsonDfe29628DecodeGithubComSubizHeaderWs1(in *jlexer.Lexer, out *Subscribe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]string, 0, 4)
					} else {
						out.Events = []string{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "connection_id":
			out.ConnectionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfe29628EncodeGithubComSubizHeaderWs1(out *jwriter.Writer, in Subscribe) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.ConnectionId != "" {
		const prefix string = ",\"connection_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscribe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfe29628EncodeGithubComSubizHeaderWs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscribe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfe29628EncodeGithubComSubizHeaderWs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscribe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfe29628DecodeGithubComSubizHeaderWs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscribe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfe29628DecodeGithubComSubizHeaderWs1(l, v)
}
func easyjsonDfe29628DecodeGithubComSubizHeaderWs2(in *jlexer.Lexer, out *Payload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfe29628EncodeGithubComSubizHeaderWs2(out *jwriter.Writer, in Payload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfe29628EncodeGithubComSubizHeaderWs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfe29628EncodeGithubComSubizHeaderWs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfe29628DecodeGithubComSubizHeaderWs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfe29628DecodeGithubComSubizHeaderWs2(l, v)
}
func easyjsonDfe29628DecodeGithubComSubizHeaderWs3(in *jlexer.Lexer, out *ListRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "connection_id":
			out.ConnectionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfe29628EncodeGithubComSubizHeaderWs3(out *jwriter.Writer, in ListRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.ConnectionId != "" {
		const prefix string = ",\"connection_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfe29628EncodeGithubComSubizHeaderWs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfe29628EncodeGithubComSubizHeaderWs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfe29628DecodeGithubComSubizHeaderWs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfe29628DecodeGithubComSubizHeaderWs3(l, v)
}
func easyjsonDfe29628DecodeGithubComSubizHeaderWs4(in *jlexer.Lexer, out *AllType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.Sub = nil
			} else {
				if out.Sub == nil {
					out.Sub = new(Subscribe)
				}
				(*out.Sub).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfe29628EncodeGithubComSubizHeaderWs4(out *jwriter.Writer, in AllType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sub != nil {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sub).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfe29628EncodeGithubComSubizHeaderWs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfe29628EncodeGithubComSubizHeaderWs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfe29628DecodeGithubComSubizHeaderWs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfe29628DecodeGithubComSubizHeaderWs4(l, v)
}
