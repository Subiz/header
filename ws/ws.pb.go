// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ws/ws.proto

/*
Package ws is a generated protocol buffer package.

It is generated from these files:
	ws/ws.proto

It has these top-level messages:
	AllType
	Subscribe
	ListRequest
	Payload
*/
package ws

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_WsSynced    Event = 0
	Event_WsRequested Event = 1
	Event_WsSend      Event = 10
)

var Event_name = map[int32]string{
	0:  "WsSynced",
	1:  "WsRequested",
	10: "WsSend",
}
var Event_value = map[string]int32{
	"WsSynced":    0,
	"WsRequested": 1,
	"WsSend":      10,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AllType struct {
	Sub *Subscribe `protobuf:"bytes,2,opt,name=sub" json:"sub,omitempty"`
}

func (m *AllType) Reset()                    { *m = AllType{} }
func (m *AllType) String() string            { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()               {}
func (*AllType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllType) GetSub() *Subscribe {
	if m != nil {
		return m.Sub
	}
	return nil
}

type Subscribe struct {
	// common.Context ctx = 1;
	// optional string connection_id = 2;
	Events       []string `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	ConnectionId string   `protobuf:"bytes,5,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *Subscribe) Reset()                    { *m = Subscribe{} }
func (m *Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()               {}
func (*Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Subscribe) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Subscribe) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type ListRequest struct {
	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	ConnectionId string          `protobuf:"bytes,2,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type Payload struct {
	Id      int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Error   string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Payload) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Payload) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Payload) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*AllType)(nil), "ws.AllType")
	proto.RegisterType((*Subscribe)(nil), "ws.Subscribe")
	proto.RegisterType((*ListRequest)(nil), "ws.ListRequest")
	proto.RegisterType((*Payload)(nil), "ws.Payload")
	proto.RegisterEnum("ws.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyServer service

type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := grpc.Invoke(ctx, "/ws.MyServer/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServerClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/ws.MyServer/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyServer service

type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.MyServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ws.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MyServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws/ws.proto",
}

func init() { proto.RegisterFile("ws/ws.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4b, 0xeb, 0x40,
	0x10, 0xc5, 0x6f, 0x92, 0xfe, 0x9d, 0xb4, 0xb7, 0x65, 0xef, 0xe5, 0x12, 0xfa, 0x70, 0x8d, 0xf5,
	0x25, 0xf6, 0x21, 0x81, 0xfa, 0x09, 0x44, 0x05, 0x0b, 0x0a, 0x25, 0xb1, 0xf4, 0x51, 0x92, 0xec,
	0x10, 0x17, 0xdb, 0xdd, 0xba, 0xbb, 0x69, 0x1a, 0x3f, 0xbd, 0xa4, 0x4d, 0xab, 0xa0, 0x4f, 0xcb,
	0xef, 0x0c, 0x73, 0xf6, 0xcc, 0x0c, 0xd8, 0x85, 0x0a, 0x0a, 0xe5, 0x6f, 0xa4, 0xd0, 0x82, 0x98,
	0x85, 0x1a, 0xf9, 0x09, 0xd3, 0x49, 0x9e, 0xbe, 0xa2, 0xf6, 0x85, 0xcc, 0x02, 0x95, 0x27, 0xec,
	0x3d, 0x78, 0xc1, 0x98, 0xa2, 0x0c, 0x52, 0xb1, 0x5e, 0x0b, 0x5e, 0x3f, 0x87, 0x9e, 0xf1, 0x04,
	0xda, 0xd7, 0xab, 0xd5, 0x53, 0xb9, 0x41, 0x72, 0x06, 0x96, 0xca, 0x13, 0xc7, 0x74, 0x0d, 0xcf,
	0x9e, 0xf6, 0xfd, 0x42, 0xf9, 0x51, 0x9e, 0xa8, 0x54, 0xb2, 0x04, 0xc3, 0xaa, 0x32, 0xbe, 0x87,
	0xee, 0x49, 0x21, 0xff, 0xa0, 0x85, 0x5b, 0xe4, 0x5a, 0x39, 0x96, 0x6b, 0x79, 0xdd, 0xb0, 0x26,
	0x72, 0x01, 0xfd, 0x54, 0x70, 0x8e, 0xa9, 0x66, 0x82, 0x3f, 0x33, 0xea, 0x34, 0x5d, 0xc3, 0xeb,
	0x86, 0xbd, 0x4f, 0x71, 0x46, 0xc7, 0x0b, 0xb0, 0x1f, 0x98, 0xd2, 0x21, 0xbe, 0xe5, 0xa8, 0x34,
	0x39, 0x07, 0x2b, 0xd5, 0x3b, 0xc7, 0xd8, 0xff, 0x3c, 0xf0, 0xeb, 0x80, 0x37, 0x82, 0x6b, 0xdc,
	0xe9, 0xb0, 0xaa, 0x7d, 0xb7, 0x35, 0x7f, 0xb0, 0x9d, 0x41, 0x7b, 0x1e, 0x97, 0x2b, 0x11, 0x53,
	0xf2, 0x1b, 0x4c, 0x46, 0x1d, 0xcb, 0x35, 0x3c, 0x2b, 0x34, 0x19, 0x25, 0x0e, 0xb4, 0xd7, 0xa8,
	0x54, 0x9c, 0xa1, 0xd3, 0xd8, 0x77, 0x1e, 0x91, 0xfc, 0x85, 0x26, 0x4a, 0x29, 0x64, 0x1d, 0xf4,
	0x00, 0x93, 0x29, 0x34, 0xef, 0xaa, 0x81, 0x48, 0x0f, 0x3a, 0x4b, 0x15, 0x95, 0x3c, 0x45, 0x3a,
	0xfc, 0x45, 0x06, 0x60, 0x2f, 0x55, 0x1d, 0x1b, 0xe9, 0xd0, 0x20, 0x00, 0xad, 0xa5, 0x8a, 0x90,
	0xd3, 0x21, 0x4c, 0x17, 0xd0, 0x79, 0x2c, 0x23, 0x94, 0x5b, 0x94, 0xe4, 0x3f, 0x98, 0xb7, 0x82,
	0xd8, 0xd5, 0x16, 0xeb, 0xfd, 0x8e, 0xbe, 0x02, 0xb9, 0x84, 0xc6, 0x9c, 0xf1, 0x8c, 0xfc, 0x39,
	0x4e, 0x5b, 0x51, 0x6d, 0x3c, 0xea, 0x9d, 0x44, 0xc1, 0xb3, 0xa4, 0xb5, 0xbf, 0xd4, 0xd5, 0x47,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x31, 0xaa, 0xd0, 0xec, 0x01, 0x00, 0x00,
}
