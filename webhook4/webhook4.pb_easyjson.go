// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package webhook4

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson756e1f29DecodeGithubComSubizHeaderWebhook4(in *jlexer.Lexer, out *webhookServiceClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson756e1f29EncodeGithubComSubizHeaderWebhook4(out *jwriter.Writer, in webhookServiceClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v webhookServiceClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v webhookServiceClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *webhookServiceClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *webhookServiceClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook4(l, v)
}
func easyjson756e1f29DecodeGithubComSubizHeaderWebhook41(in *jlexer.Lexer, out *WebhookPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "hub_id":
			if in.IsNull() {
				in.Skip()
				out.HubId = nil
			} else {
				if out.HubId == nil {
					out.HubId = new(string)
				}
				*out.HubId = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(string)
				}
				*out.Event = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson756e1f29EncodeGithubComSubizHeaderWebhook41(out *jwriter.Writer, in WebhookPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.HubId != nil {
		const prefix string = ",\"hub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.HubId))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Event))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebhookPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebhookPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook41(l, v)
}
func easyjson756e1f29DecodeGithubComSubizHeaderWebhook42(in *jlexer.Lexer, out *WebhookFire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "client_id":
			if in.IsNull() {
				in.Skip()
				out.ClientId = nil
			} else {
				if out.ClientId == nil {
					out.ClientId = new(string)
				}
				*out.ClientId = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson756e1f29EncodeGithubComSubizHeaderWebhook42(out *jwriter.Writer, in WebhookFire) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.ClientId != nil {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ClientId))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebhookFire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookFire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebhookFire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookFire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook42(l, v)
}
func easyjson756e1f29DecodeGithubComSubizHeaderWebhook43(in *jlexer.Lexer, out *Webhook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "client_id":
			if in.IsNull() {
				in.Skip()
				out.ClientId = nil
			} else {
				if out.ClientId == nil {
					out.ClientId = new(string)
				}
				*out.ClientId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(string)
				}
				*out.Secret = string(in.String())
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]string, 0, 4)
					} else {
						out.Events = []string{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Events = append(out.Events, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "last_hook_at":
			if in.IsNull() {
				in.Skip()
				out.LastHookAt = nil
			} else {
				if out.LastHookAt == nil {
					out.LastHookAt = new(int64)
				}
				*out.LastHookAt = int64(in.Int64())
			}
		case "last_hook_id":
			if in.IsNull() {
				in.Skip()
				out.LastHookId = nil
			} else {
				if out.LastHookId == nil {
					out.LastHookId = new(int64)
				}
				*out.LastHookId = int64(in.Int64())
			}
		case "events_count":
			if in.IsNull() {
				in.Skip()
				out.EventsCount = nil
			} else {
				if out.EventsCount == nil {
					out.EventsCount = new(int64)
				}
				*out.EventsCount = int64(in.Int64())
			}
		case "last_hook_response":
			if in.IsNull() {
				in.Skip()
				out.LastHookResponse = nil
			} else {
				if out.LastHookResponse == nil {
					out.LastHookResponse = new(string)
				}
				*out.LastHookResponse = string(in.String())
			}
		case "last_hook_status":
			if in.IsNull() {
				in.Skip()
				out.LastHookStatus = nil
			} else {
				if out.LastHookStatus == nil {
					out.LastHookStatus = new(int32)
				}
				*out.LastHookStatus = int32(in.Int32())
			}
		case "last_hook_payload":
			if in.IsNull() {
				in.Skip()
				out.LastHookPayload = nil
			} else {
				if out.LastHookPayload == nil {
					out.LastHookPayload = new(string)
				}
				*out.LastHookPayload = string(in.String())
			}
		case "backoffs_count":
			if in.IsNull() {
				in.Skip()
				out.BackoffsCount = nil
			} else {
				if out.BackoffsCount == nil {
					out.BackoffsCount = new(int64)
				}
				*out.BackoffsCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson756e1f29EncodeGithubComSubizHeaderWebhook43(out *jwriter.Writer, in Webhook) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ClientId != nil {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ClientId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Secret))
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Events {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.LastHookAt != nil {
		const prefix string = ",\"last_hook_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.LastHookAt))
	}
	if in.LastHookId != nil {
		const prefix string = ",\"last_hook_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.LastHookId))
	}
	if in.EventsCount != nil {
		const prefix string = ",\"events_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.EventsCount))
	}
	if in.LastHookResponse != nil {
		const prefix string = ",\"last_hook_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastHookResponse))
	}
	if in.LastHookStatus != nil {
		const prefix string = ",\"last_hook_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.LastHookStatus))
	}
	if in.LastHookPayload != nil {
		const prefix string = ",\"last_hook_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastHookPayload))
	}
	if in.BackoffsCount != nil {
		const prefix string = ",\"backoffs_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.BackoffsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Webhook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Webhook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson756e1f29EncodeGithubComSubizHeaderWebhook43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Webhook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Webhook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson756e1f29DecodeGithubComSubizHeaderWebhook43(l, v)
}
