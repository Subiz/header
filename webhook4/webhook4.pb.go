// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webhook4/webhook4.proto

/*
Package webhook4 is a generated protocol buffer package.

It is generated from these files:
	webhook4/webhook4.proto

It has these top-level messages:
	Retry
	Webhook
*/
package webhook4

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_Webhook4RetryCallback          Event = 0
	Event_Webhook4WebhookReadRequested   Event = 3
	Event_Webhook4WebhookUpserted        Event = 4
	Event_Webhook4WebhookVerifyRequested Event = 5
	Event_Webhook4Requested              Event = 6
	Event_Webhook4ClearBackoffRequested  Event = 7
	Event_Webhook4PurgeQueueRequested    Event = 8
	Event_Webhook4ShardSend              Event = 9
)

var Event_name = map[int32]string{
	0: "Webhook4RetryCallback",
	3: "Webhook4WebhookReadRequested",
	4: "Webhook4WebhookUpserted",
	5: "Webhook4WebhookVerifyRequested",
	6: "Webhook4Requested",
	7: "Webhook4ClearBackoffRequested",
	8: "Webhook4PurgeQueueRequested",
	9: "Webhook4ShardSend",
}
var Event_value = map[string]int32{
	"Webhook4RetryCallback":          0,
	"Webhook4WebhookReadRequested":   3,
	"Webhook4WebhookUpserted":        4,
	"Webhook4WebhookVerifyRequested": 5,
	"Webhook4Requested":              6,
	"Webhook4ClearBackoffRequested":  7,
	"Webhook4PurgeQueueRequested":    8,
	"Webhook4ShardSend":              9,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Webhook_State int32

const (
	Webhook_normal   Webhook_State = 0
	Webhook_backoff  Webhook_State = 1
	Webhook_inactive Webhook_State = 2
)

var Webhook_State_name = map[int32]string{
	0: "normal",
	1: "backoff",
	2: "inactive",
}
var Webhook_State_value = map[string]int32{
	"normal":   0,
	"backoff":  1,
	"inactive": 2,
}

func (x Webhook_State) Enum() *Webhook_State {
	p := new(Webhook_State)
	*p = x
	return p
}
func (x Webhook_State) String() string {
	return proto.EnumName(Webhook_State_name, int32(x))
}
func (x *Webhook_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Webhook_State_value, data, "Webhook_State")
	if err != nil {
		return err
	}
	*x = Webhook_State(value)
	return nil
}
func (Webhook_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Retry struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Partition        *string         `protobuf:"bytes,2,opt,name=partition" json:"partition,omitempty"`
	Queue            *string         `protobuf:"bytes,3,opt,name=queue" json:"queue,omitempty"`
	JobId            *string         `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	NBackoff         *int32          `protobuf:"varint,5,opt,name=n_backoff,json=nBackoff" json:"n_backoff,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Retry) Reset()                    { *m = Retry{} }
func (m *Retry) String() string            { return proto.CompactTextString(m) }
func (*Retry) ProtoMessage()               {}
func (*Retry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Retry) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Retry) GetPartition() string {
	if m != nil && m.Partition != nil {
		return *m.Partition
	}
	return ""
}

func (m *Retry) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *Retry) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

func (m *Retry) GetNBackoff() int32 {
	if m != nil && m.NBackoff != nil {
		return *m.NBackoff
	}
	return 0
}

type Webhook struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,12,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ClientId         *string         `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Url              *string         `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Secret           *string         `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	Events           []string        `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
	State            *string         `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	NextHookAt       *int64          `protobuf:"varint,8,opt,name=next_hook_at,json=nextHookAt" json:"next_hook_at,omitempty"`
	LastHookAt       *int64          `protobuf:"varint,9,opt,name=last_hook_at,json=lastHookAt" json:"last_hook_at,omitempty"`
	LastHookId       *int64          `protobuf:"varint,10,opt,name=last_hook_id,json=lastHookId" json:"last_hook_id,omitempty"`
	LastHookResult   *int32          `protobuf:"varint,11,opt,name=last_hook_result,json=lastHookResult" json:"last_hook_result,omitempty"`
	EventsCount      *int64          `protobuf:"varint,13,opt,name=events_count,json=eventsCount" json:"events_count,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Webhook) Reset()                    { *m = Webhook{} }
func (m *Webhook) String() string            { return proto.CompactTextString(m) }
func (*Webhook) ProtoMessage()               {}
func (*Webhook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Webhook) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Webhook) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Webhook) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *Webhook) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *Webhook) GetSecret() string {
	if m != nil && m.Secret != nil {
		return *m.Secret
	}
	return ""
}

func (m *Webhook) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Webhook) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Webhook) GetNextHookAt() int64 {
	if m != nil && m.NextHookAt != nil {
		return *m.NextHookAt
	}
	return 0
}

func (m *Webhook) GetLastHookAt() int64 {
	if m != nil && m.LastHookAt != nil {
		return *m.LastHookAt
	}
	return 0
}

func (m *Webhook) GetLastHookId() int64 {
	if m != nil && m.LastHookId != nil {
		return *m.LastHookId
	}
	return 0
}

func (m *Webhook) GetLastHookResult() int32 {
	if m != nil && m.LastHookResult != nil {
		return *m.LastHookResult
	}
	return 0
}

func (m *Webhook) GetEventsCount() int64 {
	if m != nil && m.EventsCount != nil {
		return *m.EventsCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Retry)(nil), "webhook4.Retry")
	proto.RegisterType((*Webhook)(nil), "webhook4.Webhook")
	proto.RegisterEnum("webhook4.Event", Event_name, Event_value)
	proto.RegisterEnum("webhook4.Webhook_State", Webhook_State_name, Webhook_State_value)
}

func init() { proto.RegisterFile("webhook4/webhook4.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0x97, 0x65, 0x69, 0xd3, 0xd3, 0xfe, 0xff, 0x04, 0x8b, 0x32, 0x43, 0x37, 0x48, 0x7b,
	0x55, 0x71, 0xd1, 0x4a, 0x68, 0x2f, 0x00, 0x15, 0x12, 0xbd, 0x83, 0x54, 0xc0, 0x65, 0xe5, 0x24,
	0xa7, 0x6b, 0xd6, 0xd4, 0xee, 0x9c, 0x93, 0xd1, 0xf1, 0x18, 0xbc, 0x02, 0x0f, 0xc9, 0x2d, 0x72,
	0x9c, 0x28, 0x30, 0x71, 0xc1, 0x95, 0x7d, 0x7e, 0xdf, 0x67, 0xfb, 0x3b, 0xb6, 0xe1, 0xfc, 0x2b,
	0xc6, 0x5b, 0xa5, 0x76, 0x57, 0xf3, 0x66, 0x32, 0x3b, 0x68, 0x45, 0x8a, 0xf9, 0x4d, 0xfd, 0x7c,
	0x16, 0x67, 0x14, 0x97, 0xc9, 0x0e, 0x69, 0xa6, 0xf4, 0xf5, 0xbc, 0x28, 0xe3, 0xec, 0xdb, 0x7c,
	0x8b, 0x22, 0x45, 0x3d, 0x4f, 0xd4, 0x7e, 0xaf, 0x64, 0x3d, 0xd8, 0x95, 0x93, 0xef, 0x0e, 0x78,
	0x11, 0x92, 0xbe, 0x67, 0x63, 0x70, 0x13, 0x3a, 0x72, 0x27, 0x74, 0xa6, 0xfd, 0xd7, 0x8f, 0x66,
	0xb5, 0x6b, 0xa1, 0x24, 0xe1, 0x91, 0x22, 0xa3, 0xb1, 0x0b, 0xe8, 0x1d, 0x84, 0xa6, 0x8c, 0x32,
	0x25, 0xf9, 0x69, 0xe8, 0x4c, 0x7b, 0x51, 0x0b, 0xd8, 0x13, 0xf0, 0x6e, 0x4b, 0x2c, 0x91, 0xbb,
	0x95, 0x62, 0x0b, 0x36, 0x84, 0xce, 0x8d, 0x8a, 0xd7, 0x59, 0xca, 0xcf, 0x2c, 0xbe, 0x51, 0xf1,
	0x32, 0x65, 0x23, 0xe8, 0xc9, 0x75, 0x2c, 0x92, 0x9d, 0xda, 0x6c, 0xb8, 0x17, 0x3a, 0x53, 0x2f,
	0xf2, 0xe5, 0x5b, 0x5b, 0x4f, 0x7e, 0xb8, 0xd0, 0xfd, 0x62, 0x3b, 0xfa, 0x97, 0x58, 0x97, 0x00,
	0x22, 0x49, 0x54, 0x29, 0xc9, 0x1c, 0x33, 0xb0, 0xb9, 0x6a, 0x62, 0x8f, 0x4a, 0xf2, 0x0c, 0xad,
	0x6a, 0x53, 0xfb, 0x16, 0x2c, 0x53, 0x16, 0x80, 0x5b, 0xea, 0xbc, 0x8e, 0x6c, 0xa6, 0xec, 0x29,
	0x74, 0x0a, 0x4c, 0x34, 0x52, 0x1d, 0xb8, 0xae, 0x0c, 0xc7, 0x3b, 0x94, 0x54, 0xf0, 0x4e, 0xe8,
	0x1a, 0x6e, 0x2b, 0xd3, 0x76, 0x41, 0x82, 0x90, 0x77, 0x6d, 0x7f, 0x55, 0xc1, 0x42, 0x18, 0x48,
	0x3c, 0xd2, 0xda, 0xf4, 0xb0, 0x16, 0xc4, 0xfd, 0xd0, 0x99, 0xba, 0x11, 0x18, 0xf6, 0x5e, 0xa9,
	0xdd, 0x1b, 0x32, 0x8e, 0x5c, 0x14, 0xad, 0xa3, 0x67, 0x1d, 0x86, 0xfd, 0xcd, 0x91, 0xa5, 0x1c,
	0xfe, 0x74, 0x2c, 0x53, 0x36, 0x85, 0xa0, 0x75, 0x68, 0x2c, 0xca, 0x9c, 0x78, 0xbf, 0xba, 0xcc,
	0xff, 0x1b, 0x57, 0x54, 0x51, 0x36, 0x86, 0x81, 0xcd, 0xbb, 0xae, 0xae, 0x85, 0xff, 0x57, 0xed,
	0xd5, 0xb7, 0x6c, 0x61, 0xd0, 0x64, 0x06, 0xde, 0xaa, 0xca, 0x0e, 0xd0, 0x91, 0x4a, 0xef, 0x45,
	0x1e, 0x9c, 0xb0, 0x3e, 0x74, 0xeb, 0x57, 0x0a, 0x1c, 0x36, 0x00, 0x3f, 0x93, 0x22, 0xa1, 0xec,
	0x0e, 0x83, 0xd3, 0x57, 0x3f, 0x1d, 0xf0, 0xde, 0x99, 0xf5, 0xec, 0x19, 0x0c, 0xeb, 0xe7, 0xba,
	0xaa, 0xfe, 0xd2, 0x42, 0xe4, 0xb9, 0x59, 0x15, 0x9c, 0xb0, 0x10, 0x2e, 0x1a, 0xa9, 0x1e, 0x23,
	0x14, 0x69, 0x84, 0xb7, 0x25, 0x16, 0x84, 0x69, 0xe0, 0xb2, 0x11, 0x9c, 0x3f, 0x70, 0x7c, 0x3a,
	0x14, 0xa8, 0x8d, 0x78, 0xc6, 0x26, 0xf0, 0xe2, 0x81, 0xf8, 0x19, 0x75, 0xb6, 0xb9, 0x6f, 0x37,
	0xf0, 0xd8, 0x10, 0x1e, 0xb7, 0xa7, 0x37, 0xb8, 0xc3, 0xc6, 0x70, 0xd9, 0xe0, 0x45, 0x8e, 0x42,
	0xd7, 0x9f, 0xab, 0xb5, 0x74, 0xd9, 0x4b, 0x18, 0x35, 0x96, 0x0f, 0xa5, 0xbe, 0xc6, 0x8f, 0xe6,
	0xc7, 0xb6, 0x06, 0xff, 0xf7, 0xad, 0x57, 0x5b, 0xa1, 0xd3, 0x15, 0xca, 0x34, 0xe8, 0xfd, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0xb5, 0xf7, 0x90, 0x88, 0x03, 0x00, 0x00,
}
