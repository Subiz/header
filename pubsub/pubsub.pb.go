// Code generated by protoc-gen-go.
// source: pubsub/pubsub.proto
// DO NOT EDIT!

/*
Package pubsub is a generated protocol buffer package.

It is generated from these files:
	pubsub/pubsub.proto

It has these top-level messages:
	Empty
	Subscription
	ListRequest
	Subscribers
*/
package pubsub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Subscription struct {
	Topic      string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Subscriber string `protobuf:"bytes,2,opt,name=Subscriber" json:"Subscriber,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

type ListRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Start string `protobuf:"bytes,2,opt,name=Start" json:"Start,omitempty"`
	Limit int32  `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ListRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Subscribers struct {
	Subscribers []string `protobuf:"bytes,1,rep,name=Subscribers" json:"Subscribers,omitempty"`
}

func (m *Subscribers) Reset()                    { *m = Subscribers{} }
func (m *Subscribers) String() string            { return proto.CompactTextString(m) }
func (*Subscribers) ProtoMessage()               {}
func (*Subscribers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Subscribers) GetSubscribers() []string {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pubsub.Empty")
	proto.RegisterType((*Subscription)(nil), "pubsub.Subscription")
	proto.RegisterType((*ListRequest)(nil), "pubsub.ListRequest")
	proto.RegisterType((*Subscribers)(nil), "pubsub.Subscribers")
}

func init() { proto.RegisterFile("pubsub/pubsub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0x4d, 0x2a,
	0x2e, 0x4d, 0xd2, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x12,
	0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x92, 0x0b, 0x17, 0x4f, 0x70, 0x69, 0x52, 0x71,
	0x72, 0x51, 0x66, 0x41, 0x49, 0x66, 0x7e, 0x9e, 0x90, 0x08, 0x17, 0x6b, 0x48, 0x7e, 0x41, 0x66,
	0xb2, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x23, 0x24, 0xc7, 0xc5, 0x05, 0x55, 0x95,
	0x94, 0x5a, 0x24, 0xc1, 0x04, 0x96, 0x42, 0x12, 0x51, 0xf2, 0xe7, 0xe2, 0xf6, 0xc9, 0x2c, 0x2e,
	0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xc1, 0x61, 0x88, 0x08, 0x17, 0x6b, 0x70, 0x49, 0x62,
	0x51, 0x09, 0x54, 0x3f, 0x84, 0x03, 0x12, 0xf5, 0xc9, 0xcc, 0xcd, 0x2c, 0x91, 0x60, 0x56, 0x60,
	0xd4, 0x60, 0x0d, 0x82, 0x70, 0x94, 0xf4, 0xb9, 0xb8, 0x11, 0xc6, 0x17, 0x0b, 0x29, 0xa0, 0x70,
	0x25, 0x18, 0x15, 0x98, 0x35, 0x38, 0x83, 0x90, 0x85, 0x92, 0xd8, 0xc0, 0xfe, 0x33, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x7f, 0xfa, 0x93, 0xf6, 0x00, 0x00, 0x00,
}
