// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub/pubsub.proto

package pubsub

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_PubsubSynced    Event = 0
	Event_PubsubRequested Event = 1
	Event_PubsubPublish   Event = 2
)

var Event_name = map[int32]string{
	0: "PubsubSynced",
	1: "PubsubRequested",
	2: "PubsubPublish",
}

var Event_value = map[string]int32{
	"PubsubSynced":    0,
	"PubsubRequested": 1,
	"PubsubPublish":   2,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce310d0bb9f289ed, []int{0}
}

type Subscription struct {
	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Topic  string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// optional SubscribeScope scope = 5;
	// optional string account_id = 6;
	SubId                string   `protobuf:"bytes,7,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	TargetTopic          string   `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	TargetKey            string   `protobuf:"bytes,11,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Ttls                 int64    `protobuf:"varint,12,opt,name=ttls,proto3" json:"ttls,omitempty"`
	RouterTopic          string   `protobuf:"bytes,13,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	TargetPartition      int32    `protobuf:"varint,14,opt,name=target_partition,json=targetPartition,proto3" json:"target_partition,omitempty"`
	Topics               []string `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce310d0bb9f289ed, []int{0}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Subscription) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *Subscription) GetTargetTopic() string {
	if m != nil {
		return m.TargetTopic
	}
	return ""
}

func (m *Subscription) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

func (m *Subscription) GetTtls() int64 {
	if m != nil {
		return m.Ttls
	}
	return 0
}

func (m *Subscription) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *Subscription) GetTargetPartition() int32 {
	if m != nil {
		return m.TargetPartition
	}
	return 0
}

func (m *Subscription) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type PublishMessage struct {
	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topics  []string        `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Payload []byte          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// user_ids bloom filter: only those users can get message
	UserIdsFilter     []byte `protobuf:"bytes,5,opt,name=user_ids_filter,json=userIdsFilter,proto3" json:"user_ids_filter,omitempty"`
	FilterItemBitSize int32  `protobuf:"varint,7,opt,name=filter_item_bit_size,json=filterItemBitSize,proto3" json:"filter_item_bit_size,omitempty"`
	FilterHashCount   int32  `protobuf:"varint,8,opt,name=filter_hash_count,json=filterHashCount,proto3" json:"filter_hash_count,omitempty"`
	// negative user_ids bloom filter: those users wont get the message
	NegUserIdsFilter     []byte   `protobuf:"bytes,6,opt,name=neg_user_ids_filter,json=negUserIdsFilter,proto3" json:"neg_user_ids_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishMessage) Reset()         { *m = PublishMessage{} }
func (m *PublishMessage) String() string { return proto.CompactTextString(m) }
func (*PublishMessage) ProtoMessage()    {}
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce310d0bb9f289ed, []int{1}
}

func (m *PublishMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishMessage.Unmarshal(m, b)
}
func (m *PublishMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishMessage.Marshal(b, m, deterministic)
}
func (m *PublishMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishMessage.Merge(m, src)
}
func (m *PublishMessage) XXX_Size() int {
	return xxx_messageInfo_PublishMessage.Size(m)
}
func (m *PublishMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PublishMessage proto.InternalMessageInfo

func (m *PublishMessage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PublishMessage) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *PublishMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublishMessage) GetUserIdsFilter() []byte {
	if m != nil {
		return m.UserIdsFilter
	}
	return nil
}

func (m *PublishMessage) GetFilterItemBitSize() int32 {
	if m != nil {
		return m.FilterItemBitSize
	}
	return 0
}

func (m *PublishMessage) GetFilterHashCount() int32 {
	if m != nil {
		return m.FilterHashCount
	}
	return 0
}

func (m *PublishMessage) GetNegUserIdsFilter() []byte {
	if m != nil {
		return m.NegUserIdsFilter
	}
	return nil
}

func init() {
	proto.RegisterEnum("pubsub.Event", Event_name, Event_value)
	proto.RegisterType((*Subscription)(nil), "pubsub.Subscription")
	proto.RegisterType((*PublishMessage)(nil), "pubsub.PublishMessage")
}

func init() { proto.RegisterFile("pubsub/pubsub.proto", fileDescriptor_ce310d0bb9f289ed) }

var fileDescriptor_ce310d0bb9f289ed = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdd, 0x6e, 0xd3, 0x4e,
	0x10, 0xc5, 0xff, 0xce, 0x87, 0xfb, 0xcf, 0xc4, 0x69, 0xdc, 0x4d, 0x00, 0x2b, 0x12, 0x92, 0xdb,
	0x0b, 0x94, 0x16, 0x91, 0xa0, 0xf0, 0x04, 0x50, 0x15, 0x11, 0x21, 0xa4, 0xc8, 0xa1, 0xd7, 0x96,
	0x3f, 0x06, 0x7b, 0x45, 0xec, 0x35, 0xde, 0x59, 0xd4, 0xe4, 0x4d, 0xfa, 0x1c, 0xbc, 0x20, 0xf2,
	0xae, 0x03, 0x11, 0x57, 0x70, 0xe5, 0x9c, 0xdf, 0xcc, 0x1c, 0xcd, 0x1e, 0x4d, 0x60, 0x52, 0xa9,
	0x58, 0xaa, 0x78, 0x69, 0x3e, 0x8b, 0xaa, 0x16, 0x24, 0x98, 0x6d, 0xd4, 0xec, 0x65, 0xc6, 0x29,
	0x57, 0xf1, 0x22, 0x11, 0xc5, 0x52, 0xaa, 0x98, 0x1f, 0x96, 0x39, 0x46, 0x29, 0xd6, 0xcb, 0x44,
	0x14, 0x85, 0x28, 0xdb, 0x8f, 0x19, 0xba, 0xfa, 0xd1, 0x01, 0x67, 0xab, 0x62, 0x99, 0xd4, 0xbc,
	0x22, 0x2e, 0x4a, 0x76, 0x09, 0xdd, 0x84, 0x1e, 0x3c, 0xcb, 0xb7, 0xe6, 0xc3, 0xd5, 0x78, 0xd1,
	0x36, 0xdf, 0x8a, 0x92, 0xf0, 0x81, 0x82, 0xa6, 0xc6, 0x9e, 0xc1, 0x99, 0x92, 0x58, 0x87, 0x3c,
	0xf5, 0x3a, 0xbe, 0x35, 0x1f, 0x04, 0x76, 0x23, 0xd7, 0x29, 0x9b, 0x42, 0x9f, 0x44, 0xc5, 0x13,
	0xaf, 0xab, 0xb1, 0x11, 0xec, 0x09, 0xd8, 0x52, 0xc5, 0x4d, 0xf7, 0x99, 0xc1, 0x52, 0xc5, 0xeb,
	0x94, 0x5d, 0x82, 0x43, 0x51, 0x9d, 0x21, 0x85, 0x66, 0x06, 0x74, 0x71, 0x68, 0xd8, 0x67, 0x3d,
	0xf9, 0x1c, 0xa0, 0x6d, 0xf9, 0x8a, 0x7b, 0x6f, 0xa8, 0x1b, 0x06, 0x86, 0x7c, 0xc4, 0x3d, 0x63,
	0xd0, 0x23, 0xda, 0x49, 0xcf, 0xf1, 0xad, 0x79, 0x37, 0xd0, 0xbf, 0x1b, 0xd7, 0x5a, 0x28, 0xc2,
	0xba, 0x75, 0x1d, 0x19, 0x57, 0xc3, 0x8c, 0xeb, 0x35, 0xb8, 0xad, 0x6b, 0x15, 0xd5, 0xc4, 0x9b,
	0x57, 0x7b, 0xe7, 0xbe, 0x35, 0xef, 0x07, 0x63, 0xc3, 0x37, 0x47, 0xcc, 0x9e, 0x82, 0xad, 0x6d,
	0xa4, 0xd7, 0xf3, 0xbb, 0xcd, 0x43, 0x8d, 0xba, 0x7a, 0xec, 0xc0, 0xf9, 0x46, 0xc5, 0x3b, 0x2e,
	0xf3, 0x4f, 0x28, 0x65, 0x94, 0xe1, 0xdf, 0xe4, 0xf6, 0xdb, 0xad, 0x73, 0xea, 0xc6, 0x3c, 0x38,
	0xab, 0xa2, 0xfd, 0x4e, 0x44, 0xa9, 0xd7, 0xf3, 0xad, 0xb9, 0x13, 0x1c, 0x25, 0x7b, 0x01, 0xe3,
	0x36, 0x69, 0x19, 0x7e, 0xe1, 0x3b, 0xc2, 0xda, 0xeb, 0xeb, 0x8e, 0x91, 0x49, 0x5c, 0xbe, 0xd7,
	0x90, 0x2d, 0x61, 0x6a, 0xca, 0x21, 0x27, 0x2c, 0xc2, 0x98, 0x53, 0x28, 0xf9, 0x01, 0x75, 0xe0,
	0xfd, 0xe0, 0xc2, 0xd4, 0xd6, 0x84, 0xc5, 0x3b, 0x4e, 0x5b, 0x7e, 0x40, 0x76, 0x03, 0x2d, 0x0c,
	0xf3, 0x48, 0xe6, 0x61, 0x22, 0x54, 0x49, 0xde, 0xff, 0x26, 0x04, 0x53, 0xf8, 0x10, 0xc9, 0xfc,
	0xb6, 0xc1, 0xec, 0x15, 0x4c, 0x4a, 0xcc, 0xc2, 0x3f, 0x17, 0xb1, 0xf5, 0x22, 0x6e, 0x89, 0xd9,
	0xfd, 0xe9, 0x2e, 0x37, 0x6f, 0xa1, 0x7f, 0xf7, 0x1d, 0x4b, 0x62, 0x2e, 0x38, 0x1b, 0x7d, 0x91,
	0xdb, 0x7d, 0x99, 0x60, 0xea, 0xfe, 0xc7, 0x26, 0x30, 0x36, 0x24, 0xc0, 0x6f, 0x0a, 0x25, 0x61,
	0xea, 0x5a, 0xec, 0x02, 0x46, 0x06, 0xb6, 0x81, 0xba, 0x9d, 0xd5, 0xa3, 0x05, 0xb6, 0x61, 0xec,
	0x35, 0x0c, 0xda, 0xf3, 0x8c, 0x91, 0x4d, 0x17, 0xed, 0xc1, 0x9f, 0x5e, 0xec, 0x6c, 0x74, 0x0c,
	0xfb, 0xae, 0xa8, 0x68, 0xcf, 0x56, 0x30, 0xbc, 0x2f, 0xe5, 0xbf, 0xcd, 0x5c, 0x43, 0x6f, 0xc3,
	0xcb, 0x8c, 0x4d, 0x8e, 0xb8, 0x51, 0xed, 0x92, 0x33, 0xe7, 0x17, 0x14, 0x65, 0x16, 0xdb, 0xfa,
	0x7f, 0xf3, 0xe6, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xb3, 0x9a, 0x20, 0x83, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type pubsubClient struct {
	cc *grpc.ClientConn
}

func NewPubsubClient(cc *grpc.ClientConn) PubsubClient {
	return &pubsubClient{cc}
}

func (c *pubsubClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/pubsub.Pubsub/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/pubsub.Pubsub/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/pubsub.Pubsub/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubsubServer is the server API for Pubsub service.
type PubsubServer interface {
	Subscribe(context.Context, *Subscription) (*common.Empty, error)
	Unsubscribe(context.Context, *Subscription) (*common.Empty, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterPubsubServer(s *grpc.Server, srv PubsubServer) {
	s.RegisterService(&_Pubsub_serviceDesc, srv)
}

func _Pubsub_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.Pubsub/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.Pubsub/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.Pubsub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.Pubsub",
	HandlerType: (*PubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Pubsub_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Pubsub_Unsubscribe_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Pubsub_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pubsub/pubsub.proto",
}
