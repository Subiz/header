// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pubsub

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub(in *jlexer.Lexer, out *pubsubClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub(out *jwriter.Writer, in pubsubClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pubsubClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pubsubClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pubsubClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pubsubClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub(l, v)
}
func easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub1(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserId = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "sub_id":
			out.SubId = string(in.String())
		case "target_topic":
			out.TargetTopic = string(in.String())
		case "target_key":
			out.TargetKey = string(in.String())
		case "ttls":
			out.Ttls = int64(in.Int64())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "target_partition":
			out.TargetPartition = int32(in.Int32())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Topics = append(out.Topics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub1(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.SubId != "" {
		const prefix string = ",\"sub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubId))
	}
	if in.TargetTopic != "" {
		const prefix string = ",\"target_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetTopic))
	}
	if in.TargetKey != "" {
		const prefix string = ",\"target_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetKey))
	}
	if in.Ttls != 0 {
		const prefix string = ",\"ttls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ttls))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.TargetPartition != 0 {
		const prefix string = ",\"target_partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TargetPartition))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Topics {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub1(l, v)
}
func easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub2(in *jlexer.Lexer, out *PublishMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Topics = append(out.Topics, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "user_ids_filter":
			if in.IsNull() {
				in.Skip()
				out.UserIdsFilter = nil
			} else {
				out.UserIdsFilter = in.Bytes()
			}
		case "filter_item_bit_size":
			out.FilterItemBitSize = int32(in.Int32())
		case "filter_hash_count":
			out.FilterHashCount = int32(in.Int32())
		case "neg_user_ids_filter":
			if in.IsNull() {
				in.Skip()
				out.NegUserIdsFilter = nil
			} else {
				out.NegUserIdsFilter = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub2(out *jwriter.Writer, in PublishMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Topics {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	if len(in.UserIdsFilter) != 0 {
		const prefix string = ",\"user_ids_filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.UserIdsFilter)
	}
	if in.FilterItemBitSize != 0 {
		const prefix string = ",\"filter_item_bit_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FilterItemBitSize))
	}
	if in.FilterHashCount != 0 {
		const prefix string = ",\"filter_hash_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FilterHashCount))
	}
	if len(in.NegUserIdsFilter) != 0 {
		const prefix string = ",\"neg_user_ids_filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.NegUserIdsFilter)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublishMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1d2fbf91EncodeGithubComSubizHeaderPubsub2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublishMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1d2fbf91DecodeGithubComSubizHeaderPubsub2(l, v)
}
