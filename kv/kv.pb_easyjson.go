// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package kv

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson81541a67DecodeGithubComSubizHeaderKv(in *jlexer.Lexer, out *Value) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "partition":
			out.Partition = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "bytes":
			if in.IsNull() {
				in.Skip()
				out.Bytes = nil
			} else {
				out.Bytes = in.Bytes()
			}
		case "value":
			out.Value = string(in.String())
		case "ttl":
			out.Ttl = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81541a67EncodeGithubComSubizHeaderKv(out *jwriter.Writer, in Value) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Partition != "" {
		const prefix string = ",\"partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Partition))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if len(in.Bytes) != 0 {
		const prefix string = ",\"bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Bytes)
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Value) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81541a67EncodeGithubComSubizHeaderKv(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Value) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81541a67EncodeGithubComSubizHeaderKv(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Value) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81541a67DecodeGithubComSubizHeaderKv(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Value) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81541a67DecodeGithubComSubizHeaderKv(l, v)
}
func easyjson81541a67DecodeGithubComSubizHeaderKv1(in *jlexer.Lexer, out *Key) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "partition":
			out.Partition = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81541a67EncodeGithubComSubizHeaderKv1(out *jwriter.Writer, in Key) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Partition != "" {
		const prefix string = ",\"partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Partition))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Key) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81541a67EncodeGithubComSubizHeaderKv1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Key) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81541a67EncodeGithubComSubizHeaderKv1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Key) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81541a67DecodeGithubComSubizHeaderKv1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Key) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81541a67DecodeGithubComSubizHeaderKv1(l, v)
}
func easyjson81541a67DecodeGithubComSubizHeaderKv2(in *jlexer.Lexer, out *Bool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson81541a67EncodeGithubComSubizHeaderKv2(out *jwriter.Writer, in Bool) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson81541a67EncodeGithubComSubizHeaderKv2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson81541a67EncodeGithubComSubizHeaderKv2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson81541a67DecodeGithubComSubizHeaderKv2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson81541a67DecodeGithubComSubizHeaderKv2(l, v)
}
