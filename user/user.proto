syntax = "proto2";

package user;

import "bitbucket.org/subiz/header/common/common.proto";

message AddToMyRequest {
	optional common.Context ctx = 1;
	optional string user_id = 3;
	repeated string agent_ids = 5;
	optional string account_id = 2; // used within user service only
}

message MyAgents {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	repeated string agent_ids = 5;
	optional int64 updated = 6;
}

message UserCreateResult {
	optional string id = 3;
	optional string mask = 5;
}

message MyUser {
	optional common.Context ctx = 1;
	optional string agent_id = 2;
	optional User user = 3;
	optional int32 unread = 4;
	optional int64 updated = 5;
	optional string account_id = 7;
}

enum AttributeType {
	text = 0;
	number = 1;
	boolean = 2;
	datetime = 3;
	list = 4;
}

enum AttributeKind {
	system = 0;
	default = 1;
	custom = 2;
}

message AttributeDefinition {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string name = 3;
	optional string description = 4;
	optional string type = 5;
	repeated string list_items = 6;
	optional string key = 7;
	optional string kind = 8;
	optional int64 updated = 9;
}

message AttributeDefinitions {
	optional common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

enum AttributeDataState {
	live = 0;
	deleted = 1;
}

message AttributeData {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional string key = 4;

	optional string state = 6;
	optional int64 created = 7;
	optional int64 modified = 8;

	optional string text = 10;
	optional double number = 11;
	optional bool boolean = 12;
	optional string datetime = 13;
	repeated string list = 14;

	optional string setter = 16;
	optional string setter_type = 17;
}

message User {
	optional common.Context ctx = 1;
	optional string id = 3;
	optional string account_id = 4;
	repeated Trace traces = 11;
	//	repeated string alias = 12;
	optional bool is_ban = 14;

	repeated AttributeData attributes = 18;

	repeated string segments = 19;
	optional string subiz_id = 25;

	repeated string aliases = 30;

	optional int32 par = 34;
	// optional int32 modified_hour = 35;
	optional int64 modified = 36;
	optional int32 modified_week = 37;
}

message Users {
	repeated User users = 1;
}

message Device {
	optional int32 id = 3;
	optional int32 useragent_id = 4;
	optional string useragent = 5;
	optional string screen_resolution = 6;
	optional int32 language_id = 7;
	optional string language = 8;
}

message Traces {
	repeated Trace traces = 3;
}

message Trace {
	optional string id = 3;
	optional string ip = 4;
	optional int32 location_id = 5;

	optional string city_name = 8;
	optional string country_name = 9;
	optional string country_code = 19;
	optional string continent_code = 10;
	optional string continent_name = 18;

	//optional string coutry_code = 11;
	optional float latitude = 12;
	optional float longitude = 13;
	optional string postal_code = 14;
	optional string timezone = 16;

	optional string isp = 17;
}

message MergeRequest {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string destination_user_id = 5;
	optional string source_user_id = 4;
}

message CreateRequest {
	optional string challenge_id = 3;
	optional string answer = 4;
}

message Topic {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string type = 5;
	optional int64 updated = 8;
	optional int32 unread = 9;
}

message UnreadTopic {
	optional common.Context ctx = 1;
	optional string topic = 3;
	optional string agent_id = 4;
	optional string user_id = 5;
	optional string type = 6;
	optional int64 updated = 8;
	optional int32 unread = 9;
}

message ReadTopicRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string user_id = 4;
	optional string agent_id = 5;
}

message SubscribeRequest {
	optional common.Context ctx = 1;
	optional string agent_id = 3;
	repeated string topics = 4;
}

enum Event {
	UserReadRequested = 0; // Id

	UserUpdateRequested = 2; // User
	UserCreateRequested = 3; // User
	UserSearchRequested = 4; // Ids

	UserEventCreateRequested = 5; // rawevent -> raw event
	UserEventSearchRequested = 7; // listeventsrequest -> rawevents
	UserTopicSearchRequested = 6; // listtopicsrequest -> listtopicsresult

	UserSegmentationCreateRequested = 10;
	UserSegmentationUpdateRequested = 11;
	UserSegmentationDeleteRequested = 12;
	UserSegmentationListRequested = 13;
	UserSegmentationReadRequested = 14;

	UserAddToMyListRequested = 20;
	UserRemoveFromMyListRequested = 21;
	UserEventTopicSubscribeRequested = 35;
	UserEventTopicUnsubscribeRequested = 36;

	UserReadTopicRequested = 41; // ReadTopicRequest -> Empty

	UserSubizId = 42;

	UserPresenceReadRequested = 44;
	UserPreviewingReadRequested = 46;
	UserListTopRequested = 47;

	UserAutomationUpsertRequested = 50;
	UserAutomationDeleteRequested = 51;
	UserAutomationListRequested = 52;
	UserAutomationReadRequested = 53;

	AutomationAgentNotificationFired = 54;
	AutomationConversationMessageFired = 55;

	UserSessionUpdateRequested = 65;
	UserSessionCreateRequested = 66;
	UserSessionReadRequested = 67;

	SegmentationLoop = 68;

	AutomationSynced = 102;
	AutomationFired = 103;
	UserRequested = 100;

	UserCreated = 70;

	UserAttributeAdded = 71;
	UserUpdated = 72;

	UserSynced = 101;
	UserUpserted = 105;
	UserV3Synced = 106;

	UserJob = 199; // useraliasadded, useraliasdeleted,
	UserResolvedJob = 200;

	UserResolvedEventCreated = 201;
	UserAliasAdded = 202;
	UserAliasDeleted = 203;
	UserEventCreated = 204;
	UserAggregateUserCount = 205;
	UserAggregateUserAttributeCount = 206;
	UserAggregated = 207;
}

message AggregateUserCount {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int64 min = 3;
	optional int64 count = 5;
	optional int64 created = 6;
}

message AggregateUserAttributeCount {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int64 min = 3;
	optional string attribute_key = 4;
	optional int64 count = 5;
	optional int64 created = 6;
}

message SubizIDRequest {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
}

message MaskResponse {
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
	optional string mask = 5;
}

message SubizIDResponse {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
}

message Segmentations {
	optional common.Context ctx = 1;
	repeated Segmentation segmentations = 3;
}

message SegmentLoopState {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int32 user_par = 3;
	optional int64 loop_created = 6;
	optional int64 loop_number = 7;
}

message UserSegmentCache {
		optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional string condition_id = 4;

}

message Segmentation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 5;
	optional string name = 3;
	optional string description = 11;
	optional int64 user_count = 4;
	// repeated Condition conditions = 6;
	//repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	optional int64 ran = 8; // time start run
	optional int64 started_from = 7;

	optional int64 created = 9;
	optional int64 modified = 10;
	optional string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	repeated SegmentCondition condition = 19;
}

message SegmentTracking {
	optional common.Context ctx = 1;
	optional int32 user_par = 2;
	optional string account_id = 3;

	optional int64 loop_created = 7;
	optional int64 loop_number = 8;
}

message Condition {
	enum JoinOperator {
		none = 0;
		and = 1;
		or = 2;
	}
	optional string join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
	optional string id = 6;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

enum ConditionType {
	attribute = 0;
	event = 1;
}
message SegmentCondition {
	optional string id = 2;
	optional string type = 3;
	optional string join = 4;
	optional Condition attribute_condition = 5;
	optional EventCondition event_condition = 6;
}

// eg: has event.type='content_view' & event.data.content.url contains 'abc';
// eg: not has event.type='content_view'
message EventCondition {
	optional string id = 2;
	optional bool has = 3;
	repeated Condition conditions = 5;
}

message UserSearchResult {
	optional common.Context ctx = 1;
	optional int64 total = 3;
	repeated User users = 4;
	optional string anchor = 5;
	repeated int32 unreads = 6; // only used when search my users
	map<string, int32> unread_counts = 7;
}

message UserSearchRequest {
	optional common.Context ctx = 1;
	optional string segmentation_id = 3;
	optional string query = 4;
	optional string anchor = 5;
	optional int32 limit = 6;
	optional string agent_id = 8; // search my user of agent
	optional bool unread = 9; // search my user of agent
}

message IndexEvent {
	optional string id = 3;
	optional string account_id = 4;
	optional string user_id = 5;
	optional int64 created = 6;
	optional string category = 7; // eventtype
	repeated string topics = 8;
	optional string object = 9;
	optional string text = 10;
}

message ListTopicsRequest {
	optional common.Context ctx = 1;
	optional string user_id = 3;
	optional string agent_id = 5;
	optional string anchor = 4;
	optional int32 limit = 7;
	optional bool unread = 8;
}

message ListTopicsResult {
	optional common.Context ctx = 1;
	repeated Topic topics = 3;
	optional string anchor = 5;
}

message ListNewsRequest {
	optional common.Context ctx = 1;
	optional string user_id = 3;
	optional int64 start_time = 4;
	optional string limit = 7;
}

message AddToMyList {
	optional common.Context ctx = 1;
	optional string agent_id = 2;
	optional string user_id = 3;
}

message Field {
	optional string name = 2;
	optional string account_id = 3;
	optional string user_id = 4;
	optional string setter = 5;
	optional string setter_type = 6;
	optional int64 updated = 8;
	optional string data = 9;
	optional string id = 10;
}

message Presence {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string user_id = 4;
	optional int64 pinged = 5;
	optional int64 pinged_minute = 6;
}

message Presences {
	optional common.Context ctx = 1;
	repeated Presence presences = 2;
}

message Visitor {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional User user = 4;
	optional int64 pinged = 5;
	optional string page_url = 6;
	optional int64 page_viewed = 7;
	optional string page_title = 8;
}

message Visitors {
	optional common.Context ctx = 1;
	repeated Visitor visitors = 2;
}

message LastView {
	optional string account_id = 3;
	optional string user_id = 4;
	optional string url = 5;
	optional string ua = 6;
	optional string ip = 7;
	optional int64 created = 8;
	optional string event_id = 9;
	optional string title = 10;
}

message Automation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional string channel = 4;
	optional string name = 5;
	optional string description = 6;
	repeated Condition conditions = 7;
	optional SCondition condition = 8;

	//repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e

	optional int64 created = 9;
	optional int64 modified = 10;
	optional string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	optional string action_type = 13;
	enum ActionType {
		conversation_message = 0;
		agent_notification = 1;
		//user_notification = 2;
		// automation_invite_message = 4;
	}
	optional string action_data = 14;
	optional string scope = 15;
	optional bool cross_channel = 16;
	optional string metadata = 17;
}

enum AutomationScope {
	conversation = 2;
	user = 3;
}

message Automations {
	optional common.Context ctx = 1;
	repeated Automation automations = 2;
}

message Session {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string user_id = 4;
	optional string id = 5;
	optional string platform = 7;
	enum Platform {
		web = 0;
		mobile = 2;
		desktop = 4;
	}
	optional string referrer = 8;
	optional string search_engine = 9;

	optional int64 started = 10;
	optional int64 tracked = 11;
	optional string status = 12;
	enum Status {
		open = 0;
		closed = 1;
	}
	optional int32 events_count = 13;
	optional int32 content_views_count = 14;
	optional string search_term = 15;
}

message DeleteAttrRequest {
	optional common.Context ctx = 1;
	optional string key = 2;
}

service SegmentationMgr {
	rpc CreateSegment (Segmentation) returns (Segmentation);
	rpc UpdateSegment (Segmentation) returns (Segmentation);
	rpc ListSegments (common.Id) returns (Segmentations);
	rpc DeleteSegment (common.Id) returns (common.Empty);
	rpc ReadSegment (common.Id) returns (Segmentation);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service VisitorMgr {
	rpc ReadPresence (common.Id) returns (Presence);
	rpc ReadPresences (common.Ids) returns (Presences);
	rpc ReadPreview (common.Id) returns (LastView);
	rpc ListTopVisitors (common.Id) returns (Visitors);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

message CountMyUserRequest {
	optional string agent_id = 4;
	optional int32 from = 5;
	optional int32 to = 6;
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
}

message CountUserRequest {
	optional int32 from = 5;
	optional int32 to = 6;
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
}

message CountUserByAttributeRequest {
	optional string attribute_key = 4;
	optional int32 from = 5;
	optional int32 to = 6;
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
}

message CountResponse {
	repeated int32 data = 3;
}

service UserMgr {
	rpc SearchUsers (UserSearchRequest) returns (UserSearchResult);
	rpc SubizID (SubizIDRequest) returns (SubizIDResponse);
	rpc AddToMy (AddToMyRequest) returns (common.Empty);
	rpc CreateUser (User) returns (common.Id);
	rpc UpdateUser (User) returns (common.Id);
	rpc ReadUser (common.Id) returns (User);
	rpc RemoveFromMy (common.Id) returns (common.Empty);

	rpc CountMyUser(CountMyUserRequest) returns (CountResponse);
	rpc CountUser(CountUserRequest) returns (CountResponse);
	rpc CountUserByAttribute(CountUserByAttributeRequest) returns (CountResponse);
	rpc Ping(common.PingRequest) returns (common.Pong);

	rpc AddAlias(Alias) returns (common.Empty);
	rpc MoveUserActivity(MergeRequest) returns (common.Empty);
}

service AutomationMgr {
	rpc ListAutomations(common.Id) returns (Automations);
	rpc UpdateAutomation(Automation) returns (Automation);
	rpc DeleteAutomation(common.Id) returns (common.Empty);
	rpc ReadAutomation(common.Id) returns (Automation);
	rpc CreateAutomation(Automation) returns (Automation);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service SessionMgr {
	rpc CreateSession(Session) returns (Session);
	rpc ReadSession(Session) returns (Session);
	rpc UpdateSession(Session) returns (Session);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service AttributeMgr {
	rpc ListAttributeDefinitions(common.Empty) returns (AttributeDefinitions);
	rpc CreateAttributeDefinition(AttributeDefinition) returns (AttributeDefinition);
	rpc UpdateAttributeDefinition(AttributeDefinition) returns (AttributeDefinition);
	rpc DeleteAttributeDefinition(DeleteAttrRequest) returns (common.Empty);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

message AutomationCheck {
	optional string account_id = 2;
	optional string automation_id = 3;
	optional string user_id = 4;
	optional string event_id = 5;
	optional string scope = 6;
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
message SCondition {
	optional string id = 3;

	optional string key = 4; // unique
	optional string operator = 5; // = # regex
	optional string value = 6; // JSON

	enum EventTime {
		none = 0; // not an event
		current = 1;
		latest = 2;
		past = 3; // exists
	}

	enum JoinOperator {
		and = 0;
		or = 1;
	}
	optional string join = 7;
	optional string event_type_time = 8; //
	optional string event_type = 10;
	repeated SCondition conditions = 9;

	optional int32 priority = 12;
}

message Alias {
	optional common.Context ctx = 1;
	optional string user_id = 3;
	optional string account_id = 4;
	optional string alias = 5;
}

message UserSegment {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional string segmentation_id = 4;
	optional int64 created = 5;
}