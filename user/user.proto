syntax = "proto2";

package user;

import "github.com/subiz/header/common/common.proto";

service UseDoc {
	rpc f1(MaskResponse) returns (MaskResponse) {}
	rpc f3(UserCreateResult) returns (UserCreateResult) {}
}

message AddToMyRequest {
	optional common.Context ctx = 1;
	optional string user_id = 3;
	repeated string agent_ids = 5;
	optional string account_id = 2; // used within user service only
}

message MyAgents {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	repeated string agent_ids = 5;
	optional int64 updated = 6;
}

message UserCreateResult {
	optional string id = 3;
	optional string mask = 5;
}

enum AttributeType {
	text = 0;
	number = 1;
	boolean = 2;
	datetime = 3;
	list = 4;
}

enum AttributeKind {
	system = 0;
	default = 1;
	custom = 2;
}

message AttributeDefinition {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string name = 3;
	optional string description = 4;
	optional string type = 5;
	repeated string list_items = 6;
	optional string key = 7;
	optional string kind = 8;
	optional int64 updated = 9;
}

message AttributeDefinitions {
	optional common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

message SessionTracking {
	optional string account_id = 2;
	optional string user_id = 3;
	optional int64 started = 4;
	optional int64 tracked = 6;
	optional int32 total = 7; // number of session
}

message Topic {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string type = 5;
	optional int64 updated = 8;
	optional int32 unread = 9;
}

message UnreadTopic {
	optional common.Context ctx = 1;
	optional string topic = 3;
	optional string agent_id = 4;
	optional string user_id = 5;
	optional string type = 6;
	optional int64 updated = 8;
	optional int32 unread = 9;
}

message ReadTopicRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string user_id = 4;
	optional string agent_id = 5;
}

message SubscribeRequest {
	optional common.Context ctx = 1;
	optional string agent_id = 3;
	repeated string topics = 4;
}

enum Event {
	UserReadRequested = 0; // Id

	UserUpdateRequested = 2; // User
	UserCreateRequested = 3; // User
	UserSearchRequested = 4; // Ids

	UserEventCreateRequested = 5; // rawevent -> raw event
	UserEventSearchRequested = 7; // listeventsrequest -> rawevents
	UserTopicSearchRequested = 6; // listtopicsrequest -> listtopicsresult

	UserSegmentationCreateRequested = 10;
	UserSegmentationUpdateRequested = 11;
	UserSegmentationDeleteRequested = 12;
	UserSegmentationListRequested = 13;
	UserSegmentationReadRequested = 14;

	UserAddToMyListRequested = 20;
	UserRemoveFromMyListRequested = 21;
	UserEventTopicSubscribeRequested = 35;
	UserEventTopicUnsubscribeRequested = 36;

	UserReadTopicRequested = 41; // ReadTopicRequest -> Empty

	UserSubizId = 42;

	UserPresenceReadRequested = 44;
	UserPreviewingReadRequested = 46;
	UserListTopRequested = 47;

	UserAutomationUpsertRequested = 50;
	UserAutomationDeleteRequested = 51;
	UserAutomationListRequested = 52;
	UserAutomationReadRequested = 53;

	AutomationAgentNotificationFired = 54;
	AutomationConversationMessageFired = 55;

	UserSessionUpdateRequested = 65;
	UserSessionCreateRequested = 66;
	UserSessionReadRequested = 67;

	SegmentationLoop = 68;

	AutomationSynced = 102;
	AutomationFired = 103;
	UserRequested = 100;

	UserCreated = 70;

	UserAttributeAdded = 71;
	UserUpdated = 72;

	UserSynced = 101;
	UserUpserted = 105;
	UserV3Synced = 106;

	UserJob = 199; // useraliasadded, useraliasdeleted,
	UserResolvedJob = 200;
	UserResolvedJob2 = 198;;

	UserResolvedEventCreated = 201;
	UserAliasAdded = 202;
	UserAliasDeleted = 203;
	UserEventCreated = 204;
	UserContentViewed = 205;
	UserAggregated = 207;

	UserTopicJob = 208;
	UserEventTopicPublished = 209;
	UserNotifyMyUserRequested = 210;
	UserSegmentPickRequested = 211;
	UserSegmentUnpickRequested = 212;
	UserAggregateSegmentAttrCount = 214;
	UserAggregateUpdateInteracted = 215;

	//UserAggregateSegmentCount = 216;
	UserSegmentAggregated = 217;

	AutomationBlockUserFired = 218;
	AutomationUpdateUserAttributeFired = 219;
	AutomationMergeUsersFired = 220;
	AutomationUserNotificationFired = 221;
	AutomationUserWebhookFired = 222;
	AutomationUserNoteFired = 223;

	AutomationCreateConversationFired = 224;
	AutomationConversationMessage2Fired = 225; // send to exists conversation
	AutomationConversationWebhookFired = 226;
	AutomationAddAgentToConversationFired = 227;
	AutomationCreateTicketFired = 228;
	AutomationConversationTagFired = 229;

	// AutomationAgentNotificationFired = 54;
	AutomationAddUserToSegmentationFired = 231;

	UserTotalConvoUpdated = 232;
	UserTotalOpenTicketUpdated = 233;
}

message AggregateUpdateInteracted {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional int64 interacted = 5;
	optional int64 created = 6;
}

message AggregateSegmentAttrCount {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int64 min = 3;
	optional int64 count = 5;
	optional int64 created = 6;
	optional string segmentation_id = 7;
	optional string attribute = 8;
	optional int64 hour = 9;
}

message SubizIDRequest {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
}

message MaskResponse {
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
	optional string mask = 5;
}

message SubizIDResponse {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
}

message Segmentations {
	optional common.Context ctx = 1;
	repeated Segmentation segmentations = 3;
}

message Segmentation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 5;
	optional string name = 3;
	optional string description = 11;
	optional int64 user_count = 4;

	optional int64 started_from = 7;

	optional int64 created = 9;
	optional int64 modified = 10;
	optional string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	repeated SCondition conditions = 19;
	optional string creator = 20;
	optional string scope = 21;
	enum Scope {
		agent = 0;
		account = 1;
	}
	optional bool is_system = 22;
}

message Condition {
	enum JoinOperator {
		none = 0;
		and = 1;
		or = 2;
	}
	optional string join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
	optional string id = 6;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

enum ConditionType {
	attribute = 0;
	event = 1;
}

message IndexEvent {
	optional string id = 3;
	optional string account_id = 4;
	optional string user_id = 5;
	optional int64 created = 6;
	optional string category = 7; // eventtype
	repeated string topics = 8;
	optional string object = 9;
	optional string text = 10;
}

message ListTopicsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional string agent_id = 5;
	optional string anchor = 4;
	optional int32 limit = 7;
	optional bool unread = 8;
}

message ListTopicsResult {
	optional common.Context ctx = 1;
	repeated Topic topics = 3;
	optional string anchor = 5;
}

message ListNewsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional int64 start_time = 4;
	optional string limit = 7;
}

message AddToMyList {
	optional common.Context ctx = 1;
	optional string agent_id = 2;
	optional string user_id = 3;
	optional string account_id = 5;
}

message Automation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional string channel = 4;
	optional string name = 5;
	optional string description = 6;
	repeated Condition conditions = 7;
	optional SCondition condition = 8;

	//repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e

	optional int64 created = 9;
	optional int64 modified = 10;
	optional string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	optional string action_type = 13;
	enum ActionType {
		conversation_message = 0;
		agent_notification = 1;
		//user_notification = 2;
		// automation_invite_message = 4;

		block_user = 5;
		update_user_attribute = 6;
		merge_users = 7;
		user_notification = 8;
		user_webhook = 9;
		user_note = 10;

		create_conversation = 11;
		conversation_message2 = 12;
		conversation_webhook = 13;
		add_agent_to_conversation = 14;
		create_ticket = 15;
		conversation_tag = 16;

		// agent_notification = 17;
		add_user_to_segmentation = 18;
	}

	optional string action_data = 14;
	optional string scope = 15;
	optional bool cross_channel = 16;
	optional string metadata = 17;
}

enum AutomationScope {
	conversation = 2;
	user = 3;
}

message Automations {
	optional common.Context ctx = 1;
	repeated Automation automations = 2;
}

message DeleteAttrRequest {
	optional common.Context ctx = 1;
	optional string key = 2;
}

service SegmentationMgr {
	rpc CreateSegment (Segmentation) returns (Segmentation);
	rpc UpdateSegment (Segmentation) returns (Segmentation);
	rpc ListSegments (common.Id) returns (Segmentations);
	rpc DeleteSegment (common.Id) returns (common.Empty);
	rpc ReadSegment (common.Id) returns (Segmentation);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

message AutomationCheck {
	optional string account_id = 2;
	optional string automation_id = 3;
	optional string user_id = 4;
	optional string event_id = 5;
	optional string scope = 6;
}

message SegmentIndex {
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional int32 year = 4;
	optional int32 day = 5;
	optional int32 hour = 6;
}

message SegmentUser {
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional int32 day = 4;
	optional int32 hour = 5;
	optional string user_id = 6;
	optional int64 activated = 7;
	optional string picked_by = 8; // agent id or system
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
message SCondition {
	optional string id = 3;

	optional string key = 4; // unique
	optional string operator = 5; // = # regex
	optional string value = 6; // JSON

	enum EventTime {
		none = 0; // not an event
		current = 1;
		latest = 2;
		past = 3; // exists
	}

	enum JoinOperator {
		and = 0;
		or = 1;
	}
	optional string join = 7;
	optional string event_type_time = 8; //
	optional string event_type = 10;
	repeated SCondition conditions = 9;

	optional int32 priority = 12;
	optional bool event_existed = 13;
}

message PublishSubscribed {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 4;
	optional string topic = 5;
	optional string event_id = 6;
	optional string by = 8;
}

message PublishSubscribedReply {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	repeated string agent_ids = 3;
	optional string user_id = 4;
	optional string topic = 5;
	optional string event_id = 6;
	optional string by = 8;
}

message Note {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	// optional string user_id = 4;
	optional string creator_id = 5;
	optional string text = 6;
	optional int64 created = 7;
	optional string creator_type = 8;
	enum CreatorType {
		agent = 0;
		system = 1;
	}
	optional string target_id = 9;
	optional string target_type = 10;
	optional string link_id = 11; // deprecated
	optional string link_type = 12; // deprecated
	enum Type {
		conversation = 0; // link
		ticket = 1;
		deal = 2;
		user = 3; // target
	}
	optional string format = 13;
	enum Format {
		plaintext = 0;
		markdown = 1;
		html = 2;
	}
	repeated NoteLink links = 14;
}

message NoteLink {
	optional string id = 1;
	optional string type = 2;
}

message Notes {
	optional common.Context ctx = 1;
	repeated Note notes = 3;
	optional string anchor = 4;
}

message ListNotesRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	// optional string user_id = 3;
	optional string target_id = 4;
	optional int32 limit = 5;
	optional string anchor = 6;
}

message DeleteNoteRequest {
	optional string account_id = 2;
	optional string target_id = 3;
	optional string id = 4;
}

message AutomationCredit {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	enum Type {
		message = 0;
		email = 1;
		webhook = 2;
	}
	optional string type = 3;
	optional uint32 credit_in_month = 4;
	optional uint32 fired_in_month = 5;
}

message AutomationCredits {
	optional common.Context ctx = 1;
	repeated AutomationCredit automation_credits = 2;
}

service AutomationCreditMgr {
	rpc ListAutomationCredits(common.Empty) returns (AutomationCredits);
}

service NoteMgr {
	rpc ListNotes(ListNotesRequest) returns (Notes);
	rpc AddNote(Note) returns (Note);
	rpc UpdateNote(Note) returns (Note);
	rpc DeleteNote(DeleteNoteRequest) returns (common.Empty);
}

service AutomationMgr {
	rpc ListAutomations(common.Id) returns (Automations);
	rpc UpdateAutomation(Automation) returns (Automation);
	rpc DeleteAutomation(common.Id) returns (common.Empty);
	rpc ReadAutomation(common.Id) returns (Automation);
	rpc CreateAutomation(Automation) returns (Automation);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service AttributeMgr {
	rpc ListAttributeDefinitions(common.Empty) returns (AttributeDefinitions);
	rpc CreateAttributeDefinition(AttributeDefinition) returns (AttributeDefinition);
	rpc UpdateAttributeDefinition(AttributeDefinition) returns (AttributeDefinition);
	rpc DeleteAttributeDefinition(DeleteAttrRequest) returns (common.Empty);
	rpc Ping(common.PingRequest) returns (common.Pong);
}
