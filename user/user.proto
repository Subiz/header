syntax = "proto2";

package user;

import "bitbucket.org/subiz/header/common/common.proto";

message AllType {
  optional User user = 2;
	optional CreateRequest cr = 3;
	optional ConnectorField connectorfield = 4;
	optional CustomeField customefield = 5;
	optional UserCreateResult ucr = 6;
	optional ReadTopicRequest rpr = 8;
	optional UserSearchRequest usersearchrequest = 9;
	optional UserSearchResult usersearchresult = 10;
	optional MaskResponse ms = 11;
}

service MyServer {
	rpc Do(AllType) returns(AllType) {}
}

message AddToMyRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	repeated string agent_ids = 5;
}

message UserCreateResult {
	optional string account_id = 2;
	optional string id = 3;
	optional string mask = 5;
}

message User {
	optional common.Context ctx = 1;
	optional string id = 3;
	optional string account_id = 4;
	optional string fullname = 5;
	repeated string phones = 7;
	repeated string emails = 10;
	repeated Trace traces = 11;
	//	repeated string alias = 12;
	repeated Device devices = 13;
	optional bool is_ban = 14;
	optional string avatar_url = 15;

	repeated string segments = 19;
	repeated string labels = 20;
	optional bool unsubscribed = 21;
	optional bool marked_spam = 22;
	optional bool hard_bounced = 23;
	optional int32 total_sessions = 24;

	optional string subiz_id = 25;
	optional string timezone = 26;
	optional string country_code = 27;
	optional string country = 29;
	optional string city = 32;
	optional string language = 28;

	repeated string aliases = 30;
	optional int64 last_seen = 31;
}

message Users {
	repeated User users = 1;
}

message Location {
}

message Device {
	optional int32 id = 3;
	optional int32 useragent_id = 4;
	optional string useragent = 5;
	optional string resolution = 6;
	optional int32 language_id  = 7;
	optional string language = 8;
}

message Trace {
	optional string id = 3;
	optional string ip = 4;
	optional int32 location_id = 5;
	optional string location = 6;

	optional string city_code = 7;
	optional string city_name = 8;
	optional string country_name = 9;
	optional string continent_code = 10;
	optional string coutry_code = 11;
	optional int32 latitue = 12;
	optional int32 longitude = 13;
	optional string postal_code = 14;
	optional string region_name = 15;
	optional string timezone = 16;

}

message MergeRequest {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string id = 5;
	optional string recent_id = 4;
}

message GreetingRequest {
	optional common.Context ctx = 1;
	optional string account_id = 5;
	optional string useragent = 6;
	optional string user_id = 3;
	optional string uuid = 4;
}

message CreateRequest {
	optional string account_id = 2;
	optional string challenge_id = 3;
	optional string answer = 4;
}

message Topic {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string type = 5;
	optional int64 updated = 8;
	//optional int32 total_events = 4;
	optional int32 unread = 9;
	//optional string user_id = 7;

}

message ReadTopicRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string topic = 3;
	optional string user_id = 4;
	optional string agent_id = 5;
}

message SubscribeRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	repeated string topics = 4;
}

enum Event {
	UserReadRequested = 0; // Id

	UserUpdateRequested = 2; // User
	UserCreateRequested = 3; // User
	UserSearchRequested = 4; // Ids

	UserEventCreateRequested = 5; // rawevent -> raw event
	UserEventSearchRequested = 7; // listeventsrequest -> rawevents
	UserTopicSearchRequested = 6; // listtopicsrequest -> listtopicsresult

	UserSegmentationCreateRequested = 10;
	UserSegmentationUpdateRequested = 11;
	UserSegmentationDeleteRequested = 12;
	UserSegmentationListRequested = 13;
	UserSegmentationReadRequested = 14;

	UserAddToMyListRequested = 20;


	UserEventTopicSubscribeRequested = 35;
	UserEventTopicUnsubscribeRequested = 36;

	UserReadTopicRequested = 41;  // ReadTopicRequest -> Empty

	UserSubizId = 42;
}

message SubizIDRequest {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
}

message MaskResponse {
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
	optional string mask = 5;
}

message SubizIDResponse {
	optional common.Context ctx = 1;
	optional string subiz_id = 2;
	optional string account_id = 3;
	optional string user_id = 4;
}

message Segmentations {
	optional common.Context ctx = 1;
	repeated Segmentation segmentations = 3;
}

message Segmentation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 5;
	optional string name = 3;
	optional string description = 11;
	optional int64 user_count = 4;
	repeated Condition conditions = 6;
	//repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	optional int64 ran = 8;
	optional int64 created = 9;
	optional int64 modified = 10;
}

message SegmentCondition {
	enum Operator {
		and = 0;
		or = 1;
	}
	optional string op = 2;
	optional bool is_op = 3;
	optional string key = 4;
	optional string operator = 5;
	optional string value = 6; // JSON
}

message Condition {
	enum JoinOperator {
		none = 0;
		and = 1;
		or = 2;
	}
	optional string join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message UserSearchResult {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int64 total = 3;
	repeated User users = 4;
	optional string anchor = 5;
	repeated int32 unreads = 6; // only used when search my users
}

message UserSearchRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional string query = 4;
	optional string anchor = 5;
	optional int32 limit = 6;
	optional string agent_id = 8; // search my user of agent
	optional bool unread = 9; // search my user of agent
}

message IndexEvent {
	optional string id = 3;
	optional string account_id = 4;
	optional string user_id = 5;
	optional int64 created = 6;
	optional string category = 7; // eventtype
	repeated string topics = 8;
	optional string object = 9;
	optional string text = 10;
}

message ListTopicsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional string agent_id = 5;
	optional string anchor = 4;
	optional int32 limit = 7;
	optional bool unread = 8;
}

message ListTopicsResult {
	optional common.Context ctx = 1;
	repeated Topic topics = 3;
	optional string anchor = 5;
}

message ListNewsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;
	optional int64 start_time = 4;
 	optional string limit = 7;
}

message AddToMyList {
	optional common.Context ctx = 1;
	optional string agent_id = 2;
	optional string user_id = 3;
}

message ConnectorField {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string user_id = 3;

	optional string integration_id = 5;
	repeated string values = 6;
}

message CustomeField {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string user_id = 4;

	optional string field_id = 5;
	optional string value = 6;
}
