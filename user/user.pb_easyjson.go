// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package user

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2c075341DecodeGithubComSubizHeaderUser(in *jlexer.Lexer, out *useDocClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser(out *jwriter.Writer, in useDocClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v useDocClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v useDocClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *useDocClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *useDocClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser1(in *jlexer.Lexer, out *segmentationMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser1(out *jwriter.Writer, in segmentationMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v segmentationMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v segmentationMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *segmentationMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *segmentationMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser1(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser2(in *jlexer.Lexer, out *noteMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser2(out *jwriter.Writer, in noteMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v noteMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v noteMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *noteMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *noteMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser2(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser3(in *jlexer.Lexer, out *automationMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser3(out *jwriter.Writer, in automationMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v automationMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v automationMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *automationMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *automationMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser3(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser4(in *jlexer.Lexer, out *attributeMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser4(out *jwriter.Writer, in attributeMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v attributeMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v attributeMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *attributeMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *attributeMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser4(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser5(in *jlexer.Lexer, out *UserCreateResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "mask":
			if in.IsNull() {
				in.Skip()
				out.Mask = nil
			} else {
				if out.Mask == nil {
					out.Mask = new(string)
				}
				*out.Mask = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser5(out *jwriter.Writer, in UserCreateResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Mask != nil {
		const prefix string = ",\"mask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCreateResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCreateResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCreateResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCreateResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser5(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser6(in *jlexer.Lexer, out *UnreadTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(int32)
				}
				*out.Unread = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser6(out *jwriter.Writer, in UnreadTopic) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Unread))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnreadTopic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnreadTopic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnreadTopic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnreadTopic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser6(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser7(in *jlexer.Lexer, out *Topic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(int32)
				}
				*out.Unread = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser7(out *jwriter.Writer, in Topic) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Unread))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Topic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Topic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Topic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Topic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser7(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser8(in *jlexer.Lexer, out *SubscribeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Topics = append(out.Topics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser8(out *jwriter.Writer, in SubscribeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Topics {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser8(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser9(in *jlexer.Lexer, out *SubizIDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "subiz_id":
			if in.IsNull() {
				in.Skip()
				out.SubizId = nil
			} else {
				if out.SubizId == nil {
					out.SubizId = new(string)
				}
				*out.SubizId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser9(out *jwriter.Writer, in SubizIDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.SubizId != nil {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubizId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubizIDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubizIDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubizIDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubizIDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser9(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser10(in *jlexer.Lexer, out *SubizIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "subiz_id":
			if in.IsNull() {
				in.Skip()
				out.SubizId = nil
			} else {
				if out.SubizId == nil {
					out.SubizId = new(string)
				}
				*out.SubizId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser10(out *jwriter.Writer, in SubizIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.SubizId != nil {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubizId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubizIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubizIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubizIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubizIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser10(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser11(in *jlexer.Lexer, out *SessionTracking) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "started":
			if in.IsNull() {
				in.Skip()
				out.Started = nil
			} else {
				if out.Started == nil {
					out.Started = new(int64)
				}
				*out.Started = int64(in.Int64())
			}
		case "tracked":
			if in.IsNull() {
				in.Skip()
				out.Tracked = nil
			} else {
				if out.Tracked == nil {
					out.Tracked = new(int64)
				}
				*out.Tracked = int64(in.Int64())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(int32)
				}
				*out.Total = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser11(out *jwriter.Writer, in SessionTracking) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Started != nil {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Started))
	}
	if in.Tracked != nil {
		const prefix string = ",\"tracked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Tracked))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionTracking) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionTracking) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionTracking) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionTracking) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser11(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser12(in *jlexer.Lexer, out *Segmentations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "segmentations":
			if in.IsNull() {
				in.Skip()
				out.Segmentations = nil
			} else {
				in.Delim('[')
				if out.Segmentations == nil {
					if !in.IsDelim(']') {
						out.Segmentations = make([]*Segmentation, 0, 8)
					} else {
						out.Segmentations = []*Segmentation{}
					}
				} else {
					out.Segmentations = (out.Segmentations)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Segmentation
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Segmentation)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Segmentations = append(out.Segmentations, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser12(out *jwriter.Writer, in Segmentations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Segmentations) != 0 {
		const prefix string = ",\"segmentations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Segmentations {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segmentations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segmentations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segmentations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segmentations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser12(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser13(in *jlexer.Lexer, out *Segmentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "user_count":
			if in.IsNull() {
				in.Skip()
				out.UserCount = nil
			} else {
				if out.UserCount == nil {
					out.UserCount = new(int64)
				}
				*out.UserCount = int64(in.Int64())
			}
		case "started_from":
			if in.IsNull() {
				in.Skip()
				out.StartedFrom = nil
			} else {
				if out.StartedFrom == nil {
					out.StartedFrom = new(int64)
				}
				*out.StartedFrom = int64(in.Int64())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*SCondition, 0, 8)
					} else {
						out.Conditions = []*SCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *SCondition
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(SCondition)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Conditions = append(out.Conditions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		case "scope":
			if in.IsNull() {
				in.Skip()
				out.Scope = nil
			} else {
				if out.Scope == nil {
					out.Scope = new(string)
				}
				*out.Scope = string(in.String())
			}
		case "is_system":
			if in.IsNull() {
				in.Skip()
				out.IsSystem = nil
			} else {
				if out.IsSystem == nil {
					out.IsSystem = new(bool)
				}
				*out.IsSystem = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser13(out *jwriter.Writer, in Segmentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.UserCount != nil {
		const prefix string = ",\"user_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.UserCount))
	}
	if in.StartedFrom != nil {
		const prefix string = ",\"started_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.StartedFrom))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Conditions {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	if in.Scope != nil {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Scope))
	}
	if in.IsSystem != nil {
		const prefix string = ",\"is_system\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segmentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segmentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segmentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segmentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser13(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser14(in *jlexer.Lexer, out *SegmentUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "segmentation_id":
			if in.IsNull() {
				in.Skip()
				out.SegmentationId = nil
			} else {
				if out.SegmentationId == nil {
					out.SegmentationId = new(string)
				}
				*out.SegmentationId = string(in.String())
			}
		case "day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				if out.Day == nil {
					out.Day = new(int32)
				}
				*out.Day = int32(in.Int32())
			}
		case "hour":
			if in.IsNull() {
				in.Skip()
				out.Hour = nil
			} else {
				if out.Hour == nil {
					out.Hour = new(int32)
				}
				*out.Hour = int32(in.Int32())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "activated":
			if in.IsNull() {
				in.Skip()
				out.Activated = nil
			} else {
				if out.Activated == nil {
					out.Activated = new(int64)
				}
				*out.Activated = int64(in.Int64())
			}
		case "picked_by":
			if in.IsNull() {
				in.Skip()
				out.PickedBy = nil
			} else {
				if out.PickedBy == nil {
					out.PickedBy = new(string)
				}
				*out.PickedBy = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser14(out *jwriter.Writer, in SegmentUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.SegmentationId != nil {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SegmentationId))
	}
	if in.Day != nil {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Day))
	}
	if in.Hour != nil {
		const prefix string = ",\"hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Hour))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Activated != nil {
		const prefix string = ",\"activated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Activated))
	}
	if in.PickedBy != nil {
		const prefix string = ",\"picked_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PickedBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SegmentUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SegmentUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SegmentUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SegmentUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser14(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser15(in *jlexer.Lexer, out *SegmentIndex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "segmentation_id":
			if in.IsNull() {
				in.Skip()
				out.SegmentationId = nil
			} else {
				if out.SegmentationId == nil {
					out.SegmentationId = new(string)
				}
				*out.SegmentationId = string(in.String())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		case "day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				if out.Day == nil {
					out.Day = new(int32)
				}
				*out.Day = int32(in.Int32())
			}
		case "hour":
			if in.IsNull() {
				in.Skip()
				out.Hour = nil
			} else {
				if out.Hour == nil {
					out.Hour = new(int32)
				}
				*out.Hour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser15(out *jwriter.Writer, in SegmentIndex) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.SegmentationId != nil {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SegmentationId))
	}
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	if in.Day != nil {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Day))
	}
	if in.Hour != nil {
		const prefix string = ",\"hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Hour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SegmentIndex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SegmentIndex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SegmentIndex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SegmentIndex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser15(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser16(in *jlexer.Lexer, out *SCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(string)
				}
				*out.Join = string(in.String())
			}
		case "event_type_time":
			if in.IsNull() {
				in.Skip()
				out.EventTypeTime = nil
			} else {
				if out.EventTypeTime == nil {
					out.EventTypeTime = new(string)
				}
				*out.EventTypeTime = string(in.String())
			}
		case "event_type":
			if in.IsNull() {
				in.Skip()
				out.EventType = nil
			} else {
				if out.EventType == nil {
					out.EventType = new(string)
				}
				*out.EventType = string(in.String())
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*SCondition, 0, 8)
					} else {
						out.Conditions = []*SCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *SCondition
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(SCondition)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Conditions = append(out.Conditions, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "event_existed":
			if in.IsNull() {
				in.Skip()
				out.EventExisted = nil
			} else {
				if out.EventExisted == nil {
					out.EventExisted = new(bool)
				}
				*out.EventExisted = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser16(out *jwriter.Writer, in SCondition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Operator != nil {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Operator))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Join))
	}
	if in.EventTypeTime != nil {
		const prefix string = ",\"event_type_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventTypeTime))
	}
	if in.EventType != nil {
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventType))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Conditions {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Priority))
	}
	if in.EventExisted != nil {
		const prefix string = ",\"event_existed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EventExisted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCondition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCondition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCondition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser16(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser17(in *jlexer.Lexer, out *ReadTopicRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser17(out *jwriter.Writer, in ReadTopicRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadTopicRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadTopicRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadTopicRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadTopicRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser17(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser18(in *jlexer.Lexer, out *PublishSubscribedReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.AgentIds = append(out.AgentIds, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "event_id":
			if in.IsNull() {
				in.Skip()
				out.EventId = nil
			} else {
				if out.EventId == nil {
					out.EventId = new(string)
				}
				*out.EventId = string(in.String())
			}
		case "by":
			if in.IsNull() {
				in.Skip()
				out.By = nil
			} else {
				if out.By == nil {
					out.By = new(string)
				}
				*out.By = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser18(out *jwriter.Writer, in PublishSubscribedReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.AgentIds {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.EventId != nil {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventId))
	}
	if in.By != nil {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublishSubscribedReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishSubscribedReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublishSubscribedReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishSubscribedReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser18(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser19(in *jlexer.Lexer, out *PublishSubscribed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "event_id":
			if in.IsNull() {
				in.Skip()
				out.EventId = nil
			} else {
				if out.EventId == nil {
					out.EventId = new(string)
				}
				*out.EventId = string(in.String())
			}
		case "by":
			if in.IsNull() {
				in.Skip()
				out.By = nil
			} else {
				if out.By == nil {
					out.By = new(string)
				}
				*out.By = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser19(out *jwriter.Writer, in PublishSubscribed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.EventId != nil {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventId))
	}
	if in.By != nil {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublishSubscribed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishSubscribed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublishSubscribed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishSubscribed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser19(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser20(in *jlexer.Lexer, out *Notes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*Note, 0, 8)
					} else {
						out.Notes = []*Note{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Note
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Note)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Notes = append(out.Notes, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser20(out *jwriter.Writer, in Notes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Notes {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser20(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser21(in *jlexer.Lexer, out *NoteLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser21(out *jwriter.Writer, in NoteLink) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NoteLink) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NoteLink) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NoteLink) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NoteLink) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser21(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser22(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "creator_id":
			if in.IsNull() {
				in.Skip()
				out.CreatorId = nil
			} else {
				if out.CreatorId == nil {
					out.CreatorId = new(string)
				}
				*out.CreatorId = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "creator_type":
			if in.IsNull() {
				in.Skip()
				out.CreatorType = nil
			} else {
				if out.CreatorType == nil {
					out.CreatorType = new(string)
				}
				*out.CreatorType = string(in.String())
			}
		case "target_id":
			if in.IsNull() {
				in.Skip()
				out.TargetId = nil
			} else {
				if out.TargetId == nil {
					out.TargetId = new(string)
				}
				*out.TargetId = string(in.String())
			}
		case "target_type":
			if in.IsNull() {
				in.Skip()
				out.TargetType = nil
			} else {
				if out.TargetType == nil {
					out.TargetType = new(string)
				}
				*out.TargetType = string(in.String())
			}
		case "link_id":
			if in.IsNull() {
				in.Skip()
				out.LinkId = nil
			} else {
				if out.LinkId == nil {
					out.LinkId = new(string)
				}
				*out.LinkId = string(in.String())
			}
		case "link_type":
			if in.IsNull() {
				in.Skip()
				out.LinkType = nil
			} else {
				if out.LinkType == nil {
					out.LinkType = new(string)
				}
				*out.LinkType = string(in.String())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]*NoteLink, 0, 8)
					} else {
						out.Links = []*NoteLink{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *NoteLink
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(NoteLink)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Links = append(out.Links, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser22(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.CreatorId != nil {
		const prefix string = ",\"creator_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatorId))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.CreatorType != nil {
		const prefix string = ",\"creator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatorType))
	}
	if in.TargetId != nil {
		const prefix string = ",\"target_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetId))
	}
	if in.TargetType != nil {
		const prefix string = ",\"target_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetType))
	}
	if in.LinkId != nil {
		const prefix string = ",\"link_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LinkId))
	}
	if in.LinkType != nil {
		const prefix string = ",\"link_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LinkType))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Links {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Note) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Note) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Note) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Note) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser22(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser23(in *jlexer.Lexer, out *MyAgents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.AgentIds = append(out.AgentIds, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser23(out *jwriter.Writer, in MyAgents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.AgentIds {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MyAgents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyAgents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyAgents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyAgents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser23(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser24(in *jlexer.Lexer, out *MaskResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subiz_id":
			if in.IsNull() {
				in.Skip()
				out.SubizId = nil
			} else {
				if out.SubizId == nil {
					out.SubizId = new(string)
				}
				*out.SubizId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "mask":
			if in.IsNull() {
				in.Skip()
				out.Mask = nil
			} else {
				if out.Mask == nil {
					out.Mask = new(string)
				}
				*out.Mask = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser24(out *jwriter.Writer, in MaskResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SubizId != nil {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubizId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Mask != nil {
		const prefix string = ",\"mask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MaskResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MaskResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MaskResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MaskResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser24(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser25(in *jlexer.Lexer, out *ListTopicsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]*Topic, 0, 8)
					} else {
						out.Topics = []*Topic{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Topic
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Topic)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Topics = append(out.Topics, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser25(out *jwriter.Writer, in ListTopicsResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Topics {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListTopicsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListTopicsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListTopicsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListTopicsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser25(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser26(in *jlexer.Lexer, out *ListTopicsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(bool)
				}
				*out.Unread = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser26(out *jwriter.Writer, in ListTopicsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Unread))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListTopicsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListTopicsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListTopicsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListTopicsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser26(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser27(in *jlexer.Lexer, out *ListNotesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "target_id":
			if in.IsNull() {
				in.Skip()
				out.TargetId = nil
			} else {
				if out.TargetId == nil {
					out.TargetId = new(string)
				}
				*out.TargetId = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser27(out *jwriter.Writer, in ListNotesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.TargetId != nil {
		const prefix string = ",\"target_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetId))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListNotesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListNotesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListNotesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListNotesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser27(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser28(in *jlexer.Lexer, out *ListNewsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "start_time":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(int64)
				}
				*out.StartTime = int64(in.Int64())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(string)
				}
				*out.Limit = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser28(out *jwriter.Writer, in ListNewsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.StartTime != nil {
		const prefix string = ",\"start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.StartTime))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListNewsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListNewsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListNewsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListNewsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser28(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser29(in *jlexer.Lexer, out *IndexEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				if out.Category == nil {
					out.Category = new(string)
				}
				*out.Category = string(in.String())
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Topics = append(out.Topics, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "object":
			if in.IsNull() {
				in.Skip()
				out.Object = nil
			} else {
				if out.Object == nil {
					out.Object = new(string)
				}
				*out.Object = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser29(out *jwriter.Writer, in IndexEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Category != nil {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Category))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Topics {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Object != nil {
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Object))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser29(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser30(in *jlexer.Lexer, out *DeleteNoteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "target_id":
			if in.IsNull() {
				in.Skip()
				out.TargetId = nil
			} else {
				if out.TargetId == nil {
					out.TargetId = new(string)
				}
				*out.TargetId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser30(out *jwriter.Writer, in DeleteNoteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.TargetId != nil {
		const prefix string = ",\"target_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteNoteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteNoteRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteNoteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteNoteRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser30(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser31(in *jlexer.Lexer, out *DeleteAttrRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser31(out *jwriter.Writer, in DeleteAttrRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteAttrRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteAttrRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteAttrRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteAttrRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser31(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser32(in *jlexer.Lexer, out *Condition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(string)
				}
				*out.Join = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser32(out *jwriter.Writer, in Condition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Join))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Operator != nil {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Operator))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Condition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Condition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Condition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Condition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser32(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser33(in *jlexer.Lexer, out *Automations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "automations":
			if in.IsNull() {
				in.Skip()
				out.Automations = nil
			} else {
				in.Delim('[')
				if out.Automations == nil {
					if !in.IsDelim(']') {
						out.Automations = make([]*Automation, 0, 8)
					} else {
						out.Automations = []*Automation{}
					}
				} else {
					out.Automations = (out.Automations)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Automation
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Automation)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Automations = append(out.Automations, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser33(out *jwriter.Writer, in Automations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Automations) != 0 {
		const prefix string = ",\"automations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Automations {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Automations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Automations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Automations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Automations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser33(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser34(in *jlexer.Lexer, out *AutomationCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "automation_id":
			if in.IsNull() {
				in.Skip()
				out.AutomationId = nil
			} else {
				if out.AutomationId == nil {
					out.AutomationId = new(string)
				}
				*out.AutomationId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "event_id":
			if in.IsNull() {
				in.Skip()
				out.EventId = nil
			} else {
				if out.EventId == nil {
					out.EventId = new(string)
				}
				*out.EventId = string(in.String())
			}
		case "scope":
			if in.IsNull() {
				in.Skip()
				out.Scope = nil
			} else {
				if out.Scope == nil {
					out.Scope = new(string)
				}
				*out.Scope = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser34(out *jwriter.Writer, in AutomationCheck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AutomationId != nil {
		const prefix string = ",\"automation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AutomationId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.EventId != nil {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventId))
	}
	if in.Scope != nil {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Scope))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutomationCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutomationCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutomationCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutomationCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser34(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser35(in *jlexer.Lexer, out *Automation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(string)
				}
				*out.Channel = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*Condition, 0, 8)
					} else {
						out.Conditions = []*Condition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *Condition
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(Condition)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Conditions = append(out.Conditions, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "condition":
			if in.IsNull() {
				in.Skip()
				out.Condition = nil
			} else {
				if out.Condition == nil {
					out.Condition = new(SCondition)
				}
				(*out.Condition).UnmarshalEasyJSON(in)
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "action_type":
			if in.IsNull() {
				in.Skip()
				out.ActionType = nil
			} else {
				if out.ActionType == nil {
					out.ActionType = new(string)
				}
				*out.ActionType = string(in.String())
			}
		case "action_data":
			if in.IsNull() {
				in.Skip()
				out.ActionData = nil
			} else {
				if out.ActionData == nil {
					out.ActionData = new(string)
				}
				*out.ActionData = string(in.String())
			}
		case "scope":
			if in.IsNull() {
				in.Skip()
				out.Scope = nil
			} else {
				if out.Scope == nil {
					out.Scope = new(string)
				}
				*out.Scope = string(in.String())
			}
		case "cross_channel":
			if in.IsNull() {
				in.Skip()
				out.CrossChannel = nil
			} else {
				if out.CrossChannel == nil {
					out.CrossChannel = new(bool)
				}
				*out.CrossChannel = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(string)
				}
				*out.Metadata = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser35(out *jwriter.Writer, in Automation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Channel))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Conditions {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Condition != nil {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Condition).MarshalEasyJSON(out)
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.ActionType != nil {
		const prefix string = ",\"action_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ActionType))
	}
	if in.ActionData != nil {
		const prefix string = ",\"action_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ActionData))
	}
	if in.Scope != nil {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Scope))
	}
	if in.CrossChannel != nil {
		const prefix string = ",\"cross_channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CrossChannel))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Metadata))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Automation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Automation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Automation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Automation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser35(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser36(in *jlexer.Lexer, out *AttributeDefinitions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*AttributeDefinition, 0, 8)
					} else {
						out.Attributes = []*AttributeDefinition{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *AttributeDefinition
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(AttributeDefinition)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser36(out *jwriter.Writer, in AttributeDefinitions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Attributes {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttributeDefinitions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttributeDefinitions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttributeDefinitions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttributeDefinitions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser36(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser37(in *jlexer.Lexer, out *AttributeDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "list_items":
			if in.IsNull() {
				in.Skip()
				out.ListItems = nil
			} else {
				in.Delim('[')
				if out.ListItems == nil {
					if !in.IsDelim(']') {
						out.ListItems = make([]string, 0, 4)
					} else {
						out.ListItems = []string{}
					}
				} else {
					out.ListItems = (out.ListItems)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.ListItems = append(out.ListItems, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser37(out *jwriter.Writer, in AttributeDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if len(in.ListItems) != 0 {
		const prefix string = ",\"list_items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.ListItems {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Kind))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttributeDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttributeDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttributeDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttributeDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser37(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser38(in *jlexer.Lexer, out *AggregateUpdateInteracted) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "interacted":
			if in.IsNull() {
				in.Skip()
				out.Interacted = nil
			} else {
				if out.Interacted == nil {
					out.Interacted = new(int64)
				}
				*out.Interacted = int64(in.Int64())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser38(out *jwriter.Writer, in AggregateUpdateInteracted) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Interacted != nil {
		const prefix string = ",\"interacted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Interacted))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AggregateUpdateInteracted) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AggregateUpdateInteracted) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AggregateUpdateInteracted) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AggregateUpdateInteracted) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser38(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser39(in *jlexer.Lexer, out *AggregateSegmentAttrCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "min":
			if in.IsNull() {
				in.Skip()
				out.Min = nil
			} else {
				if out.Min == nil {
					out.Min = new(int64)
				}
				*out.Min = int64(in.Int64())
			}
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(int64)
				}
				*out.Count = int64(in.Int64())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "segmentation_id":
			if in.IsNull() {
				in.Skip()
				out.SegmentationId = nil
			} else {
				if out.SegmentationId == nil {
					out.SegmentationId = new(string)
				}
				*out.SegmentationId = string(in.String())
			}
		case "attribute":
			if in.IsNull() {
				in.Skip()
				out.Attribute = nil
			} else {
				if out.Attribute == nil {
					out.Attribute = new(string)
				}
				*out.Attribute = string(in.String())
			}
		case "hour":
			if in.IsNull() {
				in.Skip()
				out.Hour = nil
			} else {
				if out.Hour == nil {
					out.Hour = new(int64)
				}
				*out.Hour = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser39(out *jwriter.Writer, in AggregateSegmentAttrCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Min != nil {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Min))
	}
	if in.Count != nil {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Count))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.SegmentationId != nil {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SegmentationId))
	}
	if in.Attribute != nil {
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Attribute))
	}
	if in.Hour != nil {
		const prefix string = ",\"hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Hour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AggregateSegmentAttrCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AggregateSegmentAttrCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AggregateSegmentAttrCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AggregateSegmentAttrCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser39(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser40(in *jlexer.Lexer, out *AddToMyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.AgentIds = append(out.AgentIds, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser40(out *jwriter.Writer, in AddToMyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.AgentIds {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddToMyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddToMyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddToMyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddToMyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser40(l, v)
}
func easyjson2c075341DecodeGithubComSubizHeaderUser41(in *jlexer.Lexer, out *AddToMyList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c075341EncodeGithubComSubizHeaderUser41(out *jwriter.Writer, in AddToMyList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddToMyList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c075341EncodeGithubComSubizHeaderUser41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddToMyList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c075341EncodeGithubComSubizHeaderUser41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddToMyList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c075341DecodeGithubComSubizHeaderUser41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddToMyList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c075341DecodeGithubComSubizHeaderUser41(l, v)
}
