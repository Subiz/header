// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: user3.proto

package user

import (
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	content "github.com/subiz/header/content"
	conversation "github.com/subiz/header/conversation"
	email "github.com/subiz/header/email"
	noti5 "github.com/subiz/header/noti5"
	notibox "github.com/subiz/header/notibox"
	payment "github.com/subiz/header/payment"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AttributeType int32

const (
	AttributeType_text     AttributeType = 0
	AttributeType_number   AttributeType = 1
	AttributeType_boolean  AttributeType = 2
	AttributeType_datetime AttributeType = 3
	AttributeType_list     AttributeType = 4
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "text",
		1: "number",
		2: "boolean",
		3: "datetime",
		4: "list",
	}
	AttributeType_value = map[string]int32{
		"text":     0,
		"number":   1,
		"boolean":  2,
		"datetime": 3,
		"list":     4,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[0].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[0]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{0}
}

type AttributeKind int32

const (
	AttributeKind_system  AttributeKind = 0
	AttributeKind_default AttributeKind = 1
	AttributeKind_custom  AttributeKind = 2
)

// Enum value maps for AttributeKind.
var (
	AttributeKind_name = map[int32]string{
		0: "system",
		1: "default",
		2: "custom",
	}
	AttributeKind_value = map[string]int32{
		"system":  0,
		"default": 1,
		"custom":  2,
	}
)

func (x AttributeKind) Enum() *AttributeKind {
	p := new(AttributeKind)
	*p = x
	return p
}

func (x AttributeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[1].Descriptor()
}

func (AttributeKind) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[1]
}

func (x AttributeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeKind.Descriptor instead.
func (AttributeKind) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{1}
}

type HaveBeen int32

const (
	HaveBeen_unknown   HaveBeen = 0
	HaveBeen_increase  HaveBeen = 1
	HaveBeen_decrease  HaveBeen = 2
	HaveBeen_immutable HaveBeen = 3
)

// Enum value maps for HaveBeen.
var (
	HaveBeen_name = map[int32]string{
		0: "unknown",
		1: "increase",
		2: "decrease",
		3: "immutable",
	}
	HaveBeen_value = map[string]int32{
		"unknown":   0,
		"increase":  1,
		"decrease":  2,
		"immutable": 3,
	}
)

func (x HaveBeen) Enum() *HaveBeen {
	p := new(HaveBeen)
	*p = x
	return p
}

func (x HaveBeen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaveBeen) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[2].Descriptor()
}

func (HaveBeen) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[2]
}

func (x HaveBeen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaveBeen.Descriptor instead.
func (HaveBeen) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{2}
}

type SubPrefix int32

const (
	SubPrefix_Webhook   SubPrefix = 0
	SubPrefix_Websocket SubPrefix = 1
)

// Enum value maps for SubPrefix.
var (
	SubPrefix_name = map[int32]string{
		0: "Webhook",
		1: "Websocket",
	}
	SubPrefix_value = map[string]int32{
		"Webhook":   0,
		"Websocket": 1,
	}
)

func (x SubPrefix) Enum() *SubPrefix {
	p := new(SubPrefix)
	*p = x
	return p
}

func (x SubPrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubPrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[3].Descriptor()
}

func (SubPrefix) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[3]
}

func (x SubPrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubPrefix.Descriptor instead.
func (SubPrefix) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{3}
}

// to update
type AttributeData_Ops int32

const (
	AttributeData_upsert AttributeData_Ops = 0 // override
	AttributeData_insert AttributeData_Ops = 1 // only write if not existed
	AttributeData_update AttributeData_Ops = 4 // only write if existed
	AttributeData_append AttributeData_Ops = 6 // append to bottom
	AttributeData_remove AttributeData_Ops = 7 // not used yet
	AttributeData_delete AttributeData_Ops = 8 // not used yet
)

// Enum value maps for AttributeData_Ops.
var (
	AttributeData_Ops_name = map[int32]string{
		0: "upsert",
		1: "insert",
		4: "update",
		6: "append",
		7: "remove",
		8: "delete",
	}
	AttributeData_Ops_value = map[string]int32{
		"upsert": 0,
		"insert": 1,
		"update": 4,
		"append": 6,
		"remove": 7,
		"delete": 8,
	}
)

func (x AttributeData_Ops) Enum() *AttributeData_Ops {
	p := new(AttributeData_Ops)
	*p = x
	return p
}

func (x AttributeData_Ops) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeData_Ops) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[4].Descriptor()
}

func (AttributeData_Ops) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[4]
}

func (x AttributeData_Ops) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeData_Ops.Descriptor instead.
func (AttributeData_Ops) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{2, 0}
}

type Trace_DeviceType int32

const (
	Trace_unknown Trace_DeviceType = 0
	Trace_mobile  Trace_DeviceType = 1
	Trace_tablet  Trace_DeviceType = 2
	Trace_desktop Trace_DeviceType = 3
)

// Enum value maps for Trace_DeviceType.
var (
	Trace_DeviceType_name = map[int32]string{
		0: "unknown",
		1: "mobile",
		2: "tablet",
		3: "desktop",
	}
	Trace_DeviceType_value = map[string]int32{
		"unknown": 0,
		"mobile":  1,
		"tablet":  2,
		"desktop": 3,
	}
)

func (x Trace_DeviceType) Enum() *Trace_DeviceType {
	p := new(Trace_DeviceType)
	*p = x
	return p
}

func (x Trace_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[5].Descriptor()
}

func (Trace_DeviceType) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[5]
}

func (x Trace_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_DeviceType.Descriptor instead.
func (Trace_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{12, 0}
}

type Trace_AdsNetwork int32

const (
	Trace_google_adwords Trace_AdsNetwork = 0
)

// Enum value maps for Trace_AdsNetwork.
var (
	Trace_AdsNetwork_name = map[int32]string{
		0: "google_adwords",
	}
	Trace_AdsNetwork_value = map[string]int32{
		"google_adwords": 0,
	}
)

func (x Trace_AdsNetwork) Enum() *Trace_AdsNetwork {
	p := new(Trace_AdsNetwork)
	*p = x
	return p
}

func (x Trace_AdsNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_AdsNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[6].Descriptor()
}

func (Trace_AdsNetwork) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[6]
}

func (x Trace_AdsNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_AdsNetwork.Descriptor instead.
func (Trace_AdsNetwork) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{12, 1}
}

type Trace_Source int32

const (
	Trace_direct      Trace_Source = 0
	Trace_referring   Trace_Source = 1
	Trace_organic     Trace_Source = 2
	Trace_social      Trace_Source = 3
	Trace_advertising Trace_Source = 4
)

// Enum value maps for Trace_Source.
var (
	Trace_Source_name = map[int32]string{
		0: "direct",
		1: "referring",
		2: "organic",
		3: "social",
		4: "advertising",
	}
	Trace_Source_value = map[string]int32{
		"direct":      0,
		"referring":   1,
		"organic":     2,
		"social":      3,
		"advertising": 4,
	}
)

func (x Trace_Source) Enum() *Trace_Source {
	p := new(Trace_Source)
	*p = x
	return p
}

func (x Trace_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[7].Descriptor()
}

func (Trace_Source) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[7]
}

func (x Trace_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_Source.Descriptor instead.
func (Trace_Source) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{12, 2}
}

type CountSegmentationUserByAttributeRequest_Range int32

const (
	CountSegmentationUserByAttributeRequest_hour CountSegmentationUserByAttributeRequest_Range = 0
	CountSegmentationUserByAttributeRequest_day  CountSegmentationUserByAttributeRequest_Range = 1
)

// Enum value maps for CountSegmentationUserByAttributeRequest_Range.
var (
	CountSegmentationUserByAttributeRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountSegmentationUserByAttributeRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountSegmentationUserByAttributeRequest_Range) Enum() *CountSegmentationUserByAttributeRequest_Range {
	p := new(CountSegmentationUserByAttributeRequest_Range)
	*p = x
	return p
}

func (x CountSegmentationUserByAttributeRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountSegmentationUserByAttributeRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[8].Descriptor()
}

func (CountSegmentationUserByAttributeRequest_Range) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[8]
}

func (x CountSegmentationUserByAttributeRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountSegmentationUserByAttributeRequest_Range.Descriptor instead.
func (CountSegmentationUserByAttributeRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{16, 0}
}

type NoteLink_Type int32

const (
	NoteLink_conversation NoteLink_Type = 0 // link
	NoteLink_ticket       NoteLink_Type = 1
	NoteLink_deal         NoteLink_Type = 2
	NoteLink_user         NoteLink_Type = 3 // target
)

// Enum value maps for NoteLink_Type.
var (
	NoteLink_Type_name = map[int32]string{
		0: "conversation",
		1: "ticket",
		2: "deal",
		3: "user",
	}
	NoteLink_Type_value = map[string]int32{
		"conversation": 0,
		"ticket":       1,
		"deal":         2,
		"user":         3,
	}
)

func (x NoteLink_Type) Enum() *NoteLink_Type {
	p := new(NoteLink_Type)
	*p = x
	return p
}

func (x NoteLink_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteLink_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[9].Descriptor()
}

func (NoteLink_Type) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[9]
}

func (x NoteLink_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteLink_Type.Descriptor instead.
func (NoteLink_Type) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{33, 0}
}

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

// Enum value maps for Automation_State.
var (
	Automation_State_name = map[int32]string{
		0: "active",
		1: "inactive",
	}
	Automation_State_value = map[string]int32{
		"active":   0,
		"inactive": 1,
	}
)

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}

func (x Automation_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_State) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[10].Descriptor()
}

func (Automation_State) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[10]
}

func (x Automation_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_State.Descriptor instead.
func (Automation_State) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{68, 0}
}

type Automation_ActionType int32

const (
	Automation_conversation_message      Automation_ActionType = 0
	Automation_agent_notification        Automation_ActionType = 1
	Automation_block_user                Automation_ActionType = 5
	Automation_merge_users               Automation_ActionType = 7
	Automation_user_notification         Automation_ActionType = 8
	Automation_user_webhook              Automation_ActionType = 9
	Automation_user_note                 Automation_ActionType = 10
	Automation_conversation_message2     Automation_ActionType = 12
	Automation_conversation_webhook      Automation_ActionType = 13
	Automation_add_agent_to_conversation Automation_ActionType = 14
	Automation_create_ticket             Automation_ActionType = 15
	Automation_conversation_tag          Automation_ActionType = 16
	// agent_notification = 17;
	Automation_add_user_to_segmentation Automation_ActionType = 18
)

// Enum value maps for Automation_ActionType.
var (
	Automation_ActionType_name = map[int32]string{
		0:  "conversation_message",
		1:  "agent_notification",
		5:  "block_user",
		7:  "merge_users",
		8:  "user_notification",
		9:  "user_webhook",
		10: "user_note",
		12: "conversation_message2",
		13: "conversation_webhook",
		14: "add_agent_to_conversation",
		15: "create_ticket",
		16: "conversation_tag",
		18: "add_user_to_segmentation",
	}
	Automation_ActionType_value = map[string]int32{
		"conversation_message":      0,
		"agent_notification":        1,
		"block_user":                5,
		"merge_users":               7,
		"user_notification":         8,
		"user_webhook":              9,
		"user_note":                 10,
		"conversation_message2":     12,
		"conversation_webhook":      13,
		"add_agent_to_conversation": 14,
		"create_ticket":             15,
		"conversation_tag":          16,
		"add_user_to_segmentation":  18,
	}
)

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}

func (x Automation_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[11].Descriptor()
}

func (Automation_ActionType) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[11]
}

func (x Automation_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_ActionType.Descriptor instead.
func (Automation_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{68, 1}
}

type Automation_AutomationScope int32

const (
	Automation_conversation Automation_AutomationScope = 0
	Automation_user         Automation_AutomationScope = 3
)

// Enum value maps for Automation_AutomationScope.
var (
	Automation_AutomationScope_name = map[int32]string{
		0: "conversation",
		3: "user",
	}
	Automation_AutomationScope_value = map[string]int32{
		"conversation": 0,
		"user":         3,
	}
)

func (x Automation_AutomationScope) Enum() *Automation_AutomationScope {
	p := new(Automation_AutomationScope)
	*p = x
	return p
}

func (x Automation_AutomationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_AutomationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[12].Descriptor()
}

func (Automation_AutomationScope) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[12]
}

func (x Automation_AutomationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_AutomationScope.Descriptor instead.
func (Automation_AutomationScope) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{68, 2}
}

type AutomationAction_ActionType int32

const (
	AutomationAction_update_user_attribute          AutomationAction_ActionType = 0  // type user
	AutomationAction_block_user                     AutomationAction_ActionType = 1  // prop user
	AutomationAction_merge_users                    AutomationAction_ActionType = 3  // not yet defined
	AutomationAction_notify_user                    AutomationAction_ActionType = 4  // not yet defined
	AutomationAction_send_email                     AutomationAction_ActionType = 5  // prop email
	AutomationAction_add_user_note                  AutomationAction_ActionType = 6  // note
	AutomationAction_create_conversation            AutomationAction_ActionType = 7  // events, integration_id
	AutomationAction_send_message                   AutomationAction_ActionType = 8  // event
	AutomationAction_assign_agent_to_conversation   AutomationAction_ActionType = 9  // prop agent_ids
	AutomationAction_convert_conversation_to_ticket AutomationAction_ActionType = 10 // no prop
	AutomationAction_tag_conversation               AutomationAction_ActionType = 11 // tag_ids
	AutomationAction_send_webhook                   AutomationAction_ActionType = 12 // not yet defined
	AutomationAction_open_widget_screen             AutomationAction_ActionType = 14 // not yet defined
	AutomationAction_add_user_to_segmentation       AutomationAction_ActionType = 15 // segmentation_id
	AutomationAction_remove_user_from_segmentation  AutomationAction_ActionType = 16 // segmentation_id
	AutomationAction_send_chat_transcript_email     AutomationAction_ActionType = 17 // prop email
	AutomationAction_update_conversation_state      AutomationAction_ActionType = 18 // prop conversation_state
	AutomationAction_send_facebook_direct_message   AutomationAction_ActionType = 19 // prop event and facebook_page_id
)

// Enum value maps for AutomationAction_ActionType.
var (
	AutomationAction_ActionType_name = map[int32]string{
		0:  "update_user_attribute",
		1:  "block_user",
		3:  "merge_users",
		4:  "notify_user",
		5:  "send_email",
		6:  "add_user_note",
		7:  "create_conversation",
		8:  "send_message",
		9:  "assign_agent_to_conversation",
		10: "convert_conversation_to_ticket",
		11: "tag_conversation",
		12: "send_webhook",
		14: "open_widget_screen",
		15: "add_user_to_segmentation",
		16: "remove_user_from_segmentation",
		17: "send_chat_transcript_email",
		18: "update_conversation_state",
		19: "send_facebook_direct_message",
	}
	AutomationAction_ActionType_value = map[string]int32{
		"update_user_attribute":          0,
		"block_user":                     1,
		"merge_users":                    3,
		"notify_user":                    4,
		"send_email":                     5,
		"add_user_note":                  6,
		"create_conversation":            7,
		"send_message":                   8,
		"assign_agent_to_conversation":   9,
		"convert_conversation_to_ticket": 10,
		"tag_conversation":               11,
		"send_webhook":                   12,
		"open_widget_screen":             14,
		"add_user_to_segmentation":       15,
		"remove_user_from_segmentation":  16,
		"send_chat_transcript_email":     17,
		"update_conversation_state":      18,
		"send_facebook_direct_message":   19,
	}
)

func (x AutomationAction_ActionType) Enum() *AutomationAction_ActionType {
	p := new(AutomationAction_ActionType)
	*p = x
	return p
}

func (x AutomationAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[13].Descriptor()
}

func (AutomationAction_ActionType) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[13]
}

func (x AutomationAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationAction_ActionType.Descriptor instead.
func (AutomationAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{69, 0}
}

type AutomationCredit_Type int32

const (
	AutomationCredit_email   AutomationCredit_Type = 0
	AutomationCredit_webhook AutomationCredit_Type = 1
	AutomationCredit_message AutomationCredit_Type = 2
)

// Enum value maps for AutomationCredit_Type.
var (
	AutomationCredit_Type_name = map[int32]string{
		0: "email",
		1: "webhook",
		2: "message",
	}
	AutomationCredit_Type_value = map[string]int32{
		"email":   0,
		"webhook": 1,
		"message": 2,
	}
)

func (x AutomationCredit_Type) Enum() *AutomationCredit_Type {
	p := new(AutomationCredit_Type)
	*p = x
	return p
}

func (x AutomationCredit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationCredit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[14].Descriptor()
}

func (AutomationCredit_Type) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[14]
}

func (x AutomationCredit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationCredit_Type.Descriptor instead.
func (AutomationCredit_Type) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{74, 0}
}

type UserSession_DeviceType int32

const (
	UserSession_unknown UserSession_DeviceType = 0
	UserSession_mobile  UserSession_DeviceType = 1
	UserSession_tablet  UserSession_DeviceType = 2
	UserSession_desktop UserSession_DeviceType = 3
)

// Enum value maps for UserSession_DeviceType.
var (
	UserSession_DeviceType_name = map[int32]string{
		0: "unknown",
		1: "mobile",
		2: "tablet",
		3: "desktop",
	}
	UserSession_DeviceType_value = map[string]int32{
		"unknown": 0,
		"mobile":  1,
		"tablet":  2,
		"desktop": 3,
	}
)

func (x UserSession_DeviceType) Enum() *UserSession_DeviceType {
	p := new(UserSession_DeviceType)
	*p = x
	return p
}

func (x UserSession_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[15].Descriptor()
}

func (UserSession_DeviceType) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[15]
}

func (x UserSession_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_DeviceType.Descriptor instead.
func (UserSession_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{79, 0}
}

type UserSession_AdsNetwork int32

const (
	UserSession_google_adwords UserSession_AdsNetwork = 0
)

// Enum value maps for UserSession_AdsNetwork.
var (
	UserSession_AdsNetwork_name = map[int32]string{
		0: "google_adwords",
	}
	UserSession_AdsNetwork_value = map[string]int32{
		"google_adwords": 0,
	}
)

func (x UserSession_AdsNetwork) Enum() *UserSession_AdsNetwork {
	p := new(UserSession_AdsNetwork)
	*p = x
	return p
}

func (x UserSession_AdsNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_AdsNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[16].Descriptor()
}

func (UserSession_AdsNetwork) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[16]
}

func (x UserSession_AdsNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_AdsNetwork.Descriptor instead.
func (UserSession_AdsNetwork) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{79, 1}
}

type UserSession_Source int32

const (
	UserSession_direct      UserSession_Source = 0
	UserSession_referring   UserSession_Source = 1
	UserSession_organic     UserSession_Source = 2
	UserSession_social      UserSession_Source = 3
	UserSession_advertising UserSession_Source = 4
)

// Enum value maps for UserSession_Source.
var (
	UserSession_Source_name = map[int32]string{
		0: "direct",
		1: "referring",
		2: "organic",
		3: "social",
		4: "advertising",
	}
	UserSession_Source_value = map[string]int32{
		"direct":      0,
		"referring":   1,
		"organic":     2,
		"social":      3,
		"advertising": 4,
	}
)

func (x UserSession_Source) Enum() *UserSession_Source {
	p := new(UserSession_Source)
	*p = x
	return p
}

func (x UserSession_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_user3_proto_enumTypes[17].Descriptor()
}

func (UserSession_Source) Type() protoreflect.EnumType {
	return &file_user3_proto_enumTypes[17]
}

func (x UserSession_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_Source.Descriptor instead.
func (UserSession_Source) EnumDescriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{79, 2}
}

type TotalConvoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Total     int32           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TotalConvoUpdateRequest) Reset() {
	*x = TotalConvoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalConvoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalConvoUpdateRequest) ProtoMessage() {}

func (x *TotalConvoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalConvoUpdateRequest.ProtoReflect.Descriptor instead.
func (*TotalConvoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{0}
}

func (x *TotalConvoUpdateRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TotalConvoUpdateRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TotalConvoUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TotalConvoUpdateRequest) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TotalOpenTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Total     int32           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TotalOpenTicket) Reset() {
	*x = TotalOpenTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalOpenTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalOpenTicket) ProtoMessage() {}

func (x *TotalOpenTicket) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalOpenTicket.ProtoReflect.Descriptor instead.
func (*TotalOpenTicket) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{1}
}

func (x *TotalOpenTicket) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TotalOpenTicket) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TotalOpenTicket) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TotalOpenTicket) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AttributeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Key       string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Text      string   `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	Number    float64  `protobuf:"fixed64,11,opt,name=number,proto3" json:"number,omitempty"`
	Boolean   bool     `protobuf:"varint,12,opt,name=boolean,proto3" json:"boolean,omitempty"`
	Datetime  string   `protobuf:"bytes,13,opt,name=datetime,proto3" json:"datetime,omitempty"`
	List      []string `protobuf:"bytes,14,rep,name=list,proto3" json:"list,omitempty"`
	Action    string   `protobuf:"bytes,18,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AttributeData) Reset() {
	*x = AttributeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeData) ProtoMessage() {}

func (x *AttributeData) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeData.ProtoReflect.Descriptor instead.
func (*AttributeData) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{2}
}

func (x *AttributeData) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AttributeData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AttributeData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AttributeData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AttributeData) GetNumber() float64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AttributeData) GetBoolean() bool {
	if x != nil {
		return x.Boolean
	}
	return false
}

func (x *AttributeData) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *AttributeData) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AttributeData) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id              string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId       string            `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Traces          []*Trace          `protobuf:"bytes,11,rep,name=traces,proto3" json:"traces,omitempty"` // TODO: remove
	Attributes      []*AttributeData  `protobuf:"bytes,18,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Segments        []string          `protobuf:"bytes,19,rep,name=segments,proto3" json:"segments,omitempty"`
	SubizId         string            `protobuf:"bytes,25,opt,name=subiz_id,json=subizId,proto3" json:"subiz_id,omitempty"`
	Aliases         []string          `protobuf:"bytes,30,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Par             int32             `protobuf:"varint,34,opt,name=par,proto3" json:"par,omitempty"`
	Identifications []*Identification `protobuf:"bytes,39,rep,name=identifications,proto3" json:"identifications,omitempty"`
	Session         *UserSession      `protobuf:"bytes,40,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *User) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *User) GetAttributes() []*AttributeData {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *User) GetSegments() []string {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *User) GetSubizId() string {
	if x != nil {
		return x.SubizId
	}
	return ""
}

func (x *User) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *User) GetPar() int32 {
	if x != nil {
		return x.Par
	}
	return 0
}

func (x *User) GetIdentifications() []*Identification {
	if x != nil {
		return x.Identifications
	}
	return nil
}

func (x *User) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*User         `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Errors    []*common.Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Signature string          `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Hit       int64           `protobuf:"varint,4,opt,name=hit,proto3" json:"hit,omitempty"`
	Total     int64           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{4}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Users) GetErrors() []*common.Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Users) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Users) GetHit() int64 {
	if x != nil {
		return x.Hit
	}
	return 0
}

func (x *Users) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source  string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Medium  string `protobuf:"bytes,4,opt,name=medium,proto3" json:"medium,omitempty"`
	Term    string `protobuf:"bytes,5,opt,name=term,proto3" json:"term,omitempty"`
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{5}
}

func (x *Campaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Campaign) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Campaign) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *Campaign) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Campaign) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CountTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *CountTotalRequest) Reset() {
	*x = CountTotalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTotalRequest) ProtoMessage() {}

func (x *CountTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTotalRequest.ProtoReflect.Descriptor instead.
func (*CountTotalRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{6}
}

func (x *CountTotalRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CountTotalRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type CountTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUser float64 `protobuf:"fixed64,2,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
}

func (x *CountTotalResponse) Reset() {
	*x = CountTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTotalResponse) ProtoMessage() {}

func (x *CountTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTotalResponse.ProtoReflect.Descriptor instead.
func (*CountTotalResponse) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{7}
}

func (x *CountTotalResponse) GetTotalUser() float64 {
	if x != nil {
		return x.TotalUser
	}
	return 0
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{8}
}

func (x *CountResponse) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type MergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DestinationUserId string          `protobuf:"bytes,5,opt,name=destination_user_id,json=destinationUserId,proto3" json:"destination_user_id,omitempty"`
	SourceUserId      string          `protobuf:"bytes,4,opt,name=source_user_id,json=sourceUserId,proto3" json:"source_user_id,omitempty"`
}

func (x *MergeRequest) Reset() {
	*x = MergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequest) ProtoMessage() {}

func (x *MergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequest.ProtoReflect.Descriptor instead.
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{9}
}

func (x *MergeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *MergeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MergeRequest) GetDestinationUserId() string {
	if x != nil {
		return x.DestinationUserId
	}
	return ""
}

func (x *MergeRequest) GetSourceUserId() string {
	if x != nil {
		return x.SourceUserId
	}
	return ""
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Answer      string `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *CreateRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// TODO: remove
type Traces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces []*Trace `protobuf:"bytes,3,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *Traces) Reset() {
	*x = Traces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traces) ProtoMessage() {}

func (x *Traces) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traces.ProtoReflect.Descriptor instead.
func (*Traces) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{11}
}

func (x *Traces) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// TODO: replace this with user session
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string      `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Ip               string      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	LocationId       int32       `protobuf:"varint,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`          // remove
	CityName         string      `protobuf:"bytes,8,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                 // filled
	CountryName      string      `protobuf:"bytes,9,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`        // filled
	ContinentCode    string      `protobuf:"bytes,10,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"` // filled
	Latitude         float32     `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // filled
	Longitude        float32     `protobuf:"fixed32,13,opt,name=longitude,proto3" json:"longitude,omitempty"`                            // filled
	PostalCode       string      `protobuf:"bytes,14,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`          // filled
	Timezone         string      `protobuf:"bytes,16,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Isp              string      `protobuf:"bytes,17,opt,name=isp,proto3" json:"isp,omitempty"`                                          // filled
	ContinentName    string      `protobuf:"bytes,18,opt,name=continent_name,json=continentName,proto3" json:"continent_name,omitempty"` // filled
	CountryCode      string      `protobuf:"bytes,19,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`       // filled
	Platform         string      `protobuf:"bytes,20,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceType       string      `protobuf:"bytes,21,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`    // filled
	BrowserName      string      `protobuf:"bytes,22,opt,name=browser_name,json=browserName,proto3" json:"browser_name,omitempty"` // filled
	Language         string      `protobuf:"bytes,23,opt,name=language,proto3" json:"language,omitempty"`
	UserAgent        string      `protobuf:"bytes,24,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ScreenResolution string      `protobuf:"bytes,25,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	GaClientId       string      `protobuf:"bytes,26,opt,name=ga_client_id,json=gaClientId,proto3" json:"ga_client_id,omitempty"`
	GaTrackingIds    []string    `protobuf:"bytes,27,rep,name=ga_tracking_ids,json=gaTrackingIds,proto3" json:"ga_tracking_ids,omitempty"`
	AdsNetwork       string      `protobuf:"bytes,28,opt,name=ads_network,json=adsNetwork,proto3" json:"ads_network,omitempty"`
	Campaigns        []*Campaign `protobuf:"bytes,29,rep,name=campaigns,proto3" json:"campaigns,omitempty"`
	Created          int64       `protobuf:"varint,30,opt,name=created,proto3" json:"created,omitempty"`
	Tracked          int64       `protobuf:"varint,31,opt,name=tracked,proto3" json:"tracked,omitempty"`
	Referrer         string      `protobuf:"bytes,32,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Source           string      `protobuf:"bytes,33,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{12}
}

func (x *Trace) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Trace) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Trace) GetLocationId() int32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *Trace) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Trace) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Trace) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *Trace) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Trace) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Trace) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Trace) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Trace) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Trace) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *Trace) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Trace) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Trace) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Trace) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *Trace) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Trace) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Trace) GetScreenResolution() string {
	if x != nil {
		return x.ScreenResolution
	}
	return ""
}

func (x *Trace) GetGaClientId() string {
	if x != nil {
		return x.GaClientId
	}
	return ""
}

func (x *Trace) GetGaTrackingIds() []string {
	if x != nil {
		return x.GaTrackingIds
	}
	return nil
}

func (x *Trace) GetAdsNetwork() string {
	if x != nil {
		return x.AdsNetwork
	}
	return ""
}

func (x *Trace) GetCampaigns() []*Campaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

func (x *Trace) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Trace) GetTracked() int64 {
	if x != nil {
		return x.Tracked
	}
	return 0
}

func (x *Trace) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *Trace) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type UserSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Total        int64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Users        []*User          `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Anchor       string           `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Unreads      []int32          `protobuf:"varint,6,rep,packed,name=unreads,proto3" json:"unreads,omitempty"` // only used when search my users
	UnreadCounts map[string]int32 `protobuf:"bytes,7,rep,name=unread_counts,json=unreadCounts,proto3" json:"unread_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UserSearchResult) Reset() {
	*x = UserSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchResult) ProtoMessage() {}

func (x *UserSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchResult.ProtoReflect.Descriptor instead.
func (*UserSearchResult) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{13}
}

func (x *UserSearchResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserSearchResult) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserSearchResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserSearchResult) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserSearchResult) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *UserSearchResult) GetUnreads() []int32 {
	if x != nil {
		return x.Unreads
	}
	return nil
}

func (x *UserSearchResult) GetUnreadCounts() map[string]int32 {
	if x != nil {
		return x.UnreadCounts
	}
	return nil
}

type UnpickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId         string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SegmentationId string          `protobuf:"bytes,5,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty"`
}

func (x *UnpickRequest) Reset() {
	*x = UnpickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpickRequest) ProtoMessage() {}

func (x *UnpickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpickRequest.ProtoReflect.Descriptor instead.
func (*UnpickRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{14}
}

func (x *UnpickRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UnpickRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UnpickRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnpickRequest) GetSegmentationId() string {
	if x != nil {
		return x.SegmentationId
	}
	return ""
}

type PickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId         string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId        string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	SegmentationId string          `protobuf:"bytes,5,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty"`
	Added          int64           `protobuf:"varint,7,opt,name=added,proto3" json:"added,omitempty"`
	Updated        int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *PickRequest) Reset() {
	*x = PickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickRequest) ProtoMessage() {}

func (x *PickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickRequest.ProtoReflect.Descriptor instead.
func (*PickRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{15}
}

func (x *PickRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PickRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PickRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PickRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *PickRequest) GetSegmentationId() string {
	if x != nil {
		return x.SegmentationId
	}
	return ""
}

func (x *PickRequest) GetAdded() int64 {
	if x != nil {
		return x.Added
	}
	return 0
}

func (x *PickRequest) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type CountSegmentationUserByAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AttributeKey   string          `protobuf:"bytes,3,opt,name=attribute_key,json=attributeKey,proto3" json:"attribute_key,omitempty"`
	SegmentationId string          `protobuf:"bytes,4,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty"`
	From           int32           `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty"` // deprecated
	To             int32           `protobuf:"varint,6,opt,name=to,proto3" json:"to,omitempty"`     // deprecated
	Range          string          `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	FromHour       int32           `protobuf:"varint,9,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour         int32           `protobuf:"varint,10,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
}

func (x *CountSegmentationUserByAttributeRequest) Reset() {
	*x = CountSegmentationUserByAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSegmentationUserByAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSegmentationUserByAttributeRequest) ProtoMessage() {}

func (x *CountSegmentationUserByAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSegmentationUserByAttributeRequest.ProtoReflect.Descriptor instead.
func (*CountSegmentationUserByAttributeRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{16}
}

func (x *CountSegmentationUserByAttributeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CountSegmentationUserByAttributeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CountSegmentationUserByAttributeRequest) GetAttributeKey() string {
	if x != nil {
		return x.AttributeKey
	}
	return ""
}

func (x *CountSegmentationUserByAttributeRequest) GetSegmentationId() string {
	if x != nil {
		return x.SegmentationId
	}
	return ""
}

func (x *CountSegmentationUserByAttributeRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *CountSegmentationUserByAttributeRequest) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *CountSegmentationUserByAttributeRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *CountSegmentationUserByAttributeRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *CountSegmentationUserByAttributeRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

type Visitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	User       *User           `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Pinged     int64           `protobuf:"varint,5,opt,name=pinged,proto3" json:"pinged,omitempty"`
	PageUrl    string          `protobuf:"bytes,6,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	PageViewed int64           `protobuf:"varint,7,opt,name=page_viewed,json=pageViewed,proto3" json:"page_viewed,omitempty"`
	PageTitle  string          `protobuf:"bytes,8,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
}

func (x *Visitor) Reset() {
	*x = Visitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Visitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Visitor) ProtoMessage() {}

func (x *Visitor) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Visitor.ProtoReflect.Descriptor instead.
func (*Visitor) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{17}
}

func (x *Visitor) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Visitor) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Visitor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Visitor) GetPinged() int64 {
	if x != nil {
		return x.Pinged
	}
	return 0
}

func (x *Visitor) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *Visitor) GetPageViewed() int64 {
	if x != nil {
		return x.PageViewed
	}
	return 0
}

func (x *Visitor) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

type Visitors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Visitors []*Visitor      `protobuf:"bytes,2,rep,name=visitors,proto3" json:"visitors,omitempty"`
}

func (x *Visitors) Reset() {
	*x = Visitors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Visitors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Visitors) ProtoMessage() {}

func (x *Visitors) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Visitors.ProtoReflect.Descriptor instead.
func (*Visitors) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{18}
}

func (x *Visitors) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Visitors) GetVisitors() []*Visitor {
	if x != nil {
		return x.Visitors
	}
	return nil
}

type LastView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Ua        string `protobuf:"bytes,6,opt,name=ua,proto3" json:"ua,omitempty"`
	Ip        string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Created   int64  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	EventId   string `protobuf:"bytes,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Title     string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *LastView) Reset() {
	*x = LastView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastView) ProtoMessage() {}

func (x *LastView) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastView.ProtoReflect.Descriptor instead.
func (*LastView) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{19}
}

func (x *LastView) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LastView) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LastView) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LastView) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *LastView) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LastView) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *LastView) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *LastView) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type SubscribeTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Topics    string          `protobuf:"bytes,4,opt,name=topics,proto3" json:"topics,omitempty"`
}

func (x *SubscribeTopic) Reset() {
	*x = SubscribeTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTopic) ProtoMessage() {}

func (x *SubscribeTopic) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTopic.ProtoReflect.Descriptor instead.
func (*SubscribeTopic) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{20}
}

func (x *SubscribeTopic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscribeTopic) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SubscribeTopic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SubscribeTopic) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

type MuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Topic     string          `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	Mute      bool            `protobuf:"varint,6,opt,name=mute,proto3" json:"mute,omitempty"` // true, false
}

func (x *MuteRequest) Reset() {
	*x = MuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteRequest) ProtoMessage() {}

func (x *MuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteRequest.ProtoReflect.Descriptor instead.
func (*MuteRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{21}
}

func (x *MuteRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *MuteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MuteRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MuteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MuteRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MuteRequest) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

type SubscribeUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserIds   string          `protobuf:"bytes,4,opt,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *SubscribeUser) Reset() {
	*x = SubscribeUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeUser) ProtoMessage() {}

func (x *SubscribeUser) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeUser.ProtoReflect.Descriptor instead.
func (*SubscribeUser) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{22}
}

func (x *SubscribeUser) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscribeUser) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SubscribeUser) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SubscribeUser) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

type ReadTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Topic     string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Read      int64           `protobuf:"varint,6,opt,name=read,proto3" json:"read,omitempty"` // read time in milisecond
}

func (x *ReadTopicRequest) Reset() {
	*x = ReadTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTopicRequest) ProtoMessage() {}

func (x *ReadTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTopicRequest.ProtoReflect.Descriptor instead.
func (*ReadTopicRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{23}
}

func (x *ReadTopicRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReadTopicRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadTopicRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReadTopicRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ReadTopicRequest) GetRead() int64 {
	if x != nil {
		return x.Read
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Topics    []string        `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{24}
}

func (x *SubscribeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscribeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SubscribeRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SubscribeRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type AddToMyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentIds  []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // used within user service only
}

func (x *AddToMyRequest) Reset() {
	*x = AddToMyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToMyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToMyRequest) ProtoMessage() {}

func (x *AddToMyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToMyRequest.ProtoReflect.Descriptor instead.
func (*AddToMyRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{25}
}

func (x *AddToMyRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddToMyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddToMyRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AddToMyRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DeleteAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Key string          `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteAttrRequest) Reset() {
	*x = DeleteAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttrRequest) ProtoMessage() {}

func (x *DeleteAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttrRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttrRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteAttrRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteAttrRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AttributeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	ListItems   []string        `protobuf:"bytes,6,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"`
	Key         string          `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Kind        string          `protobuf:"bytes,8,opt,name=kind,proto3" json:"kind,omitempty"`
	Updated     int64           `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AttributeDefinition) Reset() {
	*x = AttributeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinition) ProtoMessage() {}

func (x *AttributeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinition.ProtoReflect.Descriptor instead.
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{27}
}

func (x *AttributeDefinition) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AttributeDefinition) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AttributeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttributeDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AttributeDefinition) GetListItems() []string {
	if x != nil {
		return x.ListItems
	}
	return nil
}

func (x *AttributeDefinition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AttributeDefinition) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AttributeDefinition) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type AttributeDefinitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context        `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Attributes []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AttributeDefinitions) Reset() {
	*x = AttributeDefinitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinitions) ProtoMessage() {}

func (x *AttributeDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinitions.ProtoReflect.Descriptor instead.
func (*AttributeDefinitions) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{28}
}

func (x *AttributeDefinitions) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AttributeDefinitions) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type AddToMyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AgentId   string          `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddToMyList) Reset() {
	*x = AddToMyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToMyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToMyList) ProtoMessage() {}

func (x *AddToMyList) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToMyList.ProtoReflect.Descriptor instead.
func (*AddToMyList) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{29}
}

func (x *AddToMyList) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddToMyList) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AddToMyList) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddToMyList) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type UserCreateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Mask string `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *UserCreateResult) Reset() {
	*x = UserCreateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreateResult) ProtoMessage() {}

func (x *UserCreateResult) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreateResult.ProtoReflect.Descriptor instead.
func (*UserCreateResult) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{30}
}

func (x *UserCreateResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserCreateResult) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type Identification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId        string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId     string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Alias         string          `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	Value         string          `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Channel       string          `protobuf:"bytes,9,opt,name=channel,proto3" json:"channel,omitempty"`
	IntegrationId string          `protobuf:"bytes,10,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	Source        string          `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	Trusted       bool            `protobuf:"varint,12,opt,name=trusted,proto3" json:"trusted,omitempty"`
	Created       int64           `protobuf:"varint,13,opt,name=created,proto3" json:"created,omitempty"`
	UserIds       []string        `protobuf:"bytes,14,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *Identification) Reset() {
	*x = Identification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identification) ProtoMessage() {}

func (x *Identification) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identification.ProtoReflect.Descriptor instead.
func (*Identification) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{31}
}

func (x *Identification) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Identification) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Identification) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Identification) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Identification) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Identification) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Identification) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *Identification) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Identification) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *Identification) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Identification) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id         string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	CreatorId  string          `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Text       string          `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Created    int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Updated    int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	TargetId   string          `protobuf:"bytes,9,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`        // deprecated
	TargetType string          `protobuf:"bytes,10,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"` // deprecated
	Links      []*NoteLink     `protobuf:"bytes,14,rep,name=links,proto3" json:"links,omitempty"`                             // generated by our service
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{32}
}

func (x *Note) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Note) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Note) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Note) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Note) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Note) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Note) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Note) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Note) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *Note) GetLinks() []*NoteLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type NoteLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NoteLink) Reset() {
	*x = NoteLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteLink) ProtoMessage() {}

func (x *NoteLink) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteLink.ProtoReflect.Descriptor instead.
func (*NoteLink) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{33}
}

func (x *NoteLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NoteLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Notes  []*Note         `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	Anchor string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Notes) Reset() {
	*x = Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notes) ProtoMessage() {}

func (x *Notes) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notes.ProtoReflect.Descriptor instead.
func (*Notes) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{34}
}

func (x *Notes) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Notes) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Notes) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type ListNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TargetId  string          `protobuf:"bytes,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Limit     int32           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor    string          `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Keyword   string          `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Links     []*NoteLink     `protobuf:"bytes,8,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *ListNotesRequest) Reset() {
	*x = ListNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotesRequest) ProtoMessage() {}

func (x *ListNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotesRequest.ProtoReflect.Descriptor instead.
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{35}
}

func (x *ListNotesRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListNotesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNotesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListNotesRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *ListNotesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNotesRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListNotesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListNotesRequest) GetLinks() []*NoteLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteNoteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteNoteRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeleteNoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNoteRequest) Reset() {
	*x = GetNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoteRequest) ProtoMessage() {}

func (x *GetNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoteRequest.ProtoReflect.Descriptor instead.
func (*GetNoteRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{37}
}

func (x *GetNoteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetNoteRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *GetNoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TODO move params to common
type IntParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  int64 `protobuf:"varint,2,opt,name=eq,proto3" json:"eq,omitempty"`
	Neq int64 `protobuf:"varint,3,opt,name=neq,proto3" json:"neq,omitempty"`
	Gt  int64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte int64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  int64 `protobuf:"varint,6,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte int64 `protobuf:"varint,7,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *IntParams) Reset() {
	*x = IntParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntParams) ProtoMessage() {}

func (x *IntParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntParams.ProtoReflect.Descriptor instead.
func (*IntParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{38}
}

func (x *IntParams) GetEq() int64 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *IntParams) GetNeq() int64 {
	if x != nil {
		return x.Neq
	}
	return 0
}

func (x *IntParams) GetGt() int64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *IntParams) GetGte() int64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *IntParams) GetLt() int64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *IntParams) GetLte() int64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

type StringParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq string   `protobuf:"bytes,2,opt,name=eq,proto3" json:"eq,omitempty"`
	In []string `protobuf:"bytes,3,rep,name=in,proto3" json:"in,omitempty"`
}

func (x *StringParams) Reset() {
	*x = StringParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringParams) ProtoMessage() {}

func (x *StringParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringParams.ProtoReflect.Descriptor instead.
func (*StringParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{39}
}

func (x *StringParams) GetEq() string {
	if x != nil {
		return x.Eq
	}
	return ""
}

func (x *StringParams) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

type IdParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdParams) Reset() {
	*x = IdParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdParams) ProtoMessage() {}

func (x *IdParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdParams.ProtoReflect.Descriptor instead.
func (*IdParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{40}
}

func (x *IdParams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdParams) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{41}
}

func (x *Params) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isp           string  `protobuf:"bytes,3,opt,name=isp,proto3" json:"isp,omitempty"`                                          // filled
	ContinentName string  `protobuf:"bytes,4,opt,name=continent_name,json=continentName,proto3" json:"continent_name,omitempty"` // filled
	CountryCode   string  `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`       // filled
	CityName      string  `protobuf:"bytes,6,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                // filled
	CountryName   string  `protobuf:"bytes,7,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`       // filled
	ContinentCode string  `protobuf:"bytes,8,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"` // filled
	Latitude      float32 `protobuf:"fixed32,9,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // filled
	Longitude     float32 `protobuf:"fixed32,10,opt,name=longitude,proto3" json:"longitude,omitempty"`                           // filled
	PostalCode    string  `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`         // filled
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{42}
}

func (x *Location) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Location) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *Location) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Location) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Location) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Location) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

type Locations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Location     `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	Errors    []*common.Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Locations) Reset() {
	*x = Locations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locations) ProtoMessage() {}

func (x *Locations) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locations.ProtoReflect.Descriptor instead.
func (*Locations) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{43}
}

func (x *Locations) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Locations) GetErrors() []*common.Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type LocationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *LocationParams) Reset() {
	*x = LocationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationParams) ProtoMessage() {}

func (x *LocationParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationParams.ProtoReflect.Descriptor instead.
func (*LocationParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{44}
}

func (x *LocationParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *LocationParams) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{45}
}

func (x *Page) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Page) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Page) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UserId   string    `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Created  int64     `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Type     string    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Source   string    `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`     // from user session
	Location *Location `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"` // from user session
	Page     *Page     `protobuf:"bytes,8,opt,name=page,proto3" json:"page,omitempty"`         // from event
	Content  string    `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserAction) Reset() {
	*x = UserAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAction) ProtoMessage() {}

func (x *UserAction) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAction.ProtoReflect.Descriptor instead.
func (*UserAction) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{46}
}

func (x *UserAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAction) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UserAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserAction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UserAction) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UserAction) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UserAction) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Updated            int64     `protobuf:"varint,3,opt,name=updated,proto3" json:"updated,omitempty"`
	User               *User     `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Viewing            *Page     `protobuf:"bytes,5,opt,name=viewing,proto3" json:"viewing,omitempty"`
	Source             string    `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Location           *Location `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	ViewCount          int64     `protobuf:"varint,8,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"` // deprecated
	Duration           int64     `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	LatestEventCreated int64     `protobuf:"varint,10,opt,name=latest_event_created,json=latestEventCreated,proto3" json:"latest_event_created,omitempty"`
	UserSessionId      string    `protobuf:"bytes,11,opt,name=user_session_id,json=userSessionId,proto3" json:"user_session_id,omitempty"`
	ViewPages          []*Page   `protobuf:"bytes,12,rep,name=view_pages,json=viewPages,proto3" json:"view_pages,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{47}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UserInfo) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserInfo) GetViewing() *Page {
	if x != nil {
		return x.Viewing
	}
	return nil
}

func (x *UserInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UserInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UserInfo) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *UserInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserInfo) GetLatestEventCreated() int64 {
	if x != nil {
		return x.LatestEventCreated
	}
	return 0
}

func (x *UserInfo) GetUserSessionId() string {
	if x != nil {
		return x.UserSessionId
	}
	return ""
}

func (x *UserInfo) GetViewPages() []*Page {
	if x != nil {
		return x.ViewPages
	}
	return nil
}

type UserInfoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature  string     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Limit      int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy    string     `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Source     *IdParams  `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	PageId     *IdParams  `protobuf:"bytes,8,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	LocationId *IdParams  `protobuf:"bytes,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ViewCount  *IntParams `protobuf:"bytes,9,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Duration   *IntParams `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// location params
	CountryCode   *StringParams `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ContinentCode *StringParams `protobuf:"bytes,12,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"`
}

func (x *UserInfoParams) Reset() {
	*x = UserInfoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoParams) ProtoMessage() {}

func (x *UserInfoParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoParams.ProtoReflect.Descriptor instead.
func (*UserInfoParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{48}
}

func (x *UserInfoParams) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserInfoParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserInfoParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserInfoParams) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *UserInfoParams) GetSource() *IdParams {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UserInfoParams) GetPageId() *IdParams {
	if x != nil {
		return x.PageId
	}
	return nil
}

func (x *UserInfoParams) GetLocationId() *IdParams {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *UserInfoParams) GetViewCount() *IntParams {
	if x != nil {
		return x.ViewCount
	}
	return nil
}

func (x *UserInfoParams) GetDuration() *IntParams {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *UserInfoParams) GetCountryCode() *StringParams {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *UserInfoParams) GetContinentCode() *StringParams {
	if x != nil {
		return x.ContinentCode
	}
	return nil
}

type UserInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInfoData) Reset() {
	*x = UserInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoData) ProtoMessage() {}

func (x *UserInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoData.ProtoReflect.Descriptor instead.
func (*UserInfoData) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{49}
}

func (x *UserInfoData) GetData() []*UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ActiveUserNum int64  `protobuf:"varint,3,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *UserMetric) Reset() {
	*x = UserMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetric) ProtoMessage() {}

func (x *UserMetric) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetric.ProtoReflect.Descriptor instead.
func (*UserMetric) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{50}
}

func (x *UserMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *UserMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type SourceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Source        string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // direct, referring, organic,social, advertising
	ActiveUserNum int64  `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *SourceMetric) Reset() {
	*x = SourceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMetric) ProtoMessage() {}

func (x *SourceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMetric.ProtoReflect.Descriptor instead.
func (*SourceMetric) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{51}
}

func (x *SourceMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SourceMetric) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SourceMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *SourceMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type LocationMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string    `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Location      *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	ActiveUserNum int64     `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string    `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *LocationMetric) Reset() {
	*x = LocationMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetric) ProtoMessage() {}

func (x *LocationMetric) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetric.ProtoReflect.Descriptor instead.
func (*LocationMetric) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{52}
}

func (x *LocationMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LocationMetric) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LocationMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *LocationMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type PageMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Page          *Page  `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	ActiveUserNum int64  `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *PageMetric) Reset() {
	*x = PageMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMetric) ProtoMessage() {}

func (x *PageMetric) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMetric.ProtoReflect.Descriptor instead.
func (*PageMetric) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{53}
}

func (x *PageMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PageMetric) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PageMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *PageMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type UserReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TotalUser   *UserMetric       `protobuf:"bytes,3,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
	TopSource   []*SourceMetric   `protobuf:"bytes,4,rep,name=top_source,json=topSource,proto3" json:"top_source,omitempty"`
	TopLocation []*LocationMetric `protobuf:"bytes,5,rep,name=top_location,json=topLocation,proto3" json:"top_location,omitempty"`
	TopPage     []*PageMetric     `protobuf:"bytes,6,rep,name=top_page,json=topPage,proto3" json:"top_page,omitempty"`
}

func (x *UserReport) Reset() {
	*x = UserReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReport) ProtoMessage() {}

func (x *UserReport) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReport.ProtoReflect.Descriptor instead.
func (*UserReport) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{54}
}

func (x *UserReport) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserReport) GetTotalUser() *UserMetric {
	if x != nil {
		return x.TotalUser
	}
	return nil
}

func (x *UserReport) GetTopSource() []*SourceMetric {
	if x != nil {
		return x.TopSource
	}
	return nil
}

func (x *UserReport) GetTopLocation() []*LocationMetric {
	if x != nil {
		return x.TopLocation
	}
	return nil
}

func (x *UserReport) GetTopPage() []*PageMetric {
	if x != nil {
		return x.TopPage
	}
	return nil
}

type SourceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceMetrics []*SourceMetric `protobuf:"bytes,2,rep,name=source_metrics,json=sourceMetrics,proto3" json:"source_metrics,omitempty"`
}

func (x *SourceMetrics) Reset() {
	*x = SourceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMetrics) ProtoMessage() {}

func (x *SourceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMetrics.ProtoReflect.Descriptor instead.
func (*SourceMetrics) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{55}
}

func (x *SourceMetrics) GetSourceMetrics() []*SourceMetric {
	if x != nil {
		return x.SourceMetrics
	}
	return nil
}

type LocationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationMetrics []*LocationMetric `protobuf:"bytes,2,rep,name=location_metrics,json=locationMetrics,proto3" json:"location_metrics,omitempty"`
}

func (x *LocationMetrics) Reset() {
	*x = LocationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetrics) ProtoMessage() {}

func (x *LocationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetrics.ProtoReflect.Descriptor instead.
func (*LocationMetrics) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{56}
}

func (x *LocationMetrics) GetLocationMetrics() []*LocationMetric {
	if x != nil {
		return x.LocationMetrics
	}
	return nil
}

type PageMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageMetrics []*PageMetric `protobuf:"bytes,2,rep,name=page_metrics,json=pageMetrics,proto3" json:"page_metrics,omitempty"`
}

func (x *PageMetrics) Reset() {
	*x = PageMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMetrics) ProtoMessage() {}

func (x *PageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMetrics.ProtoReflect.Descriptor instead.
func (*PageMetrics) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{57}
}

func (x *PageMetrics) GetPageMetrics() []*PageMetric {
	if x != nil {
		return x.PageMetrics
	}
	return nil
}

///////////////////////
type RawEventCreatedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Subs        []string        `protobuf:"bytes,3,rep,name=subs,proto3" json:"subs,omitempty"`
	TargetTopic string          `protobuf:"bytes,4,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	Payload     string          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"` //json format
	TargetKey   string          `protobuf:"bytes,6,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Payloads    []string        `protobuf:"bytes,7,rep,name=payloads,proto3" json:"payloads,omitempty"` // payload for each sub, payload must be empty
	Topic       string          `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	RouterTopic string          `protobuf:"bytes,10,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	Sub         string          `protobuf:"bytes,11,opt,name=sub,proto3" json:"sub,omitempty"`
	Created     int64           `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"` // in ms
	Data        []byte          `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`        // payload in bytes format
}

func (x *RawEventCreatedPayload) Reset() {
	*x = RawEventCreatedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawEventCreatedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawEventCreatedPayload) ProtoMessage() {}

func (x *RawEventCreatedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawEventCreatedPayload.ProtoReflect.Descriptor instead.
func (*RawEventCreatedPayload) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{58}
}

func (x *RawEventCreatedPayload) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RawEventCreatedPayload) GetSubs() []string {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *RawEventCreatedPayload) GetTargetTopic() string {
	if x != nil {
		return x.TargetTopic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RawEventCreatedPayload) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *RawEventCreatedPayload) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *RawEventCreatedPayload) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetRouterTopic() string {
	if x != nil {
		return x.RouterTopic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *RawEventCreatedPayload) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *RawEventCreatedPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Events []*Event        `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	Total  int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{59}
}

func (x *Events) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Events) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Events) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId    string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // TODO: remove
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // TODO: remove
	Created   int64           `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Type      string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`      // eventtype
	Topics    []string        `protobuf:"bytes,11,rep,name=topics,proto3" json:"topics,omitempty"` // TODO: remove
	SessionId string          `protobuf:"bytes,12,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	By        *common.By      `protobuf:"bytes,50,opt,name=by,proto3" json:"by,omitempty"`
	Data      *Event_Data     `protobuf:"bytes,20,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{60}
}

func (x *Event) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Event) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Event) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Event) GetBy() *common.By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Event) GetData() *Event_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EventParams) Reset() {
	*x = EventParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParams) ProtoMessage() {}

func (x *EventParams) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParams.ProtoReflect.Descriptor instead.
func (*EventParams) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{61}
}

func (x *EventParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic           string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SubId           string          `protobuf:"bytes,7,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	TargetTopic     string          `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	TargetKey       string          `protobuf:"bytes,11,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Ttls            int64           `protobuf:"varint,12,opt,name=ttls,proto3" json:"ttls,omitempty"`
	RouterTopic     string          `protobuf:"bytes,13,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	TargetPartition int32           `protobuf:"varint,14,opt,name=target_partition,json=targetPartition,proto3" json:"target_partition,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{62}
}

func (x *Subscription) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscription) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

func (x *Subscription) GetTargetTopic() string {
	if x != nil {
		return x.TargetTopic
	}
	return ""
}

func (x *Subscription) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *Subscription) GetTtls() int64 {
	if x != nil {
		return x.Ttls
	}
	return 0
}

func (x *Subscription) GetRouterTopic() string {
	if x != nil {
		return x.RouterTopic
	}
	return ""
}

func (x *Subscription) GetTargetPartition() int32 {
	if x != nil {
		return x.TargetPartition
	}
	return 0
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Query     string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Category  string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{63}
}

func (x *ListEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListEventsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListEventsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListEventsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event     *Event          `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	User      *User           `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{64}
}

func (x *UserEvent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *UserEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Status bool            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{65}
}

func (x *SubscriptionResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscriptionResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type AutomationCalledback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string            `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId       string            `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AutomationId string            `protobuf:"bytes,5,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	Event        *Event            `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	Action       *AutomationAction `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AutomationCalledback) Reset() {
	*x = AutomationCalledback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCalledback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCalledback) ProtoMessage() {}

func (x *AutomationCalledback) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCalledback.ProtoReflect.Descriptor instead.
func (*AutomationCalledback) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{66}
}

func (x *AutomationCalledback) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCalledback) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCalledback) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationCalledback) GetAutomationId() string {
	if x != nil {
		return x.AutomationId
	}
	return ""
}

func (x *AutomationCalledback) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationCalledback) GetAction() *AutomationAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type AutomationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string            `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId     string            `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Automation *Automation       `protobuf:"bytes,5,opt,name=automation,proto3" json:"automation,omitempty"`
	User       *User             `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Event      *Event            `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	Action     *AutomationAction `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AutomationEvent) Reset() {
	*x = AutomationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationEvent) ProtoMessage() {}

func (x *AutomationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationEvent.ProtoReflect.Descriptor instead.
func (*AutomationEvent) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{67}
}

func (x *AutomationEvent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationEvent) GetAutomation() *Automation {
	if x != nil {
		return x.Automation
	}
	return nil
}

func (x *AutomationEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AutomationEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationEvent) GetAction() *AutomationAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Automation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id           string              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Channel      string              `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"` // deprecated
	Name         string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Conditions   []*Condition        `protobuf:"bytes,7,rep,name=conditions,proto3" json:"conditions,omitempty"` // deprecated
	Condition    *SCondition         `protobuf:"bytes,8,opt,name=condition,proto3" json:"condition,omitempty"`
	Created      int64               `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified     int64               `protobuf:"varint,10,opt,name=modified,proto3" json:"modified,omitempty"`
	State        string              `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	ActionType   string              `protobuf:"bytes,13,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`        // deprecated
	ActionData   string              `protobuf:"bytes,14,opt,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`        // deprecated
	Scope        string              `protobuf:"bytes,15,opt,name=scope,proto3" json:"scope,omitempty"`                                    // deprecated
	CrossChannel bool                `protobuf:"varint,16,opt,name=cross_channel,json=crossChannel,proto3" json:"cross_channel,omitempty"` // deprecated
	Metadata     string              `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Actions      []*AutomationAction `protobuf:"bytes,18,rep,name=actions,proto3" json:"actions,omitempty"`
	DelaySec     uint32              `protobuf:"varint,19,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
	ActionId     string              `protobuf:"bytes,20,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"` // deprecated, prepare for migrate
}

func (x *Automation) Reset() {
	*x = Automation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automation) ProtoMessage() {}

func (x *Automation) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Automation.ProtoReflect.Descriptor instead.
func (*Automation) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{68}
}

func (x *Automation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Automation) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Automation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Automation) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Automation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Automation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Automation) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Automation) GetCondition() *SCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Automation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Automation) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Automation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Automation) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *Automation) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

func (x *Automation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Automation) GetCrossChannel() bool {
	if x != nil {
		return x.CrossChannel
	}
	return false
}

func (x *Automation) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Automation) GetActions() []*AutomationAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Automation) GetDelaySec() uint32 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

func (x *Automation) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type AutomationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              string                    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	User              *User                     `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Email             *email.Email              `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	UserNote          *Note                     `protobuf:"bytes,6,opt,name=user_note,json=userNote,proto3" json:"user_note,omitempty"`
	Event             *Event                    `protobuf:"bytes,7,opt,name=event,proto3" json:"event,omitempty"`
	AgentId           string                    `protobuf:"bytes,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // deprecated
	TagId             string                    `protobuf:"bytes,9,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`       // deprecated
	Events            []*Event                  `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Ticket            *conversation.Ticket      `protobuf:"bytes,11,opt,name=ticket,proto3" json:"ticket,omitempty"`
	IntegrationId     string                    `protobuf:"bytes,12,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	SegmentationId    string                    `protobuf:"bytes,13,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty"`
	AgentIds          []string                  `protobuf:"bytes,14,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	TagIds            []string                  `protobuf:"bytes,15,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Scope             string                    `protobuf:"bytes,16,opt,name=scope,proto3" json:"scope,omitempty"`
	ConversationState string                    `protobuf:"bytes,17,opt,name=conversation_state,json=conversationState,proto3" json:"conversation_state,omitempty"`
	Id                string                    `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty"` // required, generated by subiz to check whether an action is performed or not
	WebhookId         string                    `protobuf:"bytes,19,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	WebhookSetting    *AutomationWebhookSetting `protobuf:"bytes,20,opt,name=webhook_setting,json=webhookSetting,proto3" json:"webhook_setting,omitempty"`
	DelaySec          uint32                    `protobuf:"varint,21,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
	FacebookPageId    string                    `protobuf:"bytes,22,opt,name=facebook_page_id,json=facebookPageId,proto3" json:"facebook_page_id,omitempty"`
}

func (x *AutomationAction) Reset() {
	*x = AutomationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationAction) ProtoMessage() {}

func (x *AutomationAction) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationAction.ProtoReflect.Descriptor instead.
func (*AutomationAction) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{69}
}

func (x *AutomationAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutomationAction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AutomationAction) GetEmail() *email.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AutomationAction) GetUserNote() *Note {
	if x != nil {
		return x.UserNote
	}
	return nil
}

func (x *AutomationAction) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationAction) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AutomationAction) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *AutomationAction) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AutomationAction) GetTicket() *conversation.Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *AutomationAction) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AutomationAction) GetSegmentationId() string {
	if x != nil {
		return x.SegmentationId
	}
	return ""
}

func (x *AutomationAction) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AutomationAction) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *AutomationAction) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AutomationAction) GetConversationState() string {
	if x != nil {
		return x.ConversationState
	}
	return ""
}

func (x *AutomationAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutomationAction) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *AutomationAction) GetWebhookSetting() *AutomationWebhookSetting {
	if x != nil {
		return x.WebhookSetting
	}
	return nil
}

func (x *AutomationAction) GetDelaySec() uint32 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

func (x *AutomationAction) GetFacebookPageId() string {
	if x != nil {
		return x.FacebookPageId
	}
	return ""
}

type AutomationWebhookSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       bool `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent         bool `protobuf:"varint,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message       bool `protobuf:"varint,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation  bool `protobuf:"varint,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Postback      bool `protobuf:"varint,5,opt,name=postback,proto3" json:"postback,omitempty"`
	Content       bool `protobuf:"varint,6,opt,name=content,proto3" json:"content,omitempty"`
	User          bool `protobuf:"varint,10,opt,name=user,proto3" json:"user,omitempty"`
	Group         bool `protobuf:"varint,18,opt,name=group,proto3" json:"group,omitempty"`
	Limit         bool `protobuf:"varint,19,opt,name=limit,proto3" json:"limit,omitempty"`
	UserAttribute bool `protobuf:"varint,20,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Note          bool `protobuf:"varint,23,opt,name=note,proto3" json:"note,omitempty"`
	Ticket        bool `protobuf:"varint,24,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Automation    bool `protobuf:"varint,25,opt,name=automation,proto3" json:"automation,omitempty"`
	Event         bool `protobuf:"varint,26,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AutomationWebhookSetting) Reset() {
	*x = AutomationWebhookSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationWebhookSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationWebhookSetting) ProtoMessage() {}

func (x *AutomationWebhookSetting) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationWebhookSetting.ProtoReflect.Descriptor instead.
func (*AutomationWebhookSetting) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{70}
}

func (x *AutomationWebhookSetting) GetAccount() bool {
	if x != nil {
		return x.Account
	}
	return false
}

func (x *AutomationWebhookSetting) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *AutomationWebhookSetting) GetMessage() bool {
	if x != nil {
		return x.Message
	}
	return false
}

func (x *AutomationWebhookSetting) GetConversation() bool {
	if x != nil {
		return x.Conversation
	}
	return false
}

func (x *AutomationWebhookSetting) GetPostback() bool {
	if x != nil {
		return x.Postback
	}
	return false
}

func (x *AutomationWebhookSetting) GetContent() bool {
	if x != nil {
		return x.Content
	}
	return false
}

func (x *AutomationWebhookSetting) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *AutomationWebhookSetting) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *AutomationWebhookSetting) GetLimit() bool {
	if x != nil {
		return x.Limit
	}
	return false
}

func (x *AutomationWebhookSetting) GetUserAttribute() bool {
	if x != nil {
		return x.UserAttribute
	}
	return false
}

func (x *AutomationWebhookSetting) GetNote() bool {
	if x != nil {
		return x.Note
	}
	return false
}

func (x *AutomationWebhookSetting) GetTicket() bool {
	if x != nil {
		return x.Ticket
	}
	return false
}

func (x *AutomationWebhookSetting) GetAutomation() bool {
	if x != nil {
		return x.Automation
	}
	return false
}

func (x *AutomationWebhookSetting) GetEvent() bool {
	if x != nil {
		return x.Event
	}
	return false
}

type Automations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Automations []*Automation   `protobuf:"bytes,2,rep,name=automations,proto3" json:"automations,omitempty"`
}

func (x *Automations) Reset() {
	*x = Automations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automations) ProtoMessage() {}

func (x *Automations) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Automations.ProtoReflect.Descriptor instead.
func (*Automations) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{71}
}

func (x *Automations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Automations) GetAutomations() []*Automation {
	if x != nil {
		return x.Automations
	}
	return nil
}

type AutomationCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AutomationId string `protobuf:"bytes,3,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	UserId       string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId      string `protobuf:"bytes,5,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Scope        string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AutomationCheck) Reset() {
	*x = AutomationCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCheck) ProtoMessage() {}

func (x *AutomationCheck) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCheck.ProtoReflect.Descriptor instead.
func (*AutomationCheck) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{72}
}

func (x *AutomationCheck) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCheck) GetAutomationId() string {
	if x != nil {
		return x.AutomationId
	}
	return ""
}

func (x *AutomationCheck) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationCheck) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AutomationCheck) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AutomationCreditsAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebhookFired int64           `protobuf:"varint,3,opt,name=webhook_fired,json=webhookFired,proto3" json:"webhook_fired,omitempty"`
	MessageFired int64           `protobuf:"varint,4,opt,name=message_fired,json=messageFired,proto3" json:"message_fired,omitempty"`
	EmailFired   int64           `protobuf:"varint,5,opt,name=email_fired,json=emailFired,proto3" json:"email_fired,omitempty"`
	Min          int64           `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
}

func (x *AutomationCreditsAggregate) Reset() {
	*x = AutomationCreditsAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCreditsAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCreditsAggregate) ProtoMessage() {}

func (x *AutomationCreditsAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCreditsAggregate.ProtoReflect.Descriptor instead.
func (*AutomationCreditsAggregate) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{73}
}

func (x *AutomationCreditsAggregate) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCreditsAggregate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCreditsAggregate) GetWebhookFired() int64 {
	if x != nil {
		return x.WebhookFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetMessageFired() int64 {
	if x != nil {
		return x.MessageFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetEmailFired() int64 {
	if x != nil {
		return x.EmailFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

type AutomationCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebhookFired   int64           `protobuf:"varint,3,opt,name=webhook_fired,json=webhookFired,proto3" json:"webhook_fired,omitempty"`
	MessageFired   int64           `protobuf:"varint,4,opt,name=message_fired,json=messageFired,proto3" json:"message_fired,omitempty"`
	EmailFired     int64           `protobuf:"varint,5,opt,name=email_fired,json=emailFired,proto3" json:"email_fired,omitempty"`
	WebhookAddon   int64           `protobuf:"varint,8,opt,name=webhook_addon,json=webhookAddon,proto3" json:"webhook_addon,omitempty"`
	MessageAddon   int64           `protobuf:"varint,9,opt,name=message_addon,json=messageAddon,proto3" json:"message_addon,omitempty"`
	EmailAddon     int64           `protobuf:"varint,10,opt,name=email_addon,json=emailAddon,proto3" json:"email_addon,omitempty"`
	WebhookCredits int64           `protobuf:"varint,14,opt,name=webhook_credits,json=webhookCredits,proto3" json:"webhook_credits,omitempty"`
	MessageCredits int64           `protobuf:"varint,15,opt,name=message_credits,json=messageCredits,proto3" json:"message_credits,omitempty"`
	EmailCredits   int64           `protobuf:"varint,16,opt,name=email_credits,json=emailCredits,proto3" json:"email_credits,omitempty"`
	Month          int64           `protobuf:"varint,20,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *AutomationCredit) Reset() {
	*x = AutomationCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCredit) ProtoMessage() {}

func (x *AutomationCredit) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCredit.ProtoReflect.Descriptor instead.
func (*AutomationCredit) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{74}
}

func (x *AutomationCredit) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCredit) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCredit) GetWebhookFired() int64 {
	if x != nil {
		return x.WebhookFired
	}
	return 0
}

func (x *AutomationCredit) GetMessageFired() int64 {
	if x != nil {
		return x.MessageFired
	}
	return 0
}

func (x *AutomationCredit) GetEmailFired() int64 {
	if x != nil {
		return x.EmailFired
	}
	return 0
}

func (x *AutomationCredit) GetWebhookAddon() int64 {
	if x != nil {
		return x.WebhookAddon
	}
	return 0
}

func (x *AutomationCredit) GetMessageAddon() int64 {
	if x != nil {
		return x.MessageAddon
	}
	return 0
}

func (x *AutomationCredit) GetEmailAddon() int64 {
	if x != nil {
		return x.EmailAddon
	}
	return 0
}

func (x *AutomationCredit) GetWebhookCredits() int64 {
	if x != nil {
		return x.WebhookCredits
	}
	return 0
}

func (x *AutomationCredit) GetMessageCredits() int64 {
	if x != nil {
		return x.MessageCredits
	}
	return 0
}

func (x *AutomationCredit) GetEmailCredits() int64 {
	if x != nil {
		return x.EmailCredits
	}
	return 0
}

func (x *AutomationCredit) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Topic     string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Type      string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Updated   int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread    int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"` // deprecated by is_read
	UserId    string          `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,11,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ByEvent   *Event          `protobuf:"bytes,14,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
	IsMuted   bool            `protobuf:"varint,15,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	IsRead    bool            `protobuf:"varint,16,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{75}
}

func (x *Topic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Topic) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Topic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Topic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Topic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Topic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *Topic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Topic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Topic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

func (x *Topic) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *Topic) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type UnreadTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic   string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	AgentId string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserId  string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type    string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Updated int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread  int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"`
	ByEvent *Event          `protobuf:"bytes,10,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
}

func (x *UnreadTopic) Reset() {
	*x = UnreadTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadTopic) ProtoMessage() {}

func (x *UnreadTopic) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadTopic.ProtoReflect.Descriptor instead.
func (*UnreadTopic) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{76}
}

func (x *UnreadTopic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UnreadTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UnreadTopic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *UnreadTopic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnreadTopic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnreadTopic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UnreadTopic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *UnreadTopic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

type ListTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Anchor    string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Unread    bool            `protobuf:"varint,8,opt,name=unread,proto3" json:"unread,omitempty"`
}

func (x *ListTopicsRequest) Reset() {
	*x = ListTopicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsRequest) ProtoMessage() {}

func (x *ListTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{77}
}

func (x *ListTopicsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListTopicsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListTopicsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListTopicsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListTopicsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListTopicsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTopicsRequest) GetUnread() bool {
	if x != nil {
		return x.Unread
	}
	return false
}

type ListTopicsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topics []*Topic        `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
	Anchor string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *ListTopicsResult) Reset() {
	*x = ListTopicsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsResult) ProtoMessage() {}

func (x *ListTopicsResult) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsResult.ProtoReflect.Descriptor instead.
func (*ListTopicsResult) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{78}
}

func (x *ListTopicsResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListTopicsResult) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ListTopicsResult) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type UserSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId            string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	StartEvent        *Event          `protobuf:"bytes,5,opt,name=start_event,json=startEvent,proto3" json:"start_event,omitempty"`
	LatestEvent       *Event          `protobuf:"bytes,6,opt,name=latest_event,json=latestEvent,proto3" json:"latest_event,omitempty"`
	Ip                string          `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	CityName          string          `protobuf:"bytes,8,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                 // derived from ip
	CountryName       string          `protobuf:"bytes,9,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`        // derived from ip
	ContinentCode     string          `protobuf:"bytes,10,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"` // derived from ip
	Latitude          float32         `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // derived from ip
	Longitude         float32         `protobuf:"fixed32,13,opt,name=longitude,proto3" json:"longitude,omitempty"`                            // derived from ip
	PostalCode        string          `protobuf:"bytes,14,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`          // derived from ip
	Timezone          string          `protobuf:"bytes,16,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Isp               string          `protobuf:"bytes,17,opt,name=isp,proto3" json:"isp,omitempty"`                                          // derived from ip
	ContinentName     string          `protobuf:"bytes,18,opt,name=continent_name,json=continentName,proto3" json:"continent_name,omitempty"` // derived from ip
	CountryCode       string          `protobuf:"bytes,19,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`       // derived from ip
	Platform          string          `protobuf:"bytes,20,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceType        string          `protobuf:"bytes,21,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`    // filled
	BrowserName       string          `protobuf:"bytes,22,opt,name=browser_name,json=browserName,proto3" json:"browser_name,omitempty"` // filled
	Language          string          `protobuf:"bytes,23,opt,name=language,proto3" json:"language,omitempty"`
	UserAgent         string          `protobuf:"bytes,24,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ScreenResolution  string          `protobuf:"bytes,25,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	GaClientId        string          `protobuf:"bytes,26,opt,name=ga_client_id,json=gaClientId,proto3" json:"ga_client_id,omitempty"`
	GaTrackingIds     []string        `protobuf:"bytes,27,rep,name=ga_tracking_ids,json=gaTrackingIds,proto3" json:"ga_tracking_ids,omitempty"`
	AdsNetwork        string          `protobuf:"bytes,28,opt,name=ads_network,json=adsNetwork,proto3" json:"ads_network,omitempty"`
	Campaigns         []*Campaign     `protobuf:"bytes,29,rep,name=campaigns,proto3" json:"campaigns,omitempty"`
	Referrer          string          `protobuf:"bytes,32,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Source            string          `protobuf:"bytes,33,opt,name=source,proto3" json:"source,omitempty"`
	LatestContentView *Event          `protobuf:"bytes,34,opt,name=latest_content_view,json=latestContentView,proto3" json:"latest_content_view,omitempty"`  // read only, do not persist
	TotalContentViews int64           `protobuf:"varint,35,opt,name=total_content_views,json=totalContentViews,proto3" json:"total_content_views,omitempty"` // read only, do not persist
	LeadScore         float32         `protobuf:"fixed32,36,opt,name=lead_score,json=leadScore,proto3" json:"lead_score,omitempty"`
}

func (x *UserSession) Reset() {
	*x = UserSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession) ProtoMessage() {}

func (x *UserSession) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession.ProtoReflect.Descriptor instead.
func (*UserSession) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{79}
}

func (x *UserSession) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserSession) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSession) GetStartEvent() *Event {
	if x != nil {
		return x.StartEvent
	}
	return nil
}

func (x *UserSession) GetLatestEvent() *Event {
	if x != nil {
		return x.LatestEvent
	}
	return nil
}

func (x *UserSession) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserSession) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *UserSession) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *UserSession) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *UserSession) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UserSession) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserSession) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UserSession) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *UserSession) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *UserSession) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *UserSession) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserSession) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserSession) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *UserSession) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *UserSession) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserSession) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserSession) GetScreenResolution() string {
	if x != nil {
		return x.ScreenResolution
	}
	return ""
}

func (x *UserSession) GetGaClientId() string {
	if x != nil {
		return x.GaClientId
	}
	return ""
}

func (x *UserSession) GetGaTrackingIds() []string {
	if x != nil {
		return x.GaTrackingIds
	}
	return nil
}

func (x *UserSession) GetAdsNetwork() string {
	if x != nil {
		return x.AdsNetwork
	}
	return ""
}

func (x *UserSession) GetCampaigns() []*Campaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

func (x *UserSession) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *UserSession) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UserSession) GetLatestContentView() *Event {
	if x != nil {
		return x.LatestContentView
	}
	return nil
}

func (x *UserSession) GetTotalContentViews() int64 {
	if x != nil {
		return x.TotalContentViews
	}
	return 0
}

func (x *UserSession) GetLeadScore() float32 {
	if x != nil {
		return x.LeadScore
	}
	return 0
}

type AvailabilityCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	IntegrationId string          `protobuf:"bytes,3,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	User          *User           `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	AccountId     string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId        string          `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AvailabilityCheckRequest) Reset() {
	*x = AvailabilityCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityCheckRequest) ProtoMessage() {}

func (x *AvailabilityCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityCheckRequest.ProtoReflect.Descriptor instead.
func (*AvailabilityCheckRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{80}
}

func (x *AvailabilityCheckRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailabilityCheckRequest) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AvailabilityCheckRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AvailabilityCheckRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AvailabilityCheckRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AvailabilityCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Availability  bool            `protobuf:"varint,2,opt,name=availability,proto3" json:"availability,omitempty"`
	Reason        string          `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Payload       string          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	IntegrationId string          `protobuf:"bytes,6,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	AccountId     string          `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AvailabilityCheckResult) Reset() {
	*x = AvailabilityCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityCheckResult) ProtoMessage() {}

func (x *AvailabilityCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityCheckResult.ProtoReflect.Descriptor instead.
func (*AvailabilityCheckResult) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{81}
}

func (x *AvailabilityCheckResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailabilityCheckResult) GetAvailability() bool {
	if x != nil {
		return x.Availability
	}
	return false
}

func (x *AvailabilityCheckResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AvailabilityCheckResult) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *AvailabilityCheckResult) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AvailabilityCheckResult) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context        `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Created        int64                  `protobuf:"varint,13,opt,name=created,proto3" json:"created,omitempty"`
	ConversationId string                 `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	User           *User                  `protobuf:"bytes,25,opt,name=user,proto3" json:"user,omitempty"`
	IntegrationId  string                 `protobuf:"bytes,26,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	ChainId        string                 `protobuf:"bytes,27,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Message        string                 `protobuf:"bytes,30,opt,name=message,proto3" json:"message,omitempty"`
	Members        []*conversation.Member `protobuf:"bytes,31,rep,name=members,proto3" json:"members,omitempty"`
	GroupId        string                 `protobuf:"bytes,32,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{82}
}

func (x *StartRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StartRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StartRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StartRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *StartRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *StartRequest) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *StartRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *StartRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartRequest) GetMembers() []*conversation.Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *StartRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type Event_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      *account.Account           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent        *account.Agent             `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message      *conversation.Message      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation *conversation.Conversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Postback     *conversation.Postback     `protobuf:"bytes,5,opt,name=postback,proto3" json:"postback,omitempty"`
	Content      *content.Content           `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Topic        *Topic                     `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Presence     *account.Presence          `protobuf:"bytes,8,opt,name=presence,proto3" json:"presence,omitempty"`
	User         *User                      `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	UnreadTopic  *UnreadTopic               `protobuf:"bytes,11,opt,name=unread_topic,json=unreadTopic,proto3" json:"unread_topic,omitempty"` // todo: remove
	// user.MyUser my_user = 12;
	Notification        *notibox.Notification `protobuf:"bytes,14,opt,name=notification,proto3" json:"notification,omitempty"`
	AgentPerm           *account.AgentPerm    `protobuf:"bytes,16,opt,name=agent_perm,json=agentPerm,proto3" json:"agent_perm,omitempty"`
	GroupMember         *account.GroupMember  `protobuf:"bytes,17,opt,name=group_member,json=groupMember,proto3" json:"group_member,omitempty"`
	Group               *account.AgentGroup   `protobuf:"bytes,18,opt,name=group,proto3" json:"group,omitempty"`
	Limit               *payment.Limit        `protobuf:"bytes,19,opt,name=limit,proto3" json:"limit,omitempty"`
	Alias               *Identification       `protobuf:"bytes,22,opt,name=alias,proto3" json:"alias,omitempty"`
	Note                *Note                 `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
	Ticket              *conversation.Ticket  `protobuf:"bytes,24,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Automation          *Automation           `protobuf:"bytes,25,opt,name=automation,proto3" json:"automation,omitempty"`
	Event               *Event                `protobuf:"bytes,26,opt,name=event,proto3" json:"event,omitempty"`
	AutomationEvent     *AutomationEvent      `protobuf:"bytes,30,opt,name=automation_event,json=automationEvent,proto3" json:"automation_event,omitempty"`
	Notibox             *notibox.Notibox      `protobuf:"bytes,32,opt,name=notibox,proto3" json:"notibox,omitempty"`
	NotificationSetting *noti5.Setting        `protobuf:"bytes,34,opt,name=notification_setting,json=notificationSetting,proto3" json:"notification_setting,omitempty"`
	Identification      *Identification       `protobuf:"bytes,35,opt,name=identification,proto3" json:"identification,omitempty"`
	Rule                *conversation.Rule    `protobuf:"bytes,36,opt,name=rule,proto3" json:"rule,omitempty"`
	UserAttribute       *AttributeDefinition  `protobuf:"bytes,37,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Tag                 *conversation.Tag     `protobuf:"bytes,38,opt,name=tag,proto3" json:"tag,omitempty"`
	TotalUser           *UserMetric           `protobuf:"bytes,39,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
}

func (x *Event_Data) Reset() {
	*x = Event_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user3_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Data) ProtoMessage() {}

func (x *Event_Data) ProtoReflect() protoreflect.Message {
	mi := &file_user3_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Data.ProtoReflect.Descriptor instead.
func (*Event_Data) Descriptor() ([]byte, []int) {
	return file_user3_proto_rawDescGZIP(), []int{60, 0}
}

func (x *Event_Data) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Event_Data) GetAgent() *account.Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Event_Data) GetMessage() *conversation.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Event_Data) GetConversation() *conversation.Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *Event_Data) GetPostback() *conversation.Postback {
	if x != nil {
		return x.Postback
	}
	return nil
}

func (x *Event_Data) GetContent() *content.Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Event_Data) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Event_Data) GetPresence() *account.Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Event_Data) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Event_Data) GetUnreadTopic() *UnreadTopic {
	if x != nil {
		return x.UnreadTopic
	}
	return nil
}

func (x *Event_Data) GetNotification() *notibox.Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *Event_Data) GetAgentPerm() *account.AgentPerm {
	if x != nil {
		return x.AgentPerm
	}
	return nil
}

func (x *Event_Data) GetGroupMember() *account.GroupMember {
	if x != nil {
		return x.GroupMember
	}
	return nil
}

func (x *Event_Data) GetGroup() *account.AgentGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Event_Data) GetLimit() *payment.Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Event_Data) GetAlias() *Identification {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Event_Data) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Event_Data) GetTicket() *conversation.Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *Event_Data) GetAutomation() *Automation {
	if x != nil {
		return x.Automation
	}
	return nil
}

func (x *Event_Data) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event_Data) GetAutomationEvent() *AutomationEvent {
	if x != nil {
		return x.AutomationEvent
	}
	return nil
}

func (x *Event_Data) GetNotibox() *notibox.Notibox {
	if x != nil {
		return x.Notibox
	}
	return nil
}

func (x *Event_Data) GetNotificationSetting() *noti5.Setting {
	if x != nil {
		return x.NotificationSetting
	}
	return nil
}

func (x *Event_Data) GetIdentification() *Identification {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *Event_Data) GetRule() *conversation.Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Event_Data) GetUserAttribute() *AttributeDefinition {
	if x != nil {
		return x.UserAttribute
	}
	return nil
}

func (x *Event_Data) GetTag() *conversation.Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Event_Data) GetTotalUser() *UserMetric {
	if x != nil {
		return x.TotalUser
	}
	return nil
}

var File_user3_proto protoreflect.FileDescriptor

var file_user3_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb6, 0x02, 0x0a, 0x0d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x03, 0x4f, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x08, 0x22, 0x82, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x61, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x68, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x7c, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x55,
	0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa6, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x22, 0x87, 0x08, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x67,
	0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x73, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x22, 0x20, 0x0a, 0x0a,
	0x41, 0x64, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x00, 0x22, 0x4d,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0xce, 0x02,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x4d,
	0x0a, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93,
	0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x27, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x22,
	0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x58, 0x0a, 0x08,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x29, 0x0a, 0x08, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x75, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0xad, 0x01, 0x0a, 0x0b, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x4d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x80,
	0x02, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x74, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x39, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x54,
	0x6f, 0x4d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0xbf, 0x02, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x68, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x10, 0x03, 0x22, 0x64, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x20, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xf8, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x67, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x22, 0x2c, 0x0a, 0x08, 0x49, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x60, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x3c, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xe1, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x76, 0x69,
	0x65, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x32, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65,
	0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x76,
	0x65, 0x42, 0x65, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x65,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x76, 0x65, 0x42, 0x65,
	0x65, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65,
	0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x76,
	0x65, 0x42, 0x65, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x76, 0x65, 0x42, 0x65, 0x65, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x52, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x33, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x16, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xe3, 0x0c, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x52, 0x02, 0x62, 0x79, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xc7, 0x0a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x62, 0x6f, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x12, 0x41, 0x0a, 0x14,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x21, 0x0a,
	0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x82, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x74, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x51, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x07, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x22, 0xb2, 0x02, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x10, 0x0c,
	0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12,
	0x22, 0x2d, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x10, 0x03, 0x22,
	0x97, 0x09, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0x08, 0x12, 0x20, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x13, 0x22, 0x87, 0x03, 0x0a, 0x18, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x1a,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x22, 0xe4, 0x03, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02,
	0x22, 0xb5, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08,
	0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x62,
	0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x23, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xf2, 0x09, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x61, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x64, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x2c, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x22, 0x20, 0x0a,
	0x0a, 0x41, 0x64, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x00, 0x22,
	0x4d, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0xbc,
	0x01, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x4a, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10,
	0x04, 0x2a, 0x34, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x65, 0x42,
	0x65, 0x65, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x10, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user3_proto_rawDescOnce sync.Once
	file_user3_proto_rawDescData = file_user3_proto_rawDesc
)

func file_user3_proto_rawDescGZIP() []byte {
	file_user3_proto_rawDescOnce.Do(func() {
		file_user3_proto_rawDescData = protoimpl.X.CompressGZIP(file_user3_proto_rawDescData)
	})
	return file_user3_proto_rawDescData
}

var file_user3_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_user3_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_user3_proto_goTypes = []interface{}{
	(AttributeType)(0),     // 0: user.AttributeType
	(AttributeKind)(0),     // 1: user.AttributeKind
	(HaveBeen)(0),          // 2: user.HaveBeen
	(SubPrefix)(0),         // 3: user.SubPrefix
	(AttributeData_Ops)(0), // 4: user.AttributeData.Ops
	(Trace_DeviceType)(0),  // 5: user.Trace.DeviceType
	(Trace_AdsNetwork)(0),  // 6: user.Trace.AdsNetwork
	(Trace_Source)(0),      // 7: user.Trace.Source
	(CountSegmentationUserByAttributeRequest_Range)(0), // 8: user.CountSegmentationUserByAttributeRequest.Range
	(NoteLink_Type)(0),                              // 9: user.NoteLink.Type
	(Automation_State)(0),                           // 10: user.Automation.State
	(Automation_ActionType)(0),                      // 11: user.Automation.ActionType
	(Automation_AutomationScope)(0),                 // 12: user.Automation.AutomationScope
	(AutomationAction_ActionType)(0),                // 13: user.AutomationAction.ActionType
	(AutomationCredit_Type)(0),                      // 14: user.AutomationCredit.Type
	(UserSession_DeviceType)(0),                     // 15: user.UserSession.DeviceType
	(UserSession_AdsNetwork)(0),                     // 16: user.UserSession.AdsNetwork
	(UserSession_Source)(0),                         // 17: user.UserSession.Source
	(*TotalConvoUpdateRequest)(nil),                 // 18: user.TotalConvoUpdateRequest
	(*TotalOpenTicket)(nil),                         // 19: user.TotalOpenTicket
	(*AttributeData)(nil),                           // 20: user.AttributeData
	(*User)(nil),                                    // 21: user.User
	(*Users)(nil),                                   // 22: user.Users
	(*Campaign)(nil),                                // 23: user.Campaign
	(*CountTotalRequest)(nil),                       // 24: user.CountTotalRequest
	(*CountTotalResponse)(nil),                      // 25: user.CountTotalResponse
	(*CountResponse)(nil),                           // 26: user.CountResponse
	(*MergeRequest)(nil),                            // 27: user.MergeRequest
	(*CreateRequest)(nil),                           // 28: user.CreateRequest
	(*Traces)(nil),                                  // 29: user.Traces
	(*Trace)(nil),                                   // 30: user.Trace
	(*UserSearchResult)(nil),                        // 31: user.UserSearchResult
	(*UnpickRequest)(nil),                           // 32: user.UnpickRequest
	(*PickRequest)(nil),                             // 33: user.PickRequest
	(*CountSegmentationUserByAttributeRequest)(nil), // 34: user.CountSegmentationUserByAttributeRequest
	(*Visitor)(nil),                                 // 35: user.Visitor
	(*Visitors)(nil),                                // 36: user.Visitors
	(*LastView)(nil),                                // 37: user.LastView
	(*SubscribeTopic)(nil),                          // 38: user.SubscribeTopic
	(*MuteRequest)(nil),                             // 39: user.MuteRequest
	(*SubscribeUser)(nil),                           // 40: user.SubscribeUser
	(*ReadTopicRequest)(nil),                        // 41: user.ReadTopicRequest
	(*SubscribeRequest)(nil),                        // 42: user.SubscribeRequest
	(*AddToMyRequest)(nil),                          // 43: user.AddToMyRequest
	(*DeleteAttrRequest)(nil),                       // 44: user.DeleteAttrRequest
	(*AttributeDefinition)(nil),                     // 45: user.AttributeDefinition
	(*AttributeDefinitions)(nil),                    // 46: user.AttributeDefinitions
	(*AddToMyList)(nil),                             // 47: user.AddToMyList
	(*UserCreateResult)(nil),                        // 48: user.UserCreateResult
	(*Identification)(nil),                          // 49: user.Identification
	(*Note)(nil),                                    // 50: user.Note
	(*NoteLink)(nil),                                // 51: user.NoteLink
	(*Notes)(nil),                                   // 52: user.Notes
	(*ListNotesRequest)(nil),                        // 53: user.ListNotesRequest
	(*DeleteNoteRequest)(nil),                       // 54: user.DeleteNoteRequest
	(*GetNoteRequest)(nil),                          // 55: user.GetNoteRequest
	(*IntParams)(nil),                               // 56: user.IntParams
	(*StringParams)(nil),                            // 57: user.StringParams
	(*IdParams)(nil),                                // 58: user.IdParams
	(*Params)(nil),                                  // 59: user.Params
	(*Location)(nil),                                // 60: user.Location
	(*Locations)(nil),                               // 61: user.Locations
	(*LocationParams)(nil),                          // 62: user.LocationParams
	(*Page)(nil),                                    // 63: user.Page
	(*UserAction)(nil),                              // 64: user.UserAction
	(*UserInfo)(nil),                                // 65: user.UserInfo
	(*UserInfoParams)(nil),                          // 66: user.UserInfoParams
	(*UserInfoData)(nil),                            // 67: user.UserInfoData
	(*UserMetric)(nil),                              // 68: user.UserMetric
	(*SourceMetric)(nil),                            // 69: user.SourceMetric
	(*LocationMetric)(nil),                          // 70: user.LocationMetric
	(*PageMetric)(nil),                              // 71: user.PageMetric
	(*UserReport)(nil),                              // 72: user.UserReport
	(*SourceMetrics)(nil),                           // 73: user.SourceMetrics
	(*LocationMetrics)(nil),                         // 74: user.LocationMetrics
	(*PageMetrics)(nil),                             // 75: user.PageMetrics
	(*RawEventCreatedPayload)(nil),                  // 76: user.RawEventCreatedPayload
	(*Events)(nil),                                  // 77: user.Events
	(*Event)(nil),                                   // 78: user.Event
	(*EventParams)(nil),                             // 79: user.EventParams
	(*Subscription)(nil),                            // 80: user.Subscription
	(*ListEventsRequest)(nil),                       // 81: user.ListEventsRequest
	(*UserEvent)(nil),                               // 82: user.UserEvent
	(*SubscriptionResponse)(nil),                    // 83: user.SubscriptionResponse
	(*AutomationCalledback)(nil),                    // 84: user.AutomationCalledback
	(*AutomationEvent)(nil),                         // 85: user.AutomationEvent
	(*Automation)(nil),                              // 86: user.Automation
	(*AutomationAction)(nil),                        // 87: user.AutomationAction
	(*AutomationWebhookSetting)(nil),                // 88: user.AutomationWebhookSetting
	(*Automations)(nil),                             // 89: user.Automations
	(*AutomationCheck)(nil),                         // 90: user.AutomationCheck
	(*AutomationCreditsAggregate)(nil),              // 91: user.AutomationCreditsAggregate
	(*AutomationCredit)(nil),                        // 92: user.AutomationCredit
	(*Topic)(nil),                                   // 93: user.Topic
	(*UnreadTopic)(nil),                             // 94: user.UnreadTopic
	(*ListTopicsRequest)(nil),                       // 95: user.ListTopicsRequest
	(*ListTopicsResult)(nil),                        // 96: user.ListTopicsResult
	(*UserSession)(nil),                             // 97: user.UserSession
	(*AvailabilityCheckRequest)(nil),                // 98: user.AvailabilityCheckRequest
	(*AvailabilityCheckResult)(nil),                 // 99: user.AvailabilityCheckResult
	(*StartRequest)(nil),                            // 100: user.StartRequest
	nil,                                             // 101: user.UserSearchResult.UnreadCountsEntry
	(*Event_Data)(nil),                              // 102: user.Event.Data
	(*common.Context)(nil),                          // 103: common.Context
	(*common.Error)(nil),                            // 104: common.Error
	(*common.By)(nil),                               // 105: common.By
	(*Condition)(nil),                               // 106: user.Condition
	(*SCondition)(nil),                              // 107: user.SCondition
	(*email.Email)(nil),                             // 108: email.Email
	(*conversation.Ticket)(nil),                     // 109: conversation.Ticket
	(*conversation.Member)(nil),                     // 110: conversation.Member
	(*account.Account)(nil),                         // 111: account.Account
	(*account.Agent)(nil),                           // 112: account.Agent
	(*conversation.Message)(nil),                    // 113: conversation.Message
	(*conversation.Conversation)(nil),               // 114: conversation.Conversation
	(*conversation.Postback)(nil),                   // 115: conversation.Postback
	(*content.Content)(nil),                         // 116: content.Content
	(*account.Presence)(nil),                        // 117: account.Presence
	(*notibox.Notification)(nil),                    // 118: notibox.Notification
	(*account.AgentPerm)(nil),                       // 119: account.AgentPerm
	(*account.GroupMember)(nil),                     // 120: account.GroupMember
	(*account.AgentGroup)(nil),                      // 121: account.AgentGroup
	(*payment.Limit)(nil),                           // 122: payment.Limit
	(*notibox.Notibox)(nil),                         // 123: notibox.Notibox
	(*noti5.Setting)(nil),                           // 124: noti5.Setting
	(*conversation.Rule)(nil),                       // 125: conversation.Rule
	(*conversation.Tag)(nil),                        // 126: conversation.Tag
}
var file_user3_proto_depIdxs = []int32{
	103, // 0: user.TotalConvoUpdateRequest.ctx:type_name -> common.Context
	103, // 1: user.TotalOpenTicket.ctx:type_name -> common.Context
	103, // 2: user.User.ctx:type_name -> common.Context
	30,  // 3: user.User.traces:type_name -> user.Trace
	20,  // 4: user.User.attributes:type_name -> user.AttributeData
	49,  // 5: user.User.identifications:type_name -> user.Identification
	97,  // 6: user.User.session:type_name -> user.UserSession
	21,  // 7: user.Users.users:type_name -> user.User
	104, // 8: user.Users.errors:type_name -> common.Error
	103, // 9: user.CountTotalRequest.ctx:type_name -> common.Context
	103, // 10: user.MergeRequest.ctx:type_name -> common.Context
	30,  // 11: user.Traces.traces:type_name -> user.Trace
	23,  // 12: user.Trace.campaigns:type_name -> user.Campaign
	103, // 13: user.UserSearchResult.ctx:type_name -> common.Context
	21,  // 14: user.UserSearchResult.users:type_name -> user.User
	101, // 15: user.UserSearchResult.unread_counts:type_name -> user.UserSearchResult.UnreadCountsEntry
	103, // 16: user.UnpickRequest.ctx:type_name -> common.Context
	103, // 17: user.PickRequest.ctx:type_name -> common.Context
	103, // 18: user.CountSegmentationUserByAttributeRequest.ctx:type_name -> common.Context
	103, // 19: user.Visitor.ctx:type_name -> common.Context
	21,  // 20: user.Visitor.user:type_name -> user.User
	103, // 21: user.Visitors.ctx:type_name -> common.Context
	35,  // 22: user.Visitors.visitors:type_name -> user.Visitor
	103, // 23: user.SubscribeTopic.ctx:type_name -> common.Context
	103, // 24: user.MuteRequest.ctx:type_name -> common.Context
	103, // 25: user.SubscribeUser.ctx:type_name -> common.Context
	103, // 26: user.ReadTopicRequest.ctx:type_name -> common.Context
	103, // 27: user.SubscribeRequest.ctx:type_name -> common.Context
	103, // 28: user.AddToMyRequest.ctx:type_name -> common.Context
	103, // 29: user.DeleteAttrRequest.ctx:type_name -> common.Context
	103, // 30: user.AttributeDefinition.ctx:type_name -> common.Context
	103, // 31: user.AttributeDefinitions.ctx:type_name -> common.Context
	45,  // 32: user.AttributeDefinitions.attributes:type_name -> user.AttributeDefinition
	103, // 33: user.AddToMyList.ctx:type_name -> common.Context
	103, // 34: user.Identification.ctx:type_name -> common.Context
	103, // 35: user.Note.ctx:type_name -> common.Context
	51,  // 36: user.Note.links:type_name -> user.NoteLink
	103, // 37: user.Notes.ctx:type_name -> common.Context
	50,  // 38: user.Notes.notes:type_name -> user.Note
	103, // 39: user.ListNotesRequest.ctx:type_name -> common.Context
	51,  // 40: user.ListNotesRequest.links:type_name -> user.NoteLink
	60,  // 41: user.Locations.locations:type_name -> user.Location
	104, // 42: user.Locations.errors:type_name -> common.Error
	60,  // 43: user.UserAction.location:type_name -> user.Location
	63,  // 44: user.UserAction.page:type_name -> user.Page
	21,  // 45: user.UserInfo.user:type_name -> user.User
	63,  // 46: user.UserInfo.viewing:type_name -> user.Page
	60,  // 47: user.UserInfo.location:type_name -> user.Location
	63,  // 48: user.UserInfo.view_pages:type_name -> user.Page
	58,  // 49: user.UserInfoParams.source:type_name -> user.IdParams
	58,  // 50: user.UserInfoParams.page_id:type_name -> user.IdParams
	58,  // 51: user.UserInfoParams.location_id:type_name -> user.IdParams
	56,  // 52: user.UserInfoParams.view_count:type_name -> user.IntParams
	56,  // 53: user.UserInfoParams.duration:type_name -> user.IntParams
	57,  // 54: user.UserInfoParams.country_code:type_name -> user.StringParams
	57,  // 55: user.UserInfoParams.continent_code:type_name -> user.StringParams
	65,  // 56: user.UserInfoData.data:type_name -> user.UserInfo
	60,  // 57: user.LocationMetric.location:type_name -> user.Location
	63,  // 58: user.PageMetric.page:type_name -> user.Page
	68,  // 59: user.UserReport.total_user:type_name -> user.UserMetric
	69,  // 60: user.UserReport.top_source:type_name -> user.SourceMetric
	70,  // 61: user.UserReport.top_location:type_name -> user.LocationMetric
	71,  // 62: user.UserReport.top_page:type_name -> user.PageMetric
	69,  // 63: user.SourceMetrics.source_metrics:type_name -> user.SourceMetric
	70,  // 64: user.LocationMetrics.location_metrics:type_name -> user.LocationMetric
	71,  // 65: user.PageMetrics.page_metrics:type_name -> user.PageMetric
	103, // 66: user.RawEventCreatedPayload.ctx:type_name -> common.Context
	103, // 67: user.Events.ctx:type_name -> common.Context
	78,  // 68: user.Events.events:type_name -> user.Event
	103, // 69: user.Event.ctx:type_name -> common.Context
	105, // 70: user.Event.by:type_name -> common.By
	102, // 71: user.Event.data:type_name -> user.Event.Data
	103, // 72: user.Subscription.ctx:type_name -> common.Context
	103, // 73: user.ListEventsRequest.ctx:type_name -> common.Context
	103, // 74: user.UserEvent.ctx:type_name -> common.Context
	78,  // 75: user.UserEvent.event:type_name -> user.Event
	21,  // 76: user.UserEvent.user:type_name -> user.User
	103, // 77: user.SubscriptionResponse.ctx:type_name -> common.Context
	103, // 78: user.AutomationCalledback.ctx:type_name -> common.Context
	78,  // 79: user.AutomationCalledback.event:type_name -> user.Event
	87,  // 80: user.AutomationCalledback.action:type_name -> user.AutomationAction
	103, // 81: user.AutomationEvent.ctx:type_name -> common.Context
	86,  // 82: user.AutomationEvent.automation:type_name -> user.Automation
	21,  // 83: user.AutomationEvent.user:type_name -> user.User
	78,  // 84: user.AutomationEvent.event:type_name -> user.Event
	87,  // 85: user.AutomationEvent.action:type_name -> user.AutomationAction
	103, // 86: user.Automation.ctx:type_name -> common.Context
	106, // 87: user.Automation.conditions:type_name -> user.Condition
	107, // 88: user.Automation.condition:type_name -> user.SCondition
	87,  // 89: user.Automation.actions:type_name -> user.AutomationAction
	21,  // 90: user.AutomationAction.user:type_name -> user.User
	108, // 91: user.AutomationAction.email:type_name -> email.Email
	50,  // 92: user.AutomationAction.user_note:type_name -> user.Note
	78,  // 93: user.AutomationAction.event:type_name -> user.Event
	78,  // 94: user.AutomationAction.events:type_name -> user.Event
	109, // 95: user.AutomationAction.ticket:type_name -> conversation.Ticket
	88,  // 96: user.AutomationAction.webhook_setting:type_name -> user.AutomationWebhookSetting
	103, // 97: user.Automations.ctx:type_name -> common.Context
	86,  // 98: user.Automations.automations:type_name -> user.Automation
	103, // 99: user.AutomationCreditsAggregate.ctx:type_name -> common.Context
	103, // 100: user.AutomationCredit.ctx:type_name -> common.Context
	103, // 101: user.Topic.ctx:type_name -> common.Context
	78,  // 102: user.Topic.by_event:type_name -> user.Event
	103, // 103: user.UnreadTopic.ctx:type_name -> common.Context
	78,  // 104: user.UnreadTopic.by_event:type_name -> user.Event
	103, // 105: user.ListTopicsRequest.ctx:type_name -> common.Context
	103, // 106: user.ListTopicsResult.ctx:type_name -> common.Context
	93,  // 107: user.ListTopicsResult.topics:type_name -> user.Topic
	103, // 108: user.UserSession.ctx:type_name -> common.Context
	78,  // 109: user.UserSession.start_event:type_name -> user.Event
	78,  // 110: user.UserSession.latest_event:type_name -> user.Event
	23,  // 111: user.UserSession.campaigns:type_name -> user.Campaign
	78,  // 112: user.UserSession.latest_content_view:type_name -> user.Event
	103, // 113: user.AvailabilityCheckRequest.ctx:type_name -> common.Context
	21,  // 114: user.AvailabilityCheckRequest.user:type_name -> user.User
	103, // 115: user.AvailabilityCheckResult.ctx:type_name -> common.Context
	103, // 116: user.StartRequest.ctx:type_name -> common.Context
	21,  // 117: user.StartRequest.user:type_name -> user.User
	110, // 118: user.StartRequest.members:type_name -> conversation.Member
	111, // 119: user.Event.Data.account:type_name -> account.Account
	112, // 120: user.Event.Data.agent:type_name -> account.Agent
	113, // 121: user.Event.Data.message:type_name -> conversation.Message
	114, // 122: user.Event.Data.conversation:type_name -> conversation.Conversation
	115, // 123: user.Event.Data.postback:type_name -> conversation.Postback
	116, // 124: user.Event.Data.content:type_name -> content.Content
	93,  // 125: user.Event.Data.topic:type_name -> user.Topic
	117, // 126: user.Event.Data.presence:type_name -> account.Presence
	21,  // 127: user.Event.Data.user:type_name -> user.User
	94,  // 128: user.Event.Data.unread_topic:type_name -> user.UnreadTopic
	118, // 129: user.Event.Data.notification:type_name -> notibox.Notification
	119, // 130: user.Event.Data.agent_perm:type_name -> account.AgentPerm
	120, // 131: user.Event.Data.group_member:type_name -> account.GroupMember
	121, // 132: user.Event.Data.group:type_name -> account.AgentGroup
	122, // 133: user.Event.Data.limit:type_name -> payment.Limit
	49,  // 134: user.Event.Data.alias:type_name -> user.Identification
	50,  // 135: user.Event.Data.note:type_name -> user.Note
	109, // 136: user.Event.Data.ticket:type_name -> conversation.Ticket
	86,  // 137: user.Event.Data.automation:type_name -> user.Automation
	78,  // 138: user.Event.Data.event:type_name -> user.Event
	85,  // 139: user.Event.Data.automation_event:type_name -> user.AutomationEvent
	123, // 140: user.Event.Data.notibox:type_name -> notibox.Notibox
	124, // 141: user.Event.Data.notification_setting:type_name -> noti5.Setting
	49,  // 142: user.Event.Data.identification:type_name -> user.Identification
	125, // 143: user.Event.Data.rule:type_name -> conversation.Rule
	45,  // 144: user.Event.Data.user_attribute:type_name -> user.AttributeDefinition
	126, // 145: user.Event.Data.tag:type_name -> conversation.Tag
	68,  // 146: user.Event.Data.total_user:type_name -> user.UserMetric
	147, // [147:147] is the sub-list for method output_type
	147, // [147:147] is the sub-list for method input_type
	147, // [147:147] is the sub-list for extension type_name
	147, // [147:147] is the sub-list for extension extendee
	0,   // [0:147] is the sub-list for field type_name
}

func init() { file_user3_proto_init() }
func file_user3_proto_init() {
	if File_user3_proto != nil {
		return
	}
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalConvoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalOpenTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTotalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSegmentationUserByAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Visitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Visitors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToMyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToMyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawEventCreatedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCalledback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Automation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationWebhookSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Automations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCreditsAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user3_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user3_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user3_proto_goTypes,
		DependencyIndexes: file_user3_proto_depIdxs,
		EnumInfos:         file_user3_proto_enumTypes,
		MessageInfos:      file_user3_proto_msgTypes,
	}.Build()
	File_user3_proto = out.File
	file_user3_proto_rawDesc = nil
	file_user3_proto_goTypes = nil
	file_user3_proto_depIdxs = nil
}
