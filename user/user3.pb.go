// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user3.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user3.proto

It has these top-level messages:
	Segmentation
	SegmentCondition
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SegmentCondition_Operator int32

const (
	SegmentCondition_and SegmentCondition_Operator = 0
	SegmentCondition_or  SegmentCondition_Operator = 1
)

var SegmentCondition_Operator_name = map[int32]string{
	0: "and",
	1: "or",
}
var SegmentCondition_Operator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SegmentCondition_Operator) String() string {
	return proto.EnumName(SegmentCondition_Operator_name, int32(x))
}
func (SegmentCondition_Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Segmentation struct {
	Ctx       *common.Context     `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId string              `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	UserCount int64               `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	Query     []*SegmentCondition `protobuf:"bytes,5,rep,name=query" json:"query,omitempty"`
}

func (m *Segmentation) Reset()                    { *m = Segmentation{} }
func (m *Segmentation) String() string            { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()               {}
func (*Segmentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *Segmentation) GetQuery() []*SegmentCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

type SegmentCondition struct {
	Op       string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	IsOp     bool   `protobuf:"varint,3,opt,name=is_op,json=isOp" json:"is_op,omitempty"`
	Key      string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
}

func (m *SegmentCondition) Reset()                    { *m = SegmentCondition{} }
func (m *SegmentCondition) String() string            { return proto.CompactTextString(m) }
func (*SegmentCondition) ProtoMessage()               {}
func (*SegmentCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SegmentCondition) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *SegmentCondition) GetIsOp() bool {
	if m != nil {
		return m.IsOp
	}
	return false
}

func (m *SegmentCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SegmentCondition) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *SegmentCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*SegmentCondition)(nil), "user.SegmentCondition")
	proto.RegisterEnum("user.SegmentCondition_Operator", SegmentCondition_Operator_name, SegmentCondition_Operator_value)
}

func init() { proto.RegisterFile("user/user3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4b, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0x3f, 0xe7, 0xd1, 0xaf, 0x99, 0x22, 0x88, 0x0c, 0x42, 0x56, 0x11, 0x52, 0xe8, 0x2a,
	0x0b, 0x94, 0x48, 0xed, 0x11, 0xba, 0x62, 0x55, 0x29, 0x1c, 0xa0, 0x72, 0x12, 0xab, 0x58, 0x25,
	0x9e, 0xe0, 0xd8, 0xa8, 0xe5, 0x24, 0x5c, 0x83, 0x1b, 0x22, 0x3b, 0x81, 0x05, 0x1b, 0x7b, 0xfe,
	0x8f, 0x91, 0x7f, 0x32, 0xa4, 0x76, 0x10, 0xba, 0x74, 0xc7, 0xa6, 0xe8, 0x35, 0x1a, 0xa4, 0x91,
	0x13, 0xcb, 0xa2, 0x96, 0xa6, 0xb6, 0xcd, 0x51, 0x98, 0x02, 0xf5, 0xa1, 0x1c, 0x6c, 0x2d, 0x3f,
	0xca, 0x17, 0xc1, 0x5b, 0xa1, 0xcb, 0x06, 0xbb, 0x0e, 0xd5, 0x74, 0x8d, 0x5b, 0xab, 0x2f, 0x02,
	0x17, 0xcf, 0xe2, 0xd0, 0x09, 0x65, 0xb8, 0x91, 0xa8, 0xe8, 0x03, 0x84, 0x8d, 0x39, 0x31, 0x92,
	0x91, 0x7c, 0xb1, 0xbe, 0x2a, 0xa6, 0xf2, 0x16, 0x95, 0x11, 0x27, 0x53, 0xb9, 0x8c, 0xde, 0x03,
	0xf0, 0xa6, 0x41, 0xab, 0xcc, 0x5e, 0xb6, 0x2c, 0xc8, 0x48, 0x9e, 0x54, 0xc9, 0xe4, 0x3c, 0xb5,
	0x94, 0x42, 0xa4, 0x78, 0x27, 0x58, 0xe8, 0x03, 0x3f, 0xbb, 0x15, 0x87, 0xb7, 0xf7, 0x1d, 0x16,
	0x65, 0x24, 0x0f, 0xab, 0xc4, 0x39, 0x5b, 0x67, 0xd0, 0x47, 0x88, 0xdf, 0xac, 0xd0, 0x67, 0x16,
	0x67, 0x61, 0xbe, 0x58, 0xdf, 0x16, 0x2e, 0x2a, 0x26, 0xae, 0x2d, 0xaa, 0x56, 0x3a, 0xb6, 0x6a,
	0x2c, 0xad, 0x3e, 0x09, 0xa4, 0x7f, 0x33, 0x7a, 0x09, 0x01, 0xf6, 0x13, 0x4c, 0x80, 0x3d, 0xbd,
	0x86, 0x58, 0x0e, 0x7b, 0xec, 0x3d, 0xc6, 0xbc, 0x8a, 0xe4, 0xb0, 0xeb, 0x69, 0x0a, 0xe1, 0x51,
	0x9c, 0xfd, 0xfb, 0x49, 0xe5, 0x46, 0xba, 0x84, 0x39, 0xf6, 0x42, 0x73, 0x83, 0x9a, 0xc5, 0xde,
	0xfe, 0xd5, 0xf4, 0x06, 0xe2, 0x77, 0xfe, 0x6a, 0x05, 0x9b, 0xf9, 0x60, 0x14, 0xab, 0x3b, 0x98,
	0xef, 0x7e, 0x1a, 0xff, 0x21, 0xe4, 0xaa, 0x4d, 0xff, 0xd1, 0x19, 0x04, 0xa8, 0x53, 0x52, 0xcf,
	0xfc, 0xaf, 0x6e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x53, 0xb7, 0x8f, 0x46, 0x9f, 0x01, 0x00,
	0x00,
}
