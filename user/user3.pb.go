// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user3.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user3.proto

It has these top-level messages:
	Segmentation
	SegmentCondition
	Condition
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SegmentCondition_Operator int32

const (
	SegmentCondition_and SegmentCondition_Operator = 0
	SegmentCondition_or  SegmentCondition_Operator = 1
)

var SegmentCondition_Operator_name = map[int32]string{
	0: "and",
	1: "or",
}
var SegmentCondition_Operator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SegmentCondition_Operator) String() string {
	return proto.EnumName(SegmentCondition_Operator_name, int32(x))
}
func (SegmentCondition_Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Condition_JoinOperator int32

const (
	Condition_none Condition_JoinOperator = 0
	Condition_and  Condition_JoinOperator = 1
	Condition_or   Condition_JoinOperator = 2
)

var Condition_JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}
var Condition_JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x Condition_JoinOperator) String() string {
	return proto.EnumName(Condition_JoinOperator_name, int32(x))
}
func (Condition_JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Segmentation struct {
	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id         string          `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Name       string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	UserCount  int64           `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	Conditions []*Condition    `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	// repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	Lastrun  int64 `protobuf:"varint,8,opt,name=lastrun" json:"lastrun,omitempty"`
	Created  int64 `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified int64 `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
}

func (m *Segmentation) Reset()                    { *m = Segmentation{} }
func (m *Segmentation) String() string            { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()               {}
func (*Segmentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Segmentation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *Segmentation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Segmentation) GetLastrun() int64 {
	if m != nil {
		return m.Lastrun
	}
	return 0
}

func (m *Segmentation) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Segmentation) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

type SegmentCondition struct {
	Op       string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	IsOp     bool   `protobuf:"varint,3,opt,name=is_op,json=isOp" json:"is_op,omitempty"`
	Key      string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
}

func (m *SegmentCondition) Reset()                    { *m = SegmentCondition{} }
func (m *SegmentCondition) String() string            { return proto.CompactTextString(m) }
func (*SegmentCondition) ProtoMessage()               {}
func (*SegmentCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SegmentCondition) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *SegmentCondition) GetIsOp() bool {
	if m != nil {
		return m.IsOp
	}
	return false
}

func (m *SegmentCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SegmentCondition) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *SegmentCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Condition struct {
	Join     string `protobuf:"bytes,1,opt,name=join" json:"join,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Condition) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

func (m *Condition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Condition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*SegmentCondition)(nil), "user.SegmentCondition")
	proto.RegisterType((*Condition)(nil), "user.Condition")
	proto.RegisterEnum("user.SegmentCondition_Operator", SegmentCondition_Operator_name, SegmentCondition_Operator_value)
	proto.RegisterEnum("user.Condition_JoinOperator", Condition_JoinOperator_name, Condition_JoinOperator_value)
}

func init() { proto.RegisterFile("user/user3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8e, 0x95, 0x30,
	0x14, 0x86, 0xa7, 0x85, 0xcb, 0xc0, 0x71, 0xa2, 0xa4, 0xba, 0x68, 0xc6, 0x98, 0x20, 0xab, 0xeb,
	0x06, 0x12, 0xe7, 0x11, 0x66, 0xa5, 0x9b, 0x49, 0xf0, 0x01, 0x6e, 0x0a, 0xad, 0x63, 0x9d, 0xa1,
	0x87, 0x94, 0x62, 0x46, 0x1f, 0xc2, 0x95, 0x0b, 0x1f, 0xd7, 0xb4, 0x14, 0xbc, 0x0b, 0xdd, 0xc0,
	0xf9, 0xff, 0xff, 0xb4, 0xfd, 0x4e, 0x01, 0xca, 0x65, 0x56, 0xb6, 0xf5, 0x8f, 0x9b, 0x66, 0xb2,
	0xe8, 0x90, 0xa5, 0x5e, 0x5c, 0x37, 0xbd, 0x76, 0xfd, 0x32, 0x3c, 0x28, 0xd7, 0xa0, 0xbd, 0x6f,
	0xe7, 0xa5, 0xd7, 0x3f, 0xda, 0x2f, 0x4a, 0x48, 0x65, 0xdb, 0x01, 0xc7, 0x11, 0x4d, 0x7c, 0xad,
	0xab, 0xea, 0x5f, 0x14, 0xae, 0x3e, 0xa9, 0xfb, 0x51, 0x19, 0x27, 0x9c, 0x46, 0xc3, 0xde, 0x42,
	0x32, 0xb8, 0x27, 0x4e, 0x2a, 0x72, 0x7c, 0xf6, 0xfe, 0x45, 0x13, 0x9b, 0x6f, 0xd1, 0x38, 0xf5,
	0xe4, 0x3a, 0x9f, 0xb1, 0x37, 0x00, 0x62, 0x18, 0x70, 0x31, 0xee, 0xa4, 0x25, 0xa7, 0x15, 0x39,
	0x16, 0x5d, 0x11, 0x9d, 0x0f, 0x92, 0x3d, 0x07, 0xaa, 0x25, 0x3f, 0x04, 0x9b, 0x6a, 0xc9, 0x18,
	0xa4, 0x46, 0x8c, 0x8a, 0x27, 0xc1, 0x09, 0xb5, 0xdf, 0xc2, 0xe3, 0x9e, 0xc2, 0x1a, 0x9e, 0x56,
	0xe4, 0x98, 0x74, 0x85, 0x77, 0x6e, 0xbd, 0xc1, 0x5a, 0x80, 0x01, 0x8d, 0xd4, 0x9e, 0x68, 0xe6,
	0x59, 0x95, 0x04, 0x16, 0x9f, 0x7b, 0x92, 0xd5, 0xef, 0xce, 0x5a, 0x18, 0x87, 0xcb, 0x47, 0x31,
	0x3b, 0xbb, 0x18, 0x9e, 0x87, 0xcd, 0x36, 0xe9, 0x93, 0xc1, 0x2a, 0xe1, 0x94, 0xe4, 0xc5, 0x9a,
	0x44, 0xc9, 0xae, 0x21, 0x1f, 0x51, 0xea, 0xcf, 0x5a, 0x49, 0x0e, 0x21, 0xda, 0x75, 0xfd, 0x9b,
	0x40, 0x19, 0xaf, 0x65, 0x3f, 0xd0, 0x0f, 0x86, 0x53, 0x9c, 0x97, 0xe2, 0xc4, 0x5e, 0xc2, 0x41,
	0xcf, 0x27, 0x9c, 0xc2, 0x64, 0x79, 0x97, 0xea, 0xf9, 0x6e, 0x62, 0x25, 0x24, 0x0f, 0xea, 0x7b,
	0x18, 0xa9, 0xe8, 0x7c, 0xe9, 0xcf, 0xc1, 0x49, 0x59, 0xe1, 0xd0, 0xc6, 0x5b, 0xd9, 0x35, 0x7b,
	0x05, 0x87, 0x6f, 0xe2, 0x71, 0x51, 0x3c, 0x0b, 0xc1, 0x2a, 0xea, 0xd7, 0x90, 0xdf, 0x6d, 0x1d,
	0x97, 0x90, 0x08, 0x23, 0xcb, 0x0b, 0x96, 0x01, 0x45, 0x5b, 0x92, 0xfa, 0x27, 0x81, 0xe2, 0x2f,
	0x13, 0x83, 0xf4, 0x2b, 0x6a, 0x13, 0xbe, 0x57, 0xd1, 0x85, 0x7a, 0x43, 0xa0, 0xff, 0x46, 0x48,
	0xfe, 0x87, 0x90, 0x9e, 0x23, 0xbc, 0x83, 0xab, 0x8f, 0xa8, 0xcd, 0x8e, 0x91, 0x43, 0x6a, 0xd0,
	0xa8, 0xf2, 0x62, 0x03, 0x22, 0x11, 0x88, 0xf6, 0x59, 0xf8, 0x93, 0x6e, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x66, 0x9d, 0xfa, 0x85, 0x93, 0x02, 0x00, 0x00,
}
