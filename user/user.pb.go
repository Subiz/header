// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	AllType
	AddToMyRequest
	UserCreateResult
	MyUser
	User
	Users
	Location
	Device
	Trace
	MergeRequest
	CreateRequest
	Topic
	UnreadTopic
	ReadTopicRequest
	SubscribeRequest
	SubizIDRequest
	MaskResponse
	SubizIDResponse
	Segmentations
	SegmentLoopState
	Segmentation
	SegmentTracking
	SegmentCondition
	Condition
	UserSearchResult
	UserSearchRequest
	IndexEvent
	ListTopicsRequest
	ListTopicsResult
	ListNewsRequest
	AddToMyList
	Field
	Presence
	Previewing
	Visitor
	Visitors
	LastView
	Automation
	Automations
	Session
	AutomationEvent
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_UserReadRequested                  Event = 0
	Event_UserUpdateRequested                Event = 2
	Event_UserCreateRequested                Event = 3
	Event_UserSearchRequested                Event = 4
	Event_UserEventCreateRequested           Event = 5
	Event_UserEventSearchRequested           Event = 7
	Event_UserTopicSearchRequested           Event = 6
	Event_UserSegmentationCreateRequested    Event = 10
	Event_UserSegmentationUpdateRequested    Event = 11
	Event_UserSegmentationDeleteRequested    Event = 12
	Event_UserSegmentationListRequested      Event = 13
	Event_UserSegmentationReadRequested      Event = 14
	Event_UserAddToMyListRequested           Event = 20
	Event_UserEventTopicSubscribeRequested   Event = 35
	Event_UserEventTopicUnsubscribeRequested Event = 36
	Event_UserReadTopicRequested             Event = 41
	Event_UserSubizId                        Event = 42
	Event_UserPresenceReadRequested          Event = 44
	Event_UserPreviewingReadRequested        Event = 46
	Event_UserListTopRequested               Event = 47
	Event_UserAutomationUpsertRequested      Event = 50
	Event_UserAutomationDeleteRequested      Event = 51
	Event_UserAutomationListRequested        Event = 52
	Event_UserAutomationReadRequested        Event = 53
	Event_AutomationAgentNotificationFired   Event = 54
	Event_AutomationConversationMessageFired Event = 55
	Event_UserSessionUpdateRequested         Event = 65
	Event_UserSessionCreateRequested         Event = 66
	Event_UserSessionReadRequested           Event = 67
	Event_SegmentationLoop                   Event = 68
	Event_AutomationSynced                   Event = 102
	Event_AutomationFired                    Event = 103
	Event_UserRequested                      Event = 100
	Event_UserSynced                         Event = 101
)

var Event_name = map[int32]string{
	0:   "UserReadRequested",
	2:   "UserUpdateRequested",
	3:   "UserCreateRequested",
	4:   "UserSearchRequested",
	5:   "UserEventCreateRequested",
	7:   "UserEventSearchRequested",
	6:   "UserTopicSearchRequested",
	10:  "UserSegmentationCreateRequested",
	11:  "UserSegmentationUpdateRequested",
	12:  "UserSegmentationDeleteRequested",
	13:  "UserSegmentationListRequested",
	14:  "UserSegmentationReadRequested",
	20:  "UserAddToMyListRequested",
	35:  "UserEventTopicSubscribeRequested",
	36:  "UserEventTopicUnsubscribeRequested",
	41:  "UserReadTopicRequested",
	42:  "UserSubizId",
	44:  "UserPresenceReadRequested",
	46:  "UserPreviewingReadRequested",
	47:  "UserListTopRequested",
	50:  "UserAutomationUpsertRequested",
	51:  "UserAutomationDeleteRequested",
	52:  "UserAutomationListRequested",
	53:  "UserAutomationReadRequested",
	54:  "AutomationAgentNotificationFired",
	55:  "AutomationConversationMessageFired",
	65:  "UserSessionUpdateRequested",
	66:  "UserSessionCreateRequested",
	67:  "UserSessionReadRequested",
	68:  "SegmentationLoop",
	102: "AutomationSynced",
	103: "AutomationFired",
	100: "UserRequested",
	101: "UserSynced",
}
var Event_value = map[string]int32{
	"UserReadRequested":                  0,
	"UserUpdateRequested":                2,
	"UserCreateRequested":                3,
	"UserSearchRequested":                4,
	"UserEventCreateRequested":           5,
	"UserEventSearchRequested":           7,
	"UserTopicSearchRequested":           6,
	"UserSegmentationCreateRequested":    10,
	"UserSegmentationUpdateRequested":    11,
	"UserSegmentationDeleteRequested":    12,
	"UserSegmentationListRequested":      13,
	"UserSegmentationReadRequested":      14,
	"UserAddToMyListRequested":           20,
	"UserEventTopicSubscribeRequested":   35,
	"UserEventTopicUnsubscribeRequested": 36,
	"UserReadTopicRequested":             41,
	"UserSubizId":                        42,
	"UserPresenceReadRequested":          44,
	"UserPreviewingReadRequested":        46,
	"UserListTopRequested":               47,
	"UserAutomationUpsertRequested":      50,
	"UserAutomationDeleteRequested":      51,
	"UserAutomationListRequested":        52,
	"UserAutomationReadRequested":        53,
	"AutomationAgentNotificationFired":   54,
	"AutomationConversationMessageFired": 55,
	"UserSessionUpdateRequested":         65,
	"UserSessionCreateRequested":         66,
	"UserSessionReadRequested":           67,
	"SegmentationLoop":                   68,
	"AutomationSynced":                   102,
	"AutomationFired":                    103,
	"UserRequested":                      100,
	"UserSynced":                         101,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Segmentation_State int32

const (
	Segmentation_active   Segmentation_State = 0
	Segmentation_inactive Segmentation_State = 1
)

var Segmentation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Segmentation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Segmentation_State) Enum() *Segmentation_State {
	p := new(Segmentation_State)
	*p = x
	return p
}
func (x Segmentation_State) String() string {
	return proto.EnumName(Segmentation_State_name, int32(x))
}
func (x *Segmentation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Segmentation_State_value, data, "Segmentation_State")
	if err != nil {
		return err
	}
	*x = Segmentation_State(value)
	return nil
}
func (Segmentation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

type SegmentCondition_Operator int32

const (
	SegmentCondition_and SegmentCondition_Operator = 0
	SegmentCondition_or  SegmentCondition_Operator = 1
)

var SegmentCondition_Operator_name = map[int32]string{
	0: "and",
	1: "or",
}
var SegmentCondition_Operator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SegmentCondition_Operator) Enum() *SegmentCondition_Operator {
	p := new(SegmentCondition_Operator)
	*p = x
	return p
}
func (x SegmentCondition_Operator) String() string {
	return proto.EnumName(SegmentCondition_Operator_name, int32(x))
}
func (x *SegmentCondition_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SegmentCondition_Operator_value, data, "SegmentCondition_Operator")
	if err != nil {
		return err
	}
	*x = SegmentCondition_Operator(value)
	return nil
}
func (SegmentCondition_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

type Condition_JoinOperator int32

const (
	Condition_none Condition_JoinOperator = 0
	Condition_and  Condition_JoinOperator = 1
	Condition_or   Condition_JoinOperator = 2
)

var Condition_JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}
var Condition_JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x Condition_JoinOperator) Enum() *Condition_JoinOperator {
	p := new(Condition_JoinOperator)
	*p = x
	return p
}
func (x Condition_JoinOperator) String() string {
	return proto.EnumName(Condition_JoinOperator_name, int32(x))
}
func (x *Condition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Condition_JoinOperator_value, data, "Condition_JoinOperator")
	if err != nil {
		return err
	}
	*x = Condition_JoinOperator(value)
	return nil
}
func (Condition_JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

var Automation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Automation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}
func (x Automation_State) String() string {
	return proto.EnumName(Automation_State_name, int32(x))
}
func (x *Automation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_State_value, data, "Automation_State")
	if err != nil {
		return err
	}
	*x = Automation_State(value)
	return nil
}
func (Automation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 0} }

type Automation_ActionType int32

const (
	Automation_conversation_message Automation_ActionType = 0
	Automation_agent_notification   Automation_ActionType = 1
)

var Automation_ActionType_name = map[int32]string{
	0: "conversation_message",
	1: "agent_notification",
}
var Automation_ActionType_value = map[string]int32{
	"conversation_message": 0,
	"agent_notification":   1,
}

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}
func (x Automation_ActionType) String() string {
	return proto.EnumName(Automation_ActionType_name, int32(x))
}
func (x *Automation_ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_ActionType_value, data, "Automation_ActionType")
	if err != nil {
		return err
	}
	*x = Automation_ActionType(value)
	return nil
}
func (Automation_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 1} }

type Session_Platform int32

const (
	Session_web     Session_Platform = 0
	Session_mobile  Session_Platform = 2
	Session_desktop Session_Platform = 4
)

var Session_Platform_name = map[int32]string{
	0: "web",
	2: "mobile",
	4: "desktop",
}
var Session_Platform_value = map[string]int32{
	"web":     0,
	"mobile":  2,
	"desktop": 4,
}

func (x Session_Platform) Enum() *Session_Platform {
	p := new(Session_Platform)
	*p = x
	return p
}
func (x Session_Platform) String() string {
	return proto.EnumName(Session_Platform_name, int32(x))
}
func (x *Session_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Platform_value, data, "Session_Platform")
	if err != nil {
		return err
	}
	*x = Session_Platform(value)
	return nil
}
func (Session_Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 0} }

type Session_Status int32

const (
	Session_open   Session_Status = 0
	Session_closed Session_Status = 1
)

var Session_Status_name = map[int32]string{
	0: "open",
	1: "closed",
}
var Session_Status_value = map[string]int32{
	"open":   0,
	"closed": 1,
}

func (x Session_Status) Enum() *Session_Status {
	p := new(Session_Status)
	*p = x
	return p
}
func (x Session_Status) String() string {
	return proto.EnumName(Session_Status_name, int32(x))
}
func (x *Session_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Status_value, data, "Session_Status")
	if err != nil {
		return err
	}
	*x = Session_Status(value)
	return nil
}
func (Session_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 1} }

type AllType struct {
	User              *User              `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Cr                *CreateRequest     `protobuf:"bytes,3,opt,name=cr" json:"cr,omitempty"`
	Fields            *Field             `protobuf:"bytes,5,opt,name=fields" json:"fields,omitempty"`
	Ucr               *UserCreateResult  `protobuf:"bytes,6,opt,name=ucr" json:"ucr,omitempty"`
	Rpr               *ReadTopicRequest  `protobuf:"bytes,8,opt,name=rpr" json:"rpr,omitempty"`
	Usersearchrequest *UserSearchRequest `protobuf:"bytes,9,opt,name=usersearchrequest" json:"usersearchrequest,omitempty"`
	Usersearchresult  *UserSearchResult  `protobuf:"bytes,10,opt,name=usersearchresult" json:"usersearchresult,omitempty"`
	Ms                *MaskResponse      `protobuf:"bytes,11,opt,name=ms" json:"ms,omitempty"`
	Ltr               *ListTopicsResult  `protobuf:"bytes,12,opt,name=ltr" json:"ltr,omitempty"`
	Sg                *Segmentation      `protobuf:"bytes,14,opt,name=sg" json:"sg,omitempty"`
	Presn             *Presence          `protobuf:"bytes,15,opt,name=presn" json:"presn,omitempty"`
	Previ             *Previewing        `protobuf:"bytes,16,opt,name=previ" json:"previ,omitempty"`
	Vi                *Visitor           `protobuf:"bytes,17,opt,name=vi" json:"vi,omitempty"`
	Vis               *Visitors          `protobuf:"bytes,18,opt,name=vis" json:"vis,omitempty"`
	Topic             *Topic             `protobuf:"bytes,19,opt,name=topic" json:"topic,omitempty"`
	Utopic            *UnreadTopic       `protobuf:"bytes,20,opt,name=utopic" json:"utopic,omitempty"`
	Myuser            *MyUser            `protobuf:"bytes,21,opt,name=myuser" json:"myuser,omitempty"`
	Automation        *Automation        `protobuf:"bytes,23,opt,name=automation" json:"automation,omitempty"`
	Automations       *Automations       `protobuf:"bytes,25,opt,name=automations" json:"automations,omitempty"`
	Session           *Session           `protobuf:"bytes,26,opt,name=session" json:"session,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *AllType) Reset()                    { *m = AllType{} }
func (m *AllType) String() string            { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()               {}
func (*AllType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllType) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AllType) GetCr() *CreateRequest {
	if m != nil {
		return m.Cr
	}
	return nil
}

func (m *AllType) GetFields() *Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *AllType) GetUcr() *UserCreateResult {
	if m != nil {
		return m.Ucr
	}
	return nil
}

func (m *AllType) GetRpr() *ReadTopicRequest {
	if m != nil {
		return m.Rpr
	}
	return nil
}

func (m *AllType) GetUsersearchrequest() *UserSearchRequest {
	if m != nil {
		return m.Usersearchrequest
	}
	return nil
}

func (m *AllType) GetUsersearchresult() *UserSearchResult {
	if m != nil {
		return m.Usersearchresult
	}
	return nil
}

func (m *AllType) GetMs() *MaskResponse {
	if m != nil {
		return m.Ms
	}
	return nil
}

func (m *AllType) GetLtr() *ListTopicsResult {
	if m != nil {
		return m.Ltr
	}
	return nil
}

func (m *AllType) GetSg() *Segmentation {
	if m != nil {
		return m.Sg
	}
	return nil
}

func (m *AllType) GetPresn() *Presence {
	if m != nil {
		return m.Presn
	}
	return nil
}

func (m *AllType) GetPrevi() *Previewing {
	if m != nil {
		return m.Previ
	}
	return nil
}

func (m *AllType) GetVi() *Visitor {
	if m != nil {
		return m.Vi
	}
	return nil
}

func (m *AllType) GetVis() *Visitors {
	if m != nil {
		return m.Vis
	}
	return nil
}

func (m *AllType) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *AllType) GetUtopic() *UnreadTopic {
	if m != nil {
		return m.Utopic
	}
	return nil
}

func (m *AllType) GetMyuser() *MyUser {
	if m != nil {
		return m.Myuser
	}
	return nil
}

func (m *AllType) GetAutomation() *Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AllType) GetAutomations() *Automations {
	if m != nil {
		return m.Automations
	}
	return nil
}

func (m *AllType) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type AddToMyRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds         []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyRequest) Reset()                    { *m = AddToMyRequest{} }
func (m *AddToMyRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToMyRequest) ProtoMessage()               {}
func (*AddToMyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddToMyRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AddToMyRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AddToMyRequest) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

type UserCreateResult struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserCreateResult) Reset()                    { *m = UserCreateResult{} }
func (m *UserCreateResult) String() string            { return proto.CompactTextString(m) }
func (*UserCreateResult) ProtoMessage()               {}
func (*UserCreateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserCreateResult) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserCreateResult) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserCreateResult) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type MyUser struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	User             *User           `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Unread           *int32          `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
	Updated          *int64          `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MyUser) Reset()                    { *m = MyUser{} }
func (m *MyUser) String() string            { return proto.CompactTextString(m) }
func (*MyUser) ProtoMessage()               {}
func (*MyUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MyUser) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyUser) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *MyUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MyUser) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

func (m *MyUser) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type User struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Fullname  *string         `protobuf:"bytes,5,opt,name=fullname" json:"fullname,omitempty"`
	Phones    []string        `protobuf:"bytes,7,rep,name=phones" json:"phones,omitempty"`
	Emails    []string        `protobuf:"bytes,10,rep,name=emails" json:"emails,omitempty"`
	Traces    []*Trace        `protobuf:"bytes,11,rep,name=traces" json:"traces,omitempty"`
	// 	repeated string alias = 12;
	Devices       []*Device `protobuf:"bytes,13,rep,name=devices" json:"devices,omitempty"`
	IsBan         *bool     `protobuf:"varint,14,opt,name=is_ban,json=isBan" json:"is_ban,omitempty"`
	AvatarUrl     *string   `protobuf:"bytes,15,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Segments      []string  `protobuf:"bytes,19,rep,name=segments" json:"segments,omitempty"`
	Labels        []string  `protobuf:"bytes,20,rep,name=labels" json:"labels,omitempty"`
	Unsubscribed  *bool     `protobuf:"varint,21,opt,name=unsubscribed" json:"unsubscribed,omitempty"`
	MarkedSpam    *bool     `protobuf:"varint,22,opt,name=marked_spam,json=markedSpam" json:"marked_spam,omitempty"`
	HardBounced   *bool     `protobuf:"varint,23,opt,name=hard_bounced,json=hardBounced" json:"hard_bounced,omitempty"`
	TotalSessions *int32    `protobuf:"varint,24,opt,name=total_sessions,json=totalSessions" json:"total_sessions,omitempty"`
	SubizId       *string   `protobuf:"bytes,25,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	Timezone      *string   `protobuf:"bytes,26,opt,name=timezone" json:"timezone,omitempty"`
	CountryCode   *string   `protobuf:"bytes,27,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	City          *string   `protobuf:"bytes,32,opt,name=city" json:"city,omitempty"`
	Language      *string   `protobuf:"bytes,28,opt,name=language" json:"language,omitempty"`
	Aliases       []string  `protobuf:"bytes,30,rep,name=aliases" json:"aliases,omitempty"`
	Seen          *int64    `protobuf:"varint,31,opt,name=seen" json:"seen,omitempty"`
	Fields        []*Field  `protobuf:"bytes,33,rep,name=fields" json:"fields,omitempty"`
	Par           *int32    `protobuf:"varint,34,opt,name=par" json:"par,omitempty"`
	// optional int32 modified_hour = 35;
	Modified         *int64 `protobuf:"varint,36,opt,name=modified" json:"modified,omitempty"`
	ModifiedWeek     *int32 `protobuf:"varint,37,opt,name=modified_week,json=modifiedWeek" json:"modified_week,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *User) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *User) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *User) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *User) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *User) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *User) GetIsBan() bool {
	if m != nil && m.IsBan != nil {
		return *m.IsBan
	}
	return false
}

func (m *User) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *User) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *User) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *User) GetUnsubscribed() bool {
	if m != nil && m.Unsubscribed != nil {
		return *m.Unsubscribed
	}
	return false
}

func (m *User) GetMarkedSpam() bool {
	if m != nil && m.MarkedSpam != nil {
		return *m.MarkedSpam
	}
	return false
}

func (m *User) GetHardBounced() bool {
	if m != nil && m.HardBounced != nil {
		return *m.HardBounced
	}
	return false
}

func (m *User) GetTotalSessions() int32 {
	if m != nil && m.TotalSessions != nil {
		return *m.TotalSessions
	}
	return 0
}

func (m *User) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *User) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *User) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *User) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *User) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *User) GetSeen() int64 {
	if m != nil && m.Seen != nil {
		return *m.Seen
	}
	return 0
}

func (m *User) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *User) GetPar() int32 {
	if m != nil && m.Par != nil {
		return *m.Par
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *User) GetModifiedWeek() int32 {
	if m != nil && m.ModifiedWeek != nil {
		return *m.ModifiedWeek
	}
	return 0
}

type Users struct {
	Users            []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Location struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Device struct {
	Id               *int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	UseragentId      *int32  `protobuf:"varint,4,opt,name=useragent_id,json=useragentId" json:"useragent_id,omitempty"`
	Useragent        *string `protobuf:"bytes,5,opt,name=useragent" json:"useragent,omitempty"`
	ScreenResolution *string `protobuf:"bytes,6,opt,name=screen_resolution,json=screenResolution" json:"screen_resolution,omitempty"`
	LanguageId       *int32  `protobuf:"varint,7,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	Language         *string `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Device) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Device) GetUseragentId() int32 {
	if m != nil && m.UseragentId != nil {
		return *m.UseragentId
	}
	return 0
}

func (m *Device) GetUseragent() string {
	if m != nil && m.Useragent != nil {
		return *m.Useragent
	}
	return ""
}

func (m *Device) GetScreenResolution() string {
	if m != nil && m.ScreenResolution != nil {
		return *m.ScreenResolution
	}
	return ""
}

func (m *Device) GetLanguageId() int32 {
	if m != nil && m.LanguageId != nil {
		return *m.LanguageId
	}
	return 0
}

func (m *Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

type Trace struct {
	Id            *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Ip            *string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	LocationId    *int32  `protobuf:"varint,5,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CityName      *string `protobuf:"bytes,8,opt,name=city_name,json=cityName" json:"city_name,omitempty"`
	CountryName   *string `protobuf:"bytes,9,opt,name=country_name,json=countryName" json:"country_name,omitempty"`
	CountryCode   *string `protobuf:"bytes,19,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	ContinentCode *string `protobuf:"bytes,10,opt,name=continent_code,json=continentCode" json:"continent_code,omitempty"`
	ContinentName *string `protobuf:"bytes,18,opt,name=continent_name,json=continentName" json:"continent_name,omitempty"`
	// optional string coutry_code = 11;
	Latitude         *float32 `protobuf:"fixed32,12,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *float32 `protobuf:"fixed32,13,opt,name=longitude" json:"longitude,omitempty"`
	PostalCode       *string  `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	Timezone         *string  `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	Isp              *string  `protobuf:"bytes,17,opt,name=isp" json:"isp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Trace) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Trace) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Trace) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *Trace) GetCityName() string {
	if m != nil && m.CityName != nil {
		return *m.CityName
	}
	return ""
}

func (m *Trace) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *Trace) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *Trace) GetContinentCode() string {
	if m != nil && m.ContinentCode != nil {
		return *m.ContinentCode
	}
	return ""
}

func (m *Trace) GetContinentName() string {
	if m != nil && m.ContinentName != nil {
		return *m.ContinentName
	}
	return ""
}

func (m *Trace) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Trace) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Trace) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *Trace) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Trace) GetIsp() string {
	if m != nil && m.Isp != nil {
		return *m.Isp
	}
	return ""
}

type MergeRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	RecentId         *string         `protobuf:"bytes,4,opt,name=recent_id,json=recentId" json:"recent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MergeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MergeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MergeRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MergeRequest) GetRecentId() string {
	if m != nil && m.RecentId != nil {
		return *m.RecentId
	}
	return ""
}

type CreateRequest struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChallengeId      *string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Answer           *string `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *CreateRequest) GetChallengeId() string {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return ""
}

func (m *CreateRequest) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

type Topic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	Type             *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Topic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Topic) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Topic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Topic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Topic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Topic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type UnreadTopic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type             *string         `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UnreadTopic) Reset()                    { *m = UnreadTopic{} }
func (m *UnreadTopic) String() string            { return proto.CompactTextString(m) }
func (*UnreadTopic) ProtoMessage()               {}
func (*UnreadTopic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnreadTopic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnreadTopic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *UnreadTopic) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UnreadTopic) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UnreadTopic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *UnreadTopic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *UnreadTopic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type ReadTopicRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ReadTopicRequest) Reset()                    { *m = ReadTopicRequest{} }
func (m *ReadTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadTopicRequest) ProtoMessage()               {}
func (*ReadTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadTopicRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ReadTopicRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ReadTopicRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *ReadTopicRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ReadTopicRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type SubscribeRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Topics           []string        `protobuf:"bytes,4,rep,name=topics" json:"topics,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SubscribeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscribeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubscribeRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubizIDRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDRequest) Reset()                    { *m = SubizIDRequest{} }
func (m *SubizIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SubizIDRequest) ProtoMessage()               {}
func (*SubizIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SubizIDRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDRequest) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MaskResponse struct {
	SubizId          *string `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MaskResponse) Reset()                    { *m = MaskResponse{} }
func (m *MaskResponse) String() string            { return proto.CompactTextString(m) }
func (*MaskResponse) ProtoMessage()               {}
func (*MaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MaskResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *MaskResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MaskResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MaskResponse) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type SubizIDResponse struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDResponse) Reset()                    { *m = SubizIDResponse{} }
func (m *SubizIDResponse) String() string            { return proto.CompactTextString(m) }
func (*SubizIDResponse) ProtoMessage()               {}
func (*SubizIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SubizIDResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubizIDResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Segmentations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Segmentations    []*Segmentation `protobuf:"bytes,3,rep,name=segmentations" json:"segmentations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Segmentations) Reset()                    { *m = Segmentations{} }
func (m *Segmentations) String() string            { return proto.CompactTextString(m) }
func (*Segmentations) ProtoMessage()               {}
func (*Segmentations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Segmentations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentations) GetSegmentations() []*Segmentation {
	if m != nil {
		return m.Segmentations
	}
	return nil
}

type SegmentLoopState struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserPar          *int32          `protobuf:"varint,3,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,6,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,7,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentLoopState) Reset()                    { *m = SegmentLoopState{} }
func (m *SegmentLoopState) String() string            { return proto.CompactTextString(m) }
func (*SegmentLoopState) ProtoMessage()               {}
func (*SegmentLoopState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SegmentLoopState) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentLoopState) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentLoopState) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentLoopState) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentLoopState) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type Segmentation struct {
	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Name        *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	UserCount   *int64          `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	Conditions  []*Condition    `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	// repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	Ran              *int64  `protobuf:"varint,8,opt,name=ran" json:"ran,omitempty"`
	Created          *int64  `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64  `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	CurrentCursor    *string `protobuf:"bytes,18,opt,name=current_cursor,json=currentCursor" json:"current_cursor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Segmentation) Reset()                    { *m = Segmentation{} }
func (m *Segmentation) String() string            { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()               {}
func (*Segmentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Segmentation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Segmentation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *Segmentation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Segmentation) GetRan() int64 {
	if m != nil && m.Ran != nil {
		return *m.Ran
	}
	return 0
}

func (m *Segmentation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Segmentation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Segmentation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Segmentation) GetCurrentCursor() string {
	if m != nil && m.CurrentCursor != nil {
		return *m.CurrentCursor
	}
	return ""
}

type SegmentTracking struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserPar          *int32          `protobuf:"varint,2,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,7,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,8,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentTracking) Reset()                    { *m = SegmentTracking{} }
func (m *SegmentTracking) String() string            { return proto.CompactTextString(m) }
func (*SegmentTracking) ProtoMessage()               {}
func (*SegmentTracking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SegmentTracking) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentTracking) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentTracking) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentTracking) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentTracking) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type SegmentCondition struct {
	Op               *string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	IsOp             *bool   `protobuf:"varint,3,opt,name=is_op,json=isOp" json:"is_op,omitempty"`
	Key              *string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator         *string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value            *string `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SegmentCondition) Reset()                    { *m = SegmentCondition{} }
func (m *SegmentCondition) String() string            { return proto.CompactTextString(m) }
func (*SegmentCondition) ProtoMessage()               {}
func (*SegmentCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SegmentCondition) GetOp() string {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return ""
}

func (m *SegmentCondition) GetIsOp() bool {
	if m != nil && m.IsOp != nil {
		return *m.IsOp
	}
	return false
}

func (m *SegmentCondition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SegmentCondition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SegmentCondition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Condition struct {
	Join             *string `protobuf:"bytes,1,opt,name=join" json:"join,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Operator         *string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	Value            *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Condition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *Condition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Condition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type UserSearchResult struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Total            *int64          `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Users            []*User         `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Unreads          []int32         `protobuf:"varint,6,rep,name=unreads" json:"unreads,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSearchResult) Reset()                    { *m = UserSearchResult{} }
func (m *UserSearchResult) String() string            { return proto.CompactTextString(m) }
func (*UserSearchResult) ProtoMessage()               {}
func (*UserSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UserSearchResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchResult) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSearchResult) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *UserSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserSearchResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchResult) GetUnreads() []int32 {
	if m != nil {
		return m.Unreads
	}
	return nil
}

type UserSearchRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SegmentationId   *string         `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Query            *string         `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	AgentId          *string         `protobuf:"bytes,8,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Unread           *bool           `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSearchRequest) Reset()                    { *m = UserSearchRequest{} }
func (m *UserSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserSearchRequest) ProtoMessage()               {}
func (*UserSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UserSearchRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSearchRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *UserSearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *UserSearchRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *UserSearchRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UserSearchRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type IndexEvent struct {
	Id               *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Created          *int64   `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Category         *string  `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Topics           []string `protobuf:"bytes,8,rep,name=topics" json:"topics,omitempty"`
	Object           *string  `protobuf:"bytes,9,opt,name=object" json:"object,omitempty"`
	Text             *string  `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IndexEvent) Reset()                    { *m = IndexEvent{} }
func (m *IndexEvent) String() string            { return proto.CompactTextString(m) }
func (*IndexEvent) ProtoMessage()               {}
func (*IndexEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *IndexEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *IndexEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *IndexEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *IndexEvent) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *IndexEvent) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *IndexEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *IndexEvent) GetObject() string {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return ""
}

func (m *IndexEvent) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ListTopicsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Anchor           *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Unread           *bool           `protobuf:"varint,8,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsRequest) Reset()                    { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()               {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ListTopicsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListTopicsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListTopicsRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *ListTopicsRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *ListTopicsRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *ListTopicsRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type ListTopicsResult struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topics           []*Topic        `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsResult) Reset()                    { *m = ListTopicsResult{} }
func (m *ListTopicsResult) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsResult) ProtoMessage()               {}
func (*ListTopicsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ListTopicsResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsResult) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ListTopicsResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

type ListNewsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	StartTime        *int64          `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Limit            *string         `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListNewsRequest) Reset()                    { *m = ListNewsRequest{} }
func (m *ListNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNewsRequest) ProtoMessage()               {}
func (*ListNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListNewsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListNewsRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListNewsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListNewsRequest) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ListNewsRequest) GetLimit() string {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return ""
}

type AddToMyList struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyList) Reset()                    { *m = AddToMyList{} }
func (m *AddToMyList) String() string            { return proto.CompactTextString(m) }
func (*AddToMyList) ProtoMessage()               {}
func (*AddToMyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AddToMyList) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyList) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AddToMyList) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Field struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Setter           *string `protobuf:"bytes,5,opt,name=setter" json:"setter,omitempty"`
	SetterType       *string `protobuf:"bytes,6,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
	Updated          *int64  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Data             *string `protobuf:"bytes,9,opt,name=data" json:"data,omitempty"`
	Id               *string `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Field) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Field) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Field) GetSetter() string {
	if m != nil && m.Setter != nil {
		return *m.Setter
	}
	return ""
}

func (m *Field) GetSetterType() string {
	if m != nil && m.SetterType != nil {
		return *m.SetterType
	}
	return ""
}

func (m *Field) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Field) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Field) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Presence struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Presence) Reset()                    { *m = Presence{} }
func (m *Presence) String() string            { return proto.CompactTextString(m) }
func (*Presence) ProtoMessage()               {}
func (*Presence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Presence) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Presence) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Presence) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Presence) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

type Previewing struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PageUrl          *string         `protobuf:"bytes,5,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	Updated          *int64          `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	PageTitle        *string         `protobuf:"bytes,7,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Previewing) Reset()                    { *m = Previewing{} }
func (m *Previewing) String() string            { return proto.CompactTextString(m) }
func (*Previewing) ProtoMessage()               {}
func (*Previewing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Previewing) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Previewing) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Previewing) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Previewing) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Previewing) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Previewing) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitor struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User             *User           `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PageUrl          *string         `protobuf:"bytes,6,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	PageViewed       *int64          `protobuf:"varint,7,opt,name=page_viewed,json=pageViewed" json:"page_viewed,omitempty"`
	PageTitle        *string         `protobuf:"bytes,8,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitor) Reset()                    { *m = Visitor{} }
func (m *Visitor) String() string            { return proto.CompactTextString(m) }
func (*Visitor) ProtoMessage()               {}
func (*Visitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Visitor) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitor) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Visitor) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Visitor) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Visitor) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Visitor) GetPageViewed() int64 {
	if m != nil && m.PageViewed != nil {
		return *m.PageViewed
	}
	return 0
}

func (m *Visitor) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitors struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Visitors         []*Visitor      `protobuf:"bytes,2,rep,name=visitors" json:"visitors,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitors) Reset()                    { *m = Visitors{} }
func (m *Visitors) String() string            { return proto.CompactTextString(m) }
func (*Visitors) ProtoMessage()               {}
func (*Visitors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Visitors) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitors) GetVisitors() []*Visitor {
	if m != nil {
		return m.Visitors
	}
	return nil
}

type LastView struct {
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url              *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Ua               *string `protobuf:"bytes,6,opt,name=ua" json:"ua,omitempty"`
	Ip               *string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Created          *int64  `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	EventId          *string `protobuf:"bytes,9,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LastView) Reset()                    { *m = LastView{} }
func (m *LastView) String() string            { return proto.CompactTextString(m) }
func (*LastView) ProtoMessage()               {}
func (*LastView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LastView) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *LastView) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *LastView) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *LastView) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *LastView) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LastView) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *LastView) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

type Automation struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Channel          *string         `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Name             *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description      *string         `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Conditions       []*Condition    `protobuf:"bytes,7,rep,name=conditions" json:"conditions,omitempty"`
	Created          *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string         `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	ActionType       *string         `protobuf:"bytes,13,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	ActionData       *string         `protobuf:"bytes,14,opt,name=action_data,json=actionData" json:"action_data,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automation) Reset()                    { *m = Automation{} }
func (m *Automation) String() string            { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()               {}
func (*Automation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Automation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Automation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Automation) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Automation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Automation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Automation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Automation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Automation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Automation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Automation) GetActionType() string {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ""
}

func (m *Automation) GetActionData() string {
	if m != nil && m.ActionData != nil {
		return *m.ActionData
	}
	return ""
}

type Automations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Automations      []*Automation   `protobuf:"bytes,2,rep,name=automations" json:"automations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automations) Reset()                    { *m = Automations{} }
func (m *Automations) String() string            { return proto.CompactTextString(m) }
func (*Automations) ProtoMessage()               {}
func (*Automations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Automations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automations) GetAutomations() []*Automation {
	if m != nil {
		return m.Automations
	}
	return nil
}

type Session struct {
	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId         *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId            *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Id                *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Platform          *string         `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	Referrer          *string         `protobuf:"bytes,8,opt,name=referrer" json:"referrer,omitempty"`
	SearchEngine      *string         `protobuf:"bytes,9,opt,name=search_engine,json=searchEngine" json:"search_engine,omitempty"`
	Started           *int64          `protobuf:"varint,10,opt,name=started" json:"started,omitempty"`
	Tracked           *int64          `protobuf:"varint,11,opt,name=tracked" json:"tracked,omitempty"`
	Status            *string         `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	EventsCount       *int32          `protobuf:"varint,13,opt,name=events_count,json=eventsCount" json:"events_count,omitempty"`
	ContentViewsCount *int32          `protobuf:"varint,14,opt,name=content_views_count,json=contentViewsCount" json:"content_views_count,omitempty"`
	SearchTerm        *string         `protobuf:"bytes,15,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Session) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Session) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Session) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Session) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Session) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Session) GetReferrer() string {
	if m != nil && m.Referrer != nil {
		return *m.Referrer
	}
	return ""
}

func (m *Session) GetSearchEngine() string {
	if m != nil && m.SearchEngine != nil {
		return *m.SearchEngine
	}
	return ""
}

func (m *Session) GetStarted() int64 {
	if m != nil && m.Started != nil {
		return *m.Started
	}
	return 0
}

func (m *Session) GetTracked() int64 {
	if m != nil && m.Tracked != nil {
		return *m.Tracked
	}
	return 0
}

func (m *Session) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Session) GetEventsCount() int32 {
	if m != nil && m.EventsCount != nil {
		return *m.EventsCount
	}
	return 0
}

func (m *Session) GetContentViewsCount() int32 {
	if m != nil && m.ContentViewsCount != nil {
		return *m.ContentViewsCount
	}
	return 0
}

func (m *Session) GetSearchTerm() string {
	if m != nil && m.SearchTerm != nil {
		return *m.SearchTerm
	}
	return ""
}

type AutomationEvent struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Automation       *Automation     `protobuf:"bytes,5,opt,name=automation" json:"automation,omitempty"`
	Session          *Session        `protobuf:"bytes,6,opt,name=session" json:"session,omitempty"`
	User             *User           `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AutomationEvent) Reset()                    { *m = AutomationEvent{} }
func (m *AutomationEvent) String() string            { return proto.CompactTextString(m) }
func (*AutomationEvent) ProtoMessage()               {}
func (*AutomationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *AutomationEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AutomationEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AutomationEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AutomationEvent) GetAutomation() *Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AutomationEvent) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *AutomationEvent) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*AllType)(nil), "user.AllType")
	proto.RegisterType((*AddToMyRequest)(nil), "user.AddToMyRequest")
	proto.RegisterType((*UserCreateResult)(nil), "user.UserCreateResult")
	proto.RegisterType((*MyUser)(nil), "user.MyUser")
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Users)(nil), "user.Users")
	proto.RegisterType((*Location)(nil), "user.Location")
	proto.RegisterType((*Device)(nil), "user.Device")
	proto.RegisterType((*Trace)(nil), "user.Trace")
	proto.RegisterType((*MergeRequest)(nil), "user.MergeRequest")
	proto.RegisterType((*CreateRequest)(nil), "user.CreateRequest")
	proto.RegisterType((*Topic)(nil), "user.Topic")
	proto.RegisterType((*UnreadTopic)(nil), "user.UnreadTopic")
	proto.RegisterType((*ReadTopicRequest)(nil), "user.ReadTopicRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "user.SubscribeRequest")
	proto.RegisterType((*SubizIDRequest)(nil), "user.SubizIDRequest")
	proto.RegisterType((*MaskResponse)(nil), "user.MaskResponse")
	proto.RegisterType((*SubizIDResponse)(nil), "user.SubizIDResponse")
	proto.RegisterType((*Segmentations)(nil), "user.Segmentations")
	proto.RegisterType((*SegmentLoopState)(nil), "user.SegmentLoopState")
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*SegmentTracking)(nil), "user.SegmentTracking")
	proto.RegisterType((*SegmentCondition)(nil), "user.SegmentCondition")
	proto.RegisterType((*Condition)(nil), "user.Condition")
	proto.RegisterType((*UserSearchResult)(nil), "user.UserSearchResult")
	proto.RegisterType((*UserSearchRequest)(nil), "user.UserSearchRequest")
	proto.RegisterType((*IndexEvent)(nil), "user.IndexEvent")
	proto.RegisterType((*ListTopicsRequest)(nil), "user.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResult)(nil), "user.ListTopicsResult")
	proto.RegisterType((*ListNewsRequest)(nil), "user.ListNewsRequest")
	proto.RegisterType((*AddToMyList)(nil), "user.AddToMyList")
	proto.RegisterType((*Field)(nil), "user.Field")
	proto.RegisterType((*Presence)(nil), "user.Presence")
	proto.RegisterType((*Previewing)(nil), "user.Previewing")
	proto.RegisterType((*Visitor)(nil), "user.Visitor")
	proto.RegisterType((*Visitors)(nil), "user.Visitors")
	proto.RegisterType((*LastView)(nil), "user.LastView")
	proto.RegisterType((*Automation)(nil), "user.Automation")
	proto.RegisterType((*Automations)(nil), "user.Automations")
	proto.RegisterType((*Session)(nil), "user.Session")
	proto.RegisterType((*AutomationEvent)(nil), "user.AutomationEvent")
	proto.RegisterEnum("user.Event", Event_name, Event_value)
	proto.RegisterEnum("user.Segmentation_State", Segmentation_State_name, Segmentation_State_value)
	proto.RegisterEnum("user.SegmentCondition_Operator", SegmentCondition_Operator_name, SegmentCondition_Operator_value)
	proto.RegisterEnum("user.Condition_JoinOperator", Condition_JoinOperator_name, Condition_JoinOperator_value)
	proto.RegisterEnum("user.Automation_State", Automation_State_name, Automation_State_value)
	proto.RegisterEnum("user.Automation_ActionType", Automation_ActionType_name, Automation_ActionType_value)
	proto.RegisterEnum("user.Session_Platform", Session_Platform_name, Session_Platform_value)
	proto.RegisterEnum("user.Session_Status", Session_Status_name, Session_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyServer service

type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := grpc.Invoke(ctx, "/user.MyServer/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyServer service

type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for SegmentationMgr service

type SegmentationMgrClient interface {
	CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error)
	DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error)
}

type segmentationMgrClient struct {
	cc *grpc.ClientConn
}

func NewSegmentationMgrClient(cc *grpc.ClientConn) SegmentationMgrClient {
	return &segmentationMgrClient{cc}
}

func (c *segmentationMgrClient) CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/CreateSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/UpdateSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error) {
	out := new(Segmentations)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/ListSegments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/DeleteSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/ReadSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SegmentationMgr service

type SegmentationMgrServer interface {
	CreateSegment(context.Context, *Segmentation) (*Segmentation, error)
	UpdateSegment(context.Context, *Segmentation) (*Segmentation, error)
	ListSegments(context.Context, *common.Id) (*Segmentations, error)
	DeleteSegment(context.Context, *common.Id) (*common.Empty, error)
	ReadSegment(context.Context, *common.Id) (*Segmentation, error)
}

func RegisterSegmentationMgrServer(s *grpc.Server, srv SegmentationMgrServer) {
	s.RegisterService(&_SegmentationMgr_serviceDesc, srv)
}

func _SegmentationMgr_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ListSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ListSegments(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ReadSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ReadSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.SegmentationMgr",
	HandlerType: (*SegmentationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSegment",
			Handler:    _SegmentationMgr_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _SegmentationMgr_UpdateSegment_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _SegmentationMgr_ListSegments_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SegmentationMgr_DeleteSegment_Handler,
		},
		{
			MethodName: "ReadSegment",
			Handler:    _SegmentationMgr_ReadSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for VisitorMgr service

type VisitorMgrClient interface {
	ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error)
	ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Previewing, error)
	ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error)
}

type visitorMgrClient struct {
	cc *grpc.ClientConn
}

func NewVisitorMgrClient(cc *grpc.ClientConn) VisitorMgrClient {
	return &visitorMgrClient{cc}
}

func (c *visitorMgrClient) ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error) {
	out := new(Presence)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ReadPresence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Previewing, error) {
	out := new(Previewing)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ReadPreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error) {
	out := new(Visitors)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ListTopVisitors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VisitorMgr service

type VisitorMgrServer interface {
	ReadPresence(context.Context, *common.Id) (*Presence, error)
	ReadPreview(context.Context, *common.Id) (*Previewing, error)
	ListTopVisitors(context.Context, *common.Id) (*Visitors, error)
}

func RegisterVisitorMgrServer(s *grpc.Server, srv VisitorMgrServer) {
	s.RegisterService(&_VisitorMgr_serviceDesc, srv)
}

func _VisitorMgr_ReadPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPresence(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ReadPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPreview(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ListTopVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ListTopVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisitorMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.VisitorMgr",
	HandlerType: (*VisitorMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPresence",
			Handler:    _VisitorMgr_ReadPresence_Handler,
		},
		{
			MethodName: "ReadPreview",
			Handler:    _VisitorMgr_ReadPreview_Handler,
		},
		{
			MethodName: "ListTopVisitors",
			Handler:    _VisitorMgr_ListTopVisitors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for UserMgr service

type UserMgrClient interface {
	SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error)
	SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error)
	AddToMy(ctx context.Context, in *AddToMyRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error)
}

type userMgrClient struct {
	cc *grpc.ClientConn
}

func NewUserMgrClient(cc *grpc.ClientConn) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error) {
	out := new(UserSearchResult)
	err := grpc.Invoke(ctx, "/user.UserMgr/SearchUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error) {
	out := new(SubizIDResponse)
	err := grpc.Invoke(ctx, "/user.UserMgr/SubizID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddToMy(ctx context.Context, in *AddToMyRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.UserMgr/AddToMy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserMgr/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserMgr/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserMgr/ReadUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserMgr service

type UserMgrServer interface {
	SearchUsers(context.Context, *UserSearchRequest) (*UserSearchResult, error)
	SubizID(context.Context, *SubizIDRequest) (*SubizIDResponse, error)
	AddToMy(context.Context, *AddToMyRequest) (*common.Empty, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	ReadUser(context.Context, *common.Id) (*User, error)
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*UserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SubizID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubizIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SubizID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SubizID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SubizID(ctx, req.(*SubizIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddToMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddToMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/AddToMy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddToMy(ctx, req.(*AddToMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "SubizID",
			Handler:    _UserMgr_SubizID_Handler,
		},
		{
			MethodName: "AddToMy",
			Handler:    _UserMgr_AddToMy_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserMgr_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for AutomationMgr service

type AutomationMgrClient interface {
	ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error)
	UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error)
	CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
}

type automationMgrClient struct {
	cc *grpc.ClientConn
}

func NewAutomationMgrClient(cc *grpc.ClientConn) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error) {
	out := new(Automations)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/ListAutomations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/UpdateAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/DeleteAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/ReadAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/CreateAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AutomationMgr service

type AutomationMgrServer interface {
	ListAutomations(context.Context, *common.Id) (*Automations, error)
	UpdateAutomation(context.Context, *Automation) (*Automation, error)
	DeleteAutomation(context.Context, *common.Id) (*common.Empty, error)
	ReadAutomation(context.Context, *common.Id) (*Automation, error)
	CreateAutomation(context.Context, *Automation) (*Automation, error)
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ListAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListAutomations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/UpdateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/DeleteAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ReadAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/CreateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationMgr_ListAutomations_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationMgr_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationMgr_DeleteAutomation_Handler,
		},
		{
			MethodName: "ReadAutomation",
			Handler:    _AutomationMgr_ReadAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationMgr_CreateAutomation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for SessionMgr service

type SessionMgrClient interface {
	CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	ReadSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
}

type sessionMgrClient struct {
	cc *grpc.ClientConn
}

func NewSessionMgrClient(cc *grpc.ClientConn) SessionMgrClient {
	return &sessionMgrClient{cc}
}

func (c *sessionMgrClient) CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMgrClient) ReadSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/ReadSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMgrClient) UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/UpdateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionMgr service

type SessionMgrServer interface {
	CreateSession(context.Context, *Session) (*Session, error)
	ReadSession(context.Context, *Session) (*Session, error)
	UpdateSession(context.Context, *Session) (*Session, error)
}

func RegisterSessionMgrServer(s *grpc.Server, srv SessionMgrServer) {
	s.RegisterService(&_SessionMgr_serviceDesc, srv)
}

func _SessionMgr_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).CreateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionMgr_ReadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).ReadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/ReadSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).ReadSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionMgr_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).UpdateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.SessionMgr",
	HandlerType: (*SessionMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionMgr_CreateSession_Handler,
		},
		{
			MethodName: "ReadSession",
			Handler:    _SessionMgr_ReadSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SessionMgr_UpdateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0xbd, 0x73, 0xdc, 0xc6,
	0xf5, 0xbc, 0x6f, 0xdc, 0xbb, 0x3b, 0x12, 0x5c, 0x52, 0x12, 0x44, 0x59, 0x5f, 0x90, 0x2c, 0x4b,
	0xfe, 0xe9, 0x27, 0xea, 0x47, 0xff, 0x92, 0x38, 0x4d, 0x26, 0xfa, 0xf2, 0x0c, 0x33, 0x92, 0xec,
	0x01, 0x25, 0x27, 0xdd, 0x0d, 0x78, 0x58, 0x9d, 0x60, 0xe2, 0x00, 0x18, 0x8b, 0xa3, 0x44, 0xcf,
	0xb8, 0x49, 0x0a, 0xa7, 0x72, 0xed, 0x78, 0x26, 0x99, 0x49, 0x91, 0x22, 0x45, 0x9a, 0xa4, 0xcc,
	0x4c, 0x26, 0x33, 0xe9, 0x52, 0x24, 0xe9, 0xd2, 0x25, 0x65, 0xfe, 0x82, 0xf4, 0x99, 0xf7, 0x76,
	0x17, 0x58, 0xdc, 0x1d, 0x25, 0x4a, 0xa6, 0xd2, 0x90, 0x78, 0x1f, 0x8b, 0x7d, 0xdf, 0xef, 0xed,
	0xe2, 0x60, 0x65, 0x2a, 0x78, 0xb6, 0x89, 0x7f, 0x6e, 0xa4, 0x59, 0x92, 0x27, 0xac, 0x89, 0xcf,
	0x1b, 0x37, 0x76, 0xc3, 0x7c, 0x77, 0x3a, 0xda, 0xe3, 0xf9, 0x8d, 0x24, 0x1b, 0x6f, 0x8a, 0xe9,
	0x6e, 0xf8, 0xd9, 0xe6, 0x53, 0xee, 0x07, 0x3c, 0xdb, 0x1c, 0x25, 0x93, 0x49, 0x12, 0xab, 0x7f,
	0x72, 0x95, 0xfb, 0xf7, 0x36, 0x74, 0x6e, 0x45, 0xd1, 0xa3, 0x83, 0x94, 0xb3, 0x73, 0x40, 0xef,
	0x70, 0xea, 0x17, 0x6a, 0x57, 0x7b, 0x5b, 0x70, 0x83, 0x5e, 0xfe, 0x58, 0xf0, 0xcc, 0x23, 0x3c,
	0xbb, 0x04, 0xf5, 0x51, 0xe6, 0x34, 0x88, 0xba, 0x26, 0xa9, 0x77, 0x32, 0xee, 0xe7, 0xdc, 0xe3,
	0x9f, 0x4e, 0xb9, 0xc8, 0xbd, 0xfa, 0x08, 0x99, 0xda, 0x4f, 0x42, 0x1e, 0x05, 0xc2, 0x69, 0x11,
	0x63, 0x4f, 0x32, 0x7e, 0x80, 0x38, 0x4f, 0x91, 0xd8, 0x55, 0x68, 0x4c, 0x47, 0x99, 0xd3, 0x26,
	0x8e, 0x93, 0xe5, 0x46, 0xfa, 0x75, 0x62, 0x1a, 0xe5, 0x1e, 0xb2, 0x20, 0x67, 0x96, 0x66, 0x8e,
	0x65, 0x72, 0x7a, 0xdc, 0x0f, 0x1e, 0x25, 0x69, 0x38, 0xd2, 0xfb, 0x22, 0x0b, 0xbb, 0x07, 0xab,
	0x48, 0x15, 0xdc, 0xcf, 0x46, 0x4f, 0x33, 0x49, 0x71, 0xba, 0xb4, 0xee, 0x54, 0xb9, 0xc3, 0x0e,
	0x91, 0xf5, 0xc2, 0xf9, 0x15, 0xec, 0x36, 0xd8, 0x26, 0x12, 0x25, 0x71, 0x60, 0x56, 0x4e, 0xfd,
	0x16, 0x92, 0x73, 0x8e, 0x9f, 0xb9, 0x50, 0x9f, 0x08, 0xa7, 0x47, 0xab, 0x98, 0x5c, 0xf5, 0xc0,
	0x17, 0x7b, 0x1e, 0x17, 0x69, 0x12, 0x0b, 0xee, 0xd5, 0x27, 0x64, 0x82, 0x28, 0xcf, 0x9c, 0xbe,
	0xf9, 0xea, 0xfb, 0xa1, 0xc8, 0x49, 0x31, 0xa1, 0x4d, 0x10, 0xe5, 0x19, 0xbe, 0x4d, 0x8c, 0x9d,
	0x65, 0xf3, 0x6d, 0x3b, 0x7c, 0x3c, 0xe1, 0x71, 0xee, 0xe7, 0x61, 0x12, 0x7b, 0x75, 0x31, 0x66,
	0x97, 0xa1, 0x95, 0x66, 0x5c, 0xc4, 0xce, 0x0a, 0xb1, 0x2d, 0x4b, 0xb6, 0x8f, 0x32, 0x2e, 0x78,
	0x3c, 0xe2, 0x9e, 0x24, 0xb2, 0x2b, 0xc4, 0xb5, 0x1f, 0x3a, 0x36, 0x71, 0xd9, 0x05, 0xd7, 0x7e,
	0xc8, 0x9f, 0x85, 0xf1, 0xd8, 0x93, 0x64, 0x76, 0x16, 0xea, 0xfb, 0xa1, 0xb3, 0x4a, 0x4c, 0x03,
	0xc9, 0xf4, 0x71, 0x28, 0xc2, 0x3c, 0xc9, 0xbc, 0xfa, 0x7e, 0xc8, 0x2e, 0x40, 0x63, 0x3f, 0x14,
	0x0e, 0x33, 0xb7, 0x52, 0x74, 0xe1, 0x21, 0x89, 0x5d, 0x84, 0x56, 0x8e, 0x7a, 0x38, 0x6b, 0x66,
	0x0c, 0x48, 0x9f, 0x49, 0x0a, 0xbb, 0x06, 0xed, 0xa9, 0xe4, 0x59, 0x27, 0x9e, 0x55, 0x65, 0xdd,
	0x38, 0x2b, 0xbc, 0xab, 0x18, 0xd8, 0x65, 0x68, 0x4f, 0x0e, 0x28, 0x32, 0x4f, 0x10, 0x6b, 0x5f,
	0x99, 0xf4, 0x80, 0x62, 0x53, 0xd1, 0xd8, 0x4d, 0x00, 0x7f, 0x9a, 0x27, 0x13, 0x32, 0x8a, 0x73,
	0xca, 0xd4, 0xf0, 0x56, 0x81, 0xf7, 0x0c, 0x1e, 0xf6, 0x1e, 0xf4, 0x4a, 0x48, 0x38, 0xa7, 0x4d,
	0x39, 0xca, 0x25, 0xc2, 0x33, 0xb9, 0xd8, 0x3b, 0xd0, 0x11, 0x5c, 0x08, 0xdc, 0x63, 0xc3, 0x34,
	0xd0, 0x8e, 0x44, 0x7a, 0x9a, 0xea, 0xfe, 0xb4, 0x06, 0xcb, 0xb7, 0x82, 0xe0, 0x51, 0xf2, 0xe0,
	0x40, 0x85, 0x1b, 0xbb, 0x08, 0x8d, 0x51, 0xfe, 0xdc, 0xa9, 0xd1, 0xba, 0x95, 0x1b, 0x2a, 0x11,
	0xef, 0x24, 0x71, 0xce, 0x9f, 0xe7, 0x1e, 0xd2, 0xd8, 0x59, 0x00, 0x7f, 0x34, 0x4a, 0xa6, 0x71,
	0x3e, 0x0c, 0x03, 0xca, 0xc4, 0xae, 0xd7, 0x55, 0x98, 0xed, 0x80, 0x9d, 0x82, 0x0e, 0xee, 0x86,
	0xb4, 0x06, 0xd1, 0xda, 0x08, 0x6e, 0x07, 0xec, 0x0c, 0x74, 0xfd, 0x31, 0xa7, 0x55, 0x98, 0x79,
	0x8d, 0xab, 0x5d, 0xcf, 0x22, 0xc4, 0x76, 0x20, 0xdc, 0xc7, 0x60, 0xcf, 0x66, 0xd7, 0xcb, 0x36,
	0x5a, 0x86, 0x7a, 0xb1, 0x47, 0x3d, 0x0c, 0x18, 0x83, 0xe6, 0xc4, 0x17, 0x7b, 0x94, 0xd4, 0x5d,
	0x8f, 0x9e, 0xdd, 0xaf, 0x6a, 0xd0, 0x96, 0x4e, 0x38, 0x8a, 0x66, 0xa7, 0xc1, 0xd2, 0x12, 0xaa,
	0xed, 0x3a, 0x4a, 0xc0, 0xa2, 0xf0, 0x34, 0x0e, 0x29, 0x3c, 0x27, 0xa1, 0x3d, 0xa5, 0xb8, 0x70,
	0x9a, 0x17, 0x6a, 0x57, 0x5b, 0x9e, 0x82, 0x98, 0x03, 0x9d, 0x69, 0x1a, 0xf8, 0x39, 0x0f, 0x48,
	0xae, 0x86, 0xa7, 0x41, 0xf7, 0xeb, 0x36, 0x34, 0x8f, 0x2a, 0xd8, 0xac, 0xaa, 0x55, 0xcb, 0x34,
	0x67, 0x2d, 0xb3, 0x01, 0xd6, 0x93, 0x69, 0x14, 0xc5, 0xfe, 0x84, 0x2b, 0x6b, 0x14, 0x30, 0x0a,
	0x9a, 0x3e, 0x4d, 0x62, 0x2e, 0x9c, 0x0e, 0xb9, 0x40, 0x41, 0x88, 0xe7, 0x13, 0x3f, 0x8c, 0x84,
	0x03, 0x12, 0x2f, 0x21, 0x2c, 0x96, 0x79, 0xe6, 0x8f, 0x38, 0x16, 0x8b, 0x86, 0x91, 0x28, 0x88,
	0xf3, 0x14, 0x89, 0x5d, 0x81, 0x4e, 0xc0, 0xf7, 0x43, 0xe4, 0x1a, 0x10, 0x97, 0x8a, 0xff, 0xbb,
	0x84, 0xf4, 0x34, 0x91, 0x9d, 0x80, 0x76, 0x28, 0x86, 0xbb, 0x7e, 0x4c, 0xb5, 0xc2, 0xf2, 0x5a,
	0xa1, 0xb8, 0xed, 0xc7, 0xa4, 0xce, 0xbe, 0x9f, 0xfb, 0xd9, 0x70, 0x9a, 0x45, 0x54, 0x1f, 0x50,
	0x1d, 0xc2, 0x3c, 0xce, 0x22, 0x54, 0x47, 0xc8, 0x6a, 0x22, 0x9c, 0x35, 0x19, 0x37, 0x1a, 0x46,
	0xb1, 0x23, 0x7f, 0x97, 0x47, 0xc2, 0x59, 0x97, 0x62, 0x4b, 0x88, 0xb9, 0xd0, 0x9f, 0xc6, 0x62,
	0xba, 0x2b, 0x46, 0x59, 0xb8, 0xcb, 0x03, 0x4a, 0x4b, 0xcb, 0xab, 0xe0, 0xd8, 0x79, 0xe8, 0x4d,
	0xfc, 0x6c, 0x8f, 0x07, 0x43, 0x91, 0xfa, 0x13, 0xe7, 0x24, 0xb1, 0x80, 0x44, 0xed, 0xa4, 0xfe,
	0x84, 0x5d, 0x84, 0xfe, 0x53, 0x3f, 0x0b, 0x86, 0xbb, 0xc9, 0x34, 0x1e, 0xf1, 0x80, 0x32, 0xd6,
	0xf2, 0x7a, 0x88, 0xbb, 0x2d, 0x51, 0xec, 0x6d, 0x58, 0xce, 0x93, 0xdc, 0x8f, 0x86, 0x2a, 0xa7,
	0x84, 0xe3, 0x90, 0xff, 0x07, 0x84, 0x55, 0x19, 0x27, 0x30, 0xb2, 0xa8, 0xcf, 0xa1, 0xbb, 0x4e,
	0xcb, 0xc8, 0x22, 0x58, 0x3a, 0x2b, 0x0f, 0x27, 0xfc, 0xb3, 0x24, 0xe6, 0x94, 0xae, 0x5d, 0xaf,
	0x80, 0x51, 0x00, 0xf2, 0x69, 0x76, 0x30, 0x1c, 0x25, 0x01, 0x77, 0xce, 0x10, 0xbd, 0xa7, 0x70,
	0x77, 0x92, 0x80, 0x63, 0xd4, 0x8f, 0xc2, 0xfc, 0xc0, 0xb9, 0x20, 0xa3, 0x1e, 0x9f, 0xf1, 0x95,
	0x91, 0x1f, 0x8f, 0xa7, 0xfe, 0x98, 0x3b, 0x6f, 0xc9, 0x57, 0x6a, 0x18, 0x03, 0xd2, 0x8f, 0x42,
	0x5f, 0x70, 0xe1, 0x9c, 0x23, 0x8b, 0x69, 0x10, 0xdf, 0x24, 0x38, 0x8f, 0x9d, 0xf3, 0x14, 0xa7,
	0xf4, 0x6c, 0xb4, 0xca, 0x8b, 0xa6, 0xf7, 0xab, 0xad, 0xd2, 0x86, 0x46, 0xea, 0x67, 0x8e, 0x4b,
	0x8a, 0xe3, 0x23, 0x0a, 0x30, 0x49, 0x82, 0xf0, 0x49, 0xc8, 0x03, 0xe7, 0x32, 0xbd, 0xae, 0x80,
	0xd9, 0x25, 0x18, 0xe8, 0xe7, 0xe1, 0x33, 0xce, 0xf7, 0x9c, 0xb7, 0x69, 0x5d, 0x5f, 0x23, 0x7f,
	0xc8, 0xf9, 0x9e, 0x7b, 0x0d, 0x5a, 0x98, 0x1b, 0x82, 0x5d, 0x80, 0x16, 0xf5, 0x2e, 0xa7, 0x46,
	0xfb, 0x9b, 0x89, 0x27, 0x09, 0x2e, 0x80, 0x75, 0x3f, 0x19, 0x51, 0xe9, 0x73, 0xff, 0x54, 0x83,
	0xb6, 0x8c, 0x39, 0x23, 0x65, 0x5a, 0x94, 0x32, 0x17, 0xa1, 0x8f, 0xfc, 0x45, 0x7e, 0xcb, 0x34,
	0xed, 0x15, 0xb8, 0xed, 0x80, 0xbd, 0x05, 0xdd, 0x02, 0x54, 0x79, 0x53, 0x22, 0xd8, 0xff, 0xc0,
	0xaa, 0x18, 0x65, 0x9c, 0xc7, 0xc3, 0x8c, 0x8b, 0x24, 0x9a, 0x52, 0x0d, 0x6f, 0x13, 0x97, 0x2d,
	0x09, 0x5e, 0x81, 0xc7, 0xd0, 0xd2, 0x16, 0xc7, 0xcd, 0x3a, 0xb4, 0x19, 0x68, 0x94, 0xf4, 0x7a,
	0xe1, 0x22, 0xab, 0xea, 0x22, 0xf7, 0xc7, 0x0d, 0x68, 0x51, 0x7e, 0xcd, 0xe5, 0x3d, 0xc2, 0xa9,
	0xca, 0xf7, 0x7a, 0x98, 0xd2, 0x36, 0x4a, 0x77, 0xdc, 0xa6, 0xa5, 0xb6, 0x51, 0x28, 0x59, 0x73,
	0x31, 0x22, 0x86, 0x54, 0x0a, 0xd4, 0x3e, 0x88, 0x78, 0x88, 0xa5, 0xc0, 0x88, 0x2e, 0xa2, 0x77,
	0x2b, 0xd1, 0x35, 0xcb, 0x42, 0x01, 0xb8, 0x36, 0x1f, 0x80, 0x6f, 0xc3, 0xf2, 0x28, 0x89, 0xf3,
	0x30, 0x46, 0xc3, 0x12, 0x13, 0x10, 0xd3, 0xa0, 0xc0, 0xce, 0xb3, 0xd1, 0x76, 0x6c, 0x86, 0x8d,
	0x36, 0x24, 0xbb, 0xe4, 0x61, 0x3e, 0x0d, 0x38, 0x0d, 0x1e, 0x75, 0xaf, 0x80, 0xd1, 0x3f, 0x51,
	0x12, 0x8f, 0x25, 0x71, 0x40, 0xc4, 0x12, 0x81, 0xb6, 0x48, 0x13, 0x81, 0xa9, 0x48, 0x42, 0x2c,
	0xd3, 0xdb, 0x41, 0xa2, 0x48, 0x02, 0x33, 0xd1, 0xec, 0x99, 0x44, 0xb3, 0xa1, 0x11, 0x8a, 0x94,
	0xe6, 0x89, 0xae, 0x87, 0x8f, 0xee, 0xe7, 0xd0, 0x7f, 0xc0, 0xb3, 0x31, 0x7f, 0xed, 0xc6, 0xd8,
	0x58, 0xdc, 0xaf, 0x5a, 0x85, 0x33, 0xcf, 0x40, 0x37, 0xe3, 0x23, 0x6e, 0xd6, 0x70, 0x4b, 0x22,
	0xb6, 0x03, 0x37, 0x84, 0x41, 0x65, 0x70, 0x7d, 0x59, 0x33, 0x44, 0x47, 0x3d, 0xf5, 0xa3, 0x88,
	0xc7, 0x32, 0xe2, 0x1a, 0xca, 0x51, 0x1a, 0xb7, 0x1d, 0x60, 0xa9, 0xf4, 0x63, 0xf1, 0x8c, 0x67,
	0x6a, 0x33, 0x05, 0xb9, 0xbf, 0xaa, 0x41, 0x8b, 0xa6, 0x99, 0x63, 0x68, 0xfe, 0xeb, 0x7a, 0xaa,
	0x92, 0xfb, 0xab, 0x41, 0x8a, 0x41, 0x33, 0x3f, 0x48, 0x75, 0x2f, 0xa2, 0x67, 0xb3, 0x31, 0x5a,
	0x95, 0xc6, 0x68, 0xb4, 0xd2, 0xae, 0xd9, 0x4a, 0xdd, 0x3f, 0xd6, 0xa0, 0x67, 0xcc, 0x5e, 0x47,
	0x91, 0x76, 0xb1, 0x38, 0x66, 0x9b, 0x6f, 0x56, 0xdb, 0xbc, 0x31, 0xbc, 0xb4, 0x2a, 0xc3, 0x8b,
	0x56, 0xa1, 0xfd, 0x8d, 0x54, 0xf8, 0x45, 0x0d, 0xec, 0xd9, 0xa3, 0xc1, 0x1b, 0xb3, 0xba, 0xa1,
	0x4b, 0xb3, 0xa2, 0x8b, 0xa9, 0x7f, 0xab, 0xa2, 0xbf, 0xfb, 0x45, 0x0d, 0xec, 0x1d, 0xdd, 0x21,
	0x8f, 0x4f, 0x40, 0x73, 0xc7, 0x46, 0xd5, 0xe2, 0x27, 0xa1, 0x4d, 0xe2, 0x0a, 0xa7, 0x29, 0x1b,
	0xb8, 0x84, 0xdc, 0x09, 0x2c, 0xef, 0x50, 0x87, 0xbc, 0xfb, 0x0a, 0x62, 0x98, 0x6d, 0xb6, 0x5e,
	0x6d, 0xb3, 0x2f, 0x4e, 0x4e, 0x77, 0x0a, 0x7d, 0xf3, 0xfc, 0xf3, 0xfa, 0x6f, 0x3a, 0xdc, 0xec,
	0x8b, 0xe6, 0xd3, 0x2f, 0x6a, 0xb0, 0x52, 0xa8, 0xa9, 0xb6, 0x7e, 0x93, 0x7a, 0x1e, 0x2a, 0x9d,
	0x1b, 0xc1, 0xc0, 0x3c, 0xb2, 0x89, 0xa3, 0x88, 0xf1, 0x3e, 0x0c, 0x84, 0xb9, 0xc6, 0x69, 0x50,
	0x93, 0x5e, 0x74, 0x02, 0xac, 0x32, 0xba, 0xbf, 0xc3, 0x38, 0x93, 0x98, 0xfb, 0x49, 0x92, 0xee,
	0xe4, 0x7e, 0xce, 0x8f, 0x27, 0xce, 0x48, 0x3b, 0x1c, 0x47, 0x64, 0xeb, 0x27, 0x6d, 0x3f, 0xf2,
	0x71, 0xca, 0xee, 0x47, 0x49, 0x92, 0x0e, 0x47, 0x54, 0x55, 0x03, 0x4a, 0xe4, 0x86, 0xd7, 0x43,
	0x9c, 0x2c, 0xb4, 0x81, 0xec, 0xa6, 0x49, 0x3a, 0x8c, 0xa7, 0x93, 0x5d, 0x9e, 0x51, 0xd3, 0x6e,
	0x60, 0x37, 0x4d, 0xd2, 0x87, 0x84, 0x71, 0xbf, 0x6c, 0x40, 0xdf, 0xd4, 0xea, 0x18, 0x24, 0x9e,
	0x6d, 0x0a, 0x0c, 0x9a, 0xd4, 0x1c, 0xa5, 0xe3, 0xe8, 0x99, 0x5d, 0x80, 0x5e, 0xc0, 0x31, 0x25,
	0x53, 0x9a, 0x39, 0x7a, 0xb2, 0xb4, 0x1b, 0x28, 0xdc, 0x84, 0xf4, 0xa6, 0xb7, 0x92, 0x63, 0x1b,
	0x72, 0x74, 0xb9, 0x83, 0x08, 0xb6, 0x09, 0x30, 0x4a, 0xe2, 0x20, 0x94, 0x4e, 0x6a, 0x93, 0x93,
	0x56, 0xd4, 0xed, 0x88, 0xc6, 0x7b, 0x06, 0x0b, 0xb6, 0xc3, 0xcc, 0x8f, 0x55, 0x55, 0xc3, 0x47,
	0xac, 0x75, 0xda, 0x72, 0x5d, 0x59, 0xeb, 0x14, 0x58, 0x99, 0xf5, 0x60, 0x66, 0xd6, 0x5b, 0x87,
	0x96, 0x40, 0xd7, 0x52, 0x2b, 0xef, 0x7a, 0x12, 0xa0, 0x51, 0x60, 0x9a, 0x65, 0x34, 0x2f, 0x4c,
	0x33, 0x91, 0x64, 0xc5, 0x28, 0x20, 0xb1, 0x77, 0x08, 0xe9, 0x5e, 0x84, 0x96, 0x8c, 0x0b, 0x80,
	0xb6, 0x3f, 0xca, 0xc3, 0x7d, 0x6e, 0x2f, 0xb1, 0x3e, 0x58, 0x61, 0xac, 0xa0, 0x9a, 0xfb, 0x5b,
	0x4c, 0x1f, 0xe9, 0x10, 0x1c, 0x98, 0xf6, 0xc2, 0x78, 0x7c, 0xc4, 0xf4, 0x29, 0xc2, 0xa4, 0x5e,
	0x0d, 0x93, 0x97, 0xa4, 0xcf, 0x6c, 0x14, 0x75, 0x5e, 0x1a, 0x45, 0xd6, 0x5c, 0x14, 0x7d, 0x55,
	0xc6, 0x7e, 0x61, 0x7d, 0x8c, 0x83, 0x24, 0x55, 0xe1, 0x51, 0x4f, 0x52, 0xb6, 0x06, 0xad, 0x50,
	0x0c, 0x93, 0x94, 0x44, 0xb0, 0xbc, 0x66, 0x28, 0x3e, 0x4c, 0xd1, 0x2d, 0x7b, 0xfc, 0x40, 0x25,
	0x2e, 0x3e, 0xa2, 0xf1, 0x93, 0x94, 0x67, 0x7e, 0x9e, 0x64, 0xfa, 0xa4, 0xa7, 0x61, 0x34, 0xfe,
	0xbe, 0x1f, 0x4d, 0x75, 0xcf, 0x92, 0x80, 0x7b, 0x06, 0xac, 0x0f, 0x35, 0x47, 0x07, 0x1a, 0x7e,
	0x1c, 0xd8, 0x4b, 0xac, 0x0d, 0xf5, 0x24, 0xb3, 0x6b, 0xee, 0x97, 0x35, 0xe8, 0x96, 0x32, 0x31,
	0x68, 0x7e, 0x92, 0x84, 0x31, 0x99, 0xb2, 0xeb, 0xd1, 0xb3, 0x16, 0xa1, 0xbe, 0x58, 0x84, 0xc6,
	0x61, 0x22, 0x34, 0x4d, 0x11, 0xae, 0x41, 0xff, 0x07, 0x49, 0x18, 0x17, 0x62, 0x58, 0xd0, 0x8c,
	0x93, 0x18, 0xbd, 0xab, 0x04, 0xaa, 0x29, 0x81, 0xea, 0xee, 0x1f, 0x6a, 0xf2, 0x5e, 0xc0, 0xbc,
	0xcd, 0x3a, 0xae, 0x86, 0x99, 0xfb, 0x11, 0x09, 0xdc, 0xf0, 0x24, 0x50, 0x9e, 0x35, 0x9a, 0x87,
	0x9c, 0x35, 0xe4, 0x08, 0x35, 0x7a, 0x5a, 0x18, 0x5b, 0x41, 0x34, 0x09, 0x50, 0x87, 0x97, 0xd9,
	0x85, 0xf1, 0x24, 0x41, 0xf7, 0xdf, 0x35, 0x58, 0x9d, 0xbb, 0xd4, 0x3b, 0x06, 0x0d, 0xde, 0x81,
	0x15, 0xb3, 0xa2, 0x96, 0xc1, 0xba, 0x6c, 0xa2, 0xa5, 0xaa, 0x9f, 0x4e, 0x79, 0xa6, 0xa3, 0x46,
	0x02, 0x87, 0x2a, 0xb2, 0x0e, 0xad, 0x28, 0x9c, 0x84, 0x39, 0xc5, 0x4c, 0xcb, 0x93, 0x40, 0xa5,
	0x7d, 0x5b, 0x73, 0xed, 0xdb, 0x98, 0x74, 0xac, 0x62, 0xd2, 0xf9, 0x4b, 0x0d, 0x60, 0x3b, 0x0e,
	0xf8, 0xf3, 0x7b, 0xfb, 0x78, 0x78, 0x7a, 0xc5, 0x0b, 0x8c, 0x43, 0xc7, 0x30, 0xa3, 0x0c, 0xb5,
	0xe7, 0xca, 0xd0, 0xc8, 0xcf, 0xf9, 0x38, 0xc9, 0x0e, 0x28, 0x2b, 0xf1, 0xa0, 0xa3, 0x60, 0x63,
	0xc6, 0xb0, 0xcc, 0x19, 0x03, 0xf1, 0xc9, 0xee, 0x27, 0x7c, 0x94, 0xab, 0xa3, 0x8f, 0x82, 0x68,
	0xd8, 0xe3, 0xcf, 0x73, 0x75, 0x90, 0xa1, 0x67, 0xf7, 0xaf, 0x35, 0x58, 0x35, 0x2f, 0x3f, 0xdf,
	0xf8, 0x75, 0xd9, 0xe1, 0x53, 0x9a, 0xe1, 0xbd, 0xe6, 0x62, 0xef, 0x75, 0x4c, 0xef, 0x95, 0x2e,
	0xb2, 0x2a, 0x2e, 0xca, 0xc0, 0x9e, 0xbd, 0xcd, 0x3d, 0x8a, 0x3e, 0x97, 0x0a, 0x63, 0x36, 0x2a,
	0x17, 0x42, 0xf2, 0x3e, 0xb4, 0xb4, 0xec, 0xa2, 0xf8, 0x72, 0x7f, 0x59, 0x83, 0x15, 0xdc, 0xf4,
	0x21, 0x7f, 0xf6, 0xdf, 0xb0, 0xe1, 0x59, 0x00, 0x91, 0xfb, 0x59, 0x3e, 0xc4, 0x83, 0x9e, 0xee,
	0x8b, 0x84, 0x79, 0x14, 0x4e, 0x78, 0xd5, 0x5e, 0x5d, 0x65, 0x2f, 0x37, 0x80, 0x9e, 0xba, 0x14,
	0x45, 0x49, 0xbf, 0xe1, 0xbd, 0xe1, 0x61, 0xa2, 0xb9, 0x7f, 0xae, 0x41, 0x8b, 0xae, 0x51, 0x8a,
	0x96, 0x5f, 0x37, 0x5a, 0xfe, 0xeb, 0xce, 0x98, 0x27, 0xa1, 0x2d, 0x78, 0x9e, 0xf3, 0xc2, 0xee,
	0x12, 0xc2, 0xa6, 0x24, 0x9f, 0x86, 0xc6, 0x29, 0x06, 0x24, 0xea, 0xd1, 0x8b, 0xcf, 0x32, 0x0c,
	0x9a, 0x81, 0x9f, 0xfb, 0x2a, 0x45, 0xe8, 0x59, 0xa5, 0x33, 0xe8, 0x74, 0x76, 0x3f, 0x07, 0x4b,
	0x5f, 0xe4, 0x1f, 0xc3, 0x41, 0xf9, 0x45, 0xda, 0xa5, 0x61, 0x3c, 0x2e, 0xee, 0x52, 0x15, 0xe4,
	0xfe, 0xbe, 0x06, 0x50, 0x7e, 0x22, 0x78, 0x93, 0x12, 0x9c, 0x06, 0x2b, 0xf5, 0xc7, 0x9c, 0xee,
	0x29, 0x55, 0x52, 0x22, 0xfc, 0x38, 0x8b, 0x4c, 0x0b, 0xb6, 0xab, 0x16, 0x3c, 0x0b, 0x40, 0x8b,
	0xf2, 0x30, 0x8f, 0xb8, 0x8a, 0xb5, 0x2e, 0x62, 0x1e, 0x21, 0xc2, 0xfd, 0x47, 0x0d, 0x3a, 0xea,
	0xdb, 0xc4, 0x31, 0x88, 0xae, 0x2f, 0xaa, 0x9b, 0x87, 0x5f, 0x54, 0x2f, 0xb2, 0x61, 0x45, 0xb3,
	0x76, 0x55, 0xb3, 0xf3, 0xd0, 0x23, 0x12, 0xda, 0xb7, 0x98, 0x79, 0x48, 0xa5, 0x8f, 0x09, 0x33,
	0xa3, 0xa0, 0x35, 0xab, 0xe0, 0x8f, 0xc0, 0xd2, 0xdf, 0x5e, 0x8e, 0xa2, 0xe0, 0x35, 0xb0, 0xf6,
	0x15, 0xbb, 0x53, 0xa7, 0x12, 0x33, 0xf3, 0x81, 0xa7, 0x20, 0xbb, 0xbf, 0xae, 0x81, 0x75, 0xdf,
	0x17, 0x39, 0xca, 0xf1, 0xda, 0x3e, 0xb5, 0xa1, 0x51, 0xba, 0x13, 0x1f, 0x31, 0xbc, 0xa7, 0xbe,
	0xb2, 0x42, 0x7d, 0xea, 0xab, 0x6b, 0xb7, 0x4e, 0x71, 0xed, 0x66, 0x74, 0x21, 0xab, 0xda, 0x85,
	0x4e, 0x83, 0xc5, 0xf7, 0x55, 0x25, 0x90, 0x09, 0xd3, 0x21, 0x78, 0x3b, 0x70, 0xff, 0xd6, 0x00,
	0x28, 0x3f, 0xd9, 0x1c, 0xdb, 0xd1, 0xa1, 0xec, 0xa9, 0x28, 0xd5, 0x53, 0x3f, 0x8e, 0x79, 0xa4,
	0x6f, 0x35, 0x14, 0x58, 0x54, 0x98, 0xd6, 0xe1, 0x87, 0x8a, 0xf6, 0xfc, 0xa1, 0xa2, 0x7a, 0x6a,
	0xe8, 0xbc, 0xfc, 0xd4, 0x70, 0x9c, 0x67, 0x84, 0xf3, 0xd0, 0xc3, 0x29, 0x3f, 0x89, 0x65, 0xc1,
	0x1a, 0xc8, 0x82, 0x25, 0x51, 0x54, 0xb0, 0x4a, 0x06, 0xaa, 0x4e, 0xcb, 0x26, 0xc3, 0x5d, 0x3f,
	0xf7, 0x8f, 0x72, 0x7c, 0xf8, 0x1e, 0xc0, 0xad, 0xf2, 0x8d, 0x0e, 0xac, 0x8f, 0x92, 0x78, 0x9f,
	0x67, 0x42, 0x8e, 0x54, 0x13, 0x2e, 0x84, 0x3f, 0xc6, 0x55, 0x27, 0x81, 0xc9, 0xfa, 0x1e, 0x27,
	0x79, 0xf8, 0x24, 0x94, 0xb7, 0xab, 0x76, 0x8d, 0x3a, 0x85, 0xf1, 0xdd, 0xed, 0x08, 0x2e, 0xdd,
	0xaa, 0x7e, 0xcf, 0x93, 0xe1, 0x3d, 0xff, 0x09, 0xd0, 0x64, 0x72, 0xff, 0xd9, 0x80, 0x8e, 0xfa,
	0x90, 0xf0, 0x26, 0x4b, 0xdb, 0xec, 0x49, 0x74, 0x03, 0xac, 0x34, 0xf2, 0xf3, 0x27, 0x49, 0x36,
	0xd1, 0x03, 0x95, 0x86, 0x91, 0x96, 0xf1, 0x27, 0x3c, 0xcb, 0xd4, 0x01, 0x87, 0x6e, 0x2e, 0x25,
	0xcc, 0x2e, 0xc1, 0x40, 0x7e, 0x69, 0x1e, 0xf2, 0x78, 0x1c, 0xc6, 0xfa, 0x5a, 0xb9, 0x2f, 0x91,
	0xf7, 0x08, 0x87, 0xa1, 0x42, 0x6d, 0xb8, 0x88, 0x07, 0x0d, 0x22, 0x25, 0xc7, 0xa3, 0x1c, 0x0f,
	0xe8, 0xa0, 0xdb, 0xf0, 0x34, 0x48, 0xbd, 0x2d, 0xf7, 0xf3, 0xa9, 0x50, 0x91, 0xa2, 0x20, 0x3c,
	0x93, 0x51, 0x8e, 0x09, 0x75, 0xfc, 0x1d, 0xc8, 0x9b, 0x7d, 0x89, 0x93, 0x07, 0xe0, 0x1b, 0xb0,
	0x36, 0x42, 0x1b, 0xc5, 0x39, 0x15, 0x31, 0xcd, 0xb9, 0x4c, 0x9c, 0xab, 0x8a, 0x84, 0x45, 0x44,
	0xf1, 0x53, 0xbb, 0x24, 0x1d, 0x72, 0x9e, 0x4d, 0xd4, 0x17, 0x29, 0x90, 0xa8, 0x47, 0x3c, 0x9b,
	0xb8, 0xd7, 0xc1, 0xfa, 0x48, 0x1b, 0xa3, 0x03, 0x8d, 0x67, 0x7c, 0xd7, 0x5e, 0xc2, 0x40, 0x9b,
	0x24, 0xbb, 0x61, 0xc4, 0xed, 0x3a, 0xeb, 0x41, 0x27, 0xe0, 0x62, 0x2f, 0x4f, 0x52, 0xbb, 0xe9,
	0x9e, 0x83, 0xf6, 0x8e, 0x94, 0xd5, 0x82, 0x66, 0x92, 0xf2, 0x58, 0x32, 0x8f, 0xa2, 0x44, 0xf0,
	0xc0, 0xae, 0xb9, 0xff, 0xaa, 0xc1, 0x4a, 0xe9, 0x7d, 0x39, 0x31, 0xbf, 0x41, 0x4f, 0x57, 0x3f,
	0x43, 0xb7, 0x8e, 0xf0, 0x19, 0xda, 0xf8, 0xa2, 0xdc, 0x7e, 0xd1, 0x17, 0xe5, 0xa2, 0xfb, 0x74,
	0x16, 0x77, 0x9f, 0x77, 0x7f, 0x62, 0x41, 0x4b, 0xea, 0x77, 0x42, 0x9e, 0x8b, 0x3c, 0xee, 0x07,
	0x6a, 0x10, 0xe4, 0x78, 0x12, 0x3d, 0x05, 0x6b, 0x88, 0x7e, 0x4c, 0xad, 0xb3, 0x24, 0xd4, 0x35,
	0xa1, 0x72, 0x29, 0xce, 0x03, 0xbb, 0xa1, 0x09, 0x95, 0x03, 0x16, 0x0f, 0xec, 0x26, 0x7b, 0x0b,
	0x1c, 0x24, 0xd0, 0x76, 0xb3, 0xcb, 0x5a, 0x15, 0xea, 0xec, 0xda, 0x8e, 0xa6, 0xd2, 0x50, 0x3b,
	0x4b, 0x6d, 0xb3, 0x4b, 0x70, 0x5e, 0x6e, 0x59, 0x9e, 0xb4, 0x66, 0x37, 0x80, 0x45, 0x4c, 0xb3,
	0x5a, 0xf5, 0x16, 0x31, 0xdd, 0xe5, 0x11, 0x37, 0x99, 0xfa, 0xec, 0x22, 0x9c, 0x9d, 0x65, 0xc2,
	0xc9, 0xb4, 0x64, 0x19, 0x2c, 0x62, 0xa9, 0x5a, 0x76, 0x59, 0xab, 0x64, 0x8c, 0xb6, 0x25, 0x75,
	0x9d, 0x5d, 0x86, 0x0b, 0x85, 0x39, 0xa4, 0xd6, 0x33, 0xb7, 0xc0, 0x3c, 0xb0, 0x2f, 0xb1, 0x2b,
	0xe0, 0x56, 0xb9, 0x1e, 0x97, 0xdf, 0x53, 0x4b, 0xbe, 0xcb, 0x6c, 0x03, 0x4e, 0x6a, 0xe7, 0x9a,
	0x57, 0xdd, 0x3c, 0xb0, 0xaf, 0xb1, 0x15, 0xe8, 0x91, 0xa8, 0xf2, 0xbe, 0xd2, 0x7e, 0x97, 0x9d,
	0x85, 0xd3, 0x88, 0x28, 0x7e, 0x09, 0x52, 0x91, 0xfb, 0x3a, 0x3b, 0x0f, 0x67, 0x14, 0x59, 0xff,
	0x04, 0xa4, 0xc2, 0x70, 0x03, 0xeb, 0x36, 0x32, 0xa8, 0xb3, 0x4c, 0x49, 0xd9, 0xd4, 0x56, 0x29,
	0x83, 0xfa, 0x71, 0x2a, 0x78, 0x66, 0xe8, 0xbd, 0x35, 0xcf, 0x32, 0x6b, 0xfe, 0xf7, 0xb4, 0x00,
	0x25, 0x4b, 0xd5, 0x76, 0xff, 0x3f, 0xcf, 0x50, 0x95, 0xf0, 0x5b, 0x68, 0xdc, 0x92, 0x78, 0x0b,
	0x3b, 0xc9, 0x43, 0xa3, 0x91, 0x7c, 0x10, 0x66, 0x3c, 0xb0, 0xbf, 0x8d, 0xc6, 0x2d, 0xb9, 0xee,
	0x18, 0x9d, 0xe8, 0x81, 0x6c, 0x44, 0x92, 0xef, 0x3b, 0xec, 0x1c, 0x6c, 0x48, 0x5f, 0x53, 0xca,
	0xcd, 0xc6, 0xd4, 0xad, 0x19, 0xfa, 0x6c, 0x60, 0xde, 0xd6, 0x81, 0xa0, 0x73, 0xb7, 0x22, 0xeb,
	0x1d, 0xb6, 0x5e, 0x5c, 0x4e, 0x49, 0x5d, 0x93, 0x24, 0xb5, 0xef, 0x22, 0xb6, 0x94, 0x6d, 0xe7,
	0x20, 0x1e, 0xf1, 0xc0, 0x7e, 0xc2, 0xd6, 0xcc, 0xb2, 0x25, 0xc5, 0x1b, 0xb3, 0x55, 0x18, 0x48,
	0xdf, 0xeb, 0x77, 0x62, 0x6b, 0x01, 0xda, 0x51, 0xae, 0xe3, 0x5b, 0x37, 0xc1, 0x7a, 0x70, 0xb0,
	0xc3, 0xb3, 0x7d, 0x9e, 0xb1, 0xcb, 0x50, 0xbf, 0x9b, 0x30, 0x55, 0x4f, 0xd4, 0xcf, 0xbc, 0x36,
	0xaa, 0xa0, 0xbb, 0xb4, 0xf5, 0xb3, 0x7a, 0x71, 0xd1, 0x27, 0x4d, 0x32, 0xce, 0xd8, 0x77, 0xf5,
	0x27, 0x32, 0x45, 0x60, 0x0b, 0xee, 0x9d, 0x37, 0x16, 0xe0, 0xdc, 0x25, 0x5c, 0x2a, 0xed, 0xf6,
	0xea, 0x4b, 0xff, 0x0f, 0xfa, 0xe8, 0xff, 0x1d, 0xfd, 0x03, 0x04, 0xd0, 0xa5, 0x79, 0x3b, 0xd8,
	0x58, 0x9b, 0x5f, 0x21, 0xdc, 0x25, 0x76, 0x1d, 0x06, 0x32, 0xaa, 0xf4, 0x6e, 0xe6, 0x9a, 0x81,
	0x7e, 0xbe, 0x37, 0x49, 0xf3, 0x03, 0x77, 0x89, 0x6d, 0x42, 0x0f, 0x7d, 0xb2, 0x88, 0x77, 0xa1,
	0x44, 0x5b, 0x5f, 0xd7, 0x00, 0xd4, 0x68, 0x8c, 0x66, 0xb9, 0x0e, 0x7d, 0x5c, 0x5f, 0x9c, 0xc7,
	0xcc, 0x17, 0xcc, 0xfc, 0xe8, 0xca, 0x5d, 0x62, 0xff, 0x2b, 0x77, 0x53, 0xd9, 0x55, 0x61, 0x9e,
	0xfb, 0xed, 0x15, 0x09, 0xb7, 0xa2, 0xf2, 0xac, 0x98, 0xe8, 0x17, 0xbc, 0x5f, 0xd3, 0xdc, 0xa5,
	0xad, 0xdf, 0xd4, 0xa1, 0x83, 0xbe, 0x47, 0xc9, 0xbe, 0x0f, 0x3d, 0x59, 0x4b, 0xe5, 0xa7, 0xfd,
	0xc3, 0x7e, 0xf2, 0xb6, 0x71, 0xc8, 0xaf, 0xd8, 0xdc, 0x25, 0xf6, 0x3e, 0x74, 0xd4, 0xd7, 0x12,
	0xb6, 0xae, 0x6c, 0x51, 0xf9, 0x46, 0xb4, 0x71, 0x62, 0x06, 0x2b, 0x3f, 0xa9, 0xb8, 0x4b, 0xec,
	0x26, 0x74, 0x54, 0xe5, 0xd3, 0x2b, 0xab, 0x3f, 0x7c, 0x9a, 0xf7, 0xc3, 0x15, 0x00, 0x19, 0x5e,
	0xf4, 0x23, 0x1d, 0xa3, 0x95, 0x6d, 0x18, 0xcf, 0x92, 0x4f, 0xc6, 0xd2, 0x4b, 0xf8, 0x2e, 0x83,
	0x85, 0x96, 0x56, 0x5c, 0xa5, 0xcd, 0x2a, 0x5c, 0x5b, 0x5f, 0xd7, 0x61, 0x50, 0xe6, 0x14, 0x5a,
	0x6d, 0x4b, 0x9a, 0xdc, 0x1c, 0x34, 0xcd, 0xe5, 0xf3, 0x3f, 0x06, 0x23, 0x3b, 0xd9, 0x52, 0x26,
	0xe3, 0xc0, 0x31, 0xd7, 0xe1, 0x37, 0xe6, 0x30, 0xe4, 0x60, 0x5b, 0xc6, 0xaa, 0xb1, 0xf2, 0x85,
	0xe1, 0x7a, 0x13, 0x96, 0x51, 0xad, 0x43, 0xd8, 0x17, 0x6d, 0xf1, 0x3e, 0xd8, 0xd2, 0xb0, 0xaf,
	0x2a, 0xdc, 0xd6, 0xcf, 0x6b, 0x00, 0xaa, 0x6c, 0xa1, 0x65, 0x36, 0xcb, 0x02, 0x20, 0xa7, 0x8f,
	0xea, 0x54, 0xb2, 0x51, 0x05, 0xcb, 0x60, 0x3f, 0x2a, 0xfb, 0x66, 0x59, 0x25, 0x8e, 0xb4, 0xe0,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x7d, 0x13, 0x72, 0xf1, 0x2a, 0x00, 0x00,
}
