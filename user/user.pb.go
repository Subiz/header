// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	AddToMyRequest
	MyAgents
	UserCreateResult
	MyUser
	AttributeDefinition
	AttributeDefinitions
	AttributeData
	User
	Users
	Device
	Traces
	Trace
	MergeRequest
	CreateRequest
	Topic
	UnreadTopic
	ReadTopicRequest
	SubscribeRequest
	AggregateUserCount
	AggregateUserAttributeCount
	SubizIDRequest
	MaskResponse
	SubizIDResponse
	Segmentations
	SegmentLoopState
	UserSegmentCache
	Segmentation
	SegmentTracking
	Condition
	SegmentCondition
	EventCondition
	UserSearchResult
	UserSearchRequest
	IndexEvent
	ListTopicsRequest
	ListTopicsResult
	ListNewsRequest
	AddToMyList
	Field
	Presence
	Presences
	Visitor
	Visitors
	LastView
	Automation
	Automations
	Session
	DeleteAttrRequest
	CountMyUserRequest
	CountUserRequest
	CountUserByAttributeRequest
	CountResponse
	AutomationCheck
	SCondition
	Alias
	UserSegment
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AttributeType int32

const (
	AttributeType_text     AttributeType = 0
	AttributeType_number   AttributeType = 1
	AttributeType_boolean  AttributeType = 2
	AttributeType_datetime AttributeType = 3
	AttributeType_list     AttributeType = 4
)

var AttributeType_name = map[int32]string{
	0: "text",
	1: "number",
	2: "boolean",
	3: "datetime",
	4: "list",
}
var AttributeType_value = map[string]int32{
	"text":     0,
	"number":   1,
	"boolean":  2,
	"datetime": 3,
	"list":     4,
}

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}
func (x AttributeType) String() string {
	return proto.EnumName(AttributeType_name, int32(x))
}
func (x *AttributeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeType_value, data, "AttributeType")
	if err != nil {
		return err
	}
	*x = AttributeType(value)
	return nil
}
func (AttributeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AttributeKind int32

const (
	AttributeKind_system  AttributeKind = 0
	AttributeKind_default AttributeKind = 1
	AttributeKind_custom  AttributeKind = 2
)

var AttributeKind_name = map[int32]string{
	0: "system",
	1: "default",
	2: "custom",
}
var AttributeKind_value = map[string]int32{
	"system":  0,
	"default": 1,
	"custom":  2,
}

func (x AttributeKind) Enum() *AttributeKind {
	p := new(AttributeKind)
	*p = x
	return p
}
func (x AttributeKind) String() string {
	return proto.EnumName(AttributeKind_name, int32(x))
}
func (x *AttributeKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeKind_value, data, "AttributeKind")
	if err != nil {
		return err
	}
	*x = AttributeKind(value)
	return nil
}
func (AttributeKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AttributeDataState int32

const (
	AttributeDataState_live    AttributeDataState = 0
	AttributeDataState_deleted AttributeDataState = 1
)

var AttributeDataState_name = map[int32]string{
	0: "live",
	1: "deleted",
}
var AttributeDataState_value = map[string]int32{
	"live":    0,
	"deleted": 1,
}

func (x AttributeDataState) Enum() *AttributeDataState {
	p := new(AttributeDataState)
	*p = x
	return p
}
func (x AttributeDataState) String() string {
	return proto.EnumName(AttributeDataState_name, int32(x))
}
func (x *AttributeDataState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeDataState_value, data, "AttributeDataState")
	if err != nil {
		return err
	}
	*x = AttributeDataState(value)
	return nil
}
func (AttributeDataState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Event int32

const (
	Event_UserReadRequested                  Event = 0
	Event_UserUpdateRequested                Event = 2
	Event_UserCreateRequested                Event = 3
	Event_UserSearchRequested                Event = 4
	Event_UserEventCreateRequested           Event = 5
	Event_UserEventSearchRequested           Event = 7
	Event_UserTopicSearchRequested           Event = 6
	Event_UserSegmentationCreateRequested    Event = 10
	Event_UserSegmentationUpdateRequested    Event = 11
	Event_UserSegmentationDeleteRequested    Event = 12
	Event_UserSegmentationListRequested      Event = 13
	Event_UserSegmentationReadRequested      Event = 14
	Event_UserAddToMyListRequested           Event = 20
	Event_UserRemoveFromMyListRequested      Event = 21
	Event_UserEventTopicSubscribeRequested   Event = 35
	Event_UserEventTopicUnsubscribeRequested Event = 36
	Event_UserReadTopicRequested             Event = 41
	Event_UserSubizId                        Event = 42
	Event_UserPresenceReadRequested          Event = 44
	Event_UserPreviewingReadRequested        Event = 46
	Event_UserListTopRequested               Event = 47
	Event_UserAutomationUpsertRequested      Event = 50
	Event_UserAutomationDeleteRequested      Event = 51
	Event_UserAutomationListRequested        Event = 52
	Event_UserAutomationReadRequested        Event = 53
	Event_AutomationAgentNotificationFired   Event = 54
	Event_AutomationConversationMessageFired Event = 55
	Event_UserSessionUpdateRequested         Event = 65
	Event_UserSessionCreateRequested         Event = 66
	Event_UserSessionReadRequested           Event = 67
	Event_SegmentationLoop                   Event = 68
	Event_AutomationSynced                   Event = 102
	Event_AutomationFired                    Event = 103
	Event_UserRequested                      Event = 100
	Event_UserCreated                        Event = 70
	Event_UserAttributeAdded                 Event = 71
	Event_UserUpdated                        Event = 72
	Event_UserSynced                         Event = 101
	Event_UserUpserted                       Event = 105
	Event_UserV3Synced                       Event = 106
	Event_UserJob                            Event = 199
	Event_UserResolvedJob                    Event = 200
	Event_UserResolvedEventCreated           Event = 201
	Event_UserAliasAdded                     Event = 202
	Event_UserAliasDeleted                   Event = 203
	Event_UserEventCreated                   Event = 204
	Event_UserAggregateUserCount             Event = 205
	Event_UserAggregateUserAttributeCount    Event = 206
	Event_UserAggregated                     Event = 207
	Event_UserTopicJob                       Event = 208
	Event_UserEventTopicPublished            Event = 209
)

var Event_name = map[int32]string{
	0:   "UserReadRequested",
	2:   "UserUpdateRequested",
	3:   "UserCreateRequested",
	4:   "UserSearchRequested",
	5:   "UserEventCreateRequested",
	7:   "UserEventSearchRequested",
	6:   "UserTopicSearchRequested",
	10:  "UserSegmentationCreateRequested",
	11:  "UserSegmentationUpdateRequested",
	12:  "UserSegmentationDeleteRequested",
	13:  "UserSegmentationListRequested",
	14:  "UserSegmentationReadRequested",
	20:  "UserAddToMyListRequested",
	21:  "UserRemoveFromMyListRequested",
	35:  "UserEventTopicSubscribeRequested",
	36:  "UserEventTopicUnsubscribeRequested",
	41:  "UserReadTopicRequested",
	42:  "UserSubizId",
	44:  "UserPresenceReadRequested",
	46:  "UserPreviewingReadRequested",
	47:  "UserListTopRequested",
	50:  "UserAutomationUpsertRequested",
	51:  "UserAutomationDeleteRequested",
	52:  "UserAutomationListRequested",
	53:  "UserAutomationReadRequested",
	54:  "AutomationAgentNotificationFired",
	55:  "AutomationConversationMessageFired",
	65:  "UserSessionUpdateRequested",
	66:  "UserSessionCreateRequested",
	67:  "UserSessionReadRequested",
	68:  "SegmentationLoop",
	102: "AutomationSynced",
	103: "AutomationFired",
	100: "UserRequested",
	70:  "UserCreated",
	71:  "UserAttributeAdded",
	72:  "UserUpdated",
	101: "UserSynced",
	105: "UserUpserted",
	106: "UserV3Synced",
	199: "UserJob",
	200: "UserResolvedJob",
	201: "UserResolvedEventCreated",
	202: "UserAliasAdded",
	203: "UserAliasDeleted",
	204: "UserEventCreated",
	205: "UserAggregateUserCount",
	206: "UserAggregateUserAttributeCount",
	207: "UserAggregated",
	208: "UserTopicJob",
	209: "UserEventTopicPublished",
}
var Event_value = map[string]int32{
	"UserReadRequested":                  0,
	"UserUpdateRequested":                2,
	"UserCreateRequested":                3,
	"UserSearchRequested":                4,
	"UserEventCreateRequested":           5,
	"UserEventSearchRequested":           7,
	"UserTopicSearchRequested":           6,
	"UserSegmentationCreateRequested":    10,
	"UserSegmentationUpdateRequested":    11,
	"UserSegmentationDeleteRequested":    12,
	"UserSegmentationListRequested":      13,
	"UserSegmentationReadRequested":      14,
	"UserAddToMyListRequested":           20,
	"UserRemoveFromMyListRequested":      21,
	"UserEventTopicSubscribeRequested":   35,
	"UserEventTopicUnsubscribeRequested": 36,
	"UserReadTopicRequested":             41,
	"UserSubizId":                        42,
	"UserPresenceReadRequested":          44,
	"UserPreviewingReadRequested":        46,
	"UserListTopRequested":               47,
	"UserAutomationUpsertRequested":      50,
	"UserAutomationDeleteRequested":      51,
	"UserAutomationListRequested":        52,
	"UserAutomationReadRequested":        53,
	"AutomationAgentNotificationFired":   54,
	"AutomationConversationMessageFired": 55,
	"UserSessionUpdateRequested":         65,
	"UserSessionCreateRequested":         66,
	"UserSessionReadRequested":           67,
	"SegmentationLoop":                   68,
	"AutomationSynced":                   102,
	"AutomationFired":                    103,
	"UserRequested":                      100,
	"UserCreated":                        70,
	"UserAttributeAdded":                 71,
	"UserUpdated":                        72,
	"UserSynced":                         101,
	"UserUpserted":                       105,
	"UserV3Synced":                       106,
	"UserJob":                            199,
	"UserResolvedJob":                    200,
	"UserResolvedEventCreated":           201,
	"UserAliasAdded":                     202,
	"UserAliasDeleted":                   203,
	"UserEventCreated":                   204,
	"UserAggregateUserCount":             205,
	"UserAggregateUserAttributeCount":    206,
	"UserAggregated":                     207,
	"UserTopicJob":                       208,
	"UserEventTopicPublished":            209,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JoinOperator int32

const (
	JoinOperator_none JoinOperator = 0
	JoinOperator_and  JoinOperator = 1
	JoinOperator_or   JoinOperator = 2
)

var JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}
var JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x JoinOperator) Enum() *JoinOperator {
	p := new(JoinOperator)
	*p = x
	return p
}
func (x JoinOperator) String() string {
	return proto.EnumName(JoinOperator_name, int32(x))
}
func (x *JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinOperator_value, data, "JoinOperator")
	if err != nil {
		return err
	}
	*x = JoinOperator(value)
	return nil
}
func (JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConditionType int32

const (
	ConditionType_attribute ConditionType = 0
	ConditionType_event     ConditionType = 1
)

var ConditionType_name = map[int32]string{
	0: "attribute",
	1: "event",
}
var ConditionType_value = map[string]int32{
	"attribute": 0,
	"event":     1,
}

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}
func (x ConditionType) String() string {
	return proto.EnumName(ConditionType_name, int32(x))
}
func (x *ConditionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConditionType_value, data, "ConditionType")
	if err != nil {
		return err
	}
	*x = ConditionType(value)
	return nil
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AutomationScope int32

const (
	AutomationScope_conversation AutomationScope = 2
	AutomationScope_user         AutomationScope = 3
)

var AutomationScope_name = map[int32]string{
	2: "conversation",
	3: "user",
}
var AutomationScope_value = map[string]int32{
	"conversation": 2,
	"user":         3,
}

func (x AutomationScope) Enum() *AutomationScope {
	p := new(AutomationScope)
	*p = x
	return p
}
func (x AutomationScope) String() string {
	return proto.EnumName(AutomationScope_name, int32(x))
}
func (x *AutomationScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AutomationScope_value, data, "AutomationScope")
	if err != nil {
		return err
	}
	*x = AutomationScope(value)
	return nil
}
func (AutomationScope) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Segmentation_State int32

const (
	Segmentation_active   Segmentation_State = 0
	Segmentation_inactive Segmentation_State = 1
)

var Segmentation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Segmentation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Segmentation_State) Enum() *Segmentation_State {
	p := new(Segmentation_State)
	*p = x
	return p
}
func (x Segmentation_State) String() string {
	return proto.EnumName(Segmentation_State_name, int32(x))
}
func (x *Segmentation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Segmentation_State_value, data, "Segmentation_State")
	if err != nil {
		return err
	}
	*x = Segmentation_State(value)
	return nil
}
func (Segmentation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{26, 0} }

type Condition_JoinOperator int32

const (
	Condition_none Condition_JoinOperator = 0
	Condition_and  Condition_JoinOperator = 1
	Condition_or   Condition_JoinOperator = 2
)

var Condition_JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}
var Condition_JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x Condition_JoinOperator) Enum() *Condition_JoinOperator {
	p := new(Condition_JoinOperator)
	*p = x
	return p
}
func (x Condition_JoinOperator) String() string {
	return proto.EnumName(Condition_JoinOperator_name, int32(x))
}
func (x *Condition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Condition_JoinOperator_value, data, "Condition_JoinOperator")
	if err != nil {
		return err
	}
	*x = Condition_JoinOperator(value)
	return nil
}
func (Condition_JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 0} }

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

var Automation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Automation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}
func (x Automation_State) String() string {
	return proto.EnumName(Automation_State_name, int32(x))
}
func (x *Automation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_State_value, data, "Automation_State")
	if err != nil {
		return err
	}
	*x = Automation_State(value)
	return nil
}
func (Automation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{44, 0} }

type Automation_ActionType int32

const (
	Automation_conversation_message Automation_ActionType = 0
	Automation_agent_notification   Automation_ActionType = 1
)

var Automation_ActionType_name = map[int32]string{
	0: "conversation_message",
	1: "agent_notification",
}
var Automation_ActionType_value = map[string]int32{
	"conversation_message": 0,
	"agent_notification":   1,
}

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}
func (x Automation_ActionType) String() string {
	return proto.EnumName(Automation_ActionType_name, int32(x))
}
func (x *Automation_ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_ActionType_value, data, "Automation_ActionType")
	if err != nil {
		return err
	}
	*x = Automation_ActionType(value)
	return nil
}
func (Automation_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{44, 1} }

type Session_Platform int32

const (
	Session_web     Session_Platform = 0
	Session_mobile  Session_Platform = 2
	Session_desktop Session_Platform = 4
)

var Session_Platform_name = map[int32]string{
	0: "web",
	2: "mobile",
	4: "desktop",
}
var Session_Platform_value = map[string]int32{
	"web":     0,
	"mobile":  2,
	"desktop": 4,
}

func (x Session_Platform) Enum() *Session_Platform {
	p := new(Session_Platform)
	*p = x
	return p
}
func (x Session_Platform) String() string {
	return proto.EnumName(Session_Platform_name, int32(x))
}
func (x *Session_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Platform_value, data, "Session_Platform")
	if err != nil {
		return err
	}
	*x = Session_Platform(value)
	return nil
}
func (Session_Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{46, 0} }

type Session_Status int32

const (
	Session_open   Session_Status = 0
	Session_closed Session_Status = 1
)

var Session_Status_name = map[int32]string{
	0: "open",
	1: "closed",
}
var Session_Status_value = map[string]int32{
	"open":   0,
	"closed": 1,
}

func (x Session_Status) Enum() *Session_Status {
	p := new(Session_Status)
	*p = x
	return p
}
func (x Session_Status) String() string {
	return proto.EnumName(Session_Status_name, int32(x))
}
func (x *Session_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Status_value, data, "Session_Status")
	if err != nil {
		return err
	}
	*x = Session_Status(value)
	return nil
}
func (Session_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{46, 1} }

type CountMyUserRequest_Range int32

const (
	CountMyUserRequest_hour CountMyUserRequest_Range = 0
	CountMyUserRequest_day  CountMyUserRequest_Range = 1
)

var CountMyUserRequest_Range_name = map[int32]string{
	0: "hour",
	1: "day",
}
var CountMyUserRequest_Range_value = map[string]int32{
	"hour": 0,
	"day":  1,
}

func (x CountMyUserRequest_Range) Enum() *CountMyUserRequest_Range {
	p := new(CountMyUserRequest_Range)
	*p = x
	return p
}
func (x CountMyUserRequest_Range) String() string {
	return proto.EnumName(CountMyUserRequest_Range_name, int32(x))
}
func (x *CountMyUserRequest_Range) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CountMyUserRequest_Range_value, data, "CountMyUserRequest_Range")
	if err != nil {
		return err
	}
	*x = CountMyUserRequest_Range(value)
	return nil
}
func (CountMyUserRequest_Range) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{48, 0} }

type CountUserRequest_Range int32

const (
	CountUserRequest_hour CountUserRequest_Range = 0
	CountUserRequest_day  CountUserRequest_Range = 1
)

var CountUserRequest_Range_name = map[int32]string{
	0: "hour",
	1: "day",
}
var CountUserRequest_Range_value = map[string]int32{
	"hour": 0,
	"day":  1,
}

func (x CountUserRequest_Range) Enum() *CountUserRequest_Range {
	p := new(CountUserRequest_Range)
	*p = x
	return p
}
func (x CountUserRequest_Range) String() string {
	return proto.EnumName(CountUserRequest_Range_name, int32(x))
}
func (x *CountUserRequest_Range) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CountUserRequest_Range_value, data, "CountUserRequest_Range")
	if err != nil {
		return err
	}
	*x = CountUserRequest_Range(value)
	return nil
}
func (CountUserRequest_Range) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{49, 0} }

type CountUserByAttributeRequest_Range int32

const (
	CountUserByAttributeRequest_hour CountUserByAttributeRequest_Range = 0
	CountUserByAttributeRequest_day  CountUserByAttributeRequest_Range = 1
)

var CountUserByAttributeRequest_Range_name = map[int32]string{
	0: "hour",
	1: "day",
}
var CountUserByAttributeRequest_Range_value = map[string]int32{
	"hour": 0,
	"day":  1,
}

func (x CountUserByAttributeRequest_Range) Enum() *CountUserByAttributeRequest_Range {
	p := new(CountUserByAttributeRequest_Range)
	*p = x
	return p
}
func (x CountUserByAttributeRequest_Range) String() string {
	return proto.EnumName(CountUserByAttributeRequest_Range_name, int32(x))
}
func (x *CountUserByAttributeRequest_Range) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CountUserByAttributeRequest_Range_value, data, "CountUserByAttributeRequest_Range")
	if err != nil {
		return err
	}
	*x = CountUserByAttributeRequest_Range(value)
	return nil
}
func (CountUserByAttributeRequest_Range) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 0}
}

type SCondition_EventTime int32

const (
	SCondition_none    SCondition_EventTime = 0
	SCondition_current SCondition_EventTime = 1
	SCondition_latest  SCondition_EventTime = 2
	SCondition_past    SCondition_EventTime = 3
)

var SCondition_EventTime_name = map[int32]string{
	0: "none",
	1: "current",
	2: "latest",
	3: "past",
}
var SCondition_EventTime_value = map[string]int32{
	"none":    0,
	"current": 1,
	"latest":  2,
	"past":    3,
}

func (x SCondition_EventTime) Enum() *SCondition_EventTime {
	p := new(SCondition_EventTime)
	*p = x
	return p
}
func (x SCondition_EventTime) String() string {
	return proto.EnumName(SCondition_EventTime_name, int32(x))
}
func (x *SCondition_EventTime) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SCondition_EventTime_value, data, "SCondition_EventTime")
	if err != nil {
		return err
	}
	*x = SCondition_EventTime(value)
	return nil
}
func (SCondition_EventTime) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 0} }

type SCondition_JoinOperator int32

const (
	SCondition_and SCondition_JoinOperator = 0
	SCondition_or  SCondition_JoinOperator = 1
)

var SCondition_JoinOperator_name = map[int32]string{
	0: "and",
	1: "or",
}
var SCondition_JoinOperator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SCondition_JoinOperator) Enum() *SCondition_JoinOperator {
	p := new(SCondition_JoinOperator)
	*p = x
	return p
}
func (x SCondition_JoinOperator) String() string {
	return proto.EnumName(SCondition_JoinOperator_name, int32(x))
}
func (x *SCondition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SCondition_JoinOperator_value, data, "SCondition_JoinOperator")
	if err != nil {
		return err
	}
	*x = SCondition_JoinOperator(value)
	return nil
}
func (SCondition_JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 1} }

type AddToMyRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds         []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyRequest) Reset()                    { *m = AddToMyRequest{} }
func (m *AddToMyRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToMyRequest) ProtoMessage()               {}
func (*AddToMyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddToMyRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AddToMyRequest) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *AddToMyRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MyAgents struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds         []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	Updated          *int64          `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MyAgents) Reset()                    { *m = MyAgents{} }
func (m *MyAgents) String() string            { return proto.CompactTextString(m) }
func (*MyAgents) ProtoMessage()               {}
func (*MyAgents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MyAgents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyAgents) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MyAgents) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MyAgents) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *MyAgents) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type UserCreateResult struct {
	Id               *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserCreateResult) Reset()                    { *m = UserCreateResult{} }
func (m *UserCreateResult) String() string            { return proto.CompactTextString(m) }
func (*UserCreateResult) ProtoMessage()               {}
func (*UserCreateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserCreateResult) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserCreateResult) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type MyUser struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	User             *User           `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Unread           *int32          `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
	Updated          *int64          `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	AccountId        *string         `protobuf:"bytes,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MyUser) Reset()                    { *m = MyUser{} }
func (m *MyUser) String() string            { return proto.CompactTextString(m) }
func (*MyUser) ProtoMessage()               {}
func (*MyUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MyUser) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyUser) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *MyUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MyUser) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

func (m *MyUser) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *MyUser) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type AttributeDefinition struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name             *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description      *string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Type             *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ListItems        []string        `protobuf:"bytes,6,rep,name=list_items,json=listItems" json:"list_items,omitempty"`
	Key              *string         `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	Kind             *string         `protobuf:"bytes,8,opt,name=kind" json:"kind,omitempty"`
	Updated          *int64          `protobuf:"varint,9,opt,name=updated" json:"updated,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AttributeDefinition) Reset()                    { *m = AttributeDefinition{} }
func (m *AttributeDefinition) String() string            { return proto.CompactTextString(m) }
func (*AttributeDefinition) ProtoMessage()               {}
func (*AttributeDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AttributeDefinition) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeDefinition) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AttributeDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AttributeDefinition) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AttributeDefinition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *AttributeDefinition) GetListItems() []string {
	if m != nil {
		return m.ListItems
	}
	return nil
}

func (m *AttributeDefinition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AttributeDefinition) GetKind() string {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ""
}

func (m *AttributeDefinition) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type AttributeDefinitions struct {
	Ctx              *common.Context        `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Attributes       []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *AttributeDefinitions) Reset()                    { *m = AttributeDefinitions{} }
func (m *AttributeDefinitions) String() string            { return proto.CompactTextString(m) }
func (*AttributeDefinitions) ProtoMessage()               {}
func (*AttributeDefinitions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AttributeDefinitions) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeDefinitions) GetAttributes() []*AttributeDefinition {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type AttributeData struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Key              *string         `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	State            *string         `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Created          *int64          `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Modified         *int64          `protobuf:"varint,8,opt,name=modified" json:"modified,omitempty"`
	Text             *string         `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	Number           *float64        `protobuf:"fixed64,11,opt,name=number" json:"number,omitempty"`
	Boolean          *bool           `protobuf:"varint,12,opt,name=boolean" json:"boolean,omitempty"`
	Datetime         *string         `protobuf:"bytes,13,opt,name=datetime" json:"datetime,omitempty"`
	List             []string        `protobuf:"bytes,14,rep,name=list" json:"list,omitempty"`
	Setter           *string         `protobuf:"bytes,16,opt,name=setter" json:"setter,omitempty"`
	SetterType       *string         `protobuf:"bytes,17,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AttributeData) Reset()                    { *m = AttributeData{} }
func (m *AttributeData) String() string            { return proto.CompactTextString(m) }
func (*AttributeData) ProtoMessage()               {}
func (*AttributeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AttributeData) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeData) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AttributeData) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AttributeData) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AttributeData) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *AttributeData) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *AttributeData) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *AttributeData) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *AttributeData) GetNumber() float64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *AttributeData) GetBoolean() bool {
	if m != nil && m.Boolean != nil {
		return *m.Boolean
	}
	return false
}

func (m *AttributeData) GetDatetime() string {
	if m != nil && m.Datetime != nil {
		return *m.Datetime
	}
	return ""
}

func (m *AttributeData) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AttributeData) GetSetter() string {
	if m != nil && m.Setter != nil {
		return *m.Setter
	}
	return ""
}

func (m *AttributeData) GetSetterType() string {
	if m != nil && m.SetterType != nil {
		return *m.SetterType
	}
	return ""
}

type User struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Traces    []*Trace        `protobuf:"bytes,11,rep,name=traces" json:"traces,omitempty"`
	// 	repeated string alias = 12;
	IsBan      *bool            `protobuf:"varint,14,opt,name=is_ban,json=isBan" json:"is_ban,omitempty"`
	Attributes []*AttributeData `protobuf:"bytes,18,rep,name=attributes" json:"attributes,omitempty"`
	Segments   []string         `protobuf:"bytes,19,rep,name=segments" json:"segments,omitempty"`
	SubizId    *string          `protobuf:"bytes,25,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	Aliases    []string         `protobuf:"bytes,30,rep,name=aliases" json:"aliases,omitempty"`
	Par        *int32           `protobuf:"varint,34,opt,name=par" json:"par,omitempty"`
	// optional int32 modified_hour = 35;
	Modified         *int64 `protobuf:"varint,36,opt,name=modified" json:"modified,omitempty"`
	ModifiedWeek     *int32 `protobuf:"varint,37,opt,name=modified_week,json=modifiedWeek" json:"modified_week,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *User) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *User) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *User) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *User) GetIsBan() bool {
	if m != nil && m.IsBan != nil {
		return *m.IsBan
	}
	return false
}

func (m *User) GetAttributes() []*AttributeData {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *User) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *User) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *User) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *User) GetPar() int32 {
	if m != nil && m.Par != nil {
		return *m.Par
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *User) GetModifiedWeek() int32 {
	if m != nil && m.ModifiedWeek != nil {
		return *m.ModifiedWeek
	}
	return 0
}

type Users struct {
	Users            []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Device struct {
	Id               *int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	UseragentId      *int32  `protobuf:"varint,4,opt,name=useragent_id,json=useragentId" json:"useragent_id,omitempty"`
	Useragent        *string `protobuf:"bytes,5,opt,name=useragent" json:"useragent,omitempty"`
	ScreenResolution *string `protobuf:"bytes,6,opt,name=screen_resolution,json=screenResolution" json:"screen_resolution,omitempty"`
	LanguageId       *int32  `protobuf:"varint,7,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	Language         *string `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Device) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Device) GetUseragentId() int32 {
	if m != nil && m.UseragentId != nil {
		return *m.UseragentId
	}
	return 0
}

func (m *Device) GetUseragent() string {
	if m != nil && m.Useragent != nil {
		return *m.Useragent
	}
	return ""
}

func (m *Device) GetScreenResolution() string {
	if m != nil && m.ScreenResolution != nil {
		return *m.ScreenResolution
	}
	return ""
}

func (m *Device) GetLanguageId() int32 {
	if m != nil && m.LanguageId != nil {
		return *m.LanguageId
	}
	return 0
}

func (m *Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

type Traces struct {
	Traces           []*Trace `protobuf:"bytes,3,rep,name=traces" json:"traces,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Traces) Reset()                    { *m = Traces{} }
func (m *Traces) String() string            { return proto.CompactTextString(m) }
func (*Traces) ProtoMessage()               {}
func (*Traces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Traces) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type Trace struct {
	Id            *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Ip            *string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	LocationId    *int32  `protobuf:"varint,5,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CityName      *string `protobuf:"bytes,8,opt,name=city_name,json=cityName" json:"city_name,omitempty"`
	CountryName   *string `protobuf:"bytes,9,opt,name=country_name,json=countryName" json:"country_name,omitempty"`
	CountryCode   *string `protobuf:"bytes,19,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	ContinentCode *string `protobuf:"bytes,10,opt,name=continent_code,json=continentCode" json:"continent_code,omitempty"`
	ContinentName *string `protobuf:"bytes,18,opt,name=continent_name,json=continentName" json:"continent_name,omitempty"`
	// optional string coutry_code = 11;
	Latitude         *float32 `protobuf:"fixed32,12,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *float32 `protobuf:"fixed32,13,opt,name=longitude" json:"longitude,omitempty"`
	PostalCode       *string  `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	Timezone         *string  `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	Isp              *string  `protobuf:"bytes,17,opt,name=isp" json:"isp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Trace) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Trace) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Trace) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *Trace) GetCityName() string {
	if m != nil && m.CityName != nil {
		return *m.CityName
	}
	return ""
}

func (m *Trace) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *Trace) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *Trace) GetContinentCode() string {
	if m != nil && m.ContinentCode != nil {
		return *m.ContinentCode
	}
	return ""
}

func (m *Trace) GetContinentName() string {
	if m != nil && m.ContinentName != nil {
		return *m.ContinentName
	}
	return ""
}

func (m *Trace) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Trace) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Trace) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *Trace) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Trace) GetIsp() string {
	if m != nil && m.Isp != nil {
		return *m.Isp
	}
	return ""
}

type MergeRequest struct {
	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId         *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DestinationUserId *string         `protobuf:"bytes,5,opt,name=destination_user_id,json=destinationUserId" json:"destination_user_id,omitempty"`
	SourceUserId      *string         `protobuf:"bytes,4,opt,name=source_user_id,json=sourceUserId" json:"source_user_id,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MergeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MergeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MergeRequest) GetDestinationUserId() string {
	if m != nil && m.DestinationUserId != nil {
		return *m.DestinationUserId
	}
	return ""
}

func (m *MergeRequest) GetSourceUserId() string {
	if m != nil && m.SourceUserId != nil {
		return *m.SourceUserId
	}
	return ""
}

type CreateRequest struct {
	ChallengeId      *string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Answer           *string `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateRequest) GetChallengeId() string {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return ""
}

func (m *CreateRequest) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

type Topic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	Type             *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Topic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Topic) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Topic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Topic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Topic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Topic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type UnreadTopic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type             *string         `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UnreadTopic) Reset()                    { *m = UnreadTopic{} }
func (m *UnreadTopic) String() string            { return proto.CompactTextString(m) }
func (*UnreadTopic) ProtoMessage()               {}
func (*UnreadTopic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UnreadTopic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnreadTopic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *UnreadTopic) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UnreadTopic) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UnreadTopic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *UnreadTopic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *UnreadTopic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type ReadTopicRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ReadTopicRequest) Reset()                    { *m = ReadTopicRequest{} }
func (m *ReadTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadTopicRequest) ProtoMessage()               {}
func (*ReadTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReadTopicRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ReadTopicRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ReadTopicRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *ReadTopicRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ReadTopicRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type SubscribeRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Topics           []string        `protobuf:"bytes,4,rep,name=topics" json:"topics,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SubscribeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscribeRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type AggregateUserCount struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Min              *int64          `protobuf:"varint,3,opt,name=min" json:"min,omitempty"`
	Count            *int64          `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Created          *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AggregateUserCount) Reset()                    { *m = AggregateUserCount{} }
func (m *AggregateUserCount) String() string            { return proto.CompactTextString(m) }
func (*AggregateUserCount) ProtoMessage()               {}
func (*AggregateUserCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AggregateUserCount) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AggregateUserCount) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AggregateUserCount) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *AggregateUserCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *AggregateUserCount) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type AggregateUserAttributeCount struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Min              *int64          `protobuf:"varint,3,opt,name=min" json:"min,omitempty"`
	AttributeKey     *string         `protobuf:"bytes,4,opt,name=attribute_key,json=attributeKey" json:"attribute_key,omitempty"`
	Count            *int64          `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Created          *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AggregateUserAttributeCount) Reset()                    { *m = AggregateUserAttributeCount{} }
func (m *AggregateUserAttributeCount) String() string            { return proto.CompactTextString(m) }
func (*AggregateUserAttributeCount) ProtoMessage()               {}
func (*AggregateUserAttributeCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AggregateUserAttributeCount) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AggregateUserAttributeCount) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AggregateUserAttributeCount) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *AggregateUserAttributeCount) GetAttributeKey() string {
	if m != nil && m.AttributeKey != nil {
		return *m.AttributeKey
	}
	return ""
}

func (m *AggregateUserAttributeCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *AggregateUserAttributeCount) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type SubizIDRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDRequest) Reset()                    { *m = SubizIDRequest{} }
func (m *SubizIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SubizIDRequest) ProtoMessage()               {}
func (*SubizIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SubizIDRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDRequest) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MaskResponse struct {
	SubizId          *string `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MaskResponse) Reset()                    { *m = MaskResponse{} }
func (m *MaskResponse) String() string            { return proto.CompactTextString(m) }
func (*MaskResponse) ProtoMessage()               {}
func (*MaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MaskResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *MaskResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MaskResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MaskResponse) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type SubizIDResponse struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDResponse) Reset()                    { *m = SubizIDResponse{} }
func (m *SubizIDResponse) String() string            { return proto.CompactTextString(m) }
func (*SubizIDResponse) ProtoMessage()               {}
func (*SubizIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SubizIDResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubizIDResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Segmentations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Segmentations    []*Segmentation `protobuf:"bytes,3,rep,name=segmentations" json:"segmentations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Segmentations) Reset()                    { *m = Segmentations{} }
func (m *Segmentations) String() string            { return proto.CompactTextString(m) }
func (*Segmentations) ProtoMessage()               {}
func (*Segmentations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Segmentations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentations) GetSegmentations() []*Segmentation {
	if m != nil {
		return m.Segmentations
	}
	return nil
}

type SegmentLoopState struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserPar          *int32          `protobuf:"varint,3,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,6,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,7,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentLoopState) Reset()                    { *m = SegmentLoopState{} }
func (m *SegmentLoopState) String() string            { return proto.CompactTextString(m) }
func (*SegmentLoopState) ProtoMessage()               {}
func (*SegmentLoopState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SegmentLoopState) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentLoopState) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentLoopState) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentLoopState) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentLoopState) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type UserSegmentCache struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ConditionId      *string         `protobuf:"bytes,4,opt,name=condition_id,json=conditionId" json:"condition_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSegmentCache) Reset()                    { *m = UserSegmentCache{} }
func (m *UserSegmentCache) String() string            { return proto.CompactTextString(m) }
func (*UserSegmentCache) ProtoMessage()               {}
func (*UserSegmentCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UserSegmentCache) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSegmentCache) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSegmentCache) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserSegmentCache) GetConditionId() string {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return ""
}

type Segmentation struct {
	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Name        *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	UserCount   *int64          `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	// repeated Condition conditions = 6;
	// repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	Ran              *int64              `protobuf:"varint,8,opt,name=ran" json:"ran,omitempty"`
	StartedFrom      *int64              `protobuf:"varint,7,opt,name=started_from,json=startedFrom" json:"started_from,omitempty"`
	Created          *int64              `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64              `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string             `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	Condition        []*SegmentCondition `protobuf:"bytes,19,rep,name=condition" json:"condition,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Segmentation) Reset()                    { *m = Segmentation{} }
func (m *Segmentation) String() string            { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()               {}
func (*Segmentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Segmentation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Segmentation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *Segmentation) GetRan() int64 {
	if m != nil && m.Ran != nil {
		return *m.Ran
	}
	return 0
}

func (m *Segmentation) GetStartedFrom() int64 {
	if m != nil && m.StartedFrom != nil {
		return *m.StartedFrom
	}
	return 0
}

func (m *Segmentation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Segmentation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Segmentation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Segmentation) GetCondition() []*SegmentCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type SegmentTracking struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserPar          *int32          `protobuf:"varint,2,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,7,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,8,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentTracking) Reset()                    { *m = SegmentTracking{} }
func (m *SegmentTracking) String() string            { return proto.CompactTextString(m) }
func (*SegmentTracking) ProtoMessage()               {}
func (*SegmentTracking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SegmentTracking) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentTracking) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentTracking) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentTracking) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentTracking) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type Condition struct {
	Join             *string `protobuf:"bytes,1,opt,name=join" json:"join,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Operator         *string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	Value            *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Id               *string `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Condition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *Condition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Condition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Condition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type SegmentCondition struct {
	Id                 *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Type               *string         `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Join               *string         `protobuf:"bytes,4,opt,name=join" json:"join,omitempty"`
	AttributeCondition *Condition      `protobuf:"bytes,5,opt,name=attribute_condition,json=attributeCondition" json:"attribute_condition,omitempty"`
	EventCondition     *EventCondition `protobuf:"bytes,6,opt,name=event_condition,json=eventCondition" json:"event_condition,omitempty"`
	XXX_unrecognized   []byte          `json:"-"`
}

func (m *SegmentCondition) Reset()                    { *m = SegmentCondition{} }
func (m *SegmentCondition) String() string            { return proto.CompactTextString(m) }
func (*SegmentCondition) ProtoMessage()               {}
func (*SegmentCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SegmentCondition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SegmentCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *SegmentCondition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *SegmentCondition) GetAttributeCondition() *Condition {
	if m != nil {
		return m.AttributeCondition
	}
	return nil
}

func (m *SegmentCondition) GetEventCondition() *EventCondition {
	if m != nil {
		return m.EventCondition
	}
	return nil
}

// eg: has event.type='content_view' & event.data.content.url contains 'abc';
// eg: not has event.type='content_view'
type EventCondition struct {
	Id               *string      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Has              *bool        `protobuf:"varint,3,opt,name=has" json:"has,omitempty"`
	Conditions       []*Condition `protobuf:"bytes,5,rep,name=conditions" json:"conditions,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *EventCondition) Reset()                    { *m = EventCondition{} }
func (m *EventCondition) String() string            { return proto.CompactTextString(m) }
func (*EventCondition) ProtoMessage()               {}
func (*EventCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *EventCondition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *EventCondition) GetHas() bool {
	if m != nil && m.Has != nil {
		return *m.Has
	}
	return false
}

func (m *EventCondition) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type UserSearchResult struct {
	Ctx              *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Total            *int64           `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Users            []*User          `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Anchor           *string          `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Unreads          []int32          `protobuf:"varint,6,rep,name=unreads" json:"unreads,omitempty"`
	UnreadCounts     map[string]int32 `protobuf:"bytes,7,rep,name=unread_counts,json=unreadCounts" json:"unread_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *UserSearchResult) Reset()                    { *m = UserSearchResult{} }
func (m *UserSearchResult) String() string            { return proto.CompactTextString(m) }
func (*UserSearchResult) ProtoMessage()               {}
func (*UserSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UserSearchResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchResult) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *UserSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserSearchResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchResult) GetUnreads() []int32 {
	if m != nil {
		return m.Unreads
	}
	return nil
}

func (m *UserSearchResult) GetUnreadCounts() map[string]int32 {
	if m != nil {
		return m.UnreadCounts
	}
	return nil
}

type UserSearchRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SegmentationId   *string         `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Query            *string         `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	AgentId          *string         `protobuf:"bytes,8,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Unread           *bool           `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSearchRequest) Reset()                    { *m = UserSearchRequest{} }
func (m *UserSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserSearchRequest) ProtoMessage()               {}
func (*UserSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *UserSearchRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *UserSearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *UserSearchRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *UserSearchRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UserSearchRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type IndexEvent struct {
	Id               *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Created          *int64   `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Category         *string  `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Topics           []string `protobuf:"bytes,8,rep,name=topics" json:"topics,omitempty"`
	Object           *string  `protobuf:"bytes,9,opt,name=object" json:"object,omitempty"`
	Text             *string  `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IndexEvent) Reset()                    { *m = IndexEvent{} }
func (m *IndexEvent) String() string            { return proto.CompactTextString(m) }
func (*IndexEvent) ProtoMessage()               {}
func (*IndexEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *IndexEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *IndexEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *IndexEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *IndexEvent) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *IndexEvent) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *IndexEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *IndexEvent) GetObject() string {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return ""
}

func (m *IndexEvent) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ListTopicsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Anchor           *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Unread           *bool           `protobuf:"varint,8,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsRequest) Reset()                    { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()               {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ListTopicsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListTopicsRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *ListTopicsRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *ListTopicsRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *ListTopicsRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type ListTopicsResult struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topics           []*Topic        `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsResult) Reset()                    { *m = ListTopicsResult{} }
func (m *ListTopicsResult) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsResult) ProtoMessage()               {}
func (*ListTopicsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ListTopicsResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsResult) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ListTopicsResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

type ListNewsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	StartTime        *int64          `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Limit            *string         `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListNewsRequest) Reset()                    { *m = ListNewsRequest{} }
func (m *ListNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNewsRequest) ProtoMessage()               {}
func (*ListNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ListNewsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListNewsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListNewsRequest) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ListNewsRequest) GetLimit() string {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return ""
}

type AddToMyList struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyList) Reset()                    { *m = AddToMyList{} }
func (m *AddToMyList) String() string            { return proto.CompactTextString(m) }
func (*AddToMyList) ProtoMessage()               {}
func (*AddToMyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AddToMyList) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyList) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AddToMyList) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Field struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Setter           *string `protobuf:"bytes,5,opt,name=setter" json:"setter,omitempty"`
	SetterType       *string `protobuf:"bytes,6,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
	Updated          *int64  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Data             *string `protobuf:"bytes,9,opt,name=data" json:"data,omitempty"`
	Id               *string `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Field) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Field) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Field) GetSetter() string {
	if m != nil && m.Setter != nil {
		return *m.Setter
	}
	return ""
}

func (m *Field) GetSetterType() string {
	if m != nil && m.SetterType != nil {
		return *m.SetterType
	}
	return ""
}

func (m *Field) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Field) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Field) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Presence struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PingedMinute     *int64          `protobuf:"varint,6,opt,name=pinged_minute,json=pingedMinute" json:"pinged_minute,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Presence) Reset()                    { *m = Presence{} }
func (m *Presence) String() string            { return proto.CompactTextString(m) }
func (*Presence) ProtoMessage()               {}
func (*Presence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Presence) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Presence) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Presence) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Presence) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Presence) GetPingedMinute() int64 {
	if m != nil && m.PingedMinute != nil {
		return *m.PingedMinute
	}
	return 0
}

type Presences struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Presences        []*Presence     `protobuf:"bytes,2,rep,name=presences" json:"presences,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Presences) Reset()                    { *m = Presences{} }
func (m *Presences) String() string            { return proto.CompactTextString(m) }
func (*Presences) ProtoMessage()               {}
func (*Presences) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Presences) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Presences) GetPresences() []*Presence {
	if m != nil {
		return m.Presences
	}
	return nil
}

type Visitor struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User             *User           `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PageUrl          *string         `protobuf:"bytes,6,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	PageViewed       *int64          `protobuf:"varint,7,opt,name=page_viewed,json=pageViewed" json:"page_viewed,omitempty"`
	PageTitle        *string         `protobuf:"bytes,8,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitor) Reset()                    { *m = Visitor{} }
func (m *Visitor) String() string            { return proto.CompactTextString(m) }
func (*Visitor) ProtoMessage()               {}
func (*Visitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Visitor) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitor) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Visitor) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Visitor) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Visitor) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Visitor) GetPageViewed() int64 {
	if m != nil && m.PageViewed != nil {
		return *m.PageViewed
	}
	return 0
}

func (m *Visitor) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitors struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Visitors         []*Visitor      `protobuf:"bytes,2,rep,name=visitors" json:"visitors,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitors) Reset()                    { *m = Visitors{} }
func (m *Visitors) String() string            { return proto.CompactTextString(m) }
func (*Visitors) ProtoMessage()               {}
func (*Visitors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Visitors) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitors) GetVisitors() []*Visitor {
	if m != nil {
		return m.Visitors
	}
	return nil
}

type LastView struct {
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url              *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Ua               *string `protobuf:"bytes,6,opt,name=ua" json:"ua,omitempty"`
	Ip               *string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Created          *int64  `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	EventId          *string `protobuf:"bytes,9,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Title            *string `protobuf:"bytes,10,opt,name=title" json:"title,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LastView) Reset()                    { *m = LastView{} }
func (m *LastView) String() string            { return proto.CompactTextString(m) }
func (*LastView) ProtoMessage()               {}
func (*LastView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *LastView) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *LastView) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *LastView) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *LastView) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *LastView) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LastView) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *LastView) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *LastView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

type Automation struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Channel          *string         `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Name             *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description      *string         `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Conditions       []*Condition    `protobuf:"bytes,7,rep,name=conditions" json:"conditions,omitempty"`
	Condition        *SCondition     `protobuf:"bytes,8,opt,name=condition" json:"condition,omitempty"`
	Created          *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string         `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	ActionType       *string         `protobuf:"bytes,13,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	ActionData       *string         `protobuf:"bytes,14,opt,name=action_data,json=actionData" json:"action_data,omitempty"`
	Scope            *string         `protobuf:"bytes,15,opt,name=scope" json:"scope,omitempty"`
	CrossChannel     *bool           `protobuf:"varint,16,opt,name=cross_channel,json=crossChannel" json:"cross_channel,omitempty"`
	Metadata         *string         `protobuf:"bytes,17,opt,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automation) Reset()                    { *m = Automation{} }
func (m *Automation) String() string            { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()               {}
func (*Automation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *Automation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Automation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Automation) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Automation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Automation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Automation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Automation) GetCondition() *SCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Automation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Automation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Automation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Automation) GetActionType() string {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ""
}

func (m *Automation) GetActionData() string {
	if m != nil && m.ActionData != nil {
		return *m.ActionData
	}
	return ""
}

func (m *Automation) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *Automation) GetCrossChannel() bool {
	if m != nil && m.CrossChannel != nil {
		return *m.CrossChannel
	}
	return false
}

func (m *Automation) GetMetadata() string {
	if m != nil && m.Metadata != nil {
		return *m.Metadata
	}
	return ""
}

type Automations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Automations      []*Automation   `protobuf:"bytes,2,rep,name=automations" json:"automations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automations) Reset()                    { *m = Automations{} }
func (m *Automations) String() string            { return proto.CompactTextString(m) }
func (*Automations) ProtoMessage()               {}
func (*Automations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *Automations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automations) GetAutomations() []*Automation {
	if m != nil {
		return m.Automations
	}
	return nil
}

type Session struct {
	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId         *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId            *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Id                *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Platform          *string         `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	Referrer          *string         `protobuf:"bytes,8,opt,name=referrer" json:"referrer,omitempty"`
	SearchEngine      *string         `protobuf:"bytes,9,opt,name=search_engine,json=searchEngine" json:"search_engine,omitempty"`
	Started           *int64          `protobuf:"varint,10,opt,name=started" json:"started,omitempty"`
	Tracked           *int64          `protobuf:"varint,11,opt,name=tracked" json:"tracked,omitempty"`
	Status            *string         `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	EventsCount       *int32          `protobuf:"varint,13,opt,name=events_count,json=eventsCount" json:"events_count,omitempty"`
	ContentViewsCount *int32          `protobuf:"varint,14,opt,name=content_views_count,json=contentViewsCount" json:"content_views_count,omitempty"`
	SearchTerm        *string         `protobuf:"bytes,15,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *Session) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Session) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Session) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Session) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Session) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Session) GetReferrer() string {
	if m != nil && m.Referrer != nil {
		return *m.Referrer
	}
	return ""
}

func (m *Session) GetSearchEngine() string {
	if m != nil && m.SearchEngine != nil {
		return *m.SearchEngine
	}
	return ""
}

func (m *Session) GetStarted() int64 {
	if m != nil && m.Started != nil {
		return *m.Started
	}
	return 0
}

func (m *Session) GetTracked() int64 {
	if m != nil && m.Tracked != nil {
		return *m.Tracked
	}
	return 0
}

func (m *Session) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Session) GetEventsCount() int32 {
	if m != nil && m.EventsCount != nil {
		return *m.EventsCount
	}
	return 0
}

func (m *Session) GetContentViewsCount() int32 {
	if m != nil && m.ContentViewsCount != nil {
		return *m.ContentViewsCount
	}
	return 0
}

func (m *Session) GetSearchTerm() string {
	if m != nil && m.SearchTerm != nil {
		return *m.SearchTerm
	}
	return ""
}

type DeleteAttrRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key              *string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DeleteAttrRequest) Reset()                    { *m = DeleteAttrRequest{} }
func (m *DeleteAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAttrRequest) ProtoMessage()               {}
func (*DeleteAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteAttrRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *DeleteAttrRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type CountMyUserRequest struct {
	AgentId          *string `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	From             *int32  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To               *int32  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	Range            *string `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountMyUserRequest) Reset()                    { *m = CountMyUserRequest{} }
func (m *CountMyUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CountMyUserRequest) ProtoMessage()               {}
func (*CountMyUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CountMyUserRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *CountMyUserRequest) GetFrom() int32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *CountMyUserRequest) GetTo() int32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *CountMyUserRequest) GetRange() string {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return ""
}

type CountUserRequest struct {
	From             *int32  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To               *int32  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	Range            *string `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountUserRequest) Reset()                    { *m = CountUserRequest{} }
func (m *CountUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CountUserRequest) ProtoMessage()               {}
func (*CountUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CountUserRequest) GetFrom() int32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *CountUserRequest) GetTo() int32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *CountUserRequest) GetRange() string {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return ""
}

type CountUserByAttributeRequest struct {
	AttributeKey     *string `protobuf:"bytes,4,opt,name=attribute_key,json=attributeKey" json:"attribute_key,omitempty"`
	From             *int32  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To               *int32  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	Range            *string `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountUserByAttributeRequest) Reset()                    { *m = CountUserByAttributeRequest{} }
func (m *CountUserByAttributeRequest) String() string            { return proto.CompactTextString(m) }
func (*CountUserByAttributeRequest) ProtoMessage()               {}
func (*CountUserByAttributeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CountUserByAttributeRequest) GetAttributeKey() string {
	if m != nil && m.AttributeKey != nil {
		return *m.AttributeKey
	}
	return ""
}

func (m *CountUserByAttributeRequest) GetFrom() int32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *CountUserByAttributeRequest) GetTo() int32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *CountUserByAttributeRequest) GetRange() string {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return ""
}

type CountResponse struct {
	Data             []int32 `protobuf:"varint,3,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CountResponse) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type AutomationCheck struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AutomationId     *string `protobuf:"bytes,3,opt,name=automation_id,json=automationId" json:"automation_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EventId          *string `protobuf:"bytes,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Scope            *string `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AutomationCheck) Reset()                    { *m = AutomationCheck{} }
func (m *AutomationCheck) String() string            { return proto.CompactTextString(m) }
func (*AutomationCheck) ProtoMessage()               {}
func (*AutomationCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *AutomationCheck) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AutomationCheck) GetAutomationId() string {
	if m != nil && m.AutomationId != nil {
		return *m.AutomationId
	}
	return ""
}

func (m *AutomationCheck) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AutomationCheck) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *AutomationCheck) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
type SCondition struct {
	Id               *string       `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key              *string       `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator         *string       `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value            *string       `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Join             *string       `protobuf:"bytes,7,opt,name=join" json:"join,omitempty"`
	EventTypeTime    *string       `protobuf:"bytes,8,opt,name=event_type_time,json=eventTypeTime" json:"event_type_time,omitempty"`
	EventType        *string       `protobuf:"bytes,10,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Conditions       []*SCondition `protobuf:"bytes,9,rep,name=conditions" json:"conditions,omitempty"`
	Priority         *int32        `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SCondition) Reset()                    { *m = SCondition{} }
func (m *SCondition) String() string            { return proto.CompactTextString(m) }
func (*SCondition) ProtoMessage()               {}
func (*SCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *SCondition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SCondition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SCondition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SCondition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *SCondition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *SCondition) GetEventTypeTime() string {
	if m != nil && m.EventTypeTime != nil {
		return *m.EventTypeTime
	}
	return ""
}

func (m *SCondition) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *SCondition) GetConditions() []*SCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *SCondition) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

type Alias struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Alias            *string         `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Alias) Reset()                    { *m = Alias{} }
func (m *Alias) String() string            { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()               {}
func (*Alias) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Alias) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Alias) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Alias) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Alias) GetAlias() string {
	if m != nil && m.Alias != nil {
		return *m.Alias
	}
	return ""
}

type UserSegment struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SegmentationId   *string         `protobuf:"bytes,4,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Created          *int64          `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSegment) Reset()                    { *m = UserSegment{} }
func (m *UserSegment) String() string            { return proto.CompactTextString(m) }
func (*UserSegment) ProtoMessage()               {}
func (*UserSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *UserSegment) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSegment) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSegment) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserSegment) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *UserSegment) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func init() {
	proto.RegisterType((*AddToMyRequest)(nil), "user.AddToMyRequest")
	proto.RegisterType((*MyAgents)(nil), "user.MyAgents")
	proto.RegisterType((*UserCreateResult)(nil), "user.UserCreateResult")
	proto.RegisterType((*MyUser)(nil), "user.MyUser")
	proto.RegisterType((*AttributeDefinition)(nil), "user.AttributeDefinition")
	proto.RegisterType((*AttributeDefinitions)(nil), "user.AttributeDefinitions")
	proto.RegisterType((*AttributeData)(nil), "user.AttributeData")
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Users)(nil), "user.Users")
	proto.RegisterType((*Device)(nil), "user.Device")
	proto.RegisterType((*Traces)(nil), "user.Traces")
	proto.RegisterType((*Trace)(nil), "user.Trace")
	proto.RegisterType((*MergeRequest)(nil), "user.MergeRequest")
	proto.RegisterType((*CreateRequest)(nil), "user.CreateRequest")
	proto.RegisterType((*Topic)(nil), "user.Topic")
	proto.RegisterType((*UnreadTopic)(nil), "user.UnreadTopic")
	proto.RegisterType((*ReadTopicRequest)(nil), "user.ReadTopicRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "user.SubscribeRequest")
	proto.RegisterType((*AggregateUserCount)(nil), "user.AggregateUserCount")
	proto.RegisterType((*AggregateUserAttributeCount)(nil), "user.AggregateUserAttributeCount")
	proto.RegisterType((*SubizIDRequest)(nil), "user.SubizIDRequest")
	proto.RegisterType((*MaskResponse)(nil), "user.MaskResponse")
	proto.RegisterType((*SubizIDResponse)(nil), "user.SubizIDResponse")
	proto.RegisterType((*Segmentations)(nil), "user.Segmentations")
	proto.RegisterType((*SegmentLoopState)(nil), "user.SegmentLoopState")
	proto.RegisterType((*UserSegmentCache)(nil), "user.UserSegmentCache")
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*SegmentTracking)(nil), "user.SegmentTracking")
	proto.RegisterType((*Condition)(nil), "user.Condition")
	proto.RegisterType((*SegmentCondition)(nil), "user.SegmentCondition")
	proto.RegisterType((*EventCondition)(nil), "user.EventCondition")
	proto.RegisterType((*UserSearchResult)(nil), "user.UserSearchResult")
	proto.RegisterType((*UserSearchRequest)(nil), "user.UserSearchRequest")
	proto.RegisterType((*IndexEvent)(nil), "user.IndexEvent")
	proto.RegisterType((*ListTopicsRequest)(nil), "user.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResult)(nil), "user.ListTopicsResult")
	proto.RegisterType((*ListNewsRequest)(nil), "user.ListNewsRequest")
	proto.RegisterType((*AddToMyList)(nil), "user.AddToMyList")
	proto.RegisterType((*Field)(nil), "user.Field")
	proto.RegisterType((*Presence)(nil), "user.Presence")
	proto.RegisterType((*Presences)(nil), "user.Presences")
	proto.RegisterType((*Visitor)(nil), "user.Visitor")
	proto.RegisterType((*Visitors)(nil), "user.Visitors")
	proto.RegisterType((*LastView)(nil), "user.LastView")
	proto.RegisterType((*Automation)(nil), "user.Automation")
	proto.RegisterType((*Automations)(nil), "user.Automations")
	proto.RegisterType((*Session)(nil), "user.Session")
	proto.RegisterType((*DeleteAttrRequest)(nil), "user.DeleteAttrRequest")
	proto.RegisterType((*CountMyUserRequest)(nil), "user.CountMyUserRequest")
	proto.RegisterType((*CountUserRequest)(nil), "user.CountUserRequest")
	proto.RegisterType((*CountUserByAttributeRequest)(nil), "user.CountUserByAttributeRequest")
	proto.RegisterType((*CountResponse)(nil), "user.CountResponse")
	proto.RegisterType((*AutomationCheck)(nil), "user.AutomationCheck")
	proto.RegisterType((*SCondition)(nil), "user.SCondition")
	proto.RegisterType((*Alias)(nil), "user.Alias")
	proto.RegisterType((*UserSegment)(nil), "user.UserSegment")
	proto.RegisterEnum("user.AttributeType", AttributeType_name, AttributeType_value)
	proto.RegisterEnum("user.AttributeKind", AttributeKind_name, AttributeKind_value)
	proto.RegisterEnum("user.AttributeDataState", AttributeDataState_name, AttributeDataState_value)
	proto.RegisterEnum("user.Event", Event_name, Event_value)
	proto.RegisterEnum("user.JoinOperator", JoinOperator_name, JoinOperator_value)
	proto.RegisterEnum("user.ConditionType", ConditionType_name, ConditionType_value)
	proto.RegisterEnum("user.AutomationScope", AutomationScope_name, AutomationScope_value)
	proto.RegisterEnum("user.Segmentation_State", Segmentation_State_name, Segmentation_State_value)
	proto.RegisterEnum("user.Condition_JoinOperator", Condition_JoinOperator_name, Condition_JoinOperator_value)
	proto.RegisterEnum("user.Automation_State", Automation_State_name, Automation_State_value)
	proto.RegisterEnum("user.Automation_ActionType", Automation_ActionType_name, Automation_ActionType_value)
	proto.RegisterEnum("user.Session_Platform", Session_Platform_name, Session_Platform_value)
	proto.RegisterEnum("user.Session_Status", Session_Status_name, Session_Status_value)
	proto.RegisterEnum("user.CountMyUserRequest_Range", CountMyUserRequest_Range_name, CountMyUserRequest_Range_value)
	proto.RegisterEnum("user.CountUserRequest_Range", CountUserRequest_Range_name, CountUserRequest_Range_value)
	proto.RegisterEnum("user.CountUserByAttributeRequest_Range", CountUserByAttributeRequest_Range_name, CountUserByAttributeRequest_Range_value)
	proto.RegisterEnum("user.SCondition_EventTime", SCondition_EventTime_name, SCondition_EventTime_value)
	proto.RegisterEnum("user.SCondition_JoinOperator", SCondition_JoinOperator_name, SCondition_JoinOperator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SegmentationMgr service

type SegmentationMgrClient interface {
	CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error)
	DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type segmentationMgrClient struct {
	cc *grpc.ClientConn
}

func NewSegmentationMgrClient(cc *grpc.ClientConn) SegmentationMgrClient {
	return &segmentationMgrClient{cc}
}

func (c *segmentationMgrClient) CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/CreateSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/UpdateSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error) {
	out := new(Segmentations)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/ListSegments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/DeleteSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/ReadSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.SegmentationMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SegmentationMgr service

type SegmentationMgrServer interface {
	CreateSegment(context.Context, *Segmentation) (*Segmentation, error)
	UpdateSegment(context.Context, *Segmentation) (*Segmentation, error)
	ListSegments(context.Context, *common.Id) (*Segmentations, error)
	DeleteSegment(context.Context, *common.Id) (*common.Empty, error)
	ReadSegment(context.Context, *common.Id) (*Segmentation, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterSegmentationMgrServer(s *grpc.Server, srv SegmentationMgrServer) {
	s.RegisterService(&_SegmentationMgr_serviceDesc, srv)
}

func _SegmentationMgr_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ListSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ListSegments(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ReadSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ReadSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.SegmentationMgr",
	HandlerType: (*SegmentationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSegment",
			Handler:    _SegmentationMgr_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _SegmentationMgr_UpdateSegment_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _SegmentationMgr_ListSegments_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SegmentationMgr_DeleteSegment_Handler,
		},
		{
			MethodName: "ReadSegment",
			Handler:    _SegmentationMgr_ReadSegment_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SegmentationMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for VisitorMgr service

type VisitorMgrClient interface {
	ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error)
	ReadPresences(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Presences, error)
	ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LastView, error)
	ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type visitorMgrClient struct {
	cc *grpc.ClientConn
}

func NewVisitorMgrClient(cc *grpc.ClientConn) VisitorMgrClient {
	return &visitorMgrClient{cc}
}

func (c *visitorMgrClient) ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error) {
	out := new(Presence)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ReadPresence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ReadPresences(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Presences, error) {
	out := new(Presences)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ReadPresences", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LastView, error) {
	out := new(LastView)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ReadPreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error) {
	out := new(Visitors)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/ListTopVisitors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.VisitorMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VisitorMgr service

type VisitorMgrServer interface {
	ReadPresence(context.Context, *common.Id) (*Presence, error)
	ReadPresences(context.Context, *common.Ids) (*Presences, error)
	ReadPreview(context.Context, *common.Id) (*LastView, error)
	ListTopVisitors(context.Context, *common.Id) (*Visitors, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterVisitorMgrServer(s *grpc.Server, srv VisitorMgrServer) {
	s.RegisterService(&_VisitorMgr_serviceDesc, srv)
}

func _VisitorMgr_ReadPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPresence(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ReadPresences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPresences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPresences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPresences(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ReadPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPreview(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ListTopVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ListTopVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisitorMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.VisitorMgr",
	HandlerType: (*VisitorMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPresence",
			Handler:    _VisitorMgr_ReadPresence_Handler,
		},
		{
			MethodName: "ReadPresences",
			Handler:    _VisitorMgr_ReadPresences_Handler,
		},
		{
			MethodName: "ReadPreview",
			Handler:    _VisitorMgr_ReadPreview_Handler,
		},
		{
			MethodName: "ListTopVisitors",
			Handler:    _VisitorMgr_ListTopVisitors_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _VisitorMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for UserMgr service

type UserMgrClient interface {
	SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error)
	SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error)
	AddToMy(ctx context.Context, in *AddToMyRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error)
	RemoveFromMy(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	CountMyUser(ctx context.Context, in *CountMyUserRequest, opts ...grpc.CallOption) (*CountResponse, error)
	CountUser(ctx context.Context, in *CountUserRequest, opts ...grpc.CallOption) (*CountResponse, error)
	CountUserByAttribute(ctx context.Context, in *CountUserByAttributeRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	AddAlias(ctx context.Context, in *Alias, opts ...grpc.CallOption) (*common.Empty, error)
	MoveUserActivity(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type userMgrClient struct {
	cc *grpc.ClientConn
}

func NewUserMgrClient(cc *grpc.ClientConn) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error) {
	out := new(UserSearchResult)
	err := grpc.Invoke(ctx, "/user.UserMgr/SearchUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error) {
	out := new(SubizIDResponse)
	err := grpc.Invoke(ctx, "/user.UserMgr/SubizID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddToMy(ctx context.Context, in *AddToMyRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.UserMgr/AddToMy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := grpc.Invoke(ctx, "/user.UserMgr/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := grpc.Invoke(ctx, "/user.UserMgr/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserMgr/ReadUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveFromMy(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.UserMgr/RemoveFromMy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountMyUser(ctx context.Context, in *CountMyUserRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/user.UserMgr/CountMyUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountUser(ctx context.Context, in *CountUserRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/user.UserMgr/CountUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountUserByAttribute(ctx context.Context, in *CountUserByAttributeRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/user.UserMgr/CountUserByAttribute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.UserMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddAlias(ctx context.Context, in *Alias, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.UserMgr/AddAlias", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MoveUserActivity(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.UserMgr/MoveUserActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserMgr service

type UserMgrServer interface {
	SearchUsers(context.Context, *UserSearchRequest) (*UserSearchResult, error)
	SubizID(context.Context, *SubizIDRequest) (*SubizIDResponse, error)
	AddToMy(context.Context, *AddToMyRequest) (*common.Empty, error)
	CreateUser(context.Context, *User) (*common.Id, error)
	UpdateUser(context.Context, *User) (*common.Id, error)
	ReadUser(context.Context, *common.Id) (*User, error)
	RemoveFromMy(context.Context, *common.Id) (*common.Empty, error)
	CountMyUser(context.Context, *CountMyUserRequest) (*CountResponse, error)
	CountUser(context.Context, *CountUserRequest) (*CountResponse, error)
	CountUserByAttribute(context.Context, *CountUserByAttributeRequest) (*CountResponse, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	AddAlias(context.Context, *Alias) (*common.Empty, error)
	MoveUserActivity(context.Context, *MergeRequest) (*common.Empty, error)
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*UserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SubizID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubizIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SubizID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SubizID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SubizID(ctx, req.(*SubizIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddToMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddToMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/AddToMy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddToMy(ctx, req.(*AddToMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveFromMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveFromMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/RemoveFromMy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveFromMy(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CountMyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountMyUser(ctx, req.(*CountMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountUser(ctx, req.(*CountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountUserByAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserByAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountUserByAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CountUserByAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountUserByAttribute(ctx, req.(*CountUserByAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/AddAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddAlias(ctx, req.(*Alias))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MoveUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MoveUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/MoveUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MoveUserActivity(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "SubizID",
			Handler:    _UserMgr_SubizID_Handler,
		},
		{
			MethodName: "AddToMy",
			Handler:    _UserMgr_AddToMy_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserMgr_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
		{
			MethodName: "RemoveFromMy",
			Handler:    _UserMgr_RemoveFromMy_Handler,
		},
		{
			MethodName: "CountMyUser",
			Handler:    _UserMgr_CountMyUser_Handler,
		},
		{
			MethodName: "CountUser",
			Handler:    _UserMgr_CountUser_Handler,
		},
		{
			MethodName: "CountUserByAttribute",
			Handler:    _UserMgr_CountUserByAttribute_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserMgr_Ping_Handler,
		},
		{
			MethodName: "AddAlias",
			Handler:    _UserMgr_AddAlias_Handler,
		},
		{
			MethodName: "MoveUserActivity",
			Handler:    _UserMgr_MoveUserActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for AutomationMgr service

type AutomationMgrClient interface {
	ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error)
	UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error)
	CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type automationMgrClient struct {
	cc *grpc.ClientConn
}

func NewAutomationMgrClient(cc *grpc.ClientConn) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error) {
	out := new(Automations)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/ListAutomations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/UpdateAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/DeleteAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/ReadAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/CreateAutomation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.AutomationMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AutomationMgr service

type AutomationMgrServer interface {
	ListAutomations(context.Context, *common.Id) (*Automations, error)
	UpdateAutomation(context.Context, *Automation) (*Automation, error)
	DeleteAutomation(context.Context, *common.Id) (*common.Empty, error)
	ReadAutomation(context.Context, *common.Id) (*Automation, error)
	CreateAutomation(context.Context, *Automation) (*Automation, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ListAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListAutomations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/UpdateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/DeleteAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ReadAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/CreateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationMgr_ListAutomations_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationMgr_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationMgr_DeleteAutomation_Handler,
		},
		{
			MethodName: "ReadAutomation",
			Handler:    _AutomationMgr_ReadAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationMgr_CreateAutomation_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AutomationMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for SessionMgr service

type SessionMgrClient interface {
	CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	ReadSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type sessionMgrClient struct {
	cc *grpc.ClientConn
}

func NewSessionMgrClient(cc *grpc.ClientConn) SessionMgrClient {
	return &sessionMgrClient{cc}
}

func (c *sessionMgrClient) CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMgrClient) ReadSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/ReadSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMgrClient) UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/user.SessionMgr/UpdateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.SessionMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionMgr service

type SessionMgrServer interface {
	CreateSession(context.Context, *Session) (*Session, error)
	ReadSession(context.Context, *Session) (*Session, error)
	UpdateSession(context.Context, *Session) (*Session, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterSessionMgrServer(s *grpc.Server, srv SessionMgrServer) {
	s.RegisterService(&_SessionMgr_serviceDesc, srv)
}

func _SessionMgr_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).CreateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionMgr_ReadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).ReadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/ReadSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).ReadSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionMgr_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).UpdateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SessionMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.SessionMgr",
	HandlerType: (*SessionMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionMgr_CreateSession_Handler,
		},
		{
			MethodName: "ReadSession",
			Handler:    _SessionMgr_ReadSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SessionMgr_UpdateSession_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SessionMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for AttributeMgr service

type AttributeMgrClient interface {
	ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error)
	CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type attributeMgrClient struct {
	cc *grpc.ClientConn
}

func NewAttributeMgrClient(cc *grpc.ClientConn) AttributeMgrClient {
	return &attributeMgrClient{cc}
}

func (c *attributeMgrClient) ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error) {
	out := new(AttributeDefinitions)
	err := grpc.Invoke(ctx, "/user.AttributeMgr/ListAttributeDefinitions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := grpc.Invoke(ctx, "/user.AttributeMgr/CreateAttributeDefinition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := grpc.Invoke(ctx, "/user.AttributeMgr/UpdateAttributeDefinition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/user.AttributeMgr/DeleteAttributeDefinition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/user.AttributeMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AttributeMgr service

type AttributeMgrServer interface {
	ListAttributeDefinitions(context.Context, *common.Empty) (*AttributeDefinitions, error)
	CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*common.Empty, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterAttributeMgrServer(s *grpc.Server, srv AttributeMgrServer) {
	s.RegisterService(&_AttributeMgr_serviceDesc, srv)
}

func _AttributeMgr_ListAttributeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/ListAttributeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_CreateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/CreateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_UpdateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/UpdateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_DeleteAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/DeleteAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, req.(*DeleteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.AttributeMgr",
	HandlerType: (*AttributeMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributeDefinitions",
			Handler:    _AttributeMgr_ListAttributeDefinitions_Handler,
		},
		{
			MethodName: "CreateAttributeDefinition",
			Handler:    _AttributeMgr_CreateAttributeDefinition_Handler,
		},
		{
			MethodName: "UpdateAttributeDefinition",
			Handler:    _AttributeMgr_UpdateAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteAttributeDefinition",
			Handler:    _AttributeMgr_DeleteAttributeDefinition_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AttributeMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x3b, 0x4b, 0x70, 0x1c, 0x49,
	0x56, 0x53, 0xfd, 0xef, 0xd7, 0x1f, 0x95, 0x52, 0xb2, 0xa7, 0xd5, 0x1e, 0x8f, 0xe5, 0xb2, 0x77,
	0x90, 0x35, 0x63, 0x79, 0x43, 0x33, 0xeb, 0x1d, 0x08, 0x58, 0xd0, 0xc8, 0x36, 0x2b, 0xef, 0xc8,
	0x98, 0x92, 0x3c, 0x70, 0x20, 0x42, 0x51, 0xaa, 0x4a, 0xb7, 0x6a, 0xd4, 0x5d, 0xd5, 0x5b, 0x99,
	0x2d, 0x5b, 0x7b, 0x22, 0x36, 0x82, 0x80, 0x1b, 0x07, 0x2e, 0x7b, 0x20, 0x86, 0x08, 0x22, 0xe0,
	0xc2, 0x01, 0x02, 0x0e, 0x44, 0xc0, 0x01, 0x02, 0x22, 0xf8, 0xec, 0xc2, 0x02, 0x17, 0xb8, 0xc1,
	0x85, 0x1b, 0x70, 0xe6, 0xba, 0xf1, 0xf2, 0x53, 0x95, 0x55, 0xdd, 0x92, 0x5b, 0xb6, 0x7c, 0xb1,
	0xeb, 0xbd, 0x7c, 0x99, 0xf9, 0x7e, 0xf9, 0xf2, 0xbd, 0x97, 0x2d, 0x58, 0x98, 0x30, 0x9a, 0xdc,
	0xc3, 0x7f, 0x36, 0xc6, 0x49, 0xcc, 0x63, 0x52, 0xc1, 0xef, 0xfe, 0xc6, 0x61, 0xc8, 0x0f, 0x27,
	0xfe, 0x31, 0xe5, 0x1b, 0x71, 0x32, 0xb8, 0xc7, 0x26, 0x87, 0xe1, 0xf7, 0xee, 0x1d, 0x51, 0x2f,
	0xa0, 0xc9, 0x3d, 0x3f, 0x1e, 0x8d, 0xe2, 0x48, 0xfd, 0x27, 0x67, 0x39, 0xbf, 0x65, 0x41, 0x77,
	0x2b, 0x08, 0xf6, 0xe3, 0xdd, 0x53, 0x97, 0x7e, 0x77, 0x42, 0x19, 0x27, 0x37, 0xa1, 0xec, 0xf3,
	0x97, 0x3d, 0x6b, 0xd5, 0x5a, 0x6b, 0x6d, 0x2e, 0x6c, 0x28, 0xf2, 0xed, 0x38, 0xe2, 0xf4, 0x25,
	0x77, 0x71, 0x8c, 0xbc, 0x0b, 0x75, 0xdc, 0xed, 0x20, 0x0c, 0x7a, 0xe5, 0x55, 0x6b, 0xad, 0xe9,
	0xd6, 0x10, 0xdc, 0x09, 0xc8, 0x35, 0x68, 0x7a, 0x03, 0x1a, 0xf1, 0x83, 0x30, 0x60, 0xbd, 0xea,
	0x6a, 0x79, 0xad, 0xe9, 0x36, 0x04, 0x62, 0x27, 0x60, 0xe4, 0x3a, 0x80, 0xe7, 0xfb, 0xf1, 0x44,
	0x0c, 0xf7, 0x4a, 0x62, 0x62, 0x53, 0x61, 0x76, 0x02, 0xe7, 0x77, 0x2d, 0x68, 0xec, 0x9e, 0x6e,
	0x21, 0x35, 0x9b, 0x87, 0x89, 0xf3, 0x97, 0x7b, 0x4d, 0x1e, 0x7b, 0x50, 0x9f, 0x8c, 0x03, 0x8f,
	0xd3, 0xa0, 0x57, 0x5b, 0xb5, 0xd6, 0xca, 0xae, 0x06, 0x9d, 0xfb, 0x60, 0x3f, 0x63, 0x34, 0xd9,
	0x4e, 0xa8, 0xc7, 0xa9, 0x4b, 0xd9, 0x64, 0xc8, 0x49, 0x17, 0x4a, 0xe9, 0xf2, 0xa5, 0x30, 0x20,
	0x04, 0x2a, 0x23, 0x8f, 0x1d, 0xf7, 0xaa, 0x02, 0x23, 0xbe, 0x9d, 0x3f, 0xb7, 0xa0, 0xb6, 0x7b,
	0x8a, 0x53, 0xe7, 0x11, 0x6a, 0x05, 0x1a, 0x9a, 0x39, 0x25, 0x52, 0x5d, 0xf1, 0x46, 0xde, 0x07,
	0x61, 0x62, 0xb1, 0x5d, 0x6b, 0x13, 0x36, 0x84, 0xed, 0x71, 0x5d, 0x57, 0xe0, 0xc9, 0x55, 0xa8,
	0x4d, 0xa2, 0x84, 0x7a, 0x41, 0xaf, 0xb2, 0x6a, 0xad, 0x55, 0x5d, 0x05, 0x99, 0x22, 0x55, 0x73,
	0x22, 0x15, 0x34, 0x58, 0x2f, 0x1a, 0xe4, 0xd7, 0x4b, 0xb0, 0xb4, 0xc5, 0x79, 0x12, 0x1e, 0x4e,
	0x38, 0x7d, 0x40, 0x9f, 0x87, 0x51, 0xc8, 0xc3, 0x38, 0xba, 0x04, 0xdb, 0x10, 0xa8, 0x44, 0xde,
	0x88, 0x2a, 0xcd, 0x89, 0x6f, 0xb2, 0x0a, 0xad, 0x80, 0x32, 0x3f, 0x09, 0xc7, 0xb8, 0x89, 0x90,
	0xa1, 0xe9, 0x9a, 0x28, 0x9c, 0xc5, 0x4f, 0xc7, 0x54, 0x6b, 0x17, 0xbf, 0x71, 0xa3, 0x61, 0xc8,
	0xf8, 0x41, 0xc8, 0xe9, 0x88, 0xf5, 0x6a, 0xc2, 0x9a, 0x4d, 0xc4, 0xec, 0x20, 0x82, 0xd8, 0x50,
	0x3e, 0xa6, 0xa7, 0x4a, 0x34, 0xfc, 0xc4, 0x45, 0x8e, 0xc3, 0x28, 0xe8, 0x35, 0xe4, 0x22, 0xf8,
	0x6d, 0x6a, 0xa8, 0x99, 0x37, 0x3a, 0x87, 0xe5, 0x19, 0x1a, 0x98, 0xcb, 0x3d, 0x7f, 0x1a, 0xc0,
	0xd3, 0x53, 0x59, 0xaf, 0xb4, 0x5a, 0x5e, 0x6b, 0x6d, 0xae, 0x48, 0xa3, 0xcd, 0x58, 0xd2, 0x35,
	0x88, 0x9d, 0xff, 0x2f, 0x41, 0x27, 0xa3, 0xf1, 0xb8, 0xf7, 0x36, 0x8f, 0x83, 0x52, 0x51, 0x25,
	0x53, 0xd1, 0x32, 0x54, 0x19, 0xf7, 0x38, 0x15, 0x27, 0xa0, 0xe9, 0x4a, 0x00, 0x95, 0xe4, 0x0b,
	0xdf, 0x97, 0x9e, 0x52, 0x76, 0x35, 0x48, 0xfa, 0xd0, 0x18, 0xc5, 0x41, 0xf8, 0x3c, 0xa4, 0x52,
	0xad, 0x65, 0x37, 0x85, 0x85, 0xcd, 0xe8, 0x4b, 0xde, 0x03, 0x65, 0x33, 0xfa, 0x92, 0xa3, 0xa3,
	0x46, 0x93, 0xd1, 0x21, 0x4d, 0x7a, 0xad, 0x55, 0x6b, 0xcd, 0x72, 0x15, 0x84, 0x3b, 0x1c, 0xc6,
	0xf1, 0x90, 0x7a, 0x51, 0xaf, 0xbd, 0x6a, 0xad, 0x35, 0x5c, 0x0d, 0xe2, 0x0e, 0x68, 0x0f, 0x1e,
	0x8e, 0x68, 0xaf, 0x23, 0x56, 0x4a, 0x61, 0xdc, 0x01, 0xed, 0xdd, 0xeb, 0x0a, 0xdb, 0x8b, 0x6f,
	0xdc, 0x81, 0x51, 0xce, 0x69, 0xd2, 0xb3, 0xa5, 0xac, 0x12, 0x22, 0x37, 0xa0, 0x25, 0xbf, 0x0e,
	0x84, 0x23, 0x2d, 0x8a, 0x41, 0x90, 0xa8, 0xfd, 0xd3, 0x31, 0x75, 0xfe, 0xaf, 0x04, 0x95, 0x79,
	0x8f, 0x6a, 0xf1, 0xf0, 0xe7, 0x0d, 0x50, 0x29, 0x1a, 0xe0, 0x16, 0xd4, 0x78, 0xe2, 0xf9, 0x94,
	0xf5, 0x5a, 0xc2, 0x17, 0x5a, 0xd2, 0x17, 0xf6, 0x11, 0xe7, 0xaa, 0x21, 0x72, 0x05, 0x6a, 0x21,
	0x3b, 0x38, 0xf4, 0xa2, 0x5e, 0x57, 0x68, 0xa0, 0x1a, 0xb2, 0xcf, 0xbc, 0x88, 0x7c, 0x9c, 0xf3,
	0x25, 0x22, 0xe6, 0x2f, 0x15, 0x7d, 0xc9, 0xe3, 0x9e, 0xe9, 0x45, 0xa8, 0x34, 0x46, 0x07, 0x23,
	0x0c, 0xa7, 0xbd, 0x25, 0x19, 0xe6, 0x34, 0x8c, 0x61, 0x46, 0x5c, 0x0d, 0xc8, 0xe9, 0x8a, 0x0c,
	0x33, 0x02, 0xde, 0x11, 0x87, 0xc1, 0x1b, 0x86, 0x1e, 0xa3, 0xac, 0xf7, 0xbe, 0x98, 0xa5, 0x41,
	0xf4, 0x94, 0xb1, 0x97, 0xf4, 0x1c, 0x11, 0x5d, 0xf0, 0x33, 0x67, 0xf9, 0xdb, 0x05, 0xcb, 0xdf,
	0x82, 0x8e, 0xfe, 0x3e, 0x78, 0x41, 0xe9, 0x71, 0xef, 0x6b, 0x62, 0x5e, 0x5b, 0x23, 0x7f, 0x85,
	0xd2, 0x63, 0xe7, 0x0e, 0x54, 0x51, 0xdd, 0x8c, 0xac, 0x42, 0x15, 0xc5, 0x61, 0x3d, 0x4b, 0x08,
	0x67, 0x46, 0x37, 0x39, 0xe0, 0xfc, 0xad, 0x05, 0xb5, 0x07, 0xf4, 0x24, 0xf4, 0xa9, 0xa1, 0xf9,
	0xaa, 0xd0, 0xfc, 0x4d, 0x68, 0x23, 0x4d, 0x1a, 0x38, 0x65, 0xfc, 0x6b, 0xa5, 0xb8, 0x9d, 0x80,
	0xbc, 0x07, 0xcd, 0x14, 0x54, 0x01, 0x24, 0x43, 0x90, 0x0f, 0x61, 0x91, 0xf9, 0x09, 0xa5, 0xd1,
	0x41, 0x42, 0x59, 0x3c, 0x9c, 0x88, 0x08, 0x24, 0xbd, 0xdf, 0x96, 0x03, 0x6e, 0x8a, 0x47, 0x27,
	0x1a, 0x7a, 0xd1, 0x60, 0xe2, 0x0d, 0xa8, 0x0e, 0x9b, 0x55, 0x17, 0x34, 0x6a, 0x47, 0x9c, 0x07,
	0x0d, 0xa9, 0x30, 0x93, 0xc2, 0xce, 0x5d, 0xa8, 0xed, 0x4b, 0x53, 0x67, 0xfe, 0x50, 0x3e, 0xd3,
	0x1f, 0x9c, 0xef, 0x97, 0xa1, 0x2a, 0x30, 0x53, 0xde, 0x86, 0xf0, 0x58, 0x79, 0x59, 0x29, 0x1c,
	0x0b, 0xae, 0x62, 0xdf, 0x43, 0x0e, 0x91, 0xab, 0xaa, 0xe2, 0x4a, 0xa1, 0xe4, 0xb5, 0xe7, 0x87,
	0xfc, 0xf4, 0x40, 0x04, 0x5e, 0xc5, 0x16, 0x22, 0x9e, 0x60, 0xf0, 0xbd, 0x09, 0x6d, 0xe1, 0xa7,
	0x89, 0x1a, 0x6f, 0xca, 0xe8, 0xab, 0x70, 0x45, 0x12, 0x3f, 0x0e, 0x68, 0x6f, 0x29, 0x47, 0xb2,
	0x1d, 0x07, 0x94, 0x7c, 0x0d, 0xba, 0x7e, 0x1c, 0xf1, 0x30, 0x42, 0x3b, 0x08, 0x22, 0x79, 0xec,
	0x3b, 0x29, 0x76, 0x9a, 0x4c, 0x6c, 0x47, 0x0a, 0x64, 0x62, 0x43, 0xa1, 0x46, 0x1e, 0xf2, 0x49,
	0x40, 0x45, 0x3c, 0x28, 0xb9, 0x29, 0x8c, 0xe6, 0x1c, 0xc6, 0xd1, 0x40, 0x0e, 0x76, 0xc4, 0x60,
	0x86, 0x40, 0x5d, 0x8c, 0x63, 0xc6, 0xbd, 0xa1, 0x64, 0xa2, 0x2b, 0x8f, 0xb9, 0x44, 0x09, 0x0e,
	0xfa, 0xd0, 0xc0, 0xd8, 0xf1, 0xbd, 0x38, 0xa2, 0x2a, 0x42, 0xa4, 0x30, 0x7a, 0x79, 0xc8, 0xc6,
	0x2a, 0x36, 0xe0, 0xa7, 0xf3, 0x87, 0x16, 0xb4, 0x77, 0x69, 0x32, 0xa0, 0x17, 0xc8, 0x90, 0xf2,
	0xc1, 0xa0, 0x5c, 0x0c, 0x06, 0x1b, 0xb0, 0x14, 0x50, 0xc6, 0xc3, 0x48, 0x1a, 0x4c, 0x47, 0x66,
	0xe9, 0x98, 0x8b, 0xc6, 0xd0, 0x33, 0x19, 0xa4, 0x6f, 0x43, 0x97, 0xc5, 0x93, 0xc4, 0xa7, 0x29,
	0xa9, 0xb4, 0x7c, 0x5b, 0x62, 0x25, 0x95, 0xf3, 0x18, 0x3a, 0x3a, 0x3d, 0xd1, 0x8c, 0xb6, 0xfd,
	0x23, 0x6f, 0x38, 0xa4, 0x91, 0xf4, 0xd5, 0xb2, 0xb2, 0x99, 0xc6, 0xed, 0x04, 0x18, 0x2a, 0xbd,
	0x88, 0xbd, 0xa0, 0x89, 0x5a, 0x51, 0x41, 0xce, 0x1f, 0x58, 0x50, 0xdd, 0x8f, 0xc7, 0xa1, 0x7f,
	0x09, 0x77, 0xcf, 0x32, 0x54, 0x39, 0x2e, 0xa5, 0xf6, 0x97, 0xc0, 0xcc, 0xeb, 0xdc, 0xb8, 0x89,
	0x1b, 0xf9, 0x5c, 0x25, 0xcb, 0x6e, 0x9a, 0x66, 0x76, 0xe3, 0xfc, 0xb5, 0x05, 0xad, 0x67, 0xe2,
	0x73, 0x6e, 0x6e, 0x67, 0xb3, 0x63, 0x66, 0x5e, 0x95, 0x7c, 0xe6, 0x65, 0xdc, 0x9d, 0xd5, 0xdc,
	0xdd, 0xa9, 0x45, 0xa8, 0xbd, 0x91, 0x08, 0x5f, 0x59, 0x60, 0xbb, 0x5a, 0x80, 0xd7, 0xf6, 0xb1,
	0x39, 0xb5, 0x6e, 0xc8, 0x52, 0xc9, 0xc9, 0x62, 0xca, 0x5f, 0xcd, 0xc9, 0xef, 0x1c, 0x81, 0xbd,
	0x37, 0x39, 0xc4, 0x44, 0xec, 0xf0, 0x22, 0x67, 0xc0, 0x5c, 0xb1, 0x9c, 0xd7, 0xe8, 0x55, 0xa8,
	0x09, 0x76, 0x58, 0xaf, 0x22, 0xee, 0x18, 0x05, 0x39, 0x3f, 0xb0, 0x80, 0x6c, 0x0d, 0x06, 0x09,
	0x1d, 0x78, 0x5c, 0x78, 0xf5, 0x36, 0x0a, 0x73, 0x09, 0xca, 0xb0, 0xa1, 0x3c, 0x0a, 0x23, 0xc1,
	0x46, 0xd9, 0xc5, 0x4f, 0x54, 0x8f, 0x18, 0x54, 0x49, 0xb1, 0x04, 0xcc, 0x2c, 0xa7, 0x96, 0xcb,
	0x72, 0x9c, 0xbf, 0xb3, 0xe0, 0x5a, 0x8e, 0xb5, 0xf4, 0xe6, 0x7d, 0x7b, 0x3c, 0xde, 0x82, 0x4e,
	0x7a, 0xa1, 0x1f, 0x64, 0x59, 0x5a, 0x3b, 0x45, 0x7e, 0x47, 0xa6, 0x6b, 0x17, 0x12, 0x64, 0x04,
	0xdd, 0x3d, 0x71, 0xd7, 0x3f, 0xb8, 0x98, 0x2d, 0xd3, 0x84, 0xa1, 0x94, 0x4f, 0x18, 0xce, 0x0f,
	0x75, 0xce, 0x04, 0xda, 0xbb, 0x1e, 0x3b, 0x76, 0x29, 0x1b, 0xc7, 0x11, 0xa3, 0xaf, 0xbf, 0xd2,
	0xd9, 0xae, 0x3b, 0xab, 0xec, 0xfa, 0x4d, 0x0b, 0x16, 0x52, 0x31, 0xd5, 0xd6, 0x6f, 0x53, 0xce,
	0x33, 0xb9, 0x73, 0x86, 0xd0, 0xd9, 0x93, 0x79, 0x97, 0x37, 0x77, 0xf1, 0xf0, 0x29, 0x74, 0x98,
	0x39, 0x47, 0xe5, 0x08, 0x44, 0xe6, 0x08, 0xe6, 0x72, 0x6e, 0x9e, 0xd0, 0xf9, 0x33, 0x0b, 0x6c,
	0x35, 0xfe, 0x79, 0x1c, 0x8f, 0xf7, 0x44, 0xee, 0xfe, 0xe6, 0xbe, 0xb9, 0x02, 0x0d, 0x21, 0x1d,
	0x26, 0x80, 0x32, 0xf1, 0x12, 0xd2, 0x3e, 0xf5, 0x30, 0x55, 0x6e, 0x0f, 0xe3, 0x78, 0x7c, 0x90,
	0x77, 0xb7, 0x16, 0xe2, 0xb6, 0x55, 0x85, 0x20, 0x92, 0x93, 0x78, 0x7c, 0xa0, 0xd2, 0x7e, 0x59,
	0x3f, 0x00, 0xa2, 0x9e, 0x08, 0x0c, 0x5a, 0x4b, 0x54, 0xd7, 0x8a, 0xf3, 0x6d, 0xcf, 0x3f, 0xba,
	0x0c, 0xae, 0x8b, 0x49, 0x93, 0xc8, 0x61, 0xa2, 0x20, 0xd4, 0x59, 0x52, 0x45, 0xe7, 0x30, 0x0a,
	0xb7, 0x13, 0x38, 0xbf, 0x5d, 0x86, 0xb6, 0xa9, 0xdf, 0x4b, 0xe3, 0xa2, 0x6a, 0x76, 0x09, 0x5e,
	0x55, 0xfd, 0xb6, 0xa6, 0xab, 0xdf, 0xeb, 0x00, 0xc2, 0x02, 0xf2, 0xac, 0x57, 0x84, 0x0a, 0x45,
	0x0a, 0x2b, 0xc3, 0x8f, 0x0d, 0xe5, 0xc4, 0x8b, 0xd4, 0x95, 0x83, 0x9f, 0x28, 0x2c, 0xe3, 0x5e,
	0xc2, 0x69, 0x70, 0xf0, 0x3c, 0x89, 0x47, 0x4a, 0xeb, 0x2d, 0x85, 0x7b, 0x94, 0xc4, 0x23, 0x33,
	0x48, 0x34, 0xcf, 0xae, 0xe9, 0xa0, 0x90, 0xd9, 0xa7, 0xf5, 0x61, 0xdb, 0xac, 0x0f, 0x3f, 0x81,
	0x66, 0xaa, 0x47, 0x51, 0x6f, 0xb4, 0x36, 0xaf, 0xe6, 0xdc, 0x75, 0x5b, 0x8f, 0xba, 0x19, 0xa1,
	0x73, 0x13, 0xaa, 0xd2, 0x45, 0x01, 0x6a, 0x9e, 0xcf, 0xc3, 0x13, 0x6a, 0xbf, 0x43, 0xda, 0xd0,
	0x08, 0x23, 0x05, 0x59, 0xce, 0x9f, 0xe2, 0x49, 0x96, 0x4b, 0x60, 0x2a, 0x7c, 0x1c, 0x46, 0x83,
	0x39, 0x4f, 0x72, 0xea, 0xb1, 0xa5, 0xbc, 0xc7, 0xbe, 0xe2, 0x24, 0x17, 0x1d, 0xba, 0xfe, 0x4a,
	0x87, 0x6e, 0x4c, 0x39, 0xf4, 0x57, 0x16, 0x34, 0x53, 0x81, 0xd1, 0xe2, 0x5f, 0xc6, 0x61, 0x24,
	0xf8, 0x6d, 0xba, 0xe2, 0x5b, 0xd7, 0xdd, 0xa5, 0xac, 0xee, 0xee, 0x43, 0x23, 0x1e, 0xd3, 0xc4,
	0xe3, 0x71, 0xa2, 0x98, 0x4a, 0x61, 0xd4, 0xf9, 0x89, 0x37, 0x9c, 0x50, 0xe5, 0xb2, 0x12, 0x50,
	0x9e, 0x55, 0xd3, 0x9e, 0xe5, 0xdc, 0x81, 0xf6, 0xe3, 0x38, 0x8c, 0x7e, 0x49, 0xcf, 0x6a, 0x40,
	0x25, 0x8a, 0x23, 0x54, 0x69, 0x1d, 0xca, 0x5e, 0x14, 0xd8, 0x16, 0xa9, 0x41, 0x29, 0x4e, 0xec,
	0x92, 0xf3, 0xa3, 0x2c, 0x4e, 0x64, 0x7c, 0xca, 0xf5, 0x4a, 0xa6, 0xa7, 0x8a, 0xfc, 0xa6, 0x6c,
	0xe4, 0x37, 0x5a, 0x96, 0x8a, 0x21, 0xcb, 0x2f, 0xc0, 0x52, 0x76, 0x4f, 0x65, 0x5e, 0x50, 0x55,
	0xe6, 0x11, 0x5e, 0x90, 0x99, 0x9f, 0x78, 0xd9, 0xcd, 0xa9, 0x77, 0xfe, 0x39, 0x58, 0xa0, 0x27,
	0xb2, 0x6c, 0xd0, 0xb3, 0x6b, 0x62, 0xf6, 0xb2, 0x9c, 0xfd, 0xf0, 0x24, 0xe7, 0x41, 0x5d, 0x9a,
	0x83, 0x1d, 0x1f, 0xba, 0x79, 0x8a, 0x29, 0x51, 0x6c, 0x28, 0x1f, 0x79, 0x4c, 0x48, 0xd2, 0x70,
	0xf1, 0x93, 0xdc, 0x03, 0x48, 0x37, 0x93, 0x8d, 0xc0, 0x19, 0xbc, 0x1a, 0x24, 0xce, 0x1f, 0x97,
	0x74, 0x90, 0xf2, 0x12, 0xff, 0x48, 0xb5, 0x00, 0xe7, 0xcd, 0x37, 0xb9, 0x37, 0x54, 0x37, 0xbb,
	0x04, 0xb2, 0x8a, 0xb7, 0x72, 0x46, 0xc5, 0x2b, 0x53, 0x73, 0xff, 0x28, 0x4e, 0x74, 0xd6, 0x29,
	0x21, 0x91, 0x61, 0x8a, 0xcc, 0x51, 0x36, 0xbc, 0xd0, 0xb1, 0x25, 0x48, 0x76, 0xa1, 0x23, 0x3f,
	0x65, 0x94, 0x60, 0xbd, 0xba, 0x58, 0x7b, 0x2d, 0x5b, 0xdb, 0xe4, 0x7d, 0x43, 0xe6, 0xcd, 0x22,
	0x7e, 0xb0, 0x87, 0x58, 0xc5, 0xb9, 0xed, 0x89, 0x81, 0xea, 0xff, 0x3c, 0x2c, 0x4e, 0x91, 0x68,
	0xbf, 0xb5, 0x72, 0xfd, 0x22, 0xe9, 0x9b, 0xf2, 0x98, 0x49, 0xe0, 0x67, 0x4a, 0x9f, 0x5a, 0xce,
	0xbf, 0x5b, 0xb0, 0x68, 0xee, 0x3a, 0x77, 0xba, 0xf1, 0x53, 0xb0, 0x60, 0x5e, 0x6b, 0xd9, 0x31,
	0xed, 0x9a, 0x68, 0x99, 0xe4, 0x7e, 0x77, 0x42, 0x13, 0x9d, 0x19, 0x49, 0xe0, 0x4c, 0xcd, 0x2d,
	0x43, 0x75, 0x18, 0x8e, 0x42, 0x2e, 0x7c, 0xab, 0xea, 0x4a, 0x20, 0x97, 0xa7, 0x36, 0xa6, 0xf2,
	0x54, 0x23, 0x65, 0x6f, 0xa4, 0x29, 0xfb, 0x8f, 0x2d, 0x80, 0x9d, 0x28, 0xa0, 0x2f, 0x85, 0xd7,
	0x5d, 0xb4, 0x15, 0x74, 0x66, 0x3d, 0x71, 0x66, 0xd2, 0x86, 0xb1, 0xc1, 0xf7, 0x38, 0x1d, 0xc4,
	0x89, 0xee, 0x66, 0xa6, 0xb0, 0x91, 0x4c, 0x37, 0xcc, 0x64, 0x1a, 0xf1, 0xf1, 0xe1, 0x97, 0xd4,
	0xe7, 0xaa, 0x9c, 0x57, 0xd0, 0xac, 0x9e, 0x9c, 0xf3, 0x27, 0x16, 0x2c, 0x7e, 0x1e, 0x32, 0x2e,
	0x6a, 0x10, 0x76, 0x19, 0x4f, 0x01, 0x67, 0xd7, 0x13, 0x86, 0x79, 0x2a, 0xb3, 0xcd, 0x53, 0x37,
	0xcd, 0x93, 0xd9, 0xa0, 0x91, 0xb3, 0x41, 0x02, 0xb6, 0xc9, 0xf1, 0xbc, 0xa7, 0xf1, 0x56, 0xaa,
	0xad, 0x7c, 0xdf, 0x45, 0x14, 0x5f, 0x86, 0xea, 0x66, 0x39, 0x90, 0xf3, 0x7d, 0x0b, 0x16, 0x70,
	0xd3, 0x27, 0xf4, 0xc5, 0xa5, 0x28, 0xe9, 0x3a, 0x80, 0xb8, 0x8f, 0x0f, 0x44, 0x6b, 0x53, 0x5d,
	0xea, 0x02, 0xb3, 0x1f, 0x8e, 0x68, 0x5e, 0x21, 0x4d, 0xa5, 0x10, 0x27, 0x80, 0x96, 0x7a, 0xb2,
	0x41, 0x56, 0xde, 0xf0, 0x55, 0xe1, 0x2c, 0xd6, 0x9c, 0x1f, 0x5a, 0x50, 0x7d, 0x14, 0xd2, 0x61,
	0x96, 0xaf, 0x94, 0x8c, 0x7c, 0xe5, 0x75, 0x53, 0xf5, 0xac, 0x33, 0x5b, 0x3d, 0xaf, 0x33, 0x5b,
	0x2b, 0x76, 0x66, 0xcf, 0x29, 0xab, 0x09, 0x54, 0x02, 0x8f, 0x7b, 0xca, 0xc9, 0xc5, 0xb7, 0x3a,
	0x90, 0x90, 0x5e, 0x8c, 0xbf, 0x6f, 0x41, 0xe3, 0x69, 0x42, 0x19, 0x8d, 0x7c, 0x7a, 0x09, 0xed,
	0x9b, 0xf3, 0xc4, 0x1b, 0x87, 0xd1, 0x20, 0x7d, 0x6a, 0x51, 0x10, 0x16, 0x72, 0xf2, 0xeb, 0x60,
	0x14, 0x46, 0x13, 0xd5, 0x5a, 0x2f, 0xbb, 0x6d, 0x89, 0xdc, 0x15, 0x38, 0xe7, 0xd7, 0xa0, 0xa9,
	0x79, 0x9c, 0xab, 0x48, 0xf8, 0x08, 0x9a, 0x63, 0x4d, 0xaf, 0x1e, 0x18, 0xba, 0xd2, 0x99, 0xf5,
	0x32, 0x6e, 0x46, 0xe0, 0xfc, 0xa7, 0x05, 0xf5, 0x2f, 0x42, 0x16, 0x62, 0x5e, 0xf0, 0xe6, 0x1a,
	0xd0, 0x8f, 0x51, 0x95, 0xb3, 0x1f, 0xa3, 0x66, 0x2a, 0x62, 0x05, 0x1a, 0x63, 0x6f, 0x40, 0x0f,
	0x26, 0xc9, 0x50, 0x19, 0xb9, 0x8e, 0xf0, 0xb3, 0x64, 0x28, 0xba, 0x76, 0x38, 0x74, 0x12, 0xd2,
	0x17, 0x69, 0xd6, 0x05, 0x88, 0xfa, 0x42, 0x60, 0x90, 0x25, 0x41, 0xc0, 0x43, 0x3e, 0xd4, 0x2d,
	0xcc, 0x26, 0x62, 0xf6, 0x11, 0xe1, 0xfc, 0x2a, 0x34, 0x94, 0x7c, 0x73, 0x69, 0xef, 0x0e, 0x34,
	0x4e, 0x14, 0xb9, 0x52, 0x5e, 0x47, 0x4a, 0xa1, 0x16, 0x71, 0xd3, 0x61, 0xe7, 0xaf, 0x2c, 0x68,
	0x7c, 0xee, 0x31, 0x8e, 0x7c, 0xbc, 0xb6, 0x6b, 0xd8, 0x50, 0x46, 0xa1, 0xa5, 0xdb, 0xe3, 0x27,
	0x3a, 0xe9, 0xc4, 0xd3, 0xd9, 0xdb, 0xc4, 0x53, 0x2d, 0xdd, 0x7a, 0xda, 0xd2, 0x35, 0x6e, 0x83,
	0x46, 0xfe, 0x36, 0x58, 0x81, 0x86, 0xcc, 0x96, 0xc2, 0x40, 0xb9, 0x7d, 0x5d, 0xc0, 0xaa, 0xeb,
	0x23, 0xf4, 0x03, 0xaa, 0xeb, 0x23, 0x74, 0xf3, 0x1f, 0x15, 0x80, 0xad, 0x09, 0x8f, 0x47, 0x97,
	0x5b, 0xd3, 0x64, 0x37, 0x1e, 0xf2, 0x7a, 0xe4, 0x45, 0x11, 0x1d, 0xea, 0xe6, 0x99, 0x02, 0xd3,
	0xe8, 0x51, 0x3d, 0xbb, 0xda, 0xa9, 0x4d, 0x57, 0x3b, 0xf9, 0xe4, 0xac, 0xfe, 0xca, 0xe4, 0x8c,
	0x6c, 0x98, 0xe5, 0x47, 0x43, 0x08, 0x66, 0xab, 0xf2, 0x63, 0x56, 0xe1, 0x71, 0xa9, 0xa5, 0xcf,
	0x0d, 0x68, 0x61, 0xb5, 0x12, 0x47, 0x32, 0x78, 0xc9, 0x17, 0x2a, 0x90, 0x28, 0x11, 0xbc, 0x32,
	0x02, 0x11, 0xa9, 0xba, 0x26, 0x81, 0x78, 0xdf, 0xc3, 0x75, 0xfd, 0x78, 0x4c, 0x7b, 0x0b, 0x6a,
	0x5d, 0x04, 0x30, 0x6a, 0xf8, 0x49, 0xcc, 0xd8, 0x81, 0x56, 0xad, 0x2d, 0x2e, 0xc0, 0xb6, 0x40,
	0x6e, 0x2b, 0xfd, 0x22, 0xbb, 0x94, 0x7b, 0x62, 0x61, 0xd9, 0xb4, 0x4e, 0xe1, 0x79, 0xaa, 0xab,
	0x6f, 0x01, 0x6c, 0x65, 0x8c, 0xf6, 0x60, 0xd9, 0x8f, 0xa3, 0x13, 0x9a, 0x30, 0x99, 0x77, 0x8d,
	0x28, 0x63, 0xde, 0x00, 0x67, 0x5d, 0x05, 0x22, 0xaf, 0x90, 0x28, 0xe6, 0xe1, 0xf3, 0x50, 0x3e,
	0x2b, 0xd8, 0x96, 0xb8, 0x8c, 0x52, 0xc7, 0x9a, 0xeb, 0xe0, 0x6d, 0x42, 0xcb, 0xcb, 0x66, 0xa8,
	0xb3, 0xa7, 0x6c, 0x95, 0x2d, 0xe5, 0x9a, 0x44, 0xce, 0x7f, 0x95, 0xa1, 0xbe, 0x47, 0x19, 0x7b,
	0x2d, 0xe7, 0x9d, 0xff, 0x8c, 0x16, 0x2b, 0xf5, 0x3e, 0x34, 0xc6, 0x43, 0x8f, 0x3f, 0x8f, 0x93,
	0x91, 0xce, 0xba, 0x34, 0x8c, 0x63, 0x09, 0x7d, 0x4e, 0x93, 0x44, 0xd5, 0x7f, 0x4d, 0x37, 0x85,
	0xd1, 0x70, 0x4c, 0xa4, 0xbc, 0x07, 0x34, 0x1a, 0x84, 0x91, 0x7e, 0x4f, 0x69, 0x4b, 0xe4, 0x43,
	0x81, 0x43, 0x0f, 0x54, 0xb5, 0xb8, 0x72, 0x33, 0x0d, 0xe2, 0x08, 0xc7, 0x4a, 0x97, 0x06, 0xa2,
	0x11, 0x50, 0x76, 0x35, 0x28, 0xae, 0x4f, 0xee, 0xf1, 0x09, 0x53, 0x0e, 0xa8, 0x20, 0x2c, 0x59,
	0x45, 0x00, 0x60, 0xaa, 0x3d, 0xd0, 0x91, 0x2f, 0x60, 0x12, 0x27, 0x1b, 0x04, 0x1b, 0xb0, 0xe4,
	0xa3, 0x8e, 0x22, 0x2e, 0x22, 0xac, 0xa6, 0xec, 0x0a, 0xca, 0x45, 0x35, 0x84, 0x11, 0x4e, 0xd1,
	0x8b, 0x1b, 0x59, 0xc8, 0xc0, 0x69, 0x32, 0x52, 0x8e, 0x09, 0x12, 0xb5, 0x4f, 0x93, 0x91, 0xf3,
	0x11, 0x34, 0x9e, 0x6a, 0x65, 0xd4, 0xa1, 0xfc, 0x82, 0x1e, 0xda, 0xef, 0xa0, 0xa3, 0x8d, 0xe2,
	0xc3, 0x70, 0x48, 0xed, 0x12, 0x69, 0x41, 0x3d, 0xa0, 0xec, 0x98, 0xc7, 0x63, 0xbb, 0xe2, 0xbc,
	0x0f, 0xb5, 0x3d, 0xc9, 0x6b, 0x03, 0x2a, 0xf1, 0x98, 0x46, 0x92, 0xd8, 0x1f, 0xc6, 0x8c, 0x06,
	0xb6, 0xe5, 0x7c, 0x1b, 0x16, 0x1f, 0xd0, 0x21, 0xe5, 0x74, 0x8b, 0xf3, 0xe4, 0x02, 0xa9, 0xd5,
	0x54, 0x19, 0xed, 0xfc, 0x86, 0x05, 0x44, 0x88, 0x20, 0x7f, 0x75, 0xa1, 0xd7, 0x3a, 0xa7, 0xbf,
	0x4f, 0xa0, 0x22, 0x3a, 0x24, 0xf2, 0xd1, 0x4c, 0x7c, 0xa3, 0x2b, 0xf0, 0x58, 0xd5, 0x09, 0x25,
	0x1e, 0xe3, 0x09, 0x4d, 0xbc, 0x28, 0x7d, 0xd1, 0x93, 0x80, 0xd3, 0x87, 0xaa, 0x8b, 0x1f, 0x28,
	0xd4, 0x51, 0x3c, 0x49, 0x64, 0xa5, 0x1d, 0x78, 0xa7, 0xb6, 0xe5, 0x1c, 0x81, 0x2d, 0xd8, 0x30,
	0x99, 0x78, 0x3b, 0x3b, 0xfd, 0xc0, 0x82, 0x6b, 0xe9, 0x56, 0x9f, 0x9d, 0xa6, 0x8d, 0x69, 0xbd,
	0xeb, 0x5c, 0x6d, 0xe4, 0xb7, 0xc3, 0xda, 0x2d, 0xe8, 0x08, 0xce, 0xd2, 0x1e, 0xac, 0xce, 0xd6,
	0xca, 0xa2, 0x72, 0x15, 0xdf, 0xce, 0xef, 0x59, 0xb0, 0x90, 0x9d, 0xfc, 0xed, 0x23, 0xea, 0x1f,
	0xbf, 0xea, 0xfe, 0x41, 0x91, 0xd2, 0x19, 0xd9, 0x21, 0x6f, 0x67, 0xc8, 0xf3, 0xce, 0xb9, 0x79,
	0x7f, 0x56, 0xa7, 0xee, 0x4f, 0x19, 0x89, 0x6b, 0x46, 0x24, 0x76, 0xfe, 0xbb, 0x04, 0xb0, 0x57,
	0x6c, 0x2e, 0x94, 0xcd, 0xe6, 0x42, 0xe1, 0x37, 0x14, 0x66, 0x2f, 0xa7, 0x7a, 0x56, 0x2f, 0xa7,
	0x66, 0xf6, 0x72, 0x74, 0x5f, 0xa5, 0x6e, 0xf4, 0x55, 0x3e, 0xd0, 0x5d, 0x11, 0xbc, 0x57, 0x64,
	0x8d, 0x20, 0x35, 0xdf, 0x11, 0x68, 0x0c, 0xd9, 0xa2, 0x4e, 0xb8, 0x0e, 0x90, 0xd1, 0xa9, 0x9b,
	0xbf, 0x99, 0x92, 0x90, 0xaf, 0xe7, 0x2e, 0xd3, 0xa6, 0x19, 0x70, 0xf7, 0x66, 0xdf, 0xa6, 0x18,
	0xf8, 0x92, 0x30, 0x4e, 0x42, 0x7e, 0x2a, 0x22, 0x4d, 0xd5, 0x4d, 0x61, 0xe7, 0x53, 0x68, 0x8a,
	0xaa, 0x57, 0xec, 0x9c, 0x75, 0x98, 0x5a, 0x50, 0xf7, 0x27, 0x49, 0x42, 0x23, 0x6e, 0x5b, 0x78,
	0xb2, 0x87, 0x1e, 0xa7, 0x8c, 0xdb, 0x25, 0x24, 0x19, 0x7b, 0x8c, 0xdb, 0x65, 0xe7, 0x46, 0xa1,
	0x3d, 0xa5, 0x9a, 0x52, 0xef, 0xa8, 0xa6, 0x94, 0xe5, 0xbc, 0x84, 0xea, 0xd6, 0x30, 0xf4, 0xd8,
	0x9b, 0xd6, 0x54, 0xe7, 0x15, 0xdf, 0xcb, 0x50, 0x15, 0x3f, 0x68, 0x50, 0x66, 0x91, 0x80, 0xf3,
	0x47, 0x16, 0xb4, 0x8c, 0x06, 0xf4, 0xdb, 0xfc, 0xc1, 0xcd, 0x8c, 0xde, 0x46, 0x65, 0x66, 0x6f,
	0xc3, 0x48, 0x51, 0xaa, 0xb9, 0x14, 0x65, 0xfd, 0xb1, 0xf1, 0xfb, 0x20, 0x61, 0xe1, 0x86, 0x2c,
	0xe9, 0x65, 0x4c, 0x95, 0x4d, 0x49, 0xdb, 0x42, 0x93, 0xa8, 0x5f, 0xd0, 0xd8, 0x25, 0xbc, 0xf6,
	0xf5, 0x6f, 0x66, 0xec, 0x32, 0x4e, 0x18, 0x86, 0x8c, 0xdb, 0x95, 0xf5, 0x4f, 0x8c, 0xb5, 0xbe,
	0x13, 0x46, 0x01, 0xae, 0xc0, 0x4e, 0x19, 0xa7, 0x23, 0x69, 0xd4, 0x80, 0x3e, 0xf7, 0x26, 0x43,
	0x65, 0x54, 0x7f, 0xc2, 0x78, 0x3c, 0xb2, 0x4b, 0xeb, 0x1f, 0x02, 0xc9, 0xfd, 0xf2, 0x44, 0xa6,
	0x19, 0x62, 0xd5, 0x13, 0xaa, 0x27, 0x62, 0x38, 0x0f, 0x6c, 0x6b, 0xfd, 0x77, 0x5a, 0x50, 0x95,
	0x8d, 0x92, 0x2b, 0xb2, 0x1f, 0xe4, 0x52, 0x2f, 0x50, 0xc1, 0x89, 0xa2, 0xfd, 0xdf, 0x85, 0x25,
	0x44, 0x3f, 0x13, 0x15, 0x5d, 0x36, 0x50, 0xd2, 0x03, 0xb9, 0x57, 0x6d, 0x1a, 0xd8, 0x65, 0x3d,
	0x90, 0x6b, 0x2c, 0xd1, 0xc0, 0xae, 0x90, 0xf7, 0xa0, 0x87, 0x03, 0xb2, 0x1b, 0x58, 0x98, 0x56,
	0xcd, 0x8d, 0x16, 0xe7, 0xd6, 0xf5, 0xa8, 0x68, 0x05, 0x14, 0x47, 0x6b, 0xe4, 0x16, 0xdc, 0x30,
	0x3c, 0x44, 0x86, 0xaa, 0xc2, 0x06, 0x30, 0x8b, 0xa8, 0x28, 0x55, 0x6b, 0x16, 0x91, 0xbc, 0xfb,
	0x32, 0xa2, 0x36, 0xb9, 0x09, 0xd7, 0x8b, 0x44, 0x58, 0xee, 0x67, 0x24, 0x9d, 0x59, 0x24, 0x79,
	0xcd, 0x76, 0xb5, 0x48, 0x46, 0xbf, 0x20, 0x1b, 0x5d, 0xd6, 0x0b, 0xb8, 0x74, 0x14, 0x9f, 0xd0,
	0x47, 0x49, 0x3c, 0x2a, 0x92, 0x5c, 0x21, 0xb7, 0x61, 0x35, 0xd5, 0x98, 0x54, 0x4c, 0xe1, 0x25,
	0x98, 0x06, 0xf6, 0x2d, 0xf2, 0x01, 0x38, 0x79, 0xaa, 0x67, 0x11, 0x9b, 0xa6, 0xbb, 0x4d, 0xfa,
	0x70, 0x55, 0xdb, 0xdf, 0x7c, 0xed, 0xa6, 0x81, 0x7d, 0x87, 0x2c, 0xa8, 0x13, 0x28, 0x9f, 0xdb,
	0xec, 0x75, 0x72, 0x1d, 0x56, 0x10, 0x91, 0x16, 0xb3, 0x39, 0xd1, 0x3e, 0x22, 0x37, 0xe0, 0x9a,
	0x1a, 0xc6, 0x7c, 0x26, 0x8c, 0x06, 0x79, 0x82, 0x0d, 0x4c, 0x66, 0x91, 0x40, 0x35, 0x89, 0xb2,
	0x91, 0x7b, 0x5a, 0xee, 0xec, 0xce, 0x79, 0x36, 0x66, 0x34, 0x31, 0xe4, 0xde, 0x9c, 0x26, 0x29,
	0x5a, 0xe8, 0x63, 0xcd, 0x40, 0x46, 0x92, 0xd7, 0xdd, 0x27, 0xd3, 0x04, 0x79, 0x0e, 0xbf, 0x81,
	0xca, 0xcd, 0x06, 0xc5, 0x2f, 0x5f, 0x9f, 0x18, 0xd9, 0xf5, 0xa3, 0x30, 0xa1, 0x81, 0x7d, 0x1f,
	0x95, 0x6b, 0xdc, 0x8e, 0x46, 0x7a, 0xbe, 0x2b, 0xb3, 0x73, 0x49, 0xf7, 0x4d, 0xf2, 0x3e, 0xf4,
	0xa5, 0x3b, 0x88, 0x3c, 0xb9, 0xe8, 0x76, 0x5b, 0x85, 0xf1, 0xa2, 0xef, 0x7e, 0xa6, 0x7d, 0x45,
	0x8d, 0xe7, 0x79, 0xdd, 0x26, 0xcb, 0xe9, 0x7b, 0x81, 0x94, 0x35, 0x8e, 0xc7, 0xf6, 0x03, 0xc4,
	0x66, 0xbc, 0xed, 0x9d, 0x46, 0x3e, 0x0d, 0xec, 0xe7, 0x64, 0xc9, 0xbc, 0xcf, 0x25, 0x7b, 0x03,
	0xb2, 0x08, 0x1d, 0x23, 0x15, 0xa2, 0x81, 0x1d, 0x68, 0x93, 0xab, 0x57, 0x15, 0xfb, 0x11, 0x56,
	0x19, 0xb9, 0xa7, 0xf5, 0xad, 0x20, 0xa0, 0x81, 0xfd, 0x8b, 0x9a, 0x50, 0xca, 0x14, 0xd8, 0xdf,
	0x26, 0x5d, 0x00, 0xc1, 0xab, 0xdc, 0x91, 0x12, 0x1b, 0xda, 0x92, 0x00, 0xed, 0x48, 0x03, 0x3b,
	0xd4, 0x98, 0x2f, 0x3e, 0x56, 0x34, 0x5f, 0x92, 0x36, 0xd4, 0x11, 0xf3, 0x38, 0x3e, 0xb4, 0xff,
	0xde, 0x22, 0xcb, 0xb0, 0x20, 0xd9, 0x61, 0xf1, 0xf0, 0x84, 0x06, 0x88, 0xfd, 0x07, 0x8b, 0x5c,
	0x97, 0x3a, 0xd0, 0x58, 0x23, 0x8c, 0x04, 0xf6, 0x3f, 0x5a, 0x64, 0x09, 0xba, 0x82, 0x3f, 0xbc,
	0x33, 0x24, 0x6f, 0x3f, 0xb4, 0xc8, 0x15, 0xf9, 0x2c, 0x20, 0x90, 0x0f, 0x54, 0xd0, 0xfb, 0x51,
	0x8a, 0xce, 0x2d, 0xf1, 0x4f, 0x16, 0xb9, 0x26, 0x8f, 0xc0, 0xf4, 0xaf, 0x1c, 0xec, 0x7f, 0xb6,
	0xc8, 0x6d, 0x19, 0x19, 0xce, 0xf9, 0x9d, 0x81, 0xfd, 0xe3, 0x8c, 0x0b, 0x4d, 0x15, 0xd8, 0xff,
	0x62, 0x91, 0x45, 0x29, 0xaf, 0x38, 0x56, 0x28, 0xcc, 0xbf, 0x5a, 0xe4, 0x3d, 0x78, 0x37, 0x7f,
	0x2a, 0x9f, 0x4e, 0x0e, 0x87, 0x21, 0x3b, 0xa2, 0x81, 0xfd, 0x6f, 0xd6, 0xfa, 0xfc, 0x8f, 0x45,
	0xeb, 0x77, 0x30, 0x8b, 0x53, 0xc9, 0x81, 0xb8, 0x6f, 0x3a, 0xd0, 0x4c, 0x93, 0x47, 0xfb, 0x1d,
	0xd2, 0x84, 0xaa, 0xc8, 0x36, 0x6c, 0x6b, 0xfd, 0xae, 0x69, 0xfa, 0x3d, 0x51, 0xc6, 0xda, 0xe2,
	0xd5, 0x35, 0xf5, 0x5a, 0x99, 0x12, 0xe0, 0x65, 0x68, 0x97, 0x37, 0xff, 0xa2, 0x94, 0x3e, 0xee,
	0x49, 0x97, 0x1e, 0x24, 0xe4, 0x9b, 0xfa, 0x67, 0x4c, 0xfa, 0x32, 0x9e, 0xf1, 0xec, 0xdd, 0x9f,
	0x81, 0xc3, 0x89, 0xd2, 0x43, 0x2e, 0x3a, 0xf1, 0x1e, 0xb4, 0xf1, 0xec, 0xee, 0xe9, 0x9f, 0x47,
	0x82, 0xbe, 0xf0, 0x77, 0x82, 0xfe, 0xd2, 0x34, 0x3d, 0x23, 0xeb, 0xd0, 0x91, 0x96, 0xd6, 0x3b,
	0x99, 0x33, 0x3a, 0xfa, 0xfb, 0xe1, 0x68, 0xcc, 0x4f, 0xc9, 0x5d, 0x68, 0xe1, 0x59, 0x9a, 0x45,
	0x39, 0x8b, 0x97, 0x3b, 0x50, 0x79, 0x1a, 0x46, 0x03, 0xb2, 0xa4, 0xe9, 0x9e, 0x8a, 0xd0, 0x26,
	0x0e, 0x4d, 0xbf, 0x9d, 0x22, 0xe3, 0x68, 0xb0, 0xf9, 0xbf, 0x16, 0x80, 0xea, 0x56, 0xa1, 0xde,
	0xd6, 0xa1, 0x8d, 0x1b, 0xa5, 0x7d, 0x4e, 0x73, 0xa7, 0x42, 0x63, 0x90, 0xdc, 0x85, 0x8e, 0x49,
	0xcb, 0x48, 0x2b, 0x23, 0x66, 0xfd, 0x85, 0x3c, 0x35, 0x23, 0x77, 0xa4, 0x0c, 0x2a, 0xd6, 0xce,
	0x5a, 0x39, 0xed, 0x8f, 0xdd, 0x95, 0x1d, 0xf2, 0xfd, 0x78, 0x9c, 0x76, 0xe3, 0x66, 0x90, 0xa7,
	0x63, 0x17, 0x10, 0xf7, 0xab, 0xaa, 0x3c, 0xc0, 0x28, 0xeb, 0xb7, 0xa0, 0x25, 0x6f, 0x68, 0xf9,
	0xf3, 0xd1, 0x77, 0xa7, 0x5f, 0xb8, 0xe4, 0x0a, 0x57, 0x67, 0x3f, 0x7d, 0x91, 0xfb, 0x50, 0x57,
	0xbf, 0x0e, 0x21, 0xea, 0x85, 0x31, 0xff, 0x9b, 0x98, 0xfe, 0x95, 0x02, 0x56, 0x95, 0x2f, 0x1b,
	0x50, 0x57, 0x77, 0xa9, 0x9e, 0x97, 0xff, 0xeb, 0x89, 0xa2, 0xf1, 0x6f, 0x03, 0x48, 0x5f, 0x16,
	0xbf, 0x2a, 0x36, 0xfa, 0xa4, 0x7d, 0x43, 0x29, 0x48, 0x25, 0x1d, 0xf7, 0x5c, 0x2a, 0x07, 0x1a,
	0x68, 0x04, 0x45, 0x93, 0xa9, 0xd4, 0xa0, 0x27, 0x77, 0xd0, 0x07, 0xb2, 0xdb, 0xfc, 0x3c, 0xbf,
	0xfc, 0x59, 0x68, 0x19, 0x65, 0x32, 0xe9, 0xe9, 0xee, 0x5a, 0xb1, 0x72, 0xd6, 0x27, 0x20, 0x5f,
	0xc7, 0x7d, 0x0a, 0xcd, 0xb4, 0xe4, 0x24, 0x57, 0x0d, 0x8a, 0x57, 0xce, 0x7c, 0x02, 0xcb, 0xb3,
	0x8a, 0x55, 0x72, 0xb3, 0xb0, 0xc8, 0x74, 0x21, 0x3b, 0x7b, 0xbd, 0xf9, 0x3d, 0x88, 0x7c, 0x00,
	0x8d, 0xad, 0x20, 0x90, 0x25, 0x86, 0x7a, 0xf7, 0x11, 0x40, 0x51, 0x35, 0xdf, 0x00, 0x7b, 0x37,
	0x3e, 0x91, 0xd1, 0xd7, 0xe7, 0xe1, 0x49, 0xc8, 0x4f, 0x75, 0x2c, 0x31, 0x7f, 0x08, 0x5a, 0x98,
	0xb6, 0xf9, 0x97, 0x25, 0xe8, 0x64, 0xc1, 0x0f, 0xdd, 0xf4, 0xeb, 0xf2, 0x30, 0x98, 0x1d, 0x32,
	0xd3, 0x22, 0x8b, 0xc5, 0xae, 0x17, 0x23, 0xf7, 0xc1, 0x96, 0xae, 0x60, 0xb4, 0x6b, 0xa7, 0x9a,
	0x63, 0xfd, 0x29, 0x0c, 0xb9, 0x0b, 0xb6, 0xea, 0x9f, 0x64, 0xb8, 0x73, 0x8c, 0xbf, 0x01, 0x5d,
	0xf4, 0xa5, 0x33, 0x88, 0xa7, 0x97, 0xbf, 0x0f, 0xb6, 0xf4, 0xe3, 0x0b, 0xb2, 0x75, 0x81, 0xe3,
	0xfd, 0x37, 0x16, 0x80, 0xca, 0x3d, 0x50, 0x75, 0x77, 0xb3, 0x5b, 0x40, 0xf6, 0xfd, 0x3a, 0x3a,
	0x58, 0x0a, 0xb0, 0x9f, 0x07, 0xc9, 0x87, 0x3a, 0xca, 0xce, 0x43, 0x7c, 0x37, 0xbb, 0x28, 0xe6,
	0x21, 0xbf, 0x80, 0x10, 0xff, 0x53, 0x82, 0x76, 0xea, 0xb6, 0x28, 0xc6, 0x43, 0xe8, 0x09, 0x0f,
	0x98, 0xf5, 0x57, 0x24, 0x79, 0x9b, 0xf4, 0xfb, 0x67, 0xfe, 0x75, 0x08, 0x23, 0xbf, 0x0c, 0x2b,
	0x4a, 0xff, 0x33, 0xfe, 0x20, 0xe7, 0xec, 0x3f, 0x2b, 0xe9, 0x9f, 0x3d, 0x84, 0x4b, 0x2a, 0x4f,
	0xbb, 0xb4, 0x25, 0xb7, 0x61, 0x25, 0x6b, 0xe2, 0x15, 0x07, 0x55, 0x8c, 0x9e, 0xea, 0xf2, 0x15,
	0x5d, 0x73, 0x7e, 0x6d, 0xff, 0x24, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x10, 0xbd, 0x26, 0x05, 0x37,
	0x00, 0x00,
}
