// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

package user

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AttributeType int32

const (
	AttributeType_text     AttributeType = 0
	AttributeType_number   AttributeType = 1
	AttributeType_boolean  AttributeType = 2
	AttributeType_datetime AttributeType = 3
	AttributeType_list     AttributeType = 4
)

var AttributeType_name = map[int32]string{
	0: "text",
	1: "number",
	2: "boolean",
	3: "datetime",
	4: "list",
}

var AttributeType_value = map[string]int32{
	"text":     0,
	"number":   1,
	"boolean":  2,
	"datetime": 3,
	"list":     4,
}

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return proto.EnumName(AttributeType_name, int32(x))
}

func (x *AttributeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeType_value, data, "AttributeType")
	if err != nil {
		return err
	}
	*x = AttributeType(value)
	return nil
}

func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{0}
}

type AttributeKind int32

const (
	AttributeKind_system  AttributeKind = 0
	AttributeKind_default AttributeKind = 1
	AttributeKind_custom  AttributeKind = 2
)

var AttributeKind_name = map[int32]string{
	0: "system",
	1: "default",
	2: "custom",
}

var AttributeKind_value = map[string]int32{
	"system":  0,
	"default": 1,
	"custom":  2,
}

func (x AttributeKind) Enum() *AttributeKind {
	p := new(AttributeKind)
	*p = x
	return p
}

func (x AttributeKind) String() string {
	return proto.EnumName(AttributeKind_name, int32(x))
}

func (x *AttributeKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeKind_value, data, "AttributeKind")
	if err != nil {
		return err
	}
	*x = AttributeKind(value)
	return nil
}

func (AttributeKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{1}
}

type AttributeDataState int32

const (
	AttributeDataState_live    AttributeDataState = 0
	AttributeDataState_deleted AttributeDataState = 1
)

var AttributeDataState_name = map[int32]string{
	0: "live",
	1: "deleted",
}

var AttributeDataState_value = map[string]int32{
	"live":    0,
	"deleted": 1,
}

func (x AttributeDataState) Enum() *AttributeDataState {
	p := new(AttributeDataState)
	*p = x
	return p
}

func (x AttributeDataState) String() string {
	return proto.EnumName(AttributeDataState_name, int32(x))
}

func (x *AttributeDataState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeDataState_value, data, "AttributeDataState")
	if err != nil {
		return err
	}
	*x = AttributeDataState(value)
	return nil
}

func (AttributeDataState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{2}
}

type Event int32

const (
	Event_UserReadRequested                  Event = 0
	Event_UserUpdateRequested                Event = 2
	Event_UserCreateRequested                Event = 3
	Event_UserSearchRequested                Event = 4
	Event_UserEventCreateRequested           Event = 5
	Event_UserEventSearchRequested           Event = 7
	Event_UserTopicSearchRequested           Event = 6
	Event_UserSegmentationCreateRequested    Event = 10
	Event_UserSegmentationUpdateRequested    Event = 11
	Event_UserSegmentationDeleteRequested    Event = 12
	Event_UserSegmentationListRequested      Event = 13
	Event_UserSegmentationReadRequested      Event = 14
	Event_UserAddToMyListRequested           Event = 20
	Event_UserRemoveFromMyListRequested      Event = 21
	Event_UserEventTopicSubscribeRequested   Event = 35
	Event_UserEventTopicUnsubscribeRequested Event = 36
	Event_UserReadTopicRequested             Event = 41
	Event_UserSubizId                        Event = 42
	Event_UserPresenceReadRequested          Event = 44
	Event_UserPreviewingReadRequested        Event = 46
	Event_UserListTopRequested               Event = 47
	Event_UserAutomationUpsertRequested      Event = 50
	Event_UserAutomationDeleteRequested      Event = 51
	Event_UserAutomationListRequested        Event = 52
	Event_UserAutomationReadRequested        Event = 53
	Event_AutomationAgentNotificationFired   Event = 54
	Event_AutomationConversationMessageFired Event = 55
	Event_UserSessionUpdateRequested         Event = 65
	Event_UserSessionCreateRequested         Event = 66
	Event_UserSessionReadRequested           Event = 67
	Event_SegmentationLoop                   Event = 68
	Event_AutomationSynced                   Event = 102
	Event_AutomationFired                    Event = 103
	Event_UserRequested                      Event = 100
	Event_UserCreated                        Event = 70
	Event_UserAttributeAdded                 Event = 71
	Event_UserUpdated                        Event = 72
	Event_UserSynced                         Event = 101
	Event_UserUpserted                       Event = 105
	Event_UserV3Synced                       Event = 106
	Event_UserJob                            Event = 199
	Event_UserResolvedJob                    Event = 200
	Event_UserResolvedJob2                   Event = 198
	Event_UserResolvedEventCreated           Event = 201
	Event_UserAliasAdded                     Event = 202
	Event_UserAliasDeleted                   Event = 203
	Event_UserEventCreated                   Event = 204
	Event_UserAggregated                     Event = 207
	Event_UserTopicJob                       Event = 208
	Event_UserEventTopicPublished            Event = 209
	Event_UserNotifyMyUserRequested          Event = 210
	Event_UserSegmentPickRequested           Event = 211
	Event_UserSegmentUnpickRequested         Event = 212
	Event_UserAggregateSegmentAttrCount      Event = 214
	Event_UserAggregateUpdateInteracted      Event = 215
	Event_UserAggregateSegmentCount          Event = 216
	Event_UserSegmentAggregated              Event = 217
)

var Event_name = map[int32]string{
	0:   "UserReadRequested",
	2:   "UserUpdateRequested",
	3:   "UserCreateRequested",
	4:   "UserSearchRequested",
	5:   "UserEventCreateRequested",
	7:   "UserEventSearchRequested",
	6:   "UserTopicSearchRequested",
	10:  "UserSegmentationCreateRequested",
	11:  "UserSegmentationUpdateRequested",
	12:  "UserSegmentationDeleteRequested",
	13:  "UserSegmentationListRequested",
	14:  "UserSegmentationReadRequested",
	20:  "UserAddToMyListRequested",
	21:  "UserRemoveFromMyListRequested",
	35:  "UserEventTopicSubscribeRequested",
	36:  "UserEventTopicUnsubscribeRequested",
	41:  "UserReadTopicRequested",
	42:  "UserSubizId",
	44:  "UserPresenceReadRequested",
	46:  "UserPreviewingReadRequested",
	47:  "UserListTopRequested",
	50:  "UserAutomationUpsertRequested",
	51:  "UserAutomationDeleteRequested",
	52:  "UserAutomationListRequested",
	53:  "UserAutomationReadRequested",
	54:  "AutomationAgentNotificationFired",
	55:  "AutomationConversationMessageFired",
	65:  "UserSessionUpdateRequested",
	66:  "UserSessionCreateRequested",
	67:  "UserSessionReadRequested",
	68:  "SegmentationLoop",
	102: "AutomationSynced",
	103: "AutomationFired",
	100: "UserRequested",
	70:  "UserCreated",
	71:  "UserAttributeAdded",
	72:  "UserUpdated",
	101: "UserSynced",
	105: "UserUpserted",
	106: "UserV3Synced",
	199: "UserJob",
	200: "UserResolvedJob",
	198: "UserResolvedJob2",
	201: "UserResolvedEventCreated",
	202: "UserAliasAdded",
	203: "UserAliasDeleted",
	204: "UserEventCreated",
	207: "UserAggregated",
	208: "UserTopicJob",
	209: "UserEventTopicPublished",
	210: "UserNotifyMyUserRequested",
	211: "UserSegmentPickRequested",
	212: "UserSegmentUnpickRequested",
	214: "UserAggregateSegmentAttrCount",
	215: "UserAggregateUpdateInteracted",
	216: "UserAggregateSegmentCount",
	217: "UserSegmentAggregated",
}

var Event_value = map[string]int32{
	"UserReadRequested":                  0,
	"UserUpdateRequested":                2,
	"UserCreateRequested":                3,
	"UserSearchRequested":                4,
	"UserEventCreateRequested":           5,
	"UserEventSearchRequested":           7,
	"UserTopicSearchRequested":           6,
	"UserSegmentationCreateRequested":    10,
	"UserSegmentationUpdateRequested":    11,
	"UserSegmentationDeleteRequested":    12,
	"UserSegmentationListRequested":      13,
	"UserSegmentationReadRequested":      14,
	"UserAddToMyListRequested":           20,
	"UserRemoveFromMyListRequested":      21,
	"UserEventTopicSubscribeRequested":   35,
	"UserEventTopicUnsubscribeRequested": 36,
	"UserReadTopicRequested":             41,
	"UserSubizId":                        42,
	"UserPresenceReadRequested":          44,
	"UserPreviewingReadRequested":        46,
	"UserListTopRequested":               47,
	"UserAutomationUpsertRequested":      50,
	"UserAutomationDeleteRequested":      51,
	"UserAutomationListRequested":        52,
	"UserAutomationReadRequested":        53,
	"AutomationAgentNotificationFired":   54,
	"AutomationConversationMessageFired": 55,
	"UserSessionUpdateRequested":         65,
	"UserSessionCreateRequested":         66,
	"UserSessionReadRequested":           67,
	"SegmentationLoop":                   68,
	"AutomationSynced":                   102,
	"AutomationFired":                    103,
	"UserRequested":                      100,
	"UserCreated":                        70,
	"UserAttributeAdded":                 71,
	"UserUpdated":                        72,
	"UserSynced":                         101,
	"UserUpserted":                       105,
	"UserV3Synced":                       106,
	"UserJob":                            199,
	"UserResolvedJob":                    200,
	"UserResolvedJob2":                   198,
	"UserResolvedEventCreated":           201,
	"UserAliasAdded":                     202,
	"UserAliasDeleted":                   203,
	"UserEventCreated":                   204,
	"UserAggregated":                     207,
	"UserTopicJob":                       208,
	"UserEventTopicPublished":            209,
	"UserNotifyMyUserRequested":          210,
	"UserSegmentPickRequested":           211,
	"UserSegmentUnpickRequested":         212,
	"UserAggregateSegmentAttrCount":      214,
	"UserAggregateUpdateInteracted":      215,
	"UserAggregateSegmentCount":          216,
	"UserSegmentAggregated":              217,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{3}
}

type JoinOperator int32

const (
	JoinOperator_none JoinOperator = 0
	JoinOperator_and  JoinOperator = 1
	JoinOperator_or   JoinOperator = 2
)

var JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}

var JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x JoinOperator) Enum() *JoinOperator {
	p := new(JoinOperator)
	*p = x
	return p
}

func (x JoinOperator) String() string {
	return proto.EnumName(JoinOperator_name, int32(x))
}

func (x *JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinOperator_value, data, "JoinOperator")
	if err != nil {
		return err
	}
	*x = JoinOperator(value)
	return nil
}

func (JoinOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{4}
}

type ConditionType int32

const (
	ConditionType_attribute ConditionType = 0
	ConditionType_event     ConditionType = 1
)

var ConditionType_name = map[int32]string{
	0: "attribute",
	1: "event",
}

var ConditionType_value = map[string]int32{
	"attribute": 0,
	"event":     1,
}

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return proto.EnumName(ConditionType_name, int32(x))
}

func (x *ConditionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConditionType_value, data, "ConditionType")
	if err != nil {
		return err
	}
	*x = ConditionType(value)
	return nil
}

func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{5}
}

type AutomationScope int32

const (
	AutomationScope_conversation AutomationScope = 2
	AutomationScope_user         AutomationScope = 3
)

var AutomationScope_name = map[int32]string{
	2: "conversation",
	3: "user",
}

var AutomationScope_value = map[string]int32{
	"conversation": 2,
	"user":         3,
}

func (x AutomationScope) Enum() *AutomationScope {
	p := new(AutomationScope)
	*p = x
	return p
}

func (x AutomationScope) String() string {
	return proto.EnumName(AutomationScope_name, int32(x))
}

func (x *AutomationScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AutomationScope_value, data, "AutomationScope")
	if err != nil {
		return err
	}
	*x = AutomationScope(value)
	return nil
}

func (AutomationScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{6}
}

type Segmentation_State int32

const (
	Segmentation_active   Segmentation_State = 0
	Segmentation_inactive Segmentation_State = 1
)

var Segmentation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}

var Segmentation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Segmentation_State) Enum() *Segmentation_State {
	p := new(Segmentation_State)
	*p = x
	return p
}

func (x Segmentation_State) String() string {
	return proto.EnumName(Segmentation_State_name, int32(x))
}

func (x *Segmentation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Segmentation_State_value, data, "Segmentation_State")
	if err != nil {
		return err
	}
	*x = Segmentation_State(value)
	return nil
}

func (Segmentation_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{25, 0}
}

type Segmentation_Scope int32

const (
	Segmentation_agent   Segmentation_Scope = 0
	Segmentation_account Segmentation_Scope = 1
)

var Segmentation_Scope_name = map[int32]string{
	0: "agent",
	1: "account",
}

var Segmentation_Scope_value = map[string]int32{
	"agent":   0,
	"account": 1,
}

func (x Segmentation_Scope) Enum() *Segmentation_Scope {
	p := new(Segmentation_Scope)
	*p = x
	return p
}

func (x Segmentation_Scope) String() string {
	return proto.EnumName(Segmentation_Scope_name, int32(x))
}

func (x *Segmentation_Scope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Segmentation_Scope_value, data, "Segmentation_Scope")
	if err != nil {
		return err
	}
	*x = Segmentation_Scope(value)
	return nil
}

func (Segmentation_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{25, 1}
}

type Condition_JoinOperator int32

const (
	Condition_none Condition_JoinOperator = 0
	Condition_and  Condition_JoinOperator = 1
	Condition_or   Condition_JoinOperator = 2
)

var Condition_JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}

var Condition_JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x Condition_JoinOperator) Enum() *Condition_JoinOperator {
	p := new(Condition_JoinOperator)
	*p = x
	return p
}

func (x Condition_JoinOperator) String() string {
	return proto.EnumName(Condition_JoinOperator_name, int32(x))
}

func (x *Condition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Condition_JoinOperator_value, data, "Condition_JoinOperator")
	if err != nil {
		return err
	}
	*x = Condition_JoinOperator(value)
	return nil
}

func (Condition_JoinOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{26, 0}
}

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

var Automation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}

var Automation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}

func (x Automation_State) String() string {
	return proto.EnumName(Automation_State_name, int32(x))
}

func (x *Automation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_State_value, data, "Automation_State")
	if err != nil {
		return err
	}
	*x = Automation_State(value)
	return nil
}

func (Automation_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{38, 0}
}

type Automation_ActionType int32

const (
	Automation_conversation_message Automation_ActionType = 0
	Automation_agent_notification   Automation_ActionType = 1
)

var Automation_ActionType_name = map[int32]string{
	0: "conversation_message",
	1: "agent_notification",
}

var Automation_ActionType_value = map[string]int32{
	"conversation_message": 0,
	"agent_notification":   1,
}

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}

func (x Automation_ActionType) String() string {
	return proto.EnumName(Automation_ActionType_name, int32(x))
}

func (x *Automation_ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_ActionType_value, data, "Automation_ActionType")
	if err != nil {
		return err
	}
	*x = Automation_ActionType(value)
	return nil
}

func (Automation_ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{38, 1}
}

type CountSegmentationUserByAttributeRequest_Range int32

const (
	CountSegmentationUserByAttributeRequest_hour CountSegmentationUserByAttributeRequest_Range = 0
	CountSegmentationUserByAttributeRequest_day  CountSegmentationUserByAttributeRequest_Range = 1
)

var CountSegmentationUserByAttributeRequest_Range_name = map[int32]string{
	0: "hour",
	1: "day",
}

var CountSegmentationUserByAttributeRequest_Range_value = map[string]int32{
	"hour": 0,
	"day":  1,
}

func (x CountSegmentationUserByAttributeRequest_Range) Enum() *CountSegmentationUserByAttributeRequest_Range {
	p := new(CountSegmentationUserByAttributeRequest_Range)
	*p = x
	return p
}

func (x CountSegmentationUserByAttributeRequest_Range) String() string {
	return proto.EnumName(CountSegmentationUserByAttributeRequest_Range_name, int32(x))
}

func (x *CountSegmentationUserByAttributeRequest_Range) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CountSegmentationUserByAttributeRequest_Range_value, data, "CountSegmentationUserByAttributeRequest_Range")
	if err != nil {
		return err
	}
	*x = CountSegmentationUserByAttributeRequest_Range(value)
	return nil
}

func (CountSegmentationUserByAttributeRequest_Range) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{41, 0}
}

type SCondition_EventTime int32

const (
	SCondition_none    SCondition_EventTime = 0
	SCondition_current SCondition_EventTime = 1
	SCondition_latest  SCondition_EventTime = 2
	SCondition_past    SCondition_EventTime = 3
)

var SCondition_EventTime_name = map[int32]string{
	0: "none",
	1: "current",
	2: "latest",
	3: "past",
}

var SCondition_EventTime_value = map[string]int32{
	"none":    0,
	"current": 1,
	"latest":  2,
	"past":    3,
}

func (x SCondition_EventTime) Enum() *SCondition_EventTime {
	p := new(SCondition_EventTime)
	*p = x
	return p
}

func (x SCondition_EventTime) String() string {
	return proto.EnumName(SCondition_EventTime_name, int32(x))
}

func (x *SCondition_EventTime) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SCondition_EventTime_value, data, "SCondition_EventTime")
	if err != nil {
		return err
	}
	*x = SCondition_EventTime(value)
	return nil
}

func (SCondition_EventTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{48, 0}
}

type SCondition_JoinOperator int32

const (
	SCondition_and SCondition_JoinOperator = 0
	SCondition_or  SCondition_JoinOperator = 1
)

var SCondition_JoinOperator_name = map[int32]string{
	0: "and",
	1: "or",
}

var SCondition_JoinOperator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SCondition_JoinOperator) Enum() *SCondition_JoinOperator {
	p := new(SCondition_JoinOperator)
	*p = x
	return p
}

func (x SCondition_JoinOperator) String() string {
	return proto.EnumName(SCondition_JoinOperator_name, int32(x))
}

func (x *SCondition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SCondition_JoinOperator_value, data, "SCondition_JoinOperator")
	if err != nil {
		return err
	}
	*x = SCondition_JoinOperator(value)
	return nil
}

func (SCondition_JoinOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{48, 1}
}

type AddToMyRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds             []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddToMyRequest) Reset()         { *m = AddToMyRequest{} }
func (m *AddToMyRequest) String() string { return proto.CompactTextString(m) }
func (*AddToMyRequest) ProtoMessage()    {}
func (*AddToMyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{0}
}

func (m *AddToMyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddToMyRequest.Unmarshal(m, b)
}
func (m *AddToMyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddToMyRequest.Marshal(b, m, deterministic)
}
func (m *AddToMyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToMyRequest.Merge(m, src)
}
func (m *AddToMyRequest) XXX_Size() int {
	return xxx_messageInfo_AddToMyRequest.Size(m)
}
func (m *AddToMyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToMyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddToMyRequest proto.InternalMessageInfo

func (m *AddToMyRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AddToMyRequest) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *AddToMyRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MyAgents struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds             []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	Updated              *int64          `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MyAgents) Reset()         { *m = MyAgents{} }
func (m *MyAgents) String() string { return proto.CompactTextString(m) }
func (*MyAgents) ProtoMessage()    {}
func (*MyAgents) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{1}
}

func (m *MyAgents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyAgents.Unmarshal(m, b)
}
func (m *MyAgents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyAgents.Marshal(b, m, deterministic)
}
func (m *MyAgents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyAgents.Merge(m, src)
}
func (m *MyAgents) XXX_Size() int {
	return xxx_messageInfo_MyAgents.Size(m)
}
func (m *MyAgents) XXX_DiscardUnknown() {
	xxx_messageInfo_MyAgents.DiscardUnknown(m)
}

var xxx_messageInfo_MyAgents proto.InternalMessageInfo

func (m *MyAgents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyAgents) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MyAgents) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MyAgents) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *MyAgents) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type UserCreateResult struct {
	Id                   *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Mask                 *string  `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCreateResult) Reset()         { *m = UserCreateResult{} }
func (m *UserCreateResult) String() string { return proto.CompactTextString(m) }
func (*UserCreateResult) ProtoMessage()    {}
func (*UserCreateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{2}
}

func (m *UserCreateResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateResult.Unmarshal(m, b)
}
func (m *UserCreateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateResult.Marshal(b, m, deterministic)
}
func (m *UserCreateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateResult.Merge(m, src)
}
func (m *UserCreateResult) XXX_Size() int {
	return xxx_messageInfo_UserCreateResult.Size(m)
}
func (m *UserCreateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateResult proto.InternalMessageInfo

func (m *UserCreateResult) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserCreateResult) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type MyUser struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId              *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	User                 *User           `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Unread               *int32          `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
	Updated              *int64          `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	AccountId            *string         `protobuf:"bytes,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MyUser) Reset()         { *m = MyUser{} }
func (m *MyUser) String() string { return proto.CompactTextString(m) }
func (*MyUser) ProtoMessage()    {}
func (*MyUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{3}
}

func (m *MyUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyUser.Unmarshal(m, b)
}
func (m *MyUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyUser.Marshal(b, m, deterministic)
}
func (m *MyUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyUser.Merge(m, src)
}
func (m *MyUser) XXX_Size() int {
	return xxx_messageInfo_MyUser.Size(m)
}
func (m *MyUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MyUser.DiscardUnknown(m)
}

var xxx_messageInfo_MyUser proto.InternalMessageInfo

func (m *MyUser) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyUser) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *MyUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MyUser) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

func (m *MyUser) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *MyUser) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type AttributeDefinition struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name                 *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description          *string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Type                 *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ListItems            []string        `protobuf:"bytes,6,rep,name=list_items,json=listItems" json:"list_items,omitempty"`
	Key                  *string         `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	Kind                 *string         `protobuf:"bytes,8,opt,name=kind" json:"kind,omitempty"`
	Updated              *int64          `protobuf:"varint,9,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AttributeDefinition) Reset()         { *m = AttributeDefinition{} }
func (m *AttributeDefinition) String() string { return proto.CompactTextString(m) }
func (*AttributeDefinition) ProtoMessage()    {}
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{4}
}

func (m *AttributeDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeDefinition.Unmarshal(m, b)
}
func (m *AttributeDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeDefinition.Marshal(b, m, deterministic)
}
func (m *AttributeDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeDefinition.Merge(m, src)
}
func (m *AttributeDefinition) XXX_Size() int {
	return xxx_messageInfo_AttributeDefinition.Size(m)
}
func (m *AttributeDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeDefinition proto.InternalMessageInfo

func (m *AttributeDefinition) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeDefinition) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AttributeDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AttributeDefinition) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AttributeDefinition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *AttributeDefinition) GetListItems() []string {
	if m != nil {
		return m.ListItems
	}
	return nil
}

func (m *AttributeDefinition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AttributeDefinition) GetKind() string {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ""
}

func (m *AttributeDefinition) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type AttributeDefinitions struct {
	Ctx                  *common.Context        `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Attributes           []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AttributeDefinitions) Reset()         { *m = AttributeDefinitions{} }
func (m *AttributeDefinitions) String() string { return proto.CompactTextString(m) }
func (*AttributeDefinitions) ProtoMessage()    {}
func (*AttributeDefinitions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{5}
}

func (m *AttributeDefinitions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeDefinitions.Unmarshal(m, b)
}
func (m *AttributeDefinitions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeDefinitions.Marshal(b, m, deterministic)
}
func (m *AttributeDefinitions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeDefinitions.Merge(m, src)
}
func (m *AttributeDefinitions) XXX_Size() int {
	return xxx_messageInfo_AttributeDefinitions.Size(m)
}
func (m *AttributeDefinitions) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeDefinitions.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeDefinitions proto.InternalMessageInfo

func (m *AttributeDefinitions) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeDefinitions) GetAttributes() []*AttributeDefinition {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type AttributeData struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Key                  *string         `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	State                *string         `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Created              *int64          `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Modified             *int64          `protobuf:"varint,8,opt,name=modified" json:"modified,omitempty"`
	Text                 *string         `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	Number               *float64        `protobuf:"fixed64,11,opt,name=number" json:"number,omitempty"`
	Boolean              *bool           `protobuf:"varint,12,opt,name=boolean" json:"boolean,omitempty"`
	Datetime             *string         `protobuf:"bytes,13,opt,name=datetime" json:"datetime,omitempty"`
	List                 []string        `protobuf:"bytes,14,rep,name=list" json:"list,omitempty"`
	Setter               *string         `protobuf:"bytes,16,opt,name=setter" json:"setter,omitempty"`
	SetterType           *string         `protobuf:"bytes,17,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AttributeData) Reset()         { *m = AttributeData{} }
func (m *AttributeData) String() string { return proto.CompactTextString(m) }
func (*AttributeData) ProtoMessage()    {}
func (*AttributeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{6}
}

func (m *AttributeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeData.Unmarshal(m, b)
}
func (m *AttributeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeData.Marshal(b, m, deterministic)
}
func (m *AttributeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeData.Merge(m, src)
}
func (m *AttributeData) XXX_Size() int {
	return xxx_messageInfo_AttributeData.Size(m)
}
func (m *AttributeData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeData.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeData proto.InternalMessageInfo

func (m *AttributeData) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AttributeData) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AttributeData) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AttributeData) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AttributeData) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *AttributeData) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *AttributeData) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *AttributeData) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *AttributeData) GetNumber() float64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *AttributeData) GetBoolean() bool {
	if m != nil && m.Boolean != nil {
		return *m.Boolean
	}
	return false
}

func (m *AttributeData) GetDatetime() string {
	if m != nil && m.Datetime != nil {
		return *m.Datetime
	}
	return ""
}

func (m *AttributeData) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AttributeData) GetSetter() string {
	if m != nil && m.Setter != nil {
		return *m.Setter
	}
	return ""
}

func (m *AttributeData) GetSetterType() string {
	if m != nil && m.SetterType != nil {
		return *m.SetterType
	}
	return ""
}

type User struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Traces    []*Trace        `protobuf:"bytes,11,rep,name=traces" json:"traces,omitempty"`
	// 	repeated string alias = 12;
	IsBan      *bool            `protobuf:"varint,14,opt,name=is_ban,json=isBan" json:"is_ban,omitempty"`
	Attributes []*AttributeData `protobuf:"bytes,18,rep,name=attributes" json:"attributes,omitempty"`
	Segments   []string         `protobuf:"bytes,19,rep,name=segments" json:"segments,omitempty"`
	SubizId    *string          `protobuf:"bytes,25,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	Aliases    []string         `protobuf:"bytes,30,rep,name=aliases" json:"aliases,omitempty"`
	Par        *int32           `protobuf:"varint,34,opt,name=par" json:"par,omitempty"`
	// optional int32 modified_hour = 35;
	Modified             *int64   `protobuf:"varint,36,opt,name=modified" json:"modified,omitempty"`
	ModifiedWeek         *int32   `protobuf:"varint,37,opt,name=modified_week,json=modifiedWeek" json:"modified_week,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{7}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *User) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *User) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *User) GetIsBan() bool {
	if m != nil && m.IsBan != nil {
		return *m.IsBan
	}
	return false
}

func (m *User) GetAttributes() []*AttributeData {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *User) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *User) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *User) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *User) GetPar() int32 {
	if m != nil && m.Par != nil {
		return *m.Par
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *User) GetModifiedWeek() int32 {
	if m != nil && m.ModifiedWeek != nil {
		return *m.ModifiedWeek
	}
	return 0
}

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{8}
}

func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Device struct {
	Id                   *int32   `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	UseragentId          *int32   `protobuf:"varint,4,opt,name=useragent_id,json=useragentId" json:"useragent_id,omitempty"`
	Useragent            *string  `protobuf:"bytes,5,opt,name=useragent" json:"useragent,omitempty"`
	ScreenResolution     *string  `protobuf:"bytes,6,opt,name=screen_resolution,json=screenResolution" json:"screen_resolution,omitempty"`
	LanguageId           *int32   `protobuf:"varint,7,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	Language             *string  `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{9}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Device) GetUseragentId() int32 {
	if m != nil && m.UseragentId != nil {
		return *m.UseragentId
	}
	return 0
}

func (m *Device) GetUseragent() string {
	if m != nil && m.Useragent != nil {
		return *m.Useragent
	}
	return ""
}

func (m *Device) GetScreenResolution() string {
	if m != nil && m.ScreenResolution != nil {
		return *m.ScreenResolution
	}
	return ""
}

func (m *Device) GetLanguageId() int32 {
	if m != nil && m.LanguageId != nil {
		return *m.LanguageId
	}
	return 0
}

func (m *Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

type Traces struct {
	Traces               []*Trace `protobuf:"bytes,3,rep,name=traces" json:"traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Traces) Reset()         { *m = Traces{} }
func (m *Traces) String() string { return proto.CompactTextString(m) }
func (*Traces) ProtoMessage()    {}
func (*Traces) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{10}
}

func (m *Traces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Traces.Unmarshal(m, b)
}
func (m *Traces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Traces.Marshal(b, m, deterministic)
}
func (m *Traces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traces.Merge(m, src)
}
func (m *Traces) XXX_Size() int {
	return xxx_messageInfo_Traces.Size(m)
}
func (m *Traces) XXX_DiscardUnknown() {
	xxx_messageInfo_Traces.DiscardUnknown(m)
}

var xxx_messageInfo_Traces proto.InternalMessageInfo

func (m *Traces) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type Trace struct {
	Id            *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Ip            *string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	LocationId    *int32  `protobuf:"varint,5,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CityName      *string `protobuf:"bytes,8,opt,name=city_name,json=cityName" json:"city_name,omitempty"`
	CountryName   *string `protobuf:"bytes,9,opt,name=country_name,json=countryName" json:"country_name,omitempty"`
	CountryCode   *string `protobuf:"bytes,19,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	ContinentCode *string `protobuf:"bytes,10,opt,name=continent_code,json=continentCode" json:"continent_code,omitempty"`
	ContinentName *string `protobuf:"bytes,18,opt,name=continent_name,json=continentName" json:"continent_name,omitempty"`
	// optional string coutry_code = 11;
	Latitude             *float32 `protobuf:"fixed32,12,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float32 `protobuf:"fixed32,13,opt,name=longitude" json:"longitude,omitempty"`
	PostalCode           *string  `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	Timezone             *string  `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	Isp                  *string  `protobuf:"bytes,17,opt,name=isp" json:"isp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{11}
}

func (m *Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace.Unmarshal(m, b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return xxx_messageInfo_Trace.Size(m)
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Trace) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Trace) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *Trace) GetCityName() string {
	if m != nil && m.CityName != nil {
		return *m.CityName
	}
	return ""
}

func (m *Trace) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *Trace) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *Trace) GetContinentCode() string {
	if m != nil && m.ContinentCode != nil {
		return *m.ContinentCode
	}
	return ""
}

func (m *Trace) GetContinentName() string {
	if m != nil && m.ContinentName != nil {
		return *m.ContinentName
	}
	return ""
}

func (m *Trace) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Trace) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Trace) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *Trace) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Trace) GetIsp() string {
	if m != nil && m.Isp != nil {
		return *m.Isp
	}
	return ""
}

type MergeRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DestinationUserId    *string         `protobuf:"bytes,5,opt,name=destination_user_id,json=destinationUserId" json:"destination_user_id,omitempty"`
	SourceUserId         *string         `protobuf:"bytes,4,opt,name=source_user_id,json=sourceUserId" json:"source_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MergeRequest) Reset()         { *m = MergeRequest{} }
func (m *MergeRequest) String() string { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()    {}
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{12}
}

func (m *MergeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeRequest.Unmarshal(m, b)
}
func (m *MergeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeRequest.Marshal(b, m, deterministic)
}
func (m *MergeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeRequest.Merge(m, src)
}
func (m *MergeRequest) XXX_Size() int {
	return xxx_messageInfo_MergeRequest.Size(m)
}
func (m *MergeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MergeRequest proto.InternalMessageInfo

func (m *MergeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MergeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MergeRequest) GetDestinationUserId() string {
	if m != nil && m.DestinationUserId != nil {
		return *m.DestinationUserId
	}
	return ""
}

func (m *MergeRequest) GetSourceUserId() string {
	if m != nil && m.SourceUserId != nil {
		return *m.SourceUserId
	}
	return ""
}

type CreateRequest struct {
	ChallengeId          *string  `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Answer               *string  `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{13}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetChallengeId() string {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return ""
}

func (m *CreateRequest) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

type Topic struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic                *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	Type                 *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Updated              *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread               *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{14}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Topic) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Topic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Topic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Topic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Topic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type UnreadTopic struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic                *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	AgentId              *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId               *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type                 *string         `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Updated              *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread               *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UnreadTopic) Reset()         { *m = UnreadTopic{} }
func (m *UnreadTopic) String() string { return proto.CompactTextString(m) }
func (*UnreadTopic) ProtoMessage()    {}
func (*UnreadTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{15}
}

func (m *UnreadTopic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnreadTopic.Unmarshal(m, b)
}
func (m *UnreadTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnreadTopic.Marshal(b, m, deterministic)
}
func (m *UnreadTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnreadTopic.Merge(m, src)
}
func (m *UnreadTopic) XXX_Size() int {
	return xxx_messageInfo_UnreadTopic.Size(m)
}
func (m *UnreadTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_UnreadTopic.DiscardUnknown(m)
}

var xxx_messageInfo_UnreadTopic proto.InternalMessageInfo

func (m *UnreadTopic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnreadTopic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *UnreadTopic) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UnreadTopic) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UnreadTopic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *UnreadTopic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *UnreadTopic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type ReadTopicRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic                *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId              *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReadTopicRequest) Reset()         { *m = ReadTopicRequest{} }
func (m *ReadTopicRequest) String() string { return proto.CompactTextString(m) }
func (*ReadTopicRequest) ProtoMessage()    {}
func (*ReadTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{16}
}

func (m *ReadTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadTopicRequest.Unmarshal(m, b)
}
func (m *ReadTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadTopicRequest.Marshal(b, m, deterministic)
}
func (m *ReadTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadTopicRequest.Merge(m, src)
}
func (m *ReadTopicRequest) XXX_Size() int {
	return xxx_messageInfo_ReadTopicRequest.Size(m)
}
func (m *ReadTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadTopicRequest proto.InternalMessageInfo

func (m *ReadTopicRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ReadTopicRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ReadTopicRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *ReadTopicRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ReadTopicRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type SubscribeRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId              *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Topics               []string        `protobuf:"bytes,4,rep,name=topics" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{17}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscribeRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type AggregateSegmentCount struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Count                *int64          `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Created              *int64          `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AggregateSegmentCount) Reset()         { *m = AggregateSegmentCount{} }
func (m *AggregateSegmentCount) String() string { return proto.CompactTextString(m) }
func (*AggregateSegmentCount) ProtoMessage()    {}
func (*AggregateSegmentCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{18}
}

func (m *AggregateSegmentCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregateSegmentCount.Unmarshal(m, b)
}
func (m *AggregateSegmentCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregateSegmentCount.Marshal(b, m, deterministic)
}
func (m *AggregateSegmentCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateSegmentCount.Merge(m, src)
}
func (m *AggregateSegmentCount) XXX_Size() int {
	return xxx_messageInfo_AggregateSegmentCount.Size(m)
}
func (m *AggregateSegmentCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateSegmentCount.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateSegmentCount proto.InternalMessageInfo

func (m *AggregateSegmentCount) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AggregateSegmentCount) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AggregateSegmentCount) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *AggregateSegmentCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *AggregateSegmentCount) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type AggregateUpdateInteracted struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Interacted           *int64          `protobuf:"varint,5,opt,name=interacted" json:"interacted,omitempty"`
	Created              *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AggregateUpdateInteracted) Reset()         { *m = AggregateUpdateInteracted{} }
func (m *AggregateUpdateInteracted) String() string { return proto.CompactTextString(m) }
func (*AggregateUpdateInteracted) ProtoMessage()    {}
func (*AggregateUpdateInteracted) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{19}
}

func (m *AggregateUpdateInteracted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregateUpdateInteracted.Unmarshal(m, b)
}
func (m *AggregateUpdateInteracted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregateUpdateInteracted.Marshal(b, m, deterministic)
}
func (m *AggregateUpdateInteracted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateUpdateInteracted.Merge(m, src)
}
func (m *AggregateUpdateInteracted) XXX_Size() int {
	return xxx_messageInfo_AggregateUpdateInteracted.Size(m)
}
func (m *AggregateUpdateInteracted) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateUpdateInteracted.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateUpdateInteracted proto.InternalMessageInfo

func (m *AggregateUpdateInteracted) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AggregateUpdateInteracted) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AggregateUpdateInteracted) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AggregateUpdateInteracted) GetInteracted() int64 {
	if m != nil && m.Interacted != nil {
		return *m.Interacted
	}
	return 0
}

func (m *AggregateUpdateInteracted) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type AggregateSegmentAttrCount struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Min                  *int64          `protobuf:"varint,3,opt,name=min" json:"min,omitempty"`
	Count                *int64          `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Created              *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,7,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Attribute            *string         `protobuf:"bytes,8,opt,name=attribute" json:"attribute,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AggregateSegmentAttrCount) Reset()         { *m = AggregateSegmentAttrCount{} }
func (m *AggregateSegmentAttrCount) String() string { return proto.CompactTextString(m) }
func (*AggregateSegmentAttrCount) ProtoMessage()    {}
func (*AggregateSegmentAttrCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{20}
}

func (m *AggregateSegmentAttrCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregateSegmentAttrCount.Unmarshal(m, b)
}
func (m *AggregateSegmentAttrCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregateSegmentAttrCount.Marshal(b, m, deterministic)
}
func (m *AggregateSegmentAttrCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateSegmentAttrCount.Merge(m, src)
}
func (m *AggregateSegmentAttrCount) XXX_Size() int {
	return xxx_messageInfo_AggregateSegmentAttrCount.Size(m)
}
func (m *AggregateSegmentAttrCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateSegmentAttrCount.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateSegmentAttrCount proto.InternalMessageInfo

func (m *AggregateSegmentAttrCount) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AggregateSegmentAttrCount) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AggregateSegmentAttrCount) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *AggregateSegmentAttrCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *AggregateSegmentAttrCount) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *AggregateSegmentAttrCount) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *AggregateSegmentAttrCount) GetAttribute() string {
	if m != nil && m.Attribute != nil {
		return *m.Attribute
	}
	return ""
}

type SubizIDRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId              *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubizIDRequest) Reset()         { *m = SubizIDRequest{} }
func (m *SubizIDRequest) String() string { return proto.CompactTextString(m) }
func (*SubizIDRequest) ProtoMessage()    {}
func (*SubizIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{21}
}

func (m *SubizIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubizIDRequest.Unmarshal(m, b)
}
func (m *SubizIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubizIDRequest.Marshal(b, m, deterministic)
}
func (m *SubizIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubizIDRequest.Merge(m, src)
}
func (m *SubizIDRequest) XXX_Size() int {
	return xxx_messageInfo_SubizIDRequest.Size(m)
}
func (m *SubizIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubizIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubizIDRequest proto.InternalMessageInfo

func (m *SubizIDRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDRequest) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MaskResponse struct {
	SubizId              *string  `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId            *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string  `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Mask                 *string  `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaskResponse) Reset()         { *m = MaskResponse{} }
func (m *MaskResponse) String() string { return proto.CompactTextString(m) }
func (*MaskResponse) ProtoMessage()    {}
func (*MaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{22}
}

func (m *MaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaskResponse.Unmarshal(m, b)
}
func (m *MaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaskResponse.Marshal(b, m, deterministic)
}
func (m *MaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskResponse.Merge(m, src)
}
func (m *MaskResponse) XXX_Size() int {
	return xxx_messageInfo_MaskResponse.Size(m)
}
func (m *MaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaskResponse proto.InternalMessageInfo

func (m *MaskResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *MaskResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MaskResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MaskResponse) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type SubizIDResponse struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId              *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubizIDResponse) Reset()         { *m = SubizIDResponse{} }
func (m *SubizIDResponse) String() string { return proto.CompactTextString(m) }
func (*SubizIDResponse) ProtoMessage()    {}
func (*SubizIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{23}
}

func (m *SubizIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubizIDResponse.Unmarshal(m, b)
}
func (m *SubizIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubizIDResponse.Marshal(b, m, deterministic)
}
func (m *SubizIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubizIDResponse.Merge(m, src)
}
func (m *SubizIDResponse) XXX_Size() int {
	return xxx_messageInfo_SubizIDResponse.Size(m)
}
func (m *SubizIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubizIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubizIDResponse proto.InternalMessageInfo

func (m *SubizIDResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubizIDResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Segmentations struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Segmentations        []*Segmentation `protobuf:"bytes,3,rep,name=segmentations" json:"segmentations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Segmentations) Reset()         { *m = Segmentations{} }
func (m *Segmentations) String() string { return proto.CompactTextString(m) }
func (*Segmentations) ProtoMessage()    {}
func (*Segmentations) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{24}
}

func (m *Segmentations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Segmentations.Unmarshal(m, b)
}
func (m *Segmentations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Segmentations.Marshal(b, m, deterministic)
}
func (m *Segmentations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segmentations.Merge(m, src)
}
func (m *Segmentations) XXX_Size() int {
	return xxx_messageInfo_Segmentations.Size(m)
}
func (m *Segmentations) XXX_DiscardUnknown() {
	xxx_messageInfo_Segmentations.DiscardUnknown(m)
}

var xxx_messageInfo_Segmentations proto.InternalMessageInfo

func (m *Segmentations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentations) GetSegmentations() []*Segmentation {
	if m != nil {
		return m.Segmentations
	}
	return nil
}

type Segmentation struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                   *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Name                 *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description          *string         `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	UserCount            *int64          `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	StartedFrom          *int64          `protobuf:"varint,7,opt,name=started_from,json=startedFrom" json:"started_from,omitempty"`
	Created              *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified             *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State                *string         `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	Conditions           []*SCondition   `protobuf:"bytes,19,rep,name=conditions" json:"conditions,omitempty"`
	Creator              *string         `protobuf:"bytes,20,opt,name=creator" json:"creator,omitempty"`
	Scope                *string         `protobuf:"bytes,21,opt,name=scope" json:"scope,omitempty"`
	IsSystem             *bool           `protobuf:"varint,22,opt,name=is_system,json=isSystem" json:"is_system,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Segmentation) Reset()         { *m = Segmentation{} }
func (m *Segmentation) String() string { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()    {}
func (*Segmentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{25}
}

func (m *Segmentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Segmentation.Unmarshal(m, b)
}
func (m *Segmentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Segmentation.Marshal(b, m, deterministic)
}
func (m *Segmentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segmentation.Merge(m, src)
}
func (m *Segmentation) XXX_Size() int {
	return xxx_messageInfo_Segmentation.Size(m)
}
func (m *Segmentation) XXX_DiscardUnknown() {
	xxx_messageInfo_Segmentation.DiscardUnknown(m)
}

var xxx_messageInfo_Segmentation proto.InternalMessageInfo

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Segmentation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Segmentation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *Segmentation) GetStartedFrom() int64 {
	if m != nil && m.StartedFrom != nil {
		return *m.StartedFrom
	}
	return 0
}

func (m *Segmentation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Segmentation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Segmentation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Segmentation) GetConditions() []*SCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Segmentation) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Segmentation) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *Segmentation) GetIsSystem() bool {
	if m != nil && m.IsSystem != nil {
		return *m.IsSystem
	}
	return false
}

type Condition struct {
	Join                 *string  `protobuf:"bytes,1,opt,name=join" json:"join,omitempty"`
	Key                  *string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Operator             *string  `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	Value                *string  `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Id                   *string  `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{26}
}

func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *Condition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Condition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Condition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type UserSearchResult struct {
	Ctx                  *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Total                *int64           `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Users                []*User          `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Anchor               *string          `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Unreads              []int32          `protobuf:"varint,6,rep,name=unreads" json:"unreads,omitempty"`
	UnreadCounts         map[string]int32 `protobuf:"bytes,7,rep,name=unread_counts,json=unreadCounts" json:"unread_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserSearchResult) Reset()         { *m = UserSearchResult{} }
func (m *UserSearchResult) String() string { return proto.CompactTextString(m) }
func (*UserSearchResult) ProtoMessage()    {}
func (*UserSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{27}
}

func (m *UserSearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSearchResult.Unmarshal(m, b)
}
func (m *UserSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSearchResult.Marshal(b, m, deterministic)
}
func (m *UserSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSearchResult.Merge(m, src)
}
func (m *UserSearchResult) XXX_Size() int {
	return xxx_messageInfo_UserSearchResult.Size(m)
}
func (m *UserSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserSearchResult proto.InternalMessageInfo

func (m *UserSearchResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchResult) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *UserSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserSearchResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchResult) GetUnreads() []int32 {
	if m != nil {
		return m.Unreads
	}
	return nil
}

func (m *UserSearchResult) GetUnreadCounts() map[string]int32 {
	if m != nil {
		return m.UnreadCounts
	}
	return nil
}

type UserSearchRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Query                *string         `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor               *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit                *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	AgentId              *string         `protobuf:"bytes,8,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Unread               *bool           `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserSearchRequest) Reset()         { *m = UserSearchRequest{} }
func (m *UserSearchRequest) String() string { return proto.CompactTextString(m) }
func (*UserSearchRequest) ProtoMessage()    {}
func (*UserSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{28}
}

func (m *UserSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSearchRequest.Unmarshal(m, b)
}
func (m *UserSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSearchRequest.Marshal(b, m, deterministic)
}
func (m *UserSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSearchRequest.Merge(m, src)
}
func (m *UserSearchRequest) XXX_Size() int {
	return xxx_messageInfo_UserSearchRequest.Size(m)
}
func (m *UserSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserSearchRequest proto.InternalMessageInfo

func (m *UserSearchRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *UserSearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *UserSearchRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *UserSearchRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UserSearchRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type IndexEvent struct {
	Id                   *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId            *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Created              *int64   `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Category             *string  `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Topics               []string `protobuf:"bytes,8,rep,name=topics" json:"topics,omitempty"`
	Object               *string  `protobuf:"bytes,9,opt,name=object" json:"object,omitempty"`
	Text                 *string  `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexEvent) Reset()         { *m = IndexEvent{} }
func (m *IndexEvent) String() string { return proto.CompactTextString(m) }
func (*IndexEvent) ProtoMessage()    {}
func (*IndexEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{29}
}

func (m *IndexEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexEvent.Unmarshal(m, b)
}
func (m *IndexEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexEvent.Marshal(b, m, deterministic)
}
func (m *IndexEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexEvent.Merge(m, src)
}
func (m *IndexEvent) XXX_Size() int {
	return xxx_messageInfo_IndexEvent.Size(m)
}
func (m *IndexEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IndexEvent proto.InternalMessageInfo

func (m *IndexEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *IndexEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *IndexEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *IndexEvent) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *IndexEvent) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *IndexEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *IndexEvent) GetObject() string {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return ""
}

func (m *IndexEvent) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ListTopicsRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId              *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Anchor               *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit                *int32          `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Unread               *bool           `protobuf:"varint,8,opt,name=unread" json:"unread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTopicsRequest) Reset()         { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()    {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{30}
}

func (m *ListTopicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTopicsRequest.Unmarshal(m, b)
}
func (m *ListTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTopicsRequest.Marshal(b, m, deterministic)
}
func (m *ListTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsRequest.Merge(m, src)
}
func (m *ListTopicsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTopicsRequest.Size(m)
}
func (m *ListTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsRequest proto.InternalMessageInfo

func (m *ListTopicsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListTopicsRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *ListTopicsRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *ListTopicsRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *ListTopicsRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type ListTopicsResult struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topics               []*Topic        `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	Anchor               *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTopicsResult) Reset()         { *m = ListTopicsResult{} }
func (m *ListTopicsResult) String() string { return proto.CompactTextString(m) }
func (*ListTopicsResult) ProtoMessage()    {}
func (*ListTopicsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{31}
}

func (m *ListTopicsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTopicsResult.Unmarshal(m, b)
}
func (m *ListTopicsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTopicsResult.Marshal(b, m, deterministic)
}
func (m *ListTopicsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsResult.Merge(m, src)
}
func (m *ListTopicsResult) XXX_Size() int {
	return xxx_messageInfo_ListTopicsResult.Size(m)
}
func (m *ListTopicsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsResult.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsResult proto.InternalMessageInfo

func (m *ListTopicsResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsResult) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ListTopicsResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

type ListNewsRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	StartTime            *int64          `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Limit                *string         `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListNewsRequest) Reset()         { *m = ListNewsRequest{} }
func (m *ListNewsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNewsRequest) ProtoMessage()    {}
func (*ListNewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{32}
}

func (m *ListNewsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNewsRequest.Unmarshal(m, b)
}
func (m *ListNewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNewsRequest.Marshal(b, m, deterministic)
}
func (m *ListNewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNewsRequest.Merge(m, src)
}
func (m *ListNewsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNewsRequest.Size(m)
}
func (m *ListNewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNewsRequest proto.InternalMessageInfo

func (m *ListNewsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListNewsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListNewsRequest) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ListNewsRequest) GetLimit() string {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return ""
}

type AddToMyList struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId              *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddToMyList) Reset()         { *m = AddToMyList{} }
func (m *AddToMyList) String() string { return proto.CompactTextString(m) }
func (*AddToMyList) ProtoMessage()    {}
func (*AddToMyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{33}
}

func (m *AddToMyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddToMyList.Unmarshal(m, b)
}
func (m *AddToMyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddToMyList.Marshal(b, m, deterministic)
}
func (m *AddToMyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToMyList.Merge(m, src)
}
func (m *AddToMyList) XXX_Size() int {
	return xxx_messageInfo_AddToMyList.Size(m)
}
func (m *AddToMyList) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToMyList.DiscardUnknown(m)
}

var xxx_messageInfo_AddToMyList proto.InternalMessageInfo

func (m *AddToMyList) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyList) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AddToMyList) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Presence struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Pinged               *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PingedMinute         *int64          `protobuf:"varint,6,opt,name=pinged_minute,json=pingedMinute" json:"pinged_minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Presence) Reset()         { *m = Presence{} }
func (m *Presence) String() string { return proto.CompactTextString(m) }
func (*Presence) ProtoMessage()    {}
func (*Presence) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{34}
}

func (m *Presence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Presence.Unmarshal(m, b)
}
func (m *Presence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Presence.Marshal(b, m, deterministic)
}
func (m *Presence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Presence.Merge(m, src)
}
func (m *Presence) XXX_Size() int {
	return xxx_messageInfo_Presence.Size(m)
}
func (m *Presence) XXX_DiscardUnknown() {
	xxx_messageInfo_Presence.DiscardUnknown(m)
}

var xxx_messageInfo_Presence proto.InternalMessageInfo

func (m *Presence) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Presence) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Presence) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Presence) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Presence) GetPingedMinute() int64 {
	if m != nil && m.PingedMinute != nil {
		return *m.PingedMinute
	}
	return 0
}

type Visitor struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User                 *User           `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Pinged               *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PageUrl              *string         `protobuf:"bytes,6,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	PageViewed           *int64          `protobuf:"varint,7,opt,name=page_viewed,json=pageViewed" json:"page_viewed,omitempty"`
	PageTitle            *string         `protobuf:"bytes,8,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Visitor) Reset()         { *m = Visitor{} }
func (m *Visitor) String() string { return proto.CompactTextString(m) }
func (*Visitor) ProtoMessage()    {}
func (*Visitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{35}
}

func (m *Visitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Visitor.Unmarshal(m, b)
}
func (m *Visitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Visitor.Marshal(b, m, deterministic)
}
func (m *Visitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visitor.Merge(m, src)
}
func (m *Visitor) XXX_Size() int {
	return xxx_messageInfo_Visitor.Size(m)
}
func (m *Visitor) XXX_DiscardUnknown() {
	xxx_messageInfo_Visitor.DiscardUnknown(m)
}

var xxx_messageInfo_Visitor proto.InternalMessageInfo

func (m *Visitor) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitor) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Visitor) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Visitor) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Visitor) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Visitor) GetPageViewed() int64 {
	if m != nil && m.PageViewed != nil {
		return *m.PageViewed
	}
	return 0
}

func (m *Visitor) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitors struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Visitors             []*Visitor      `protobuf:"bytes,2,rep,name=visitors" json:"visitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Visitors) Reset()         { *m = Visitors{} }
func (m *Visitors) String() string { return proto.CompactTextString(m) }
func (*Visitors) ProtoMessage()    {}
func (*Visitors) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{36}
}

func (m *Visitors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Visitors.Unmarshal(m, b)
}
func (m *Visitors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Visitors.Marshal(b, m, deterministic)
}
func (m *Visitors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visitors.Merge(m, src)
}
func (m *Visitors) XXX_Size() int {
	return xxx_messageInfo_Visitors.Size(m)
}
func (m *Visitors) XXX_DiscardUnknown() {
	xxx_messageInfo_Visitors.DiscardUnknown(m)
}

var xxx_messageInfo_Visitors proto.InternalMessageInfo

func (m *Visitors) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitors) GetVisitors() []*Visitor {
	if m != nil {
		return m.Visitors
	}
	return nil
}

type LastView struct {
	AccountId            *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string  `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url                  *string  `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Ua                   *string  `protobuf:"bytes,6,opt,name=ua" json:"ua,omitempty"`
	Ip                   *string  `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Created              *int64   `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	EventId              *string  `protobuf:"bytes,9,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Title                *string  `protobuf:"bytes,10,opt,name=title" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastView) Reset()         { *m = LastView{} }
func (m *LastView) String() string { return proto.CompactTextString(m) }
func (*LastView) ProtoMessage()    {}
func (*LastView) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{37}
}

func (m *LastView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastView.Unmarshal(m, b)
}
func (m *LastView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastView.Marshal(b, m, deterministic)
}
func (m *LastView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastView.Merge(m, src)
}
func (m *LastView) XXX_Size() int {
	return xxx_messageInfo_LastView.Size(m)
}
func (m *LastView) XXX_DiscardUnknown() {
	xxx_messageInfo_LastView.DiscardUnknown(m)
}

var xxx_messageInfo_LastView proto.InternalMessageInfo

func (m *LastView) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *LastView) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *LastView) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *LastView) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *LastView) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LastView) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *LastView) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *LastView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

type Automation struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                   *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Channel              *string         `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Name                 *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description          *string         `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Conditions           []*Condition    `protobuf:"bytes,7,rep,name=conditions" json:"conditions,omitempty"`
	Condition            *SCondition     `protobuf:"bytes,8,opt,name=condition" json:"condition,omitempty"`
	Created              *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified             *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State                *string         `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	ActionType           *string         `protobuf:"bytes,13,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	ActionData           *string         `protobuf:"bytes,14,opt,name=action_data,json=actionData" json:"action_data,omitempty"`
	Scope                *string         `protobuf:"bytes,15,opt,name=scope" json:"scope,omitempty"`
	CrossChannel         *bool           `protobuf:"varint,16,opt,name=cross_channel,json=crossChannel" json:"cross_channel,omitempty"`
	Metadata             *string         `protobuf:"bytes,17,opt,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Automation) Reset()         { *m = Automation{} }
func (m *Automation) String() string { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()    {}
func (*Automation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{38}
}

func (m *Automation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Automation.Unmarshal(m, b)
}
func (m *Automation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Automation.Marshal(b, m, deterministic)
}
func (m *Automation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Automation.Merge(m, src)
}
func (m *Automation) XXX_Size() int {
	return xxx_messageInfo_Automation.Size(m)
}
func (m *Automation) XXX_DiscardUnknown() {
	xxx_messageInfo_Automation.DiscardUnknown(m)
}

var xxx_messageInfo_Automation proto.InternalMessageInfo

func (m *Automation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Automation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Automation) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Automation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Automation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Automation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Automation) GetCondition() *SCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Automation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Automation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Automation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Automation) GetActionType() string {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ""
}

func (m *Automation) GetActionData() string {
	if m != nil && m.ActionData != nil {
		return *m.ActionData
	}
	return ""
}

func (m *Automation) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *Automation) GetCrossChannel() bool {
	if m != nil && m.CrossChannel != nil {
		return *m.CrossChannel
	}
	return false
}

func (m *Automation) GetMetadata() string {
	if m != nil && m.Metadata != nil {
		return *m.Metadata
	}
	return ""
}

type Automations struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Automations          []*Automation   `protobuf:"bytes,2,rep,name=automations" json:"automations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Automations) Reset()         { *m = Automations{} }
func (m *Automations) String() string { return proto.CompactTextString(m) }
func (*Automations) ProtoMessage()    {}
func (*Automations) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{39}
}

func (m *Automations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Automations.Unmarshal(m, b)
}
func (m *Automations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Automations.Marshal(b, m, deterministic)
}
func (m *Automations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Automations.Merge(m, src)
}
func (m *Automations) XXX_Size() int {
	return xxx_messageInfo_Automations.Size(m)
}
func (m *Automations) XXX_DiscardUnknown() {
	xxx_messageInfo_Automations.DiscardUnknown(m)
}

var xxx_messageInfo_Automations proto.InternalMessageInfo

func (m *Automations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automations) GetAutomations() []*Automation {
	if m != nil {
		return m.Automations
	}
	return nil
}

type DeleteAttrRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key                  *string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeleteAttrRequest) Reset()         { *m = DeleteAttrRequest{} }
func (m *DeleteAttrRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAttrRequest) ProtoMessage()    {}
func (*DeleteAttrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{40}
}

func (m *DeleteAttrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAttrRequest.Unmarshal(m, b)
}
func (m *DeleteAttrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAttrRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAttrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttrRequest.Merge(m, src)
}
func (m *DeleteAttrRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAttrRequest.Size(m)
}
func (m *DeleteAttrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttrRequest proto.InternalMessageInfo

func (m *DeleteAttrRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *DeleteAttrRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type CountSegmentationUserByAttributeRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AttributeKey         *string         `protobuf:"bytes,3,opt,name=attribute_key,json=attributeKey" json:"attribute_key,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,4,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	From                 *int32          `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To                   *int32          `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	Range                *string         `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	FromHour             *int32          `protobuf:"varint,9,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour               *int32          `protobuf:"varint,10,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CountSegmentationUserByAttributeRequest) Reset() {
	*m = CountSegmentationUserByAttributeRequest{}
}
func (m *CountSegmentationUserByAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*CountSegmentationUserByAttributeRequest) ProtoMessage()    {}
func (*CountSegmentationUserByAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{41}
}

func (m *CountSegmentationUserByAttributeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountSegmentationUserByAttributeRequest.Unmarshal(m, b)
}
func (m *CountSegmentationUserByAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountSegmentationUserByAttributeRequest.Marshal(b, m, deterministic)
}
func (m *CountSegmentationUserByAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountSegmentationUserByAttributeRequest.Merge(m, src)
}
func (m *CountSegmentationUserByAttributeRequest) XXX_Size() int {
	return xxx_messageInfo_CountSegmentationUserByAttributeRequest.Size(m)
}
func (m *CountSegmentationUserByAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountSegmentationUserByAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountSegmentationUserByAttributeRequest proto.InternalMessageInfo

func (m *CountSegmentationUserByAttributeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *CountSegmentationUserByAttributeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *CountSegmentationUserByAttributeRequest) GetAttributeKey() string {
	if m != nil && m.AttributeKey != nil {
		return *m.AttributeKey
	}
	return ""
}

func (m *CountSegmentationUserByAttributeRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *CountSegmentationUserByAttributeRequest) GetFrom() int32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *CountSegmentationUserByAttributeRequest) GetTo() int32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *CountSegmentationUserByAttributeRequest) GetRange() string {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return ""
}

func (m *CountSegmentationUserByAttributeRequest) GetFromHour() int32 {
	if m != nil && m.FromHour != nil {
		return *m.FromHour
	}
	return 0
}

func (m *CountSegmentationUserByAttributeRequest) GetToHour() int32 {
	if m != nil && m.ToHour != nil {
		return *m.ToHour
	}
	return 0
}

type CountResponse struct {
	Data                 []int32  `protobuf:"varint,3,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountResponse) Reset()         { *m = CountResponse{} }
func (m *CountResponse) String() string { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()    {}
func (*CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{42}
}

func (m *CountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountResponse.Unmarshal(m, b)
}
func (m *CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountResponse.Marshal(b, m, deterministic)
}
func (m *CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountResponse.Merge(m, src)
}
func (m *CountResponse) XXX_Size() int {
	return xxx_messageInfo_CountResponse.Size(m)
}
func (m *CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountResponse proto.InternalMessageInfo

func (m *CountResponse) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnpickRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,5,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UnpickRequest) Reset()         { *m = UnpickRequest{} }
func (m *UnpickRequest) String() string { return proto.CompactTextString(m) }
func (*UnpickRequest) ProtoMessage()    {}
func (*UnpickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{43}
}

func (m *UnpickRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnpickRequest.Unmarshal(m, b)
}
func (m *UnpickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnpickRequest.Marshal(b, m, deterministic)
}
func (m *UnpickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpickRequest.Merge(m, src)
}
func (m *UnpickRequest) XXX_Size() int {
	return xxx_messageInfo_UnpickRequest.Size(m)
}
func (m *UnpickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnpickRequest proto.InternalMessageInfo

func (m *UnpickRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnpickRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UnpickRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UnpickRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

type PickRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId              *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	SegmentationId       *string         `protobuf:"bytes,5,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Added                *int64          `protobuf:"varint,7,opt,name=added" json:"added,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PickRequest) Reset()         { *m = PickRequest{} }
func (m *PickRequest) String() string { return proto.CompactTextString(m) }
func (*PickRequest) ProtoMessage()    {}
func (*PickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{44}
}

func (m *PickRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PickRequest.Unmarshal(m, b)
}
func (m *PickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PickRequest.Marshal(b, m, deterministic)
}
func (m *PickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickRequest.Merge(m, src)
}
func (m *PickRequest) XXX_Size() int {
	return xxx_messageInfo_PickRequest.Size(m)
}
func (m *PickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PickRequest proto.InternalMessageInfo

func (m *PickRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PickRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PickRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *PickRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *PickRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *PickRequest) GetAdded() int64 {
	if m != nil && m.Added != nil {
		return *m.Added
	}
	return 0
}

type AutomationCheck struct {
	AccountId            *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AutomationId         *string  `protobuf:"bytes,3,opt,name=automation_id,json=automationId" json:"automation_id,omitempty"`
	UserId               *string  `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EventId              *string  `protobuf:"bytes,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Scope                *string  `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutomationCheck) Reset()         { *m = AutomationCheck{} }
func (m *AutomationCheck) String() string { return proto.CompactTextString(m) }
func (*AutomationCheck) ProtoMessage()    {}
func (*AutomationCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{45}
}

func (m *AutomationCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutomationCheck.Unmarshal(m, b)
}
func (m *AutomationCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutomationCheck.Marshal(b, m, deterministic)
}
func (m *AutomationCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutomationCheck.Merge(m, src)
}
func (m *AutomationCheck) XXX_Size() int {
	return xxx_messageInfo_AutomationCheck.Size(m)
}
func (m *AutomationCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_AutomationCheck.DiscardUnknown(m)
}

var xxx_messageInfo_AutomationCheck proto.InternalMessageInfo

func (m *AutomationCheck) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AutomationCheck) GetAutomationId() string {
	if m != nil && m.AutomationId != nil {
		return *m.AutomationId
	}
	return ""
}

func (m *AutomationCheck) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AutomationCheck) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *AutomationCheck) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

type SegmentIndex struct {
	AccountId            *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SegmentationId       *string  `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Year                 *int32   `protobuf:"varint,4,opt,name=year" json:"year,omitempty"`
	Day                  *int32   `protobuf:"varint,5,opt,name=day" json:"day,omitempty"`
	Hour                 *int32   `protobuf:"varint,6,opt,name=hour" json:"hour,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentIndex) Reset()         { *m = SegmentIndex{} }
func (m *SegmentIndex) String() string { return proto.CompactTextString(m) }
func (*SegmentIndex) ProtoMessage()    {}
func (*SegmentIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{46}
}

func (m *SegmentIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentIndex.Unmarshal(m, b)
}
func (m *SegmentIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentIndex.Marshal(b, m, deterministic)
}
func (m *SegmentIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentIndex.Merge(m, src)
}
func (m *SegmentIndex) XXX_Size() int {
	return xxx_messageInfo_SegmentIndex.Size(m)
}
func (m *SegmentIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentIndex proto.InternalMessageInfo

func (m *SegmentIndex) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentIndex) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *SegmentIndex) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *SegmentIndex) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *SegmentIndex) GetHour() int32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

type SegmentUser struct {
	AccountId            *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SegmentationId       *string  `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Day                  *int32   `protobuf:"varint,4,opt,name=day" json:"day,omitempty"`
	Hour                 *int32   `protobuf:"varint,5,opt,name=hour" json:"hour,omitempty"`
	UserId               *string  `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Activated            *int64   `protobuf:"varint,7,opt,name=activated" json:"activated,omitempty"`
	PickedBy             *string  `protobuf:"bytes,8,opt,name=picked_by,json=pickedBy" json:"picked_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentUser) Reset()         { *m = SegmentUser{} }
func (m *SegmentUser) String() string { return proto.CompactTextString(m) }
func (*SegmentUser) ProtoMessage()    {}
func (*SegmentUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{47}
}

func (m *SegmentUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentUser.Unmarshal(m, b)
}
func (m *SegmentUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentUser.Marshal(b, m, deterministic)
}
func (m *SegmentUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentUser.Merge(m, src)
}
func (m *SegmentUser) XXX_Size() int {
	return xxx_messageInfo_SegmentUser.Size(m)
}
func (m *SegmentUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentUser.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentUser proto.InternalMessageInfo

func (m *SegmentUser) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentUser) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *SegmentUser) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *SegmentUser) GetHour() int32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

func (m *SegmentUser) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *SegmentUser) GetActivated() int64 {
	if m != nil && m.Activated != nil {
		return *m.Activated
	}
	return 0
}

func (m *SegmentUser) GetPickedBy() string {
	if m != nil && m.PickedBy != nil {
		return *m.PickedBy
	}
	return ""
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
type SCondition struct {
	Id                   *string       `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key                  *string       `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator             *string       `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value                *string       `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Join                 *string       `protobuf:"bytes,7,opt,name=join" json:"join,omitempty"`
	EventTypeTime        *string       `protobuf:"bytes,8,opt,name=event_type_time,json=eventTypeTime" json:"event_type_time,omitempty"`
	EventType            *string       `protobuf:"bytes,10,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Conditions           []*SCondition `protobuf:"bytes,9,rep,name=conditions" json:"conditions,omitempty"`
	Priority             *int32        `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`
	EventExisted         *bool         `protobuf:"varint,13,opt,name=event_existed,json=eventExisted" json:"event_existed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SCondition) Reset()         { *m = SCondition{} }
func (m *SCondition) String() string { return proto.CompactTextString(m) }
func (*SCondition) ProtoMessage()    {}
func (*SCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{48}
}

func (m *SCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCondition.Unmarshal(m, b)
}
func (m *SCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCondition.Marshal(b, m, deterministic)
}
func (m *SCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCondition.Merge(m, src)
}
func (m *SCondition) XXX_Size() int {
	return xxx_messageInfo_SCondition.Size(m)
}
func (m *SCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SCondition proto.InternalMessageInfo

func (m *SCondition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SCondition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SCondition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SCondition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *SCondition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *SCondition) GetEventTypeTime() string {
	if m != nil && m.EventTypeTime != nil {
		return *m.EventTypeTime
	}
	return ""
}

func (m *SCondition) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *SCondition) GetConditions() []*SCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *SCondition) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *SCondition) GetEventExisted() bool {
	if m != nil && m.EventExisted != nil {
		return *m.EventExisted
	}
	return false
}

type Alias struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AccountId            *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Alias                *string         `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Alias) Reset()         { *m = Alias{} }
func (m *Alias) String() string { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()    {}
func (*Alias) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{49}
}

func (m *Alias) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Alias.Unmarshal(m, b)
}
func (m *Alias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Alias.Marshal(b, m, deterministic)
}
func (m *Alias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alias.Merge(m, src)
}
func (m *Alias) XXX_Size() int {
	return xxx_messageInfo_Alias.Size(m)
}
func (m *Alias) XXX_DiscardUnknown() {
	xxx_messageInfo_Alias.DiscardUnknown(m)
}

var xxx_messageInfo_Alias proto.InternalMessageInfo

func (m *Alias) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Alias) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Alias) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Alias) GetAlias() string {
	if m != nil && m.Alias != nil {
		return *m.Alias
	}
	return ""
}

type PublishSubscribed struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Topic                *string         `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	EventId              *string         `protobuf:"bytes,6,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	By                   *string         `protobuf:"bytes,8,opt,name=by" json:"by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PublishSubscribed) Reset()         { *m = PublishSubscribed{} }
func (m *PublishSubscribed) String() string { return proto.CompactTextString(m) }
func (*PublishSubscribed) ProtoMessage()    {}
func (*PublishSubscribed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{50}
}

func (m *PublishSubscribed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishSubscribed.Unmarshal(m, b)
}
func (m *PublishSubscribed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishSubscribed.Marshal(b, m, deterministic)
}
func (m *PublishSubscribed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishSubscribed.Merge(m, src)
}
func (m *PublishSubscribed) XXX_Size() int {
	return xxx_messageInfo_PublishSubscribed.Size(m)
}
func (m *PublishSubscribed) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishSubscribed.DiscardUnknown(m)
}

var xxx_messageInfo_PublishSubscribed proto.InternalMessageInfo

func (m *PublishSubscribed) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PublishSubscribed) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PublishSubscribed) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *PublishSubscribed) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *PublishSubscribed) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *PublishSubscribed) GetBy() string {
	if m != nil && m.By != nil {
		return *m.By
	}
	return ""
}

type PublishSubscribedReply struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentIds             []string        `protobuf:"bytes,3,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Topic                *string         `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	EventId              *string         `protobuf:"bytes,6,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	By                   *string         `protobuf:"bytes,8,opt,name=by" json:"by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PublishSubscribedReply) Reset()         { *m = PublishSubscribedReply{} }
func (m *PublishSubscribedReply) String() string { return proto.CompactTextString(m) }
func (*PublishSubscribedReply) ProtoMessage()    {}
func (*PublishSubscribedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{51}
}

func (m *PublishSubscribedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishSubscribedReply.Unmarshal(m, b)
}
func (m *PublishSubscribedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishSubscribedReply.Marshal(b, m, deterministic)
}
func (m *PublishSubscribedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishSubscribedReply.Merge(m, src)
}
func (m *PublishSubscribedReply) XXX_Size() int {
	return xxx_messageInfo_PublishSubscribedReply.Size(m)
}
func (m *PublishSubscribedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishSubscribedReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublishSubscribedReply proto.InternalMessageInfo

func (m *PublishSubscribedReply) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PublishSubscribedReply) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PublishSubscribedReply) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *PublishSubscribedReply) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *PublishSubscribedReply) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *PublishSubscribedReply) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *PublishSubscribedReply) GetBy() string {
	if m != nil && m.By != nil {
		return *m.By
	}
	return ""
}

func init() {
	proto.RegisterEnum("user.AttributeType", AttributeType_name, AttributeType_value)
	proto.RegisterEnum("user.AttributeKind", AttributeKind_name, AttributeKind_value)
	proto.RegisterEnum("user.AttributeDataState", AttributeDataState_name, AttributeDataState_value)
	proto.RegisterEnum("user.Event", Event_name, Event_value)
	proto.RegisterEnum("user.JoinOperator", JoinOperator_name, JoinOperator_value)
	proto.RegisterEnum("user.ConditionType", ConditionType_name, ConditionType_value)
	proto.RegisterEnum("user.AutomationScope", AutomationScope_name, AutomationScope_value)
	proto.RegisterEnum("user.Segmentation_State", Segmentation_State_name, Segmentation_State_value)
	proto.RegisterEnum("user.Segmentation_Scope", Segmentation_Scope_name, Segmentation_Scope_value)
	proto.RegisterEnum("user.Condition_JoinOperator", Condition_JoinOperator_name, Condition_JoinOperator_value)
	proto.RegisterEnum("user.Automation_State", Automation_State_name, Automation_State_value)
	proto.RegisterEnum("user.Automation_ActionType", Automation_ActionType_name, Automation_ActionType_value)
	proto.RegisterEnum("user.CountSegmentationUserByAttributeRequest_Range", CountSegmentationUserByAttributeRequest_Range_name, CountSegmentationUserByAttributeRequest_Range_value)
	proto.RegisterEnum("user.SCondition_EventTime", SCondition_EventTime_name, SCondition_EventTime_value)
	proto.RegisterEnum("user.SCondition_JoinOperator", SCondition_JoinOperator_name, SCondition_JoinOperator_value)
	proto.RegisterType((*AddToMyRequest)(nil), "user.AddToMyRequest")
	proto.RegisterType((*MyAgents)(nil), "user.MyAgents")
	proto.RegisterType((*UserCreateResult)(nil), "user.UserCreateResult")
	proto.RegisterType((*MyUser)(nil), "user.MyUser")
	proto.RegisterType((*AttributeDefinition)(nil), "user.AttributeDefinition")
	proto.RegisterType((*AttributeDefinitions)(nil), "user.AttributeDefinitions")
	proto.RegisterType((*AttributeData)(nil), "user.AttributeData")
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Users)(nil), "user.Users")
	proto.RegisterType((*Device)(nil), "user.Device")
	proto.RegisterType((*Traces)(nil), "user.Traces")
	proto.RegisterType((*Trace)(nil), "user.Trace")
	proto.RegisterType((*MergeRequest)(nil), "user.MergeRequest")
	proto.RegisterType((*CreateRequest)(nil), "user.CreateRequest")
	proto.RegisterType((*Topic)(nil), "user.Topic")
	proto.RegisterType((*UnreadTopic)(nil), "user.UnreadTopic")
	proto.RegisterType((*ReadTopicRequest)(nil), "user.ReadTopicRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "user.SubscribeRequest")
	proto.RegisterType((*AggregateSegmentCount)(nil), "user.AggregateSegmentCount")
	proto.RegisterType((*AggregateUpdateInteracted)(nil), "user.AggregateUpdateInteracted")
	proto.RegisterType((*AggregateSegmentAttrCount)(nil), "user.AggregateSegmentAttrCount")
	proto.RegisterType((*SubizIDRequest)(nil), "user.SubizIDRequest")
	proto.RegisterType((*MaskResponse)(nil), "user.MaskResponse")
	proto.RegisterType((*SubizIDResponse)(nil), "user.SubizIDResponse")
	proto.RegisterType((*Segmentations)(nil), "user.Segmentations")
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*Condition)(nil), "user.Condition")
	proto.RegisterType((*UserSearchResult)(nil), "user.UserSearchResult")
	proto.RegisterMapType((map[string]int32)(nil), "user.UserSearchResult.UnreadCountsEntry")
	proto.RegisterType((*UserSearchRequest)(nil), "user.UserSearchRequest")
	proto.RegisterType((*IndexEvent)(nil), "user.IndexEvent")
	proto.RegisterType((*ListTopicsRequest)(nil), "user.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResult)(nil), "user.ListTopicsResult")
	proto.RegisterType((*ListNewsRequest)(nil), "user.ListNewsRequest")
	proto.RegisterType((*AddToMyList)(nil), "user.AddToMyList")
	proto.RegisterType((*Presence)(nil), "user.Presence")
	proto.RegisterType((*Visitor)(nil), "user.Visitor")
	proto.RegisterType((*Visitors)(nil), "user.Visitors")
	proto.RegisterType((*LastView)(nil), "user.LastView")
	proto.RegisterType((*Automation)(nil), "user.Automation")
	proto.RegisterType((*Automations)(nil), "user.Automations")
	proto.RegisterType((*DeleteAttrRequest)(nil), "user.DeleteAttrRequest")
	proto.RegisterType((*CountSegmentationUserByAttributeRequest)(nil), "user.CountSegmentationUserByAttributeRequest")
	proto.RegisterType((*CountResponse)(nil), "user.CountResponse")
	proto.RegisterType((*UnpickRequest)(nil), "user.UnpickRequest")
	proto.RegisterType((*PickRequest)(nil), "user.PickRequest")
	proto.RegisterType((*AutomationCheck)(nil), "user.AutomationCheck")
	proto.RegisterType((*SegmentIndex)(nil), "user.SegmentIndex")
	proto.RegisterType((*SegmentUser)(nil), "user.SegmentUser")
	proto.RegisterType((*SCondition)(nil), "user.SCondition")
	proto.RegisterType((*Alias)(nil), "user.Alias")
	proto.RegisterType((*PublishSubscribed)(nil), "user.PublishSubscribed")
	proto.RegisterType((*PublishSubscribedReply)(nil), "user.PublishSubscribedReply")
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor_ed89022014131a74) }

var fileDescriptor_ed89022014131a74 = []byte{
	// 3967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3b, 0x5b, 0x6c, 0x24, 0x49,
	0x52, 0x53, 0xdd, 0x5d, 0xfd, 0x88, 0xee, 0xb6, 0xcb, 0x69, 0x8f, 0xb7, 0xdd, 0x37, 0x0f, 0x4f,
	0x79, 0x6e, 0xcf, 0xe3, 0x63, 0x3c, 0x27, 0xef, 0xdd, 0xdc, 0x82, 0xd0, 0x21, 0xaf, 0x67, 0x96,
	0xf5, 0xde, 0x7a, 0x19, 0xca, 0x9e, 0x85, 0x3f, 0xab, 0xdc, 0x95, 0xd3, 0xae, 0x9d, 0xee, 0xaa,
	0xbe, 0xaa, 0x6c, 0xef, 0xf4, 0x7d, 0xa1, 0xfb, 0x01, 0xfe, 0x90, 0xf8, 0x45, 0x20, 0x21, 0xc1,
	0xef, 0x21, 0x7e, 0x90, 0x40, 0x08, 0x04, 0xe2, 0x79, 0x88, 0xe3, 0x00, 0xdd, 0x71, 0x3f, 0x7c,
	0xc2, 0x07, 0xe2, 0x9b, 0x5f, 0x14, 0x19, 0x59, 0x55, 0x59, 0xd5, 0xdd, 0x73, 0xed, 0xdd, 0xde,
	0xfb, 0xb1, 0x33, 0x22, 0x23, 0x33, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0xab, 0x61, 0x75, 0x1c,
	0xf3, 0xe8, 0x11, 0xfe, 0xd9, 0x1f, 0x45, 0xa1, 0x08, 0x59, 0x05, 0xdb, 0xdd, 0xdd, 0xbe, 0x2f,
	0xf6, 0xe3, 0xf1, 0x85, 0xff, 0xed, 0xfd, 0x80, 0x8b, 0x47, 0x97, 0xdc, 0xf5, 0x78, 0xf4, 0xa8,
	0x17, 0x0e, 0x87, 0x61, 0xa0, 0xfe, 0x11, 0xbd, 0xfd, 0x1b, 0x06, 0xac, 0x1c, 0x7a, 0xde, 0x59,
	0x78, 0x32, 0x71, 0xf8, 0xb7, 0xc6, 0x3c, 0x16, 0xec, 0x1e, 0x94, 0x7b, 0xe2, 0x55, 0xc7, 0xd8,
	0x36, 0x76, 0x9b, 0x07, 0xab, 0xfb, 0x8a, 0xfc, 0x28, 0x0c, 0x04, 0x7f, 0x25, 0x1c, 0xec, 0x63,
	0x6f, 0x40, 0x0d, 0xd7, 0x39, 0xf7, 0xbd, 0x4e, 0x79, 0xdb, 0xd8, 0x6d, 0x38, 0x55, 0x04, 0x8f,
	0x3d, 0xf6, 0x05, 0x68, 0xb8, 0x7d, 0x1e, 0x88, 0x73, 0xdf, 0x8b, 0x3b, 0xe6, 0x76, 0x79, 0xb7,
	0xe1, 0xd4, 0x25, 0xe2, 0xd8, 0x8b, 0xd9, 0x6d, 0x00, 0xb7, 0xd7, 0x0b, 0xc7, 0xb2, 0xbb, 0x53,
	0x92, 0x03, 0x1b, 0x0a, 0x73, 0xec, 0xd9, 0xbf, 0x63, 0x40, 0xfd, 0x64, 0x72, 0x88, 0xd4, 0xf1,
	0x22, 0x4c, 0xbc, 0x7e, 0xba, 0x4f, 0xc9, 0x63, 0x07, 0x6a, 0xe3, 0x91, 0xe7, 0x0a, 0xee, 0x75,
	0xaa, 0xdb, 0xc6, 0x6e, 0xd9, 0x49, 0x40, 0xfb, 0x31, 0x58, 0xcf, 0x63, 0x1e, 0x1d, 0x45, 0xdc,
	0x15, 0xdc, 0xe1, 0xf1, 0x78, 0x20, 0xd8, 0x0a, 0x94, 0xd2, 0xe9, 0x4b, 0xbe, 0xc7, 0x18, 0x54,
	0x86, 0x6e, 0xfc, 0xb2, 0x63, 0x4a, 0x8c, 0x6c, 0xdb, 0x7f, 0x62, 0x40, 0xf5, 0x64, 0x82, 0x43,
	0x17, 0xd9, 0xd4, 0x16, 0xd4, 0x13, 0xe6, 0xd4, 0x96, 0x6a, 0x8a, 0x37, 0x76, 0x07, 0xa4, 0x72,
	0xe5, 0x72, 0xcd, 0x03, 0xd8, 0x97, 0x5a, 0xc7, 0x79, 0x1d, 0x89, 0x67, 0x9b, 0x50, 0x1d, 0x07,
	0x11, 0x77, 0xbd, 0x4e, 0x65, 0xdb, 0xd8, 0x35, 0x1d, 0x05, 0xe9, 0x5b, 0x32, 0x73, 0x5b, 0x2a,
	0x48, 0xb0, 0x56, 0x54, 0xc8, 0xaf, 0x95, 0x60, 0xfd, 0x50, 0x88, 0xc8, 0xbf, 0x18, 0x0b, 0xfe,
	0x84, 0xbf, 0xf0, 0x03, 0x5f, 0xf8, 0x61, 0xb0, 0x04, 0xdd, 0x30, 0xa8, 0x04, 0xee, 0x90, 0x2b,
	0xc9, 0xc9, 0x36, 0xdb, 0x86, 0xa6, 0xc7, 0xe3, 0x5e, 0xe4, 0x8f, 0x70, 0x11, 0xb9, 0x87, 0x86,
	0xa3, 0xa3, 0x70, 0x94, 0x98, 0x8c, 0x78, 0x22, 0x5d, 0x6c, 0xe3, 0x42, 0x03, 0x3f, 0x16, 0xe7,
	0xbe, 0xe0, 0xc3, 0xb8, 0x53, 0x95, 0xda, 0x6c, 0x20, 0xe6, 0x18, 0x11, 0xcc, 0x82, 0xf2, 0x4b,
	0x3e, 0x51, 0x5b, 0xc3, 0x26, 0x4e, 0xf2, 0xd2, 0x0f, 0xbc, 0x4e, 0x9d, 0x26, 0xc1, 0xb6, 0x2e,
	0xa1, 0x46, 0x5e, 0xe9, 0x02, 0x36, 0x66, 0x48, 0x60, 0x21, 0xf3, 0xfc, 0x59, 0x00, 0x37, 0x19,
	0x1a, 0x77, 0x4a, 0xdb, 0xe5, 0xdd, 0xe6, 0xc1, 0x16, 0x29, 0x6d, 0xc6, 0x94, 0x8e, 0x46, 0x6c,
	0xff, 0x5f, 0x09, 0xda, 0x19, 0x8d, 0x2b, 0xdc, 0xcf, 0xf3, 0x38, 0x28, 0x11, 0x55, 0x32, 0x11,
	0x6d, 0x80, 0x19, 0x0b, 0x57, 0x70, 0x79, 0x02, 0x1a, 0x0e, 0x01, 0x28, 0xa4, 0x9e, 0xb4, 0x7d,
	0xb2, 0x94, 0xb2, 0x93, 0x80, 0xac, 0x0b, 0xf5, 0x61, 0xe8, 0xf9, 0x2f, 0x7c, 0x4e, 0x62, 0x2d,
	0x3b, 0x29, 0x2c, 0x75, 0xc6, 0x5f, 0x89, 0x0e, 0x28, 0x9d, 0xf1, 0x57, 0x02, 0x0d, 0x35, 0x18,
	0x0f, 0x2f, 0x78, 0xd4, 0x69, 0x6e, 0x1b, 0xbb, 0x86, 0xa3, 0x20, 0x5c, 0xe1, 0x22, 0x0c, 0x07,
	0xdc, 0x0d, 0x3a, 0xad, 0x6d, 0x63, 0xb7, 0xee, 0x24, 0x20, 0xae, 0x80, 0xfa, 0x10, 0xfe, 0x90,
	0x77, 0xda, 0x72, 0xa6, 0x14, 0xc6, 0x15, 0x50, 0xdf, 0x9d, 0x15, 0xa9, 0x7b, 0xd9, 0xc6, 0x15,
	0x62, 0x2e, 0x04, 0x8f, 0x3a, 0x16, 0xed, 0x95, 0x20, 0x76, 0x17, 0x9a, 0xd4, 0x3a, 0x97, 0x86,
	0xb4, 0x26, 0x3b, 0x81, 0x50, 0x67, 0x93, 0x11, 0xb7, 0xff, 0xb7, 0x04, 0x95, 0x45, 0x8f, 0x6a,
	0xf1, 0xf0, 0xe7, 0x15, 0x50, 0x29, 0x2a, 0x60, 0x07, 0xaa, 0x22, 0x72, 0x7b, 0x3c, 0xee, 0x34,
	0xa5, 0x2d, 0x34, 0xc9, 0x16, 0xce, 0x10, 0xe7, 0xa8, 0x2e, 0x76, 0x13, 0xaa, 0x7e, 0x7c, 0x7e,
	0xe1, 0x06, 0x9d, 0x15, 0x29, 0x01, 0xd3, 0x8f, 0xdf, 0x71, 0x03, 0xf6, 0x56, 0xce, 0x96, 0x98,
	0x1c, 0xbf, 0x5e, 0xb4, 0x25, 0x57, 0xb8, 0xba, 0x15, 0xa1, 0xd0, 0x62, 0xde, 0x1f, 0xa2, 0x3b,
	0xed, 0xac, 0x93, 0x9b, 0x4b, 0x60, 0x74, 0x33, 0xf2, 0x7a, 0x40, 0x4e, 0xb7, 0xc8, 0xcd, 0x48,
	0xf8, 0x58, 0x1e, 0x06, 0x77, 0xe0, 0xbb, 0x31, 0x8f, 0x3b, 0x77, 0xe4, 0xa8, 0x04, 0x44, 0x4b,
	0x19, 0xb9, 0x51, 0xc7, 0x96, 0xde, 0x05, 0x9b, 0x39, 0xcd, 0xdf, 0x2f, 0x68, 0x7e, 0x07, 0xda,
	0x49, 0xfb, 0xfc, 0x13, 0xce, 0x5f, 0x76, 0xbe, 0x28, 0xc7, 0xb5, 0x12, 0xe4, 0xaf, 0x70, 0xfe,
	0xd2, 0x7e, 0x00, 0x26, 0x8a, 0x3b, 0x66, 0xdb, 0x60, 0xe2, 0x76, 0xe2, 0x8e, 0x21, 0x37, 0xa7,
	0x7b, 0x37, 0xea, 0xb0, 0xff, 0xda, 0x80, 0xea, 0x13, 0x7e, 0xe5, 0xf7, 0xb8, 0x26, 0x79, 0x53,
	0x4a, 0xfe, 0x1e, 0xb4, 0x90, 0x26, 0x75, 0x9c, 0xe4, 0xff, 0x9a, 0x29, 0xee, 0xd8, 0x63, 0xb7,
	0xa0, 0x91, 0x82, 0xca, 0x81, 0x64, 0x08, 0xf6, 0x65, 0x58, 0x8b, 0x7b, 0x11, 0xe7, 0xc1, 0x79,
	0xc4, 0xe3, 0x70, 0x30, 0x96, 0x1e, 0x88, 0xac, 0xdf, 0xa2, 0x0e, 0x27, 0xc5, 0xa3, 0x11, 0x0d,
	0xdc, 0xa0, 0x3f, 0x76, 0xfb, 0x3c, 0x71, 0x9b, 0xa6, 0x03, 0x09, 0xea, 0x58, 0x9e, 0x87, 0x04,
	0x52, 0x6e, 0x26, 0x85, 0xed, 0x87, 0x50, 0x3d, 0x23, 0x55, 0x67, 0xf6, 0x50, 0x9e, 0x6b, 0x0f,
	0xf6, 0x77, 0xca, 0x60, 0x4a, 0xcc, 0x94, 0xb5, 0x21, 0x3c, 0x52, 0x56, 0x56, 0xf2, 0x47, 0x92,
	0xab, 0xb0, 0xe7, 0x22, 0x87, 0xc8, 0x95, 0xa9, 0xb8, 0x52, 0x28, 0xba, 0xf6, 0x7a, 0xbe, 0x98,
	0x9c, 0x4b, 0xc7, 0xab, 0xd8, 0x42, 0xc4, 0x87, 0xe8, 0x7c, 0xef, 0x41, 0x4b, 0xda, 0x69, 0xa4,
	0xfa, 0x1b, 0xe4, 0x7d, 0x15, 0xae, 0x48, 0xd2, 0x0b, 0x3d, 0xde, 0x59, 0xcf, 0x91, 0x1c, 0x85,
	0x1e, 0x67, 0x5f, 0x84, 0x95, 0x5e, 0x18, 0x08, 0x3f, 0x40, 0x3d, 0x48, 0x22, 0x3a, 0xf6, 0xed,
	0x14, 0x3b, 0x4d, 0x26, 0x97, 0x63, 0x05, 0x32, 0xb9, 0xa0, 0x14, 0xa3, 0xf0, 0xc5, 0xd8, 0xe3,
	0xd2, 0x1f, 0x94, 0x9c, 0x14, 0x46, 0x75, 0x0e, 0xc2, 0xa0, 0x4f, 0x9d, 0x6d, 0xd9, 0x99, 0x21,
	0x50, 0x16, 0xa3, 0x30, 0x16, 0xee, 0x80, 0x98, 0x58, 0xa1, 0x63, 0x4e, 0x28, 0xc9, 0x41, 0x17,
	0xea, 0xe8, 0x3b, 0xbe, 0x1d, 0x06, 0x5c, 0x79, 0x88, 0x14, 0x46, 0x2b, 0xf7, 0xe3, 0x91, 0xf2,
	0x0d, 0xd8, 0xb4, 0xff, 0xd0, 0x80, 0xd6, 0x09, 0x8f, 0xfa, 0xfc, 0x1a, 0x11, 0x52, 0xde, 0x19,
	0x94, 0x8b, 0xce, 0x60, 0x1f, 0xd6, 0x3d, 0x1e, 0x0b, 0x3f, 0x20, 0x85, 0x25, 0x9e, 0x99, 0x0c,
	0x73, 0x4d, 0xeb, 0x7a, 0x4e, 0x4e, 0xfa, 0x3e, 0xac, 0xc4, 0xe1, 0x38, 0xea, 0xf1, 0x94, 0x94,
	0x34, 0xdf, 0x22, 0x2c, 0x51, 0xd9, 0xef, 0x43, 0x3b, 0x09, 0x4f, 0x12, 0x46, 0x5b, 0xbd, 0x4b,
	0x77, 0x30, 0xe0, 0x01, 0xd9, 0x6a, 0x59, 0xe9, 0x2c, 0xc1, 0x1d, 0x7b, 0xe8, 0x2a, 0xdd, 0x20,
	0xfe, 0x84, 0x47, 0x6a, 0x46, 0x05, 0xd9, 0x7f, 0x60, 0x80, 0x79, 0x16, 0x8e, 0xfc, 0xde, 0x12,
	0xee, 0x9e, 0x0d, 0x30, 0x05, 0x4e, 0xa5, 0xd6, 0x27, 0x60, 0xe6, 0x75, 0xae, 0xdd, 0xc4, 0xf5,
	0x7c, 0xac, 0x92, 0x45, 0x37, 0x0d, 0x3d, 0xba, 0xb1, 0xff, 0xd2, 0x80, 0xe6, 0x73, 0xd9, 0x5c,
	0x98, 0xdb, 0xd9, 0xec, 0xe8, 0x91, 0x57, 0x25, 0x1f, 0x79, 0x69, 0x77, 0xa7, 0x99, 0xbb, 0x3b,
	0x93, 0x2d, 0x54, 0x3f, 0xd3, 0x16, 0x7e, 0xd7, 0x00, 0xcb, 0x49, 0x36, 0xf0, 0xa9, 0x6d, 0x6c,
	0x41, 0xa9, 0x6b, 0x7b, 0xa9, 0xe4, 0xf6, 0xa2, 0xef, 0xdf, 0xcc, 0xed, 0xdf, 0xbe, 0x04, 0xeb,
	0x74, 0x7c, 0x81, 0x81, 0xd8, 0xc5, 0x75, 0xce, 0x80, 0x3e, 0x63, 0x39, 0x2f, 0xd1, 0x4d, 0xa8,
	0x4a, 0x76, 0xe2, 0x4e, 0x45, 0xde, 0x31, 0x0a, 0xb2, 0xff, 0xd8, 0x80, 0x9b, 0x87, 0xfd, 0x7e,
	0xc4, 0xfb, 0xae, 0xe0, 0xa7, 0x74, 0x5b, 0x1d, 0xe1, 0x7e, 0x96, 0x20, 0x8f, 0x2f, 0xc1, 0xaa,
	0xba, 0xff, 0x52, 0x2f, 0x49, 0x5c, 0xad, 0xe8, 0x68, 0x12, 0x9c, 0x1c, 0x23, 0x05, 0x54, 0x76,
	0x08, 0xd0, 0xe3, 0x1f, 0x33, 0x17, 0xff, 0xd8, 0x7f, 0x64, 0xc0, 0x56, 0xca, 0xf4, 0x73, 0xa9,
	0xec, 0xe3, 0x40, 0xf0, 0xc8, 0xed, 0xa1, 0xd6, 0x3f, 0xc7, 0xd0, 0xed, 0x0e, 0x80, 0x9f, 0x2e,
	0xa4, 0xb8, 0xd2, 0x30, 0x3a, 0xcb, 0xd5, 0x3c, 0xcb, 0xff, 0xa5, 0xb3, 0xac, 0xe4, 0x8c, 0x91,
	0xc4, 0xb2, 0x64, 0x6d, 0x41, 0x79, 0xe8, 0x07, 0x92, 0xdd, 0xb2, 0x83, 0xcd, 0x4c, 0xa8, 0xe6,
	0x1c, 0xa1, 0xe6, 0x39, 0x9c, 0xa5, 0xad, 0xda, 0x4c, 0x6d, 0xdd, 0x82, 0x46, 0x1a, 0xf4, 0xa8,
	0x7b, 0x2d, 0x43, 0xd8, 0x43, 0x58, 0x39, 0x95, 0x81, 0xcd, 0x93, 0xeb, 0x19, 0x6e, 0x1a, 0x1d,
	0x95, 0xf2, 0xd1, 0xd1, 0xeb, 0xfd, 0xba, 0x3d, 0x86, 0xd6, 0x89, 0x1b, 0xbf, 0x74, 0x78, 0x3c,
	0x0a, 0x83, 0x98, 0x7f, 0xfa, 0x99, 0xe6, 0x9f, 0xd3, 0x59, 0x39, 0xe6, 0xaf, 0x1b, 0xb0, 0x9a,
	0x6e, 0x53, 0x2d, 0xfd, 0x79, 0xee, 0x73, 0x2e, 0x77, 0xf6, 0x00, 0xda, 0xa7, 0x9a, 0x7e, 0x16,
	0xca, 0x94, 0xde, 0x86, 0xb6, 0xae, 0xd3, 0x24, 0x20, 0x62, 0x14, 0x10, 0xe9, 0xd3, 0x39, 0x79,
	0x42, 0xfb, 0xbf, 0xcb, 0xd0, 0xd2, 0xfb, 0x97, 0x60, 0xb9, 0x14, 0x67, 0x99, 0x7a, 0x4a, 0xff,
	0x93, 0x52, 0xd5, 0xe6, 0x74, 0xaa, 0x7a, 0x1b, 0x40, 0xca, 0x47, 0xf7, 0x23, 0x32, 0xde, 0x4c,
	0x0e, 0x58, 0x2b, 0x16, 0x6e, 0x24, 0xb8, 0x77, 0xfe, 0x22, 0x0a, 0x87, 0x2a, 0xa1, 0x6a, 0x2a,
	0xdc, 0xbb, 0x51, 0x38, 0xd4, 0x4f, 0x46, 0x63, 0x7e, 0xba, 0x05, 0x85, 0xa0, 0x3b, 0x4d, 0xdd,
	0x5a, 0x7a, 0xea, 0xf6, 0x15, 0x80, 0x5e, 0x18, 0x78, 0x94, 0xbb, 0xca, 0x5c, 0xa0, 0x79, 0x60,
	0x29, 0xe9, 0x1e, 0x25, 0x1d, 0x8e, 0x46, 0x93, 0xae, 0x1e, 0x46, 0x9d, 0x0d, 0x32, 0x0c, 0x05,
	0xca, 0x15, 0x7a, 0xe1, 0x88, 0x77, 0x6e, 0xaa, 0x15, 0x10, 0xc0, 0xe0, 0xd2, 0x8f, 0xcf, 0xe3,
	0x49, 0x2c, 0xf8, 0xb0, 0xb3, 0x29, 0x53, 0x97, 0xba, 0x1f, 0x9f, 0x4a, 0xd8, 0xbe, 0x07, 0xe6,
	0xa9, 0xe4, 0x03, 0xa0, 0xea, 0xf6, 0x84, 0x7f, 0xc5, 0xad, 0x1b, 0xac, 0x05, 0x75, 0x3f, 0x50,
	0x90, 0x61, 0xdf, 0x05, 0xf3, 0x54, 0x4e, 0xd4, 0x00, 0x53, 0xde, 0x11, 0xd6, 0x0d, 0xd6, 0x84,
	0x9a, 0x52, 0x8b, 0x65, 0xe0, 0x1d, 0xd9, 0x48, 0x59, 0x45, 0xa5, 0x7c, 0x1c, 0xfa, 0x81, 0xd4,
	0x73, 0xc3, 0x91, 0xed, 0x24, 0x8f, 0x2d, 0x65, 0x79, 0x6c, 0x17, 0xea, 0xe1, 0x88, 0x47, 0x72,
	0x17, 0xa4, 0xbe, 0x14, 0xc6, 0x6d, 0x5c, 0xb9, 0x83, 0x31, 0x57, 0xe6, 0x4b, 0x80, 0x52, 0x7e,
	0x35, 0x51, 0xbe, 0xfd, 0x00, 0x5a, 0xef, 0x87, 0x7e, 0xf0, 0x4b, 0xc9, 0xa8, 0x3a, 0x54, 0x82,
	0x30, 0x40, 0xf6, 0x6b, 0x50, 0x76, 0x03, 0xcf, 0x32, 0x58, 0x15, 0x4a, 0x61, 0x64, 0x95, 0xec,
	0xef, 0x96, 0xa8, 0x3e, 0x74, 0xca, 0xdd, 0xa8, 0x77, 0xa9, 0xea, 0x43, 0x8b, 0x06, 0x23, 0xc2,
	0x1d, 0x28, 0x5f, 0x49, 0x40, 0x96, 0x0e, 0x55, 0xe6, 0xa4, 0x43, 0x14, 0xb7, 0xf5, 0x2e, 0xc3,
	0x28, 0x09, 0x49, 0x08, 0x92, 0xe1, 0x87, 0x0c, 0x2b, 0xa8, 0x1a, 0x62, 0x3a, 0x09, 0xc8, 0x4e,
	0xa0, 0x4d, 0x4d, 0xb2, 0xca, 0xb8, 0x53, 0x93, 0x73, 0xef, 0x66, 0x73, 0xeb, 0xbc, 0xef, 0x53,
	0x50, 0x25, 0xed, 0x35, 0x7e, 0x8a, 0x21, 0xbe, 0xd3, 0x1a, 0x6b, 0xa8, 0xee, 0x2f, 0xc0, 0xda,
	0x14, 0x49, 0xa2, 0x04, 0x23, 0x57, 0x4c, 0x20, 0x41, 0x97, 0x64, 0xcc, 0x43, 0xc0, 0xcf, 0x95,
	0xde, 0x36, 0xec, 0x1f, 0x1a, 0xb0, 0xa6, 0xaf, 0xba, 0xb0, 0x7b, 0xbe, 0xce, 0x45, 0xfe, 0xad,
	0x31, 0x8f, 0x92, 0xe2, 0x06, 0x01, 0x73, 0x25, 0xb7, 0x01, 0xe6, 0xc0, 0x1f, 0xfa, 0x42, 0xea,
	0xdf, 0x74, 0x08, 0xc8, 0x05, 0x31, 0xf5, 0xa9, 0x20, 0x46, 0x8b, 0xe7, 0xea, 0x69, 0x3c, 0xf7,
	0xcf, 0x06, 0xc0, 0x71, 0xe0, 0xf1, 0x57, 0x4f, 0xaf, 0x30, 0xb9, 0xbc, 0x66, 0x9d, 0x60, 0x6e,
	0xb0, 0x39, 0xff, 0xae, 0xec, 0x42, 0xbd, 0xe7, 0x0a, 0xde, 0x0f, 0xa3, 0xa4, 0xd4, 0x95, 0xc2,
	0x5a, 0xa4, 0x55, 0xd7, 0x23, 0x2d, 0xc4, 0x87, 0x17, 0x1f, 0xf3, 0x9e, 0x50, 0xb9, 0x9e, 0x82,
	0x66, 0x15, 0x6c, 0x30, 0xc0, 0x59, 0xfb, 0xc0, 0x8f, 0x85, 0x0c, 0x50, 0xe3, 0x65, 0xd4, 0x89,
	0xe7, 0x07, 0x9b, 0x9a, 0x7a, 0x2a, 0xb3, 0xd5, 0x53, 0xd3, 0xd5, 0x93, 0xe9, 0xa0, 0x9e, 0xd3,
	0x41, 0x04, 0x96, 0xce, 0xf1, 0xa2, 0xa7, 0x71, 0x27, 0x95, 0x56, 0x3e, 0x29, 0x97, 0x91, 0xb9,
	0x26, 0xba, 0x59, 0x06, 0x64, 0x7f, 0xc7, 0x80, 0x55, 0x5c, 0xf4, 0x43, 0xfe, 0xc9, 0x52, 0x84,
	0x74, 0x1b, 0x40, 0xde, 0x08, 0xe7, 0xb2, 0xee, 0xa5, 0x2e, 0x11, 0x89, 0x39, 0xf3, 0x87, 0x3c,
	0x2f, 0x90, 0x86, 0x12, 0x88, 0xed, 0x41, 0x53, 0xd5, 0xf3, 0x91, 0x95, 0xcf, 0x58, 0x72, 0x9e,
	0xc7, 0x9a, 0xfd, 0xfb, 0x06, 0xd4, 0x9f, 0x45, 0x3c, 0xe6, 0x41, 0x8f, 0x2f, 0x21, 0x1d, 0x9e,
	0x1b, 0xec, 0x6c, 0x42, 0x75, 0xe4, 0x07, 0xfd, 0x34, 0xba, 0x55, 0x10, 0xdb, 0x81, 0x36, 0xb5,
	0xce, 0x87, 0x7e, 0x30, 0x56, 0xa5, 0xca, 0xb2, 0xd3, 0x22, 0xe4, 0x89, 0xc4, 0xd9, 0xff, 0x69,
	0x40, 0xed, 0x23, 0x3f, 0xf6, 0xd1, 0x73, 0x7f, 0x76, 0x1e, 0x93, 0xf2, 0x7b, 0x65, 0x7e, 0xf9,
	0x7d, 0x26, 0xab, 0x5b, 0x50, 0x1f, 0xb9, 0x7d, 0x7e, 0x3e, 0x8e, 0x06, 0xea, 0x66, 0xa9, 0x21,
	0xfc, 0x3c, 0x1a, 0xc8, 0x3a, 0x05, 0x76, 0x5d, 0xf9, 0xfc, 0x93, 0xb4, 0xac, 0x0a, 0x88, 0xfa,
	0x48, 0x62, 0x90, 0x25, 0x49, 0x20, 0x7c, 0x31, 0x48, 0x83, 0x5b, 0xc4, 0x9c, 0x21, 0xc2, 0xfe,
	0x55, 0xa8, 0xab, 0xfd, 0x2d, 0x14, 0x67, 0x3d, 0x80, 0xfa, 0x95, 0x22, 0x57, 0xf5, 0xe8, 0x36,
	0xed, 0x42, 0x4d, 0xe2, 0xa4, 0xdd, 0xf6, 0x5f, 0x18, 0x50, 0xff, 0xc0, 0x8d, 0x05, 0xf2, 0xf1,
	0xa9, 0x95, 0x67, 0x41, 0x19, 0x37, 0x4d, 0x87, 0x04, 0x9b, 0xe8, 0x0a, 0xc7, 0x6e, 0x72, 0xbf,
	0x8e, 0x5d, 0x55, 0xc4, 0xaa, 0xa5, 0x45, 0x2c, 0xcd, 0xc5, 0xd5, 0xf3, 0x2e, 0x6e, 0x0b, 0xea,
	0xfc, 0x4a, 0x19, 0x29, 0x39, 0xac, 0x9a, 0x84, 0x55, 0x9e, 0x2b, 0xe5, 0x03, 0x2a, 0xcf, 0x95,
	0xb2, 0xf9, 0x51, 0x05, 0xe0, 0x70, 0x2c, 0xc2, 0xe1, 0x72, 0x03, 0xc3, 0xcc, 0x8d, 0x23, 0xaf,
	0x97, 0x6e, 0x10, 0xf0, 0x41, 0x52, 0x2e, 0x50, 0x60, 0x1a, 0x32, 0x9a, 0xf3, 0x43, 0xc6, 0xea,
	0x74, 0xc8, 0xf8, 0x28, 0x17, 0xa4, 0xd1, 0xdd, 0xbc, 0x4a, 0xfa, 0x99, 0x1d, 0xa3, 0xed, 0x43,
	0x23, 0x85, 0xa4, 0xb8, 0x66, 0x05, 0x75, 0x19, 0xc9, 0x52, 0x23, 0xca, 0xbb, 0xd0, 0xc4, 0xd8,
	0x2d, 0x0c, 0xa8, 0x90, 0x4e, 0x35, 0x79, 0x20, 0xd4, 0xd9, 0x64, 0xa4, 0x13, 0x78, 0xae, 0x70,
	0x93, 0x12, 0x1c, 0xa1, 0xe4, 0x8b, 0x46, 0x1a, 0x47, 0xae, 0xea, 0x71, 0xe4, 0x0e, 0xb4, 0x7b,
	0x51, 0x18, 0xc7, 0xe7, 0x89, 0x68, 0x2d, 0xe9, 0xd5, 0x5b, 0x12, 0x79, 0xa4, 0xe4, 0x8b, 0xec,
	0x72, 0xe1, 0xca, 0x89, 0xa9, 0x4c, 0x97, 0xc2, 0x8b, 0xc4, 0x9a, 0xdf, 0x00, 0x38, 0xcc, 0x18,
	0xed, 0xc0, 0x46, 0x2f, 0x0c, 0xae, 0x78, 0x14, 0x53, 0x30, 0x31, 0xe4, 0x71, 0xec, 0xf6, 0x71,
	0xd4, 0x26, 0x30, 0xf2, 0x8b, 0x41, 0x28, 0xfc, 0x17, 0x3e, 0x15, 0x52, 0x2d, 0x43, 0x7a, 0xd8,
	0xd4, 0xb0, 0x16, 0x3a, 0x78, 0x07, 0xd0, 0x74, 0xb3, 0x11, 0xea, 0xec, 0x29, 0x5d, 0x65, 0x53,
	0x39, 0x3a, 0x91, 0xfd, 0x1e, 0xac, 0x3d, 0xe1, 0x03, 0x2e, 0x38, 0xa6, 0xe5, 0xd7, 0xb8, 0x4d,
	0xa6, 0xc2, 0x60, 0xfb, 0x6f, 0x4a, 0xf0, 0x25, 0x19, 0xa3, 0xe9, 0x99, 0x12, 0x3a, 0xae, 0x77,
	0x26, 0xe9, 0xe3, 0xc1, 0xf2, 0xaa, 0x4e, 0x3b, 0xd0, 0x4e, 0xb3, 0xef, 0x73, 0xe4, 0x84, 0x4e,
	0x4c, 0x2b, 0x45, 0x7e, 0x93, 0x4f, 0x66, 0x45, 0x70, 0x95, 0x99, 0x11, 0x1c, 0x83, 0x8a, 0x4c,
	0x90, 0xa8, 0x9c, 0x2d, 0xdb, 0x78, 0x10, 0x45, 0xa8, 0x82, 0xb4, 0x92, 0x08, 0xd1, 0x92, 0x22,
	0x37, 0x48, 0x6b, 0xed, 0x04, 0x60, 0x46, 0x82, 0xd4, 0xe7, 0x97, 0xe1, 0x38, 0x52, 0xf5, 0xb6,
	0x3a, 0x22, 0xde, 0x0b, 0xc7, 0x11, 0xba, 0x2c, 0x11, 0x52, 0x17, 0x50, 0x29, 0x4e, 0x84, 0xd8,
	0x61, 0x77, 0xc1, 0x74, 0xe4, 0xf0, 0x3a, 0x54, 0xb0, 0x9b, 0x22, 0x7d, 0xcf, 0x9d, 0x58, 0x86,
	0xbd, 0x03, 0x6d, 0x29, 0xc6, 0x34, 0xc3, 0x66, 0x50, 0x91, 0x36, 0x58, 0x96, 0x71, 0xb6, 0x6c,
	0xdb, 0xbf, 0x6d, 0x40, 0xfb, 0x79, 0x30, 0xf2, 0x7b, 0x2f, 0x97, 0x27, 0xd2, 0xb9, 0x01, 0xc2,
	0x0c, 0x31, 0x9a, 0xb3, 0xc4, 0x68, 0xff, 0x95, 0x01, 0xcd, 0x67, 0x3f, 0x1d, 0x9e, 0x5e, 0x53,
	0x46, 0x5d, 0x94, 0x5d, 0xd4, 0xa8, 0xeb, 0x79, 0xe9, 0x8d, 0x48, 0x80, 0xfd, 0x7b, 0x06, 0xac,
	0x66, 0xa7, 0xe5, 0xe8, 0x92, 0xf7, 0x5e, 0x2e, 0x62, 0x8c, 0xe9, 0x88, 0x8c, 0xd7, 0x56, 0x86,
	0x7c, 0xdd, 0xfd, 0xa5, 0xdf, 0x39, 0xe6, 0xd4, 0x9d, 0x43, 0xde, 0xab, 0xaa, 0x79, 0x2f, 0xfb,
	0xb7, 0x8c, 0xb4, 0x1c, 0x21, 0xe3, 0xff, 0xa5, 0x55, 0x24, 0x19, 0x54, 0x26, 0xdc, 0x8d, 0xd4,
	0xc3, 0x96, 0x6c, 0xe3, 0x41, 0xf7, 0xdc, 0x89, 0x3a, 0x19, 0xd8, 0x44, 0x2a, 0x69, 0xd2, 0x74,
	0x34, 0x64, 0xdb, 0xfe, 0xbe, 0x01, 0x4d, 0xc5, 0x92, 0x7c, 0xd7, 0x5c, 0x16, 0x47, 0x6a, 0xf5,
	0xca, 0xf4, 0xea, 0x66, 0xb6, 0xba, 0x2e, 0xda, 0x6a, 0x4e, 0xb4, 0xb7, 0xa0, 0x21, 0xfd, 0xb1,
	0xf6, 0x9c, 0x9c, 0x21, 0xf0, 0xec, 0xe2, 0x09, 0xe2, 0xde, 0xf9, 0xc5, 0x24, 0x79, 0xaa, 0x22,
	0xc4, 0x3b, 0x13, 0xfb, 0x37, 0xcb, 0x00, 0xd9, 0x05, 0x37, 0x75, 0x2d, 0x4f, 0x3f, 0x67, 0xeb,
	0x65, 0x00, 0x73, 0x5e, 0x19, 0xa0, 0xaa, 0x97, 0x01, 0x92, 0xf2, 0x42, 0x4d, 0x2b, 0x2f, 0xbc,
	0x09, 0xab, 0x64, 0x0c, 0x78, 0xe1, 0x51, 0x44, 0x4e, 0x9c, 0xb5, 0x25, 0x1a, 0xef, 0x12, 0x19,
	0x95, 0xdf, 0x06, 0xc8, 0xe8, 0x54, 0x48, 0xd2, 0x48, 0x49, 0x0a, 0xa5, 0x98, 0xc6, 0x02, 0xa5,
	0x98, 0x2e, 0xd4, 0x47, 0x91, 0x1f, 0x46, 0xbe, 0x98, 0xc8, 0x3b, 0xd8, 0x74, 0x52, 0x18, 0xed,
	0x9b, 0x16, 0xe3, 0xaf, 0xfc, 0x18, 0x45, 0xd9, 0xa6, 0xeb, 0x52, 0x22, 0x9f, 0x12, 0xce, 0x7e,
	0x1b, 0x1a, 0x32, 0x11, 0x95, 0xec, 0x65, 0x15, 0x8c, 0x26, 0xd4, 0x7a, 0xe3, 0x28, 0xe2, 0x81,
	0xb0, 0x0c, 0xbc, 0x2d, 0x07, 0xae, 0xe0, 0xb1, 0xb0, 0x4a, 0x48, 0x32, 0x72, 0x63, 0x61, 0x95,
	0xed, 0xbb, 0x85, 0xf2, 0x87, 0x2a, 0x7a, 0xdc, 0x50, 0x45, 0x0f, 0xc3, 0x7e, 0x05, 0xe6, 0xe1,
	0xc0, 0x77, 0xe3, 0xcf, 0x9a, 0xe6, 0xbc, 0x2e, 0x1f, 0x46, 0x67, 0x80, 0x6b, 0x28, 0xdd, 0x11,
	0x60, 0x7f, 0xd7, 0x80, 0xb5, 0x67, 0xe3, 0x8b, 0x81, 0x1f, 0x5f, 0xa6, 0x4f, 0x13, 0x4b, 0xae,
	0xb5, 0xe7, 0x9d, 0x41, 0xfa, 0x9a, 0x62, 0x16, 0x1e, 0x8d, 0x52, 0x17, 0x51, 0xcd, 0xbb, 0x88,
	0x15, 0x28, 0xa5, 0xd6, 0x5b, 0xba, 0x98, 0xd8, 0x3f, 0x30, 0x60, 0x73, 0x8a, 0x63, 0x87, 0x8f,
	0x06, 0x93, 0x25, 0xb0, 0x9d, 0xfb, 0xa6, 0xa9, 0x5c, 0xf8, 0xa6, 0xe9, 0x73, 0xdb, 0xd3, 0xde,
	0xfb, 0xda, 0x77, 0x2a, 0xd2, 0xbc, 0xeb, 0x54, 0x3d, 0xb0, 0x6e, 0xa0, 0x45, 0xd1, 0x67, 0x1d,
	0x96, 0x81, 0xa6, 0xa6, 0xbe, 0xe4, 0xb0, 0x4a, 0x18, 0x8c, 0x25, 0xdf, 0x6e, 0x58, 0x65, 0x1c,
	0x30, 0xf0, 0x63, 0x61, 0x55, 0xf6, 0xbe, 0xaa, 0xcd, 0xf5, 0x4d, 0x3f, 0xf0, 0x70, 0x06, 0x2a,
	0x28, 0x92, 0xb1, 0x7a, 0xfc, 0x85, 0x3b, 0x1e, 0x28, 0x63, 0xed, 0x8d, 0x63, 0x11, 0x0e, 0xad,
	0xd2, 0xde, 0x97, 0x81, 0xe5, 0xbe, 0x80, 0xa0, 0xe0, 0x4f, 0xce, 0x7a, 0xc5, 0x93, 0x81, 0x18,
	0x46, 0x79, 0x96, 0xb1, 0xf7, 0xbd, 0x16, 0x98, 0x54, 0x93, 0xb9, 0x49, 0xa5, 0x27, 0x87, 0xbb,
	0x9e, 0xba, 0x13, 0x39, 0xda, 0xf5, 0x1b, 0xb0, 0x8e, 0x68, 0x7a, 0xc3, 0xc9, 0x3a, 0x4a, 0x49,
	0x47, 0xee, 0x75, 0x95, 0x7b, 0x56, 0x39, 0xe9, 0xc8, 0xd5, 0xb0, 0xb8, 0x67, 0x55, 0xd8, 0x2d,
	0xe8, 0x60, 0x87, 0x5c, 0xae, 0x38, 0xcc, 0xcc, 0xf5, 0x16, 0xc7, 0xd6, 0x92, 0x5e, 0x59, 0x75,
	0x28, 0xf6, 0x56, 0xd9, 0x0e, 0xdc, 0xa5, 0x25, 0x33, 0x87, 0x5c, 0x5c, 0x00, 0x66, 0x11, 0x15,
	0x77, 0xd5, 0x9c, 0x45, 0x44, 0x31, 0x67, 0x46, 0xd4, 0x62, 0xf7, 0xe0, 0x76, 0x91, 0xe8, 0x03,
	0x3f, 0x16, 0x19, 0x49, 0x7b, 0x16, 0x49, 0x5e, 0xb2, 0x2b, 0xc9, 0x96, 0xb4, 0xd2, 0x44, 0xd6,
	0xbb, 0x91, 0x4c, 0xe0, 0xf0, 0x61, 0x78, 0xc5, 0xdf, 0x8d, 0xc2, 0x61, 0x91, 0xe4, 0x26, 0xbb,
	0x0f, 0xdb, 0xa9, 0xc4, 0x48, 0x30, 0x85, 0x17, 0x49, 0xee, 0x59, 0x3b, 0xec, 0x4d, 0xb0, 0xf3,
	0x54, 0xcf, 0x83, 0x78, 0x9a, 0xee, 0x3e, 0xeb, 0xc2, 0x66, 0xa2, 0x7f, 0xfd, 0xd5, 0x95, 0x7b,
	0xd6, 0x03, 0xb6, 0x0a, 0x4d, 0xb9, 0x1b, 0x7a, 0x09, 0xb1, 0xf6, 0xd8, 0x6d, 0xd8, 0x42, 0x44,
	0x52, 0xef, 0xc8, 0x6f, 0xed, 0x67, 0xd8, 0x5d, 0xf8, 0x82, 0xea, 0xc6, 0x3c, 0xde, 0x0f, 0xfa,
	0x79, 0x82, 0x7d, 0x4c, 0x31, 0x90, 0x40, 0xd5, 0xa3, 0xb2, 0x9e, 0x47, 0xc9, 0xbe, 0xb3, 0xa8,
	0xe6, 0xf9, 0x28, 0xe6, 0x91, 0xb6, 0xef, 0x83, 0x69, 0x92, 0xa2, 0x86, 0xde, 0x4a, 0x18, 0xc8,
	0x48, 0xf2, 0xb2, 0xfb, 0xea, 0x34, 0x41, 0x9e, 0xc3, 0xaf, 0xa1, 0x70, 0xb3, 0x4e, 0xf9, 0x05,
	0xe6, 0x87, 0x5a, 0xce, 0xf3, 0xae, 0x1f, 0x71, 0xcf, 0x7a, 0x8c, 0xc2, 0xd5, 0xe2, 0x2f, 0x2d,
	0x69, 0x3a, 0xa1, 0x9c, 0x89, 0xe8, 0xbe, 0xce, 0xee, 0x40, 0x97, 0xcc, 0x21, 0x8e, 0x67, 0x98,
	0xdd, 0x61, 0xa1, 0xbf, 0x68, 0xbb, 0xef, 0x24, 0xb6, 0xa2, 0xfa, 0xf3, 0xbc, 0x1e, 0xb1, 0x0d,
	0xb0, 0x72, 0xb6, 0x18, 0x86, 0x23, 0xeb, 0x09, 0x62, 0x33, 0xde, 0x4e, 0x27, 0x41, 0x8f, 0x7b,
	0xd6, 0x0b, 0xb6, 0xae, 0x47, 0x8c, 0xc4, 0x5e, 0x9f, 0xad, 0x41, 0x9b, 0x74, 0x9f, 0xcc, 0xe9,
	0x25, 0x2a, 0x27, 0x56, 0x3c, 0xeb, 0x5d, 0xcc, 0xfd, 0xa4, 0xc4, 0x12, 0xd7, 0x72, 0x88, 0x11,
	0xa8, 0xf5, 0x8b, 0x09, 0x21, 0xed, 0xc9, 0xb3, 0xde, 0x63, 0x2b, 0x00, 0x92, 0x57, 0x5a, 0x91,
	0x33, 0x0b, 0x5a, 0x44, 0x80, 0x7a, 0xe4, 0x9e, 0xe5, 0x27, 0x98, 0x8f, 0xde, 0x52, 0x34, 0x1f,
	0xb3, 0x16, 0xd4, 0x10, 0xf3, 0x7e, 0x78, 0x61, 0xfd, 0x9d, 0xc1, 0x36, 0x60, 0x95, 0xd8, 0x89,
	0xc3, 0xc1, 0x15, 0xf7, 0x10, 0xfb, 0xf7, 0x06, 0xbb, 0x49, 0xaf, 0x09, 0x1a, 0xf6, 0xc0, 0xfa,
	0x5b, 0x83, 0xdd, 0x26, 0xd1, 0x24, 0x68, 0xcd, 0xbb, 0x78, 0xd6, 0x3f, 0x18, 0x6c, 0x1d, 0x56,
	0x24, 0xdb, 0x78, 0x45, 0x12, 0xcb, 0xff, 0x98, 0x4e, 0x25, 0x91, 0x4f, 0x94, 0x2f, 0xfc, 0x5e,
	0x8a, 0xce, 0x4d, 0xf1, 0x4f, 0xd9, 0x14, 0xc9, 0xe3, 0xb0, 0x67, 0x7d, 0xdf, 0x60, 0x6b, 0xb4,
	0x07, 0x79, 0x54, 0x90, 0xc1, 0x7f, 0x31, 0xd8, 0x2d, 0x78, 0x23, 0x7f, 0xd2, 0xd4, 0xdd, 0xc6,
	0x3d, 0xeb, 0x07, 0x06, 0xbb, 0x43, 0x47, 0x46, 0x5a, 0xd1, 0x84, 0xbe, 0x7e, 0xcd, 0xe4, 0xfd,
	0xaf, 0xe9, 0x3e, 0x94, 0x22, 0xb5, 0xd4, 0x84, 0x7b, 0xd6, 0xbf, 0x19, 0xec, 0x6e, 0x62, 0x21,
	0x14, 0xb8, 0xea, 0xf9, 0x14, 0xf7, 0xac, 0x7f, 0x37, 0x98, 0xad, 0x4e, 0xc5, 0xbc, 0x27, 0x6c,
	0xeb, 0x87, 0xd3, 0x34, 0xc5, 0x97, 0x79, 0xeb, 0x47, 0x29, 0x9f, 0x33, 0x3f, 0x39, 0xb0, 0xfe,
	0xc3, 0x60, 0x5d, 0xb8, 0xa9, 0x31, 0xa2, 0x09, 0xe5, 0xc7, 0xc6, 0xde, 0xe2, 0x8f, 0x43, 0x7b,
	0x0f, 0x30, 0x75, 0x54, 0x11, 0x9d, 0xbc, 0x27, 0xdb, 0xda, 0xa3, 0xb5, 0x75, 0x83, 0x35, 0xc0,
	0x94, 0x57, 0xac, 0x65, 0xec, 0x3d, 0xd4, 0x4d, 0x96, 0xde, 0xc4, 0x2c, 0x68, 0xe9, 0x25, 0x0a,
	0x0a, 0xd1, 0xf0, 0x0a, 0xb7, 0xca, 0x07, 0x7f, 0x5a, 0x82, 0x55, 0xfd, 0x38, 0x9c, 0xf4, 0x23,
	0xf6, 0xf5, 0xe4, 0x33, 0x20, 0xd5, 0xc1, 0x66, 0xbc, 0xa4, 0x76, 0x67, 0xe0, 0x70, 0x20, 0x09,
	0xe9, 0xba, 0x03, 0x1f, 0x41, 0x0b, 0x7d, 0xce, 0x69, 0xf2, 0x79, 0x21, 0x24, 0x31, 0xcc, 0xb1,
	0xd7, 0x5d, 0x9f, 0xa6, 0x8f, 0xd9, 0x1e, 0xb4, 0xc9, 0x14, 0x93, 0x95, 0xf4, 0x11, 0xed, 0xa4,
	0xfd, 0x74, 0x38, 0x12, 0x13, 0xf6, 0x10, 0x9a, 0xe8, 0x03, 0x66, 0x51, 0xce, 0xe2, 0xe5, 0x01,
	0x54, 0x9e, 0xf9, 0x41, 0x9f, 0xad, 0x27, 0x74, 0xcf, 0xa4, 0x4b, 0x96, 0xc6, 0xd3, 0x6d, 0xa5,
	0xc8, 0x30, 0xe8, 0x1f, 0xfc, 0xb9, 0x01, 0xa0, 0x6a, 0x9f, 0x28, 0xb7, 0x3d, 0x68, 0xe1, 0x42,
	0x69, 0x5d, 0x5b, 0x5f, 0x69, 0x85, 0x56, 0x4a, 0xfb, 0x1e, 0x10, 0x53, 0xca, 0xe9, 0xcf, 0x22,
	0x4d, 0xcb, 0xa7, 0x0f, 0xe9, 0x55, 0xe0, 0x2c, 0x1c, 0xa5, 0xc5, 0xda, 0x19, 0xe4, 0x69, 0xdf,
	0x35, 0xf8, 0xff, 0x71, 0x85, 0x3c, 0x09, 0x32, 0xff, 0x0d, 0xcc, 0xf3, 0x30, 0x54, 0xa0, 0xef,
	0x29, 0xdf, 0x98, 0x7e, 0xd5, 0xa3, 0x19, 0x36, 0x67, 0x3f, 0xf7, 0xb1, 0xc7, 0x50, 0x53, 0x5f,
	0x10, 0xb0, 0x0d, 0x25, 0xd5, 0xdc, 0x77, 0x13, 0xdd, 0x9b, 0x05, 0xac, 0x2a, 0x82, 0x3c, 0x06,
	0x86, 0xc7, 0xf7, 0x2c, 0xcc, 0x29, 0x61, 0x4d, 0x89, 0x2b, 0x3b, 0xb7, 0x45, 0xad, 0xfe, 0x3c,
	0x6c, 0x92, 0x05, 0xe0, 0x75, 0x9f, 0x1b, 0xab, 0x0c, 0x26, 0x77, 0xea, 0x8b, 0xa3, 0xef, 0x03,
	0x90, 0x89, 0xcb, 0xa4, 0x56, 0x2b, 0xc6, 0x77, 0x35, 0xd1, 0x22, 0x15, 0xd9, 0xf3, 0x6b, 0xa9,
	0x6c, 0xa8, 0xa3, 0x2a, 0x15, 0x4d, 0xa6, 0x18, 0x8d, 0x9e, 0xbd, 0x80, 0xed, 0x9f, 0x54, 0x42,
	0x63, 0x0f, 0x93, 0x62, 0xed, 0x42, 0xa5, 0xb6, 0xe4, 0x5c, 0xe4, 0x4b, 0x4a, 0x8b, 0x2b, 0x9f,
	0xbd, 0x09, 0xf5, 0x43, 0xcf, 0xa3, 0xf4, 0x4b, 0x3d, 0x53, 0x49, 0xa0, 0x28, 0xaa, 0xaf, 0x81,
	0x75, 0x12, 0x5e, 0x49, 0x11, 0x1c, 0x62, 0x86, 0x8d, 0x79, 0xa3, 0x3a, 0x37, 0xfa, 0x47, 0x8d,
	0x85, 0x61, 0x07, 0x7f, 0x56, 0x82, 0x76, 0xe6, 0x88, 0xd0, 0xc2, 0xbe, 0x42, 0x76, 0xac, 0xd7,
	0x3e, 0x75, 0x71, 0xad, 0x15, 0xeb, 0x99, 0x31, 0x7b, 0x0c, 0x16, 0xc9, 0x5f, 0x2b, 0xc4, 0x4f,
	0x95, 0x3d, 0xbb, 0x53, 0x18, 0xf6, 0x10, 0x2c, 0x55, 0xfb, 0xcc, 0x70, 0xaf, 0x71, 0x10, 0xfb,
	0xb0, 0x82, 0x0a, 0x9c, 0x43, 0x3c, 0x3d, 0xfd, 0x63, 0xb0, 0xc8, 0x78, 0xae, 0xc9, 0xd6, 0x35,
	0x4e, 0xe6, 0xff, 0x94, 0xa0, 0x95, 0x6a, 0x1c, 0x85, 0xf7, 0x14, 0x3a, 0x52, 0x78, 0xb3, 0x7e,
	0x4c, 0x90, 0xdf, 0x4e, 0xb7, 0x3b, 0xf7, 0x47, 0x02, 0x31, 0xfb, 0x65, 0xd8, 0x52, 0xac, 0xcf,
	0xf8, 0x5d, 0xc6, 0xfc, 0x5f, 0x17, 0x74, 0xe7, 0x77, 0xe1, 0x94, 0x4a, 0x49, 0x4b, 0x9b, 0xf2,
	0x08, 0xb6, 0xb2, 0xda, 0x75, 0xb1, 0x53, 0x79, 0xa6, 0xa9, 0xe2, 0x76, 0x51, 0xab, 0x8b, 0x4b,
	0xfb, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0xe5, 0x9b, 0x22, 0x06, 0x35, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SegmentationMgrClient is the client API for SegmentationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentationMgrClient interface {
	CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error)
	DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type segmentationMgrClient struct {
	cc *grpc.ClientConn
}

func NewSegmentationMgrClient(cc *grpc.ClientConn) SegmentationMgrClient {
	return &segmentationMgrClient{cc}
}

func (c *segmentationMgrClient) CreateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/CreateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/UpdateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ListSegments(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentations, error) {
	out := new(Segmentations)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/ListSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) DeleteSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) ReadSegment(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/ReadSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentationMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/user.SegmentationMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentationMgrServer is the server API for SegmentationMgr service.
type SegmentationMgrServer interface {
	CreateSegment(context.Context, *Segmentation) (*Segmentation, error)
	UpdateSegment(context.Context, *Segmentation) (*Segmentation, error)
	ListSegments(context.Context, *common.Id) (*Segmentations, error)
	DeleteSegment(context.Context, *common.Id) (*common.Empty, error)
	ReadSegment(context.Context, *common.Id) (*Segmentation, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterSegmentationMgrServer(s *grpc.Server, srv SegmentationMgrServer) {
	s.RegisterService(&_SegmentationMgr_serviceDesc, srv)
}

func _SegmentationMgr_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).CreateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).UpdateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ListSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ListSegments(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).DeleteSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_ReadSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/ReadSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).ReadSegment(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentationMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SegmentationMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.SegmentationMgr",
	HandlerType: (*SegmentationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSegment",
			Handler:    _SegmentationMgr_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _SegmentationMgr_UpdateSegment_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _SegmentationMgr_ListSegments_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SegmentationMgr_DeleteSegment_Handler,
		},
		{
			MethodName: "ReadSegment",
			Handler:    _SegmentationMgr_ReadSegment_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SegmentationMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// VisitorMgrClient is the client API for VisitorMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisitorMgrClient interface {
	ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error)
	ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LastView, error)
	ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type visitorMgrClient struct {
	cc *grpc.ClientConn
}

func NewVisitorMgrClient(cc *grpc.ClientConn) VisitorMgrClient {
	return &visitorMgrClient{cc}
}

func (c *visitorMgrClient) ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Presence, error) {
	out := new(Presence)
	err := c.cc.Invoke(ctx, "/user.VisitorMgr/ReadPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ReadPreview(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LastView, error) {
	out := new(LastView)
	err := c.cc.Invoke(ctx, "/user.VisitorMgr/ReadPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) ListTopVisitors(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Visitors, error) {
	out := new(Visitors)
	err := c.cc.Invoke(ctx, "/user.VisitorMgr/ListTopVisitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/user.VisitorMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitorMgrServer is the server API for VisitorMgr service.
type VisitorMgrServer interface {
	ReadPresence(context.Context, *common.Id) (*Presence, error)
	ReadPreview(context.Context, *common.Id) (*LastView, error)
	ListTopVisitors(context.Context, *common.Id) (*Visitors, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterVisitorMgrServer(s *grpc.Server, srv VisitorMgrServer) {
	s.RegisterService(&_VisitorMgr_serviceDesc, srv)
}

func _VisitorMgr_ReadPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPresence(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ReadPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ReadPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ReadPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ReadPreview(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_ListTopVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/ListTopVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).ListTopVisitors(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VisitorMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisitorMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.VisitorMgr",
	HandlerType: (*VisitorMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPresence",
			Handler:    _VisitorMgr_ReadPresence_Handler,
		},
		{
			MethodName: "ReadPreview",
			Handler:    _VisitorMgr_ReadPreview_Handler,
		},
		{
			MethodName: "ListTopVisitors",
			Handler:    _VisitorMgr_ListTopVisitors_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _VisitorMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// UserMgrClient is the client API for UserMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMgrClient interface {
	SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error)
	SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error)
	PickToSegmentation(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*common.Empty, error)
	DeleteFromSegmentation(ctx context.Context, in *UnpickRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error)
	CountSegmentationUserByAttribute(ctx context.Context, in *CountSegmentationUserByAttributeRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	AddAlias(ctx context.Context, in *Alias, opts ...grpc.CallOption) (*common.Empty, error)
	MoveUserActivity(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type userMgrClient struct {
	cc *grpc.ClientConn
}

func NewUserMgrClient(cc *grpc.ClientConn) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error) {
	out := new(UserSearchResult)
	err := c.cc.Invoke(ctx, "/user.UserMgr/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SubizID(ctx context.Context, in *SubizIDRequest, opts ...grpc.CallOption) (*SubizIDResponse, error) {
	out := new(SubizIDResponse)
	err := c.cc.Invoke(ctx, "/user.UserMgr/SubizID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) PickToSegmentation(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.UserMgr/PickToSegmentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteFromSegmentation(ctx context.Context, in *UnpickRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.UserMgr/DeleteFromSegmentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := c.cc.Invoke(ctx, "/user.UserMgr/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := c.cc.Invoke(ctx, "/user.UserMgr/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserMgr/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountSegmentationUserByAttribute(ctx context.Context, in *CountSegmentationUserByAttributeRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/user.UserMgr/CountSegmentationUserByAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/user.UserMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddAlias(ctx context.Context, in *Alias, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.UserMgr/AddAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MoveUserActivity(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.UserMgr/MoveUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMgrServer is the server API for UserMgr service.
type UserMgrServer interface {
	SearchUsers(context.Context, *UserSearchRequest) (*UserSearchResult, error)
	SubizID(context.Context, *SubizIDRequest) (*SubizIDResponse, error)
	PickToSegmentation(context.Context, *PickRequest) (*common.Empty, error)
	DeleteFromSegmentation(context.Context, *UnpickRequest) (*common.Empty, error)
	CreateUser(context.Context, *User) (*common.Id, error)
	UpdateUser(context.Context, *User) (*common.Id, error)
	ReadUser(context.Context, *common.Id) (*User, error)
	CountSegmentationUserByAttribute(context.Context, *CountSegmentationUserByAttributeRequest) (*CountResponse, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	AddAlias(context.Context, *Alias) (*common.Empty, error)
	MoveUserActivity(context.Context, *MergeRequest) (*common.Empty, error)
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*UserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SubizID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubizIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SubizID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/SubizID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SubizID(ctx, req.(*SubizIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_PickToSegmentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).PickToSegmentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/PickToSegmentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).PickToSegmentation(ctx, req.(*PickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteFromSegmentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteFromSegmentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/DeleteFromSegmentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteFromSegmentation(ctx, req.(*UnpickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountSegmentationUserByAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSegmentationUserByAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountSegmentationUserByAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/CountSegmentationUserByAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountSegmentationUserByAttribute(ctx, req.(*CountSegmentationUserByAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/AddAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddAlias(ctx, req.(*Alias))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MoveUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MoveUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMgr/MoveUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MoveUserActivity(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "SubizID",
			Handler:    _UserMgr_SubizID_Handler,
		},
		{
			MethodName: "PickToSegmentation",
			Handler:    _UserMgr_PickToSegmentation_Handler,
		},
		{
			MethodName: "DeleteFromSegmentation",
			Handler:    _UserMgr_DeleteFromSegmentation_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserMgr_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
		{
			MethodName: "CountSegmentationUserByAttribute",
			Handler:    _UserMgr_CountSegmentationUserByAttribute_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserMgr_Ping_Handler,
		},
		{
			MethodName: "AddAlias",
			Handler:    _UserMgr_AddAlias_Handler,
		},
		{
			MethodName: "MoveUserActivity",
			Handler:    _UserMgr_MoveUserActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// AutomationMgrClient is the client API for AutomationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutomationMgrClient interface {
	ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error)
	UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error)
	CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type automationMgrClient struct {
	cc *grpc.ClientConn
}

func NewAutomationMgrClient(cc *grpc.ClientConn) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error) {
	out := new(Automations)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/ListAutomations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/UpdateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/DeleteAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/ReadAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/CreateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/user.AutomationMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationMgrServer is the server API for AutomationMgr service.
type AutomationMgrServer interface {
	ListAutomations(context.Context, *common.Id) (*Automations, error)
	UpdateAutomation(context.Context, *Automation) (*Automation, error)
	DeleteAutomation(context.Context, *common.Id) (*common.Empty, error)
	ReadAutomation(context.Context, *common.Id) (*Automation, error)
	CreateAutomation(context.Context, *Automation) (*Automation, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ListAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListAutomations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/UpdateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/DeleteAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/ReadAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/CreateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AutomationMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationMgr_ListAutomations_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationMgr_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationMgr_DeleteAutomation_Handler,
		},
		{
			MethodName: "ReadAutomation",
			Handler:    _AutomationMgr_ReadAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationMgr_CreateAutomation_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AutomationMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// AttributeMgrClient is the client API for AttributeMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttributeMgrClient interface {
	ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error)
	CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type attributeMgrClient struct {
	cc *grpc.ClientConn
}

func NewAttributeMgrClient(cc *grpc.ClientConn) AttributeMgrClient {
	return &attributeMgrClient{cc}
}

func (c *attributeMgrClient) ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error) {
	out := new(AttributeDefinitions)
	err := c.cc.Invoke(ctx, "/user.AttributeMgr/ListAttributeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/user.AttributeMgr/CreateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/user.AttributeMgr/UpdateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/user.AttributeMgr/DeleteAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/user.AttributeMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeMgrServer is the server API for AttributeMgr service.
type AttributeMgrServer interface {
	ListAttributeDefinitions(context.Context, *common.Empty) (*AttributeDefinitions, error)
	CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*common.Empty, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterAttributeMgrServer(s *grpc.Server, srv AttributeMgrServer) {
	s.RegisterService(&_AttributeMgr_serviceDesc, srv)
}

func _AttributeMgr_ListAttributeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/ListAttributeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_CreateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/CreateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_UpdateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/UpdateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_DeleteAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/DeleteAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, req.(*DeleteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.AttributeMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.AttributeMgr",
	HandlerType: (*AttributeMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributeDefinitions",
			Handler:    _AttributeMgr_ListAttributeDefinitions_Handler,
		},
		{
			MethodName: "CreateAttributeDefinition",
			Handler:    _AttributeMgr_CreateAttributeDefinition_Handler,
		},
		{
			MethodName: "UpdateAttributeDefinition",
			Handler:    _AttributeMgr_UpdateAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteAttributeDefinition",
			Handler:    _AttributeMgr_DeleteAttributeDefinition_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AttributeMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
