// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	AllType
	AddToMyRequest
	UserCreateResult
	MyUser
	User
	Users
	Location
	Device
	Trace
	MergeRequest
	CreateRequest
	Topic
	UnreadTopic
	ReadTopicRequest
	SubscribeRequest
	SubizIDRequest
	MaskResponse
	SubizIDResponse
	Segmentations
	SegmentLoopState
	Segmentation
	SegmentTracking
	SegmentCondition
	Condition
	UserSearchResult
	UserSearchRequest
	IndexEvent
	ListTopicsRequest
	ListTopicsResult
	ListNewsRequest
	AddToMyList
	Field
	Presence
	Previewing
	Visitor
	Visitors
	LastView
	Automation
	Automations
	Session
	AutomationEvent
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_UserReadRequested                  Event = 0
	Event_UserUpdateRequested                Event = 2
	Event_UserCreateRequested                Event = 3
	Event_UserSearchRequested                Event = 4
	Event_UserEventCreateRequested           Event = 5
	Event_UserEventSearchRequested           Event = 7
	Event_UserTopicSearchRequested           Event = 6
	Event_UserSegmentationCreateRequested    Event = 10
	Event_UserSegmentationUpdateRequested    Event = 11
	Event_UserSegmentationDeleteRequested    Event = 12
	Event_UserSegmentationListRequested      Event = 13
	Event_UserSegmentationReadRequested      Event = 14
	Event_UserAddToMyListRequested           Event = 20
	Event_UserEventTopicSubscribeRequested   Event = 35
	Event_UserEventTopicUnsubscribeRequested Event = 36
	Event_UserReadTopicRequested             Event = 41
	Event_UserSubizId                        Event = 42
	Event_UserPresenceReadRequested          Event = 44
	Event_UserPreviewingReadRequested        Event = 46
	Event_UserListTopRequested               Event = 47
	Event_UserAutomationUpsertRequested      Event = 50
	Event_UserAutomationDeleteRequested      Event = 51
	Event_UserAutomationListRequested        Event = 52
	Event_UserAutomationReadRequested        Event = 53
	Event_AutomationAgentNotificationFired   Event = 54
	Event_AutomationConversationMessageFired Event = 55
	Event_UserSessionUpdateRequested         Event = 65
	Event_UserSessionCreateRequested         Event = 66
	Event_UserSessionReadRequested           Event = 67
	Event_SegmentationLoop                   Event = 68
	Event_AutomationSynced                   Event = 102
	Event_AutomationFired                    Event = 103
	Event_UserRequested                      Event = 100
	Event_UserSynced                         Event = 101
)

var Event_name = map[int32]string{
	0:   "UserReadRequested",
	2:   "UserUpdateRequested",
	3:   "UserCreateRequested",
	4:   "UserSearchRequested",
	5:   "UserEventCreateRequested",
	7:   "UserEventSearchRequested",
	6:   "UserTopicSearchRequested",
	10:  "UserSegmentationCreateRequested",
	11:  "UserSegmentationUpdateRequested",
	12:  "UserSegmentationDeleteRequested",
	13:  "UserSegmentationListRequested",
	14:  "UserSegmentationReadRequested",
	20:  "UserAddToMyListRequested",
	35:  "UserEventTopicSubscribeRequested",
	36:  "UserEventTopicUnsubscribeRequested",
	41:  "UserReadTopicRequested",
	42:  "UserSubizId",
	44:  "UserPresenceReadRequested",
	46:  "UserPreviewingReadRequested",
	47:  "UserListTopRequested",
	50:  "UserAutomationUpsertRequested",
	51:  "UserAutomationDeleteRequested",
	52:  "UserAutomationListRequested",
	53:  "UserAutomationReadRequested",
	54:  "AutomationAgentNotificationFired",
	55:  "AutomationConversationMessageFired",
	65:  "UserSessionUpdateRequested",
	66:  "UserSessionCreateRequested",
	67:  "UserSessionReadRequested",
	68:  "SegmentationLoop",
	102: "AutomationSynced",
	103: "AutomationFired",
	100: "UserRequested",
	101: "UserSynced",
}
var Event_value = map[string]int32{
	"UserReadRequested":                  0,
	"UserUpdateRequested":                2,
	"UserCreateRequested":                3,
	"UserSearchRequested":                4,
	"UserEventCreateRequested":           5,
	"UserEventSearchRequested":           7,
	"UserTopicSearchRequested":           6,
	"UserSegmentationCreateRequested":    10,
	"UserSegmentationUpdateRequested":    11,
	"UserSegmentationDeleteRequested":    12,
	"UserSegmentationListRequested":      13,
	"UserSegmentationReadRequested":      14,
	"UserAddToMyListRequested":           20,
	"UserEventTopicSubscribeRequested":   35,
	"UserEventTopicUnsubscribeRequested": 36,
	"UserReadTopicRequested":             41,
	"UserSubizId":                        42,
	"UserPresenceReadRequested":          44,
	"UserPreviewingReadRequested":        46,
	"UserListTopRequested":               47,
	"UserAutomationUpsertRequested":      50,
	"UserAutomationDeleteRequested":      51,
	"UserAutomationListRequested":        52,
	"UserAutomationReadRequested":        53,
	"AutomationAgentNotificationFired":   54,
	"AutomationConversationMessageFired": 55,
	"UserSessionUpdateRequested":         65,
	"UserSessionCreateRequested":         66,
	"UserSessionReadRequested":           67,
	"SegmentationLoop":                   68,
	"AutomationSynced":                   102,
	"AutomationFired":                    103,
	"UserRequested":                      100,
	"UserSynced":                         101,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Segmentation_State int32

const (
	Segmentation_active   Segmentation_State = 0
	Segmentation_inactive Segmentation_State = 1
)

var Segmentation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Segmentation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Segmentation_State) Enum() *Segmentation_State {
	p := new(Segmentation_State)
	*p = x
	return p
}
func (x Segmentation_State) String() string {
	return proto.EnumName(Segmentation_State_name, int32(x))
}
func (x *Segmentation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Segmentation_State_value, data, "Segmentation_State")
	if err != nil {
		return err
	}
	*x = Segmentation_State(value)
	return nil
}
func (Segmentation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

type SegmentCondition_Operator int32

const (
	SegmentCondition_and SegmentCondition_Operator = 0
	SegmentCondition_or  SegmentCondition_Operator = 1
)

var SegmentCondition_Operator_name = map[int32]string{
	0: "and",
	1: "or",
}
var SegmentCondition_Operator_value = map[string]int32{
	"and": 0,
	"or":  1,
}

func (x SegmentCondition_Operator) Enum() *SegmentCondition_Operator {
	p := new(SegmentCondition_Operator)
	*p = x
	return p
}
func (x SegmentCondition_Operator) String() string {
	return proto.EnumName(SegmentCondition_Operator_name, int32(x))
}
func (x *SegmentCondition_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SegmentCondition_Operator_value, data, "SegmentCondition_Operator")
	if err != nil {
		return err
	}
	*x = SegmentCondition_Operator(value)
	return nil
}
func (SegmentCondition_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

type Condition_JoinOperator int32

const (
	Condition_none Condition_JoinOperator = 0
	Condition_and  Condition_JoinOperator = 1
	Condition_or   Condition_JoinOperator = 2
)

var Condition_JoinOperator_name = map[int32]string{
	0: "none",
	1: "and",
	2: "or",
}
var Condition_JoinOperator_value = map[string]int32{
	"none": 0,
	"and":  1,
	"or":   2,
}

func (x Condition_JoinOperator) Enum() *Condition_JoinOperator {
	p := new(Condition_JoinOperator)
	*p = x
	return p
}
func (x Condition_JoinOperator) String() string {
	return proto.EnumName(Condition_JoinOperator_name, int32(x))
}
func (x *Condition_JoinOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Condition_JoinOperator_value, data, "Condition_JoinOperator")
	if err != nil {
		return err
	}
	*x = Condition_JoinOperator(value)
	return nil
}
func (Condition_JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

var Automation_State_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var Automation_State_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}
func (x Automation_State) String() string {
	return proto.EnumName(Automation_State_name, int32(x))
}
func (x *Automation_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_State_value, data, "Automation_State")
	if err != nil {
		return err
	}
	*x = Automation_State(value)
	return nil
}
func (Automation_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 0} }

type Automation_ActionType int32

const (
	Automation_conversation_message Automation_ActionType = 0
	Automation_agent_notification   Automation_ActionType = 1
)

var Automation_ActionType_name = map[int32]string{
	0: "conversation_message",
	1: "agent_notification",
}
var Automation_ActionType_value = map[string]int32{
	"conversation_message": 0,
	"agent_notification":   1,
}

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}
func (x Automation_ActionType) String() string {
	return proto.EnumName(Automation_ActionType_name, int32(x))
}
func (x *Automation_ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Automation_ActionType_value, data, "Automation_ActionType")
	if err != nil {
		return err
	}
	*x = Automation_ActionType(value)
	return nil
}
func (Automation_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 1} }

type Session_Platform int32

const (
	Session_web     Session_Platform = 0
	Session_mobile  Session_Platform = 2
	Session_desktop Session_Platform = 4
)

var Session_Platform_name = map[int32]string{
	0: "web",
	2: "mobile",
	4: "desktop",
}
var Session_Platform_value = map[string]int32{
	"web":     0,
	"mobile":  2,
	"desktop": 4,
}

func (x Session_Platform) Enum() *Session_Platform {
	p := new(Session_Platform)
	*p = x
	return p
}
func (x Session_Platform) String() string {
	return proto.EnumName(Session_Platform_name, int32(x))
}
func (x *Session_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Platform_value, data, "Session_Platform")
	if err != nil {
		return err
	}
	*x = Session_Platform(value)
	return nil
}
func (Session_Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 0} }

type Session_Status int32

const (
	Session_open   Session_Status = 0
	Session_closed Session_Status = 1
)

var Session_Status_name = map[int32]string{
	0: "open",
	1: "closed",
}
var Session_Status_value = map[string]int32{
	"open":   0,
	"closed": 1,
}

func (x Session_Status) Enum() *Session_Status {
	p := new(Session_Status)
	*p = x
	return p
}
func (x Session_Status) String() string {
	return proto.EnumName(Session_Status_name, int32(x))
}
func (x *Session_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Session_Status_value, data, "Session_Status")
	if err != nil {
		return err
	}
	*x = Session_Status(value)
	return nil
}
func (Session_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 1} }

type AllType struct {
	User              *User              `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Cr                *CreateRequest     `protobuf:"bytes,3,opt,name=cr" json:"cr,omitempty"`
	Fields            *Field             `protobuf:"bytes,5,opt,name=fields" json:"fields,omitempty"`
	Ucr               *UserCreateResult  `protobuf:"bytes,6,opt,name=ucr" json:"ucr,omitempty"`
	Rpr               *ReadTopicRequest  `protobuf:"bytes,8,opt,name=rpr" json:"rpr,omitempty"`
	Usersearchrequest *UserSearchRequest `protobuf:"bytes,9,opt,name=usersearchrequest" json:"usersearchrequest,omitempty"`
	Usersearchresult  *UserSearchResult  `protobuf:"bytes,10,opt,name=usersearchresult" json:"usersearchresult,omitempty"`
	Ms                *MaskResponse      `protobuf:"bytes,11,opt,name=ms" json:"ms,omitempty"`
	Ltr               *ListTopicsResult  `protobuf:"bytes,12,opt,name=ltr" json:"ltr,omitempty"`
	Sg                *Segmentation      `protobuf:"bytes,14,opt,name=sg" json:"sg,omitempty"`
	Presn             *Presence          `protobuf:"bytes,15,opt,name=presn" json:"presn,omitempty"`
	Previ             *Previewing        `protobuf:"bytes,16,opt,name=previ" json:"previ,omitempty"`
	Vi                *Visitor           `protobuf:"bytes,17,opt,name=vi" json:"vi,omitempty"`
	Vis               *Visitors          `protobuf:"bytes,18,opt,name=vis" json:"vis,omitempty"`
	Topic             *Topic             `protobuf:"bytes,19,opt,name=topic" json:"topic,omitempty"`
	Utopic            *UnreadTopic       `protobuf:"bytes,20,opt,name=utopic" json:"utopic,omitempty"`
	Myuser            *MyUser            `protobuf:"bytes,21,opt,name=myuser" json:"myuser,omitempty"`
	Automation        *Automation        `protobuf:"bytes,23,opt,name=automation" json:"automation,omitempty"`
	Automations       *Automations       `protobuf:"bytes,25,opt,name=automations" json:"automations,omitempty"`
	Session           *Session           `protobuf:"bytes,26,opt,name=session" json:"session,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *AllType) Reset()                    { *m = AllType{} }
func (m *AllType) String() string            { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()               {}
func (*AllType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllType) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AllType) GetCr() *CreateRequest {
	if m != nil {
		return m.Cr
	}
	return nil
}

func (m *AllType) GetFields() *Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *AllType) GetUcr() *UserCreateResult {
	if m != nil {
		return m.Ucr
	}
	return nil
}

func (m *AllType) GetRpr() *ReadTopicRequest {
	if m != nil {
		return m.Rpr
	}
	return nil
}

func (m *AllType) GetUsersearchrequest() *UserSearchRequest {
	if m != nil {
		return m.Usersearchrequest
	}
	return nil
}

func (m *AllType) GetUsersearchresult() *UserSearchResult {
	if m != nil {
		return m.Usersearchresult
	}
	return nil
}

func (m *AllType) GetMs() *MaskResponse {
	if m != nil {
		return m.Ms
	}
	return nil
}

func (m *AllType) GetLtr() *ListTopicsResult {
	if m != nil {
		return m.Ltr
	}
	return nil
}

func (m *AllType) GetSg() *Segmentation {
	if m != nil {
		return m.Sg
	}
	return nil
}

func (m *AllType) GetPresn() *Presence {
	if m != nil {
		return m.Presn
	}
	return nil
}

func (m *AllType) GetPrevi() *Previewing {
	if m != nil {
		return m.Previ
	}
	return nil
}

func (m *AllType) GetVi() *Visitor {
	if m != nil {
		return m.Vi
	}
	return nil
}

func (m *AllType) GetVis() *Visitors {
	if m != nil {
		return m.Vis
	}
	return nil
}

func (m *AllType) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *AllType) GetUtopic() *UnreadTopic {
	if m != nil {
		return m.Utopic
	}
	return nil
}

func (m *AllType) GetMyuser() *MyUser {
	if m != nil {
		return m.Myuser
	}
	return nil
}

func (m *AllType) GetAutomation() *Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AllType) GetAutomations() *Automations {
	if m != nil {
		return m.Automations
	}
	return nil
}

func (m *AllType) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type AddToMyRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentIds         []string        `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyRequest) Reset()                    { *m = AddToMyRequest{} }
func (m *AddToMyRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToMyRequest) ProtoMessage()               {}
func (*AddToMyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddToMyRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AddToMyRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AddToMyRequest) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

type UserCreateResult struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserCreateResult) Reset()                    { *m = UserCreateResult{} }
func (m *UserCreateResult) String() string            { return proto.CompactTextString(m) }
func (*UserCreateResult) ProtoMessage()               {}
func (*UserCreateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserCreateResult) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserCreateResult) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserCreateResult) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type MyUser struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	User             *User           `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Unread           *int32          `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
	Updated          *int64          `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MyUser) Reset()                    { *m = MyUser{} }
func (m *MyUser) String() string            { return proto.CompactTextString(m) }
func (*MyUser) ProtoMessage()               {}
func (*MyUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MyUser) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MyUser) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *MyUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MyUser) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

func (m *MyUser) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type User struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Fullname  *string         `protobuf:"bytes,5,opt,name=fullname" json:"fullname,omitempty"`
	Phones    []string        `protobuf:"bytes,7,rep,name=phones" json:"phones,omitempty"`
	Emails    []string        `protobuf:"bytes,10,rep,name=emails" json:"emails,omitempty"`
	Traces    []*Trace        `protobuf:"bytes,11,rep,name=traces" json:"traces,omitempty"`
	// 	repeated string alias = 12;
	Devices          []*Device `protobuf:"bytes,13,rep,name=devices" json:"devices,omitempty"`
	IsBan            *bool     `protobuf:"varint,14,opt,name=is_ban,json=isBan" json:"is_ban,omitempty"`
	AvatarUrl        *string   `protobuf:"bytes,15,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Segments         []string  `protobuf:"bytes,19,rep,name=segments" json:"segments,omitempty"`
	Labels           []string  `protobuf:"bytes,20,rep,name=labels" json:"labels,omitempty"`
	Unsubscribed     *bool     `protobuf:"varint,21,opt,name=unsubscribed" json:"unsubscribed,omitempty"`
	MarkedSpam       *bool     `protobuf:"varint,22,opt,name=marked_spam,json=markedSpam" json:"marked_spam,omitempty"`
	HardBounced      *bool     `protobuf:"varint,23,opt,name=hard_bounced,json=hardBounced" json:"hard_bounced,omitempty"`
	TotalSessions    *int32    `protobuf:"varint,24,opt,name=total_sessions,json=totalSessions" json:"total_sessions,omitempty"`
	SubizId          *string   `protobuf:"bytes,25,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	Timezone         *string   `protobuf:"bytes,26,opt,name=timezone" json:"timezone,omitempty"`
	CountryCode      *string   `protobuf:"bytes,27,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Country          *string   `protobuf:"bytes,29,opt,name=country" json:"country,omitempty"`
	City             *string   `protobuf:"bytes,32,opt,name=city" json:"city,omitempty"`
	Language         *string   `protobuf:"bytes,28,opt,name=language" json:"language,omitempty"`
	Aliases          []string  `protobuf:"bytes,30,rep,name=aliases" json:"aliases,omitempty"`
	LastSeen         *int64    `protobuf:"varint,31,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	Fields           []*Field  `protobuf:"bytes,33,rep,name=fields" json:"fields,omitempty"`
	UserPar          *int32    `protobuf:"varint,34,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	ModifiedHour     *int32    `protobuf:"varint,35,opt,name=modified_hour,json=modifiedHour" json:"modified_hour,omitempty"`
	Modified         *int64    `protobuf:"varint,36,opt,name=modified" json:"modified,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *User) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *User) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *User) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *User) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *User) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *User) GetIsBan() bool {
	if m != nil && m.IsBan != nil {
		return *m.IsBan
	}
	return false
}

func (m *User) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *User) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *User) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *User) GetUnsubscribed() bool {
	if m != nil && m.Unsubscribed != nil {
		return *m.Unsubscribed
	}
	return false
}

func (m *User) GetMarkedSpam() bool {
	if m != nil && m.MarkedSpam != nil {
		return *m.MarkedSpam
	}
	return false
}

func (m *User) GetHardBounced() bool {
	if m != nil && m.HardBounced != nil {
		return *m.HardBounced
	}
	return false
}

func (m *User) GetTotalSessions() int32 {
	if m != nil && m.TotalSessions != nil {
		return *m.TotalSessions
	}
	return 0
}

func (m *User) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *User) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *User) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *User) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *User) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *User) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *User) GetLastSeen() int64 {
	if m != nil && m.LastSeen != nil {
		return *m.LastSeen
	}
	return 0
}

func (m *User) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *User) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *User) GetModifiedHour() int32 {
	if m != nil && m.ModifiedHour != nil {
		return *m.ModifiedHour
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

type Users struct {
	Users            []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Location struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Device struct {
	Id               *int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	UseragentId      *int32  `protobuf:"varint,4,opt,name=useragent_id,json=useragentId" json:"useragent_id,omitempty"`
	Useragent        *string `protobuf:"bytes,5,opt,name=useragent" json:"useragent,omitempty"`
	ScreenResolution *string `protobuf:"bytes,6,opt,name=screen_resolution,json=screenResolution" json:"screen_resolution,omitempty"`
	LanguageId       *int32  `protobuf:"varint,7,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	Language         *string `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Device) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Device) GetUseragentId() int32 {
	if m != nil && m.UseragentId != nil {
		return *m.UseragentId
	}
	return 0
}

func (m *Device) GetUseragent() string {
	if m != nil && m.Useragent != nil {
		return *m.Useragent
	}
	return ""
}

func (m *Device) GetScreenResolution() string {
	if m != nil && m.ScreenResolution != nil {
		return *m.ScreenResolution
	}
	return ""
}

func (m *Device) GetLanguageId() int32 {
	if m != nil && m.LanguageId != nil {
		return *m.LanguageId
	}
	return 0
}

func (m *Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

type Trace struct {
	Id            *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Ip            *string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	LocationId    *int32  `protobuf:"varint,5,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CityName      *string `protobuf:"bytes,8,opt,name=city_name,json=cityName" json:"city_name,omitempty"`
	CountryName   *string `protobuf:"bytes,9,opt,name=country_name,json=countryName" json:"country_name,omitempty"`
	CountryCode   *string `protobuf:"bytes,19,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	ContinentCode *string `protobuf:"bytes,10,opt,name=continent_code,json=continentCode" json:"continent_code,omitempty"`
	ContinentName *string `protobuf:"bytes,18,opt,name=continent_name,json=continentName" json:"continent_name,omitempty"`
	// optional string coutry_code = 11;
	Latitude         *float32 `protobuf:"fixed32,12,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *float32 `protobuf:"fixed32,13,opt,name=longitude" json:"longitude,omitempty"`
	PostalCode       *string  `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	Timezone         *string  `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	Isp              *string  `protobuf:"bytes,17,opt,name=isp" json:"isp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Trace) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Trace) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Trace) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *Trace) GetCityName() string {
	if m != nil && m.CityName != nil {
		return *m.CityName
	}
	return ""
}

func (m *Trace) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *Trace) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *Trace) GetContinentCode() string {
	if m != nil && m.ContinentCode != nil {
		return *m.ContinentCode
	}
	return ""
}

func (m *Trace) GetContinentName() string {
	if m != nil && m.ContinentName != nil {
		return *m.ContinentName
	}
	return ""
}

func (m *Trace) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Trace) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Trace) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *Trace) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Trace) GetIsp() string {
	if m != nil && m.Isp != nil {
		return *m.Isp
	}
	return ""
}

type MergeRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	RecentId         *string         `protobuf:"bytes,4,opt,name=recent_id,json=recentId" json:"recent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MergeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MergeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MergeRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MergeRequest) GetRecentId() string {
	if m != nil && m.RecentId != nil {
		return *m.RecentId
	}
	return ""
}

type CreateRequest struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChallengeId      *string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Answer           *string `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *CreateRequest) GetChallengeId() string {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return ""
}

func (m *CreateRequest) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

type Topic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	Type             *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Topic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Topic) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Topic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Topic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Topic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Topic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type UnreadTopic struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type             *string         `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Updated          *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Unread           *int32          `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UnreadTopic) Reset()                    { *m = UnreadTopic{} }
func (m *UnreadTopic) String() string            { return proto.CompactTextString(m) }
func (*UnreadTopic) ProtoMessage()               {}
func (*UnreadTopic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnreadTopic) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnreadTopic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *UnreadTopic) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UnreadTopic) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UnreadTopic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *UnreadTopic) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *UnreadTopic) GetUnread() int32 {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return 0
}

type ReadTopicRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Topic            *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ReadTopicRequest) Reset()                    { *m = ReadTopicRequest{} }
func (m *ReadTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadTopicRequest) ProtoMessage()               {}
func (*ReadTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadTopicRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ReadTopicRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ReadTopicRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *ReadTopicRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ReadTopicRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type SubscribeRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Topics           []string        `protobuf:"bytes,4,rep,name=topics" json:"topics,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SubscribeRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscribeRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubscribeRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubizIDRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDRequest) Reset()                    { *m = SubizIDRequest{} }
func (m *SubizIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SubizIDRequest) ProtoMessage()               {}
func (*SubizIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SubizIDRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDRequest) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type MaskResponse struct {
	SubizId          *string `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Mask             *string `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MaskResponse) Reset()                    { *m = MaskResponse{} }
func (m *MaskResponse) String() string            { return proto.CompactTextString(m) }
func (*MaskResponse) ProtoMessage()               {}
func (*MaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MaskResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *MaskResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *MaskResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *MaskResponse) GetMask() string {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return ""
}

type SubizIDResponse struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubizId          *string         `protobuf:"bytes,2,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SubizIDResponse) Reset()                    { *m = SubizIDResponse{} }
func (m *SubizIDResponse) String() string            { return proto.CompactTextString(m) }
func (*SubizIDResponse) ProtoMessage()               {}
func (*SubizIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SubizIDResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubizIDResponse) GetSubizId() string {
	if m != nil && m.SubizId != nil {
		return *m.SubizId
	}
	return ""
}

func (m *SubizIDResponse) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SubizIDResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Segmentations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Segmentations    []*Segmentation `protobuf:"bytes,3,rep,name=segmentations" json:"segmentations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Segmentations) Reset()                    { *m = Segmentations{} }
func (m *Segmentations) String() string            { return proto.CompactTextString(m) }
func (*Segmentations) ProtoMessage()               {}
func (*Segmentations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Segmentations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentations) GetSegmentations() []*Segmentation {
	if m != nil {
		return m.Segmentations
	}
	return nil
}

type SegmentLoopState struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserPar          *int32          `protobuf:"varint,3,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,6,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,7,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentLoopState) Reset()                    { *m = SegmentLoopState{} }
func (m *SegmentLoopState) String() string            { return proto.CompactTextString(m) }
func (*SegmentLoopState) ProtoMessage()               {}
func (*SegmentLoopState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SegmentLoopState) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentLoopState) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentLoopState) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentLoopState) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentLoopState) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type Segmentation struct {
	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Name        *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	UserCount   *int64          `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	Conditions  []*Condition    `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	// repeated SegmentCondition query = 5; // suffix annotation
	// a * b + (c + d) * e  ==>  + * a b * + c d e
	Ran              *int64  `protobuf:"varint,8,opt,name=ran" json:"ran,omitempty"`
	Created          *int64  `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64  `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	CurrentCursor    *int64  `protobuf:"varint,18,opt,name=current_cursor,json=currentCursor" json:"current_cursor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Segmentation) Reset()                    { *m = Segmentation{} }
func (m *Segmentation) String() string            { return proto.CompactTextString(m) }
func (*Segmentation) ProtoMessage()               {}
func (*Segmentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Segmentation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Segmentation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Segmentation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Segmentation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Segmentation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Segmentation) GetUserCount() int64 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *Segmentation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Segmentation) GetRan() int64 {
	if m != nil && m.Ran != nil {
		return *m.Ran
	}
	return 0
}

func (m *Segmentation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Segmentation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Segmentation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Segmentation) GetCurrentCursor() int64 {
	if m != nil && m.CurrentCursor != nil {
		return *m.CurrentCursor
	}
	return 0
}

type SegmentTracking struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	UserPar          *int32          `protobuf:"varint,2,opt,name=user_par,json=userPar" json:"user_par,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LoopCreated      *int64          `protobuf:"varint,7,opt,name=loop_created,json=loopCreated" json:"loop_created,omitempty"`
	LoopNumber       *int64          `protobuf:"varint,8,opt,name=loop_number,json=loopNumber" json:"loop_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SegmentTracking) Reset()                    { *m = SegmentTracking{} }
func (m *SegmentTracking) String() string            { return proto.CompactTextString(m) }
func (*SegmentTracking) ProtoMessage()               {}
func (*SegmentTracking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SegmentTracking) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SegmentTracking) GetUserPar() int32 {
	if m != nil && m.UserPar != nil {
		return *m.UserPar
	}
	return 0
}

func (m *SegmentTracking) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SegmentTracking) GetLoopCreated() int64 {
	if m != nil && m.LoopCreated != nil {
		return *m.LoopCreated
	}
	return 0
}

func (m *SegmentTracking) GetLoopNumber() int64 {
	if m != nil && m.LoopNumber != nil {
		return *m.LoopNumber
	}
	return 0
}

type SegmentCondition struct {
	Op               *string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	IsOp             *bool   `protobuf:"varint,3,opt,name=is_op,json=isOp" json:"is_op,omitempty"`
	Key              *string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Operator         *string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Value            *string `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SegmentCondition) Reset()                    { *m = SegmentCondition{} }
func (m *SegmentCondition) String() string            { return proto.CompactTextString(m) }
func (*SegmentCondition) ProtoMessage()               {}
func (*SegmentCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SegmentCondition) GetOp() string {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return ""
}

func (m *SegmentCondition) GetIsOp() bool {
	if m != nil && m.IsOp != nil {
		return *m.IsOp
	}
	return false
}

func (m *SegmentCondition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SegmentCondition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SegmentCondition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Condition struct {
	Join             *string `protobuf:"bytes,1,opt,name=join" json:"join,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Operator         *string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	Value            *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Condition) GetJoin() string {
	if m != nil && m.Join != nil {
		return *m.Join
	}
	return ""
}

func (m *Condition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Condition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type UserSearchResult struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Total            *int64          `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Users            []*User         `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Unreads          []int32         `protobuf:"varint,6,rep,name=unreads" json:"unreads,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSearchResult) Reset()                    { *m = UserSearchResult{} }
func (m *UserSearchResult) String() string            { return proto.CompactTextString(m) }
func (*UserSearchResult) ProtoMessage()               {}
func (*UserSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UserSearchResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchResult) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSearchResult) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *UserSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserSearchResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchResult) GetUnreads() []int32 {
	if m != nil {
		return m.Unreads
	}
	return nil
}

type UserSearchRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SegmentationId   *string         `protobuf:"bytes,3,opt,name=segmentation_id,json=segmentationId" json:"segmentation_id,omitempty"`
	Query            *string         `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	AgentId          *string         `protobuf:"bytes,8,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Unread           *bool           `protobuf:"varint,9,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserSearchRequest) Reset()                    { *m = UserSearchRequest{} }
func (m *UserSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*UserSearchRequest) ProtoMessage()               {}
func (*UserSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UserSearchRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSearchRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSearchRequest) GetSegmentationId() string {
	if m != nil && m.SegmentationId != nil {
		return *m.SegmentationId
	}
	return ""
}

func (m *UserSearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *UserSearchRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *UserSearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *UserSearchRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *UserSearchRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type IndexEvent struct {
	Id               *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Created          *int64   `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Category         *string  `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Topics           []string `protobuf:"bytes,8,rep,name=topics" json:"topics,omitempty"`
	Object           *string  `protobuf:"bytes,9,opt,name=object" json:"object,omitempty"`
	Text             *string  `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IndexEvent) Reset()                    { *m = IndexEvent{} }
func (m *IndexEvent) String() string            { return proto.CompactTextString(m) }
func (*IndexEvent) ProtoMessage()               {}
func (*IndexEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *IndexEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *IndexEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *IndexEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *IndexEvent) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *IndexEvent) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *IndexEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *IndexEvent) GetObject() string {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return ""
}

func (m *IndexEvent) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ListTopicsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Anchor           *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit            *int32          `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Unread           *bool           `protobuf:"varint,8,opt,name=unread" json:"unread,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsRequest) Reset()                    { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()               {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ListTopicsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListTopicsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListTopicsRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *ListTopicsRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *ListTopicsRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *ListTopicsRequest) GetUnread() bool {
	if m != nil && m.Unread != nil {
		return *m.Unread
	}
	return false
}

type ListTopicsResult struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topics           []*Topic        `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	Anchor           *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListTopicsResult) Reset()                    { *m = ListTopicsResult{} }
func (m *ListTopicsResult) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsResult) ProtoMessage()               {}
func (*ListTopicsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ListTopicsResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListTopicsResult) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ListTopicsResult) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

type ListNewsRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	StartTime        *int64          `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Limit            *string         `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ListNewsRequest) Reset()                    { *m = ListNewsRequest{} }
func (m *ListNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNewsRequest) ProtoMessage()               {}
func (*ListNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListNewsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListNewsRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListNewsRequest) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListNewsRequest) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ListNewsRequest) GetLimit() string {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return ""
}

type AddToMyList struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AgentId          *string         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	UserId           *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AddToMyList) Reset()                    { *m = AddToMyList{} }
func (m *AddToMyList) String() string            { return proto.CompactTextString(m) }
func (*AddToMyList) ProtoMessage()               {}
func (*AddToMyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AddToMyList) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddToMyList) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AddToMyList) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type Field struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Setter           *string `protobuf:"bytes,5,opt,name=setter" json:"setter,omitempty"`
	SetterType       *string `protobuf:"bytes,6,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
	Updated          *int64  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Data             *string `protobuf:"bytes,9,opt,name=data" json:"data,omitempty"`
	Id               *string `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Field) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Field) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Field) GetSetter() string {
	if m != nil && m.Setter != nil {
		return *m.Setter
	}
	return ""
}

func (m *Field) GetSetterType() string {
	if m != nil && m.SetterType != nil {
		return *m.SetterType
	}
	return ""
}

func (m *Field) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Field) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Field) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Presence struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Presence) Reset()                    { *m = Presence{} }
func (m *Presence) String() string            { return proto.CompactTextString(m) }
func (*Presence) ProtoMessage()               {}
func (*Presence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Presence) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Presence) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Presence) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Presence) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

type Previewing struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PageUrl          *string         `protobuf:"bytes,5,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	Updated          *int64          `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	PageTitle        *string         `protobuf:"bytes,7,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Previewing) Reset()                    { *m = Previewing{} }
func (m *Previewing) String() string            { return proto.CompactTextString(m) }
func (*Previewing) ProtoMessage()               {}
func (*Previewing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Previewing) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Previewing) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Previewing) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Previewing) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Previewing) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Previewing) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitor struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User             *User           `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Pinged           *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PageUrl          *string         `protobuf:"bytes,6,opt,name=page_url,json=pageUrl" json:"page_url,omitempty"`
	PageViewed       *int64          `protobuf:"varint,7,opt,name=page_viewed,json=pageViewed" json:"page_viewed,omitempty"`
	PageTitle        *string         `protobuf:"bytes,8,opt,name=page_title,json=pageTitle" json:"page_title,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitor) Reset()                    { *m = Visitor{} }
func (m *Visitor) String() string            { return proto.CompactTextString(m) }
func (*Visitor) ProtoMessage()               {}
func (*Visitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Visitor) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitor) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Visitor) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Visitor) GetPinged() int64 {
	if m != nil && m.Pinged != nil {
		return *m.Pinged
	}
	return 0
}

func (m *Visitor) GetPageUrl() string {
	if m != nil && m.PageUrl != nil {
		return *m.PageUrl
	}
	return ""
}

func (m *Visitor) GetPageViewed() int64 {
	if m != nil && m.PageViewed != nil {
		return *m.PageViewed
	}
	return 0
}

func (m *Visitor) GetPageTitle() string {
	if m != nil && m.PageTitle != nil {
		return *m.PageTitle
	}
	return ""
}

type Visitors struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Visitors         []*Visitor      `protobuf:"bytes,2,rep,name=visitors" json:"visitors,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Visitors) Reset()                    { *m = Visitors{} }
func (m *Visitors) String() string            { return proto.CompactTextString(m) }
func (*Visitors) ProtoMessage()               {}
func (*Visitors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Visitors) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Visitors) GetVisitors() []*Visitor {
	if m != nil {
		return m.Visitors
	}
	return nil
}

type LastView struct {
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url              *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Ua               *string `protobuf:"bytes,6,opt,name=ua" json:"ua,omitempty"`
	Ip               *string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Created          *int64  `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	EventId          *string `protobuf:"bytes,9,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LastView) Reset()                    { *m = LastView{} }
func (m *LastView) String() string            { return proto.CompactTextString(m) }
func (*LastView) ProtoMessage()               {}
func (*LastView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LastView) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *LastView) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *LastView) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *LastView) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *LastView) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LastView) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *LastView) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

type Automation struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Channel          *string         `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Name             *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description      *string         `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Conditions       []*Condition    `protobuf:"bytes,7,rep,name=conditions" json:"conditions,omitempty"`
	Created          *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified         *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	State            *string         `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	ActionType       *string         `protobuf:"bytes,13,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	ActionData       *string         `protobuf:"bytes,14,opt,name=action_data,json=actionData" json:"action_data,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automation) Reset()                    { *m = Automation{} }
func (m *Automation) String() string            { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()               {}
func (*Automation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Automation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Automation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Automation) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Automation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Automation) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Automation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Automation) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Automation) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Automation) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Automation) GetActionType() string {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ""
}

func (m *Automation) GetActionData() string {
	if m != nil && m.ActionData != nil {
		return *m.ActionData
	}
	return ""
}

type Automations struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Automations      []*Automation   `protobuf:"bytes,2,rep,name=automations" json:"automations,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Automations) Reset()                    { *m = Automations{} }
func (m *Automations) String() string            { return proto.CompactTextString(m) }
func (*Automations) ProtoMessage()               {}
func (*Automations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Automations) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Automations) GetAutomations() []*Automation {
	if m != nil {
		return m.Automations
	}
	return nil
}

type Session struct {
	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId         *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId            *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Id                *string         `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Platform          *string         `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	Referrer          *string         `protobuf:"bytes,8,opt,name=referrer" json:"referrer,omitempty"`
	SearchEngine      *string         `protobuf:"bytes,9,opt,name=search_engine,json=searchEngine" json:"search_engine,omitempty"`
	Started           *int64          `protobuf:"varint,10,opt,name=started" json:"started,omitempty"`
	Tracked           *int64          `protobuf:"varint,11,opt,name=tracked" json:"tracked,omitempty"`
	Status            *string         `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	EventsCount       *int32          `protobuf:"varint,13,opt,name=events_count,json=eventsCount" json:"events_count,omitempty"`
	ContentViewsCount *int32          `protobuf:"varint,14,opt,name=content_views_count,json=contentViewsCount" json:"content_views_count,omitempty"`
	SearchTerm        *string         `protobuf:"bytes,15,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Session) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Session) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Session) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Session) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Session) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Session) GetReferrer() string {
	if m != nil && m.Referrer != nil {
		return *m.Referrer
	}
	return ""
}

func (m *Session) GetSearchEngine() string {
	if m != nil && m.SearchEngine != nil {
		return *m.SearchEngine
	}
	return ""
}

func (m *Session) GetStarted() int64 {
	if m != nil && m.Started != nil {
		return *m.Started
	}
	return 0
}

func (m *Session) GetTracked() int64 {
	if m != nil && m.Tracked != nil {
		return *m.Tracked
	}
	return 0
}

func (m *Session) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Session) GetEventsCount() int32 {
	if m != nil && m.EventsCount != nil {
		return *m.EventsCount
	}
	return 0
}

func (m *Session) GetContentViewsCount() int32 {
	if m != nil && m.ContentViewsCount != nil {
		return *m.ContentViewsCount
	}
	return 0
}

func (m *Session) GetSearchTerm() string {
	if m != nil && m.SearchTerm != nil {
		return *m.SearchTerm
	}
	return ""
}

type AutomationEvent struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Automation       *Automation     `protobuf:"bytes,5,opt,name=automation" json:"automation,omitempty"`
	Session          *Session        `protobuf:"bytes,6,opt,name=session" json:"session,omitempty"`
	User             *User           `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AutomationEvent) Reset()                    { *m = AutomationEvent{} }
func (m *AutomationEvent) String() string            { return proto.CompactTextString(m) }
func (*AutomationEvent) ProtoMessage()               {}
func (*AutomationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *AutomationEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AutomationEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AutomationEvent) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *AutomationEvent) GetAutomation() *Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AutomationEvent) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *AutomationEvent) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*AllType)(nil), "user.AllType")
	proto.RegisterType((*AddToMyRequest)(nil), "user.AddToMyRequest")
	proto.RegisterType((*UserCreateResult)(nil), "user.UserCreateResult")
	proto.RegisterType((*MyUser)(nil), "user.MyUser")
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Users)(nil), "user.Users")
	proto.RegisterType((*Location)(nil), "user.Location")
	proto.RegisterType((*Device)(nil), "user.Device")
	proto.RegisterType((*Trace)(nil), "user.Trace")
	proto.RegisterType((*MergeRequest)(nil), "user.MergeRequest")
	proto.RegisterType((*CreateRequest)(nil), "user.CreateRequest")
	proto.RegisterType((*Topic)(nil), "user.Topic")
	proto.RegisterType((*UnreadTopic)(nil), "user.UnreadTopic")
	proto.RegisterType((*ReadTopicRequest)(nil), "user.ReadTopicRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "user.SubscribeRequest")
	proto.RegisterType((*SubizIDRequest)(nil), "user.SubizIDRequest")
	proto.RegisterType((*MaskResponse)(nil), "user.MaskResponse")
	proto.RegisterType((*SubizIDResponse)(nil), "user.SubizIDResponse")
	proto.RegisterType((*Segmentations)(nil), "user.Segmentations")
	proto.RegisterType((*SegmentLoopState)(nil), "user.SegmentLoopState")
	proto.RegisterType((*Segmentation)(nil), "user.Segmentation")
	proto.RegisterType((*SegmentTracking)(nil), "user.SegmentTracking")
	proto.RegisterType((*SegmentCondition)(nil), "user.SegmentCondition")
	proto.RegisterType((*Condition)(nil), "user.Condition")
	proto.RegisterType((*UserSearchResult)(nil), "user.UserSearchResult")
	proto.RegisterType((*UserSearchRequest)(nil), "user.UserSearchRequest")
	proto.RegisterType((*IndexEvent)(nil), "user.IndexEvent")
	proto.RegisterType((*ListTopicsRequest)(nil), "user.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResult)(nil), "user.ListTopicsResult")
	proto.RegisterType((*ListNewsRequest)(nil), "user.ListNewsRequest")
	proto.RegisterType((*AddToMyList)(nil), "user.AddToMyList")
	proto.RegisterType((*Field)(nil), "user.Field")
	proto.RegisterType((*Presence)(nil), "user.Presence")
	proto.RegisterType((*Previewing)(nil), "user.Previewing")
	proto.RegisterType((*Visitor)(nil), "user.Visitor")
	proto.RegisterType((*Visitors)(nil), "user.Visitors")
	proto.RegisterType((*LastView)(nil), "user.LastView")
	proto.RegisterType((*Automation)(nil), "user.Automation")
	proto.RegisterType((*Automations)(nil), "user.Automations")
	proto.RegisterType((*Session)(nil), "user.Session")
	proto.RegisterType((*AutomationEvent)(nil), "user.AutomationEvent")
	proto.RegisterEnum("user.Event", Event_name, Event_value)
	proto.RegisterEnum("user.Segmentation_State", Segmentation_State_name, Segmentation_State_value)
	proto.RegisterEnum("user.SegmentCondition_Operator", SegmentCondition_Operator_name, SegmentCondition_Operator_value)
	proto.RegisterEnum("user.Condition_JoinOperator", Condition_JoinOperator_name, Condition_JoinOperator_value)
	proto.RegisterEnum("user.Automation_State", Automation_State_name, Automation_State_value)
	proto.RegisterEnum("user.Automation_ActionType", Automation_ActionType_name, Automation_ActionType_value)
	proto.RegisterEnum("user.Session_Platform", Session_Platform_name, Session_Platform_value)
	proto.RegisterEnum("user.Session_Status", Session_Status_name, Session_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyServer service

type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := grpc.Invoke(ctx, "/user.MyServer/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyServer service

type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// Client API for Segmentator service

type SegmentatorClient interface {
	CreateSegmenmt(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	ListSemgent(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
	DeleteSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error)
}

type segmentatorClient struct {
	cc *grpc.ClientConn
}

func NewSegmentatorClient(cc *grpc.ClientConn) SegmentatorClient {
	return &segmentatorClient{cc}
}

func (c *segmentatorClient) CreateSegmenmt(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.Segmentator/CreateSegmenmt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentatorClient) UpdateSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.Segmentator/UpdateSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentatorClient) ListSemgent(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.Segmentator/ListSemgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentatorClient) DeleteSegment(ctx context.Context, in *Segmentation, opts ...grpc.CallOption) (*Segmentation, error) {
	out := new(Segmentation)
	err := grpc.Invoke(ctx, "/user.Segmentator/DeleteSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Segmentator service

type SegmentatorServer interface {
	CreateSegmenmt(context.Context, *Segmentation) (*Segmentation, error)
	UpdateSegment(context.Context, *Segmentation) (*Segmentation, error)
	ListSemgent(context.Context, *Segmentation) (*Segmentation, error)
	DeleteSegment(context.Context, *Segmentation) (*Segmentation, error)
}

func RegisterSegmentatorServer(s *grpc.Server, srv SegmentatorServer) {
	s.RegisterService(&_Segmentator_serviceDesc, srv)
}

func _Segmentator_CreateSegmenmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentatorServer).CreateSegmenmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Segmentator/CreateSegmenmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentatorServer).CreateSegmenmt(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentator_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentatorServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Segmentator/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentatorServer).UpdateSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentator_ListSemgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentatorServer).ListSemgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Segmentator/ListSemgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentatorServer).ListSemgent(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Segmentator_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segmentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentatorServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Segmentator/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentatorServer).DeleteSegment(ctx, req.(*Segmentation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Segmentator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.Segmentator",
	HandlerType: (*SegmentatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSegmenmt",
			Handler:    _Segmentator_CreateSegmenmt_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _Segmentator_UpdateSegment_Handler,
		},
		{
			MethodName: "ListSemgent",
			Handler:    _Segmentator_ListSemgent_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _Segmentator_DeleteSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x1a, 0x4d, 0x6f, 0xdc, 0xc6,
	0xd5, 0x5c, 0xee, 0x07, 0xf7, 0xad, 0x56, 0x5a, 0x8d, 0x1c, 0x9b, 0x96, 0xe3, 0x0f, 0xd1, 0x4e,
	0x62, 0xa7, 0x81, 0x1d, 0x38, 0x6d, 0xd3, 0xf4, 0x50, 0xc0, 0x1f, 0x09, 0xaa, 0xc2, 0x76, 0x02,
	0xca, 0x0e, 0x7a, 0x5b, 0x50, 0xe4, 0x78, 0xc5, 0x98, 0xcb, 0x61, 0x66, 0x86, 0xb2, 0x15, 0x20,
	0x97, 0xf6, 0x90, 0x9e, 0x72, 0xce, 0xa9, 0x40, 0x0f, 0x3d, 0xf4, 0xda, 0x1e, 0x0b, 0x14, 0x05,
	0x0a, 0xf4, 0xd0, 0x43, 0xdb, 0x5b, 0x6f, 0xed, 0xb1, 0xbf, 0xa0, 0x40, 0x8f, 0xc5, 0xbc, 0x19,
	0x92, 0xc3, 0x95, 0x64, 0xcb, 0x8e, 0xdc, 0x8b, 0xc4, 0xf7, 0x31, 0x9c, 0xf7, 0xfd, 0xde, 0x0c,
	0x17, 0x56, 0x4a, 0x41, 0xf9, 0x75, 0xf5, 0xe7, 0x5a, 0xc1, 0x99, 0x64, 0xa4, 0xab, 0x9e, 0xd7,
	0xaf, 0x6d, 0xa7, 0x72, 0xbb, 0x8c, 0x1f, 0x53, 0x79, 0x8d, 0xf1, 0xd9, 0x75, 0x51, 0x6e, 0xa7,
	0x5f, 0x5c, 0xdf, 0xa1, 0x51, 0x42, 0xf9, 0xf5, 0x98, 0xcd, 0xe7, 0x2c, 0x37, 0xff, 0xf4, 0xaa,
	0xe0, 0x1f, 0x7d, 0x18, 0xdc, 0xcc, 0xb2, 0x07, 0x7b, 0x05, 0x25, 0xe7, 0x01, 0xdf, 0xe1, 0x77,
	0x2e, 0x3a, 0x57, 0x46, 0x37, 0xe0, 0x1a, 0xbe, 0xfc, 0xa1, 0xa0, 0x3c, 0x44, 0x3c, 0xb9, 0x04,
	0x9d, 0x98, 0xfb, 0x2e, 0x52, 0xd7, 0x34, 0xf5, 0x36, 0xa7, 0x91, 0xa4, 0x21, 0xfd, 0xbc, 0xa4,
	0x42, 0x86, 0x9d, 0x58, 0x31, 0xf5, 0x1f, 0xa5, 0x34, 0x4b, 0x84, 0xdf, 0x43, 0xc6, 0x91, 0x66,
	0xfc, 0x48, 0xe1, 0x42, 0x43, 0x22, 0x57, 0xc0, 0x2d, 0x63, 0xee, 0xf7, 0x91, 0xe3, 0x54, 0xb3,
	0x51, 0xf5, 0x3a, 0x51, 0x66, 0x32, 0x54, 0x2c, 0x8a, 0x93, 0x17, 0xdc, 0xf7, 0x6c, 0xce, 0x90,
	0x46, 0xc9, 0x03, 0x56, 0xa4, 0x71, 0xb5, 0xaf, 0x62, 0x21, 0x1f, 0xc2, 0xaa, 0xa2, 0x0a, 0x1a,
	0xf1, 0x78, 0x87, 0x6b, 0x8a, 0x3f, 0xc4, 0x75, 0xa7, 0x9b, 0x1d, 0xb6, 0x90, 0x5c, 0x2d, 0xdc,
	0xbf, 0x82, 0xdc, 0x82, 0x89, 0x8d, 0x54, 0x92, 0xf8, 0xb0, 0x28, 0x67, 0xf5, 0x16, 0x94, 0x73,
	0x1f, 0x3f, 0x09, 0xa0, 0x33, 0x17, 0xfe, 0x08, 0x57, 0x11, 0xbd, 0xea, 0x5e, 0x24, 0x1e, 0x87,
	0x54, 0x14, 0x2c, 0x17, 0x34, 0xec, 0xcc, 0xd1, 0x04, 0x99, 0xe4, 0xfe, 0x92, 0xfd, 0xea, 0xbb,
	0xa9, 0x90, 0xa8, 0x98, 0xa8, 0x4c, 0x90, 0x49, 0xae, 0xde, 0x26, 0x66, 0xfe, 0xb2, 0xfd, 0xb6,
	0x2d, 0x3a, 0x9b, 0xd3, 0x5c, 0x46, 0x32, 0x65, 0x79, 0xd8, 0x11, 0x33, 0x72, 0x19, 0x7a, 0x05,
	0xa7, 0x22, 0xf7, 0x57, 0x90, 0x6d, 0x59, 0xb3, 0x7d, 0xc2, 0xa9, 0xa0, 0x79, 0x4c, 0x43, 0x4d,
	0x24, 0x6f, 0x22, 0xd7, 0x6e, 0xea, 0x4f, 0x90, 0x6b, 0x52, 0x73, 0xed, 0xa6, 0xf4, 0x49, 0x9a,
	0xcf, 0x42, 0x4d, 0x26, 0xe7, 0xa0, 0xb3, 0x9b, 0xfa, 0xab, 0xc8, 0x34, 0xd6, 0x4c, 0x9f, 0xa6,
	0x22, 0x95, 0x8c, 0x87, 0x9d, 0xdd, 0x94, 0x5c, 0x04, 0x77, 0x37, 0x15, 0x3e, 0xb1, 0xb7, 0x32,
	0x74, 0x11, 0x2a, 0x12, 0xd9, 0x80, 0x9e, 0x54, 0x7a, 0xf8, 0x6b, 0x76, 0x0c, 0x68, 0x9f, 0x69,
	0x0a, 0xb9, 0x0a, 0xfd, 0x52, 0xf3, 0x9c, 0x44, 0x9e, 0x55, 0x63, 0xdd, 0x9c, 0xd7, 0xde, 0x35,
	0x0c, 0xe4, 0x32, 0xf4, 0xe7, 0x7b, 0x18, 0x99, 0xaf, 0x21, 0xeb, 0x92, 0x31, 0xe9, 0x1e, 0xc6,
	0xa6, 0xa1, 0x91, 0x77, 0x01, 0xa2, 0x52, 0xb2, 0x39, 0x1a, 0xc5, 0x3f, 0x6d, 0x6b, 0x78, 0xb3,
	0xc6, 0x87, 0x16, 0x0f, 0x79, 0x0f, 0x46, 0x0d, 0x24, 0xfc, 0x33, 0xb6, 0x1c, 0xcd, 0x12, 0x11,
	0xda, 0x5c, 0xe4, 0x2d, 0x18, 0x08, 0x2a, 0x84, 0xda, 0x63, 0xdd, 0x36, 0xd0, 0x96, 0x46, 0x86,
	0x15, 0x35, 0xf8, 0x85, 0x03, 0xcb, 0x37, 0x93, 0xe4, 0x01, 0xbb, 0xb7, 0x67, 0xc2, 0x8d, 0x6c,
	0x80, 0x1b, 0xcb, 0xa7, 0xbe, 0x83, 0xeb, 0x56, 0xae, 0x99, 0x44, 0xbc, 0xcd, 0x72, 0x49, 0x9f,
	0xca, 0x50, 0xd1, 0xc8, 0x39, 0x80, 0x28, 0x8e, 0x59, 0x99, 0xcb, 0x69, 0x9a, 0x60, 0x26, 0x0e,
	0xc3, 0xa1, 0xc1, 0x6c, 0x26, 0xe4, 0x34, 0x0c, 0xd4, 0x6e, 0x8a, 0xe6, 0x22, 0xad, 0xaf, 0xc0,
	0xcd, 0x84, 0x9c, 0x85, 0x61, 0x34, 0xa3, 0xb8, 0x4a, 0x65, 0x9e, 0x7b, 0x65, 0x18, 0x7a, 0x88,
	0xd8, 0x4c, 0x44, 0xf0, 0x10, 0x26, 0x8b, 0xd9, 0xf5, 0xbc, 0x8d, 0x96, 0xa1, 0x53, 0xef, 0xd1,
	0x49, 0x13, 0x42, 0xa0, 0x3b, 0x8f, 0xc4, 0x63, 0x4c, 0xea, 0x61, 0x88, 0xcf, 0xc1, 0x37, 0x0e,
	0xf4, 0xb5, 0x13, 0x8e, 0xa2, 0xd9, 0x19, 0xf0, 0x2a, 0x09, 0xcd, 0x76, 0x03, 0x23, 0x60, 0x5d,
	0x78, 0xdc, 0x43, 0x0a, 0xcf, 0x29, 0xe8, 0x97, 0x18, 0x17, 0x7e, 0xf7, 0xa2, 0x73, 0xa5, 0x17,
	0x1a, 0x88, 0xf8, 0x30, 0x28, 0x8b, 0x24, 0x92, 0x34, 0x41, 0xb9, 0xdc, 0xb0, 0x02, 0x83, 0x3f,
	0xf7, 0xa1, 0x7b, 0x54, 0xc1, 0x16, 0x55, 0x6d, 0x5b, 0xa6, 0xbb, 0x68, 0x99, 0x75, 0xf0, 0x1e,
	0x95, 0x59, 0x96, 0x47, 0x73, 0x6a, 0xac, 0x51, 0xc3, 0x4a, 0xd0, 0x62, 0x87, 0xe5, 0x54, 0xf8,
	0x03, 0x74, 0x81, 0x81, 0x14, 0x9e, 0xce, 0xa3, 0x34, 0x13, 0x3e, 0x68, 0xbc, 0x86, 0x54, 0xb1,
	0x94, 0x3c, 0x8a, 0xa9, 0x2a, 0x16, 0xae, 0x95, 0x28, 0x0a, 0x17, 0x1a, 0x12, 0x79, 0x13, 0x06,
	0x09, 0xdd, 0x4d, 0x15, 0xd7, 0x18, 0xb9, 0x4c, 0xfc, 0xdf, 0x41, 0x64, 0x58, 0x11, 0xc9, 0x6b,
	0xd0, 0x4f, 0xc5, 0x74, 0x3b, 0xca, 0xb1, 0x56, 0x78, 0x61, 0x2f, 0x15, 0xb7, 0xa2, 0x1c, 0xd5,
	0xd9, 0x8d, 0x64, 0xc4, 0xa7, 0x25, 0xcf, 0xb0, 0x3e, 0x28, 0x75, 0x10, 0xf3, 0x90, 0x67, 0x4a,
	0x1d, 0xa1, 0xab, 0x89, 0xf0, 0xd7, 0x74, 0xdc, 0x54, 0xb0, 0x12, 0x3b, 0x8b, 0xb6, 0x69, 0x26,
	0xfc, 0x93, 0x5a, 0x6c, 0x0d, 0x91, 0x00, 0x96, 0xca, 0x5c, 0x94, 0xdb, 0x22, 0xe6, 0xe9, 0x36,
	0x4d, 0x30, 0x2d, 0xbd, 0xb0, 0x85, 0x23, 0x17, 0x60, 0x34, 0x8f, 0xf8, 0x63, 0x9a, 0x4c, 0x45,
	0x11, 0xcd, 0xfd, 0x53, 0xc8, 0x02, 0x1a, 0xb5, 0x55, 0x44, 0x73, 0xb2, 0x01, 0x4b, 0x3b, 0x11,
	0x4f, 0xa6, 0xdb, 0xac, 0xcc, 0x63, 0x9a, 0x60, 0xc6, 0x7a, 0xe1, 0x48, 0xe1, 0x6e, 0x69, 0x14,
	0x79, 0x03, 0x96, 0x25, 0x93, 0x51, 0x36, 0x35, 0x39, 0x25, 0x7c, 0x1f, 0xfd, 0x3f, 0x46, 0xac,
	0xc9, 0x38, 0xa1, 0x22, 0x0b, 0xfb, 0x9c, 0x72, 0xd7, 0x19, 0x1d, 0x59, 0x08, 0x6b, 0x67, 0xc9,
	0x74, 0x4e, 0xbf, 0x60, 0x39, 0xc5, 0x74, 0x1d, 0x86, 0x35, 0xac, 0x04, 0x40, 0x9f, 0xf2, 0xbd,
	0x69, 0xcc, 0x12, 0xea, 0x9f, 0x45, 0xfa, 0xc8, 0xe0, 0x6e, 0xb3, 0x84, 0xaa, 0x00, 0x33, 0xa0,
	0x7f, 0x4e, 0xbf, 0xd8, 0x80, 0x2a, 0x1f, 0xe2, 0x54, 0xee, 0xf9, 0x17, 0x75, 0x3e, 0xa8, 0x67,
	0xb5, 0x59, 0x16, 0xe5, 0xb3, 0x32, 0x9a, 0x51, 0xff, 0x75, 0xbd, 0x59, 0x05, 0xab, 0x37, 0x45,
	0x59, 0x1a, 0x09, 0x2a, 0xfc, 0xf3, 0x68, 0xcb, 0x0a, 0x54, 0x99, 0x9b, 0x45, 0x42, 0x4e, 0x05,
	0xa5, 0xb9, 0x7f, 0x01, 0xc3, 0xd8, 0x53, 0x88, 0x2d, 0x4a, 0x73, 0xab, 0x9b, 0x6e, 0xd8, 0x01,
	0xd2, 0xee, 0xa6, 0x67, 0xc0, 0xc3, 0xa2, 0x50, 0x44, 0xdc, 0x0f, 0xd0, 0x40, 0x58, 0x24, 0x3e,
	0x89, 0x54, 0x37, 0x1e, 0xcf, 0x59, 0x92, 0x3e, 0x4a, 0x69, 0x32, 0xdd, 0x61, 0x25, 0xf7, 0x2f,
	0x21, 0x7d, 0xa9, 0x42, 0xfe, 0x98, 0x95, 0x5c, 0xc9, 0x5d, 0xc1, 0xfe, 0x65, 0x2d, 0x40, 0x05,
	0x07, 0x57, 0xa1, 0xa7, 0xf2, 0x48, 0x90, 0x8b, 0xd0, 0xc3, 0x3e, 0xe7, 0x3b, 0x28, 0x88, 0x9d,
	0xa4, 0x9a, 0x10, 0x00, 0x78, 0x77, 0x59, 0x8c, 0x65, 0x32, 0xf8, 0x93, 0x03, 0x7d, 0x1d, 0x9f,
	0x56, 0x7a, 0xf5, 0x30, 0xbd, 0x36, 0x60, 0x49, 0xf1, 0xd7, 0xb5, 0x40, 0xa7, 0xf4, 0xa8, 0xc6,
	0x6d, 0x26, 0xe4, 0x75, 0x18, 0xd6, 0xa0, 0xc9, 0xb1, 0x06, 0x41, 0xbe, 0x03, 0xab, 0x22, 0xe6,
	0x94, 0xe6, 0x53, 0x4e, 0x05, 0xcb, 0x4a, 0xac, 0xf7, 0x7d, 0xe4, 0x9a, 0x68, 0x42, 0x58, 0xe3,
	0x55, 0x18, 0x56, 0x3e, 0x50, 0x9b, 0x0d, 0x70, 0x33, 0xa8, 0x50, 0x3a, 0x42, 0x6a, 0xa7, 0x79,
	0x6d, 0xa7, 0x05, 0x3f, 0x73, 0xa1, 0x87, 0xb9, 0xb8, 0xaf, 0x46, 0x28, 0xb8, 0x30, 0xb5, 0xa1,
	0x93, 0x16, 0xb8, 0x8d, 0xd1, 0x5d, 0x6d, 0xd3, 0x33, 0xdb, 0x18, 0x94, 0xae, 0xcf, 0x2a, 0x46,
	0xa6, 0x58, 0x36, 0xcc, 0x3e, 0x0a, 0x71, 0x5f, 0x95, 0x0d, 0x2b, 0x12, 0x91, 0x3e, 0x6c, 0x45,
	0xe2, 0x22, 0x0b, 0x06, 0xeb, 0xda, 0xfe, 0x60, 0x7d, 0x03, 0x96, 0x63, 0x96, 0xcb, 0x34, 0x57,
	0x86, 0x45, 0x26, 0x40, 0xa6, 0x71, 0x8d, 0xdd, 0xcf, 0x86, 0xdb, 0x91, 0x05, 0x36, 0xdc, 0x10,
	0xed, 0x22, 0x53, 0x59, 0x26, 0x14, 0x87, 0x94, 0x4e, 0x58, 0xc3, 0xca, 0x3f, 0x19, 0xcb, 0x67,
	0x9a, 0x38, 0x46, 0x62, 0x83, 0x50, 0xb6, 0x28, 0x98, 0x50, 0x69, 0x8b, 0x42, 0x2c, 0xe3, 0xdb,
	0x41, 0xa3, 0x50, 0x02, 0x3b, 0x29, 0x27, 0x0b, 0x49, 0x39, 0x01, 0x37, 0x15, 0x05, 0xce, 0x1e,
	0xc3, 0x50, 0x3d, 0x06, 0x5f, 0xc2, 0xd2, 0x3d, 0xca, 0x67, 0xf4, 0xa5, 0x9b, 0xa8, 0x7b, 0x70,
	0x6f, 0xeb, 0xd5, 0xce, 0x3c, 0x0b, 0x43, 0x4e, 0x63, 0x6a, 0xd7, 0x7b, 0x4f, 0x23, 0x36, 0x93,
	0x20, 0x85, 0x71, 0x6b, 0xc8, 0x7d, 0x5e, 0xe3, 0x54, 0x8e, 0xda, 0x89, 0xb2, 0x8c, 0xe6, 0x3a,
	0xe2, 0x5c, 0xe3, 0xa8, 0x0a, 0xb7, 0x99, 0xa8, 0xb2, 0x1a, 0xe5, 0xe2, 0x09, 0xe5, 0x66, 0x33,
	0x03, 0x05, 0xbf, 0x76, 0xa0, 0x87, 0x93, 0xcf, 0x31, 0x0c, 0x0a, 0x27, 0xab, 0x09, 0x4c, 0xef,
	0x6f, 0x86, 0x2e, 0x02, 0x5d, 0xb9, 0x57, 0x54, 0x7d, 0x0b, 0x9f, 0xed, 0x26, 0xea, 0xb5, 0x9a,
	0xa8, 0xd5, 0x76, 0x87, 0x76, 0xdb, 0x0d, 0xfe, 0xe8, 0xc0, 0xc8, 0x9a, 0xd3, 0x8e, 0x22, 0xed,
	0xc1, 0xe2, 0xd8, 0x23, 0x41, 0xb7, 0x3d, 0x12, 0x58, 0x83, 0x4e, 0xaf, 0x35, 0xe8, 0x54, 0x2a,
	0xf4, 0xbf, 0x95, 0x0a, 0xbf, 0x74, 0x60, 0xb2, 0x78, 0x8c, 0x78, 0x65, 0x56, 0xb7, 0x74, 0xe9,
	0xb6, 0x74, 0xb1, 0xf5, 0xef, 0xb5, 0xf4, 0x0f, 0xbe, 0x72, 0x60, 0xb2, 0x55, 0x75, 0xd3, 0xe3,
	0x13, 0xd0, 0xde, 0xd1, 0x6d, 0x5b, 0xfc, 0x14, 0xf4, 0x51, 0x5c, 0xe1, 0x77, 0x75, 0xb3, 0xd7,
	0x50, 0x30, 0x87, 0xe5, 0x2d, 0xec, 0xa6, 0x77, 0x5e, 0x40, 0x0c, 0xbb, 0x25, 0x77, 0xda, 0x2d,
	0xf9, 0xd9, 0xc9, 0x19, 0x94, 0xb0, 0x64, 0x9f, 0x95, 0x5e, 0xfe, 0x4d, 0x87, 0x9b, 0xfd, 0xa0,
	0x59, 0xf6, 0x2b, 0x07, 0x56, 0x6a, 0x35, 0xcd, 0xd6, 0xaf, 0x52, 0xcf, 0x43, 0xa5, 0x0b, 0x32,
	0x18, 0xdb, 0xc7, 0x3b, 0x71, 0x14, 0x31, 0x7e, 0x00, 0x63, 0x61, 0xaf, 0xf1, 0x5d, 0x6c, 0xd2,
	0x07, 0x9d, 0x16, 0xdb, 0x8c, 0xc1, 0xef, 0x54, 0x9c, 0x69, 0xcc, 0x5d, 0xc6, 0x8a, 0x2d, 0x19,
	0x49, 0x7a, 0x3c, 0x71, 0x56, 0x8f, 0x24, 0x6e, 0x7b, 0x24, 0xd9, 0x80, 0xa5, 0x8c, 0xb1, 0x62,
	0x1a, 0x63, 0x55, 0x4d, 0x30, 0x91, 0xdd, 0x70, 0xa4, 0x70, 0xba, 0xd0, 0x26, 0xba, 0x9b, 0xb2,
	0x62, 0x9a, 0x97, 0xf3, 0x6d, 0xca, 0xb1, 0x69, 0xbb, 0xaa, 0x9b, 0xb2, 0xe2, 0x3e, 0x62, 0x82,
	0xaf, 0x5d, 0x58, 0xb2, 0xb5, 0x3a, 0x06, 0x89, 0x17, 0x9b, 0x02, 0x81, 0x2e, 0x36, 0x47, 0xed,
	0x38, 0x7c, 0x26, 0x17, 0x61, 0x94, 0x50, 0x95, 0x92, 0x05, 0xce, 0x1c, 0x23, 0x5d, 0xda, 0x2d,
	0x94, 0xda, 0x04, 0xf5, 0xc6, 0xb7, 0xa2, 0x63, 0x5d, 0x3d, 0xba, 0xdc, 0x56, 0x08, 0x72, 0x1d,
	0x20, 0x66, 0x79, 0x92, 0x6a, 0x27, 0xf5, 0xd1, 0x49, 0x2b, 0xe6, 0x26, 0xa5, 0xc2, 0x87, 0x16,
	0x8b, 0x6a, 0x87, 0x3c, 0xca, 0x4d, 0x55, 0x53, 0x8f, 0x38, 0x92, 0x1a, 0xcb, 0x0d, 0x75, 0xad,
	0x33, 0x60, 0x6b, 0x8c, 0x83, 0xf6, 0x18, 0xa7, 0x0a, 0x93, 0x50, 0xae, 0xc5, 0x56, 0x3e, 0x0c,
	0x35, 0x80, 0xa3, 0x40, 0xc9, 0x39, 0xce, 0x0b, 0x25, 0x17, 0x8c, 0xe3, 0x28, 0xe0, 0x86, 0x63,
	0x83, 0xbd, 0x8d, 0xc8, 0x60, 0x03, 0x7a, 0x3a, 0x2e, 0x00, 0xfa, 0x51, 0x2c, 0xd3, 0x5d, 0x3a,
	0x39, 0x41, 0x96, 0xc0, 0x4b, 0x73, 0x03, 0x39, 0xc1, 0x6f, 0x55, 0xfa, 0x68, 0x87, 0xa8, 0x81,
	0xe9, 0x71, 0x9a, 0xcf, 0x8e, 0x98, 0x3e, 0x75, 0x98, 0x74, 0xda, 0x61, 0xf2, 0x9c, 0xf4, 0x59,
	0x8c, 0xa2, 0xc1, 0x73, 0xa3, 0xc8, 0xdb, 0x17, 0x45, 0xdf, 0x34, 0xb1, 0x5f, 0x5b, 0x5f, 0xc5,
	0x01, 0x2b, 0x4c, 0x78, 0x74, 0x58, 0x41, 0xd6, 0xa0, 0x97, 0x8a, 0x29, 0x2b, 0x50, 0x04, 0x2f,
	0xec, 0xa6, 0xe2, 0xe3, 0x42, 0xb9, 0xe5, 0x31, 0xdd, 0x33, 0x89, 0xab, 0x1e, 0x95, 0xf1, 0x59,
	0x41, 0x79, 0x24, 0x19, 0xaf, 0x4e, 0x85, 0x15, 0xac, 0x8c, 0xbf, 0x1b, 0x65, 0x65, 0xd5, 0xb3,
	0x34, 0x10, 0x9c, 0x05, 0xef, 0xe3, 0x8a, 0x63, 0x00, 0x6e, 0x94, 0x27, 0x93, 0x13, 0xa4, 0x0f,
	0x1d, 0xc6, 0x27, 0x4e, 0xf0, 0xb5, 0x03, 0xc3, 0x46, 0x26, 0x02, 0xdd, 0xcf, 0x58, 0x9a, 0xa3,
	0x29, 0x87, 0x21, 0x3e, 0x57, 0x22, 0x74, 0x0e, 0x16, 0xc1, 0x3d, 0x4c, 0x84, 0xae, 0x2d, 0xc2,
	0x55, 0x58, 0xfa, 0x09, 0x4b, 0xf3, 0x5a, 0x0c, 0x0f, 0xba, 0x39, 0xcb, 0x95, 0x77, 0x8d, 0x40,
	0x8e, 0x11, 0xa8, 0x13, 0xfc, 0xc1, 0xd1, 0x77, 0x08, 0xf6, 0xcd, 0xd7, 0x71, 0x35, 0x4c, 0x19,
	0x65, 0x28, 0xb0, 0x1b, 0x6a, 0xa0, 0x39, 0x6b, 0x74, 0x0f, 0x39, 0x6b, 0xe8, 0x11, 0x2a, 0xde,
	0xa9, 0x8d, 0x6d, 0x20, 0x9c, 0x04, 0xb0, 0xc3, 0xeb, 0xec, 0x52, 0xf1, 0xa4, 0xc1, 0xe0, 0x3f,
	0x0e, 0xac, 0xee, 0xbb, 0x00, 0x3c, 0x06, 0x0d, 0xde, 0x82, 0x15, 0xbb, 0xa2, 0x36, 0xc1, 0xba,
	0x6c, 0xa3, 0xb5, 0xaa, 0x9f, 0x97, 0x94, 0x57, 0x51, 0xa3, 0x81, 0x43, 0x15, 0x39, 0x09, 0xbd,
	0x2c, 0x9d, 0xa7, 0x12, 0x63, 0xa6, 0x17, 0x6a, 0xa0, 0xd5, 0xbe, 0xbd, 0x7d, 0xed, 0xdb, 0x9a,
	0x74, 0xbc, 0x7a, 0xd2, 0xf9, 0xab, 0x03, 0xb0, 0x99, 0x27, 0xf4, 0xe9, 0x87, 0xbb, 0xea, 0xf0,
	0xf4, 0x82, 0x97, 0x1d, 0x87, 0x8e, 0x61, 0x56, 0x19, 0xea, 0xef, 0x2b, 0x43, 0x71, 0x24, 0xe9,
	0x8c, 0xf1, 0x3d, 0xcc, 0x4a, 0x75, 0xd0, 0x31, 0xb0, 0x35, 0x63, 0x78, 0xf6, 0x8c, 0xa1, 0xf0,
	0x6c, 0xfb, 0x33, 0x1a, 0x4b, 0x73, 0xf4, 0x31, 0x10, 0x0e, 0x7b, 0xf4, 0xa9, 0x34, 0x07, 0x19,
	0x7c, 0x0e, 0xfe, 0xe6, 0xc0, 0xaa, 0x7d, 0x51, 0xfa, 0xca, 0xaf, 0xd6, 0x0e, 0x9f, 0xd2, 0x2c,
	0xef, 0x75, 0x0f, 0xf6, 0xde, 0xc0, 0xf6, 0x5e, 0xe3, 0x22, 0xaf, 0xe5, 0x22, 0x0e, 0x93, 0xc5,
	0x9b, 0xdf, 0xa3, 0xe8, 0x73, 0xa9, 0x36, 0xa6, 0xdb, 0xba, 0x3c, 0xd2, 0x77, 0xa7, 0x8d, 0x65,
	0x0f, 0x8a, 0xaf, 0xe0, 0x57, 0x0e, 0xac, 0xa8, 0x4d, 0xef, 0xd3, 0x27, 0xff, 0x0f, 0x1b, 0x9e,
	0x03, 0x10, 0x32, 0xe2, 0x72, 0xaa, 0x0e, 0x7a, 0x55, 0x5f, 0x44, 0xcc, 0x83, 0x74, 0x4e, 0xdb,
	0xf6, 0x1a, 0x1a, 0x7b, 0x05, 0x09, 0x8c, 0xcc, 0x05, 0xaa, 0x92, 0xf4, 0x5b, 0xde, 0x31, 0x1e,
	0x26, 0x5a, 0xf0, 0x17, 0x07, 0x7a, 0x78, 0x9f, 0x52, 0xb7, 0xfc, 0x8e, 0xd5, 0xf2, 0x5f, 0x76,
	0xc6, 0x3c, 0x05, 0x7d, 0x41, 0xa5, 0xa4, 0xb5, 0xdd, 0x35, 0xa4, 0x9a, 0x92, 0x7e, 0x9a, 0x5a,
	0xa7, 0x18, 0xd0, 0xa8, 0x07, 0xcf, 0x3e, 0xcb, 0x10, 0xe8, 0x26, 0x91, 0x8c, 0x4c, 0x8a, 0xe0,
	0xb3, 0x49, 0x67, 0xa8, 0xd2, 0x39, 0xf8, 0x12, 0xbc, 0xea, 0xd2, 0xff, 0x18, 0x0e, 0xca, 0xcf,
	0xd2, 0xae, 0x48, 0xf3, 0x59, 0x7d, 0xef, 0x6a, 0xa0, 0xe0, 0xf7, 0x0e, 0x40, 0xf3, 0x39, 0xe1,
	0x55, 0x4a, 0x70, 0x06, 0xbc, 0x22, 0x9a, 0x51, 0xbc, 0xd3, 0x34, 0x49, 0xa9, 0xe0, 0x87, 0x3c,
	0xb3, 0x2d, 0xd8, 0x6f, 0x5b, 0xf0, 0x1c, 0x00, 0x2e, 0x92, 0xa9, 0xcc, 0xa8, 0x89, 0xb5, 0xa1,
	0xc2, 0x3c, 0x50, 0x88, 0xe0, 0x9f, 0x0e, 0x0c, 0xcc, 0x77, 0x8c, 0x63, 0x10, 0xbd, 0xba, 0xd4,
	0xee, 0x1e, 0x7e, 0xa9, 0x7d, 0x90, 0x0d, 0x5b, 0x9a, 0xf5, 0xdb, 0x9a, 0x5d, 0x80, 0x11, 0x92,
	0x94, 0x7d, 0xeb, 0x99, 0x07, 0x55, 0xfa, 0x14, 0x31, 0x0b, 0x0a, 0x7a, 0x8b, 0x0a, 0xfe, 0x14,
	0xbc, 0xea, 0x3b, 0xcd, 0x51, 0x14, 0xbc, 0x0a, 0xde, 0xae, 0x61, 0xf7, 0x3b, 0x58, 0x62, 0x16,
	0x3e, 0x06, 0xd5, 0xe4, 0xe0, 0x37, 0x0e, 0x78, 0x77, 0x23, 0x21, 0x95, 0x1c, 0x2f, 0xed, 0xd3,
	0x09, 0xb8, 0x8d, 0x3b, 0xd5, 0xa3, 0x0a, 0xef, 0x32, 0x32, 0x56, 0xe8, 0x94, 0x91, 0xb9, 0x76,
	0x1b, 0xd4, 0xd7, 0x6e, 0x56, 0x17, 0xf2, 0xda, 0x5d, 0xe8, 0x0c, 0x78, 0x74, 0xd7, 0x54, 0x02,
	0x9d, 0x30, 0x03, 0x84, 0x37, 0x93, 0xe0, 0xef, 0x2e, 0x40, 0xf3, 0x79, 0xe7, 0xd8, 0x8e, 0x0e,
	0x4d, 0x4f, 0x55, 0x52, 0xed, 0x44, 0x79, 0x4e, 0xb3, 0xea, 0x56, 0xc3, 0x80, 0x75, 0x85, 0xe9,
	0x1d, 0x7e, 0xa8, 0xe8, 0xef, 0x3f, 0x54, 0xb4, 0x4f, 0x0d, 0x83, 0xe7, 0x9f, 0x1a, 0x8e, 0xf3,
	0x8c, 0x70, 0x01, 0x46, 0x6a, 0xca, 0x67, 0xb9, 0x2e, 0x58, 0x63, 0x5d, 0xb0, 0x34, 0x0a, 0x0b,
	0x56, 0xc3, 0x80, 0xd5, 0x69, 0xd9, 0x66, 0xb8, 0x13, 0xc9, 0xe8, 0x28, 0xc7, 0x87, 0x1f, 0x01,
	0xdc, 0x6c, 0xde, 0xe8, 0xc3, 0xc9, 0x98, 0xe5, 0xbb, 0x94, 0x0b, 0x3d, 0x52, 0xcd, 0xa9, 0x10,
	0xd1, 0x4c, 0xad, 0x3a, 0x05, 0x44, 0xd7, 0xf7, 0x9c, 0xc9, 0xf4, 0x51, 0xaa, 0x6f, 0x57, 0x27,
	0x0e, 0x76, 0x0a, 0xeb, 0x1b, 0xdd, 0x11, 0x5c, 0x7a, 0xa3, 0xfd, 0xed, 0x4f, 0x87, 0xf7, 0xfe,
	0xcf, 0x85, 0x36, 0x53, 0xf0, 0x2f, 0x17, 0x06, 0xe6, 0xa3, 0xc3, 0xab, 0x2c, 0x6d, 0x8b, 0x27,
	0xd1, 0x75, 0xf0, 0x8a, 0x2c, 0x92, 0x8f, 0x18, 0x9f, 0x57, 0x03, 0x55, 0x05, 0x2b, 0x1a, 0xa7,
	0x8f, 0x28, 0xe7, 0xe6, 0x80, 0x83, 0x37, 0x97, 0x1a, 0x26, 0x97, 0x60, 0xac, 0xbf, 0x4a, 0x4f,
	0x69, 0x3e, 0x4b, 0xf3, 0xea, 0x5a, 0x79, 0x49, 0x23, 0x3f, 0x44, 0x9c, 0x0a, 0x15, 0x6c, 0xc3,
	0x75, 0x3c, 0x54, 0xa0, 0xa2, 0x48, 0x75, 0x94, 0xa3, 0x09, 0x1e, 0x74, 0xdd, 0xb0, 0x02, 0xb1,
	0xb7, 0xc9, 0x48, 0x96, 0xc2, 0x44, 0x8a, 0x81, 0xd4, 0x99, 0x0c, 0x73, 0x4c, 0x98, 0xe3, 0xef,
	0x58, 0xdf, 0xec, 0x6b, 0x9c, 0x3e, 0x00, 0x5f, 0x83, 0xb5, 0x58, 0xd9, 0x28, 0x97, 0x58, 0xc4,
	0x2a, 0xce, 0x65, 0xe4, 0x5c, 0x35, 0x24, 0x55, 0x44, 0x0c, 0x3f, 0xb6, 0x4b, 0xd4, 0x41, 0x52,
	0x3e, 0x37, 0x5f, 0xaf, 0x40, 0xa3, 0x1e, 0x50, 0x3e, 0x0f, 0xde, 0x01, 0xef, 0x93, 0xca, 0x18,
	0x03, 0x70, 0x9f, 0xd0, 0xed, 0xc9, 0x09, 0x15, 0x68, 0x73, 0xb6, 0x9d, 0x66, 0x74, 0xd2, 0x21,
	0x23, 0x18, 0x24, 0x54, 0x3c, 0x96, 0xac, 0x98, 0x74, 0x83, 0xf3, 0xd0, 0xdf, 0xd2, 0xb2, 0x7a,
	0xd0, 0x65, 0x05, 0xcd, 0x35, 0x73, 0x9c, 0x31, 0x41, 0x93, 0x89, 0x13, 0xfc, 0xdb, 0x81, 0x95,
	0xc6, 0xfb, 0x7a, 0x62, 0x7e, 0x85, 0x9e, 0x6e, 0x7f, 0xb2, 0xee, 0x1d, 0xe1, 0x93, 0xb5, 0xf5,
	0xf5, 0xb9, 0xff, 0xac, 0xaf, 0xcf, 0x75, 0xf7, 0x19, 0x1c, 0xdc, 0x7d, 0xde, 0xfe, 0xb9, 0x07,
	0x3d, 0xad, 0xdf, 0x6b, 0xfa, 0x5c, 0x14, 0xd2, 0x28, 0x31, 0x83, 0x20, 0x55, 0x27, 0xd1, 0xd3,
	0xb0, 0xa6, 0xd0, 0x0f, 0xb1, 0x75, 0x36, 0x84, 0x4e, 0x45, 0x68, 0x5d, 0x8a, 0xd3, 0x64, 0xe2,
	0x56, 0x84, 0xd6, 0x01, 0x8b, 0x26, 0x93, 0x2e, 0x79, 0x1d, 0x7c, 0x45, 0xc0, 0xed, 0x16, 0x97,
	0xf5, 0x5a, 0xd4, 0xc5, 0xb5, 0x83, 0x8a, 0x8a, 0x43, 0xed, 0x22, 0xb5, 0x4f, 0x2e, 0xc1, 0x05,
	0xbd, 0x65, 0x73, 0xd2, 0x5a, 0xdc, 0x00, 0x0e, 0x62, 0x5a, 0xd4, 0x6a, 0x74, 0x10, 0xd3, 0x1d,
	0x9a, 0x51, 0x9b, 0x69, 0x89, 0x6c, 0xc0, 0xb9, 0x45, 0x26, 0x35, 0x99, 0x36, 0x2c, 0xe3, 0x83,
	0x58, 0xda, 0x96, 0x5d, 0xae, 0x54, 0xb2, 0x46, 0xdb, 0x86, 0x7a, 0x92, 0x5c, 0x86, 0x8b, 0xb5,
	0x39, 0xb4, 0xd6, 0x0b, 0xb7, 0xc0, 0x34, 0x99, 0x5c, 0x22, 0x6f, 0x42, 0xd0, 0xe6, 0x7a, 0xd8,
	0x7c, 0x7b, 0x6d, 0xf8, 0x2e, 0x93, 0x75, 0x38, 0x55, 0x39, 0xd7, 0xbe, 0xea, 0xa6, 0xc9, 0xe4,
	0x2a, 0x59, 0x81, 0x11, 0x8a, 0xaa, 0xef, 0x2b, 0x27, 0x6f, 0x93, 0x73, 0x70, 0x46, 0x21, 0xea,
	0x5f, 0x8d, 0xb4, 0xe4, 0x7e, 0x87, 0x5c, 0x80, 0xb3, 0x86, 0x5c, 0xfd, 0x5c, 0xa4, 0xc5, 0x70,
	0x4d, 0xd5, 0x6d, 0xc5, 0x60, 0xce, 0x32, 0x0d, 0xe5, 0x7a, 0x65, 0x95, 0x26, 0xa8, 0x1f, 0x16,
	0x82, 0x72, 0x4b, 0xef, 0x1b, 0xfb, 0x59, 0x16, 0xcd, 0xff, 0x5e, 0x25, 0x40, 0xc3, 0xd2, 0xb6,
	0xdd, 0x77, 0xf7, 0x33, 0xb4, 0x25, 0xfc, 0x9e, 0x32, 0x6e, 0x43, 0xbc, 0xa9, 0x3a, 0xc9, 0x7d,
	0xab, 0x91, 0x7c, 0x94, 0x72, 0x9a, 0x4c, 0xbe, 0xaf, 0x8c, 0xdb, 0x70, 0xdd, 0xb6, 0x3a, 0xd1,
	0x3d, 0xdd, 0x88, 0x34, 0xdf, 0xfb, 0xe4, 0x3c, 0xac, 0x6b, 0x5f, 0x63, 0xca, 0x2d, 0xc6, 0xd4,
	0xcd, 0x05, 0xfa, 0x62, 0x60, 0xde, 0xaa, 0x02, 0xa1, 0xca, 0xdd, 0x96, 0xac, 0xb7, 0xc9, 0xc9,
	0xfa, 0x72, 0x4a, 0xeb, 0xca, 0x58, 0x31, 0xb9, 0xa3, 0xb0, 0x8d, 0x6c, 0x5b, 0x7b, 0x79, 0x4c,
	0x93, 0xc9, 0x23, 0xb2, 0x66, 0x97, 0x2d, 0x2d, 0xde, 0x8c, 0xac, 0xc2, 0x58, 0xfb, 0xbe, 0x7a,
	0xa7, 0x6a, 0x2d, 0x80, 0x3b, 0xea, 0x75, 0xf4, 0xc6, 0xbb, 0xe0, 0xdd, 0xdb, 0xdb, 0xa2, 0x7c,
	0x97, 0x72, 0x72, 0x19, 0x3a, 0x77, 0x18, 0x31, 0xf5, 0xc4, 0xfc, 0x24, 0x6c, 0xbd, 0x0d, 0x06,
	0x27, 0x6e, 0xfc, 0xd7, 0x81, 0x51, 0x2d, 0x16, 0xe3, 0xe4, 0x87, 0xb0, 0xac, 0x15, 0xd3, 0xc8,
	0xb9, 0x24, 0x07, 0x5c, 0x3a, 0xaf, 0x1f, 0x80, 0x0b, 0x4e, 0x90, 0x0f, 0x60, 0xac, 0x8d, 0x66,
	0xf0, 0x2f, 0xb0, 0xf4, 0x7d, 0x18, 0x29, 0xe7, 0x6f, 0xd1, 0xf9, 0xec, 0xc5, 0x16, 0x7e, 0x00,
	0x63, 0x1d, 0x58, 0x2f, 0xbc, 0xe7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x8f, 0x33, 0x74,
	0x72, 0x27, 0x00, 0x00,
}
