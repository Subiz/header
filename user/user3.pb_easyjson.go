// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package user

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAe8eb074DecodeGithubComSubizHeaderUser(in *jlexer.Lexer, out *visitorMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser(out *jwriter.Writer, in visitorMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v visitorMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v visitorMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *visitorMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *visitorMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser1(in *jlexer.Lexer, out *userMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser1(out *jwriter.Writer, in userMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser1(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser2(in *jlexer.Lexer, out *automationCreditMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser2(out *jwriter.Writer, in automationCreditMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v automationCreditMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v automationCreditMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *automationCreditMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *automationCreditMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser2(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser3(in *jlexer.Lexer, out *Visitors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "visitors":
			if in.IsNull() {
				in.Skip()
				out.Visitors = nil
			} else {
				in.Delim('[')
				if out.Visitors == nil {
					if !in.IsDelim(']') {
						out.Visitors = make([]*Visitor, 0, 8)
					} else {
						out.Visitors = []*Visitor{}
					}
				} else {
					out.Visitors = (out.Visitors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Visitor
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Visitor)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Visitors = append(out.Visitors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser3(out *jwriter.Writer, in Visitors) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Visitors) != 0 {
		const prefix string = ",\"visitors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Visitors {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visitors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visitors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visitors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visitors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser3(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser4(in *jlexer.Lexer, out *Visitor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "pinged":
			out.Pinged = int64(in.Int64())
		case "page_url":
			out.PageUrl = string(in.String())
		case "page_viewed":
			out.PageViewed = int64(in.Int64())
		case "page_title":
			out.PageTitle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser4(out *jwriter.Writer, in Visitor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.Pinged != 0 {
		const prefix string = ",\"pinged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Pinged))
	}
	if in.PageUrl != "" {
		const prefix string = ",\"page_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PageUrl))
	}
	if in.PageViewed != 0 {
		const prefix string = ",\"page_viewed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PageViewed))
	}
	if in.PageTitle != "" {
		const prefix string = ",\"page_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PageTitle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visitor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visitor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visitor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visitor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser4(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser5(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *User
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(User)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser5(out *jwriter.Writer, in Users) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Users {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser5(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser6(in *jlexer.Lexer, out *UserSearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "total":
			out.Total = int64(in.Int64())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *User
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(User)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			out.Anchor = string(in.String())
		case "unreads":
			if in.IsNull() {
				in.Skip()
				out.Unreads = nil
			} else {
				in.Delim('[')
				if out.Unreads == nil {
					if !in.IsDelim(']') {
						out.Unreads = make([]int32, 0, 16)
					} else {
						out.Unreads = []int32{}
					}
				} else {
					out.Unreads = (out.Unreads)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int32
					v8 = int32(in.Int32())
					out.Unreads = append(out.Unreads, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unread_counts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.UnreadCounts = make(map[string]int32)
				} else {
					out.UnreadCounts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 int32
					v9 = int32(in.Int32())
					(out.UnreadCounts)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser6(out *jwriter.Writer, in UserSearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Users {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	if len(in.Unreads) != 0 {
		const prefix string = ",\"unreads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Unreads {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.UnreadCounts) != 0 {
		const prefix string = ",\"unread_counts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.UnreadCounts {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.Int32(int32(v14Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser6(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser7(in *jlexer.Lexer, out *UserSearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "segmentation_id":
			out.SegmentationId = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		case "anchor":
			out.Anchor = string(in.String())
		case "limit":
			out.Limit = int32(in.Int32())
		case "agent_id":
			out.AgentId = string(in.String())
		case "unread":
			out.Unread = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser7(out *jwriter.Writer, in UserSearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.SegmentationId != "" {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SegmentationId))
	}
	if in.Query != "" {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	if in.Condition != "" {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Condition))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Limit))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.Unread {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Unread))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser7(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser8(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*Trace, 0, 8)
					} else {
						out.Traces = []*Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v15 *Trace
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(Trace)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					out.Traces = append(out.Traces, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_ban":
			out.IsBan = bool(in.Bool())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*AttributeData, 0, 8)
					} else {
						out.Attributes = []*AttributeData{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *AttributeData
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(AttributeData)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "segments":
			if in.IsNull() {
				in.Skip()
				out.Segments = nil
			} else {
				in.Delim('[')
				if out.Segments == nil {
					if !in.IsDelim(']') {
						out.Segments = make([]string, 0, 4)
					} else {
						out.Segments = []string{}
					}
				} else {
					out.Segments = (out.Segments)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Segments = append(out.Segments, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subiz_id":
			out.SubizId = string(in.String())
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Aliases = append(out.Aliases, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "par":
			out.Par = int32(in.Int32())
		case "modified":
			out.Modified = int64(in.Int64())
		case "modified_week":
			out.ModifiedWeek = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser8(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Traces {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					(*v20).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsBan {
		const prefix string = ",\"is_ban\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsBan))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Attributes {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					(*v22).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Segments) != 0 {
		const prefix string = ",\"segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Segments {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.SubizId != "" {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubizId))
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Aliases {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if in.Par != 0 {
		const prefix string = ",\"par\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Par))
	}
	if in.Modified != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Modified))
	}
	if in.ModifiedWeek != 0 {
		const prefix string = ",\"modified_week\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ModifiedWeek))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser8(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser9(in *jlexer.Lexer, out *UnpickRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "segmentation_id":
			out.SegmentationId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser9(out *jwriter.Writer, in UnpickRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.SegmentationId != "" {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SegmentationId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnpickRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnpickRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnpickRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnpickRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser9(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser10(in *jlexer.Lexer, out *Traces) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*Trace, 0, 8)
					} else {
						out.Traces = []*Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *Trace
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(Trace)
						}
						(*v27).UnmarshalEasyJSON(in)
					}
					out.Traces = append(out.Traces, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser10(out *jwriter.Writer, in Traces) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Traces {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					(*v29).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Traces) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Traces) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Traces) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Traces) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser10(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser11(in *jlexer.Lexer, out *Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventId = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "location_id":
			out.LocationId = int32(in.Int32())
		case "city_name":
			out.CityName = string(in.String())
		case "country_name":
			out.CountryName = string(in.String())
		case "continent_code":
			out.ContinentCode = string(in.String())
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		case "postal_code":
			out.PostalCode = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "isp":
			out.Isp = string(in.String())
		case "continent_name":
			out.ContinentName = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "device_type":
			out.DeviceType = string(in.String())
		case "browser_name":
			out.BrowserName = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "screen_resolution":
			out.ScreenResolution = string(in.String())
		case "ga_client_id":
			out.GaClientId = string(in.String())
		case "ga_tracking_ids":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingIds = nil
			} else {
				in.Delim('[')
				if out.GaTrackingIds == nil {
					if !in.IsDelim(']') {
						out.GaTrackingIds = make([]string, 0, 4)
					} else {
						out.GaTrackingIds = []string{}
					}
				} else {
					out.GaTrackingIds = (out.GaTrackingIds)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.GaTrackingIds = append(out.GaTrackingIds, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ads_network":
			out.AdsNetwork = string(in.String())
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]*Campaign, 0, 8)
					} else {
						out.Campaigns = []*Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Campaign
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Campaign)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Campaigns = append(out.Campaigns, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			out.Created = int64(in.Int64())
		case "tracked":
			out.Tracked = int64(in.Int64())
		case "referrer":
			out.Referrer = string(in.String())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser11(out *jwriter.Writer, in Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EventId != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventId))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.LocationId != 0 {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LocationId))
	}
	if in.CityName != "" {
		const prefix string = ",\"city_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CityName))
	}
	if in.CountryName != "" {
		const prefix string = ",\"country_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryName))
	}
	if in.ContinentCode != "" {
		const prefix string = ",\"continent_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentCode))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Longitude))
	}
	if in.PostalCode != "" {
		const prefix string = ",\"postal_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostalCode))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Isp != "" {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Isp))
	}
	if in.ContinentName != "" {
		const prefix string = ",\"continent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentName))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.DeviceType != "" {
		const prefix string = ",\"device_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceType))
	}
	if in.BrowserName != "" {
		const prefix string = ",\"browser_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrowserName))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.GaClientId != "" {
		const prefix string = ",\"ga_client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GaClientId))
	}
	if len(in.GaTrackingIds) != 0 {
		const prefix string = ",\"ga_tracking_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.GaTrackingIds {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.AdsNetwork != "" {
		const prefix string = ",\"ads_network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdsNetwork))
	}
	if len(in.Campaigns) != 0 {
		const prefix string = ",\"campaigns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Campaigns {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					(*v35).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Tracked != 0 {
		const prefix string = ",\"tracked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Tracked))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser11(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser12(in *jlexer.Lexer, out *TotalOpenTicket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "total":
			out.Total = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser12(out *jwriter.Writer, in TotalOpenTicket) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TotalOpenTicket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TotalOpenTicket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TotalOpenTicket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TotalOpenTicket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser12(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser13(in *jlexer.Lexer, out *TotalConvoUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "total":
			out.Total = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser13(out *jwriter.Writer, in TotalConvoUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TotalConvoUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TotalConvoUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TotalConvoUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TotalConvoUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser13(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser14(in *jlexer.Lexer, out *Presences) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "presences":
			if in.IsNull() {
				in.Skip()
				out.Presences = nil
			} else {
				in.Delim('[')
				if out.Presences == nil {
					if !in.IsDelim(']') {
						out.Presences = make([]*Presence, 0, 8)
					} else {
						out.Presences = []*Presence{}
					}
				} else {
					out.Presences = (out.Presences)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *Presence
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(Presence)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					out.Presences = append(out.Presences, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser14(out *jwriter.Writer, in Presences) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.Presences) != 0 {
		const prefix string = ",\"presences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.Presences {
				if v37 > 0 {
					out.RawByte(',')
				}
				if v38 == nil {
					out.RawString("null")
				} else {
					(*v38).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Presences) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Presences) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Presences) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Presences) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser14(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser15(in *jlexer.Lexer, out *Presence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "pinged":
			out.Pinged = int64(in.Int64())
		case "pinged_minute":
			out.PingedMinute = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser15(out *jwriter.Writer, in Presence) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Pinged != 0 {
		const prefix string = ",\"pinged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Pinged))
	}
	if in.PingedMinute != 0 {
		const prefix string = ",\"pinged_minute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PingedMinute))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Presence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Presence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Presence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Presence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser15(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser16(in *jlexer.Lexer, out *PickRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "segmentation_id":
			out.SegmentationId = string(in.String())
		case "added":
			out.Added = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser16(out *jwriter.Writer, in PickRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.SegmentationId != "" {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SegmentationId))
	}
	if in.Added != 0 {
		const prefix string = ",\"added\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Added))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PickRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PickRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PickRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PickRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser16(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser17(in *jlexer.Lexer, out *MyUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "agent_id":
			out.AgentId = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "unread":
			out.Unread = int32(in.Int32())
		case "updated":
			out.Updated = int64(in.Int64())
		case "account_id":
			out.AccountId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser17(out *jwriter.Writer, in MyUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.Unread != 0 {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Unread))
	}
	if in.Updated != 0 {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Updated))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MyUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser17(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser18(in *jlexer.Lexer, out *MergeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "destination_user_id":
			out.DestinationUserId = string(in.String())
		case "source_user_id":
			out.SourceUserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser18(out *jwriter.Writer, in MergeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.DestinationUserId != "" {
		const prefix string = ",\"destination_user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DestinationUserId))
	}
	if in.SourceUserId != "" {
		const prefix string = ",\"source_user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceUserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MergeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MergeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MergeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MergeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser18(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser19(in *jlexer.Lexer, out *LastView) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "ua":
			out.Ua = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "event_id":
			out.EventId = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser19(out *jwriter.Writer, in LastView) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Ua != "" {
		const prefix string = ",\"ua\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ua))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.EventId != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventId))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LastView) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LastView) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LastView) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LastView) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser19(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser20(in *jlexer.Lexer, out *CreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "challenge_id":
			out.ChallengeId = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser20(out *jwriter.Writer, in CreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChallengeId != "" {
		const prefix string = ",\"challenge_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChallengeId))
	}
	if in.Answer != "" {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser20(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser21(in *jlexer.Lexer, out *CountTotalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_user":
			out.TotalUser = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser21(out *jwriter.Writer, in CountTotalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TotalUser != 0 {
		const prefix string = ",\"total_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalUser))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountTotalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountTotalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountTotalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountTotalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser21(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser22(in *jlexer.Lexer, out *CountTotalRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser22(out *jwriter.Writer, in CountTotalRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountTotalRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountTotalRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountTotalRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountTotalRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser22(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser23(in *jlexer.Lexer, out *CountSegmentationUserByAttributeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "attribute_key":
			out.AttributeKey = string(in.String())
		case "segmentation_id":
			out.SegmentationId = string(in.String())
		case "from":
			out.From = int32(in.Int32())
		case "to":
			out.To = int32(in.Int32())
		case "range":
			out.Range = string(in.String())
		case "from_hour":
			out.FromHour = int32(in.Int32())
		case "to_hour":
			out.ToHour = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser23(out *jwriter.Writer, in CountSegmentationUserByAttributeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AttributeKey != "" {
		const prefix string = ",\"attribute_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AttributeKey))
	}
	if in.SegmentationId != "" {
		const prefix string = ",\"segmentation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SegmentationId))
	}
	if in.From != 0 {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.From))
	}
	if in.To != 0 {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.To))
	}
	if in.Range != "" {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Range))
	}
	if in.FromHour != 0 {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FromHour))
	}
	if in.ToHour != 0 {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountSegmentationUserByAttributeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountSegmentationUserByAttributeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountSegmentationUserByAttributeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountSegmentationUserByAttributeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser23(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser24(in *jlexer.Lexer, out *CountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int32, 0, 16)
					} else {
						out.Data = []int32{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v39 int32
					v39 = int32(in.Int32())
					out.Data = append(out.Data, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser24(out *jwriter.Writer, in CountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.Data {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v41))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser24(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser25(in *jlexer.Lexer, out *Campaign) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "medium":
			out.Medium = string(in.String())
		case "term":
			out.Term = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser25(out *jwriter.Writer, in Campaign) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Medium))
	}
	if in.Term != "" {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Term))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Campaign) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Campaign) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Campaign) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Campaign) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser25(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser26(in *jlexer.Lexer, out *AutomationCreditsAggregate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "webhook_fired":
			out.WebhookFired = int64(in.Int64())
		case "message_fired":
			out.MessageFired = int64(in.Int64())
		case "email_fired":
			out.EmailFired = int64(in.Int64())
		case "min":
			out.Min = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser26(out *jwriter.Writer, in AutomationCreditsAggregate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.WebhookFired != 0 {
		const prefix string = ",\"webhook_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebhookFired))
	}
	if in.MessageFired != 0 {
		const prefix string = ",\"message_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageFired))
	}
	if in.EmailFired != 0 {
		const prefix string = ",\"email_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EmailFired))
	}
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Min))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutomationCreditsAggregate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutomationCreditsAggregate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutomationCreditsAggregate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutomationCreditsAggregate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser26(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser27(in *jlexer.Lexer, out *AutomationCredit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "webhook_fired":
			out.WebhookFired = int64(in.Int64())
		case "message_fired":
			out.MessageFired = int64(in.Int64())
		case "email_fired":
			out.EmailFired = int64(in.Int64())
		case "webhook_addon":
			out.WebhookAddon = int64(in.Int64())
		case "message_addon":
			out.MessageAddon = int64(in.Int64())
		case "email_addon":
			out.EmailAddon = int64(in.Int64())
		case "webhook_credits":
			out.WebhookCredits = int64(in.Int64())
		case "message_credits":
			out.MessageCredits = int64(in.Int64())
		case "email_credits":
			out.EmailCredits = int64(in.Int64())
		case "month":
			out.Month = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser27(out *jwriter.Writer, in AutomationCredit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.WebhookFired != 0 {
		const prefix string = ",\"webhook_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebhookFired))
	}
	if in.MessageFired != 0 {
		const prefix string = ",\"message_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageFired))
	}
	if in.EmailFired != 0 {
		const prefix string = ",\"email_fired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EmailFired))
	}
	if in.WebhookAddon != 0 {
		const prefix string = ",\"webhook_addon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebhookAddon))
	}
	if in.MessageAddon != 0 {
		const prefix string = ",\"message_addon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageAddon))
	}
	if in.EmailAddon != 0 {
		const prefix string = ",\"email_addon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EmailAddon))
	}
	if in.WebhookCredits != 0 {
		const prefix string = ",\"webhook_credits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebhookCredits))
	}
	if in.MessageCredits != 0 {
		const prefix string = ",\"message_credits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MessageCredits))
	}
	if in.EmailCredits != 0 {
		const prefix string = ",\"email_credits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EmailCredits))
	}
	if in.Month != 0 {
		const prefix string = ",\"month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Month))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutomationCredit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutomationCredit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutomationCredit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutomationCredit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser27(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser28(in *jlexer.Lexer, out *AttributeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "state":
			out.State = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "modified":
			out.Modified = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		case "number":
			out.Number = float64(in.Float64())
		case "boolean":
			out.Boolean = bool(in.Bool())
		case "datetime":
			out.Datetime = string(in.String())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]string, 0, 4)
					} else {
						out.List = []string{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.List = append(out.List, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "setter":
			out.Setter = string(in.String())
		case "setter_type":
			out.SetterType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser28(out *jwriter.Writer, in AttributeData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Modified != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Modified))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Number))
	}
	if in.Boolean {
		const prefix string = ",\"boolean\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Boolean))
	}
	if in.Datetime != "" {
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	if len(in.List) != 0 {
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.List {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if in.Setter != "" {
		const prefix string = ",\"setter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Setter))
	}
	if in.SetterType != "" {
		const prefix string = ",\"setter_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SetterType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttributeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttributeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttributeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttributeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser28(l, v)
}
func easyjsonAe8eb074DecodeGithubComSubizHeaderUser29(in *jlexer.Lexer, out *Alias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserId = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "alias":
			out.Alias = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe8eb074EncodeGithubComSubizHeaderUser29(out *jwriter.Writer, in Alias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alias))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Alias) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Alias) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe8eb074EncodeGithubComSubizHeaderUser29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Alias) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Alias) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe8eb074DecodeGithubComSubizHeaderUser29(l, v)
}
