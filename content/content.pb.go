// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content/content.proto

/*
Package content is a generated protocol buffer package.

It is generated from these files:
	content/content.proto

It has these top-level messages:
	SearchContentRequest
	KeyValue
	Attachment
	Content
	Contents
*/
package content

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "git.subiz.net/header/common"
import conversation "git.subiz.net/header/conversation"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchContentRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Title            *string         `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Url              *string         `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Labels           *string         `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Categories       *string         `protobuf:"bytes,10,opt,name=categories" json:"categories,omitempty"`
	Relates          *string         `protobuf:"bytes,11,opt,name=relates" json:"relates,omitempty"`
	Fieldkeys        *string         `protobuf:"bytes,12,opt,name=fieldkeys" json:"fieldkeys,omitempty"`
	Query            *string         `protobuf:"bytes,13,opt,name=query" json:"query,omitempty"`
	Limit            *int32          `protobuf:"varint,14,opt,name=limit" json:"limit,omitempty"`
	Anchor           *string         `protobuf:"bytes,15,opt,name=anchor" json:"anchor,omitempty"`
	Stringify        *string         `protobuf:"bytes,16,opt,name=stringify" json:"stringify,omitempty"`
	Fieldvalues      *string         `protobuf:"bytes,17,opt,name=fieldvalues" json:"fieldvalues,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SearchContentRequest) Reset()                    { *m = SearchContentRequest{} }
func (m *SearchContentRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchContentRequest) ProtoMessage()               {}
func (*SearchContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchContentRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SearchContentRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *SearchContentRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SearchContentRequest) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *SearchContentRequest) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *SearchContentRequest) GetLabels() string {
	if m != nil && m.Labels != nil {
		return *m.Labels
	}
	return ""
}

func (m *SearchContentRequest) GetCategories() string {
	if m != nil && m.Categories != nil {
		return *m.Categories
	}
	return ""
}

func (m *SearchContentRequest) GetRelates() string {
	if m != nil && m.Relates != nil {
		return *m.Relates
	}
	return ""
}

func (m *SearchContentRequest) GetFieldkeys() string {
	if m != nil && m.Fieldkeys != nil {
		return *m.Fieldkeys
	}
	return ""
}

func (m *SearchContentRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *SearchContentRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *SearchContentRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *SearchContentRequest) GetStringify() string {
	if m != nil && m.Stringify != nil {
		return *m.Stringify
	}
	return ""
}

func (m *SearchContentRequest) GetFieldvalues() string {
	if m != nil && m.Fieldvalues != nil {
		return *m.Fieldvalues
	}
	return ""
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Attachment struct {
	Url              *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	DefaultImage     *bool   `protobuf:"varint,3,opt,name=default_image,json=defaultImage" json:"default_image,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attachment) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *Attachment) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Attachment) GetDefaultImage() bool {
	if m != nil && m.DefaultImage != nil {
		return *m.DefaultImage
	}
	return false
}

type Content struct {
	Ctx              *common.Context            `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Sbid             *string                    `protobuf:"bytes,2,opt,name=sbid" json:"sbid,omitempty"`
	Id               *string                    `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string                    `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Description      *string                    `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Title            *string                    `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Url              *string                    `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Labels           []string                   `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty"`
	Availability     *string                    `protobuf:"bytes,9,opt,name=availability" json:"availability,omitempty"`
	Price            *float32                   `protobuf:"fixed32,10,opt,name=price" json:"price,omitempty"`
	Currency         *string                    `protobuf:"bytes,11,opt,name=currency" json:"currency,omitempty"`
	SalePrice        *float32                   `protobuf:"fixed32,12,opt,name=sale_price,json=salePrice" json:"sale_price,omitempty"`
	Fields           []*KeyValue                `protobuf:"bytes,13,rep,name=fields" json:"fields,omitempty"`
	Categories       []string                   `protobuf:"bytes,14,rep,name=categories" json:"categories,omitempty"`
	Relates          []string                   `protobuf:"bytes,15,rep,name=relates" json:"relates,omitempty"`
	Attachments      []*conversation.Attachment `protobuf:"bytes,16,rep,name=attachments" json:"attachments,omitempty"`
	Created          *int64                     `protobuf:"varint,17,opt,name=created" json:"created,omitempty"`
	Updated          *int64                     `protobuf:"varint,18,opt,name=updated" json:"updated,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Content) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Content) GetSbid() string {
	if m != nil && m.Sbid != nil {
		return *m.Sbid
	}
	return ""
}

func (m *Content) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Content) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Content) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Content) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Content) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *Content) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Content) GetAvailability() string {
	if m != nil && m.Availability != nil {
		return *m.Availability
	}
	return ""
}

func (m *Content) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Content) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Content) GetSalePrice() float32 {
	if m != nil && m.SalePrice != nil {
		return *m.SalePrice
	}
	return 0
}

func (m *Content) GetFields() []*KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Content) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Content) GetRelates() []string {
	if m != nil {
		return m.Relates
	}
	return nil
}

func (m *Content) GetAttachments() []*conversation.Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Content) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Content) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Contents struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Contents         []*Content      `protobuf:"bytes,2,rep,name=contents" json:"contents,omitempty"`
	Anchor           *string         `protobuf:"bytes,3,opt,name=anchor" json:"anchor,omitempty"`
	Total            *int64          `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Contents) Reset()                    { *m = Contents{} }
func (m *Contents) String() string            { return proto.CompactTextString(m) }
func (*Contents) ProtoMessage()               {}
func (*Contents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Contents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Contents) GetContents() []*Content {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *Contents) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *Contents) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchContentRequest)(nil), "content.SearchContentRequest")
	proto.RegisterType((*KeyValue)(nil), "content.KeyValue")
	proto.RegisterType((*Attachment)(nil), "content.Attachment")
	proto.RegisterType((*Content)(nil), "content.Content")
	proto.RegisterType((*Contents)(nil), "content.Contents")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceContentManager service

type ServiceContentManagerClient interface {
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	UpsertContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error)
	DeleteContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	DeleteAllContents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	GetContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Content, error)
	SearchContents(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*Contents, error)
}

type serviceContentManagerClient struct {
	cc *grpc.ClientConn
}

func NewServiceContentManagerClient(cc *grpc.ClientConn) ServiceContentManagerClient {
	return &serviceContentManagerClient{cc}
}

func (c *serviceContentManagerClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) UpsertContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/UpsertContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) DeleteContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/DeleteContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) DeleteAllContents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/DeleteAllContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) GetContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/GetContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) SearchContents(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := grpc.Invoke(ctx, "/content.ServiceContentManager/SearchContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceContentManager service

type ServiceContentManagerServer interface {
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	UpsertContent(context.Context, *Content) (*Content, error)
	DeleteContent(context.Context, *common.Id) (*common.Empty, error)
	DeleteAllContents(context.Context, *common.Id) (*common.Empty, error)
	GetContent(context.Context, *common.Id) (*Content, error)
	SearchContents(context.Context, *SearchContentRequest) (*Contents, error)
}

func RegisterServiceContentManagerServer(s *grpc.Server, srv ServiceContentManagerServer) {
	s.RegisterService(&_ServiceContentManager_serviceDesc, srv)
}

func _ServiceContentManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_UpsertContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).UpsertContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/UpsertContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).UpsertContent(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/DeleteContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).DeleteContent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_DeleteAllContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).DeleteAllContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/DeleteAllContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).DeleteAllContents(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).GetContent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_SearchContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).SearchContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ServiceContentManager/SearchContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).SearchContents(ctx, req.(*SearchContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceContentManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content.ServiceContentManager",
	HandlerType: (*ServiceContentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceContentManager_Ping_Handler,
		},
		{
			MethodName: "UpsertContent",
			Handler:    _ServiceContentManager_UpsertContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _ServiceContentManager_DeleteContent_Handler,
		},
		{
			MethodName: "DeleteAllContents",
			Handler:    _ServiceContentManager_DeleteAllContents_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _ServiceContentManager_GetContent_Handler,
		},
		{
			MethodName: "SearchContents",
			Handler:    _ServiceContentManager_SearchContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/content.proto",
}

func init() { proto.RegisterFile("content/content.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x85, 0x2d, 0xc7, 0x1f, 0xe3, 0x8f, 0xd8, 0xdc, 0x64, 0x41, 0x18, 0x9b, 0x85, 0xd7, 0x7b,
	0x71, 0x82, 0xc2, 0x01, 0xdc, 0x9e, 0x7a, 0x4b, 0x3f, 0x50, 0x04, 0x45, 0x81, 0x40, 0x41, 0xdb,
	0x63, 0x40, 0x4b, 0x13, 0x9b, 0x08, 0x2d, 0x39, 0x24, 0x65, 0x44, 0x3d, 0xf7, 0xd2, 0xdf, 0xd0,
	0x9f, 0xd3, 0x3f, 0x56, 0x90, 0xa2, 0x64, 0x3b, 0x76, 0x8a, 0x9c, 0xc4, 0xf7, 0x66, 0x86, 0xf3,
	0x34, 0x7c, 0x24, 0x1c, 0x07, 0x71, 0xa4, 0x31, 0xd2, 0xe7, 0xee, 0x3b, 0x5e, 0xca, 0x58, 0xc7,
	0xa4, 0xe6, 0x60, 0x7f, 0x34, 0xe3, 0x7a, 0xac, 0x92, 0x29, 0xff, 0x36, 0x8e, 0x50, 0x9f, 0xcf,
	0x91, 0x85, 0x28, 0xcf, 0x83, 0x78, 0xb1, 0x88, 0x23, 0xf7, 0xc9, 0x4a, 0xfa, 0xaf, 0x9e, 0xc8,
	0x8c, 0x56, 0x28, 0x15, 0xd3, 0xdc, 0xe6, 0xaf, 0x41, 0x56, 0x35, 0xfc, 0xee, 0xc1, 0xd1, 0x35,
	0x32, 0x19, 0xcc, 0xdf, 0x66, 0x1d, 0x7d, 0xbc, 0x4f, 0x50, 0x69, 0xf2, 0x1f, 0x78, 0x81, 0x7e,
	0xa0, 0xa5, 0x41, 0x69, 0xd4, 0x9c, 0x1c, 0x8e, 0x5d, 0x2b, 0x9b, 0xf4, 0xa0, 0x7d, 0x13, 0x23,
	0x27, 0x00, 0x2c, 0x08, 0xe2, 0x24, 0xd2, 0x37, 0x3c, 0xa4, 0xe5, 0x41, 0x69, 0xd4, 0xf0, 0x1b,
	0x8e, 0xb9, 0x0c, 0x49, 0x07, 0xca, 0x3c, 0xa4, 0x9e, 0xa5, 0xcb, 0x3c, 0x24, 0x47, 0x70, 0xa0,
	0xb9, 0x16, 0x48, 0x2b, 0x96, 0xca, 0x00, 0xe9, 0x82, 0x97, 0x48, 0x41, 0x0f, 0x2c, 0x67, 0x96,
	0xe4, 0x6f, 0xa8, 0x0a, 0x36, 0x45, 0xa1, 0x68, 0xd5, 0x92, 0x0e, 0x91, 0x7f, 0x01, 0x02, 0xa6,
	0x71, 0x16, 0x4b, 0x8e, 0x8a, 0x82, 0x8d, 0x6d, 0x30, 0x84, 0x42, 0x4d, 0xa2, 0x60, 0x1a, 0x15,
	0x6d, 0xda, 0x60, 0x0e, 0xc9, 0x3f, 0xd0, 0xb8, 0xe5, 0x28, 0xc2, 0x3b, 0x4c, 0x15, 0x6d, 0x65,
	0x3a, 0x0b, 0xc2, 0xe8, 0xba, 0x4f, 0x50, 0xa6, 0xb4, 0x9d, 0xe9, 0xb2, 0xc0, 0xb0, 0x82, 0x2f,
	0xb8, 0xa6, 0x9d, 0x41, 0x69, 0x74, 0xe0, 0x67, 0xc0, 0x68, 0x63, 0x51, 0x30, 0x8f, 0x25, 0x3d,
	0xcc, 0xb4, 0x65, 0xc8, 0x74, 0x50, 0x5a, 0xf2, 0x68, 0xc6, 0x6f, 0x53, 0xda, 0xcd, 0x3a, 0x14,
	0x04, 0x19, 0x40, 0xd3, 0xb6, 0x5b, 0x31, 0x91, 0xa0, 0xa2, 0x3d, 0x1b, 0xdf, 0xa4, 0x86, 0x13,
	0xa8, 0x7f, 0xc4, 0xf4, 0x8b, 0x01, 0x66, 0x22, 0x77, 0x98, 0xba, 0xc1, 0x99, 0xa5, 0xd1, 0x62,
	0xf3, 0xf2, 0xc9, 0x59, 0x30, 0xfc, 0x0a, 0x70, 0xa1, 0x35, 0x0b, 0xe6, 0x0b, 0x8c, 0x74, 0x3e,
	0xc7, 0xd2, 0x7a, 0x8e, 0x04, 0x2a, 0x3a, 0x5d, 0xa2, 0x3b, 0x18, 0xbb, 0x26, 0xff, 0x43, 0x3b,
	0xc4, 0x5b, 0x96, 0x08, 0x7d, 0xc3, 0x17, 0x6c, 0x86, 0xb6, 0x4b, 0xdd, 0x6f, 0x39, 0xf2, 0xd2,
	0x70, 0xc3, 0x9f, 0x15, 0xa8, 0x39, 0x37, 0x3c, 0xc7, 0x06, 0x04, 0x2a, 0x6a, 0x5a, 0x18, 0xc0,
	0xae, 0x77, 0xce, 0x7e, 0xdb, 0x2a, 0x95, 0xc7, 0x56, 0x19, 0x40, 0x33, 0x44, 0x15, 0x48, 0xbe,
	0x34, 0xd6, 0x74, 0x66, 0xd8, 0xa4, 0xd6, 0xe6, 0xa9, 0xee, 0x31, 0x4f, 0x6d, 0x9f, 0x79, 0xea,
	0x03, 0x6f, 0xc3, 0x3c, 0x43, 0x68, 0xb1, 0x15, 0xe3, 0x82, 0x4d, 0xb9, 0xe0, 0x3a, 0xa5, 0x0d,
	0x5b, 0xb2, 0xc5, 0x99, 0x1e, 0x4b, 0xc9, 0x03, 0xb4, 0xde, 0x2a, 0xfb, 0x19, 0x20, 0x7d, 0xa8,
	0x07, 0x89, 0x94, 0x18, 0x05, 0xa9, 0xf3, 0x55, 0x81, 0xcd, 0x6f, 0x29, 0x26, 0xf0, 0x26, 0x2b,
	0x6b, 0xd9, 0xb2, 0x86, 0x61, 0xae, 0x6c, 0xe9, 0x29, 0x54, 0xed, 0x21, 0x2b, 0xda, 0x1e, 0x78,
	0xa3, 0xe6, 0xa4, 0x37, 0xce, 0x6f, 0x79, 0x7e, 0xd8, 0xbe, 0x4b, 0x78, 0x64, 0xee, 0x8e, 0xd5,
	0xfe, 0x84, 0xb9, 0x0f, 0x6d, 0xb0, 0x30, 0xf7, 0x6b, 0x68, 0xb2, 0xc2, 0x06, 0x8a, 0x76, 0x6d,
	0x27, 0x3a, 0xde, 0xba, 0xeb, 0x6b, 0x9f, 0xf8, 0x9b, 0xc9, 0x66, 0xd7, 0x40, 0x22, 0xd3, 0x18,
	0x5a, 0x53, 0x7a, 0x7e, 0x0e, 0x4d, 0x24, 0x59, 0x86, 0x36, 0x42, 0xb2, 0x88, 0x83, 0xc3, 0x1f,
	0x25, 0xa8, 0x3b, 0x77, 0xa8, 0xe7, 0xd8, 0xe3, 0x05, 0xd4, 0xdd, 0x5f, 0x2b, 0x5a, 0xb6, 0xe2,
	0xba, 0xc5, 0x18, 0xf2, 0x37, 0xa7, 0xc8, 0xd8, 0xb8, 0x60, 0xde, 0xd6, 0x05, 0x33, 0xe7, 0x1f,
	0x6b, 0x26, 0xac, 0x77, 0x3c, 0x3f, 0x03, 0x93, 0x5f, 0x65, 0x38, 0xbe, 0x46, 0xb9, 0xe2, 0x01,
	0xba, 0xad, 0x3e, 0xb1, 0x88, 0xcd, 0x50, 0x92, 0x53, 0xa8, 0x5c, 0xf1, 0x68, 0x46, 0xfe, 0xca,
	0x35, 0x19, 0xe4, 0xde, 0xb6, 0x7e, 0xab, 0x20, 0xe3, 0x68, 0x46, 0x5e, 0x42, 0xfb, 0xf3, 0x52,
	0xa1, 0xd4, 0xb9, 0xe7, 0x77, 0xf4, 0xf5, 0x77, 0x18, 0x72, 0x06, 0xed, 0x77, 0x28, 0x50, 0xe7,
	0x7d, 0x09, 0xe4, 0x7b, 0x5e, 0x86, 0xfd, 0x76, 0xbe, 0x7e, 0xbf, 0x58, 0xea, 0x94, 0x8c, 0xa1,
	0x97, 0xe5, 0x5e, 0x08, 0x51, 0x4c, 0xee, 0x0f, 0xf9, 0x67, 0x00, 0x1f, 0x50, 0xef, 0xdb, 0x78,
	0x57, 0xc7, 0x1b, 0xe8, 0x6c, 0x3d, 0xdf, 0x8a, 0x9c, 0x14, 0x39, 0xfb, 0xde, 0xf5, 0x7e, 0xef,
	0xf1, 0x16, 0xea, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x0e, 0xee, 0x2f, 0x84, 0x06, 0x00,
	0x00,
}
