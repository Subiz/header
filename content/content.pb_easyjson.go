// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package content

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
	conversation "github.com/subiz/header/conversation"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2280e65dDecodeGithubComSubizHeaderContent(in *jlexer.Lexer, out *serviceContentManagerClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent(out *jwriter.Writer, in serviceContentManagerClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v serviceContentManagerClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v serviceContentManagerClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *serviceContentManagerClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *serviceContentManagerClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent1(in *jlexer.Lexer, out *SearchContentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				if out.Labels == nil {
					out.Labels = new(string)
				}
				*out.Labels = string(in.String())
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				if out.Categories == nil {
					out.Categories = new(string)
				}
				*out.Categories = string(in.String())
			}
		case "relates":
			if in.IsNull() {
				in.Skip()
				out.Relates = nil
			} else {
				if out.Relates == nil {
					out.Relates = new(string)
				}
				*out.Relates = string(in.String())
			}
		case "fieldkeys":
			if in.IsNull() {
				in.Skip()
				out.Fieldkeys = nil
			} else {
				if out.Fieldkeys == nil {
					out.Fieldkeys = new(string)
				}
				*out.Fieldkeys = string(in.String())
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "stringify":
			if in.IsNull() {
				in.Skip()
				out.Stringify = nil
			} else {
				if out.Stringify == nil {
					out.Stringify = new(string)
				}
				*out.Stringify = string(in.String())
			}
		case "fieldvalues":
			if in.IsNull() {
				in.Skip()
				out.Fieldvalues = nil
			} else {
				if out.Fieldvalues == nil {
					out.Fieldvalues = new(string)
				}
				*out.Fieldvalues = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent1(out *jwriter.Writer, in SearchContentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.Labels != nil {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Labels))
	}
	if in.Categories != nil {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Categories))
	}
	if in.Relates != nil {
		const prefix string = ",\"relates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Relates))
	}
	if in.Fieldkeys != nil {
		const prefix string = ",\"fieldkeys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fieldkeys))
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Stringify != nil {
		const prefix string = ",\"stringify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Stringify))
	}
	if in.Fieldvalues != nil {
		const prefix string = ",\"fieldvalues\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fieldvalues))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchContentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchContentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchContentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchContentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent1(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent2(in *jlexer.Lexer, out *LookupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent2(out *jwriter.Writer, in LookupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LookupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LookupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LookupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LookupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent2(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent3(in *jlexer.Lexer, out *LinkRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]string, 0, 4)
					} else {
						out.Ids = []string{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Ids = append(out.Ids, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent3(out *jwriter.Writer, in LinkRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Ids) != 0 {
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Ids {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent3(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent4(in *jlexer.Lexer, out *KeyValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent4(out *jwriter.Writer, in KeyValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent4(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent5(in *jlexer.Lexer, out *ContentsByUrlTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]string, 0, 4)
					} else {
						out.Ids = []string{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Ids = append(out.Ids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent5(out *jwriter.Writer, in ContentsByUrlTable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Ids) != 0 {
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Ids {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentsByUrlTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentsByUrlTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentsByUrlTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentsByUrlTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent5(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent6(in *jlexer.Lexer, out *Contents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				in.Delim('[')
				if out.Contents == nil {
					if !in.IsDelim(']') {
						out.Contents = make([]*Content, 0, 8)
					} else {
						out.Contents = []*Content{}
					}
				} else {
					out.Contents = (out.Contents)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Content
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Content)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Contents = append(out.Contents, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(int64)
				}
				*out.Total = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent6(out *jwriter.Writer, in Contents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Contents {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent6(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent7(in *jlexer.Lexer, out *ContentUrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "par":
			if in.IsNull() {
				in.Skip()
				out.Par = nil
			} else {
				if out.Par == nil {
					out.Par = new(int32)
				}
				*out.Par = int32(in.Int32())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "err":
			if in.IsNull() {
				in.Skip()
				out.Err = nil
			} else {
				if out.Err == nil {
					out.Err = new(string)
				}
				*out.Err = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent7(out *jwriter.Writer, in ContentUrl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Par != nil {
		const prefix string = ",\"par\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Par))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.Err != nil {
		const prefix string = ",\"err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentUrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentUrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentUrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentUrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent7(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderContent8(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Labels = append(out.Labels, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(string)
				}
				*out.Availability = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "sale_price":
			if in.IsNull() {
				in.Skip()
				out.SalePrice = nil
			} else {
				if out.SalePrice == nil {
					out.SalePrice = new(float32)
				}
				*out.SalePrice = float32(in.Float32())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*KeyValue, 0, 8)
					} else {
						out.Fields = []*KeyValue{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *KeyValue
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(KeyValue)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Categories = append(out.Categories, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "relates":
			if in.IsNull() {
				in.Skip()
				out.Relates = nil
			} else {
				in.Delim('[')
				if out.Relates == nil {
					if !in.IsDelim(']') {
						out.Relates = make([]string, 0, 4)
					} else {
						out.Relates = []string{}
					}
				} else {
					out.Relates = (out.Relates)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Relates = append(out.Relates, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*conversation.Attachment, 0, 8)
					} else {
						out.Attachments = []*conversation.Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *conversation.Attachment
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(conversation.Attachment)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation(in, &*v14)
					}
					out.Attachments = append(out.Attachments, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "attachment_urls":
			if in.IsNull() {
				in.Skip()
				out.AttachmentUrls = nil
			} else {
				in.Delim('[')
				if out.AttachmentUrls == nil {
					if !in.IsDelim(']') {
						out.AttachmentUrls = make([]string, 0, 4)
					} else {
						out.AttachmentUrls = []string{}
					}
				} else {
					out.AttachmentUrls = (out.AttachmentUrls)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.AttachmentUrls = append(out.AttachmentUrls, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "related_ids":
			if in.IsNull() {
				in.Skip()
				out.RelatedIds = nil
			} else {
				in.Delim('[')
				if out.RelatedIds == nil {
					if !in.IsDelim(']') {
						out.RelatedIds = make([]string, 0, 4)
					} else {
						out.RelatedIds = []string{}
					}
				} else {
					out.RelatedIds = (out.RelatedIds)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.RelatedIds = append(out.RelatedIds, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderContent8(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Labels {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Availability))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Currency))
	}
	if in.SalePrice != nil {
		const prefix string = ",\"sale_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.SalePrice))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Fields {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					(*v20).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Categories {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.Relates) != 0 {
		const prefix string = ",\"relates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Relates {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Attachments {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation(out, *v26)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if len(in.AttachmentUrls) != 0 {
		const prefix string = ",\"attachment_urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.AttachmentUrls {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	if len(in.RelatedIds) != 0 {
		const prefix string = ",\"related_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.RelatedIds {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Content) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2280e65dEncodeGithubComSubizHeaderContent8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Content) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2280e65dEncodeGithubComSubizHeaderContent8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Content) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2280e65dDecodeGithubComSubizHeaderContent8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Content) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2280e65dDecodeGithubComSubizHeaderContent8(l, v)
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation(in *jlexer.Lexer, out *conversation.Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "mimetype":
			if in.IsNull() {
				in.Skip()
				out.Mimetype = nil
			} else {
				if out.Mimetype == nil {
					out.Mimetype = new(string)
				}
				*out.Mimetype = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailUrl = nil
			} else {
				if out.ThumbnailUrl == nil {
					out.ThumbnailUrl = new(string)
				}
				*out.ThumbnailUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "length":
			if in.IsNull() {
				in.Skip()
				out.Length = nil
			} else {
				if out.Length == nil {
					out.Length = new(int32)
				}
				*out.Length = int32(in.Int32())
			}
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				if out.Size == nil {
					out.Size = new(int32)
				}
				*out.Size = int32(in.Int32())
			}
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]*conversation.GenericElementTemplate, 0, 8)
					} else {
						out.Elements = []*conversation.GenericElementTemplate{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *conversation.GenericElementTemplate
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(conversation.GenericElementTemplate)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation1(in, &*v31)
					}
					out.Elements = append(out.Elements, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(string)
				}
				*out.Color = string(in.String())
			}
		case "pretext":
			if in.IsNull() {
				in.Skip()
				out.Pretext = nil
			} else {
				if out.Pretext == nil {
					out.Pretext = new(string)
				}
				*out.Pretext = string(in.String())
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(conversation.Button)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in, &*v32)
					}
					out.Buttons = append(out.Buttons, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ask_info":
			if in.IsNull() {
				in.Skip()
				out.AskInfo = nil
			} else {
				if out.AskInfo == nil {
					out.AskInfo = new(conversation.AskInfomation)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation3(in, &*out.AskInfo)
			}
		case "ask_info_answer":
			if in.IsNull() {
				in.Skip()
				out.AskInfoAnswer = nil
			} else {
				if out.AskInfoAnswer == nil {
					out.AskInfoAnswer = new(conversation.AskInfomationAnswer)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation4(in, &*out.AskInfoAnswer)
			}
		case "form":
			if in.IsNull() {
				in.Skip()
				out.Form = nil
			} else {
				if out.Form == nil {
					out.Form = new(conversation.Form)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation5(in, &*out.Form)
			}
		case "form_submit":
			if in.IsNull() {
				in.Skip()
				out.FormSubmit = nil
			} else {
				if out.FormSubmit == nil {
					out.FormSubmit = new(conversation.FormSubmit)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation6(in, &*out.FormSubmit)
			}
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				in.Delim('[')
				if out.Contents == nil {
					if !in.IsDelim(']') {
						out.Contents = make([]*conversation.ContentTemplate, 0, 8)
					} else {
						out.Contents = []*conversation.ContentTemplate{}
					}
				} else {
					out.Contents = (out.Contents)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *conversation.ContentTemplate
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(conversation.ContentTemplate)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation7(in, &*v33)
					}
					out.Contents = append(out.Contents, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quick_replies":
			if in.IsNull() {
				in.Skip()
				out.QuickReplies = nil
			} else {
				in.Delim('[')
				if out.QuickReplies == nil {
					if !in.IsDelim(']') {
						out.QuickReplies = make([]*conversation.QuickReply, 0, 8)
					} else {
						out.QuickReplies = []*conversation.QuickReply{}
					}
				} else {
					out.QuickReplies = (out.QuickReplies)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *conversation.QuickReply
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(conversation.QuickReply)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation8(in, &*v34)
					}
					out.QuickReplies = append(out.QuickReplies, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation(out *jwriter.Writer, in conversation.Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Mimetype != nil {
		const prefix string = ",\"mimetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mimetype))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.ThumbnailUrl != nil {
		const prefix string = ",\"thumbnail_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ThumbnailUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Length != nil {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Length))
	}
	if in.Size != nil {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Size))
	}
	if len(in.Elements) != 0 {
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Elements {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation1(out, *v36)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Color != nil {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Color))
	}
	if in.Pretext != nil {
		const prefix string = ",\"pretext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Pretext))
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.Buttons {
				if v37 > 0 {
					out.RawByte(',')
				}
				if v38 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out, *v38)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AskInfo != nil {
		const prefix string = ",\"ask_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation3(out, *in.AskInfo)
	}
	if in.AskInfoAnswer != nil {
		const prefix string = ",\"ask_info_answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation4(out, *in.AskInfoAnswer)
	}
	if in.Form != nil {
		const prefix string = ",\"form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation5(out, *in.Form)
	}
	if in.FormSubmit != nil {
		const prefix string = ",\"form_submit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation6(out, *in.FormSubmit)
	}
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.Contents {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation7(out, *v40)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.QuickReplies) != 0 {
		const prefix string = ",\"quick_replies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.QuickReplies {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation8(out, *v42)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation8(in *jlexer.Lexer, out *conversation.QuickReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content_type":
			if in.IsNull() {
				in.Skip()
				out.ContentType = nil
			} else {
				if out.ContentType == nil {
					out.ContentType = new(string)
				}
				*out.ContentType = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation8(out *jwriter.Writer, in conversation.QuickReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContentType != nil {
		const prefix string = ",\"content_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentType))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation7(in *jlexer.Lexer, out *conversation.ContentTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Labels = append(out.Labels, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(string)
				}
				*out.Availability = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "sale_price":
			if in.IsNull() {
				in.Skip()
				out.SalePrice = nil
			} else {
				if out.SalePrice == nil {
					out.SalePrice = new(float32)
				}
				*out.SalePrice = float32(in.Float32())
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.Categories = append(out.Categories, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachment_urls":
			if in.IsNull() {
				in.Skip()
				out.AttachmentUrls = nil
			} else {
				in.Delim('[')
				if out.AttachmentUrls == nil {
					if !in.IsDelim(']') {
						out.AttachmentUrls = make([]string, 0, 4)
					} else {
						out.AttachmentUrls = []string{}
					}
				} else {
					out.AttachmentUrls = (out.AttachmentUrls)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.AttachmentUrls = append(out.AttachmentUrls, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "related_ids":
			if in.IsNull() {
				in.Skip()
				out.RelatedIds = nil
			} else {
				in.Delim('[')
				if out.RelatedIds == nil {
					if !in.IsDelim(']') {
						out.RelatedIds = make([]string, 0, 4)
					} else {
						out.RelatedIds = []string{}
					}
				} else {
					out.RelatedIds = (out.RelatedIds)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.RelatedIds = append(out.RelatedIds, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(conversation.Button)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in, &*out.DefaultAction)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v47 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(conversation.Button)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in, &*v47)
					}
					out.Buttons = append(out.Buttons, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation7(out *jwriter.Writer, in conversation.ContentTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Labels {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Availability))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Currency))
	}
	if in.SalePrice != nil {
		const prefix string = ",\"sale_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.SalePrice))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Categories {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if len(in.AttachmentUrls) != 0 {
		const prefix string = ",\"attachment_urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.AttachmentUrls {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if len(in.RelatedIds) != 0 {
		const prefix string = ",\"related_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.RelatedIds {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out, *in.DefaultAction)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Buttons {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out, *v57)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation6(in *jlexer.Lexer, out *conversation.FormSubmit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "form_message_id":
			if in.IsNull() {
				in.Skip()
				out.FormMessageId = nil
			} else {
				if out.FormMessageId == nil {
					out.FormMessageId = new(string)
				}
				*out.FormMessageId = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*conversation.FormField, 0, 8)
					} else {
						out.Fields = []*conversation.FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *conversation.FormField
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(conversation.FormField)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation9(in, &*v58)
					}
					out.Fields = append(out.Fields, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation6(out *jwriter.Writer, in conversation.FormSubmit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FormMessageId != nil {
		const prefix string = ",\"form_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FormMessageId))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Fields {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation9(out, *v60)
				}
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation9(in *jlexer.Lexer, out *conversation.FormField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Items = append(out.Items, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation9(out *jwriter.Writer, in conversation.FormField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Items {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation5(in *jlexer.Lexer, out *conversation.Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*conversation.FormField, 0, 8)
					} else {
						out.Fields = []*conversation.FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *conversation.FormField
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(conversation.FormField)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation9(in, &*v64)
					}
					out.Fields = append(out.Fields, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "submit_url":
			if in.IsNull() {
				in.Skip()
				out.SubmitUrl = nil
			} else {
				if out.SubmitUrl == nil {
					out.SubmitUrl = new(string)
				}
				*out.SubmitUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation5(out *jwriter.Writer, in conversation.Form) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.Fields {
				if v65 > 0 {
					out.RawByte(',')
				}
				if v66 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation9(out, *v66)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SubmitUrl != nil {
		const prefix string = ",\"submit_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubmitUrl))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation4(in *jlexer.Lexer, out *conversation.AskInfomationAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation4(out *jwriter.Writer, in conversation.AskInfomationAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation3(in *jlexer.Lexer, out *conversation.AskInfomation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			if in.IsNull() {
				in.Skip()
				out.Question = nil
			} else {
				if out.Question == nil {
					out.Question = new(string)
				}
				*out.Question = string(in.String())
			}
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation3(out *jwriter.Writer, in conversation.AskInfomation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Question != nil {
		const prefix string = ",\"question\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Question))
	}
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in *jlexer.Lexer, out *conversation.Button) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "content_id":
			if in.IsNull() {
				in.Skip()
				out.ContentId = nil
			} else {
				if out.ContentId == nil {
					out.ContentId = new(string)
				}
				*out.ContentId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out *jwriter.Writer, in conversation.Button) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.ContentId != nil {
		const prefix string = ",\"content_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PhoneNumber))
	}
	out.RawByte('}')
}
func easyjson2280e65dDecodeGithubComSubizHeaderConversation1(in *jlexer.Lexer, out *conversation.GenericElementTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "subtitle":
			if in.IsNull() {
				in.Skip()
				out.Subtitle = nil
			} else {
				if out.Subtitle == nil {
					out.Subtitle = new(string)
				}
				*out.Subtitle = string(in.String())
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(conversation.Button)
				}
				easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in, &*out.DefaultAction)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v67 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v67 = nil
					} else {
						if v67 == nil {
							v67 = new(conversation.Button)
						}
						easyjson2280e65dDecodeGithubComSubizHeaderConversation2(in, &*v67)
					}
					out.Buttons = append(out.Buttons, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2280e65dEncodeGithubComSubizHeaderConversation1(out *jwriter.Writer, in conversation.GenericElementTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Subtitle != nil {
		const prefix string = ",\"subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Subtitle))
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out, *in.DefaultAction)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Buttons {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					easyjson2280e65dEncodeGithubComSubizHeaderConversation2(out, *v69)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
