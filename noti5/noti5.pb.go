// Code generated by protoc-gen-go. DO NOT EDIT.
// source: noti5/noti5.proto

/*
Package noti5 is a generated protocol buffer package.

It is generated from these files:
	noti5/noti5.proto

It has these top-level messages:
	Setting
*/
package noti5

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SettingType int32

const (
	SettingType_NewMessage      SettingType = 0
	SettingType_NewConversation SettingType = 1
	SettingType_Nothing         SettingType = 2
)

var SettingType_name = map[int32]string{
	0: "NewMessage",
	1: "NewConversation",
	2: "Nothing",
}
var SettingType_value = map[string]int32{
	"NewMessage":      0,
	"NewConversation": 1,
	"Nothing":         2,
}

func (x SettingType) Enum() *SettingType {
	p := new(SettingType)
	*p = x
	return p
}
func (x SettingType) String() string {
	return proto.EnumName(SettingType_name, int32(x))
}
func (x *SettingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettingType_value, data, "SettingType")
	if err != nil {
		return err
	}
	*x = SettingType(value)
	return nil
}
func (SettingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Setting struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Web              *SettingType    `protobuf:"varint,4,opt,name=web,enum=noti5.SettingType" json:"web,omitempty"`
	Mobile           *SettingType    `protobuf:"varint,5,opt,name=mobile,enum=noti5.SettingType" json:"mobile,omitempty"`
	Email            *Setting_Email  `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Setting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Setting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Setting) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *Setting) GetWeb() SettingType {
	if m != nil && m.Web != nil {
		return *m.Web
	}
	return SettingType_NewMessage
}

func (m *Setting) GetMobile() SettingType {
	if m != nil && m.Mobile != nil {
		return *m.Mobile
	}
	return SettingType_NewMessage
}

func (m *Setting) GetEmail() *Setting_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

type Setting_Email struct {
	Email            *SettingType `protobuf:"varint,1,opt,name=email,enum=noti5.SettingType" json:"email,omitempty"`
	After            *int64       `protobuf:"varint,2,opt,name=after" json:"after,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Setting_Email) Reset()                    { *m = Setting_Email{} }
func (m *Setting_Email) String() string            { return proto.CompactTextString(m) }
func (*Setting_Email) ProtoMessage()               {}
func (*Setting_Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Setting_Email) GetEmail() SettingType {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return SettingType_NewMessage
}

func (m *Setting_Email) GetAfter() int64 {
	if m != nil && m.After != nil {
		return *m.After
	}
	return 0
}

func init() {
	proto.RegisterType((*Setting)(nil), "noti5.Setting")
	proto.RegisterType((*Setting_Email)(nil), "noti5.Setting.Email")
	proto.RegisterEnum("noti5.SettingType", SettingType_name, SettingType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Noti5Serive service

type Noti5SeriveClient interface {
	ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error)
	UpdateNotificationSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*common.Empty, error)
}

type noti5SeriveClient struct {
	cc *grpc.ClientConn
}

func NewNoti5SeriveClient(cc *grpc.ClientConn) Noti5SeriveClient {
	return &noti5SeriveClient{cc}
}

func (c *noti5SeriveClient) ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := grpc.Invoke(ctx, "/noti5.Noti5Serive/ReadNotificationSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5SeriveClient) UpdateNotificationSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/noti5.Noti5Serive/UpdateNotificationSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Noti5Serive service

type Noti5SeriveServer interface {
	ReadNotificationSetting(context.Context, *common.Id) (*Setting, error)
	UpdateNotificationSetting(context.Context, *Setting) (*common.Empty, error)
}

func RegisterNoti5SeriveServer(s *grpc.Server, srv Noti5SeriveServer) {
	s.RegisterService(&_Noti5Serive_serviceDesc, srv)
}

func _Noti5Serive_ReadNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5SeriveServer).ReadNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5Serive/ReadNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5SeriveServer).ReadNotificationSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Serive_UpdateNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5SeriveServer).UpdateNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5Serive/UpdateNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5SeriveServer).UpdateNotificationSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5Serive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noti5.Noti5Serive",
	HandlerType: (*Noti5SeriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNotificationSetting",
			Handler:    _Noti5Serive_ReadNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateNotificationSetting",
			Handler:    _Noti5Serive_UpdateNotificationSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noti5/noti5.proto",
}

func init() { proto.RegisterFile("noti5/noti5.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x6b, 0xdb, 0x40,
	0x10, 0xc5, 0x2d, 0xab, 0xb2, 0xeb, 0x11, 0xb5, 0xdd, 0xad, 0xa1, 0xb2, 0xa0, 0xe0, 0x9a, 0x1e,
	0x84, 0x0f, 0x12, 0x18, 0x4a, 0x2f, 0x85, 0x1c, 0x8c, 0x09, 0x3e, 0x44, 0x07, 0x39, 0x39, 0x87,
	0x95, 0x34, 0x96, 0x97, 0x58, 0xbb, 0x42, 0x5a, 0xff, 0xcb, 0x39, 0x5f, 0x27, 0xdf, 0x31, 0x68,
	0x25, 0x41, 0x1c, 0xe2, 0x8b, 0xc4, 0x9b, 0xf7, 0x7b, 0x33, 0xb3, 0x0c, 0x7c, 0xe7, 0x42, 0xb2,
	0xbf, 0x9e, 0xfa, 0xba, 0x59, 0x2e, 0xa4, 0x20, 0x86, 0x12, 0xb6, 0x1b, 0x32, 0x19, 0xee, 0xa3,
	0x27, 0x94, 0xae, 0xc8, 0x13, 0xaf, 0xd8, 0x87, 0xec, 0xd9, 0xdb, 0x22, 0x8d, 0x31, 0xf7, 0x22,
	0x91, 0xa6, 0x82, 0xd7, 0xbf, 0x2a, 0x36, 0x7d, 0x6d, 0x43, 0x77, 0x8d, 0x52, 0x32, 0x9e, 0x90,
	0xdf, 0xa0, 0x47, 0xf2, 0x64, 0x69, 0x13, 0xcd, 0x31, 0xe7, 0x03, 0xb7, 0xe6, 0x16, 0x82, 0x4b,
	0x3c, 0xc9, 0xa0, 0xf4, 0xc8, 0x2f, 0x00, 0x1a, 0x45, 0x62, 0xcf, 0xe5, 0x23, 0x8b, 0xad, 0xf6,
	0x44, 0x73, 0x7a, 0x41, 0xaf, 0xae, 0xac, 0x62, 0x32, 0x86, 0xaf, 0x34, 0xc1, 0xca, 0xd4, 0x95,
	0xd9, 0x55, 0x7a, 0x15, 0x93, 0x3f, 0xa0, 0x1f, 0x31, 0xb4, 0xbe, 0x4c, 0x34, 0xa7, 0x3f, 0x27,
	0x6e, 0xb5, 0x7a, 0x3d, 0xf9, 0xfe, 0x9c, 0x61, 0x50, 0xda, 0x64, 0x06, 0x9d, 0x54, 0x84, 0x6c,
	0x87, 0x96, 0x71, 0x15, 0xac, 0x09, 0x32, 0x03, 0x03, 0x53, 0xca, 0x76, 0x56, 0x47, 0x2d, 0x3c,
	0xba, 0x44, 0xdd, 0x65, 0xe9, 0x05, 0x15, 0x62, 0xdf, 0x82, 0xa1, 0x34, 0x71, 0x9a, 0x90, 0x76,
	0xb5, 0x7f, 0x05, 0x90, 0x11, 0x18, 0x74, 0x23, 0x31, 0x57, 0xaf, 0xd4, 0x83, 0x4a, 0xcc, 0x6e,
	0xc0, 0x7c, 0xc7, 0x92, 0x3e, 0x80, 0x8f, 0xc7, 0x3b, 0x2c, 0x0a, 0x9a, 0xe0, 0xb0, 0x45, 0x7e,
	0xc0, 0xc0, 0xc7, 0xe3, 0x42, 0xf0, 0x03, 0xe6, 0x05, 0x95, 0x4c, 0xf0, 0xa1, 0x46, 0x4c, 0xe8,
	0xfa, 0x42, 0x6e, 0x19, 0x4f, 0x86, 0xed, 0xf9, 0x8b, 0x06, 0xa6, 0x5f, 0xce, 0x5c, 0x63, 0xce,
	0x0e, 0x48, 0xfe, 0xc1, 0xcf, 0x00, 0x69, 0x5c, 0x96, 0x36, 0x2c, 0x52, 0x91, 0xe6, 0x1e, 0xd0,
	0x9c, 0x60, 0x15, 0xdb, 0xfd, 0xcb, 0x45, 0xa7, 0x2d, 0xf2, 0x1f, 0xc6, 0x0f, 0x59, 0x4c, 0x25,
	0x7e, 0x16, 0xfd, 0x80, 0xdb, 0xdf, 0x9a, 0x56, 0xcb, 0x34, 0x93, 0xe7, 0x69, 0xeb, 0x2d, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0xa3, 0x8a, 0xb1, 0x42, 0x02, 0x00, 0x00,
}
