// Code generated by protoc-gen-go. DO NOT EDIT.
// source: noti5/noti5.proto

package noti5

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_nothing          Type = 2
	Type_new_message      Type = 0
	Type_new_conversation Type = 1
)

var Type_name = map[int32]string{
	2: "nothing",
	0: "new_message",
	1: "new_conversation",
}

var Type_value = map[string]int32{
	"nothing":          2,
	"new_message":      0,
	"new_conversation": 1,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{0}
}

type Event int32

const (
	Event_Noti5Requested     Event = 0
	Event_Noti5PushRequested Event = 1
)

var Event_name = map[int32]string{
	0: "Noti5Requested",
	1: "Noti5PushRequested",
}

var Event_value = map[string]int32{
	"Noti5Requested":     0,
	"Noti5PushRequested": 1,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{1}
}

type Token_Platform int32

const (
	Token_desktop Token_Platform = 0
	Token_mobile  Token_Platform = 1
)

var Token_Platform_name = map[int32]string{
	0: "desktop",
	1: "mobile",
}

var Token_Platform_value = map[string]int32{
	"desktop": 0,
	"mobile":  1,
}

func (x Token_Platform) Enum() *Token_Platform {
	p := new(Token_Platform)
	*p = x
	return p
}

func (x Token_Platform) String() string {
	return proto.EnumName(Token_Platform_name, int32(x))
}

func (x *Token_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Token_Platform_value, data, "Token_Platform")
	if err != nil {
		return err
	}
	*x = Token_Platform(value)
	return nil
}

func (Token_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{1, 0}
}

type Setting struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId              *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	WebType              *string         `protobuf:"bytes,4,opt,name=web_type,json=webType" json:"web_type,omitempty"`
	MobileType           *string         `protobuf:"bytes,5,opt,name=mobile_type,json=mobileType" json:"mobile_type,omitempty"`
	EmailType            *string         `protobuf:"bytes,6,opt,name=email_type,json=emailType" json:"email_type,omitempty"`
	EmailAfter           *int32          `protobuf:"varint,7,opt,name=email_after,json=emailAfter" json:"email_after,omitempty"`
	Updated              *int64          `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{0}
}

func (m *Setting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Setting.Unmarshal(m, b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return xxx_messageInfo_Setting.Size(m)
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Setting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Setting) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *Setting) GetWebType() string {
	if m != nil && m.WebType != nil {
		return *m.WebType
	}
	return ""
}

func (m *Setting) GetMobileType() string {
	if m != nil && m.MobileType != nil {
		return *m.MobileType
	}
	return ""
}

func (m *Setting) GetEmailType() string {
	if m != nil && m.EmailType != nil {
		return *m.EmailType
	}
	return ""
}

func (m *Setting) GetEmailAfter() int32 {
	if m != nil && m.EmailAfter != nil {
		return *m.EmailAfter
	}
	return 0
}

func (m *Setting) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Token struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserType             *string         `protobuf:"bytes,4,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	FcmToken             *string         `protobuf:"bytes,5,opt,name=fcm_token,json=fcmToken" json:"fcm_token,omitempty"`
	DeviceId             *string         `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Platform             *string         `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	Created              *int64          `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Topics               []string        `protobuf:"bytes,9,rep,name=topics" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{1}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Token) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *Token) GetUserType() string {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return ""
}

func (m *Token) GetFcmToken() string {
	if m != nil && m.FcmToken != nil {
		return *m.FcmToken
	}
	return ""
}

func (m *Token) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Token) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Token) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Token) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type PushNoti struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Platform             *string         `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
	Title                *string         `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Body                 *string         `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	ConversationId       *string         `protobuf:"bytes,8,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	SenderId             *string         `protobuf:"bytes,9,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderType           *string         `protobuf:"bytes,10,opt,name=sender_type,json=senderType" json:"sender_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PushNoti) Reset()         { *m = PushNoti{} }
func (m *PushNoti) String() string { return proto.CompactTextString(m) }
func (*PushNoti) ProtoMessage()    {}
func (*PushNoti) Descriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{2}
}

func (m *PushNoti) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushNoti.Unmarshal(m, b)
}
func (m *PushNoti) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushNoti.Marshal(b, m, deterministic)
}
func (m *PushNoti) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNoti.Merge(m, src)
}
func (m *PushNoti) XXX_Size() int {
	return xxx_messageInfo_PushNoti.Size(m)
}
func (m *PushNoti) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNoti.DiscardUnknown(m)
}

var xxx_messageInfo_PushNoti proto.InternalMessageInfo

func (m *PushNoti) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PushNoti) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PushNoti) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *PushNoti) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *PushNoti) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *PushNoti) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *PushNoti) GetConversationId() string {
	if m != nil && m.ConversationId != nil {
		return *m.ConversationId
	}
	return ""
}

func (m *PushNoti) GetSenderId() string {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return ""
}

func (m *PushNoti) GetSenderType() string {
	if m != nil && m.SenderType != nil {
		return *m.SenderType
	}
	return ""
}

type Message struct {
	FcmToken             *string  `protobuf:"bytes,2,opt,name=fcm_token,json=fcmToken" json:"fcm_token,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Body                 *string  `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_7981c8ff83cae940, []int{3}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFcmToken() string {
	if m != nil && m.FcmToken != nil {
		return *m.FcmToken
	}
	return ""
}

func (m *Message) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Message) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func init() {
	proto.RegisterEnum("noti5.Type", Type_name, Type_value)
	proto.RegisterEnum("noti5.Event", Event_name, Event_value)
	proto.RegisterEnum("noti5.Token_Platform", Token_Platform_name, Token_Platform_value)
	proto.RegisterType((*Setting)(nil), "noti5.Setting")
	proto.RegisterType((*Token)(nil), "noti5.Token")
	proto.RegisterType((*PushNoti)(nil), "noti5.PushNoti")
	proto.RegisterType((*Message)(nil), "noti5.Message")
}

func init() { proto.RegisterFile("noti5/noti5.proto", fileDescriptor_7981c8ff83cae940) }

var fileDescriptor_7981c8ff83cae940 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x8d, 0x01, 0x63, 0x7b, 0x48, 0x13, 0x67, 0x1b, 0x25, 0x0e, 0x51, 0x54, 0x4a, 0x0f, 0xa1,
	0x39, 0x80, 0x94, 0x2a, 0x97, 0xf6, 0x14, 0x45, 0x39, 0x70, 0x68, 0x85, 0x9c, 0xf4, 0x8c, 0x8c,
	0x77, 0x80, 0x55, 0xf0, 0xae, 0x6b, 0x2f, 0x24, 0xf4, 0xd8, 0x4f, 0xe8, 0x77, 0xf4, 0x33, 0xfa,
	0x59, 0x3d, 0x54, 0xbb, 0x6b, 0x07, 0x8a, 0xa2, 0xa8, 0x95, 0x7a, 0x01, 0xde, 0x7b, 0x3b, 0xde,
	0xf7, 0x66, 0x06, 0xc3, 0x1e, 0x17, 0x92, 0x5d, 0xf4, 0xf4, 0x67, 0x37, 0xcd, 0x84, 0x14, 0xc4,
	0xd6, 0xa0, 0xd9, 0x99, 0x30, 0xd9, 0xcd, 0xe7, 0x23, 0xf6, 0xb5, 0xcb, 0x51, 0xf6, 0xa6, 0x18,
	0x51, 0xcc, 0x7a, 0xb1, 0x48, 0x12, 0xc1, 0x8b, 0x2f, 0x53, 0xd0, 0xfe, 0x65, 0x81, 0x73, 0x83,
	0x52, 0x32, 0x3e, 0x21, 0xaf, 0xa1, 0x1a, 0xcb, 0x87, 0xc0, 0x6a, 0x59, 0x9d, 0xc6, 0xf9, 0x6e,
	0xb7, 0x38, 0x77, 0x25, 0xb8, 0xc4, 0x07, 0x19, 0x2a, 0x8d, 0x9c, 0x00, 0x44, 0x71, 0x2c, 0xe6,
	0x5c, 0x0e, 0x19, 0x0d, 0x2a, 0x2d, 0xab, 0xe3, 0x85, 0x5e, 0xc1, 0xf4, 0x29, 0x39, 0x02, 0x37,
	0x9a, 0xa0, 0x11, 0xab, 0x5a, 0x74, 0x34, 0x36, 0xd2, 0x3d, 0x8e, 0x86, 0x72, 0x99, 0x62, 0x50,
	0x33, 0xd2, 0x3d, 0x8e, 0x6e, 0x97, 0x29, 0x92, 0x57, 0xd0, 0x48, 0xc4, 0x88, 0xcd, 0xd0, 0xa8,
	0xb6, 0x56, 0xc1, 0x50, 0xfa, 0xc0, 0x09, 0x00, 0x26, 0x11, 0x9b, 0x19, 0xbd, 0x6e, 0x6e, 0xd5,
	0x4c, 0x59, 0x6f, 0xe4, 0x68, 0x2c, 0x31, 0x0b, 0x9c, 0x96, 0xd5, 0xb1, 0x43, 0x53, 0x71, 0xa9,
	0x18, 0x12, 0x80, 0x33, 0x4f, 0x69, 0x24, 0x91, 0x06, 0x6e, 0xcb, 0xea, 0x54, 0xc3, 0x12, 0xb6,
	0x7f, 0x54, 0xc0, 0xbe, 0x15, 0x77, 0xc8, 0xff, 0x43, 0xf8, 0x43, 0x70, 0xe6, 0x39, 0x66, 0xab,
	0xec, 0x75, 0x05, 0xfb, 0x94, 0x1c, 0x83, 0xa7, 0x85, 0xb5, 0xec, 0xae, 0x22, 0xb4, 0xf9, 0x63,
	0xf0, 0xc6, 0x71, 0x32, 0x94, 0xca, 0x44, 0x11, 0xdd, 0x1d, 0xc7, 0x89, 0x31, 0x75, 0x0c, 0x1e,
	0xc5, 0x05, 0x8b, 0x51, 0x3d, 0xd4, 0xe4, 0x76, 0x0d, 0xd1, 0xa7, 0xa4, 0x09, 0x6e, 0x3a, 0x8b,
	0xe4, 0x58, 0x64, 0x89, 0xce, 0xec, 0x85, 0x8f, 0x58, 0x25, 0x8e, 0x33, 0x5c, 0x4f, 0x5c, 0x40,
	0x72, 0x00, 0x75, 0x29, 0x52, 0x16, 0xe7, 0x81, 0xd7, 0xaa, 0x2a, 0x93, 0x06, 0xb5, 0xdf, 0x80,
	0x3b, 0x28, 0xab, 0x1b, 0xe0, 0x50, 0xcc, 0xef, 0xa4, 0x48, 0xfd, 0x2d, 0x02, 0x50, 0x37, 0xa3,
	0xf0, 0xad, 0xf6, 0xf7, 0x0a, 0xb8, 0x83, 0x79, 0x3e, 0xfd, 0x24, 0x24, 0xfb, 0xf7, 0x8e, 0x55,
	0x9f, 0xe9, 0x58, 0xed, 0x8f, 0x8e, 0xad, 0x47, 0xb3, 0x37, 0xa2, 0xed, 0x83, 0x2d, 0x99, 0x9c,
	0x95, 0x7b, 0x60, 0x00, 0x21, 0x50, 0x1b, 0x09, 0xba, 0x2c, 0x1a, 0xa1, 0x7f, 0x93, 0x53, 0xd8,
	0x8d, 0x05, 0x5f, 0x60, 0x96, 0x47, 0x92, 0x09, 0xae, 0xae, 0x71, 0xb5, 0xbc, 0xb3, 0x4e, 0x9b,
	0x01, 0xe5, 0xc8, 0xa9, 0x71, 0xe2, 0x99, 0xfb, 0x0c, 0xd1, 0xa7, 0x6a, 0xbb, 0x0a, 0x51, 0xcf,
	0x0f, 0xcc, 0x76, 0x1a, 0x4a, 0x4d, 0xb0, 0x3d, 0x00, 0xe7, 0x23, 0xe6, 0x79, 0x34, 0xd9, 0x18,
	0x66, 0x65, 0x63, 0x98, 0x8f, 0xc6, 0xab, 0x4f, 0x19, 0xaf, 0xad, 0x8c, 0x9f, 0xbd, 0x87, 0x9a,
	0xde, 0x8d, 0x06, 0x38, 0x5c, 0xc8, 0x29, 0xe3, 0x13, 0xbf, 0x42, 0x76, 0xa1, 0xc1, 0xf1, 0x7e,
	0x98, 0x98, 0xab, 0xfc, 0x2d, 0xb2, 0x0f, 0xbe, 0x22, 0xd6, 0xb3, 0xf8, 0xd6, 0xd9, 0x3b, 0xb0,
	0xaf, 0x17, 0xc8, 0x25, 0x21, 0xb0, 0xa3, 0xc6, 0x74, 0x11, 0xe2, 0x97, 0x39, 0xe6, 0x12, 0xa9,
	0xbf, 0x45, 0x0e, 0x80, 0x68, 0x4e, 0xcd, 0x70, 0xc5, 0x5b, 0xe7, 0xdf, 0x2c, 0xd8, 0xd6, 0xc2,
	0x0d, 0x66, 0x6a, 0xbb, 0xc8, 0x05, 0x1c, 0x86, 0x18, 0x51, 0xc5, 0x8d, 0x59, 0xac, 0x9f, 0x5d,
	0xbe, 0x25, 0xa0, 0x9c, 0x74, 0x9f, 0x36, 0x77, 0xba, 0xe6, 0xe5, 0x53, 0x6a, 0x1f, 0xe0, 0xe8,
	0xb3, 0xfe, 0x67, 0x3d, 0x55, 0xb8, 0x71, 0x78, 0xb3, 0xf8, 0xfc, 0xa7, 0x05, 0x7b, 0xda, 0x84,
	0x6e, 0x57, 0xe9, 0xe4, 0x14, 0xdc, 0x4b, 0x4a, 0x4d, 0x07, 0xb7, 0x8b, 0x0a, 0x8d, 0x9a, 0x2f,
	0x4a, 0x23, 0xd7, 0x49, 0x2a, 0x97, 0xe4, 0x0c, 0x1a, 0x21, 0x26, 0x62, 0x81, 0x7f, 0x71, 0xb6,
	0x07, 0xfe, 0xd5, 0x14, 0xe3, 0x3b, 0x2d, 0x5e, 0x3f, 0xb0, 0x5c, 0xe6, 0xcf, 0x17, 0xbc, 0x85,
	0xda, 0x40, 0x65, 0x78, 0x59, 0xd2, 0x0a, 0x15, 0x1d, 0x6c, 0x6e, 0x3f, 0x92, 0x82, 0x4f, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xde, 0xb0, 0x0a, 0x0f, 0x96, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Noti5ServiceClient is the client API for Noti5Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Noti5ServiceClient interface {
	ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error)
	UpdateNotificationSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
}

type noti5ServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoti5ServiceClient(cc *grpc.ClientConn) Noti5ServiceClient {
	return &noti5ServiceClient{cc}
}

func (c *noti5ServiceClient) ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/noti5.Noti5Service/ReadNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) UpdateNotificationSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/noti5.Noti5Service/UpdateNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Noti5ServiceServer is the server API for Noti5Service service.
type Noti5ServiceServer interface {
	ReadNotificationSetting(context.Context, *common.Id) (*Setting, error)
	UpdateNotificationSetting(context.Context, *Setting) (*Setting, error)
}

func RegisterNoti5ServiceServer(s *grpc.Server, srv Noti5ServiceServer) {
	s.RegisterService(&_Noti5Service_serviceDesc, srv)
}

func _Noti5Service_ReadNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5Service/ReadNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_UpdateNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5Service/UpdateNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noti5.Noti5Service",
	HandlerType: (*Noti5ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNotificationSetting",
			Handler:    _Noti5Service_ReadNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateNotificationSetting",
			Handler:    _Noti5Service_UpdateNotificationSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noti5/noti5.proto",
}

// Noti5TokenServiceClient is the client API for Noti5TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Noti5TokenServiceClient interface {
	AddToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error)
	RemoveToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error)
	CheckTokenExists(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type noti5TokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoti5TokenServiceClient(cc *grpc.ClientConn) Noti5TokenServiceClient {
	return &noti5TokenServiceClient{cc}
}

func (c *noti5TokenServiceClient) AddToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/noti5.Noti5TokenService/AddToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5TokenServiceClient) RemoveToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/noti5.Noti5TokenService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5TokenServiceClient) CheckTokenExists(ctx context.Context, in *Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/noti5.Noti5TokenService/CheckTokenExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5TokenServiceClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/noti5.Noti5TokenService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Noti5TokenServiceServer is the server API for Noti5TokenService service.
type Noti5TokenServiceServer interface {
	AddToken(context.Context, *Token) (*common.Empty, error)
	RemoveToken(context.Context, *Token) (*common.Empty, error)
	CheckTokenExists(context.Context, *Token) (*common.Empty, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterNoti5TokenServiceServer(s *grpc.Server, srv Noti5TokenServiceServer) {
	s.RegisterService(&_Noti5TokenService_serviceDesc, srv)
}

func _Noti5TokenService_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5TokenServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5TokenService/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5TokenServiceServer).AddToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5TokenService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5TokenServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5TokenService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5TokenServiceServer).RemoveToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5TokenService_CheckTokenExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5TokenServiceServer).CheckTokenExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5TokenService/CheckTokenExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5TokenServiceServer).CheckTokenExists(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5TokenService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5TokenServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noti5.Noti5TokenService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5TokenServiceServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noti5.Noti5TokenService",
	HandlerType: (*Noti5TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToken",
			Handler:    _Noti5TokenService_AddToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Noti5TokenService_RemoveToken_Handler,
		},
		{
			MethodName: "CheckTokenExists",
			Handler:    _Noti5TokenService_CheckTokenExists_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Noti5TokenService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noti5/noti5.proto",
}
