// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dashboard

import (
	json "encoding/json"
	account "git.subiz.net/header/account"
	common "git.subiz.net/header/common"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEafb9560DecodeGitSubizNetHeaderDashboard(in *jlexer.Lexer, out *SessionCookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "expired_at":
			out.ExpiredAt = int64(in.Int64())
		case "issued_at":
			out.IssuedAt = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "remember_me":
			out.RememberMe = bool(in.Bool())
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEafb9560EncodeGitSubizNetHeaderDashboard(out *jwriter.Writer, in SessionCookie) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RefreshToken != "" {
		const prefix string = ",\"refresh_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RefreshToken))
	}
	if in.ExpiredAt != 0 {
		const prefix string = ",\"expired_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiredAt))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"issued_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.RememberMe {
		const prefix string = ",\"remember_me\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RememberMe))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionCookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionCookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionCookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionCookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard(l, v)
}
func easyjsonEafb9560DecodeGitSubizNetHeaderDashboard1(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "name":
			out.Name = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "pk":
			out.Pk = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEafb9560EncodeGitSubizNetHeaderDashboard1(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if in.Pk != "" {
		const prefix string = ",\"pk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pk))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard1(l, v)
}
func easyjsonEafb9560DecodeGitSubizNetHeaderDashboard2(in *jlexer.Lexer, out *DashboardAgent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(account.Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(account.Agent)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "tour_guide_web_showed":
			out.TourGuideWebShowed = int64(in.Int64())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "access_token":
			out.AccessToken = string(in.String())
		case "language_url":
			out.LanguageUrl = string(in.String())
		case "tour_guide_getting_started_web_showed":
			out.TourGuideGettingStartedWebShowed = int64(in.Int64())
		case "tour_guide_channel_installing_web_showed":
			out.TourGuideChannelInstallingWebShowed = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEafb9560EncodeGitSubizNetHeaderDashboard2(out *jwriter.Writer, in DashboardAgent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Agent != nil {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Agent).MarshalEasyJSON(out)
	}
	if in.TourGuideWebShowed != 0 {
		const prefix string = ",\"tour_guide_web_showed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TourGuideWebShowed))
	}
	if in.RefreshToken != "" {
		const prefix string = ",\"refresh_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RefreshToken))
	}
	if in.AccessToken != "" {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessToken))
	}
	if in.LanguageUrl != "" {
		const prefix string = ",\"language_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguageUrl))
	}
	if in.TourGuideGettingStartedWebShowed != 0 {
		const prefix string = ",\"tour_guide_getting_started_web_showed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TourGuideGettingStartedWebShowed))
	}
	if in.TourGuideChannelInstallingWebShowed != 0 {
		const prefix string = ",\"tour_guide_channel_installing_web_showed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TourGuideChannelInstallingWebShowed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DashboardAgent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DashboardAgent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DashboardAgent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DashboardAgent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard2(l, v)
}
func easyjsonEafb9560DecodeGitSubizNetHeaderDashboard3(in *jlexer.Lexer, out *DashboardAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(account.Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEafb9560EncodeGitSubizNetHeaderDashboard3(out *jwriter.Writer, in DashboardAccount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DashboardAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DashboardAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DashboardAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DashboardAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard3(l, v)
}
func easyjsonEafb9560DecodeGitSubizNetHeaderDashboard4(in *jlexer.Lexer, out *AccessLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "ac_token":
			out.AcToken = string(in.String())
		case "rf_token":
			out.RfToken = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "location_id":
			out.LocationId = int32(in.Int32())
		case "city_name":
			out.CityName = string(in.String())
		case "country_name":
			out.CountryName = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		case "continent_code":
			out.ContinentCode = string(in.String())
		case "continent_name":
			out.ContinentName = string(in.String())
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		case "postal_code":
			out.PostalCode = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "isp":
			out.Isp = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "day":
			out.Day = int32(in.Int32())
		case "action":
			out.Action = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEafb9560EncodeGitSubizNetHeaderDashboard4(out *jwriter.Writer, in AccessLog) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.AcToken != "" {
		const prefix string = ",\"ac_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AcToken))
	}
	if in.RfToken != "" {
		const prefix string = ",\"rf_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RfToken))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.LocationId != 0 {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LocationId))
	}
	if in.CityName != "" {
		const prefix string = ",\"city_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CityName))
	}
	if in.CountryName != "" {
		const prefix string = ",\"country_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryName))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.ContinentCode != "" {
		const prefix string = ",\"continent_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentCode))
	}
	if in.ContinentName != "" {
		const prefix string = ",\"continent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentName))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Longitude))
	}
	if in.PostalCode != "" {
		const prefix string = ",\"postal_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostalCode))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Isp != "" {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Isp))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Day != 0 {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Day))
	}
	if in.Action != "" {
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Action))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEafb9560EncodeGitSubizNetHeaderDashboard4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEafb9560DecodeGitSubizNetHeaderDashboard4(l, v)
}
