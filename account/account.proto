syntax = "proto2";

package account;

import "git.subiz.net/header/auth/auth.proto";
import "git.subiz.net/header/common/common.proto";
import "git.subiz.net/header/lang/lang.proto";
import "git.subiz.net/header/payment/payment.proto";

service UseDoc {
	rpc f1(NewPassword) returns (NewPassword) {}
	rpc f2(CreateAccountRequest) returns (CreateAccountRequest) {}
}

message Agent {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3; // subiz only

	optional string fullname = 4;
	optional string email = 5;
	repeated string emails = 6;
	repeated string phones = 7;
	optional string phone = 8;
	optional bool is_owner = 10;
	optional string job_title = 11;

	enum Gender {
		unset = 0;
		male = 1;
		female = 2;
		bisexual = 3;
		asexual = 4;
	}

	optional string gender = 12; //gender
	optional string avatar_url = 13;
	optional string lang = 14;
	optional string location = 15;
	optional string timezone = 16;
	optional string encrypted_password = 17;
	optional int64 joined = 20;
	optional string invited_by = 21;

	enum AgentState {
		pending = 0; // waiting for invitation response
		active = 1;
		inactive = 2;
		deleted = 3;
	}

	optional string state = 22; //Agent state
	optional int64 password_changed = 23;
	optional int64 seen = 24;
	optional int64 modified = 25;

	optional auth.Method method = 27;
	optional Account account = 28;
	optional string country_code = 29;
	optional int32 v3_state = 30 ; // 0: not v3, 1: v3 but not convert, 2: converted v3
	optional auth.Permission perm = 31;
}

message Invitation {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string from_id = 4;
	optional string email = 5;
	optional string agent_id = 6;
	optional int64 sent = 7;
	optional int64 replied = 8;
	optional string agent_fullname = 9;
	optional string agent_job_title = 10;
	optional string token = 11;
}

message AgentGroup {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string name = 4;
	optional string logo_url = 5;

	// members is list of 10 agents in group
	repeated Agent members = 7;
	optional int64 created = 6;
	optional int64 modified = 8;
	optional int32 members_count = 9;
}

message ResetPasswordRequest {
	optional common.Context ctx = 1;
	optional string email = 2;
}

message AgentPerm {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional auth.Method method = 4;
	optional auth.Permission perm = 5;
}

message Account {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string name = 3;
	optional string logo_url = 5;
	optional string owner_id = 6;
	optional string state = 7; // accountstate
	optional int64 created = 8;
	optional int64 confirmed = 9;
	optional int64 modified = 10;
	optional string slogan = 12;

	optional string referer_id = 11;
	enum State {
		pending = 0; // waiting for email confirmation
		activated = 1;  // normal account
		locked = 2;  // subiz lock down account
		deleted = 3;
	}
	optional string city = 14;
	optional int32 zip_code = 16;
	optional string tax_id = 17;
	optional string facebook = 18;
	optional string twitter = 22;
	optional string phone = 19;
	optional string address = 20;
	optional string url = 21;
	optional string lang = 23;
	optional string referer_from = 24;
	optional string timezone = 26;
	optional payment.Limit limit = 25;
	optional string country = 27;

	optional int32 v3_state = 28; // 0: not v3, 1: v3 but not convert, 2: converted v3
	optional string date_format = 29;
	optional BusinessHours business_hours = 30;
}

message GroupMember {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string group_id = 3;
	optional string agent_id = 4;
}

message CreateAccountRequest {
	optional common.Context ctx = 1;
	optional string fullname = 2;
	optional string email = 3;
	optional string lang = 4;
	optional string password = 5;
	optional string account_name = 6;
	optional string account_url = 7;
	optional string avatar_url = 8;
	optional string timezone = 9;
	optional string phone = 10;
	optional string country_code = 11;
}

message LoginRequest {
	optional common.Context ctx = 1;
	optional string email = 2;
	optional string password = 3;
}

message Agents {
	optional common.Context ctx = 1;
	repeated Agent Agents = 2;
}

message NewPassword {
	optional common.Context ctx = 1;
	optional string token = 2;
	optional string new_password = 3;
	optional string old_password = 5;
	optional string email = 8;
}

message AgentGroups {
	optional common.Context ctx = 1;
	repeated AgentGroup Groups = 2;
}

message Token {
	optional common.Context ctx = 1;
	optional bool is_set = 2; // true
	optional string token = 3;
	optional string account_id = 4;
}

message AccountV3 {
	optional common.Context ctx = 1;
	optional Account account = 2;
	optional Agent owner = 3;
	optional payment.Subscription subscription = 4;
}

enum Event {
	AccountRequested = 1000;
	AccountSynced = 1001;
	AccountV3Synced = 1002;

	AgentGroupDeleted = 0; // id
	AgentLeftGroup = 1; // groupmember
	AgentJoinedGroup = 2; // groupmember
	AgentGroupUpserted = 4; // agentgroup
	//AgentExpired = 5; // oe only, id
	AgentUpserted = 6; // agent
	//AgentCreated = 7; // agent
	//AgentStateUpdated = 8; // could be deleted
	AgentPermissionUpdated = 9; // AgentPerm

	// out event only
	AccountUpserted = 14; // account
	AccountPlanUpdated = 16; // account
	AccountStateUpdated = 17; // AccountStateUpdateRequest
	AccountConfirmRequest = 19; // token
	HandleExpiredInvitation = 20;

	AccountConfirmRequested = 21; // confirmemail
	AccountConfirmSuccessEmailRequested = 25;
	AccountResetPasswordEmail = 33;
	AccountPasswordChangedEmailRequested = 34;
	AccountInviteEmail = 22;

	AccountDeleted = 24;
	AccountCreated = 45; // account
	AccountActivated = 46; // account
	AccountInfoUpdated = 47;

	AgentRejected = 10; // id
	AgentAccepted = 11; // id
	AgentInvited = 13; // invitation
	AgentDeleted = 15; //id
	AgentActivated = 50;
	AgentDeactivated = 51;
	AgentInfoUpdated = 59;
	AccountV3Created = 60;
	AccountPaymentV3Synced = 63;
}

message ConfirmEmail {
	optional common.Context ctx = 1;
	optional string to = 2;
	optional string account_id = 3;
	optional string owner_id = 4;
	optional string token = 5;
	optional int64 expired_in = 6;
	optional string account_name = 7;
	optional lang.L lang = 8;
	optional string owner_name = 9;
	optional string from = 10;
}

message InviteEmail {
	optional common.Context ctx = 1;
	optional string to = 2;
	optional string account_id = 3;
	optional string sender_id = 4;
	optional int64 expired_in = 5;
	optional string token = 6;
	optional lang.L lang = 8;

	optional string fullname = 9;
	optional string sender_name = 10;
	optional string account_name = 11;
	optional string account_logo_url = 12;
	optional string from = 14;
}

message ResetPasswordEmail {
	optional common.Context ctx = 1;
	optional string from = 2;
	optional string to = 3;
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	optional int64 expired_in = 4;
	optional string token = 5;
	optional string account_id = 6;
	optional string agent_id = 7;
	optional string agent_name = 8;
	optional lang.L lang = 9;
}

message PasswordChangedEmail {
	optional common.Context ctx = 1;
	optional string to = 2;
	optional string account_id = 3;
	optional string agent_id = 4;
	optional string agent_name = 5;
	optional lang.L lang = 7;
	optional string from = 9;
}

message AccountConfirmSuccessEmail {
	optional common.Context ctx = 1;
	optional string to = 2;
	optional string account_id = 3;
	optional string agent_id = 4;
	optional string agent_name = 5;
	optional lang.L lang = 7;
	optional string from = 9;
	optional int64 from_time = 10;
	optional int64 to_time = 11;
}

message SearchAgentsRequest {
	optional common.Context ctx = 1;
	optional string email = 2;
}

message ExchangeRate {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string currency_id = 3;
	optional float rate = 4;
	optional string effective_date = 5;
	optional int64 created = 10;
}

message ExchangeRates {
	optional common.Context ctx = 1;
	repeated ExchangeRate exchange_rates = 2;
}

message Currency {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional bool is_base = 4;
	optional string name = 5;
	optional string code = 6;
	optional string symbol = 7;
	optional int32 decimal_place = 8;

	enum Format {
		DOT_COMMA = 0;     // 12.345.678,01
		COMMA_DOT = 1;     // 12,345,678.01
		SPACE_COMMA = 2;   // 12 345 678,01
	}
	optional string format = 9;
	optional int64 created = 10;
	optional int64 updated = 11;
}

message Currencies {
	optional common.Context ctx = 1;
	repeated Currency currencies = 2;
}

message ExchangeRateRequest {
	optional common.Context ctx = 1;
	optional string currency_id = 2;
	optional string id = 3;
}

message BusinessHours {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;

	message WorkingDay {
		optional string weekday = 1;
		optional string start_time = 2;
		optional string end_time = 3;
	}
	repeated WorkingDay working_days = 4;

	message Holiday {
		optional int32 year = 1;
		optional int32 month = 2;
		optional int32 day = 3;
		optional string weekday = 4; 
	}
	repeated Holiday holidays = 5;
}

service AccSubMgr {
	rpc SearchSub(SearchSubRequest) returns (AccSubs);
}

service AccountMgr {
	rpc CreateGroup(AgentGroup) returns (AgentGroup);
	rpc UpdateGroup(AgentGroup) returns (AgentGroup);
	rpc GetGroup(common.Id) returns (AgentGroup);
	rpc RequestResetPassword(ResetPasswordRequest) returns (common.Empty);
	rpc UpdatePassword(NewPassword) returns (Agent);
	rpc UpdateAgent(Agent) returns (Agent);
	rpc DeleteAgent(common.Id) returns (Agent);
	rpc AcceptInvitation(NewPassword) returns (Agent);
	rpc GetInvitation(Token) returns (Agent);
	rpc InviteAgent(Agent) returns (Agent); // allow to call multiple time
	rpc GetAgent(common.Id) returns (Agent);
	rpc ConfirmAccount(Token) returns (Account);
	rpc GetAccount(common.Id) returns (Account);
	rpc UpdateAccount(Account) returns (Account);
	rpc CreateAccount(CreateAccountRequest) returns (Account);
	rpc ListAgents(common.Id) returns (Agents);
	rpc CheckLogin(LoginRequest) returns (common.Id);
	rpc Login(LoginRequest) returns (Agent);
	rpc DeleteGroup(common.Id) returns (common.Empty);
	rpc ListGroups(common.Id) returns (AgentGroups);
	rpc AddAgentToGroup(GroupMember) returns (common.Empty);
	rpc RemoveAgentFromGroup(GroupMember) returns (common.Empty);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service CurrencyMgr {
	rpc ListCurrencies(common.Empty) returns (Currencies);
	rpc GetCurrency(common.Id) returns (Currency);
	rpc CreateCurrency(Currency) returns (Currency);
	rpc UpdateCurrency(Currency) returns (Currency);
	rpc DeleteCurrency(common.Id) returns (common.Empty);
	rpc ListExchangeRates(ExchangeRateRequest) returns (ExchangeRates);
	rpc GetExchangeRate(ExchangeRateRequest) returns (ExchangeRate);
	rpc CreateExchangeRate(ExchangeRate) returns (ExchangeRate);
	rpc DeleteExchangeRate(ExchangeRateRequest) returns (common.Empty);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

service BusinessHoursMgr {
	rpc UpdateBusinessHours(BusinessHours) returns (BusinessHours);
	rpc Ping(common.PingRequest) returns (common.Pong);
}

message AccSub {
	optional string id = 2;
	optional Account account = 3;
	optional payment.Subscription subscription = 4;
	repeated Agent agents = 5;
	optional string stringify = 6;
}

message AccSubs {
	repeated AccSub accsub = 2;
	optional string anchor = 4;
}

message SearchSubRequest {
	optional common.Context ctx = 1;
	optional string query = 4;
	optional string anchor = 5;
	optional int32 limit = 6;
	optional string plan = 7;
	// optional uint32 billing_cycle_month = 8;
	optional string order_by = 10;
}