// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package account

import (
	json "encoding/json"
	auth "git.subiz.net/header/auth"
	common "git.subiz.net/header/common"
	payment "git.subiz.net/header/payment"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount(in *jlexer.Lexer, out *useDocClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount(out *jwriter.Writer, in useDocClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v useDocClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v useDocClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *useDocClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *useDocClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount1(in *jlexer.Lexer, out *currencyMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount1(out *jwriter.Writer, in currencyMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v currencyMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v currencyMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *currencyMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *currencyMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount1(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount2(in *jlexer.Lexer, out *businessHoursMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount2(out *jwriter.Writer, in businessHoursMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v businessHoursMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v businessHoursMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *businessHoursMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *businessHoursMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount2(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount3(in *jlexer.Lexer, out *accountMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount3(out *jwriter.Writer, in accountMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v accountMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v accountMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *accountMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *accountMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount3(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount4(in *jlexer.Lexer, out *accSubMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount4(out *jwriter.Writer, in accSubMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v accSubMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v accSubMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *accSubMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *accSubMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount4(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount5(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "is_set":
			if in.IsNull() {
				in.Skip()
				out.IsSet = nil
			} else {
				if out.IsSet == nil {
					out.IsSet = new(bool)
				}
				*out.IsSet = bool(in.Bool())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount5(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.IsSet != nil {
		const prefix string = ",\"is_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsSet))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount5(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount6(in *jlexer.Lexer, out *SearchSubRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "order_by":
			if in.IsNull() {
				in.Skip()
				out.OrderBy = nil
			} else {
				if out.OrderBy == nil {
					out.OrderBy = new(string)
				}
				*out.OrderBy = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount6(out *jwriter.Writer, in SearchSubRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if in.OrderBy != nil {
		const prefix string = ",\"order_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OrderBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchSubRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchSubRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchSubRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchSubRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount6(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount7(in *jlexer.Lexer, out *SearchAgentsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount7(out *jwriter.Writer, in SearchAgentsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchAgentsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchAgentsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchAgentsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchAgentsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount7(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount8(in *jlexer.Lexer, out *ResetPasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount8(out *jwriter.Writer, in ResetPasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetPasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetPasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetPasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetPasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount8(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount9(in *jlexer.Lexer, out *ResetPasswordEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount9(out *jwriter.Writer, in ResetPasswordEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetPasswordEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetPasswordEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetPasswordEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetPasswordEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount9(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount10(in *jlexer.Lexer, out *PasswordChangedEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount10(out *jwriter.Writer, in PasswordChangedEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordChangedEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordChangedEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordChangedEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordChangedEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount10(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount11(in *jlexer.Lexer, out *NewPassword) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "new_password":
			if in.IsNull() {
				in.Skip()
				out.NewPassword = nil
			} else {
				if out.NewPassword == nil {
					out.NewPassword = new(string)
				}
				*out.NewPassword = string(in.String())
			}
		case "old_password":
			if in.IsNull() {
				in.Skip()
				out.OldPassword = nil
			} else {
				if out.OldPassword == nil {
					out.OldPassword = new(string)
				}
				*out.OldPassword = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount11(out *jwriter.Writer, in NewPassword) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.NewPassword != nil {
		const prefix string = ",\"new_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NewPassword))
	}
	if in.OldPassword != nil {
		const prefix string = ",\"old_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OldPassword))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewPassword) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewPassword) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewPassword) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewPassword) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount11(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount12(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount12(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Password != nil {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount12(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount13(in *jlexer.Lexer, out *InviteEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "sender_id":
			if in.IsNull() {
				in.Skip()
				out.SenderId = nil
			} else {
				if out.SenderId == nil {
					out.SenderId = new(string)
				}
				*out.SenderId = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "sender_name":
			if in.IsNull() {
				in.Skip()
				out.SenderName = nil
			} else {
				if out.SenderName == nil {
					out.SenderName = new(string)
				}
				*out.SenderName = string(in.String())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "account_logo_url":
			if in.IsNull() {
				in.Skip()
				out.AccountLogoUrl = nil
			} else {
				if out.AccountLogoUrl == nil {
					out.AccountLogoUrl = new(string)
				}
				*out.AccountLogoUrl = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount13(out *jwriter.Writer, in InviteEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.SenderId != nil {
		const prefix string = ",\"sender_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SenderId))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.SenderName != nil {
		const prefix string = ",\"sender_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SenderName))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.AccountLogoUrl != nil {
		const prefix string = ",\"account_logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountLogoUrl))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InviteEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InviteEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InviteEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InviteEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount13(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount14(in *jlexer.Lexer, out *Invitation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "from_id":
			if in.IsNull() {
				in.Skip()
				out.FromId = nil
			} else {
				if out.FromId == nil {
					out.FromId = new(string)
				}
				*out.FromId = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "sent":
			if in.IsNull() {
				in.Skip()
				out.Sent = nil
			} else {
				if out.Sent == nil {
					out.Sent = new(int64)
				}
				*out.Sent = int64(in.Int64())
			}
		case "replied":
			if in.IsNull() {
				in.Skip()
				out.Replied = nil
			} else {
				if out.Replied == nil {
					out.Replied = new(int64)
				}
				*out.Replied = int64(in.Int64())
			}
		case "agent_fullname":
			if in.IsNull() {
				in.Skip()
				out.AgentFullname = nil
			} else {
				if out.AgentFullname == nil {
					out.AgentFullname = new(string)
				}
				*out.AgentFullname = string(in.String())
			}
		case "agent_job_title":
			if in.IsNull() {
				in.Skip()
				out.AgentJobTitle = nil
			} else {
				if out.AgentJobTitle == nil {
					out.AgentJobTitle = new(string)
				}
				*out.AgentJobTitle = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount14(out *jwriter.Writer, in Invitation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.FromId != nil {
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FromId))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Sent != nil {
		const prefix string = ",\"sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Sent))
	}
	if in.Replied != nil {
		const prefix string = ",\"replied\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Replied))
	}
	if in.AgentFullname != nil {
		const prefix string = ",\"agent_fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentFullname))
	}
	if in.AgentJobTitle != nil {
		const prefix string = ",\"agent_job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentJobTitle))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invitation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invitation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invitation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invitation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount14(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount15(in *jlexer.Lexer, out *GroupMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount15(out *jwriter.Writer, in GroupMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount15(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount16(in *jlexer.Lexer, out *ExchangeRates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "exchange_rates":
			if in.IsNull() {
				in.Skip()
				out.ExchangeRates = nil
			} else {
				in.Delim('[')
				if out.ExchangeRates == nil {
					if !in.IsDelim(']') {
						out.ExchangeRates = make([]*ExchangeRate, 0, 8)
					} else {
						out.ExchangeRates = []*ExchangeRate{}
					}
				} else {
					out.ExchangeRates = (out.ExchangeRates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ExchangeRate
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ExchangeRate)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.ExchangeRates = append(out.ExchangeRates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount16(out *jwriter.Writer, in ExchangeRates) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.ExchangeRates) != 0 {
		const prefix string = ",\"exchange_rates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.ExchangeRates {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount16(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount17(in *jlexer.Lexer, out *ExchangeRateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "currency_id":
			if in.IsNull() {
				in.Skip()
				out.CurrencyId = nil
			} else {
				if out.CurrencyId == nil {
					out.CurrencyId = new(string)
				}
				*out.CurrencyId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount17(out *jwriter.Writer, in ExchangeRateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.CurrencyId != nil {
		const prefix string = ",\"currency_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CurrencyId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount17(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount18(in *jlexer.Lexer, out *ExchangeRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "currency_id":
			if in.IsNull() {
				in.Skip()
				out.CurrencyId = nil
			} else {
				if out.CurrencyId == nil {
					out.CurrencyId = new(string)
				}
				*out.CurrencyId = string(in.String())
			}
		case "rate":
			if in.IsNull() {
				in.Skip()
				out.Rate = nil
			} else {
				if out.Rate == nil {
					out.Rate = new(float32)
				}
				*out.Rate = float32(in.Float32())
			}
		case "effective_date":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount18(out *jwriter.Writer, in ExchangeRate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.CurrencyId != nil {
		const prefix string = ",\"currency_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CurrencyId))
	}
	if in.Rate != nil {
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Rate))
	}
	if in.EffectiveDate != nil {
		const prefix string = ",\"effective_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EffectiveDate))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount18(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount19(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "is_base":
			if in.IsNull() {
				in.Skip()
				out.IsBase = nil
			} else {
				if out.IsBase == nil {
					out.IsBase = new(bool)
				}
				*out.IsBase = bool(in.Bool())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "symbol":
			if in.IsNull() {
				in.Skip()
				out.Symbol = nil
			} else {
				if out.Symbol == nil {
					out.Symbol = new(string)
				}
				*out.Symbol = string(in.String())
			}
		case "decimal_place":
			if in.IsNull() {
				in.Skip()
				out.DecimalPlace = nil
			} else {
				if out.DecimalPlace == nil {
					out.DecimalPlace = new(int32)
				}
				*out.DecimalPlace = int32(in.Int32())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount19(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.IsBase != nil {
		const prefix string = ",\"is_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsBase))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Code))
	}
	if in.Symbol != nil {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Symbol))
	}
	if in.DecimalPlace != nil {
		const prefix string = ",\"decimal_place\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DecimalPlace))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount19(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount20(in *jlexer.Lexer, out *Currencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]*Currency, 0, 8)
					} else {
						out.Currencies = []*Currency{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Currency
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Currency)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Currencies = append(out.Currencies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount20(out *jwriter.Writer, in Currencies) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Currencies {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount20(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount21(in *jlexer.Lexer, out *CreateAccountRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "account_url":
			if in.IsNull() {
				in.Skip()
				out.AccountUrl = nil
			} else {
				if out.AccountUrl == nil {
					out.AccountUrl = new(string)
				}
				*out.AccountUrl = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount21(out *jwriter.Writer, in CreateAccountRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.Password != nil {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Password))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.AccountUrl != nil {
		const prefix string = ",\"account_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountUrl))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateAccountRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateAccountRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount21(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount22(in *jlexer.Lexer, out *ConfirmEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "owner_id":
			if in.IsNull() {
				in.Skip()
				out.OwnerId = nil
			} else {
				if out.OwnerId == nil {
					out.OwnerId = new(string)
				}
				*out.OwnerId = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "owner_name":
			if in.IsNull() {
				in.Skip()
				out.OwnerName = nil
			} else {
				if out.OwnerName == nil {
					out.OwnerName = new(string)
				}
				*out.OwnerName = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount22(out *jwriter.Writer, in ConfirmEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.OwnerId != nil {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerId))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.OwnerName != nil {
		const prefix string = ",\"owner_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerName))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount22(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours(in *jlexer.Lexer, out *BusinessHours_WorkingDay) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(string)
				}
				*out.Weekday = string(in.String())
			}
		case "start_time":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(string)
				}
				*out.StartTime = string(in.String())
			}
		case "end_time":
			if in.IsNull() {
				in.Skip()
				out.EndTime = nil
			} else {
				if out.EndTime == nil {
					out.EndTime = new(string)
				}
				*out.EndTime = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours(out *jwriter.Writer, in BusinessHours_WorkingDay) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Weekday != nil {
		const prefix string = ",\"weekday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Weekday))
	}
	if in.StartTime != nil {
		const prefix string = ",\"start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartTime))
	}
	if in.EndTime != nil {
		const prefix string = ",\"end_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours_WorkingDay) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours_WorkingDay) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours_WorkingDay) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours_WorkingDay) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours1(in *jlexer.Lexer, out *BusinessHours_Holiday) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		case "month":
			if in.IsNull() {
				in.Skip()
				out.Month = nil
			} else {
				if out.Month == nil {
					out.Month = new(int32)
				}
				*out.Month = int32(in.Int32())
			}
		case "day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				if out.Day == nil {
					out.Day = new(int32)
				}
				*out.Day = int32(in.Int32())
			}
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(string)
				}
				*out.Weekday = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "start_time":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(string)
				}
				*out.StartTime = string(in.String())
			}
		case "end_time":
			if in.IsNull() {
				in.Skip()
				out.EndTime = nil
			} else {
				if out.EndTime == nil {
					out.EndTime = new(string)
				}
				*out.EndTime = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours1(out *jwriter.Writer, in BusinessHours_Holiday) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	if in.Month != nil {
		const prefix string = ",\"month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Month))
	}
	if in.Day != nil {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Day))
	}
	if in.Weekday != nil {
		const prefix string = ",\"weekday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Weekday))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.StartTime != nil {
		const prefix string = ",\"start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartTime))
	}
	if in.EndTime != nil {
		const prefix string = ",\"end_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours_Holiday) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours_Holiday) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccountBusinessHours1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours_Holiday) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours_Holiday) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccountBusinessHours1(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount23(in *jlexer.Lexer, out *BusinessHours) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "working_days":
			if in.IsNull() {
				in.Skip()
				out.WorkingDays = nil
			} else {
				in.Delim('[')
				if out.WorkingDays == nil {
					if !in.IsDelim(']') {
						out.WorkingDays = make([]*BusinessHours_WorkingDay, 0, 8)
					} else {
						out.WorkingDays = []*BusinessHours_WorkingDay{}
					}
				} else {
					out.WorkingDays = (out.WorkingDays)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *BusinessHours_WorkingDay
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(BusinessHours_WorkingDay)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.WorkingDays = append(out.WorkingDays, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "holidays":
			if in.IsNull() {
				in.Skip()
				out.Holidays = nil
			} else {
				in.Delim('[')
				if out.Holidays == nil {
					if !in.IsDelim(']') {
						out.Holidays = make([]*BusinessHours_Holiday, 0, 8)
					} else {
						out.Holidays = []*BusinessHours_Holiday{}
					}
				} else {
					out.Holidays = (out.Holidays)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *BusinessHours_Holiday
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(BusinessHours_Holiday)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Holidays = append(out.Holidays, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount23(out *jwriter.Writer, in BusinessHours) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if len(in.WorkingDays) != 0 {
		const prefix string = ",\"working_days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.WorkingDays {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Holidays) != 0 {
		const prefix string = ",\"holidays\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Holidays {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount23(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount24(in *jlexer.Lexer, out *Agents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "Agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]*Agent, 0, 8)
					} else {
						out.Agents = []*Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Agent
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Agent)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Agents = append(out.Agents, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount24(out *jwriter.Writer, in Agents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Agents) != 0 {
		const prefix string = ",\"Agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Agents {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Agents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Agents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount24(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount25(in *jlexer.Lexer, out *AgentPerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(auth.Method)
				}
				(*out.Method).UnmarshalEasyJSON(in)
			}
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				(*out.Perm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount25(out *jwriter.Writer, in AgentPerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Method != nil {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Method).MarshalEasyJSON(out)
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Perm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentPerm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentPerm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentPerm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentPerm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount25(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount26(in *jlexer.Lexer, out *AgentGroups) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "Groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*AgentGroup, 0, 8)
					} else {
						out.Groups = []*AgentGroup{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *AgentGroup
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(AgentGroup)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount26(out *jwriter.Writer, in AgentGroups) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"Groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Groups {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentGroups) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentGroups) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentGroups) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentGroups) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount26(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount27(in *jlexer.Lexer, out *AgentGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "logo_url":
			if in.IsNull() {
				in.Skip()
				out.LogoUrl = nil
			} else {
				if out.LogoUrl == nil {
					out.LogoUrl = new(string)
				}
				*out.LogoUrl = string(in.String())
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Agent, 0, 8)
					} else {
						out.Members = []*Agent{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Agent
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Agent)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "members_count":
			if in.IsNull() {
				in.Skip()
				out.MembersCount = nil
			} else {
				if out.MembersCount == nil {
					out.MembersCount = new(int32)
				}
				*out.MembersCount = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount27(out *jwriter.Writer, in AgentGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.LogoUrl != nil {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoUrl))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Members {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.MembersCount != nil {
		const prefix string = ",\"members_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.MembersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount27(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount28(in *jlexer.Lexer, out *Agent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "emails":
			if in.IsNull() {
				in.Skip()
				out.Emails = nil
			} else {
				in.Delim('[')
				if out.Emails == nil {
					if !in.IsDelim(']') {
						out.Emails = make([]string, 0, 4)
					} else {
						out.Emails = []string{}
					}
				} else {
					out.Emails = (out.Emails)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Emails = append(out.Emails, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phones":
			if in.IsNull() {
				in.Skip()
				out.Phones = nil
			} else {
				in.Delim('[')
				if out.Phones == nil {
					if !in.IsDelim(']') {
						out.Phones = make([]string, 0, 4)
					} else {
						out.Phones = []string{}
					}
				} else {
					out.Phones = (out.Phones)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.Phones = append(out.Phones, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "is_owner":
			if in.IsNull() {
				in.Skip()
				out.IsOwner = nil
			} else {
				if out.IsOwner == nil {
					out.IsOwner = new(bool)
				}
				*out.IsOwner = bool(in.Bool())
			}
		case "job_title":
			if in.IsNull() {
				in.Skip()
				out.JobTitle = nil
			} else {
				if out.JobTitle == nil {
					out.JobTitle = new(string)
				}
				*out.JobTitle = string(in.String())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(string)
				}
				*out.Gender = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "encrypted_password":
			if in.IsNull() {
				in.Skip()
				out.EncryptedPassword = nil
			} else {
				if out.EncryptedPassword == nil {
					out.EncryptedPassword = new(string)
				}
				*out.EncryptedPassword = string(in.String())
			}
		case "joined":
			if in.IsNull() {
				in.Skip()
				out.Joined = nil
			} else {
				if out.Joined == nil {
					out.Joined = new(int64)
				}
				*out.Joined = int64(in.Int64())
			}
		case "invited_by":
			if in.IsNull() {
				in.Skip()
				out.InvitedBy = nil
			} else {
				if out.InvitedBy == nil {
					out.InvitedBy = new(string)
				}
				*out.InvitedBy = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "password_changed":
			if in.IsNull() {
				in.Skip()
				out.PasswordChanged = nil
			} else {
				if out.PasswordChanged == nil {
					out.PasswordChanged = new(int64)
				}
				*out.PasswordChanged = int64(in.Int64())
			}
		case "seen":
			if in.IsNull() {
				in.Skip()
				out.Seen = nil
			} else {
				if out.Seen == nil {
					out.Seen = new(int64)
				}
				*out.Seen = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(auth.Method)
				}
				(*out.Method).UnmarshalEasyJSON(in)
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				(*out.Perm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount28(out *jwriter.Writer, in Agent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if len(in.Emails) != 0 {
		const prefix string = ",\"emails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Emails {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.Phones) != 0 {
		const prefix string = ",\"phones\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Phones {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.IsOwner != nil {
		const prefix string = ",\"is_owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsOwner))
	}
	if in.JobTitle != nil {
		const prefix string = ",\"job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JobTitle))
	}
	if in.Gender != nil {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Gender))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Location))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.EncryptedPassword != nil {
		const prefix string = ",\"encrypted_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EncryptedPassword))
	}
	if in.Joined != nil {
		const prefix string = ",\"joined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Joined))
	}
	if in.InvitedBy != nil {
		const prefix string = ",\"invited_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InvitedBy))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.PasswordChanged != nil {
		const prefix string = ",\"password_changed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PasswordChanged))
	}
	if in.Seen != nil {
		const prefix string = ",\"seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Seen))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Method != nil {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Method).MarshalEasyJSON(out)
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Perm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Agent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Agent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount28(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount29(in *jlexer.Lexer, out *AccountV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(Agent)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "subscription":
			if in.IsNull() {
				in.Skip()
				out.Subscription = nil
			} else {
				if out.Subscription == nil {
					out.Subscription = new(payment.Subscription)
				}
				(*out.Subscription).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount29(out *jwriter.Writer, in AccountV3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Owner != nil {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Owner).MarshalEasyJSON(out)
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Subscription).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount29(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount30(in *jlexer.Lexer, out *AccountConfirmSuccessEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		case "from_time":
			if in.IsNull() {
				in.Skip()
				out.FromTime = nil
			} else {
				if out.FromTime == nil {
					out.FromTime = new(int64)
				}
				*out.FromTime = int64(in.Int64())
			}
		case "to_time":
			if in.IsNull() {
				in.Skip()
				out.ToTime = nil
			} else {
				if out.ToTime == nil {
					out.ToTime = new(int64)
				}
				*out.ToTime = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount30(out *jwriter.Writer, in AccountConfirmSuccessEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	if in.FromTime != nil {
		const prefix string = ",\"from_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FromTime))
	}
	if in.ToTime != nil {
		const prefix string = ",\"to_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ToTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfirmSuccessEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfirmSuccessEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfirmSuccessEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfirmSuccessEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount30(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount31(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "logo_url":
			if in.IsNull() {
				in.Skip()
				out.LogoUrl = nil
			} else {
				if out.LogoUrl == nil {
					out.LogoUrl = new(string)
				}
				*out.LogoUrl = string(in.String())
			}
		case "owner_id":
			if in.IsNull() {
				in.Skip()
				out.OwnerId = nil
			} else {
				if out.OwnerId == nil {
					out.OwnerId = new(string)
				}
				*out.OwnerId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "confirmed":
			if in.IsNull() {
				in.Skip()
				out.Confirmed = nil
			} else {
				if out.Confirmed == nil {
					out.Confirmed = new(int64)
				}
				*out.Confirmed = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "slogan":
			if in.IsNull() {
				in.Skip()
				out.Slogan = nil
			} else {
				if out.Slogan == nil {
					out.Slogan = new(string)
				}
				*out.Slogan = string(in.String())
			}
		case "referer_id":
			if in.IsNull() {
				in.Skip()
				out.RefererId = nil
			} else {
				if out.RefererId == nil {
					out.RefererId = new(string)
				}
				*out.RefererId = string(in.String())
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(string)
				}
				*out.City = string(in.String())
			}
		case "zip_code":
			if in.IsNull() {
				in.Skip()
				out.ZipCode = nil
			} else {
				if out.ZipCode == nil {
					out.ZipCode = new(int32)
				}
				*out.ZipCode = int32(in.Int32())
			}
		case "tax_id":
			if in.IsNull() {
				in.Skip()
				out.TaxId = nil
			} else {
				if out.TaxId == nil {
					out.TaxId = new(string)
				}
				*out.TaxId = string(in.String())
			}
		case "facebook":
			if in.IsNull() {
				in.Skip()
				out.Facebook = nil
			} else {
				if out.Facebook == nil {
					out.Facebook = new(string)
				}
				*out.Facebook = string(in.String())
			}
		case "twitter":
			if in.IsNull() {
				in.Skip()
				out.Twitter = nil
			} else {
				if out.Twitter == nil {
					out.Twitter = new(string)
				}
				*out.Twitter = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "referer_from":
			if in.IsNull() {
				in.Skip()
				out.RefererFrom = nil
			} else {
				if out.RefererFrom == nil {
					out.RefererFrom = new(string)
				}
				*out.RefererFrom = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(payment.Limit)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(string)
				}
				*out.Country = string(in.String())
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "date_format":
			if in.IsNull() {
				in.Skip()
				out.DateFormat = nil
			} else {
				if out.DateFormat == nil {
					out.DateFormat = new(string)
				}
				*out.DateFormat = string(in.String())
			}
		case "business_hours":
			if in.IsNull() {
				in.Skip()
				out.BusinessHours = nil
			} else {
				if out.BusinessHours == nil {
					out.BusinessHours = new(BusinessHours)
				}
				(*out.BusinessHours).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount31(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.LogoUrl != nil {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoUrl))
	}
	if in.OwnerId != nil {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Confirmed != nil {
		const prefix string = ",\"confirmed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Confirmed))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Slogan != nil {
		const prefix string = ",\"slogan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Slogan))
	}
	if in.RefererId != nil {
		const prefix string = ",\"referer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RefererId))
	}
	if in.City != nil {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.City))
	}
	if in.ZipCode != nil {
		const prefix string = ",\"zip_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ZipCode))
	}
	if in.TaxId != nil {
		const prefix string = ",\"tax_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TaxId))
	}
	if in.Facebook != nil {
		const prefix string = ",\"facebook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Facebook))
	}
	if in.Twitter != nil {
		const prefix string = ",\"twitter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Twitter))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.Address != nil {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Address))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.RefererFrom != nil {
		const prefix string = ",\"referer_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RefererFrom))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Country != nil {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Country))
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.DateFormat != nil {
		const prefix string = ",\"date_format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DateFormat))
	}
	if in.BusinessHours != nil {
		const prefix string = ",\"business_hours\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BusinessHours).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount31(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount32(in *jlexer.Lexer, out *AccSubs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accsub":
			if in.IsNull() {
				in.Skip()
				out.Accsub = nil
			} else {
				in.Delim('[')
				if out.Accsub == nil {
					if !in.IsDelim(']') {
						out.Accsub = make([]*AccSub, 0, 8)
					} else {
						out.Accsub = []*AccSub{}
					}
				} else {
					out.Accsub = (out.Accsub)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *AccSub
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(AccSub)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Accsub = append(out.Accsub, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount32(out *jwriter.Writer, in AccSubs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Accsub) != 0 {
		const prefix string = ",\"accsub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Accsub {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccSubs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccSubs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccSubs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccSubs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount32(l, v)
}
func easyjsonC9b74c43DecodeGitSubizNetHeaderAccount33(in *jlexer.Lexer, out *AccSub) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "subscription":
			if in.IsNull() {
				in.Skip()
				out.Subscription = nil
			} else {
				if out.Subscription == nil {
					out.Subscription = new(payment.Subscription)
				}
				(*out.Subscription).UnmarshalEasyJSON(in)
			}
		case "agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]*Agent, 0, 8)
					} else {
						out.Agents = []*Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Agent
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Agent)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Agents = append(out.Agents, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stringify":
			if in.IsNull() {
				in.Skip()
				out.Stringify = nil
			} else {
				if out.Stringify == nil {
					out.Stringify = new(string)
				}
				*out.Stringify = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGitSubizNetHeaderAccount33(out *jwriter.Writer, in AccSub) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Subscription).MarshalEasyJSON(out)
	}
	if len(in.Agents) != 0 {
		const prefix string = ",\"agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Agents {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Stringify != nil {
		const prefix string = ",\"stringify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Stringify))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccSub) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccSub) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGitSubizNetHeaderAccount33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccSub) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccSub) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGitSubizNetHeaderAccount33(l, v)
}
