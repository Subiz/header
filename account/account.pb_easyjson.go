// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package account

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	auth "github.com/subiz/header/auth"
	common "github.com/subiz/header/common"
	payment "github.com/subiz/header/payment"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "is_set":
			if in.IsNull() {
				in.Skip()
				out.IsSet = nil
			} else {
				if out.IsSet == nil {
					out.IsSet = new(bool)
				}
				*out.IsSet = bool(in.Bool())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.IsSet != nil {
		const prefix string = ",\"is_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsSet))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in *jlexer.Lexer, out *common.Context) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventId = string(in.String())
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				out.State = in.Bytes()
			}
		case "node":
			out.Node = string(in.String())
		case "credential":
			if in.IsNull() {
				in.Skip()
				out.Credential = nil
			} else {
				if out.Credential == nil {
					out.Credential = new(auth.Credential)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderAuth(in, &*out.Credential)
			}
		case "tracing":
			if in.IsNull() {
				in.Skip()
				out.Tracing = nil
			} else {
				if out.Tracing == nil {
					out.Tracing = new(common.Tracing)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon1(in, &*out.Tracing)
			}
		case "by_device":
			if in.IsNull() {
				in.Skip()
				out.ByDevice = nil
			} else {
				if out.ByDevice == nil {
					out.ByDevice = new(common.Device)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon2(in, &*out.ByDevice)
			}
		case "sub_topic":
			out.SubTopic = string(in.String())
		case "kafka_partition":
			out.KafkaPartition = int32(in.Int32())
		case "kafka_offset":
			out.KafkaOffset = int64(in.Int64())
		case "kafka_term":
			out.KafkaTerm = uint64(in.Uint64())
		case "idempotency_key":
			out.IdempotencyKey = string(in.String())
		case "env":
			out.Env = string(in.String())
		case "kafka_key":
			out.KafkaKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out *jwriter.Writer, in common.Context) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EventId != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventId))
	}
	if len(in.State) != 0 {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.State)
	}
	if in.Node != "" {
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Node))
	}
	if in.Credential != nil {
		const prefix string = ",\"credential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderAuth(out, *in.Credential)
	}
	if in.Tracing != nil {
		const prefix string = ",\"tracing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon1(out, *in.Tracing)
	}
	if in.ByDevice != nil {
		const prefix string = ",\"by_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon2(out, *in.ByDevice)
	}
	if in.SubTopic != "" {
		const prefix string = ",\"sub_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubTopic))
	}
	if in.KafkaPartition != 0 {
		const prefix string = ",\"kafka_partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.KafkaPartition))
	}
	if in.KafkaOffset != 0 {
		const prefix string = ",\"kafka_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KafkaOffset))
	}
	if in.KafkaTerm != 0 {
		const prefix string = ",\"kafka_term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.KafkaTerm))
	}
	if in.IdempotencyKey != "" {
		const prefix string = ",\"idempotency_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdempotencyKey))
	}
	if in.Env != "" {
		const prefix string = ",\"env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Env))
	}
	if in.KafkaKey != "" {
		const prefix string = ",\"kafka_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KafkaKey))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderCommon2(in *jlexer.Lexer, out *common.Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "screen_resolution":
			out.ScreenResolution = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "source_referrer":
			out.SourceReferrer = string(in.String())
		case "ga_tracking_ids":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingIds = nil
			} else {
				in.Delim('[')
				if out.GaTrackingIds == nil {
					if !in.IsDelim(']') {
						out.GaTrackingIds = make([]string, 0, 4)
					} else {
						out.GaTrackingIds = []string{}
					}
				} else {
					out.GaTrackingIds = (out.GaTrackingIds)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.GaTrackingIds = append(out.GaTrackingIds, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderCommon2(out *jwriter.Writer, in common.Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.SourceReferrer != "" {
		const prefix string = ",\"source_referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceReferrer))
	}
	if len(in.GaTrackingIds) != 0 {
		const prefix string = ",\"ga_tracking_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.GaTrackingIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderCommon1(in *jlexer.Lexer, out *common.Tracing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*common.Trace, 0, 8)
					} else {
						out.Traces = []*common.Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *common.Trace
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(common.Trace)
						}
						easyjsonC9b74c43DecodeGithubComSubizHeaderCommon3(in, &*v7)
					}
					out.Traces = append(out.Traces, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderCommon1(out *jwriter.Writer, in common.Tracing) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Traces {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjsonC9b74c43EncodeGithubComSubizHeaderCommon3(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderCommon3(in *jlexer.Lexer, out *common.Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceName":
			out.ServiceName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "duration":
			out.Duration = int64(in.Int64())
		case "started":
			out.Started = int64(in.Int64())
		case "ended":
			out.Ended = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderCommon3(out *jwriter.Writer, in common.Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiceName != "" {
		const prefix string = ",\"serviceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceName))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Started != 0 {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Started))
	}
	if in.Ended != 0 {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ended))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAuth(in *jlexer.Lexer, out *auth.Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "issuer":
			out.Issuer = string(in.String())
		case "type":
			out.Type = auth.Type(in.Int32())
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderAuth1(in, &*out.Perm)
			}
		case "client_id":
			out.ClientId = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAuth(out *jwriter.Writer, in auth.Credential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderAuth1(out, *in.Perm)
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.AvatarUrl != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarUrl))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAuth1(in *jlexer.Lexer, out *auth.Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = int32(in.Int32())
		case "agent":
			out.Agent = int32(in.Int32())
		case "agent_password":
			out.AgentPassword = int32(in.Int32())
		case "permission":
			out.Permission = int32(in.Int32())
		case "agent_group":
			out.AgentGroup = int32(in.Int32())
		case "segmentation":
			out.Segmentation = int32(in.Int32())
		case "client":
			out.Client = int32(in.Int32())
		case "rule":
			out.Rule = int32(in.Int32())
		case "conversation":
			out.Conversation = int32(in.Int32())
		case "integration":
			out.Integration = int32(in.Int32())
		case "canned_response":
			out.CannedResponse = int32(in.Int32())
		case "tag":
			out.Tag = int32(in.Int32())
		case "whitelist_ip":
			out.WhitelistIp = int32(in.Int32())
		case "whitelist_user":
			out.WhitelistUser = int32(in.Int32())
		case "whitelist_domain":
			out.WhitelistDomain = int32(in.Int32())
		case "widget":
			out.Widget = int32(in.Int32())
		case "subscription":
			out.Subscription = int32(in.Int32())
		case "invoice":
			out.Invoice = int32(in.Int32())
		case "payment_method":
			out.PaymentMethod = int32(in.Int32())
		case "bill":
			out.Bill = int32(in.Int32())
		case "payment_log":
			out.PaymentLog = int32(in.Int32())
		case "payment_comment":
			out.PaymentComment = int32(in.Int32())
		case "user":
			out.User = int32(in.Int32())
		case "automation":
			out.Automation = int32(in.Int32())
		case "ping":
			out.Ping = int32(in.Int32())
		case "attribute":
			out.Attribute = int32(in.Int32())
		case "agent_notification":
			out.AgentNotification = int32(in.Int32())
		case "conversation_export":
			out.ConversationExport = int32(in.Int32())
		case "conversation_report":
			out.ConversationReport = int32(in.Int32())
		case "content":
			out.Content = int32(in.Int32())
		case "pipeline":
			out.Pipeline = int32(in.Int32())
		case "currency":
			out.Currency = int32(in.Int32())
		case "service_level_agreement":
			out.ServiceLevelAgreement = int32(in.Int32())
		case "message_template":
			out.MessageTemplate = int32(in.Int32())
		case "agent_presence":
			out.AgentPresence = int32(in.Int32())
		case "agent_preference":
			out.AgentPreference = int32(in.Int32())
		case "promotion_code":
			out.PromotionCode = int32(in.Int32())
		case "referral":
			out.Referral = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAuth1(out *jwriter.Writer, in auth.Permission) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Account))
	}
	if in.Agent != 0 {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Agent))
	}
	if in.AgentPassword != 0 {
		const prefix string = ",\"agent_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPassword))
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Permission))
	}
	if in.AgentGroup != 0 {
		const prefix string = ",\"agent_group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentGroup))
	}
	if in.Segmentation != 0 {
		const prefix string = ",\"segmentation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Segmentation))
	}
	if in.Client != 0 {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Client))
	}
	if in.Rule != 0 {
		const prefix string = ",\"rule\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Rule))
	}
	if in.Conversation != 0 {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Conversation))
	}
	if in.Integration != 0 {
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Integration))
	}
	if in.CannedResponse != 0 {
		const prefix string = ",\"canned_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.CannedResponse))
	}
	if in.Tag != 0 {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Tag))
	}
	if in.WhitelistIp != 0 {
		const prefix string = ",\"whitelist_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistIp))
	}
	if in.WhitelistUser != 0 {
		const prefix string = ",\"whitelist_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistUser))
	}
	if in.WhitelistDomain != 0 {
		const prefix string = ",\"whitelist_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistDomain))
	}
	if in.Widget != 0 {
		const prefix string = ",\"widget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Widget))
	}
	if in.Subscription != 0 {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Subscription))
	}
	if in.Invoice != 0 {
		const prefix string = ",\"invoice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Invoice))
	}
	if in.PaymentMethod != 0 {
		const prefix string = ",\"payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentMethod))
	}
	if in.Bill != 0 {
		const prefix string = ",\"bill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Bill))
	}
	if in.PaymentLog != 0 {
		const prefix string = ",\"payment_log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentLog))
	}
	if in.PaymentComment != 0 {
		const prefix string = ",\"payment_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentComment))
	}
	if in.User != 0 {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.User))
	}
	if in.Automation != 0 {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Automation))
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ping))
	}
	if in.Attribute != 0 {
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Attribute))
	}
	if in.AgentNotification != 0 {
		const prefix string = ",\"agent_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentNotification))
	}
	if in.ConversationExport != 0 {
		const prefix string = ",\"conversation_export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationExport))
	}
	if in.ConversationReport != 0 {
		const prefix string = ",\"conversation_report\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationReport))
	}
	if in.Content != 0 {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Content))
	}
	if in.Pipeline != 0 {
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Pipeline))
	}
	if in.Currency != 0 {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Currency))
	}
	if in.ServiceLevelAgreement != 0 {
		const prefix string = ",\"service_level_agreement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ServiceLevelAgreement))
	}
	if in.MessageTemplate != 0 {
		const prefix string = ",\"message_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MessageTemplate))
	}
	if in.AgentPresence != 0 {
		const prefix string = ",\"agent_presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPresence))
	}
	if in.AgentPreference != 0 {
		const prefix string = ",\"agent_preference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPreference))
	}
	if in.PromotionCode != 0 {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PromotionCode))
	}
	if in.Referral != 0 {
		const prefix string = ",\"referral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Referral))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount1(in *jlexer.Lexer, out *SyncPublicHolidaysRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount1(out *jwriter.Writer, in SyncPublicHolidaysRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SyncPublicHolidaysRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SyncPublicHolidaysRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SyncPublicHolidaysRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SyncPublicHolidaysRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount1(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount2(in *jlexer.Lexer, out *SearchSubRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "order_by":
			if in.IsNull() {
				in.Skip()
				out.OrderBy = nil
			} else {
				if out.OrderBy == nil {
					out.OrderBy = new(string)
				}
				*out.OrderBy = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount2(out *jwriter.Writer, in SearchSubRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if in.OrderBy != nil {
		const prefix string = ",\"order_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OrderBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchSubRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchSubRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchSubRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchSubRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount2(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount3(in *jlexer.Lexer, out *SearchAgentsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount3(out *jwriter.Writer, in SearchAgentsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchAgentsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchAgentsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchAgentsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchAgentsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount3(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount4(in *jlexer.Lexer, out *ResetPasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount4(out *jwriter.Writer, in ResetPasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetPasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetPasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetPasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetPasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount4(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount5(in *jlexer.Lexer, out *ResetPasswordEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount5(out *jwriter.Writer, in ResetPasswordEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetPasswordEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetPasswordEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetPasswordEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetPasswordEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount5(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount6(in *jlexer.Lexer, out *PasswordChangedEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount6(out *jwriter.Writer, in PasswordChangedEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordChangedEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordChangedEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordChangedEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordChangedEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount6(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount7(in *jlexer.Lexer, out *NewPassword) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "new_password":
			if in.IsNull() {
				in.Skip()
				out.NewPassword = nil
			} else {
				if out.NewPassword == nil {
					out.NewPassword = new(string)
				}
				*out.NewPassword = string(in.String())
			}
		case "old_password":
			if in.IsNull() {
				in.Skip()
				out.OldPassword = nil
			} else {
				if out.OldPassword == nil {
					out.OldPassword = new(string)
				}
				*out.OldPassword = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount7(out *jwriter.Writer, in NewPassword) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.NewPassword != nil {
		const prefix string = ",\"new_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NewPassword))
	}
	if in.OldPassword != nil {
		const prefix string = ",\"old_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OldPassword))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewPassword) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewPassword) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewPassword) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewPassword) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount7(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount8(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount8(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Password != nil {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount8(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount9(in *jlexer.Lexer, out *LogAgentLoggedIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount9(out *jwriter.Writer, in LogAgentLoggedIn) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogAgentLoggedIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogAgentLoggedIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogAgentLoggedIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogAgentLoggedIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount9(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount10(in *jlexer.Lexer, out *InviteEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "sender_id":
			if in.IsNull() {
				in.Skip()
				out.SenderId = nil
			} else {
				if out.SenderId == nil {
					out.SenderId = new(string)
				}
				*out.SenderId = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "sender_name":
			if in.IsNull() {
				in.Skip()
				out.SenderName = nil
			} else {
				if out.SenderName == nil {
					out.SenderName = new(string)
				}
				*out.SenderName = string(in.String())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "account_logo_url":
			if in.IsNull() {
				in.Skip()
				out.AccountLogoUrl = nil
			} else {
				if out.AccountLogoUrl == nil {
					out.AccountLogoUrl = new(string)
				}
				*out.AccountLogoUrl = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount10(out *jwriter.Writer, in InviteEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.SenderId != nil {
		const prefix string = ",\"sender_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SenderId))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.SenderName != nil {
		const prefix string = ",\"sender_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SenderName))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.AccountLogoUrl != nil {
		const prefix string = ",\"account_logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountLogoUrl))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InviteEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InviteEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InviteEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InviteEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount10(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount11(in *jlexer.Lexer, out *Invitation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "from_id":
			if in.IsNull() {
				in.Skip()
				out.FromId = nil
			} else {
				if out.FromId == nil {
					out.FromId = new(string)
				}
				*out.FromId = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "sent":
			if in.IsNull() {
				in.Skip()
				out.Sent = nil
			} else {
				if out.Sent == nil {
					out.Sent = new(int64)
				}
				*out.Sent = int64(in.Int64())
			}
		case "replied":
			if in.IsNull() {
				in.Skip()
				out.Replied = nil
			} else {
				if out.Replied == nil {
					out.Replied = new(int64)
				}
				*out.Replied = int64(in.Int64())
			}
		case "agent_fullname":
			if in.IsNull() {
				in.Skip()
				out.AgentFullname = nil
			} else {
				if out.AgentFullname == nil {
					out.AgentFullname = new(string)
				}
				*out.AgentFullname = string(in.String())
			}
		case "agent_job_title":
			if in.IsNull() {
				in.Skip()
				out.AgentJobTitle = nil
			} else {
				if out.AgentJobTitle == nil {
					out.AgentJobTitle = new(string)
				}
				*out.AgentJobTitle = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount11(out *jwriter.Writer, in Invitation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.FromId != nil {
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FromId))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Sent != nil {
		const prefix string = ",\"sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Sent))
	}
	if in.Replied != nil {
		const prefix string = ",\"replied\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Replied))
	}
	if in.AgentFullname != nil {
		const prefix string = ",\"agent_fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentFullname))
	}
	if in.AgentJobTitle != nil {
		const prefix string = ",\"agent_job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentJobTitle))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invitation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invitation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invitation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invitation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount11(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount12(in *jlexer.Lexer, out *GroupMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount12(out *jwriter.Writer, in GroupMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount12(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount13(in *jlexer.Lexer, out *ExchangeRates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "exchange_rates":
			if in.IsNull() {
				in.Skip()
				out.ExchangeRates = nil
			} else {
				in.Delim('[')
				if out.ExchangeRates == nil {
					if !in.IsDelim(']') {
						out.ExchangeRates = make([]*ExchangeRate, 0, 8)
					} else {
						out.ExchangeRates = []*ExchangeRate{}
					}
				} else {
					out.ExchangeRates = (out.ExchangeRates)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *ExchangeRate
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(ExchangeRate)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.ExchangeRates = append(out.ExchangeRates, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount13(out *jwriter.Writer, in ExchangeRates) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if len(in.ExchangeRates) != 0 {
		const prefix string = ",\"exchange_rates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.ExchangeRates {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount13(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount14(in *jlexer.Lexer, out *ExchangeRateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "currency_id":
			if in.IsNull() {
				in.Skip()
				out.CurrencyId = nil
			} else {
				if out.CurrencyId == nil {
					out.CurrencyId = new(string)
				}
				*out.CurrencyId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount14(out *jwriter.Writer, in ExchangeRateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.CurrencyId != nil {
		const prefix string = ",\"currency_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CurrencyId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount14(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount15(in *jlexer.Lexer, out *ExchangeRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "currency_id":
			if in.IsNull() {
				in.Skip()
				out.CurrencyId = nil
			} else {
				if out.CurrencyId == nil {
					out.CurrencyId = new(string)
				}
				*out.CurrencyId = string(in.String())
			}
		case "rate":
			if in.IsNull() {
				in.Skip()
				out.Rate = nil
			} else {
				if out.Rate == nil {
					out.Rate = new(float32)
				}
				*out.Rate = float32(in.Float32())
			}
		case "effective_date":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount15(out *jwriter.Writer, in ExchangeRate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.CurrencyId != nil {
		const prefix string = ",\"currency_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CurrencyId))
	}
	if in.Rate != nil {
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Rate))
	}
	if in.EffectiveDate != nil {
		const prefix string = ",\"effective_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EffectiveDate))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount15(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount16(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "is_base":
			if in.IsNull() {
				in.Skip()
				out.IsBase = nil
			} else {
				if out.IsBase == nil {
					out.IsBase = new(bool)
				}
				*out.IsBase = bool(in.Bool())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "symbol":
			if in.IsNull() {
				in.Skip()
				out.Symbol = nil
			} else {
				if out.Symbol == nil {
					out.Symbol = new(string)
				}
				*out.Symbol = string(in.String())
			}
		case "decimal_place":
			if in.IsNull() {
				in.Skip()
				out.DecimalPlace = nil
			} else {
				if out.DecimalPlace == nil {
					out.DecimalPlace = new(int32)
				}
				*out.DecimalPlace = int32(in.Int32())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount16(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.IsBase != nil {
		const prefix string = ",\"is_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsBase))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Code))
	}
	if in.Symbol != nil {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Symbol))
	}
	if in.DecimalPlace != nil {
		const prefix string = ",\"decimal_place\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DecimalPlace))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount16(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount17(in *jlexer.Lexer, out *Currencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]*Currency, 0, 8)
					} else {
						out.Currencies = []*Currency{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Currency
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Currency)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Currencies = append(out.Currencies, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount17(out *jwriter.Writer, in Currencies) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Currencies {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount17(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount18(in *jlexer.Lexer, out *CreateAccountRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(string)
				}
				*out.Password = string(in.String())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "account_url":
			if in.IsNull() {
				in.Skip()
				out.AccountUrl = nil
			} else {
				if out.AccountUrl == nil {
					out.AccountUrl = new(string)
				}
				*out.AccountUrl = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "referrer_from":
			if in.IsNull() {
				in.Skip()
				out.ReferrerFrom = nil
			} else {
				if out.ReferrerFrom == nil {
					out.ReferrerFrom = new(string)
				}
				*out.ReferrerFrom = string(in.String())
			}
		case "ga_client_id":
			if in.IsNull() {
				in.Skip()
				out.GaClientId = nil
			} else {
				if out.GaClientId == nil {
					out.GaClientId = new(string)
				}
				*out.GaClientId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount18(out *jwriter.Writer, in CreateAccountRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.Password != nil {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Password))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.AccountUrl != nil {
		const prefix string = ",\"account_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountUrl))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.ReferrerFrom != nil {
		const prefix string = ",\"referrer_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerFrom))
	}
	if in.GaClientId != nil {
		const prefix string = ",\"ga_client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GaClientId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateAccountRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateAccountRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount18(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount19(in *jlexer.Lexer, out *ConfirmEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "owner_id":
			if in.IsNull() {
				in.Skip()
				out.OwnerId = nil
			} else {
				if out.OwnerId == nil {
					out.OwnerId = new(string)
				}
				*out.OwnerId = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "owner_name":
			if in.IsNull() {
				in.Skip()
				out.OwnerName = nil
			} else {
				if out.OwnerName == nil {
					out.OwnerName = new(string)
				}
				*out.OwnerName = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount19(out *jwriter.Writer, in ConfirmEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.OwnerId != nil {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerId))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.OwnerName != nil {
		const prefix string = ",\"owner_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerName))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount19(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount20(in *jlexer.Lexer, out *ChangeEmailEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "expired_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiredIn = nil
			} else {
				if out.ExpiredIn == nil {
					out.ExpiredIn = new(int64)
				}
				*out.ExpiredIn = int64(in.Int64())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "sender_name":
			if in.IsNull() {
				in.Skip()
				out.SenderName = nil
			} else {
				if out.SenderName == nil {
					out.SenderName = new(string)
				}
				*out.SenderName = string(in.String())
			}
		case "account_name":
			if in.IsNull() {
				in.Skip()
				out.AccountName = nil
			} else {
				if out.AccountName == nil {
					out.AccountName = new(string)
				}
				*out.AccountName = string(in.String())
			}
		case "account_logo_url":
			if in.IsNull() {
				in.Skip()
				out.AccountLogoUrl = nil
			} else {
				if out.AccountLogoUrl == nil {
					out.AccountLogoUrl = new(string)
				}
				*out.AccountLogoUrl = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount20(out *jwriter.Writer, in ChangeEmailEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ExpiredIn != nil {
		const prefix string = ",\"expired_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpiredIn))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.SenderName != nil {
		const prefix string = ",\"sender_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SenderName))
	}
	if in.AccountName != nil {
		const prefix string = ",\"account_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountName))
	}
	if in.AccountLogoUrl != nil {
		const prefix string = ",\"account_logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountLogoUrl))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeEmailEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeEmailEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeEmailEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeEmailEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount20(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours(in *jlexer.Lexer, out *BusinessHours_WorkingDay) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(string)
				}
				*out.Weekday = string(in.String())
			}
		case "start_time":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(string)
				}
				*out.StartTime = string(in.String())
			}
		case "end_time":
			if in.IsNull() {
				in.Skip()
				out.EndTime = nil
			} else {
				if out.EndTime == nil {
					out.EndTime = new(string)
				}
				*out.EndTime = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours(out *jwriter.Writer, in BusinessHours_WorkingDay) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Weekday != nil {
		const prefix string = ",\"weekday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Weekday))
	}
	if in.StartTime != nil {
		const prefix string = ",\"start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartTime))
	}
	if in.EndTime != nil {
		const prefix string = ",\"end_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours_WorkingDay) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours_WorkingDay) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours_WorkingDay) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours_WorkingDay) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours1(in *jlexer.Lexer, out *BusinessHours_Holiday) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		case "month":
			if in.IsNull() {
				in.Skip()
				out.Month = nil
			} else {
				if out.Month == nil {
					out.Month = new(int32)
				}
				*out.Month = int32(in.Int32())
			}
		case "day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				if out.Day == nil {
					out.Day = new(int32)
				}
				*out.Day = int32(in.Int32())
			}
		case "weekday":
			if in.IsNull() {
				in.Skip()
				out.Weekday = nil
			} else {
				if out.Weekday == nil {
					out.Weekday = new(string)
				}
				*out.Weekday = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "start_time":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(string)
				}
				*out.StartTime = string(in.String())
			}
		case "end_time":
			if in.IsNull() {
				in.Skip()
				out.EndTime = nil
			} else {
				if out.EndTime == nil {
					out.EndTime = new(string)
				}
				*out.EndTime = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours1(out *jwriter.Writer, in BusinessHours_Holiday) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	if in.Month != nil {
		const prefix string = ",\"month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Month))
	}
	if in.Day != nil {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Day))
	}
	if in.Weekday != nil {
		const prefix string = ",\"weekday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Weekday))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.StartTime != nil {
		const prefix string = ",\"start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartTime))
	}
	if in.EndTime != nil {
		const prefix string = ",\"end_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours_Holiday) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours_Holiday) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccountBusinessHours1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours_Holiday) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours_Holiday) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccountBusinessHours1(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount21(in *jlexer.Lexer, out *BusinessHours) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "working_days":
			if in.IsNull() {
				in.Skip()
				out.WorkingDays = nil
			} else {
				in.Delim('[')
				if out.WorkingDays == nil {
					if !in.IsDelim(']') {
						out.WorkingDays = make([]*BusinessHours_WorkingDay, 0, 8)
					} else {
						out.WorkingDays = []*BusinessHours_WorkingDay{}
					}
				} else {
					out.WorkingDays = (out.WorkingDays)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *BusinessHours_WorkingDay
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(BusinessHours_WorkingDay)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.WorkingDays = append(out.WorkingDays, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "holidays":
			if in.IsNull() {
				in.Skip()
				out.Holidays = nil
			} else {
				in.Delim('[')
				if out.Holidays == nil {
					if !in.IsDelim(']') {
						out.Holidays = make([]*BusinessHours_Holiday, 0, 8)
					} else {
						out.Holidays = []*BusinessHours_Holiday{}
					}
				} else {
					out.Holidays = (out.Holidays)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *BusinessHours_Holiday
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(BusinessHours_Holiday)
						}
						(*v17).UnmarshalEasyJSON(in)
					}
					out.Holidays = append(out.Holidays, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount21(out *jwriter.Writer, in BusinessHours) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if len(in.WorkingDays) != 0 {
		const prefix string = ",\"working_days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.WorkingDays {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Holidays) != 0 {
		const prefix string = ",\"holidays\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Holidays {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusinessHours) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusinessHours) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusinessHours) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusinessHours) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount21(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount22(in *jlexer.Lexer, out *Agents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "Agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]*Agent, 0, 8)
					} else {
						out.Agents = []*Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Agent
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Agent)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Agents = append(out.Agents, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount22(out *jwriter.Writer, in Agents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if len(in.Agents) != 0 {
		const prefix string = ",\"Agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Agents {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Agents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Agents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount22(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount23(in *jlexer.Lexer, out *AgentPerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderAuth1(in, &*out.Perm)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount23(out *jwriter.Writer, in AgentPerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderAuth1(out, *in.Perm)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentPerm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentPerm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentPerm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentPerm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount23(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount24(in *jlexer.Lexer, out *AgentGroups) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "Groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*AgentGroup, 0, 8)
					} else {
						out.Groups = []*AgentGroup{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *AgentGroup
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(AgentGroup)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount24(out *jwriter.Writer, in AgentGroups) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"Groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Groups {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentGroups) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentGroups) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentGroups) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentGroups) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount24(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount25(in *jlexer.Lexer, out *AgentGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "logo_url":
			if in.IsNull() {
				in.Skip()
				out.LogoUrl = nil
			} else {
				if out.LogoUrl == nil {
					out.LogoUrl = new(string)
				}
				*out.LogoUrl = string(in.String())
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Agent, 0, 8)
					} else {
						out.Members = []*Agent{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *Agent
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(Agent)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "members_count":
			if in.IsNull() {
				in.Skip()
				out.MembersCount = nil
			} else {
				if out.MembersCount == nil {
					out.MembersCount = new(int32)
				}
				*out.MembersCount = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount25(out *jwriter.Writer, in AgentGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.LogoUrl != nil {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoUrl))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Members {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.MembersCount != nil {
		const prefix string = ",\"members_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.MembersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount25(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount26(in *jlexer.Lexer, out *Agent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "emails":
			if in.IsNull() {
				in.Skip()
				out.Emails = nil
			} else {
				in.Delim('[')
				if out.Emails == nil {
					if !in.IsDelim(']') {
						out.Emails = make([]string, 0, 4)
					} else {
						out.Emails = []string{}
					}
				} else {
					out.Emails = (out.Emails)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Emails = append(out.Emails, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phones":
			if in.IsNull() {
				in.Skip()
				out.Phones = nil
			} else {
				in.Delim('[')
				if out.Phones == nil {
					if !in.IsDelim(']') {
						out.Phones = make([]string, 0, 4)
					} else {
						out.Phones = []string{}
					}
				} else {
					out.Phones = (out.Phones)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.Phones = append(out.Phones, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "is_owner":
			if in.IsNull() {
				in.Skip()
				out.IsOwner = nil
			} else {
				if out.IsOwner == nil {
					out.IsOwner = new(bool)
				}
				*out.IsOwner = bool(in.Bool())
			}
		case "job_title":
			if in.IsNull() {
				in.Skip()
				out.JobTitle = nil
			} else {
				if out.JobTitle == nil {
					out.JobTitle = new(string)
				}
				*out.JobTitle = string(in.String())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(string)
				}
				*out.Gender = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "encrypted_password":
			if in.IsNull() {
				in.Skip()
				out.EncryptedPassword = nil
			} else {
				if out.EncryptedPassword == nil {
					out.EncryptedPassword = new(string)
				}
				*out.EncryptedPassword = string(in.String())
			}
		case "joined":
			if in.IsNull() {
				in.Skip()
				out.Joined = nil
			} else {
				if out.Joined == nil {
					out.Joined = new(int64)
				}
				*out.Joined = int64(in.Int64())
			}
		case "invited_by":
			if in.IsNull() {
				in.Skip()
				out.InvitedBy = nil
			} else {
				if out.InvitedBy == nil {
					out.InvitedBy = new(string)
				}
				*out.InvitedBy = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "password_changed":
			if in.IsNull() {
				in.Skip()
				out.PasswordChanged = nil
			} else {
				if out.PasswordChanged == nil {
					out.PasswordChanged = new(int64)
				}
				*out.PasswordChanged = int64(in.Int64())
			}
		case "seen":
			if in.IsNull() {
				in.Skip()
				out.Seen = nil
			} else {
				if out.Seen == nil {
					out.Seen = new(int64)
				}
				*out.Seen = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderAuth1(in, &*out.Perm)
			}
		case "last_login":
			if in.IsNull() {
				in.Skip()
				out.LastLogin = nil
			} else {
				if out.LastLogin == nil {
					out.LastLogin = new(int64)
				}
				*out.LastLogin = int64(in.Int64())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "client_id":
			if in.IsNull() {
				in.Skip()
				out.ClientId = nil
			} else {
				if out.ClientId == nil {
					out.ClientId = new(string)
				}
				*out.ClientId = string(in.String())
			}
		case "is_supervisor":
			if in.IsNull() {
				in.Skip()
				out.IsSupervisor = nil
			} else {
				if out.IsSupervisor == nil {
					out.IsSupervisor = new(bool)
				}
				*out.IsSupervisor = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount26(out *jwriter.Writer, in Agent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if len(in.Emails) != 0 {
		const prefix string = ",\"emails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Emails {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.Phones) != 0 {
		const prefix string = ",\"phones\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Phones {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.IsOwner != nil {
		const prefix string = ",\"is_owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsOwner))
	}
	if in.JobTitle != nil {
		const prefix string = ",\"job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JobTitle))
	}
	if in.Gender != nil {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Gender))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Location))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.EncryptedPassword != nil {
		const prefix string = ",\"encrypted_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EncryptedPassword))
	}
	if in.Joined != nil {
		const prefix string = ",\"joined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Joined))
	}
	if in.InvitedBy != nil {
		const prefix string = ",\"invited_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InvitedBy))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.PasswordChanged != nil {
		const prefix string = ",\"password_changed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PasswordChanged))
	}
	if in.Seen != nil {
		const prefix string = ",\"seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Seen))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderAuth1(out, *in.Perm)
	}
	if in.LastLogin != nil {
		const prefix string = ",\"last_login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.LastLogin))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.ClientId != nil {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ClientId))
	}
	if in.IsSupervisor != nil {
		const prefix string = ",\"is_supervisor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsSupervisor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Agent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Agent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount26(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount27(in *jlexer.Lexer, out *AccountV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(Agent)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "subscription":
			if in.IsNull() {
				in.Skip()
				out.Subscription = nil
			} else {
				if out.Subscription == nil {
					out.Subscription = new(payment.Subscription)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment(in, &*out.Subscription)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount27(out *jwriter.Writer, in AccountV3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Owner != nil {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Owner).MarshalEasyJSON(out)
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment(out, *in.Subscription)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount27(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment(in *jlexer.Lexer, out *payment.Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "promotion_code":
			if in.IsNull() {
				in.Skip()
				out.PromotionCode = nil
			} else {
				if out.PromotionCode == nil {
					out.PromotionCode = new(string)
				}
				*out.PromotionCode = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "started":
			if in.IsNull() {
				in.Skip()
				out.Started = nil
			} else {
				if out.Started == nil {
					out.Started = new(int64)
				}
				*out.Started = int64(in.Int64())
			}
		case "due_date":
			if in.IsNull() {
				in.Skip()
				out.DueDate = nil
			} else {
				if out.DueDate == nil {
					out.DueDate = new(int64)
				}
				*out.DueDate = int64(in.Int64())
			}
		case "auto_renew":
			if in.IsNull() {
				in.Skip()
				out.AutoRenew = nil
			} else {
				if out.AutoRenew == nil {
					out.AutoRenew = new(bool)
				}
				*out.AutoRenew = bool(in.Bool())
			}
		case "billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.BillingCycleMonth = nil
			} else {
				if out.BillingCycleMonth == nil {
					out.BillingCycleMonth = new(uint32)
				}
				*out.BillingCycleMonth = uint32(in.Uint32())
			}
		case "next_billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.NextBillingCycleMonth = nil
			} else {
				if out.NextBillingCycleMonth == nil {
					out.NextBillingCycleMonth = new(uint32)
				}
				*out.NextBillingCycleMonth = uint32(in.Uint32())
			}
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "addons":
			if in.IsNull() {
				in.Skip()
				out.Addons = nil
			} else {
				in.Delim('[')
				if out.Addons == nil {
					if !in.IsDelim(']') {
						out.Addons = make([]*payment.Addon, 0, 8)
					} else {
						out.Addons = []*payment.Addon{}
					}
				} else {
					out.Addons = (out.Addons)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *payment.Addon
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(payment.Addon)
						}
						easyjsonC9b74c43DecodeGithubComSubizHeaderPayment1(in, &*v37)
					}
					out.Addons = append(out.Addons, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credit":
			if in.IsNull() {
				in.Skip()
				out.Credit = nil
			} else {
				if out.Credit == nil {
					out.Credit = new(float32)
				}
				*out.Credit = float32(in.Float32())
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*payment.Note, 0, 8)
					} else {
						out.Notes = []*payment.Note{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *payment.Note
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(payment.Note)
						}
						easyjsonC9b74c43DecodeGithubComSubizHeaderPayment2(in, &*v38)
					}
					out.Notes = append(out.Notes, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "referral_by":
			if in.IsNull() {
				in.Skip()
				out.ReferralBy = nil
			} else {
				if out.ReferralBy == nil {
					out.ReferralBy = new(string)
				}
				*out.ReferralBy = string(in.String())
			}
		case "customer":
			if in.IsNull() {
				in.Skip()
				out.Customer = nil
			} else {
				if out.Customer == nil {
					out.Customer = new(payment.Customer)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment3(in, &*out.Customer)
			}
		case "primary_payment_method":
			if in.IsNull() {
				in.Skip()
				out.PrimaryPaymentMethod = nil
			} else {
				if out.PrimaryPaymentMethod == nil {
					out.PrimaryPaymentMethod = new(string)
				}
				*out.PrimaryPaymentMethod = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(payment.Limit)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment4(in, &*out.Limit)
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "auto_charge":
			if in.IsNull() {
				in.Skip()
				out.AutoCharge = nil
			} else {
				if out.AutoCharge == nil {
					out.AutoCharge = new(bool)
				}
				*out.AutoCharge = bool(in.Bool())
			}
		case "ended":
			if in.IsNull() {
				in.Skip()
				out.Ended = nil
			} else {
				if out.Ended == nil {
					out.Ended = new(int64)
				}
				*out.Ended = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment(out *jwriter.Writer, in payment.Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.PromotionCode != nil {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PromotionCode))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Started != nil {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Started))
	}
	if in.DueDate != nil {
		const prefix string = ",\"due_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DueDate))
	}
	if in.AutoRenew != nil {
		const prefix string = ",\"auto_renew\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutoRenew))
	}
	if in.BillingCycleMonth != nil {
		const prefix string = ",\"billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.BillingCycleMonth))
	}
	if in.NextBillingCycleMonth != nil {
		const prefix string = ",\"next_billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.NextBillingCycleMonth))
	}
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if len(in.Addons) != 0 {
		const prefix string = ",\"addons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.Addons {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					easyjsonC9b74c43EncodeGithubComSubizHeaderPayment1(out, *v40)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Credit != nil {
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Credit))
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Notes {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					easyjsonC9b74c43EncodeGithubComSubizHeaderPayment2(out, *v42)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ReferralBy != nil {
		const prefix string = ",\"referral_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferralBy))
	}
	if in.Customer != nil {
		const prefix string = ",\"customer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment3(out, *in.Customer)
	}
	if in.PrimaryPaymentMethod != nil {
		const prefix string = ",\"primary_payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PrimaryPaymentMethod))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment4(out, *in.Limit)
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.AutoCharge != nil {
		const prefix string = ",\"auto_charge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutoCharge))
	}
	if in.Ended != nil {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Ended))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment4(in *jlexer.Lexer, out *payment.Limit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "max_automations":
			if in.IsNull() {
				in.Skip()
				out.MaxAutomations = nil
			} else {
				if out.MaxAutomations == nil {
					out.MaxAutomations = new(uint32)
				}
				*out.MaxAutomations = uint32(in.Uint32())
			}
		case "max_segments":
			if in.IsNull() {
				in.Skip()
				out.MaxSegments = nil
			} else {
				if out.MaxSegments == nil {
					out.MaxSegments = new(uint32)
				}
				*out.MaxSegments = uint32(in.Uint32())
			}
		case "max_agents":
			if in.IsNull() {
				in.Skip()
				out.MaxAgents = nil
			} else {
				if out.MaxAgents == nil {
					out.MaxAgents = new(uint32)
				}
				*out.MaxAgents = uint32(in.Uint32())
			}
		case "can_buy_agent":
			if in.IsNull() {
				in.Skip()
				out.CanBuyAgent = nil
			} else {
				if out.CanBuyAgent == nil {
					out.CanBuyAgent = new(bool)
				}
				*out.CanBuyAgent = bool(in.Bool())
			}
		case "automation_webhook_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationWebhookQuota = nil
			} else {
				if out.AutomationWebhookQuota == nil {
					out.AutomationWebhookQuota = new(uint32)
				}
				*out.AutomationWebhookQuota = uint32(in.Uint32())
			}
		case "automation_email_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationEmailQuota = nil
			} else {
				if out.AutomationEmailQuota == nil {
					out.AutomationEmailQuota = new(uint32)
				}
				*out.AutomationEmailQuota = uint32(in.Uint32())
			}
		case "automation_message_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationMessageQuota = nil
			} else {
				if out.AutomationMessageQuota == nil {
					out.AutomationMessageQuota = new(uint32)
				}
				*out.AutomationMessageQuota = uint32(in.Uint32())
			}
		case "max_rules":
			if in.IsNull() {
				in.Skip()
				out.MaxRules = nil
			} else {
				if out.MaxRules == nil {
					out.MaxRules = new(uint32)
				}
				*out.MaxRules = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment4(out *jwriter.Writer, in payment.Limit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.MaxAutomations != nil {
		const prefix string = ",\"max_automations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAutomations))
	}
	if in.MaxSegments != nil {
		const prefix string = ",\"max_segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxSegments))
	}
	if in.MaxAgents != nil {
		const prefix string = ",\"max_agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAgents))
	}
	if in.CanBuyAgent != nil {
		const prefix string = ",\"can_buy_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanBuyAgent))
	}
	if in.AutomationWebhookQuota != nil {
		const prefix string = ",\"automation_webhook_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationWebhookQuota))
	}
	if in.AutomationEmailQuota != nil {
		const prefix string = ",\"automation_email_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationEmailQuota))
	}
	if in.AutomationMessageQuota != nil {
		const prefix string = ",\"automation_message_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationMessageQuota))
	}
	if in.MaxRules != nil {
		const prefix string = ",\"max_rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxRules))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment3(in *jlexer.Lexer, out *payment.Customer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if out.Contacts == nil {
					if !in.IsDelim(']') {
						out.Contacts = make([]*payment.Contact, 0, 8)
					} else {
						out.Contacts = []*payment.Contact{}
					}
				} else {
					out.Contacts = (out.Contacts)[:0]
				}
				for !in.IsDelim(']') {
					var v43 *payment.Contact
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(payment.Contact)
						}
						easyjsonC9b74c43DecodeGithubComSubizHeaderPayment5(in, &*v43)
					}
					out.Contacts = append(out.Contacts, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "billing_info":
			if in.IsNull() {
				in.Skip()
				out.BillingInfo = nil
			} else {
				if out.BillingInfo == nil {
					out.BillingInfo = new(payment.BillingInfo)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment6(in, &*out.BillingInfo)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment3(out *jwriter.Writer, in payment.Customer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Contacts) != 0 {
		const prefix string = ",\"contacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Contacts {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					easyjsonC9b74c43EncodeGithubComSubizHeaderPayment5(out, *v45)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.BillingInfo != nil {
		const prefix string = ",\"billing_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment6(out, *in.BillingInfo)
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment6(in *jlexer.Lexer, out *payment.BillingInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "vat":
			if in.IsNull() {
				in.Skip()
				out.Vat = nil
			} else {
				if out.Vat == nil {
					out.Vat = new(string)
				}
				*out.Vat = string(in.String())
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment6(out *jwriter.Writer, in payment.BillingInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Address != nil {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Address))
	}
	if in.Vat != nil {
		const prefix string = ",\"vat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Vat))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment5(in *jlexer.Lexer, out *payment.Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "job_title":
			if in.IsNull() {
				in.Skip()
				out.JobTitle = nil
			} else {
				if out.JobTitle == nil {
					out.JobTitle = new(string)
				}
				*out.JobTitle = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "primary":
			if in.IsNull() {
				in.Skip()
				out.Primary = nil
			} else {
				if out.Primary == nil {
					out.Primary = new(bool)
				}
				*out.Primary = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment5(out *jwriter.Writer, in payment.Contact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.JobTitle != nil {
		const prefix string = ",\"job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JobTitle))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Primary != nil {
		const prefix string = ",\"primary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Primary))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment2(in *jlexer.Lexer, out *payment.Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment2(out *jwriter.Writer, in payment.Note) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Message))
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderPayment1(in *jlexer.Lexer, out *payment.Addon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(payment.Currency)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Currency).UnmarshalJSON(data))
				}
			}
		case "charge_type":
			if in.IsNull() {
				in.Skip()
				out.ChargeType = nil
			} else {
				if out.ChargeType == nil {
					out.ChargeType = new(string)
				}
				*out.ChargeType = string(in.String())
			}
		case "period":
			if in.IsNull() {
				in.Skip()
				out.Period = nil
			} else {
				if out.Period == nil {
					out.Period = new(int32)
				}
				*out.Period = int32(in.Int32())
			}
		case "period_unit":
			if in.IsNull() {
				in.Skip()
				out.PeriodUnit = nil
			} else {
				if out.PeriodUnit == nil {
					out.PeriodUnit = new(string)
				}
				*out.PeriodUnit = string(in.String())
			}
		case "quantity":
			if in.IsNull() {
				in.Skip()
				out.Quantity = nil
			} else {
				if out.Quantity == nil {
					out.Quantity = new(int32)
				}
				*out.Quantity = int32(in.Int32())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderPayment1(out *jwriter.Writer, in payment.Addon) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Currency))
	}
	if in.ChargeType != nil {
		const prefix string = ",\"charge_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChargeType))
	}
	if in.Period != nil {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Period))
	}
	if in.PeriodUnit != nil {
		const prefix string = ",\"period_unit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PeriodUnit))
	}
	if in.Quantity != nil {
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Quantity))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount28(in *jlexer.Lexer, out *AccountConfirmSuccessEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "agent_name":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		case "from_time":
			if in.IsNull() {
				in.Skip()
				out.FromTime = nil
			} else {
				if out.FromTime == nil {
					out.FromTime = new(int64)
				}
				*out.FromTime = int64(in.Int64())
			}
		case "to_time":
			if in.IsNull() {
				in.Skip()
				out.ToTime = nil
			} else {
				if out.ToTime == nil {
					out.ToTime = new(int64)
				}
				*out.ToTime = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount28(out *jwriter.Writer, in AccountConfirmSuccessEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentName))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	if in.FromTime != nil {
		const prefix string = ",\"from_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FromTime))
	}
	if in.ToTime != nil {
		const prefix string = ",\"to_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ToTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfirmSuccessEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfirmSuccessEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfirmSuccessEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfirmSuccessEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount28(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount29(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "logo_url":
			if in.IsNull() {
				in.Skip()
				out.LogoUrl = nil
			} else {
				if out.LogoUrl == nil {
					out.LogoUrl = new(string)
				}
				*out.LogoUrl = string(in.String())
			}
		case "owner_id":
			if in.IsNull() {
				in.Skip()
				out.OwnerId = nil
			} else {
				if out.OwnerId == nil {
					out.OwnerId = new(string)
				}
				*out.OwnerId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "confirmed":
			if in.IsNull() {
				in.Skip()
				out.Confirmed = nil
			} else {
				if out.Confirmed == nil {
					out.Confirmed = new(int64)
				}
				*out.Confirmed = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "slogan":
			if in.IsNull() {
				in.Skip()
				out.Slogan = nil
			} else {
				if out.Slogan == nil {
					out.Slogan = new(string)
				}
				*out.Slogan = string(in.String())
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(string)
				}
				*out.City = string(in.String())
			}
		case "zip_code":
			if in.IsNull() {
				in.Skip()
				out.ZipCode = nil
			} else {
				if out.ZipCode == nil {
					out.ZipCode = new(int32)
				}
				*out.ZipCode = int32(in.Int32())
			}
		case "tax_id":
			if in.IsNull() {
				in.Skip()
				out.TaxId = nil
			} else {
				if out.TaxId == nil {
					out.TaxId = new(string)
				}
				*out.TaxId = string(in.String())
			}
		case "facebook":
			if in.IsNull() {
				in.Skip()
				out.Facebook = nil
			} else {
				if out.Facebook == nil {
					out.Facebook = new(string)
				}
				*out.Facebook = string(in.String())
			}
		case "twitter":
			if in.IsNull() {
				in.Skip()
				out.Twitter = nil
			} else {
				if out.Twitter == nil {
					out.Twitter = new(string)
				}
				*out.Twitter = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(string)
				}
				*out.Lang = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(payment.Limit)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment4(in, &*out.Limit)
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(string)
				}
				*out.Country = string(in.String())
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "date_format":
			if in.IsNull() {
				in.Skip()
				out.DateFormat = nil
			} else {
				if out.DateFormat == nil {
					out.DateFormat = new(string)
				}
				*out.DateFormat = string(in.String())
			}
		case "business_hours":
			if in.IsNull() {
				in.Skip()
				out.BusinessHours = nil
			} else {
				if out.BusinessHours == nil {
					out.BusinessHours = new(BusinessHours)
				}
				(*out.BusinessHours).UnmarshalEasyJSON(in)
			}
		case "referrer_from":
			if in.IsNull() {
				in.Skip()
				out.ReferrerFrom = nil
			} else {
				if out.ReferrerFrom == nil {
					out.ReferrerFrom = new(string)
				}
				*out.ReferrerFrom = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount29(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.LogoUrl != nil {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoUrl))
	}
	if in.OwnerId != nil {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Confirmed != nil {
		const prefix string = ",\"confirmed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Confirmed))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Slogan != nil {
		const prefix string = ",\"slogan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Slogan))
	}
	if in.City != nil {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.City))
	}
	if in.ZipCode != nil {
		const prefix string = ",\"zip_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ZipCode))
	}
	if in.TaxId != nil {
		const prefix string = ",\"tax_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TaxId))
	}
	if in.Facebook != nil {
		const prefix string = ",\"facebook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Facebook))
	}
	if in.Twitter != nil {
		const prefix string = ",\"twitter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Twitter))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.Address != nil {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Address))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Lang))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment4(out, *in.Limit)
	}
	if in.Country != nil {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Country))
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.DateFormat != nil {
		const prefix string = ",\"date_format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DateFormat))
	}
	if in.BusinessHours != nil {
		const prefix string = ",\"business_hours\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BusinessHours).MarshalEasyJSON(out)
	}
	if in.ReferrerFrom != nil {
		const prefix string = ",\"referrer_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerFrom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount29(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount30(in *jlexer.Lexer, out *AccSubs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accsub":
			if in.IsNull() {
				in.Skip()
				out.Accsub = nil
			} else {
				in.Delim('[')
				if out.Accsub == nil {
					if !in.IsDelim(']') {
						out.Accsub = make([]*AccSub, 0, 8)
					} else {
						out.Accsub = []*AccSub{}
					}
				} else {
					out.Accsub = (out.Accsub)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *AccSub
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(AccSub)
						}
						(*v46).UnmarshalEasyJSON(in)
					}
					out.Accsub = append(out.Accsub, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount30(out *jwriter.Writer, in AccSubs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Accsub) != 0 {
		const prefix string = ",\"accsub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Accsub {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					(*v48).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccSubs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccSubs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccSubs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccSubs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount30(l, v)
}
func easyjsonC9b74c43DecodeGithubComSubizHeaderAccount31(in *jlexer.Lexer, out *AccSub) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "subscription":
			if in.IsNull() {
				in.Skip()
				out.Subscription = nil
			} else {
				if out.Subscription == nil {
					out.Subscription = new(payment.Subscription)
				}
				easyjsonC9b74c43DecodeGithubComSubizHeaderPayment(in, &*out.Subscription)
			}
		case "agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]*Agent, 0, 8)
					} else {
						out.Agents = []*Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *Agent
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(Agent)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.Agents = append(out.Agents, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stringify":
			if in.IsNull() {
				in.Skip()
				out.Stringify = nil
			} else {
				if out.Stringify == nil {
					out.Stringify = new(string)
				}
				*out.Stringify = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC9b74c43EncodeGithubComSubizHeaderAccount31(out *jwriter.Writer, in AccSub) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC9b74c43EncodeGithubComSubizHeaderPayment(out, *in.Subscription)
	}
	if len(in.Agents) != 0 {
		const prefix string = ",\"agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Agents {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Stringify != nil {
		const prefix string = ",\"stringify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Stringify))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccSub) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccSub) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC9b74c43EncodeGithubComSubizHeaderAccount31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccSub) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccSub) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC9b74c43DecodeGithubComSubizHeaderAccount31(l, v)
}
