// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account/account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/account.proto

It has these top-level messages:
	Agent
	Invitation
	AgentGroup
	ResetPasswordRequest
	AgentPerm
	Account
	GroupMember
	CreateAccountRequest
	LoginRequest
	Agents
	NewPassword
	AgentGroups
	Token
	ConfirmEmail
	InviteEmail
	ResetPasswordEmail
	PasswordChangedEmail
	AccountConfirmSuccessEmail
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "bitbucket.org/subiz/header/auth"
import common "bitbucket.org/subiz/header/common"
import lang "bitbucket.org/subiz/header/lang"
import payment "bitbucket.org/subiz/header/payment"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_AccountRequested   Event = 1000
	Event_AccountSynced      Event = 1001
	Event_AgentGroupDeleted  Event = 0
	Event_AgentLeftGroup     Event = 1
	Event_AgentJoinedGroup   Event = 2
	Event_AgentGroupUpserted Event = 4
	// AgentExpired = 5; // oe only, id
	Event_AgentUpserted Event = 6
	// AgentCreated = 7; // agent
	// AgentStateUpdated = 8; // could be deleted
	Event_AgentPermissionUpdated               Event = 9
	Event_AccountUpserted                      Event = 14
	Event_AccountPlanUpdated                   Event = 16
	Event_AccountStateUpdated                  Event = 17
	Event_AccountConfirmRequest                Event = 19
	Event_HandleExpiredInvitation              Event = 20
	Event_AccountConfirmRequested              Event = 21
	Event_AccountConfirmSuccessEmailRequested  Event = 25
	Event_AccountResetPasswordEmail            Event = 33
	Event_AccountPasswordChangedEmailRequested Event = 34
	Event_AccountInviteEmail                   Event = 22
	Event_AccountDeleted                       Event = 24
	Event_AccountCreated                       Event = 45
	Event_AccountActivated                     Event = 46
	Event_AccountInfoUpdated                   Event = 47
	Event_AgentRejected                        Event = 10
	Event_AgentAccepted                        Event = 11
	Event_AgentInvited                         Event = 13
	Event_AgentDeleted                         Event = 15
	Event_AgentActivated                       Event = 50
	Event_AgentDeactivated                     Event = 51
	Event_AgentInfoUpdated                     Event = 59
)

var Event_name = map[int32]string{
	1000: "AccountRequested",
	1001: "AccountSynced",
	0:    "AgentGroupDeleted",
	1:    "AgentLeftGroup",
	2:    "AgentJoinedGroup",
	4:    "AgentGroupUpserted",
	6:    "AgentUpserted",
	9:    "AgentPermissionUpdated",
	14:   "AccountUpserted",
	16:   "AccountPlanUpdated",
	17:   "AccountStateUpdated",
	19:   "AccountConfirmRequest",
	20:   "HandleExpiredInvitation",
	21:   "AccountConfirmRequested",
	25:   "AccountConfirmSuccessEmailRequested",
	33:   "AccountResetPasswordEmail",
	34:   "AccountPasswordChangedEmailRequested",
	22:   "AccountInviteEmail",
	24:   "AccountDeleted",
	45:   "AccountCreated",
	46:   "AccountActivated",
	47:   "AccountInfoUpdated",
	10:   "AgentRejected",
	11:   "AgentAccepted",
	13:   "AgentInvited",
	15:   "AgentDeleted",
	50:   "AgentActivated",
	51:   "AgentDeactivated",
	59:   "AgentInfoUpdated",
}
var Event_value = map[string]int32{
	"AccountRequested":                     1000,
	"AccountSynced":                        1001,
	"AgentGroupDeleted":                    0,
	"AgentLeftGroup":                       1,
	"AgentJoinedGroup":                     2,
	"AgentGroupUpserted":                   4,
	"AgentUpserted":                        6,
	"AgentPermissionUpdated":               9,
	"AccountUpserted":                      14,
	"AccountPlanUpdated":                   16,
	"AccountStateUpdated":                  17,
	"AccountConfirmRequest":                19,
	"HandleExpiredInvitation":              20,
	"AccountConfirmRequested":              21,
	"AccountConfirmSuccessEmailRequested":  25,
	"AccountResetPasswordEmail":            33,
	"AccountPasswordChangedEmailRequested": 34,
	"AccountInviteEmail":                   22,
	"AccountDeleted":                       24,
	"AccountCreated":                       45,
	"AccountActivated":                     46,
	"AccountInfoUpdated":                   47,
	"AgentRejected":                        10,
	"AgentAccepted":                        11,
	"AgentInvited":                         13,
	"AgentDeleted":                         15,
	"AgentActivated":                       50,
	"AgentDeactivated":                     51,
	"AgentInfoUpdated":                     59,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Agent_Gender int32

const (
	Agent_unset    Agent_Gender = 0
	Agent_male     Agent_Gender = 1
	Agent_female   Agent_Gender = 2
	Agent_bisexual Agent_Gender = 3
	Agent_asexual  Agent_Gender = 4
)

var Agent_Gender_name = map[int32]string{
	0: "unset",
	1: "male",
	2: "female",
	3: "bisexual",
	4: "asexual",
}
var Agent_Gender_value = map[string]int32{
	"unset":    0,
	"male":     1,
	"female":   2,
	"bisexual": 3,
	"asexual":  4,
}

func (x Agent_Gender) Enum() *Agent_Gender {
	p := new(Agent_Gender)
	*p = x
	return p
}
func (x Agent_Gender) String() string {
	return proto.EnumName(Agent_Gender_name, int32(x))
}
func (x *Agent_Gender) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Agent_Gender_value, data, "Agent_Gender")
	if err != nil {
		return err
	}
	*x = Agent_Gender(value)
	return nil
}
func (Agent_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Agent_AgentState int32

const (
	Agent_pending  Agent_AgentState = 0
	Agent_active   Agent_AgentState = 1
	Agent_inactive Agent_AgentState = 2
	Agent_deleted  Agent_AgentState = 3
)

var Agent_AgentState_name = map[int32]string{
	0: "pending",
	1: "active",
	2: "inactive",
	3: "deleted",
}
var Agent_AgentState_value = map[string]int32{
	"pending":  0,
	"active":   1,
	"inactive": 2,
	"deleted":  3,
}

func (x Agent_AgentState) Enum() *Agent_AgentState {
	p := new(Agent_AgentState)
	*p = x
	return p
}
func (x Agent_AgentState) String() string {
	return proto.EnumName(Agent_AgentState_name, int32(x))
}
func (x *Agent_AgentState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Agent_AgentState_value, data, "Agent_AgentState")
	if err != nil {
		return err
	}
	*x = Agent_AgentState(value)
	return nil
}
func (Agent_AgentState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Account_State int32

const (
	Account_pending   Account_State = 0
	Account_activated Account_State = 1
	Account_locked    Account_State = 2
	Account_deleted   Account_State = 3
)

var Account_State_name = map[int32]string{
	0: "pending",
	1: "activated",
	2: "locked",
	3: "deleted",
}
var Account_State_value = map[string]int32{
	"pending":   0,
	"activated": 1,
	"locked":    2,
	"deleted":   3,
}

func (x Account_State) Enum() *Account_State {
	p := new(Account_State)
	*p = x
	return p
}
func (x Account_State) String() string {
	return proto.EnumName(Account_State_name, int32(x))
}
func (x *Account_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Account_State_value, data, "Account_State")
	if err != nil {
		return err
	}
	*x = Account_State(value)
	return nil
}
func (Account_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Agent struct {
	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId         *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Fullname          *string         `protobuf:"bytes,4,opt,name=fullname" json:"fullname,omitempty"`
	Email             *string         `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Emails            []string        `protobuf:"bytes,6,rep,name=emails" json:"emails,omitempty"`
	Phones            []string        `protobuf:"bytes,7,rep,name=phones" json:"phones,omitempty"`
	Phone             *string         `protobuf:"bytes,8,opt,name=phone" json:"phone,omitempty"`
	IsOwner           *bool           `protobuf:"varint,10,opt,name=is_owner,json=isOwner" json:"is_owner,omitempty"`
	JobTitle          *string         `protobuf:"bytes,11,opt,name=job_title,json=jobTitle" json:"job_title,omitempty"`
	Gender            *string         `protobuf:"bytes,12,opt,name=gender" json:"gender,omitempty"`
	AvatarUrl         *string         `protobuf:"bytes,13,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Lang              *string         `protobuf:"bytes,14,opt,name=lang" json:"lang,omitempty"`
	Location          *string         `protobuf:"bytes,15,opt,name=location" json:"location,omitempty"`
	Timezone          *string         `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	EncryptedPassword *string         `protobuf:"bytes,17,opt,name=encrypted_password,json=encryptedPassword" json:"encrypted_password,omitempty"`
	Joined            *int64          `protobuf:"varint,20,opt,name=joined" json:"joined,omitempty"`
	InvitedBy         *string         `protobuf:"bytes,21,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	State             *string         `protobuf:"bytes,22,opt,name=state" json:"state,omitempty"`
	PasswordChanged   *int64          `protobuf:"varint,23,opt,name=password_changed,json=passwordChanged" json:"password_changed,omitempty"`
	Seen              *int64          `protobuf:"varint,24,opt,name=seen" json:"seen,omitempty"`
	Modified          *int64          `protobuf:"varint,25,opt,name=modified" json:"modified,omitempty"`
	Method            *auth.Method    `protobuf:"bytes,27,opt,name=method" json:"method,omitempty"`
	Account           *Account        `protobuf:"bytes,28,opt,name=account" json:"account,omitempty"`
	CountryCode       *string         `protobuf:"bytes,29,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Agent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Agent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Agent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Agent) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *Agent) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Agent) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *Agent) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *Agent) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Agent) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *Agent) GetJobTitle() string {
	if m != nil && m.JobTitle != nil {
		return *m.JobTitle
	}
	return ""
}

func (m *Agent) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *Agent) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *Agent) GetLang() string {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return ""
}

func (m *Agent) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *Agent) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Agent) GetEncryptedPassword() string {
	if m != nil && m.EncryptedPassword != nil {
		return *m.EncryptedPassword
	}
	return ""
}

func (m *Agent) GetJoined() int64 {
	if m != nil && m.Joined != nil {
		return *m.Joined
	}
	return 0
}

func (m *Agent) GetInvitedBy() string {
	if m != nil && m.InvitedBy != nil {
		return *m.InvitedBy
	}
	return ""
}

func (m *Agent) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Agent) GetPasswordChanged() int64 {
	if m != nil && m.PasswordChanged != nil {
		return *m.PasswordChanged
	}
	return 0
}

func (m *Agent) GetSeen() int64 {
	if m != nil && m.Seen != nil {
		return *m.Seen
	}
	return 0
}

func (m *Agent) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Agent) GetMethod() *auth.Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *Agent) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Agent) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

type Invitation struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id               *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FromId           *string         `protobuf:"bytes,4,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	Email            *string         `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	AgentId          *string         `protobuf:"bytes,6,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Sent             *int64          `protobuf:"varint,7,opt,name=sent" json:"sent,omitempty"`
	Replied          *int64          `protobuf:"varint,8,opt,name=replied" json:"replied,omitempty"`
	AgentFullname    *string         `protobuf:"bytes,9,opt,name=agent_fullname,json=agentFullname" json:"agent_fullname,omitempty"`
	AgentJobTitle    *string         `protobuf:"bytes,10,opt,name=agent_job_title,json=agentJobTitle" json:"agent_job_title,omitempty"`
	Token            *string         `protobuf:"bytes,11,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Invitation) Reset()                    { *m = Invitation{} }
func (m *Invitation) String() string            { return proto.CompactTextString(m) }
func (*Invitation) ProtoMessage()               {}
func (*Invitation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Invitation) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Invitation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Invitation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Invitation) GetFromId() string {
	if m != nil && m.FromId != nil {
		return *m.FromId
	}
	return ""
}

func (m *Invitation) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Invitation) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *Invitation) GetSent() int64 {
	if m != nil && m.Sent != nil {
		return *m.Sent
	}
	return 0
}

func (m *Invitation) GetReplied() int64 {
	if m != nil && m.Replied != nil {
		return *m.Replied
	}
	return 0
}

func (m *Invitation) GetAgentFullname() string {
	if m != nil && m.AgentFullname != nil {
		return *m.AgentFullname
	}
	return ""
}

func (m *Invitation) GetAgentJobTitle() string {
	if m != nil && m.AgentJobTitle != nil {
		return *m.AgentJobTitle
	}
	return ""
}

func (m *Invitation) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AgentGroup struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      *string         `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	LogoUrl   *string         `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	// members is list of 10 agents in group
	Members          []*Agent `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
	Created          *int64   `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Modified         *int64   `protobuf:"varint,8,opt,name=modified" json:"modified,omitempty"`
	MembersCount     *int32   `protobuf:"varint,9,opt,name=members_count,json=membersCount" json:"members_count,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AgentGroup) Reset()                    { *m = AgentGroup{} }
func (m *AgentGroup) String() string            { return proto.CompactTextString(m) }
func (*AgentGroup) ProtoMessage()               {}
func (*AgentGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentGroup) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AgentGroup) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *AgentGroup) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AgentGroup) GetLogoUrl() string {
	if m != nil && m.LogoUrl != nil {
		return *m.LogoUrl
	}
	return ""
}

func (m *AgentGroup) GetMembers() []*Agent {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *AgentGroup) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *AgentGroup) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *AgentGroup) GetMembersCount() int32 {
	if m != nil && m.MembersCount != nil {
		return *m.MembersCount
	}
	return 0
}

type ResetPasswordRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Email            *string         `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResetPasswordRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ResetPasswordRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

type AgentPerm struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Method           *auth.Method    `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AgentPerm) Reset()                    { *m = AgentPerm{} }
func (m *AgentPerm) String() string            { return proto.CompactTextString(m) }
func (*AgentPerm) ProtoMessage()               {}
func (*AgentPerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AgentPerm) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AgentPerm) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentPerm) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AgentPerm) GetMethod() *auth.Method {
	if m != nil {
		return m.Method
	}
	return nil
}

type Account struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id               *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name             *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Plan             *int32          `protobuf:"varint,4,opt,name=plan" json:"plan,omitempty"`
	LogoUrl          *string         `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	OwnerId          *string         `protobuf:"bytes,6,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	State            *string         `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	Created          *int64          `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Confirmed        *int64          `protobuf:"varint,9,opt,name=confirmed" json:"confirmed,omitempty"`
	Modified         *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	Slogan           *string         `protobuf:"bytes,12,opt,name=slogan" json:"slogan,omitempty"`
	RefererId        *string         `protobuf:"bytes,11,opt,name=referer_id,json=refererId" json:"referer_id,omitempty"`
	City             *string         `protobuf:"bytes,14,opt,name=city" json:"city,omitempty"`
	ZipCode          *int32          `protobuf:"varint,16,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
	TaxId            *string         `protobuf:"bytes,17,opt,name=tax_id,json=taxId" json:"tax_id,omitempty"`
	Facebook         *string         `protobuf:"bytes,18,opt,name=facebook" json:"facebook,omitempty"`
	Twitter          *string         `protobuf:"bytes,22,opt,name=twitter" json:"twitter,omitempty"`
	Phone            *string         `protobuf:"bytes,19,opt,name=phone" json:"phone,omitempty"`
	Address          *string         `protobuf:"bytes,20,opt,name=address" json:"address,omitempty"`
	Url              *string         `protobuf:"bytes,21,opt,name=url" json:"url,omitempty"`
	Lang             *string         `protobuf:"bytes,23,opt,name=lang" json:"lang,omitempty"`
	RefererFrom      *string         `protobuf:"bytes,24,opt,name=referer_from,json=refererFrom" json:"referer_from,omitempty"`
	Timezone         *string         `protobuf:"bytes,26,opt,name=timezone" json:"timezone,omitempty"`
	Limit            *payment.Limit  `protobuf:"bytes,25,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Account) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Account) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Account) GetPlan() int32 {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return 0
}

func (m *Account) GetLogoUrl() string {
	if m != nil && m.LogoUrl != nil {
		return *m.LogoUrl
	}
	return ""
}

func (m *Account) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *Account) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Account) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Account) GetConfirmed() int64 {
	if m != nil && m.Confirmed != nil {
		return *m.Confirmed
	}
	return 0
}

func (m *Account) GetModified() int64 {
	if m != nil && m.Modified != nil {
		return *m.Modified
	}
	return 0
}

func (m *Account) GetSlogan() string {
	if m != nil && m.Slogan != nil {
		return *m.Slogan
	}
	return ""
}

func (m *Account) GetRefererId() string {
	if m != nil && m.RefererId != nil {
		return *m.RefererId
	}
	return ""
}

func (m *Account) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *Account) GetZipCode() int32 {
	if m != nil && m.ZipCode != nil {
		return *m.ZipCode
	}
	return 0
}

func (m *Account) GetTaxId() string {
	if m != nil && m.TaxId != nil {
		return *m.TaxId
	}
	return ""
}

func (m *Account) GetFacebook() string {
	if m != nil && m.Facebook != nil {
		return *m.Facebook
	}
	return ""
}

func (m *Account) GetTwitter() string {
	if m != nil && m.Twitter != nil {
		return *m.Twitter
	}
	return ""
}

func (m *Account) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Account) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Account) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *Account) GetLang() string {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return ""
}

func (m *Account) GetRefererFrom() string {
	if m != nil && m.RefererFrom != nil {
		return *m.RefererFrom
	}
	return ""
}

func (m *Account) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Account) GetLimit() *payment.Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type GroupMember struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GroupId          *string         `protobuf:"bytes,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GroupMember) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *GroupMember) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *GroupMember) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *GroupMember) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type CreateAccountRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Fullname         *string         `protobuf:"bytes,2,opt,name=fullname" json:"fullname,omitempty"`
	Email            *string         `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Lang             *string         `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	Password         *string         `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	AccountName      *string         `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AccountUrl       *string         `protobuf:"bytes,7,opt,name=account_url,json=accountUrl" json:"account_url,omitempty"`
	AvatarUrl        *string         `protobuf:"bytes,8,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Timezone         *string         `protobuf:"bytes,9,opt,name=timezone" json:"timezone,omitempty"`
	Phone            *string         `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
	CountryCode      *string         `protobuf:"bytes,11,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateAccountRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *CreateAccountRequest) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *CreateAccountRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *CreateAccountRequest) GetLang() string {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return ""
}

func (m *CreateAccountRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountUrl() string {
	if m != nil && m.AccountUrl != nil {
		return *m.AccountUrl
	}
	return ""
}

func (m *CreateAccountRequest) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *CreateAccountRequest) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *CreateAccountRequest) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *CreateAccountRequest) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

type LoginRequest struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Email            *string         `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password         *string         `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *LoginRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type Agents struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Agents           []*Agent        `protobuf:"bytes,2,rep,name=Agents" json:"Agents,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (m *Agents) String() string            { return proto.CompactTextString(m) }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Agents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type NewPassword struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Token            *string         `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	NewPassword      *string         `protobuf:"bytes,3,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
	OldPassword      *string         `protobuf:"bytes,5,opt,name=old_password,json=oldPassword" json:"old_password,omitempty"`
	Email            *string         `protobuf:"bytes,8,opt,name=email" json:"email,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *NewPassword) Reset()                    { *m = NewPassword{} }
func (m *NewPassword) String() string            { return proto.CompactTextString(m) }
func (*NewPassword) ProtoMessage()               {}
func (*NewPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NewPassword) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *NewPassword) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *NewPassword) GetNewPassword() string {
	if m != nil && m.NewPassword != nil {
		return *m.NewPassword
	}
	return ""
}

func (m *NewPassword) GetOldPassword() string {
	if m != nil && m.OldPassword != nil {
		return *m.OldPassword
	}
	return ""
}

func (m *NewPassword) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

type AgentGroups struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Groups           []*AgentGroup   `protobuf:"bytes,2,rep,name=Groups" json:"Groups,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AgentGroups) Reset()                    { *m = AgentGroups{} }
func (m *AgentGroups) String() string            { return proto.CompactTextString(m) }
func (*AgentGroups) ProtoMessage()               {}
func (*AgentGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AgentGroups) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AgentGroups) GetGroups() []*AgentGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Token struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	IsSet            *bool           `protobuf:"varint,2,opt,name=is_set,json=isSet" json:"is_set,omitempty"`
	Token            *string         `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountId        *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Token) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Token) GetIsSet() bool {
	if m != nil && m.IsSet != nil {
		return *m.IsSet
	}
	return false
}

func (m *Token) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *Token) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

type ConfirmEmail struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To               *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OwnerId          *string         `protobuf:"bytes,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Token            *string         `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
	ExpiredIn        *int64          `protobuf:"varint,6,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	AccountName      *string         `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	Lang             *lang.L         `protobuf:"varint,8,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	OwnerName        *string         `protobuf:"bytes,9,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	From             *string         `protobuf:"bytes,10,opt,name=from" json:"from,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ConfirmEmail) Reset()                    { *m = ConfirmEmail{} }
func (m *ConfirmEmail) String() string            { return proto.CompactTextString(m) }
func (*ConfirmEmail) ProtoMessage()               {}
func (*ConfirmEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ConfirmEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ConfirmEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *ConfirmEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ConfirmEmail) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *ConfirmEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *ConfirmEmail) GetExpiredIn() int64 {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return 0
}

func (m *ConfirmEmail) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *ConfirmEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

func (m *ConfirmEmail) GetOwnerName() string {
	if m != nil && m.OwnerName != nil {
		return *m.OwnerName
	}
	return ""
}

func (m *ConfirmEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

type InviteEmail struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To               *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SenderId         *string         `protobuf:"bytes,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ExpiredIn        *int64          `protobuf:"varint,5,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token            *string         `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	Lang             *lang.L         `protobuf:"varint,8,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	Fullname         *string         `protobuf:"bytes,9,opt,name=fullname" json:"fullname,omitempty"`
	SenderName       *string         `protobuf:"bytes,10,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	AccountName      *string         `protobuf:"bytes,11,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AccountLogoUrl   *string         `protobuf:"bytes,12,opt,name=account_logo_url,json=accountLogoUrl" json:"account_logo_url,omitempty"`
	From             *string         `protobuf:"bytes,14,opt,name=from" json:"from,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *InviteEmail) Reset()                    { *m = InviteEmail{} }
func (m *InviteEmail) String() string            { return proto.CompactTextString(m) }
func (*InviteEmail) ProtoMessage()               {}
func (*InviteEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InviteEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *InviteEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *InviteEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *InviteEmail) GetSenderId() string {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return ""
}

func (m *InviteEmail) GetExpiredIn() int64 {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return 0
}

func (m *InviteEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *InviteEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

func (m *InviteEmail) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *InviteEmail) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *InviteEmail) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *InviteEmail) GetAccountLogoUrl() string {
	if m != nil && m.AccountLogoUrl != nil {
		return *m.AccountLogoUrl
	}
	return ""
}

func (m *InviteEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

type ResetPasswordEmail struct {
	Ctx  *common.Context `protobuf:"bytes,9,opt,name=ctx" json:"ctx,omitempty"`
	From *string         `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn        *int64  `protobuf:"varint,6,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token            *string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountId        *string `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentName        *string `protobuf:"bytes,7,opt,name=agent_name,json=agentName" json:"agent_name,omitempty"`
	Lang             *lang.L `protobuf:"varint,8,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResetPasswordEmail) Reset()                    { *m = ResetPasswordEmail{} }
func (m *ResetPasswordEmail) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordEmail) ProtoMessage()               {}
func (*ResetPasswordEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ResetPasswordEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ResetPasswordEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *ResetPasswordEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *ResetPasswordEmail) GetExpiredIn() int64 {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return 0
}

func (m *ResetPasswordEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *ResetPasswordEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ResetPasswordEmail) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *ResetPasswordEmail) GetAgentName() string {
	if m != nil && m.AgentName != nil {
		return *m.AgentName
	}
	return ""
}

func (m *ResetPasswordEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

type PasswordChangedEmail struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To               *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentName        *string         `protobuf:"bytes,5,opt,name=agent_name,json=agentName" json:"agent_name,omitempty"`
	Lang             *lang.L         `protobuf:"varint,7,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	From             *string         `protobuf:"bytes,9,opt,name=from" json:"from,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PasswordChangedEmail) Reset()                    { *m = PasswordChangedEmail{} }
func (m *PasswordChangedEmail) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangedEmail) ProtoMessage()               {}
func (*PasswordChangedEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PasswordChangedEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PasswordChangedEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *PasswordChangedEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PasswordChangedEmail) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *PasswordChangedEmail) GetAgentName() string {
	if m != nil && m.AgentName != nil {
		return *m.AgentName
	}
	return ""
}

func (m *PasswordChangedEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

func (m *PasswordChangedEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

type AccountConfirmSuccessEmail struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To               *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string         `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentName        *string         `protobuf:"bytes,5,opt,name=agent_name,json=agentName" json:"agent_name,omitempty"`
	Lang             *lang.L         `protobuf:"varint,7,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	From             *string         `protobuf:"bytes,9,opt,name=from" json:"from,omitempty"`
	FromTime         *int64          `protobuf:"varint,10,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	ToTime           *int64          `protobuf:"varint,11,opt,name=to_time,json=toTime" json:"to_time,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AccountConfirmSuccessEmail) Reset()                    { *m = AccountConfirmSuccessEmail{} }
func (m *AccountConfirmSuccessEmail) String() string            { return proto.CompactTextString(m) }
func (*AccountConfirmSuccessEmail) ProtoMessage()               {}
func (*AccountConfirmSuccessEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AccountConfirmSuccessEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AccountConfirmSuccessEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *AccountConfirmSuccessEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AccountConfirmSuccessEmail) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AccountConfirmSuccessEmail) GetAgentName() string {
	if m != nil && m.AgentName != nil {
		return *m.AgentName
	}
	return ""
}

func (m *AccountConfirmSuccessEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

func (m *AccountConfirmSuccessEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *AccountConfirmSuccessEmail) GetFromTime() int64 {
	if m != nil && m.FromTime != nil {
		return *m.FromTime
	}
	return 0
}

func (m *AccountConfirmSuccessEmail) GetToTime() int64 {
	if m != nil && m.ToTime != nil {
		return *m.ToTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Agent)(nil), "account.Agent")
	proto.RegisterType((*Invitation)(nil), "account.Invitation")
	proto.RegisterType((*AgentGroup)(nil), "account.AgentGroup")
	proto.RegisterType((*ResetPasswordRequest)(nil), "account.ResetPasswordRequest")
	proto.RegisterType((*AgentPerm)(nil), "account.AgentPerm")
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*GroupMember)(nil), "account.GroupMember")
	proto.RegisterType((*CreateAccountRequest)(nil), "account.CreateAccountRequest")
	proto.RegisterType((*LoginRequest)(nil), "account.LoginRequest")
	proto.RegisterType((*Agents)(nil), "account.Agents")
	proto.RegisterType((*NewPassword)(nil), "account.NewPassword")
	proto.RegisterType((*AgentGroups)(nil), "account.AgentGroups")
	proto.RegisterType((*Token)(nil), "account.Token")
	proto.RegisterType((*ConfirmEmail)(nil), "account.ConfirmEmail")
	proto.RegisterType((*InviteEmail)(nil), "account.InviteEmail")
	proto.RegisterType((*ResetPasswordEmail)(nil), "account.ResetPasswordEmail")
	proto.RegisterType((*PasswordChangedEmail)(nil), "account.PasswordChangedEmail")
	proto.RegisterType((*AccountConfirmSuccessEmail)(nil), "account.AccountConfirmSuccessEmail")
	proto.RegisterEnum("account.Event", Event_name, Event_value)
	proto.RegisterEnum("account.Agent_Gender", Agent_Gender_name, Agent_Gender_value)
	proto.RegisterEnum("account.Agent_AgentState", Agent_AgentState_name, Agent_AgentState_value)
	proto.RegisterEnum("account.Account_State", Account_State_name, Account_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountMgr service

type AccountMgrClient interface {
	CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error)
	UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error)
	GetGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AgentGroup, error)
	GetAgentPermission(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*auth.Method, error)
	UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*auth.Method, error)
	RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UpdatePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Agent, error)
	UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error)
	DeleteAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	AcceptInvitation(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Agent, error)
	GetInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Agent, error)
	InviteAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error)
	GetAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Agent, error)
	ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Account, error)
	GetAccount(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	ListAgents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Agents, error)
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*common.Id, error)
	DeleteGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListGroups(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AgentGroups, error)
	AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*common.Empty, error)
	RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*common.Empty, error)
}

type accountMgrClient struct {
	cc *grpc.ClientConn
}

func NewAccountMgrClient(cc *grpc.ClientConn) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AccountMgr/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAgentPermission(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*auth.Method, error) {
	out := new(auth.Method)
	err := grpc.Invoke(ctx, "/account.AccountMgr/GetAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*auth.Method, error) {
	out := new(auth.Method)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RequestResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/DeleteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AcceptInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/GetInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/InviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/GetAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ConfirmAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAccount(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CheckLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AddAgentToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RemoveAgentFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountMgr service

type AccountMgrServer interface {
	CreateGroup(context.Context, *AgentGroup) (*AgentGroup, error)
	UpdateGroup(context.Context, *AgentGroup) (*AgentGroup, error)
	GetGroup(context.Context, *common.Id) (*AgentGroup, error)
	GetAgentPermission(context.Context, *common.Id) (*auth.Method, error)
	UpdateAgentPermission(context.Context, *AgentPerm) (*auth.Method, error)
	RequestResetPassword(context.Context, *ResetPasswordRequest) (*common.Empty, error)
	UpdatePassword(context.Context, *NewPassword) (*Agent, error)
	UpdateAgent(context.Context, *Agent) (*Agent, error)
	DeleteAgent(context.Context, *common.Id) (*common.Empty, error)
	AcceptInvitation(context.Context, *NewPassword) (*Agent, error)
	GetInvitation(context.Context, *Token) (*Agent, error)
	InviteAgent(context.Context, *Agent) (*Agent, error)
	GetAgent(context.Context, *common.Id) (*Agent, error)
	ConfirmAccount(context.Context, *Token) (*Account, error)
	GetAccount(context.Context, *common.Id) (*Account, error)
	UpdateAccount(context.Context, *Account) (*Account, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	ListAgents(context.Context, *common.Id) (*Agents, error)
	CheckLogin(context.Context, *LoginRequest) (*common.Id, error)
	DeleteGroup(context.Context, *common.Id) (*common.Empty, error)
	ListGroups(context.Context, *common.Id) (*AgentGroups, error)
	AddAgentToGroup(context.Context, *GroupMember) (*common.Empty, error)
	RemoveAgentFromGroup(context.Context, *GroupMember) (*common.Empty, error)
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetGroup(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/GetAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAgentPermission(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPerm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, req.(*AgentPerm))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteAgent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/GetInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetInvitation(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAgent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAccount(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AddAgentToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AddAgentToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RemoveAgentFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RemoveAgentFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AccountMgr_GetGroup_Handler,
		},
		{
			MethodName: "GetAgentPermission",
			Handler:    _AccountMgr_GetAgentPermission_Handler,
		},
		{
			MethodName: "UpdateAgentPermission",
			Handler:    _AccountMgr_UpdateAgentPermission_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AccountMgr_RequestResetPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AccountMgr_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AccountMgr_DeleteAgent_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _AccountMgr_GetInvitation_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AccountMgr_GetAgent_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountMgr_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _AccountMgr_CheckLogin_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "AddAgentToGroup",
			Handler:    _AccountMgr_AddAgentToGroup_Handler,
		},
		{
			MethodName: "RemoveAgentFromGroup",
			Handler:    _AccountMgr_RemoveAgentFromGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}

func init() { proto.RegisterFile("account/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x38, 0xcd, 0x6e, 0xdb, 0xd8,
	0xd5, 0xd1, 0x2f, 0xc5, 0x43, 0x49, 0xa6, 0x6f, 0x24, 0x87, 0x56, 0x26, 0x98, 0x44, 0x93, 0x2f,
	0x9f, 0x27, 0x83, 0xc8, 0x85, 0x07, 0x98, 0xb6, 0x98, 0x2e, 0xc6, 0x75, 0x12, 0xd7, 0x85, 0x93,
	0x31, 0xe4, 0x64, 0x59, 0x08, 0x34, 0x79, 0x2d, 0x33, 0x26, 0x79, 0x55, 0xf2, 0xca, 0x3f, 0xd9,
	0xb7, 0xcb, 0x16, 0xe8, 0x23, 0xb4, 0x2f, 0xd0, 0xae, 0xbb, 0xe8, 0x43, 0xcc, 0x0b, 0x74, 0xd9,
	0x02, 0x7d, 0x88, 0xe2, 0xfe, 0x91, 0x97, 0x94, 0xec, 0x68, 0xda, 0xc9, 0xa2, 0x1b, 0x89, 0xe7,
	0xe7, 0x1e, 0x9e, 0xff, 0x73, 0x2e, 0xa1, 0xef, 0x7a, 0x1e, 0x99, 0xc7, 0x74, 0x5b, 0xfe, 0x8f,
	0x66, 0x09, 0xa1, 0x04, 0x19, 0x12, 0x1c, 0x3c, 0x3d, 0x09, 0xe8, 0xc9, 0xdc, 0x3b, 0xc7, 0x74,
	0x44, 0x92, 0xe9, 0x76, 0x3a, 0x3f, 0x09, 0xde, 0x6f, 0x9f, 0x61, 0xd7, 0xc7, 0xc9, 0xb6, 0x3b,
	0xa7, 0x67, 0xfc, 0x47, 0x1c, 0x1a, 0x8c, 0x6e, 0xe1, 0xf5, 0x48, 0x14, 0x91, 0x58, 0xfe, 0x49,
	0xfe, 0xdb, 0x64, 0x87, 0x6e, 0x3c, 0xe5, 0x3f, 0x92, 0xf7, 0x47, 0xb7, 0xf0, 0xce, 0xdc, 0xeb,
	0x08, 0xc7, 0x54, 0xfd, 0x8b, 0x13, 0xc3, 0xbf, 0x37, 0xa1, 0xb1, 0x3b, 0xc5, 0x31, 0x45, 0x8f,
	0xa0, 0xe6, 0xd1, 0x2b, 0xa7, 0xf2, 0xb0, 0xb2, 0x65, 0xed, 0xac, 0x8d, 0xa4, 0x0e, 0x7b, 0x24,
	0xa6, 0xf8, 0x8a, 0x8e, 0x19, 0x0d, 0x75, 0xa1, 0x1a, 0xf8, 0x4e, 0xf5, 0x61, 0x65, 0xcb, 0x1c,
	0x57, 0x03, 0x1f, 0x3d, 0x00, 0x90, 0x1e, 0x98, 0x04, 0xbe, 0x53, 0xe3, 0x78, 0x53, 0x62, 0x0e,
	0x7c, 0x34, 0x80, 0xd6, 0xe9, 0x3c, 0x0c, 0x63, 0x37, 0xc2, 0x4e, 0x9d, 0x13, 0x33, 0x18, 0xf5,
	0xa0, 0x81, 0x23, 0x37, 0x08, 0x9d, 0x06, 0x27, 0x08, 0x00, 0x6d, 0x40, 0x93, 0x3f, 0xa4, 0x4e,
	0xf3, 0x61, 0x6d, 0xcb, 0x1c, 0x4b, 0x88, 0xe1, 0x67, 0x67, 0x24, 0xc6, 0xa9, 0x63, 0x08, 0xbc,
	0x80, 0x98, 0x14, 0xfe, 0xe4, 0xb4, 0x84, 0x14, 0x0e, 0xa0, 0x4d, 0x68, 0x05, 0xe9, 0x84, 0x5c,
	0xc6, 0x38, 0x71, 0xe0, 0x61, 0x65, 0xab, 0x35, 0x36, 0x82, 0xf4, 0x5b, 0x06, 0xa2, 0xfb, 0x60,
	0xbe, 0x23, 0x27, 0x13, 0x1a, 0xd0, 0x10, 0x3b, 0x96, 0xd0, 0xe9, 0x1d, 0x39, 0x79, 0xc3, 0x60,
	0xf6, 0x96, 0x29, 0x8e, 0x7d, 0x9c, 0x38, 0x6d, 0x4e, 0x91, 0x10, 0x37, 0xf3, 0xc2, 0xa5, 0x6e,
	0x32, 0x99, 0x27, 0xa1, 0xd3, 0x91, 0x66, 0x72, 0xcc, 0xdb, 0x24, 0x44, 0x08, 0xea, 0x2c, 0x04,
	0x4e, 0x97, 0x13, 0xf8, 0x33, 0x33, 0x3d, 0x24, 0x9e, 0x4b, 0x03, 0x12, 0x3b, 0x6b, 0xe2, 0x35,
	0x0a, 0x66, 0x34, 0x1a, 0x44, 0xf8, 0x3d, 0xd3, 0xdb, 0x16, 0x34, 0x05, 0xa3, 0x67, 0x80, 0x70,
	0xec, 0x25, 0xd7, 0x33, 0x8a, 0xfd, 0xc9, 0xcc, 0x4d, 0xd3, 0x4b, 0x92, 0xf8, 0xce, 0x3a, 0xe7,
	0x5a, 0xcf, 0x28, 0x47, 0x92, 0xc0, 0x34, 0x7e, 0x47, 0x82, 0x18, 0xfb, 0x4e, 0xef, 0x61, 0x65,
	0xab, 0x36, 0x96, 0x10, 0xd3, 0x38, 0x88, 0x2f, 0x02, 0x26, 0xe4, 0xe4, 0xda, 0xe9, 0x0b, 0x8d,
	0x25, 0xe6, 0xe7, 0xd7, 0xcc, 0x6d, 0x29, 0x75, 0x29, 0x76, 0x36, 0x84, 0xdb, 0x38, 0x80, 0x3e,
	0x07, 0x5b, 0xbd, 0x71, 0xe2, 0x9d, 0xb9, 0xf1, 0x14, 0xfb, 0xce, 0x3d, 0x2e, 0x76, 0x4d, 0xe1,
	0xf7, 0x04, 0x9a, 0x99, 0x9c, 0x62, 0x1c, 0x3b, 0x0e, 0x27, 0xf3, 0x67, 0x66, 0x56, 0x44, 0xfc,
	0xe0, 0x34, 0xc0, 0xbe, 0xb3, 0xc9, 0xf1, 0x19, 0x8c, 0x1e, 0x43, 0x33, 0xc2, 0xf4, 0x8c, 0xf8,
	0xce, 0x7d, 0x9e, 0x5e, 0xed, 0x11, 0x2f, 0x88, 0x57, 0x1c, 0x37, 0x96, 0x34, 0xf4, 0x14, 0x54,
	0x41, 0x39, 0x9f, 0x70, 0x36, 0x7b, 0xa4, 0xea, 0x6d, 0x57, 0xfc, 0x8f, 0x15, 0x03, 0x7a, 0x04,
	0x6d, 0xfe, 0x90, 0x5c, 0x4f, 0x3c, 0xe2, 0x63, 0xe7, 0x01, 0xb7, 0xc4, 0x92, 0xb8, 0x3d, 0xe2,
	0xe3, 0xe1, 0x73, 0x68, 0xee, 0x8b, 0x00, 0x9a, 0xd0, 0x98, 0xc7, 0x29, 0xa6, 0xf6, 0x1d, 0xd4,
	0x82, 0x7a, 0xe4, 0x86, 0xd8, 0xae, 0x20, 0x80, 0xe6, 0x29, 0xe6, 0xcf, 0x55, 0xd4, 0x86, 0xd6,
	0x49, 0x90, 0xe2, 0xab, 0xb9, 0x1b, 0xda, 0x35, 0x64, 0x81, 0xe1, 0x4a, 0xa0, 0x3e, 0xfc, 0x06,
	0x80, 0xd7, 0xc7, 0x31, 0xf7, 0x91, 0x05, 0xc6, 0x0c, 0xc7, 0x7e, 0x10, 0x4f, 0xed, 0x3b, 0x4c,
	0x82, 0xeb, 0xd1, 0xe0, 0x82, 0x49, 0x6b, 0x43, 0x2b, 0x88, 0x25, 0x54, 0x65, 0x6c, 0x3e, 0x0e,
	0x31, 0xc5, 0xbe, 0x5d, 0x1b, 0xfe, 0xb5, 0x0a, 0x70, 0xc0, 0x7c, 0x2f, 0xc2, 0xff, 0xc3, 0xd7,
	0xd9, 0x3d, 0x30, 0x4e, 0x13, 0x12, 0x31, 0x9a, 0x28, 0xb3, 0x26, 0x03, 0x0f, 0xfc, 0x1b, 0x8a,
	0x6c, 0x13, 0x5a, 0x2e, 0xb3, 0x88, 0xf1, 0x37, 0x39, 0xc1, 0xe0, 0xf0, 0x81, 0x8c, 0x6b, 0x4c,
	0x1d, 0x43, 0xc5, 0x35, 0xa6, 0xc8, 0x01, 0x23, 0xc1, 0xb3, 0x90, 0x85, 0xb5, 0xc5, 0xd1, 0x0a,
	0x44, 0xff, 0x07, 0x5d, 0x21, 0x28, 0xab, 0x72, 0x93, 0x8b, 0xeb, 0x70, 0xec, 0x4b, 0x55, 0xea,
	0x4f, 0x60, 0x4d, 0xb0, 0xe5, 0x95, 0x07, 0x1a, 0xdf, 0x2f, 0x55, 0xf9, 0xf5, 0xa0, 0x41, 0xc9,
	0x39, 0x8e, 0x65, 0x5d, 0x0a, 0x60, 0xf8, 0x87, 0xaa, 0x0c, 0xc0, 0x7e, 0x42, 0xe6, 0xb3, 0x8f,
	0xe0, 0x3d, 0x04, 0x75, 0xad, 0x43, 0xf1, 0x67, 0xe6, 0xa2, 0x90, 0x4c, 0x09, 0xaf, 0x77, 0xe1,
	0x3b, 0x83, 0xc1, 0xac, 0xda, 0xb7, 0xc0, 0x88, 0x70, 0x74, 0x82, 0x13, 0xd1, 0x8b, 0xac, 0x9d,
	0x6e, 0x9e, 0xa4, 0x4c, 0xcd, 0xb1, 0x22, 0x33, 0xc7, 0x79, 0x09, 0x76, 0x29, 0x16, 0x6e, 0xae,
	0x8d, 0x15, 0x58, 0x28, 0x95, 0x56, 0xa9, 0x54, 0x3e, 0x83, 0x8e, 0x14, 0x30, 0x11, 0xa5, 0xc0,
	0x7c, 0xda, 0x18, 0xb7, 0x25, 0x72, 0x8f, 0xe1, 0x86, 0xdf, 0x42, 0x6f, 0x8c, 0x53, 0x4c, 0x55,
	0x23, 0x18, 0xe3, 0x5f, 0xcf, 0x71, 0xba, 0x52, 0x0f, 0xcf, 0x72, 0xa2, 0xaa, 0xe5, 0xc4, 0xf0,
	0x77, 0x15, 0x30, 0xb9, 0xfa, 0x47, 0x38, 0x89, 0x56, 0x11, 0x53, 0x74, 0x6a, 0xb5, 0xec, 0x54,
	0x3d, 0xc7, 0x6a, 0xc5, 0x1c, 0xcb, 0x7b, 0x41, 0xfd, 0xe6, 0x5e, 0x30, 0xfc, 0x73, 0x03, 0x8c,
	0xdd, 0xac, 0xd6, 0xbf, 0x77, 0xcc, 0x55, 0x50, 0x6b, 0x5a, 0x50, 0x11, 0xd4, 0x67, 0xa1, 0x1b,
	0xf3, 0xd7, 0x36, 0xc6, 0xfc, 0xf9, 0xb6, 0x40, 0x6f, 0x42, 0x8b, 0x8f, 0x10, 0xad, 0x4c, 0x38,
	0x2c, 0xea, 0x4a, 0xf4, 0x4f, 0x43, 0xef, 0x9f, 0x5a, 0xbc, 0x5b, 0xc5, 0x78, 0x7f, 0x02, 0xa6,
	0x47, 0xe2, 0xd3, 0x20, 0x89, 0xb0, 0xcf, 0xe3, 0x59, 0x1b, 0xe7, 0x88, 0x42, 0x36, 0x40, 0x29,
	0x1b, 0x36, 0xa0, 0x99, 0x86, 0x64, 0xea, 0xc6, 0x6a, 0x24, 0x09, 0x88, 0xb9, 0x3f, 0xc1, 0xa7,
	0x38, 0x11, 0xea, 0x89, 0x82, 0x31, 0x25, 0x46, 0xe4, 0xb4, 0x17, 0xd0, 0x6b, 0x35, 0x92, 0xd8,
	0x33, 0xb3, 0xe7, 0x7d, 0x30, 0x13, 0xdd, 0xd2, 0xe6, 0x2e, 0x30, 0xde, 0x07, 0x33, 0xd6, 0x29,
	0x51, 0x1f, 0x9a, 0xd4, 0xbd, 0x62, 0x92, 0xd6, 0x65, 0xe9, 0xb9, 0x57, 0x72, 0x7e, 0xbb, 0x1e,
	0x3e, 0x21, 0xe4, 0xdc, 0x41, 0x72, 0x7e, 0x4b, 0x98, 0x19, 0x4b, 0x2f, 0x03, 0x4a, 0x71, 0x22,
	0x87, 0x88, 0x02, 0xf3, 0x99, 0x7c, 0x57, 0x9f, 0xc9, 0x0e, 0x18, 0xae, 0xef, 0x27, 0x38, 0x4d,
	0xf9, 0xa8, 0x62, 0xf9, 0x20, 0x40, 0x64, 0x43, 0x8d, 0x79, 0x5f, 0x0c, 0x29, 0xf6, 0x98, 0x0d,
	0xd4, 0x7b, 0xda, 0x40, 0x7d, 0x04, 0x6d, 0x65, 0x30, 0x6b, 0x6e, 0x7c, 0xf2, 0x98, 0x63, 0x4b,
	0xe2, 0x5e, 0x26, 0x24, 0x2a, 0xcc, 0xd5, 0x41, 0x69, 0xae, 0x3e, 0x86, 0x46, 0x18, 0x44, 0x01,
	0xe5, 0x93, 0x89, 0xd5, 0xac, 0xda, 0x82, 0x0e, 0x19, 0x76, 0x2c, 0x88, 0xc3, 0x9f, 0x41, 0x63,
	0x49, 0x9b, 0xef, 0x80, 0xc9, 0x1b, 0x3b, 0x0b, 0xa5, 0x98, 0x1b, 0x21, 0xf1, 0xce, 0xb1, 0x5f,
	0xee, 0xf3, 0xbf, 0xa9, 0x80, 0xc5, 0x9b, 0xd4, 0x2b, 0x5e, 0xaa, 0x3f, 0x4c, 0x15, 0x4d, 0x99,
	0x40, 0xad, 0x8a, 0x38, 0x5c, 0x2a, 0xb0, 0x7a, 0xa1, 0xc0, 0x86, 0xdf, 0x55, 0xa1, 0xb7, 0xc7,
	0x33, 0x4f, 0x4d, 0xcd, 0xd5, 0xbb, 0x83, 0xbe, 0xb2, 0x55, 0x6f, 0x5a, 0xd9, 0x6a, 0xfa, 0x34,
	0x51, 0xc1, 0xaa, 0x17, 0xb7, 0x9f, 0x6c, 0x77, 0x11, 0x55, 0x95, 0xc1, 0x2c, 0x90, 0xca, 0x64,
	0xfe, 0x16, 0x51, 0x5a, 0x96, 0xc4, 0xbd, 0x66, 0x2f, 0xfa, 0x14, 0x14, 0xc8, 0xeb, 0x52, 0x14,
	0x99, 0x72, 0x14, 0x2b, 0xcd, 0xe2, 0x42, 0xd6, 0x2a, 0x2f, 0x64, 0x7a, 0x22, 0x98, 0xa5, 0x44,
	0xc8, 0xb2, 0x13, 0xf4, 0xec, 0x2c, 0x6f, 0x13, 0xd6, 0xe2, 0x36, 0xe1, 0x41, 0xfb, 0x90, 0x4c,
	0x83, 0xf8, 0xbf, 0x6d, 0xb5, 0x05, 0xe7, 0xd4, 0x8a, 0xce, 0x19, 0x1e, 0x43, 0x93, 0x77, 0xe1,
	0x74, 0x15, 0xf1, 0x4f, 0x14, 0xb3, 0x53, 0x5d, 0x3a, 0x88, 0x24, 0x75, 0xf8, 0xc7, 0x0a, 0x58,
	0xaf, 0xf1, 0xe5, 0x51, 0x1e, 0x81, 0x55, 0x34, 0x17, 0xa3, 0xb8, 0xaa, 0x8d, 0x62, 0xe6, 0xa5,
	0x18, 0x5f, 0x4e, 0x4a, 0xda, 0x5b, 0x71, 0x41, 0x76, 0x9b, 0x84, 0xda, 0xe6, 0x2a, 0xa2, 0x6f,
	0x91, 0x30, 0xdf, 0x59, 0x33, 0xaf, 0xb4, 0xf4, 0x01, 0xf4, 0x2b, 0xb0, 0xf2, 0x29, 0xbf, 0x92,
	0xf9, 0x5f, 0x40, 0x53, 0x30, 0x4b, 0xf3, 0xef, 0x16, 0xcd, 0xe7, 0xb4, 0xb1, 0x64, 0x19, 0x5e,
	0x40, 0xe3, 0x8d, 0xb4, 0xe1, 0x83, 0x82, 0xfb, 0xd0, 0x0c, 0xd2, 0x49, 0x8a, 0x29, 0xb7, 0xbe,
	0x35, 0x6e, 0x04, 0xe9, 0x31, 0xa6, 0xb9, 0x4f, 0x6a, 0xba, 0x4f, 0x8a, 0x15, 0x5c, 0x2f, 0x55,
	0xf0, 0xf0, 0x4f, 0x55, 0x68, 0xef, 0x89, 0x4e, 0xff, 0x82, 0x47, 0x7f, 0xb5, 0x59, 0x46, 0x89,
	0x9a, 0x65, 0x94, 0x7c, 0x68, 0x7f, 0xd1, 0xe7, 0x54, 0x7d, 0x61, 0x4e, 0x09, 0x95, 0x1b, 0x25,
	0x95, 0xf1, 0xd5, 0x2c, 0x48, 0xb0, 0x3f, 0x09, 0x62, 0xb9, 0x9a, 0x98, 0x12, 0x73, 0x10, 0x2f,
	0x14, 0xa8, 0xb1, 0x58, 0xa0, 0xf7, 0x65, 0xcd, 0xb3, 0x08, 0x76, 0x77, 0x8c, 0x11, 0xbf, 0x81,
	0x1e, 0xca, 0xe2, 0x7f, 0x00, 0x20, 0xf4, 0xd1, 0x36, 0x42, 0x93, 0x63, 0x5e, 0xcb, 0x29, 0xcc,
	0x1b, 0xb8, 0xa8, 0x3f, 0xfe, 0x3c, 0xfc, 0x57, 0x15, 0x2c, 0xbe, 0x21, 0xe3, 0x8f, 0xe5, 0xa4,
	0xfb, 0x60, 0xa6, 0xfc, 0x2e, 0x90, 0x7b, 0xa9, 0x25, 0x10, 0x07, 0x7e, 0xc9, 0x21, 0x8d, 0xb2,
	0x43, 0x32, 0x2f, 0x36, 0x75, 0x2f, 0xde, 0xea, 0x03, 0xbd, 0x8d, 0x9a, 0xa5, 0x36, 0xfa, 0x29,
	0x58, 0x52, 0x15, 0x4e, 0x16, 0x7e, 0x00, 0x81, 0xe2, 0x1e, 0x2a, 0x07, 0xc0, 0x5a, 0x0c, 0xc0,
	0x16, 0xd8, 0x8a, 0x25, 0x5b, 0x5f, 0xc4, 0x82, 0xd0, 0x95, 0xf8, 0x43, 0xb9, 0xc5, 0x28, 0x77,
	0x77, 0x35, 0x77, 0xff, 0xb6, 0x0a, 0xa8, 0xb0, 0x3e, 0x16, 0xbc, 0x6e, 0xde, 0xe2, 0x75, 0x25,
	0xad, 0x92, 0x4b, 0x5b, 0x16, 0x89, 0xdb, 0xd2, 0xeb, 0x3f, 0x29, 0xa3, 0xc2, 0xb4, 0x6b, 0x14,
	0xd7, 0x49, 0x76, 0x92, 0x93, 0xb4, 0x64, 0x35, 0x39, 0xe6, 0x83, 0xa9, 0x3a, 0xfc, 0xae, 0x02,
	0xbd, 0xa3, 0xe2, 0xd5, 0xf6, 0x23, 0x56, 0xe9, 0x0d, 0xf3, 0xba, 0x64, 0x41, 0xe3, 0x26, 0x0b,
	0x8c, 0x65, 0x89, 0xa6, 0x02, 0x62, 0x6a, 0xe1, 0xfd, 0x7d, 0x15, 0x06, 0x72, 0xf2, 0xcb, 0xd6,
	0x73, 0x3c, 0xf7, 0x3c, 0x9c, 0xa6, 0xff, 0xfb, 0xb6, 0xb1, 0x3a, 0xe6, 0x57, 0x5d, 0x36, 0xcf,
	0xd5, 0xb2, 0xcc, 0x10, 0x6f, 0x82, 0x08, 0xb3, 0x7b, 0x30, 0x25, 0x82, 0x64, 0x89, 0xcf, 0x21,
	0x94, 0x30, 0xc2, 0xd3, 0xbf, 0x35, 0xa0, 0xf1, 0xe2, 0x82, 0x5d, 0x66, 0xfb, 0x60, 0x17, 0x97,
	0x22, 0xec, 0xdb, 0xff, 0x30, 0x10, 0x82, 0x8e, 0x44, 0x1f, 0x5f, 0xc7, 0x1e, 0xf6, 0xed, 0x7f,
	0x1a, 0xa8, 0x0f, 0xeb, 0xf9, 0x20, 0x79, 0x2e, 0xb7, 0xbc, 0x3b, 0x08, 0x41, 0x97, 0xa3, 0x0f,
	0xf1, 0xa9, 0x20, 0xd9, 0x15, 0xd4, 0x03, 0x7b, 0x57, 0x5c, 0x65, 0x83, 0x18, 0xfb, 0x02, 0x5b,
	0x45, 0x1b, 0x80, 0x72, 0x01, 0x6f, 0x67, 0x29, 0x4e, 0x98, 0x84, 0x3a, 0x5a, 0x87, 0x0e, 0xc7,
	0x67, 0xa8, 0x26, 0x1a, 0xc0, 0x46, 0x76, 0xfb, 0x0a, 0xd2, 0x34, 0x20, 0xf1, 0xdb, 0x99, 0xcf,
	0xf7, 0x4d, 0x13, 0xdd, 0x85, 0x35, 0xa9, 0x5b, 0x76, 0xa0, 0xcb, 0x65, 0x0b, 0xe4, 0x51, 0xe8,
	0x66, 0xcc, 0x36, 0xba, 0x07, 0x77, 0x95, 0x21, 0x6c, 0x91, 0x55, 0x84, 0x75, 0xb4, 0x09, 0xfd,
	0x62, 0x4e, 0x48, 0xfb, 0xed, 0xbb, 0xe8, 0x3e, 0xdc, 0xfb, 0x85, 0x1b, 0xfb, 0x21, 0x7e, 0xa1,
	0x8a, 0x54, 0x7d, 0xab, 0xb0, 0x7b, 0x8c, 0xb8, 0xf4, 0x1c, 0xf6, 0xed, 0x3e, 0xfa, 0x7f, 0xf8,
	0xec, 0xe6, 0x44, 0xcb, 0x19, 0x37, 0xd1, 0x03, 0xd8, 0xcc, 0xdc, 0x5e, 0xee, 0x3b, 0xf6, 0x23,
	0xb4, 0x05, 0x8f, 0x95, 0x35, 0x4b, 0xaa, 0x31, 0x17, 0x34, 0xd4, 0xec, 0xd6, 0xe6, 0x85, 0xbd,
	0xc1, 0xa3, 0x22, 0xf0, 0x2a, 0x52, 0x8e, 0x86, 0x13, 0xdb, 0xb0, 0x6f, 0x3f, 0xe3, 0x91, 0x12,
	0xb8, 0xdd, 0x6c, 0xa5, 0x1f, 0x15, 0xa4, 0x9e, 0x12, 0xe5, 0xb4, 0xed, 0x2c, 0x52, 0x63, 0xfc,
	0x0e, 0x7b, 0x0c, 0x05, 0x19, 0x6a, 0xd7, 0xf3, 0xf0, 0x8c, 0xa1, 0x2c, 0x64, 0x43, 0x9b, 0xa3,
	0x84, 0x46, 0xbe, 0xdd, 0xc9, 0x30, 0x4a, 0x97, 0xb5, 0x2c, 0x6b, 0xf2, 0xb7, 0xee, 0x64, 0x59,
	0xf3, 0x1c, 0xe7, 0xd7, 0x8b, 0x2f, 0x33, 0xac, 0xae, 0xc9, 0xd7, 0x3b, 0x7f, 0x31, 0x01, 0xa4,
	0x8a, 0xaf, 0xa6, 0x09, 0xfa, 0x31, 0x58, 0xc2, 0x26, 0xf1, 0x51, 0x64, 0xd9, 0xea, 0x33, 0x58,
	0x86, 0x64, 0x07, 0x85, 0xd0, 0xef, 0x7b, 0xf0, 0x0b, 0x68, 0xed, 0x63, 0xf9, 0x0c, 0xaa, 0x69,
	0x1c, 0xf8, 0xcb, 0x99, 0x47, 0x80, 0xf6, 0x31, 0x2d, 0x65, 0x74, 0xe1, 0x58, 0xe1, 0xd2, 0x8f,
	0x7e, 0x0a, 0x7d, 0xa1, 0x55, 0xf9, 0x08, 0x2a, 0x4a, 0x67, 0x94, 0xd2, 0xd1, 0xe7, 0xd0, 0x93,
	0xf9, 0x51, 0xc8, 0x2c, 0xf4, 0x20, 0x3b, 0xb9, 0xec, 0x43, 0xc9, 0xa0, 0xa3, 0x74, 0x79, 0x11,
	0xcd, 0xe8, 0x35, 0xfa, 0x0a, 0xba, 0x42, 0x81, 0x7c, 0x4b, 0xcd, 0xce, 0x6b, 0xab, 0xf3, 0xa0,
	0xb4, 0x62, 0xa3, 0x67, 0xca, 0x9d, 0x02, 0x2c, 0x91, 0x17, 0xd8, 0xb7, 0xc0, 0x12, 0x29, 0x21,
	0x40, 0xdd, 0x21, 0x25, 0x85, 0x7e, 0xc2, 0xf3, 0x14, 0xcf, 0xa8, 0xf6, 0xe1, 0x70, 0x35, 0x95,
	0xb6, 0xa1, 0xb3, 0x8f, 0xf5, 0x63, 0x39, 0x03, 0xdf, 0x80, 0x97, 0xd9, 0x20, 0x32, 0x77, 0x35,
	0x1b, 0x9e, 0xf0, 0x44, 0x58, 0x34, 0xa0, 0xcc, 0xb7, 0x03, 0x5d, 0xd9, 0x14, 0xd4, 0x67, 0x9c,
	0xb2, 0x22, 0x0b, 0x5f, 0x77, 0xd1, 0x53, 0x00, 0x26, 0x5b, 0x42, 0xba, 0xf4, 0x45, 0xde, 0x2f,
	0xa1, 0x23, 0x5d, 0x2f, 0x11, 0x0b, 0x2c, 0x4b, 0x0e, 0x7d, 0x03, 0x9d, 0xc2, 0xcd, 0x58, 0x4b,
	0x93, 0x65, 0x37, 0xe6, 0x25, 0x12, 0x3e, 0x07, 0x38, 0x0c, 0x52, 0x2a, 0x6f, 0x69, 0xba, 0x8a,
	0x6b, 0x45, 0x07, 0xa4, 0x68, 0x1b, 0x60, 0xef, 0x0c, 0x7b, 0xe7, 0xfc, 0xda, 0x88, 0xfa, 0x19,
	0x59, 0xbf, 0x46, 0x0e, 0x34, 0x09, 0x79, 0x7a, 0x2c, 0x96, 0x59, 0x29, 0x3d, 0x46, 0x42, 0x0b,
	0x79, 0x59, 0xd2, 0x19, 0x7b, 0x4b, 0xea, 0x31, 0x45, 0x5f, 0xc1, 0xda, 0xae, 0xef, 0x73, 0xcc,
	0x1b, 0x22, 0xa4, 0xe7, 0x8c, 0xda, 0x37, 0x8b, 0xf2, 0x7b, 0xbe, 0x66, 0xd5, 0x15, 0x91, 0x0b,
	0x91, 0x1b, 0x2f, 0x13, 0x12, 0xad, 0x7e, 0xf8, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x43,
	0x95, 0x2d, 0x35, 0x1b, 0x00, 0x00,
}
