// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: event.proto

package event

import (
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	content "github.com/subiz/header/content"
	conversation "github.com/subiz/header/conversation"
	email "github.com/subiz/header/email"
	noti5 "github.com/subiz/header/noti5"
	notibox "github.com/subiz/header/notibox"
	payment "github.com/subiz/header/payment"
	user "github.com/subiz/header/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RealtimeType int32

const (
	RealtimeType_a                             RealtimeType = 0
	RealtimeType_account_deleted               RealtimeType = 10
	RealtimeType_account_updated               RealtimeType = 11
	RealtimeType_group_deleted                 RealtimeType = 12
	RealtimeType_group_updated                 RealtimeType = 13
	RealtimeType_invitation_accepted           RealtimeType = 14
	RealtimeType_agent_deleted                 RealtimeType = 15
	RealtimeType_agent_updated                 RealtimeType = 16
	RealtimeType_agent_permission_updated      RealtimeType = 17
	RealtimeType_limit_updated                 RealtimeType = 18
	RealtimeType_my_user_upserted              RealtimeType = 19
	RealtimeType_user_info_updated             RealtimeType = 20
	RealtimeType_user_added_to_my_list         RealtimeType = 21
	RealtimeType_user_created                  RealtimeType = 22
	RealtimeType_note_created                  RealtimeType = 23
	RealtimeType_presence_updated              RealtimeType = 24
	RealtimeType_content_viewed                RealtimeType = 25
	RealtimeType_content_searched              RealtimeType = 26
	RealtimeType_content_addedtocart           RealtimeType = 27
	RealtimeType_content_checkedout            RealtimeType = 28
	RealtimeType_content_purchased             RealtimeType = 29
	RealtimeType_topic_read                    RealtimeType = 30
	RealtimeType_subscribed_topic_updated      RealtimeType = 31
	RealtimeType_user_topic_updated            RealtimeType = 32
	RealtimeType_user_attribute_updated        RealtimeType = 33
	RealtimeType_user_attribute_deleted        RealtimeType = 34
	RealtimeType_automation_out_of_credit      RealtimeType = 35
	RealtimeType_automation_fired              RealtimeType = 36
	RealtimeType_notibox_notification_upserted RealtimeType = 37
	RealtimeType_notibox_upserted              RealtimeType = 38
	RealtimeType_notification_setting_updated  RealtimeType = 39
	RealtimeType_conversation_updated          RealtimeType = 40
	RealtimeType_message_sent                  RealtimeType = 41 // event.data.message
	RealtimeType_conversation_state_updated    RealtimeType = 42 // event.data.conversation
	RealtimeType_message_pong                  RealtimeType = 43 // event.data.message.pongs.0
	RealtimeType_conversation_joined           RealtimeType = 44 // event.data.conversation.memebers.0
	RealtimeType_conversation_invited          RealtimeType = 45
	RealtimeType_conversation_left             RealtimeType = 46
	RealtimeType_conversation_tagged           RealtimeType = 47
	RealtimeType_conversation_untagged         RealtimeType = 48
	//conversation_waiting = 8;
	RealtimeType_channel_deintegrated          RealtimeType = 49
	RealtimeType_channel_integrated            RealtimeType = 50
	RealtimeType_message_seen                  RealtimeType = 51 // event.data.message.computed.seen
	RealtimeType_message_ack                   RealtimeType = 52 //  event.data.message.computed.ack
	RealtimeType_message_received              RealtimeType = 53 //  event.data.message.computed.received
	RealtimeType_conversation_typing           RealtimeType = 54
	RealtimeType_conversation_postbacked       RealtimeType = 55
	RealtimeType_conversation_unassigned       RealtimeType = 56
	RealtimeType_conversation_assigned         RealtimeType = 57
	RealtimeType_message_updated               RealtimeType = 58 // event.data.message.revisions.0
	RealtimeType_conversation_rating_requested RealtimeType = 60 // event.data.conversation
	RealtimeType_conversation_rated            RealtimeType = 61 // event.data.conversation
	RealtimeType_conversation_pending          RealtimeType = 62
	RealtimeType_ticket_created                RealtimeType = 63
	RealtimeType_ticket_updated                RealtimeType = 64
	RealtimeType_ticket_deleted                RealtimeType = 65
	RealtimeType_my_conversation_mute_updated  RealtimeType = 66 // conversation
	RealtimeType_my_conversation_read_updated  RealtimeType = 67 // conversation
	RealtimeType_my_conversation_unsubscribed  RealtimeType = 68 // conversation
	RealtimeType_tag_updated                   RealtimeType = 70
	RealtimeType_tag_deleted                   RealtimeType = 71
	RealtimeType_message_template_updated      RealtimeType = 72
	RealtimeType_message_template_deleted      RealtimeType = 73
	RealtimeType_zalo_page_updated             RealtimeType = 74
	RealtimeType_zalo_page_deleted             RealtimeType = 75
	RealtimeType_messenger_page_updated        RealtimeType = 76
	RealtimeType_messenger_page_deleted        RealtimeType = 77
	RealtimeType_facebook_page_updated         RealtimeType = 78
	RealtimeType_facebook_page_deleted         RealtimeType = 79
	RealtimeType_incomming_email_updated       RealtimeType = 80
	RealtimeType_incomming_email_deleted       RealtimeType = 81
)

// Enum value maps for RealtimeType.
var (
	RealtimeType_name = map[int32]string{
		0:  "a",
		10: "account_deleted",
		11: "account_updated",
		12: "group_deleted",
		13: "group_updated",
		14: "invitation_accepted",
		15: "agent_deleted",
		16: "agent_updated",
		17: "agent_permission_updated",
		18: "limit_updated",
		19: "my_user_upserted",
		20: "user_info_updated",
		21: "user_added_to_my_list",
		22: "user_created",
		23: "note_created",
		24: "presence_updated",
		25: "content_viewed",
		26: "content_searched",
		27: "content_addedtocart",
		28: "content_checkedout",
		29: "content_purchased",
		30: "topic_read",
		31: "subscribed_topic_updated",
		32: "user_topic_updated",
		33: "user_attribute_updated",
		34: "user_attribute_deleted",
		35: "automation_out_of_credit",
		36: "automation_fired",
		37: "notibox_notification_upserted",
		38: "notibox_upserted",
		39: "notification_setting_updated",
		40: "conversation_updated",
		41: "message_sent",
		42: "conversation_state_updated",
		43: "message_pong",
		44: "conversation_joined",
		45: "conversation_invited",
		46: "conversation_left",
		47: "conversation_tagged",
		48: "conversation_untagged",
		49: "channel_deintegrated",
		50: "channel_integrated",
		51: "message_seen",
		52: "message_ack",
		53: "message_received",
		54: "conversation_typing",
		55: "conversation_postbacked",
		56: "conversation_unassigned",
		57: "conversation_assigned",
		58: "message_updated",
		60: "conversation_rating_requested",
		61: "conversation_rated",
		62: "conversation_pending",
		63: "ticket_created",
		64: "ticket_updated",
		65: "ticket_deleted",
		66: "my_conversation_mute_updated",
		67: "my_conversation_read_updated",
		68: "my_conversation_unsubscribed",
		70: "tag_updated",
		71: "tag_deleted",
		72: "message_template_updated",
		73: "message_template_deleted",
		74: "zalo_page_updated",
		75: "zalo_page_deleted",
		76: "messenger_page_updated",
		77: "messenger_page_deleted",
		78: "facebook_page_updated",
		79: "facebook_page_deleted",
		80: "incomming_email_updated",
		81: "incomming_email_deleted",
	}
	RealtimeType_value = map[string]int32{
		"a":                             0,
		"account_deleted":               10,
		"account_updated":               11,
		"group_deleted":                 12,
		"group_updated":                 13,
		"invitation_accepted":           14,
		"agent_deleted":                 15,
		"agent_updated":                 16,
		"agent_permission_updated":      17,
		"limit_updated":                 18,
		"my_user_upserted":              19,
		"user_info_updated":             20,
		"user_added_to_my_list":         21,
		"user_created":                  22,
		"note_created":                  23,
		"presence_updated":              24,
		"content_viewed":                25,
		"content_searched":              26,
		"content_addedtocart":           27,
		"content_checkedout":            28,
		"content_purchased":             29,
		"topic_read":                    30,
		"subscribed_topic_updated":      31,
		"user_topic_updated":            32,
		"user_attribute_updated":        33,
		"user_attribute_deleted":        34,
		"automation_out_of_credit":      35,
		"automation_fired":              36,
		"notibox_notification_upserted": 37,
		"notibox_upserted":              38,
		"notification_setting_updated":  39,
		"conversation_updated":          40,
		"message_sent":                  41,
		"conversation_state_updated":    42,
		"message_pong":                  43,
		"conversation_joined":           44,
		"conversation_invited":          45,
		"conversation_left":             46,
		"conversation_tagged":           47,
		"conversation_untagged":         48,
		"channel_deintegrated":          49,
		"channel_integrated":            50,
		"message_seen":                  51,
		"message_ack":                   52,
		"message_received":              53,
		"conversation_typing":           54,
		"conversation_postbacked":       55,
		"conversation_unassigned":       56,
		"conversation_assigned":         57,
		"message_updated":               58,
		"conversation_rating_requested": 60,
		"conversation_rated":            61,
		"conversation_pending":          62,
		"ticket_created":                63,
		"ticket_updated":                64,
		"ticket_deleted":                65,
		"my_conversation_mute_updated":  66,
		"my_conversation_read_updated":  67,
		"my_conversation_unsubscribed":  68,
		"tag_updated":                   70,
		"tag_deleted":                   71,
		"message_template_updated":      72,
		"message_template_deleted":      73,
		"zalo_page_updated":             74,
		"zalo_page_deleted":             75,
		"messenger_page_updated":        76,
		"messenger_page_deleted":        77,
		"facebook_page_updated":         78,
		"facebook_page_deleted":         79,
		"incomming_email_updated":       80,
		"incomming_email_deleted":       81,
	}
)

func (x RealtimeType) Enum() *RealtimeType {
	p := new(RealtimeType)
	*p = x
	return p
}

func (x RealtimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealtimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (RealtimeType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x RealtimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealtimeType.Descriptor instead.
func (RealtimeType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

type SubPrefix int32

const (
	SubPrefix_Webhook   SubPrefix = 0
	SubPrefix_Websocket SubPrefix = 1
)

// Enum value maps for SubPrefix.
var (
	SubPrefix_name = map[int32]string{
		0: "Webhook",
		1: "Websocket",
	}
	SubPrefix_value = map[string]int32{
		"Webhook":   0,
		"Websocket": 1,
	}
)

func (x SubPrefix) Enum() *SubPrefix {
	p := new(SubPrefix)
	*p = x
	return p
}

func (x SubPrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubPrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (SubPrefix) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x SubPrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubPrefix.Descriptor instead.
func (SubPrefix) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

type Automation_State int32

const (
	Automation_active   Automation_State = 0
	Automation_inactive Automation_State = 1
)

// Enum value maps for Automation_State.
var (
	Automation_State_name = map[int32]string{
		0: "active",
		1: "inactive",
	}
	Automation_State_value = map[string]int32{
		"active":   0,
		"inactive": 1,
	}
)

func (x Automation_State) Enum() *Automation_State {
	p := new(Automation_State)
	*p = x
	return p
}

func (x Automation_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_State) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[2].Descriptor()
}

func (Automation_State) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[2]
}

func (x Automation_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_State.Descriptor instead.
func (Automation_State) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9, 0}
}

type Automation_ActionType int32

const (
	Automation_conversation_message      Automation_ActionType = 0
	Automation_agent_notification        Automation_ActionType = 1
	Automation_block_user                Automation_ActionType = 5
	Automation_merge_users               Automation_ActionType = 7
	Automation_user_notification         Automation_ActionType = 8
	Automation_user_webhook              Automation_ActionType = 9
	Automation_user_note                 Automation_ActionType = 10
	Automation_conversation_message2     Automation_ActionType = 12
	Automation_conversation_webhook      Automation_ActionType = 13
	Automation_add_agent_to_conversation Automation_ActionType = 14
	Automation_create_ticket             Automation_ActionType = 15
	Automation_conversation_tag          Automation_ActionType = 16
	// agent_notification = 17;
	Automation_add_user_to_segmentation Automation_ActionType = 18
)

// Enum value maps for Automation_ActionType.
var (
	Automation_ActionType_name = map[int32]string{
		0:  "conversation_message",
		1:  "agent_notification",
		5:  "block_user",
		7:  "merge_users",
		8:  "user_notification",
		9:  "user_webhook",
		10: "user_note",
		12: "conversation_message2",
		13: "conversation_webhook",
		14: "add_agent_to_conversation",
		15: "create_ticket",
		16: "conversation_tag",
		18: "add_user_to_segmentation",
	}
	Automation_ActionType_value = map[string]int32{
		"conversation_message":      0,
		"agent_notification":        1,
		"block_user":                5,
		"merge_users":               7,
		"user_notification":         8,
		"user_webhook":              9,
		"user_note":                 10,
		"conversation_message2":     12,
		"conversation_webhook":      13,
		"add_agent_to_conversation": 14,
		"create_ticket":             15,
		"conversation_tag":          16,
		"add_user_to_segmentation":  18,
	}
)

func (x Automation_ActionType) Enum() *Automation_ActionType {
	p := new(Automation_ActionType)
	*p = x
	return p
}

func (x Automation_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[3].Descriptor()
}

func (Automation_ActionType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[3]
}

func (x Automation_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_ActionType.Descriptor instead.
func (Automation_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9, 1}
}

type Automation_AutomationScope int32

const (
	Automation_conversation Automation_AutomationScope = 0
	Automation_user         Automation_AutomationScope = 3
)

// Enum value maps for Automation_AutomationScope.
var (
	Automation_AutomationScope_name = map[int32]string{
		0: "conversation",
		3: "user",
	}
	Automation_AutomationScope_value = map[string]int32{
		"conversation": 0,
		"user":         3,
	}
)

func (x Automation_AutomationScope) Enum() *Automation_AutomationScope {
	p := new(Automation_AutomationScope)
	*p = x
	return p
}

func (x Automation_AutomationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Automation_AutomationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[4].Descriptor()
}

func (Automation_AutomationScope) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[4]
}

func (x Automation_AutomationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Automation_AutomationScope.Descriptor instead.
func (Automation_AutomationScope) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9, 2}
}

type AutomationAction_ActionType int32

const (
	AutomationAction_update_user_attribute          AutomationAction_ActionType = 0  // type user
	AutomationAction_block_user                     AutomationAction_ActionType = 1  // prop user
	AutomationAction_merge_users                    AutomationAction_ActionType = 3  // not yet defined
	AutomationAction_notify_user                    AutomationAction_ActionType = 4  // not yet defined
	AutomationAction_send_email                     AutomationAction_ActionType = 5  // prop email
	AutomationAction_add_user_note                  AutomationAction_ActionType = 6  // note
	AutomationAction_create_conversation            AutomationAction_ActionType = 7  // events, integration_id
	AutomationAction_send_message                   AutomationAction_ActionType = 8  // event
	AutomationAction_assign_agent_to_conversation   AutomationAction_ActionType = 9  // prop agent_ids
	AutomationAction_convert_conversation_to_ticket AutomationAction_ActionType = 10 // no prop
	AutomationAction_tag_conversation               AutomationAction_ActionType = 11 // tag_ids
	AutomationAction_send_webhook                   AutomationAction_ActionType = 12 // not yet defined
	AutomationAction_open_widget_screen             AutomationAction_ActionType = 14 // not yet defined
	AutomationAction_add_user_to_segmentation       AutomationAction_ActionType = 15 // segmentation_id
	AutomationAction_remove_user_from_segmentation  AutomationAction_ActionType = 16 // segmentation_id
	AutomationAction_send_chat_transcript_email     AutomationAction_ActionType = 17 // prop email
	AutomationAction_update_conversation_state      AutomationAction_ActionType = 18 // prop conversation_state
	AutomationAction_send_facebook_direct_message   AutomationAction_ActionType = 19 // prop event and facebook_page_id
)

// Enum value maps for AutomationAction_ActionType.
var (
	AutomationAction_ActionType_name = map[int32]string{
		0:  "update_user_attribute",
		1:  "block_user",
		3:  "merge_users",
		4:  "notify_user",
		5:  "send_email",
		6:  "add_user_note",
		7:  "create_conversation",
		8:  "send_message",
		9:  "assign_agent_to_conversation",
		10: "convert_conversation_to_ticket",
		11: "tag_conversation",
		12: "send_webhook",
		14: "open_widget_screen",
		15: "add_user_to_segmentation",
		16: "remove_user_from_segmentation",
		17: "send_chat_transcript_email",
		18: "update_conversation_state",
		19: "send_facebook_direct_message",
	}
	AutomationAction_ActionType_value = map[string]int32{
		"update_user_attribute":          0,
		"block_user":                     1,
		"merge_users":                    3,
		"notify_user":                    4,
		"send_email":                     5,
		"add_user_note":                  6,
		"create_conversation":            7,
		"send_message":                   8,
		"assign_agent_to_conversation":   9,
		"convert_conversation_to_ticket": 10,
		"tag_conversation":               11,
		"send_webhook":                   12,
		"open_widget_screen":             14,
		"add_user_to_segmentation":       15,
		"remove_user_from_segmentation":  16,
		"send_chat_transcript_email":     17,
		"update_conversation_state":      18,
		"send_facebook_direct_message":   19,
	}
)

func (x AutomationAction_ActionType) Enum() *AutomationAction_ActionType {
	p := new(AutomationAction_ActionType)
	*p = x
	return p
}

func (x AutomationAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[5].Descriptor()
}

func (AutomationAction_ActionType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[5]
}

func (x AutomationAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationAction_ActionType.Descriptor instead.
func (AutomationAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10, 0}
}

type AutomationCredit_Type int32

const (
	AutomationCredit_email   AutomationCredit_Type = 0
	AutomationCredit_webhook AutomationCredit_Type = 1
	AutomationCredit_message AutomationCredit_Type = 2
)

// Enum value maps for AutomationCredit_Type.
var (
	AutomationCredit_Type_name = map[int32]string{
		0: "email",
		1: "webhook",
		2: "message",
	}
	AutomationCredit_Type_value = map[string]int32{
		"email":   0,
		"webhook": 1,
		"message": 2,
	}
)

func (x AutomationCredit_Type) Enum() *AutomationCredit_Type {
	p := new(AutomationCredit_Type)
	*p = x
	return p
}

func (x AutomationCredit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationCredit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[6].Descriptor()
}

func (AutomationCredit_Type) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[6]
}

func (x AutomationCredit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationCredit_Type.Descriptor instead.
func (AutomationCredit_Type) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15, 0}
}

type RawEventCreatedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Subs        []string        `protobuf:"bytes,3,rep,name=subs,proto3" json:"subs,omitempty"`
	TargetTopic string          `protobuf:"bytes,4,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	Payload     string          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"` //json format
	TargetKey   string          `protobuf:"bytes,6,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Payloads    []string        `protobuf:"bytes,7,rep,name=payloads,proto3" json:"payloads,omitempty"` // payload for each sub, payload must be empty
	Topic       string          `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	RouterTopic string          `protobuf:"bytes,10,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	Sub         string          `protobuf:"bytes,11,opt,name=sub,proto3" json:"sub,omitempty"`
	Created     int64           `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"` // in ms
	Data        []byte          `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`        // payload in bytes format
}

func (x *RawEventCreatedPayload) Reset() {
	*x = RawEventCreatedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawEventCreatedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawEventCreatedPayload) ProtoMessage() {}

func (x *RawEventCreatedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawEventCreatedPayload.ProtoReflect.Descriptor instead.
func (*RawEventCreatedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *RawEventCreatedPayload) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RawEventCreatedPayload) GetSubs() []string {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *RawEventCreatedPayload) GetTargetTopic() string {
	if x != nil {
		return x.TargetTopic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RawEventCreatedPayload) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *RawEventCreatedPayload) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *RawEventCreatedPayload) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetRouterTopic() string {
	if x != nil {
		return x.RouterTopic
	}
	return ""
}

func (x *RawEventCreatedPayload) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *RawEventCreatedPayload) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *RawEventCreatedPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Events []*Event        `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	Total  int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *Events) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Events) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Events) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId    string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // TODO: remove
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // TODO: remove
	Created   int64           `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Type      string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`      // eventtype
	Topics    []string        `protobuf:"bytes,11,rep,name=topics,proto3" json:"topics,omitempty"` // TODO: remove
	By        *common.By      `protobuf:"bytes,50,opt,name=by,proto3" json:"by,omitempty"`
	Data      *Event_Data     `protobuf:"bytes,20,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Event) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Event) GetBy() *common.By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Event) GetData() *Event_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic           string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SubId           string          `protobuf:"bytes,7,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	TargetTopic     string          `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	TargetKey       string          `protobuf:"bytes,11,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Ttls            int64           `protobuf:"varint,12,opt,name=ttls,proto3" json:"ttls,omitempty"`
	RouterTopic     string          `protobuf:"bytes,13,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	TargetPartition int32           `protobuf:"varint,14,opt,name=target_partition,json=targetPartition,proto3" json:"target_partition,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *Subscription) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscription) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

func (x *Subscription) GetTargetTopic() string {
	if x != nil {
		return x.TargetTopic
	}
	return ""
}

func (x *Subscription) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *Subscription) GetTtls() int64 {
	if x != nil {
		return x.Ttls
	}
	return 0
}

func (x *Subscription) GetRouterTopic() string {
	if x != nil {
		return x.RouterTopic
	}
	return ""
}

func (x *Subscription) GetTargetPartition() int32 {
	if x != nil {
		return x.TargetPartition
	}
	return 0
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Query     string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Category  string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *ListEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListEventsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListEventsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListEventsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event     *Event          `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	User      *user.User      `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *UserEvent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *UserEvent) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Status bool            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *SubscriptionResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscriptionResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type AutomationCalledback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string            `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId       string            `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AutomationId string            `protobuf:"bytes,5,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	Event        *Event            `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	Action       *AutomationAction `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AutomationCalledback) Reset() {
	*x = AutomationCalledback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCalledback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCalledback) ProtoMessage() {}

func (x *AutomationCalledback) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCalledback.ProtoReflect.Descriptor instead.
func (*AutomationCalledback) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *AutomationCalledback) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCalledback) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCalledback) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationCalledback) GetAutomationId() string {
	if x != nil {
		return x.AutomationId
	}
	return ""
}

func (x *AutomationCalledback) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationCalledback) GetAction() *AutomationAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type AutomationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string            `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId     string            `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Automation *Automation       `protobuf:"bytes,5,opt,name=automation,proto3" json:"automation,omitempty"`
	User       *user.User        `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Event      *Event            `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	Action     *AutomationAction `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AutomationEvent) Reset() {
	*x = AutomationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationEvent) ProtoMessage() {}

func (x *AutomationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationEvent.ProtoReflect.Descriptor instead.
func (*AutomationEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *AutomationEvent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationEvent) GetAutomation() *Automation {
	if x != nil {
		return x.Automation
	}
	return nil
}

func (x *AutomationEvent) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AutomationEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationEvent) GetAction() *AutomationAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Automation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id           string              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Channel      string              `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"` // deprecated
	Name         string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Conditions   []*user.Condition   `protobuf:"bytes,7,rep,name=conditions,proto3" json:"conditions,omitempty"` // deprecated
	Condition    *user.SCondition    `protobuf:"bytes,8,opt,name=condition,proto3" json:"condition,omitempty"`
	Created      int64               `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified     int64               `protobuf:"varint,10,opt,name=modified,proto3" json:"modified,omitempty"`
	State        string              `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	ActionType   string              `protobuf:"bytes,13,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`        // deprecated
	ActionData   string              `protobuf:"bytes,14,opt,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`        // deprecated
	Scope        string              `protobuf:"bytes,15,opt,name=scope,proto3" json:"scope,omitempty"`                                    // deprecated
	CrossChannel bool                `protobuf:"varint,16,opt,name=cross_channel,json=crossChannel,proto3" json:"cross_channel,omitempty"` // deprecated
	Metadata     string              `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Actions      []*AutomationAction `protobuf:"bytes,18,rep,name=actions,proto3" json:"actions,omitempty"`
	DelaySec     uint32              `protobuf:"varint,19,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
	ActionId     string              `protobuf:"bytes,20,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"` // deprecated, prepare for migrate
}

func (x *Automation) Reset() {
	*x = Automation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automation) ProtoMessage() {}

func (x *Automation) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Automation.ProtoReflect.Descriptor instead.
func (*Automation) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *Automation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Automation) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Automation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Automation) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Automation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Automation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Automation) GetConditions() []*user.Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Automation) GetCondition() *user.SCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Automation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Automation) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Automation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Automation) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *Automation) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

func (x *Automation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Automation) GetCrossChannel() bool {
	if x != nil {
		return x.CrossChannel
	}
	return false
}

func (x *Automation) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Automation) GetActions() []*AutomationAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Automation) GetDelaySec() uint32 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

func (x *Automation) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type AutomationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              string                    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	User              *user.User                `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Email             *email.Email              `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	UserNote          *user.Note                `protobuf:"bytes,6,opt,name=user_note,json=userNote,proto3" json:"user_note,omitempty"`
	Event             *Event                    `protobuf:"bytes,7,opt,name=event,proto3" json:"event,omitempty"`
	AgentId           string                    `protobuf:"bytes,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // deprecated
	TagId             string                    `protobuf:"bytes,9,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`       // deprecated
	Events            []*Event                  `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Ticket            *conversation.Ticket      `protobuf:"bytes,11,opt,name=ticket,proto3" json:"ticket,omitempty"`
	IntegrationId     string                    `protobuf:"bytes,12,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	SegmentationId    string                    `protobuf:"bytes,13,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty"`
	AgentIds          []string                  `protobuf:"bytes,14,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	TagIds            []string                  `protobuf:"bytes,15,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	Scope             string                    `protobuf:"bytes,16,opt,name=scope,proto3" json:"scope,omitempty"`
	ConversationState string                    `protobuf:"bytes,17,opt,name=conversation_state,json=conversationState,proto3" json:"conversation_state,omitempty"`
	Id                string                    `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty"` // required, generated by subiz to check whether an action is performed or not
	WebhookId         string                    `protobuf:"bytes,19,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	WebhookSetting    *AutomationWebhookSetting `protobuf:"bytes,20,opt,name=webhook_setting,json=webhookSetting,proto3" json:"webhook_setting,omitempty"`
	DelaySec          uint32                    `protobuf:"varint,21,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
	FacebookPageId    string                    `protobuf:"bytes,22,opt,name=facebook_page_id,json=facebookPageId,proto3" json:"facebook_page_id,omitempty"`
}

func (x *AutomationAction) Reset() {
	*x = AutomationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationAction) ProtoMessage() {}

func (x *AutomationAction) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationAction.ProtoReflect.Descriptor instead.
func (*AutomationAction) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10}
}

func (x *AutomationAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutomationAction) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AutomationAction) GetEmail() *email.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AutomationAction) GetUserNote() *user.Note {
	if x != nil {
		return x.UserNote
	}
	return nil
}

func (x *AutomationAction) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AutomationAction) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AutomationAction) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *AutomationAction) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AutomationAction) GetTicket() *conversation.Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *AutomationAction) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AutomationAction) GetSegmentationId() string {
	if x != nil {
		return x.SegmentationId
	}
	return ""
}

func (x *AutomationAction) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AutomationAction) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *AutomationAction) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AutomationAction) GetConversationState() string {
	if x != nil {
		return x.ConversationState
	}
	return ""
}

func (x *AutomationAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutomationAction) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *AutomationAction) GetWebhookSetting() *AutomationWebhookSetting {
	if x != nil {
		return x.WebhookSetting
	}
	return nil
}

func (x *AutomationAction) GetDelaySec() uint32 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

func (x *AutomationAction) GetFacebookPageId() string {
	if x != nil {
		return x.FacebookPageId
	}
	return ""
}

type AutomationWebhookSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       bool `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent         bool `protobuf:"varint,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message       bool `protobuf:"varint,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation  bool `protobuf:"varint,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Postback      bool `protobuf:"varint,5,opt,name=postback,proto3" json:"postback,omitempty"`
	Content       bool `protobuf:"varint,6,opt,name=content,proto3" json:"content,omitempty"`
	User          bool `protobuf:"varint,10,opt,name=user,proto3" json:"user,omitempty"`
	Group         bool `protobuf:"varint,18,opt,name=group,proto3" json:"group,omitempty"`
	Limit         bool `protobuf:"varint,19,opt,name=limit,proto3" json:"limit,omitempty"`
	UserAttribute bool `protobuf:"varint,20,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Note          bool `protobuf:"varint,23,opt,name=note,proto3" json:"note,omitempty"`
	Ticket        bool `protobuf:"varint,24,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Automation    bool `protobuf:"varint,25,opt,name=automation,proto3" json:"automation,omitempty"`
	Event         bool `protobuf:"varint,26,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AutomationWebhookSetting) Reset() {
	*x = AutomationWebhookSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationWebhookSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationWebhookSetting) ProtoMessage() {}

func (x *AutomationWebhookSetting) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationWebhookSetting.ProtoReflect.Descriptor instead.
func (*AutomationWebhookSetting) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{11}
}

func (x *AutomationWebhookSetting) GetAccount() bool {
	if x != nil {
		return x.Account
	}
	return false
}

func (x *AutomationWebhookSetting) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *AutomationWebhookSetting) GetMessage() bool {
	if x != nil {
		return x.Message
	}
	return false
}

func (x *AutomationWebhookSetting) GetConversation() bool {
	if x != nil {
		return x.Conversation
	}
	return false
}

func (x *AutomationWebhookSetting) GetPostback() bool {
	if x != nil {
		return x.Postback
	}
	return false
}

func (x *AutomationWebhookSetting) GetContent() bool {
	if x != nil {
		return x.Content
	}
	return false
}

func (x *AutomationWebhookSetting) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *AutomationWebhookSetting) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *AutomationWebhookSetting) GetLimit() bool {
	if x != nil {
		return x.Limit
	}
	return false
}

func (x *AutomationWebhookSetting) GetUserAttribute() bool {
	if x != nil {
		return x.UserAttribute
	}
	return false
}

func (x *AutomationWebhookSetting) GetNote() bool {
	if x != nil {
		return x.Note
	}
	return false
}

func (x *AutomationWebhookSetting) GetTicket() bool {
	if x != nil {
		return x.Ticket
	}
	return false
}

func (x *AutomationWebhookSetting) GetAutomation() bool {
	if x != nil {
		return x.Automation
	}
	return false
}

func (x *AutomationWebhookSetting) GetEvent() bool {
	if x != nil {
		return x.Event
	}
	return false
}

type Automations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Automations []*Automation   `protobuf:"bytes,2,rep,name=automations,proto3" json:"automations,omitempty"`
}

func (x *Automations) Reset() {
	*x = Automations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automations) ProtoMessage() {}

func (x *Automations) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Automations.ProtoReflect.Descriptor instead.
func (*Automations) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{12}
}

func (x *Automations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Automations) GetAutomations() []*Automation {
	if x != nil {
		return x.Automations
	}
	return nil
}

type AutomationCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AutomationId string `protobuf:"bytes,3,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	UserId       string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId      string `protobuf:"bytes,5,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Scope        string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AutomationCheck) Reset() {
	*x = AutomationCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCheck) ProtoMessage() {}

func (x *AutomationCheck) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCheck.ProtoReflect.Descriptor instead.
func (*AutomationCheck) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{13}
}

func (x *AutomationCheck) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCheck) GetAutomationId() string {
	if x != nil {
		return x.AutomationId
	}
	return ""
}

func (x *AutomationCheck) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AutomationCheck) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AutomationCheck) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AutomationCreditsAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebhookFired int64           `protobuf:"varint,3,opt,name=webhook_fired,json=webhookFired,proto3" json:"webhook_fired,omitempty"`
	MessageFired int64           `protobuf:"varint,4,opt,name=message_fired,json=messageFired,proto3" json:"message_fired,omitempty"`
	EmailFired   int64           `protobuf:"varint,5,opt,name=email_fired,json=emailFired,proto3" json:"email_fired,omitempty"`
	Min          int64           `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
}

func (x *AutomationCreditsAggregate) Reset() {
	*x = AutomationCreditsAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCreditsAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCreditsAggregate) ProtoMessage() {}

func (x *AutomationCreditsAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCreditsAggregate.ProtoReflect.Descriptor instead.
func (*AutomationCreditsAggregate) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{14}
}

func (x *AutomationCreditsAggregate) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCreditsAggregate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCreditsAggregate) GetWebhookFired() int64 {
	if x != nil {
		return x.WebhookFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetMessageFired() int64 {
	if x != nil {
		return x.MessageFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetEmailFired() int64 {
	if x != nil {
		return x.EmailFired
	}
	return 0
}

func (x *AutomationCreditsAggregate) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

type AutomationCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebhookFired   int64           `protobuf:"varint,3,opt,name=webhook_fired,json=webhookFired,proto3" json:"webhook_fired,omitempty"`
	MessageFired   int64           `protobuf:"varint,4,opt,name=message_fired,json=messageFired,proto3" json:"message_fired,omitempty"`
	EmailFired     int64           `protobuf:"varint,5,opt,name=email_fired,json=emailFired,proto3" json:"email_fired,omitempty"`
	WebhookAddon   int64           `protobuf:"varint,8,opt,name=webhook_addon,json=webhookAddon,proto3" json:"webhook_addon,omitempty"`
	MessageAddon   int64           `protobuf:"varint,9,opt,name=message_addon,json=messageAddon,proto3" json:"message_addon,omitempty"`
	EmailAddon     int64           `protobuf:"varint,10,opt,name=email_addon,json=emailAddon,proto3" json:"email_addon,omitempty"`
	WebhookCredits int64           `protobuf:"varint,14,opt,name=webhook_credits,json=webhookCredits,proto3" json:"webhook_credits,omitempty"`
	MessageCredits int64           `protobuf:"varint,15,opt,name=message_credits,json=messageCredits,proto3" json:"message_credits,omitempty"`
	EmailCredits   int64           `protobuf:"varint,16,opt,name=email_credits,json=emailCredits,proto3" json:"email_credits,omitempty"`
	Month          int64           `protobuf:"varint,20,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *AutomationCredit) Reset() {
	*x = AutomationCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationCredit) ProtoMessage() {}

func (x *AutomationCredit) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationCredit.ProtoReflect.Descriptor instead.
func (*AutomationCredit) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15}
}

func (x *AutomationCredit) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AutomationCredit) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutomationCredit) GetWebhookFired() int64 {
	if x != nil {
		return x.WebhookFired
	}
	return 0
}

func (x *AutomationCredit) GetMessageFired() int64 {
	if x != nil {
		return x.MessageFired
	}
	return 0
}

func (x *AutomationCredit) GetEmailFired() int64 {
	if x != nil {
		return x.EmailFired
	}
	return 0
}

func (x *AutomationCredit) GetWebhookAddon() int64 {
	if x != nil {
		return x.WebhookAddon
	}
	return 0
}

func (x *AutomationCredit) GetMessageAddon() int64 {
	if x != nil {
		return x.MessageAddon
	}
	return 0
}

func (x *AutomationCredit) GetEmailAddon() int64 {
	if x != nil {
		return x.EmailAddon
	}
	return 0
}

func (x *AutomationCredit) GetWebhookCredits() int64 {
	if x != nil {
		return x.WebhookCredits
	}
	return 0
}

func (x *AutomationCredit) GetMessageCredits() int64 {
	if x != nil {
		return x.MessageCredits
	}
	return 0
}

func (x *AutomationCredit) GetEmailCredits() int64 {
	if x != nil {
		return x.EmailCredits
	}
	return 0
}

func (x *AutomationCredit) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Topic     string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Type      string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Updated   int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread    int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"` // deprecated by is_read
	UserId    string          `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,11,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ByEvent   *Event          `protobuf:"bytes,14,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
	IsMuted   bool            `protobuf:"varint,15,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	IsRead    bool            `protobuf:"varint,16,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{16}
}

func (x *Topic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Topic) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Topic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Topic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Topic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Topic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *Topic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Topic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Topic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

func (x *Topic) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *Topic) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type UnreadTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic   string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	AgentId string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserId  string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type    string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Updated int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread  int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"`
	ByEvent *Event          `protobuf:"bytes,10,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
}

func (x *UnreadTopic) Reset() {
	*x = UnreadTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadTopic) ProtoMessage() {}

func (x *UnreadTopic) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadTopic.ProtoReflect.Descriptor instead.
func (*UnreadTopic) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{17}
}

func (x *UnreadTopic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UnreadTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UnreadTopic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *UnreadTopic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnreadTopic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnreadTopic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UnreadTopic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *UnreadTopic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

type ListTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Anchor    string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Unread    bool            `protobuf:"varint,8,opt,name=unread,proto3" json:"unread,omitempty"`
}

func (x *ListTopicsRequest) Reset() {
	*x = ListTopicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsRequest) ProtoMessage() {}

func (x *ListTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{18}
}

func (x *ListTopicsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListTopicsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListTopicsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListTopicsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListTopicsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListTopicsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTopicsRequest) GetUnread() bool {
	if x != nil {
		return x.Unread
	}
	return false
}

type ListTopicsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topics []*Topic        `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
	Anchor string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *ListTopicsResult) Reset() {
	*x = ListTopicsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsResult) ProtoMessage() {}

func (x *ListTopicsResult) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsResult.ProtoReflect.Descriptor instead.
func (*ListTopicsResult) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{19}
}

func (x *ListTopicsResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListTopicsResult) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ListTopicsResult) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type Event_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account             *account.Account           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent               *account.Agent             `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message             *conversation.Message      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation        *conversation.Conversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Postback            *conversation.Postback     `protobuf:"bytes,5,opt,name=postback,proto3" json:"postback,omitempty"`
	Content             *content.Content           `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Topic               *Topic                     `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Presence            *user.Presence             `protobuf:"bytes,8,opt,name=presence,proto3" json:"presence,omitempty"`
	User                *user.User                 `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	UnreadTopic         *UnreadTopic               `protobuf:"bytes,11,opt,name=unread_topic,json=unreadTopic,proto3" json:"unread_topic,omitempty"` // todo: remove
	MyUser              *user.MyUser               `protobuf:"bytes,12,opt,name=my_user,json=myUser,proto3" json:"my_user,omitempty"`
	Notification        *notibox.Notification      `protobuf:"bytes,14,opt,name=notification,proto3" json:"notification,omitempty"`
	AgentPerm           *account.AgentPerm         `protobuf:"bytes,16,opt,name=agent_perm,json=agentPerm,proto3" json:"agent_perm,omitempty"`
	GroupMember         *account.GroupMember       `protobuf:"bytes,17,opt,name=group_member,json=groupMember,proto3" json:"group_member,omitempty"`
	Group               *account.AgentGroup        `protobuf:"bytes,18,opt,name=group,proto3" json:"group,omitempty"`
	Limit               *payment.Limit             `protobuf:"bytes,19,opt,name=limit,proto3" json:"limit,omitempty"`
	Alias               *user.Identification       `protobuf:"bytes,22,opt,name=alias,proto3" json:"alias,omitempty"`
	Note                *user.Note                 `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
	Ticket              *conversation.Ticket       `protobuf:"bytes,24,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Automation          *Automation                `protobuf:"bytes,25,opt,name=automation,proto3" json:"automation,omitempty"`
	Event               *Event                     `protobuf:"bytes,26,opt,name=event,proto3" json:"event,omitempty"`
	AutomationEvent     *AutomationEvent           `protobuf:"bytes,30,opt,name=automation_event,json=automationEvent,proto3" json:"automation_event,omitempty"`
	Notibox             *notibox.Notibox           `protobuf:"bytes,32,opt,name=notibox,proto3" json:"notibox,omitempty"`
	NotificationSetting *noti5.Setting             `protobuf:"bytes,34,opt,name=notification_setting,json=notificationSetting,proto3" json:"notification_setting,omitempty"`
	Identification      *user.Identification       `protobuf:"bytes,35,opt,name=identification,proto3" json:"identification,omitempty"`
	Rule                *conversation.Rule         `protobuf:"bytes,36,opt,name=rule,proto3" json:"rule,omitempty"`
	UserAttribute       *user.AttributeDefinition  `protobuf:"bytes,37,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Tag                 *conversation.Tag          `protobuf:"bytes,38,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Event_Data) Reset() {
	*x = Event_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Data) ProtoMessage() {}

func (x *Event_Data) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Data.ProtoReflect.Descriptor instead.
func (*Event_Data) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Event_Data) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Event_Data) GetAgent() *account.Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Event_Data) GetMessage() *conversation.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Event_Data) GetConversation() *conversation.Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *Event_Data) GetPostback() *conversation.Postback {
	if x != nil {
		return x.Postback
	}
	return nil
}

func (x *Event_Data) GetContent() *content.Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Event_Data) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Event_Data) GetPresence() *user.Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Event_Data) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Event_Data) GetUnreadTopic() *UnreadTopic {
	if x != nil {
		return x.UnreadTopic
	}
	return nil
}

func (x *Event_Data) GetMyUser() *user.MyUser {
	if x != nil {
		return x.MyUser
	}
	return nil
}

func (x *Event_Data) GetNotification() *notibox.Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *Event_Data) GetAgentPerm() *account.AgentPerm {
	if x != nil {
		return x.AgentPerm
	}
	return nil
}

func (x *Event_Data) GetGroupMember() *account.GroupMember {
	if x != nil {
		return x.GroupMember
	}
	return nil
}

func (x *Event_Data) GetGroup() *account.AgentGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Event_Data) GetLimit() *payment.Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Event_Data) GetAlias() *user.Identification {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Event_Data) GetNote() *user.Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Event_Data) GetTicket() *conversation.Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *Event_Data) GetAutomation() *Automation {
	if x != nil {
		return x.Automation
	}
	return nil
}

func (x *Event_Data) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event_Data) GetAutomationEvent() *AutomationEvent {
	if x != nil {
		return x.AutomationEvent
	}
	return nil
}

func (x *Event_Data) GetNotibox() *notibox.Notibox {
	if x != nil {
		return x.Notibox
	}
	return nil
}

func (x *Event_Data) GetNotificationSetting() *noti5.Setting {
	if x != nil {
		return x.NotificationSetting
	}
	return nil
}

func (x *Event_Data) GetIdentification() *user.Identification {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *Event_Data) GetRule() *conversation.Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Event_Data) GetUserAttribute() *user.AttributeDefinition {
	if x != nil {
		return x.UserAttribute
	}
	return nil
}

func (x *Event_Data) GetTag() *conversation.Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x16, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xbd, 0x0c, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x52, 0x02, 0x62, 0x79,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xbf, 0x0a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f,
	0x78, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12,
	0x37, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78,
	0x52, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x12, 0x41, 0x0a, 0x14, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x74, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xaa, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xeb, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x02,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x07, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x22, 0xb2, 0x02, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x10, 0x0c,
	0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12,
	0x22, 0x2d, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x10, 0x03, 0x22,
	0x9a, 0x09, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x61,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b,
	0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x64,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x13, 0x22, 0x87, 0x03, 0x0a,
	0x18, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xdb, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x22, 0xe4, 0x03,
	0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x02, 0x22, 0xb6, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d,
	0x75, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0xe9, 0x01,
	0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x27, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x73, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x2a, 0xcb, 0x0d, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x05, 0x0a, 0x01, 0x61, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10,
	0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x13, 0x12, 0x15,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x15,
	0x12, 0x10, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x10, 0x19, 0x12, 0x14,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x64, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x74, 0x6f, 0x63, 0x61, 0x72, 0x74, 0x10, 0x1b, 0x12, 0x16, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x6f, 0x75, 0x74, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x21, 0x12, 0x1a,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x10, 0x24, 0x12, 0x21,
	0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x25, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x2c,
	0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x10,
	0x2e, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x31, 0x12,
	0x16, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x10, 0x33, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x10, 0x34, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x35,
	0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x36, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x37, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x39, 0x12, 0x13,
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x10, 0x3c, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3d, 0x12, 0x18,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x3e, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x40,
	0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x41, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x42, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x10, 0x44, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x61,
	0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x74,
	0x61, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x48, 0x12, 0x1c, 0x0a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x49, 0x12, 0x15, 0x0a, 0x11, 0x7a, 0x61, 0x6c, 0x6f,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x4a, 0x12,
	0x15, 0x0a, 0x11, 0x7a, 0x61, 0x6c, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x10, 0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x4c, 0x12, 0x1a, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x4d, 0x12, 0x19,
	0x0a, 0x15, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x4e, 0x12, 0x19, 0x0a, 0x15, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x4f, 0x12, 0x1b, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x50, 0x12, 0x1b, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x51, 0x2a, 0x27,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_event_proto_goTypes = []interface{}{
	(RealtimeType)(0),                  // 0: event.RealtimeType
	(SubPrefix)(0),                     // 1: event.SubPrefix
	(Automation_State)(0),              // 2: event.Automation.State
	(Automation_ActionType)(0),         // 3: event.Automation.ActionType
	(Automation_AutomationScope)(0),    // 4: event.Automation.AutomationScope
	(AutomationAction_ActionType)(0),   // 5: event.AutomationAction.ActionType
	(AutomationCredit_Type)(0),         // 6: event.AutomationCredit.Type
	(*RawEventCreatedPayload)(nil),     // 7: event.RawEventCreatedPayload
	(*Events)(nil),                     // 8: event.Events
	(*Event)(nil),                      // 9: event.Event
	(*Subscription)(nil),               // 10: event.Subscription
	(*ListEventsRequest)(nil),          // 11: event.ListEventsRequest
	(*UserEvent)(nil),                  // 12: event.UserEvent
	(*SubscriptionResponse)(nil),       // 13: event.SubscriptionResponse
	(*AutomationCalledback)(nil),       // 14: event.AutomationCalledback
	(*AutomationEvent)(nil),            // 15: event.AutomationEvent
	(*Automation)(nil),                 // 16: event.Automation
	(*AutomationAction)(nil),           // 17: event.AutomationAction
	(*AutomationWebhookSetting)(nil),   // 18: event.AutomationWebhookSetting
	(*Automations)(nil),                // 19: event.Automations
	(*AutomationCheck)(nil),            // 20: event.AutomationCheck
	(*AutomationCreditsAggregate)(nil), // 21: event.AutomationCreditsAggregate
	(*AutomationCredit)(nil),           // 22: event.AutomationCredit
	(*Topic)(nil),                      // 23: event.Topic
	(*UnreadTopic)(nil),                // 24: event.UnreadTopic
	(*ListTopicsRequest)(nil),          // 25: event.ListTopicsRequest
	(*ListTopicsResult)(nil),           // 26: event.ListTopicsResult
	(*Event_Data)(nil),                 // 27: event.Event.Data
	(*common.Context)(nil),             // 28: common.Context
	(*common.By)(nil),                  // 29: common.By
	(*user.User)(nil),                  // 30: user.User
	(*user.Condition)(nil),             // 31: user.Condition
	(*user.SCondition)(nil),            // 32: user.SCondition
	(*email.Email)(nil),                // 33: email.Email
	(*user.Note)(nil),                  // 34: user.Note
	(*conversation.Ticket)(nil),        // 35: conversation.Ticket
	(*account.Account)(nil),            // 36: account.Account
	(*account.Agent)(nil),              // 37: account.Agent
	(*conversation.Message)(nil),       // 38: conversation.Message
	(*conversation.Conversation)(nil),  // 39: conversation.Conversation
	(*conversation.Postback)(nil),      // 40: conversation.Postback
	(*content.Content)(nil),            // 41: content.Content
	(*user.Presence)(nil),              // 42: user.Presence
	(*user.MyUser)(nil),                // 43: user.MyUser
	(*notibox.Notification)(nil),       // 44: notibox.Notification
	(*account.AgentPerm)(nil),          // 45: account.AgentPerm
	(*account.GroupMember)(nil),        // 46: account.GroupMember
	(*account.AgentGroup)(nil),         // 47: account.AgentGroup
	(*payment.Limit)(nil),              // 48: payment.Limit
	(*user.Identification)(nil),        // 49: user.Identification
	(*notibox.Notibox)(nil),            // 50: notibox.Notibox
	(*noti5.Setting)(nil),              // 51: noti5.Setting
	(*conversation.Rule)(nil),          // 52: conversation.Rule
	(*user.AttributeDefinition)(nil),   // 53: user.AttributeDefinition
	(*conversation.Tag)(nil),           // 54: conversation.Tag
}
var file_event_proto_depIdxs = []int32{
	28, // 0: event.RawEventCreatedPayload.ctx:type_name -> common.Context
	28, // 1: event.Events.ctx:type_name -> common.Context
	9,  // 2: event.Events.events:type_name -> event.Event
	28, // 3: event.Event.ctx:type_name -> common.Context
	29, // 4: event.Event.by:type_name -> common.By
	27, // 5: event.Event.data:type_name -> event.Event.Data
	28, // 6: event.Subscription.ctx:type_name -> common.Context
	28, // 7: event.ListEventsRequest.ctx:type_name -> common.Context
	28, // 8: event.UserEvent.ctx:type_name -> common.Context
	9,  // 9: event.UserEvent.event:type_name -> event.Event
	30, // 10: event.UserEvent.user:type_name -> user.User
	28, // 11: event.SubscriptionResponse.ctx:type_name -> common.Context
	28, // 12: event.AutomationCalledback.ctx:type_name -> common.Context
	9,  // 13: event.AutomationCalledback.event:type_name -> event.Event
	17, // 14: event.AutomationCalledback.action:type_name -> event.AutomationAction
	28, // 15: event.AutomationEvent.ctx:type_name -> common.Context
	16, // 16: event.AutomationEvent.automation:type_name -> event.Automation
	30, // 17: event.AutomationEvent.user:type_name -> user.User
	9,  // 18: event.AutomationEvent.event:type_name -> event.Event
	17, // 19: event.AutomationEvent.action:type_name -> event.AutomationAction
	28, // 20: event.Automation.ctx:type_name -> common.Context
	31, // 21: event.Automation.conditions:type_name -> user.Condition
	32, // 22: event.Automation.condition:type_name -> user.SCondition
	17, // 23: event.Automation.actions:type_name -> event.AutomationAction
	30, // 24: event.AutomationAction.user:type_name -> user.User
	33, // 25: event.AutomationAction.email:type_name -> email.Email
	34, // 26: event.AutomationAction.user_note:type_name -> user.Note
	9,  // 27: event.AutomationAction.event:type_name -> event.Event
	9,  // 28: event.AutomationAction.events:type_name -> event.Event
	35, // 29: event.AutomationAction.ticket:type_name -> conversation.Ticket
	18, // 30: event.AutomationAction.webhook_setting:type_name -> event.AutomationWebhookSetting
	28, // 31: event.Automations.ctx:type_name -> common.Context
	16, // 32: event.Automations.automations:type_name -> event.Automation
	28, // 33: event.AutomationCreditsAggregate.ctx:type_name -> common.Context
	28, // 34: event.AutomationCredit.ctx:type_name -> common.Context
	28, // 35: event.Topic.ctx:type_name -> common.Context
	9,  // 36: event.Topic.by_event:type_name -> event.Event
	28, // 37: event.UnreadTopic.ctx:type_name -> common.Context
	9,  // 38: event.UnreadTopic.by_event:type_name -> event.Event
	28, // 39: event.ListTopicsRequest.ctx:type_name -> common.Context
	28, // 40: event.ListTopicsResult.ctx:type_name -> common.Context
	23, // 41: event.ListTopicsResult.topics:type_name -> event.Topic
	36, // 42: event.Event.Data.account:type_name -> account.Account
	37, // 43: event.Event.Data.agent:type_name -> account.Agent
	38, // 44: event.Event.Data.message:type_name -> conversation.Message
	39, // 45: event.Event.Data.conversation:type_name -> conversation.Conversation
	40, // 46: event.Event.Data.postback:type_name -> conversation.Postback
	41, // 47: event.Event.Data.content:type_name -> content.Content
	23, // 48: event.Event.Data.topic:type_name -> event.Topic
	42, // 49: event.Event.Data.presence:type_name -> user.Presence
	30, // 50: event.Event.Data.user:type_name -> user.User
	24, // 51: event.Event.Data.unread_topic:type_name -> event.UnreadTopic
	43, // 52: event.Event.Data.my_user:type_name -> user.MyUser
	44, // 53: event.Event.Data.notification:type_name -> notibox.Notification
	45, // 54: event.Event.Data.agent_perm:type_name -> account.AgentPerm
	46, // 55: event.Event.Data.group_member:type_name -> account.GroupMember
	47, // 56: event.Event.Data.group:type_name -> account.AgentGroup
	48, // 57: event.Event.Data.limit:type_name -> payment.Limit
	49, // 58: event.Event.Data.alias:type_name -> user.Identification
	34, // 59: event.Event.Data.note:type_name -> user.Note
	35, // 60: event.Event.Data.ticket:type_name -> conversation.Ticket
	16, // 61: event.Event.Data.automation:type_name -> event.Automation
	9,  // 62: event.Event.Data.event:type_name -> event.Event
	15, // 63: event.Event.Data.automation_event:type_name -> event.AutomationEvent
	50, // 64: event.Event.Data.notibox:type_name -> notibox.Notibox
	51, // 65: event.Event.Data.notification_setting:type_name -> noti5.Setting
	49, // 66: event.Event.Data.identification:type_name -> user.Identification
	52, // 67: event.Event.Data.rule:type_name -> conversation.Rule
	53, // 68: event.Event.Data.user_attribute:type_name -> user.AttributeDefinition
	54, // 69: event.Event.Data.tag:type_name -> conversation.Tag
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawEventCreatedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCalledback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Automation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationWebhookSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Automations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCreditsAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomationCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
