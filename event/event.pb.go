// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/event.proto

package event

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	content "github.com/subiz/header/content"
	conversation "github.com/subiz/header/conversation"
	notibox "github.com/subiz/header/notibox"
	payment "github.com/subiz/header/payment"
	user "github.com/subiz/header/user"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_Sub              Event = 0
	Event_RawEventCreated  Event = 3
	Event_Subscribe        Event = 4
	Event_SubscribeReply   Event = 6
	Event_Unsubscribe      Event = 5
	Event_UnsubscribeReply Event = 7
	Event_EventSync        Event = 8
	Event_EventCreated     Event = 9
)

var Event_name = map[int32]string{
	0: "Sub",
	3: "RawEventCreated",
	4: "Subscribe",
	6: "SubscribeReply",
	5: "Unsubscribe",
	7: "UnsubscribeReply",
	8: "EventSync",
	9: "EventCreated",
}

var Event_value = map[string]int32{
	"Sub":              0,
	"RawEventCreated":  3,
	"Subscribe":        4,
	"SubscribeReply":   6,
	"Unsubscribe":      5,
	"UnsubscribeReply": 7,
	"EventSync":        8,
	"EventCreated":     9,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{0}
}

type AccountType int32

const (
	AccountType_a                        AccountType = 0
	AccountType_account_deleted          AccountType = 60
	AccountType_account_info_updated     AccountType = 61
	AccountType_group_created            AccountType = 62
	AccountType_group_deleted            AccountType = 63
	AccountType_group_info_updated       AccountType = 64
	AccountType_group_joined             AccountType = 65
	AccountType_group_left               AccountType = 66
	AccountType_invitation_accepted      AccountType = 68
	AccountType_agent_deleted            AccountType = 69
	AccountType_agent_info_updated       AccountType = 70
	AccountType_agent_permission_updated AccountType = 71
	AccountType_limit_updated            AccountType = 72
)

var AccountType_name = map[int32]string{
	0:  "a",
	60: "account_deleted",
	61: "account_info_updated",
	62: "group_created",
	63: "group_deleted",
	64: "group_info_updated",
	65: "group_joined",
	66: "group_left",
	68: "invitation_accepted",
	69: "agent_deleted",
	70: "agent_info_updated",
	71: "agent_permission_updated",
	72: "limit_updated",
}

var AccountType_value = map[string]int32{
	"a":                        0,
	"account_deleted":          60,
	"account_info_updated":     61,
	"group_created":            62,
	"group_deleted":            63,
	"group_info_updated":       64,
	"group_joined":             65,
	"group_left":               66,
	"invitation_accepted":      68,
	"agent_deleted":            69,
	"agent_info_updated":       70,
	"agent_permission_updated": 71,
	"limit_updated":            72,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{1}
}

type UserType int32

const (
	UserType_u                     UserType = 0
	UserType_my_user_upserted      UserType = 46
	UserType_user_info_updated     UserType = 48
	UserType_alias_created         UserType = 49
	UserType_alias_deleted         UserType = 50
	UserType_user_added_to_my_list UserType = 51
	UserType_user_created          UserType = 52
	UserType_note_created          UserType = 53
)

var UserType_name = map[int32]string{
	0:  "u",
	46: "my_user_upserted",
	48: "user_info_updated",
	49: "alias_created",
	50: "alias_deleted",
	51: "user_added_to_my_list",
	52: "user_created",
	53: "note_created",
}

var UserType_value = map[string]int32{
	"u":                     0,
	"my_user_upserted":      46,
	"user_info_updated":     48,
	"alias_created":         49,
	"alias_deleted":         50,
	"user_added_to_my_list": 51,
	"user_created":          52,
	"note_created":          53,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{2}
}

type EventType int32

const (
	EventType_e                         EventType = 0
	EventType_presence_updated          EventType = 38
	EventType_content_viewed            EventType = 39
	EventType_content_searched          EventType = 40
	EventType_content_addedtocart       EventType = 41
	EventType_content_checkedout        EventType = 42
	EventType_content_purchased         EventType = 43
	EventType_topic_read                EventType = 44
	EventType_subscribed_topic_updated  EventType = 45
	EventType_user_topic_updated        EventType = 50
	EventType_user_attribute_created    EventType = 51
	EventType_user_attribute_updated    EventType = 52
	EventType_user_attribute_deleted    EventType = 55
	EventType_automation_credit_limited EventType = 70
)

var EventType_name = map[int32]string{
	0:  "e",
	38: "presence_updated",
	39: "content_viewed",
	40: "content_searched",
	41: "content_addedtocart",
	42: "content_checkedout",
	43: "content_purchased",
	44: "topic_read",
	45: "subscribed_topic_updated",
	50: "user_topic_updated",
	51: "user_attribute_created",
	52: "user_attribute_updated",
	55: "user_attribute_deleted",
	70: "automation_credit_limited",
}

var EventType_value = map[string]int32{
	"e":                         0,
	"presence_updated":          38,
	"content_viewed":            39,
	"content_searched":          40,
	"content_addedtocart":       41,
	"content_checkedout":        42,
	"content_purchased":         43,
	"topic_read":                44,
	"subscribed_topic_updated":  45,
	"user_topic_updated":        50,
	"user_attribute_created":    51,
	"user_attribute_updated":    52,
	"user_attribute_deleted":    55,
	"automation_credit_limited": 70,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{3}
}

type ConvoType int32

const (
	ConvoType_c                          ConvoType = 0
	ConvoType_conversation_updated       ConvoType = 9
	ConvoType_message_sent               ConvoType = 10
	ConvoType_conversation_state_updated ConvoType = 11
	// conversation_started = 1;
	ConvoType_conversation_joined ConvoType = 2
	// conversation_message = 3;
	ConvoType_conversation_left ConvoType = 4
	// conversation_closed = 5;
	ConvoType_conversation_tagged   ConvoType = 6
	ConvoType_conversation_untagged ConvoType = 7
	// conversation_waiting = 8;
	ConvoType_channel_deintegrated       ConvoType = 20
	ConvoType_channel_integrated         ConvoType = 21
	ConvoType_message_seen               ConvoType = 30
	ConvoType_message_acked              ConvoType = 31
	ConvoType_message_received           ConvoType = 32
	ConvoType_conversation_member_typing ConvoType = 33
	ConvoType_conversation_postbacked    ConvoType = 34
	ConvoType_conversation_unassigned    ConvoType = 35
	ConvoType_conversation_assigned      ConvoType = 36
	ConvoType_conversation_pending       ConvoType = 81
	ConvoType_ticket_created             ConvoType = 82
	ConvoType_ticket_updated             ConvoType = 83
	ConvoType_ticket_deleted             ConvoType = 84
)

var ConvoType_name = map[int32]string{
	0:  "c",
	9:  "conversation_updated",
	10: "message_sent",
	11: "conversation_state_updated",
	2:  "conversation_joined",
	4:  "conversation_left",
	6:  "conversation_tagged",
	7:  "conversation_untagged",
	20: "channel_deintegrated",
	21: "channel_integrated",
	30: "message_seen",
	31: "message_acked",
	32: "message_received",
	33: "conversation_member_typing",
	34: "conversation_postbacked",
	35: "conversation_unassigned",
	36: "conversation_assigned",
	81: "conversation_pending",
	82: "ticket_created",
	83: "ticket_updated",
	84: "ticket_deleted",
}

var ConvoType_value = map[string]int32{
	"c": 0,
	"conversation_updated":       9,
	"message_sent":               10,
	"conversation_state_updated": 11,
	"conversation_joined":        2,
	"conversation_left":          4,
	"conversation_tagged":        6,
	"conversation_untagged":      7,
	"channel_deintegrated":       20,
	"channel_integrated":         21,
	"message_seen":               30,
	"message_acked":              31,
	"message_received":           32,
	"conversation_member_typing": 33,
	"conversation_postbacked":    34,
	"conversation_unassigned":    35,
	"conversation_assigned":      36,
	"conversation_pending":       81,
	"ticket_created":             82,
	"ticket_updated":             83,
	"ticket_deleted":             84,
}

func (x ConvoType) String() string {
	return proto.EnumName(ConvoType_name, int32(x))
}

func (ConvoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{4}
}

type NotiboxType int32

const (
	NotiboxType_n                     NotiboxType = 0
	NotiboxType_notification_upserted NotiboxType = 52
	NotiboxType_notibox_upserted      NotiboxType = 53
)

var NotiboxType_name = map[int32]string{
	0:  "n",
	52: "notification_upserted",
	53: "notibox_upserted",
}

var NotiboxType_value = map[string]int32{
	"n": 0,
	"notification_upserted": 52,
	"notibox_upserted":      53,
}

func (x NotiboxType) String() string {
	return proto.EnumName(NotiboxType_name, int32(x))
}

func (NotiboxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{5}
}

type SubscriberType int32

const (
	SubscriberType_st_user    SubscriberType = 0
	SubscriberType_st_channel SubscriberType = 1
)

var SubscriberType_name = map[int32]string{
	0: "st_user",
	1: "st_channel",
}

var SubscriberType_value = map[string]int32{
	"st_user":    0,
	"st_channel": 1,
}

func (x SubscriberType) String() string {
	return proto.EnumName(SubscriberType_name, int32(x))
}

func (SubscriberType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{6}
}

type SubPrefix int32

const (
	SubPrefix_Webhook   SubPrefix = 0
	SubPrefix_Websocket SubPrefix = 1
)

var SubPrefix_name = map[int32]string{
	0: "Webhook",
	1: "Websocket",
}

var SubPrefix_value = map[string]int32{
	"Webhook":   0,
	"Websocket": 1,
}

func (x SubPrefix) String() string {
	return proto.EnumName(SubPrefix_name, int32(x))
}

func (SubPrefix) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{7}
}

type Object int32

const (
	Object_none           Object = 0
	Object_account        Object = 1
	Object_agent          Object = 2
	Object_message        Object = 3
	Object_conversation   Object = 4
	Object_postback       Object = 5
	Object_content        Object = 6
	Object_topic          Object = 7
	Object_presence       Object = 8
	Object_user           Object = 10
	Object_unread_topic   Object = 11
	Object_my_user        Object = 12
	Object_notification   Object = 14
	Object_notibox        Object = 15
	Object_agent_perm     Object = 16
	Object_group_member   Object = 17
	Object_group          Object = 18
	Object_integration    Object = 30
	Object_limit          Object = 19
	Object_user_attribute Object = 20
	Object_alias          Object = 22
	Object_note           Object = 23
	Object_ticket         Object = 24
)

var Object_name = map[int32]string{
	0:  "none",
	1:  "account",
	2:  "agent",
	3:  "message",
	4:  "conversation",
	5:  "postback",
	6:  "content",
	7:  "topic",
	8:  "presence",
	10: "user",
	11: "unread_topic",
	12: "my_user",
	14: "notification",
	15: "notibox",
	16: "agent_perm",
	17: "group_member",
	18: "group",
	30: "integration",
	19: "limit",
	20: "user_attribute",
	22: "alias",
	23: "note",
	24: "ticket",
}

var Object_value = map[string]int32{
	"none":           0,
	"account":        1,
	"agent":          2,
	"message":        3,
	"conversation":   4,
	"postback":       5,
	"content":        6,
	"topic":          7,
	"presence":       8,
	"user":           10,
	"unread_topic":   11,
	"my_user":        12,
	"notification":   14,
	"notibox":        15,
	"agent_perm":     16,
	"group_member":   17,
	"group":          18,
	"integration":    30,
	"limit":          19,
	"user_attribute": 20,
	"alias":          22,
	"note":           23,
	"ticket":         24,
}

func (x Object) String() string {
	return proto.EnumName(Object_name, int32(x))
}

func (Object) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{8}
}

type RawEventCreatedPayload struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Subs                 []string        `protobuf:"bytes,3,rep,name=subs,proto3" json:"subs,omitempty"`
	TargetTopic          string          `protobuf:"bytes,4,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	Payload              string          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	TargetKey            string          `protobuf:"bytes,6,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Payloads             []string        `protobuf:"bytes,7,rep,name=payloads,proto3" json:"payloads,omitempty"`
	Topic                string          `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	RouterTopic          string          `protobuf:"bytes,10,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	Sub                  string          `protobuf:"bytes,11,opt,name=sub,proto3" json:"sub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RawEventCreatedPayload) Reset()         { *m = RawEventCreatedPayload{} }
func (m *RawEventCreatedPayload) String() string { return proto.CompactTextString(m) }
func (*RawEventCreatedPayload) ProtoMessage()    {}
func (*RawEventCreatedPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{0}
}

func (m *RawEventCreatedPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawEventCreatedPayload.Unmarshal(m, b)
}
func (m *RawEventCreatedPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawEventCreatedPayload.Marshal(b, m, deterministic)
}
func (m *RawEventCreatedPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawEventCreatedPayload.Merge(m, src)
}
func (m *RawEventCreatedPayload) XXX_Size() int {
	return xxx_messageInfo_RawEventCreatedPayload.Size(m)
}
func (m *RawEventCreatedPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RawEventCreatedPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RawEventCreatedPayload proto.InternalMessageInfo

func (m *RawEventCreatedPayload) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEventCreatedPayload) GetSubs() []string {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *RawEventCreatedPayload) GetTargetTopic() string {
	if m != nil {
		return m.TargetTopic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *RawEventCreatedPayload) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

func (m *RawEventCreatedPayload) GetPayloads() []string {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *RawEventCreatedPayload) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

type PubSubMessage struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Sub                  *Subscription   `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Payload              []byte          `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PubSubMessage) Reset()         { *m = PubSubMessage{} }
func (m *PubSubMessage) String() string { return proto.CompactTextString(m) }
func (*PubSubMessage) ProtoMessage()    {}
func (*PubSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{1}
}

func (m *PubSubMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubSubMessage.Unmarshal(m, b)
}
func (m *PubSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubSubMessage.Marshal(b, m, deterministic)
}
func (m *PubSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubMessage.Merge(m, src)
}
func (m *PubSubMessage) XXX_Size() int {
	return xxx_messageInfo_PubSubMessage.Size(m)
}
func (m *PubSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubMessage proto.InternalMessageInfo

func (m *PubSubMessage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PubSubMessage) GetSub() *Subscription {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *PubSubMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UnsubscribeMessage struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic                string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SubId                string          `protobuf:"bytes,4,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UnsubscribeMessage) Reset()         { *m = UnsubscribeMessage{} }
func (m *UnsubscribeMessage) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeMessage) ProtoMessage()    {}
func (*UnsubscribeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{2}
}

func (m *UnsubscribeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubscribeMessage.Unmarshal(m, b)
}
func (m *UnsubscribeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubscribeMessage.Marshal(b, m, deterministic)
}
func (m *UnsubscribeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeMessage.Merge(m, src)
}
func (m *UnsubscribeMessage) XXX_Size() int {
	return xxx_messageInfo_UnsubscribeMessage.Size(m)
}
func (m *UnsubscribeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeMessage proto.InternalMessageInfo

func (m *UnsubscribeMessage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnsubscribeMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *UnsubscribeMessage) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

type RawEvents struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Events               []*RawEvent     `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	Total                int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor               string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RawEvents) Reset()         { *m = RawEvents{} }
func (m *RawEvents) String() string { return proto.CompactTextString(m) }
func (*RawEvents) ProtoMessage()    {}
func (*RawEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{3}
}

func (m *RawEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawEvents.Unmarshal(m, b)
}
func (m *RawEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawEvents.Marshal(b, m, deterministic)
}
func (m *RawEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawEvents.Merge(m, src)
}
func (m *RawEvents) XXX_Size() int {
	return xxx_messageInfo_RawEvents.Size(m)
}
func (m *RawEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_RawEvents.DiscardUnknown(m)
}

var xxx_messageInfo_RawEvents proto.InternalMessageInfo

func (m *RawEvents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEvents) GetEvents() []*RawEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RawEvents) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RawEvents) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

type By struct {
	Device               *common.Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Id                   string         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ClientId             string         `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *By) Reset()         { *m = By{} }
func (m *By) String() string { return proto.CompactTextString(m) }
func (*By) ProtoMessage()    {}
func (*By) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{4}
}

func (m *By) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_By.Unmarshal(m, b)
}
func (m *By) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_By.Marshal(b, m, deterministic)
}
func (m *By) XXX_Merge(src proto.Message) {
	xxx_messageInfo_By.Merge(m, src)
}
func (m *By) XXX_Size() int {
	return xxx_messageInfo_By.Size(m)
}
func (m *By) XXX_DiscardUnknown() {
	xxx_messageInfo_By.DiscardUnknown(m)
}

var xxx_messageInfo_By proto.InternalMessageInfo

func (m *By) GetDevice() *common.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *By) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *By) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type RawEvent struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id                   string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId            string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Created              int64           `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Type                 string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Topics               []string        `protobuf:"bytes,11,rep,name=topics,proto3" json:"topics,omitempty"`
	By                   *By             `protobuf:"bytes,50,opt,name=by,proto3" json:"by,omitempty"`
	Object               string          `protobuf:"bytes,13,opt,name=object,proto3" json:"object,omitempty"`
	ConversationId       string          `protobuf:"bytes,15,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Data                 *RawEvent_Data  `protobuf:"bytes,20,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RawEvent) Reset()         { *m = RawEvent{} }
func (m *RawEvent) String() string { return proto.CompactTextString(m) }
func (*RawEvent) ProtoMessage()    {}
func (*RawEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{5}
}

func (m *RawEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawEvent.Unmarshal(m, b)
}
func (m *RawEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawEvent.Marshal(b, m, deterministic)
}
func (m *RawEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawEvent.Merge(m, src)
}
func (m *RawEvent) XXX_Size() int {
	return xxx_messageInfo_RawEvent.Size(m)
}
func (m *RawEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RawEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RawEvent proto.InternalMessageInfo

func (m *RawEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RawEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RawEvent) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RawEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RawEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *RawEvent) GetBy() *By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *RawEvent) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *RawEvent) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *RawEvent) GetData() *RawEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RawEvent_Data struct {
	Account              *account.Account           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent                *account.Agent             `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message              *conversation.Message      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation         *conversation.Conversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Postback             *conversation.Postback     `protobuf:"bytes,5,opt,name=postback,proto3" json:"postback,omitempty"`
	Content              *content.Content           `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Topic                *user.Topic                `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Presence             *user.Presence             `protobuf:"bytes,8,opt,name=presence,proto3" json:"presence,omitempty"`
	User                 *user.User                 `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	UnreadTopic          *user.UnreadTopic          `protobuf:"bytes,11,opt,name=unread_topic,json=unreadTopic,proto3" json:"unread_topic,omitempty"`
	MyUser               *user.MyUser               `protobuf:"bytes,12,opt,name=my_user,json=myUser,proto3" json:"my_user,omitempty"`
	Notification         *notibox.Notification      `protobuf:"bytes,14,opt,name=notification,proto3" json:"notification,omitempty"`
	Notibox              *notibox.Box               `protobuf:"bytes,15,opt,name=notibox,proto3" json:"notibox,omitempty"`
	AgentPerm            *account.AgentPerm         `protobuf:"bytes,16,opt,name=agent_perm,json=agentPerm,proto3" json:"agent_perm,omitempty"`
	GroupMember          *account.GroupMember       `protobuf:"bytes,17,opt,name=group_member,json=groupMember,proto3" json:"group_member,omitempty"`
	Group                *account.AgentGroup        `protobuf:"bytes,18,opt,name=group,proto3" json:"group,omitempty"`
	Limit                *payment.Limit             `protobuf:"bytes,19,opt,name=limit,proto3" json:"limit,omitempty"`
	UserAttribute        *user.AttributeData        `protobuf:"bytes,20,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Alias                *user.Alias                `protobuf:"bytes,22,opt,name=alias,proto3" json:"alias,omitempty"`
	Note                 *user.Note                 `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
	Ticket               *conversation.Ticket       `protobuf:"bytes,24,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RawEvent_Data) Reset()         { *m = RawEvent_Data{} }
func (m *RawEvent_Data) String() string { return proto.CompactTextString(m) }
func (*RawEvent_Data) ProtoMessage()    {}
func (*RawEvent_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{5, 0}
}

func (m *RawEvent_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawEvent_Data.Unmarshal(m, b)
}
func (m *RawEvent_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawEvent_Data.Marshal(b, m, deterministic)
}
func (m *RawEvent_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawEvent_Data.Merge(m, src)
}
func (m *RawEvent_Data) XXX_Size() int {
	return xxx_messageInfo_RawEvent_Data.Size(m)
}
func (m *RawEvent_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RawEvent_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RawEvent_Data proto.InternalMessageInfo

func (m *RawEvent_Data) GetAccount() *account.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *RawEvent_Data) GetAgent() *account.Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *RawEvent_Data) GetMessage() *conversation.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RawEvent_Data) GetConversation() *conversation.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *RawEvent_Data) GetPostback() *conversation.Postback {
	if m != nil {
		return m.Postback
	}
	return nil
}

func (m *RawEvent_Data) GetContent() *content.Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RawEvent_Data) GetTopic() *user.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *RawEvent_Data) GetPresence() *user.Presence {
	if m != nil {
		return m.Presence
	}
	return nil
}

func (m *RawEvent_Data) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RawEvent_Data) GetUnreadTopic() *user.UnreadTopic {
	if m != nil {
		return m.UnreadTopic
	}
	return nil
}

func (m *RawEvent_Data) GetMyUser() *user.MyUser {
	if m != nil {
		return m.MyUser
	}
	return nil
}

func (m *RawEvent_Data) GetNotification() *notibox.Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *RawEvent_Data) GetNotibox() *notibox.Box {
	if m != nil {
		return m.Notibox
	}
	return nil
}

func (m *RawEvent_Data) GetAgentPerm() *account.AgentPerm {
	if m != nil {
		return m.AgentPerm
	}
	return nil
}

func (m *RawEvent_Data) GetGroupMember() *account.GroupMember {
	if m != nil {
		return m.GroupMember
	}
	return nil
}

func (m *RawEvent_Data) GetGroup() *account.AgentGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RawEvent_Data) GetLimit() *payment.Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *RawEvent_Data) GetUserAttribute() *user.AttributeData {
	if m != nil {
		return m.UserAttribute
	}
	return nil
}

func (m *RawEvent_Data) GetAlias() *user.Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *RawEvent_Data) GetNote() *user.Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *RawEvent_Data) GetTicket() *conversation.Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type Subscription struct {
	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// optional SubscribeScope scope = 5;
	// optional string account_id = 6;
	SubId string `protobuf:"bytes,7,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// optional SubscriberType subscriber_type = 8;
	// optional string subscriber_id = 9;
	TargetTopic          string   `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	TargetKey            string   `protobuf:"bytes,11,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	Ttls                 int64    `protobuf:"varint,12,opt,name=ttls,proto3" json:"ttls,omitempty"`
	RouterTopic          string   `protobuf:"bytes,13,opt,name=router_topic,json=routerTopic,proto3" json:"router_topic,omitempty"`
	TargetPartition      int32    `protobuf:"varint,14,opt,name=target_partition,json=targetPartition,proto3" json:"target_partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{6}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *Subscription) GetTargetTopic() string {
	if m != nil {
		return m.TargetTopic
	}
	return ""
}

func (m *Subscription) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

func (m *Subscription) GetTtls() int64 {
	if m != nil {
		return m.Ttls
	}
	return 0
}

func (m *Subscription) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *Subscription) GetTargetPartition() int32 {
	if m != nil {
		return m.TargetPartition
	}
	return 0
}

type ListEventsRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId               string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Query                string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Anchor               string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit                int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Category             string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListEventsRequest) Reset()         { *m = ListEventsRequest{} }
func (m *ListEventsRequest) String() string { return proto.CompactTextString(m) }
func (*ListEventsRequest) ProtoMessage()    {}
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{7}
}

func (m *ListEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEventsRequest.Unmarshal(m, b)
}
func (m *ListEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEventsRequest.Marshal(b, m, deterministic)
}
func (m *ListEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEventsRequest.Merge(m, src)
}
func (m *ListEventsRequest) XXX_Size() int {
	return xxx_messageInfo_ListEventsRequest.Size(m)
}
func (m *ListEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEventsRequest proto.InternalMessageInfo

func (m *ListEventsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListEventsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListEventsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEventsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ListEventsRequest) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *ListEventsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEventsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type UserEvent struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId               string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event                *RawEvent       `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	User                 *user.User      `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserEvent) Reset()         { *m = UserEvent{} }
func (m *UserEvent) String() string { return proto.CompactTextString(m) }
func (*UserEvent) ProtoMessage()    {}
func (*UserEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{8}
}

func (m *UserEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent.Unmarshal(m, b)
}
func (m *UserEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent.Marshal(b, m, deterministic)
}
func (m *UserEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent.Merge(m, src)
}
func (m *UserEvent) XXX_Size() int {
	return xxx_messageInfo_UserEvent.Size(m)
}
func (m *UserEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent proto.InternalMessageInfo

func (m *UserEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UserEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserEvent) GetEvent() *RawEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *UserEvent) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

type SubscriptionResponse struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Status               bool            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscriptionResponse) Reset()         { *m = SubscriptionResponse{} }
func (m *SubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*SubscriptionResponse) ProtoMessage()    {}
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{9}
}

func (m *SubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionResponse.Unmarshal(m, b)
}
func (m *SubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionResponse.Marshal(b, m, deterministic)
}
func (m *SubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionResponse.Merge(m, src)
}
func (m *SubscriptionResponse) XXX_Size() int {
	return xxx_messageInfo_SubscriptionResponse.Size(m)
}
func (m *SubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionResponse proto.InternalMessageInfo

func (m *SubscriptionResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscriptionResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type AutomationEvent struct {
	Ctx        *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string           `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId     string           `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Automation *user.Automation `protobuf:"bytes,5,opt,name=automation,proto3" json:"automation,omitempty"`
	// user.Session session = 6;
	User                 *user.User `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Event                *RawEvent  `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AutomationEvent) Reset()         { *m = AutomationEvent{} }
func (m *AutomationEvent) String() string { return proto.CompactTextString(m) }
func (*AutomationEvent) ProtoMessage()    {}
func (*AutomationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{10}
}

func (m *AutomationEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutomationEvent.Unmarshal(m, b)
}
func (m *AutomationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutomationEvent.Marshal(b, m, deterministic)
}
func (m *AutomationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutomationEvent.Merge(m, src)
}
func (m *AutomationEvent) XXX_Size() int {
	return xxx_messageInfo_AutomationEvent.Size(m)
}
func (m *AutomationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AutomationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AutomationEvent proto.InternalMessageInfo

func (m *AutomationEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AutomationEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AutomationEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AutomationEvent) GetAutomation() *user.Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AutomationEvent) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AutomationEvent) GetEvent() *RawEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterEnum("event.Event", Event_name, Event_value)
	proto.RegisterEnum("event.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("event.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("event.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("event.ConvoType", ConvoType_name, ConvoType_value)
	proto.RegisterEnum("event.NotiboxType", NotiboxType_name, NotiboxType_value)
	proto.RegisterEnum("event.SubscriberType", SubscriberType_name, SubscriberType_value)
	proto.RegisterEnum("event.SubPrefix", SubPrefix_name, SubPrefix_value)
	proto.RegisterEnum("event.Object", Object_name, Object_value)
	proto.RegisterType((*RawEventCreatedPayload)(nil), "event.RawEventCreatedPayload")
	proto.RegisterType((*PubSubMessage)(nil), "event.PubSubMessage")
	proto.RegisterType((*UnsubscribeMessage)(nil), "event.UnsubscribeMessage")
	proto.RegisterType((*RawEvents)(nil), "event.RawEvents")
	proto.RegisterType((*By)(nil), "event.By")
	proto.RegisterType((*RawEvent)(nil), "event.RawEvent")
	proto.RegisterType((*RawEvent_Data)(nil), "event.RawEvent.Data")
	proto.RegisterType((*Subscription)(nil), "event.Subscription")
	proto.RegisterType((*ListEventsRequest)(nil), "event.ListEventsRequest")
	proto.RegisterType((*UserEvent)(nil), "event.UserEvent")
	proto.RegisterType((*SubscriptionResponse)(nil), "event.SubscriptionResponse")
	proto.RegisterType((*AutomationEvent)(nil), "event.AutomationEvent")
}

func init() { proto.RegisterFile("event/event.proto", fileDescriptor_510ac585eaa75cc0) }

var fileDescriptor_510ac585eaa75cc0 = []byte{
	// 2531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x37, 0x49, 0x90, 0x04, 0x1f, 0x28, 0x69, 0xb5, 0x92, 0x29, 0x98, 0x8e, 0x6d, 0x99, 0xb1,
	0x2d, 0x99, 0x49, 0xe4, 0x84, 0x71, 0x26, 0xd3, 0x4c, 0x13, 0xd7, 0x5f, 0x4d, 0x8d, 0xc6, 0xa9,
	0x02, 0x39, 0x93, 0xe9, 0x89, 0x83, 0x8f, 0x15, 0x85, 0x98, 0x04, 0x18, 0x60, 0xa1, 0x98, 0x3d,
	0x66, 0xa6, 0x33, 0x3d, 0x76, 0x7a, 0xea, 0xbd, 0xe7, 0x5e, 0xfb, 0x07, 0xb4, 0xf7, 0x5e, 0xfa,
	0x37, 0xf4, 0x9f, 0xe8, 0xf4, 0xd0, 0x79, 0xfb, 0x01, 0x02, 0xa2, 0x95, 0x28, 0x9d, 0xf6, 0x42,
	0x62, 0xdf, 0x7b, 0xfb, 0xf6, 0x7d, 0xed, 0x7b, 0x3f, 0x00, 0x36, 0xd9, 0x29, 0x8b, 0xf9, 0x3d,
	0xf1, 0x7b, 0x30, 0x4f, 0x13, 0x9e, 0xd0, 0xa6, 0x58, 0xf4, 0xdf, 0x9a, 0x44, 0xfc, 0x24, 0xf7,
	0x0f, 0x82, 0x64, 0x76, 0x2f, 0xcb, 0xfd, 0xe8, 0x37, 0xf7, 0x4e, 0x98, 0x17, 0xb2, 0xf4, 0x5e,
	0x90, 0xcc, 0x66, 0x49, 0xac, 0xfe, 0xe4, 0x9e, 0xfe, 0x3b, 0xe7, 0x09, 0x7b, 0x41, 0x90, 0xe4,
	0x31, 0xd7, 0xff, 0x4a, 0xfc, 0xc3, 0xf3, 0x75, 0xc7, 0xa7, 0x2c, 0xcd, 0x3c, 0x1e, 0x89, 0x13,
	0x96, 0x8b, 0x1f, 0x3a, 0x27, 0x48, 0x62, 0x8e, 0x8e, 0xa8, 0x7f, 0x25, 0xbe, 0x77, 0x9e, 0x78,
	0x9e, 0xa9, 0x9f, 0x1f, 0xd2, 0x1b, 0x27, 0x3c, 0xf2, 0x93, 0x57, 0xfa, 0xff, 0x87, 0xc4, 0xe7,
	0xde, 0x62, 0x86, 0x66, 0xa8, 0x7f, 0x29, 0x3e, 0xf8, 0x43, 0x1d, 0x7a, 0xae, 0xf7, 0xed, 0x53,
	0x8c, 0xeb, 0xe3, 0x94, 0x79, 0x9c, 0x85, 0x87, 0xde, 0x62, 0x9a, 0x78, 0x21, 0xbd, 0x09, 0x8d,
	0x80, 0xbf, 0xb2, 0x6b, 0xbb, 0xb5, 0x7d, 0x6b, 0xb4, 0x71, 0xa0, 0x82, 0xfa, 0x18, 0xbd, 0x78,
	0xc5, 0x5d, 0xe4, 0x51, 0x0a, 0x46, 0x96, 0xfb, 0x99, 0xdd, 0xd8, 0x6d, 0xec, 0x77, 0x5c, 0xf1,
	0x4c, 0x6f, 0x42, 0x97, 0x7b, 0xe9, 0x84, 0xf1, 0x31, 0x4f, 0xe6, 0x51, 0x60, 0x1b, 0xbb, 0xb5,
	0xfd, 0x8e, 0x6b, 0x49, 0xda, 0x0b, 0x24, 0x51, 0x1b, 0xda, 0x73, 0x79, 0x88, 0xdd, 0x14, 0x5c,
	0xbd, 0xa4, 0xd7, 0x00, 0xd4, 0xe6, 0x97, 0x6c, 0x61, 0xb7, 0x04, 0xb3, 0x23, 0x29, 0xbf, 0x64,
	0x0b, 0xda, 0x07, 0x53, 0x49, 0x66, 0x76, 0x5b, 0x9c, 0x59, 0xac, 0xe9, 0x36, 0x34, 0xe5, 0x81,
	0x1d, 0xb1, 0x4b, 0x2e, 0xd0, 0x9a, 0x34, 0xc9, 0x39, 0x4b, 0x95, 0x35, 0x20, 0xad, 0x91, 0x34,
	0x69, 0x0d, 0x81, 0x46, 0x96, 0xfb, 0xb6, 0x25, 0x38, 0xf8, 0x38, 0xc8, 0x60, 0xed, 0x30, 0xf7,
	0x8f, 0x72, 0xff, 0x39, 0xcb, 0x32, 0x6f, 0xc2, 0x2e, 0x12, 0x8a, 0xdb, 0x52, 0x4b, 0x5d, 0x88,
	0x6c, 0x1d, 0xc8, 0xaa, 0x3d, 0xca, 0xfd, 0x2c, 0x48, 0xa3, 0x39, 0x96, 0x89, 0x50, 0x5d, 0x76,
	0xbd, 0xb1, 0x5b, 0xdb, 0xef, 0x16, 0xae, 0x0f, 0x42, 0xa0, 0x5f, 0xc6, 0x99, 0xdc, 0xe0, 0xb3,
	0x1f, 0x71, 0x72, 0xe1, 0x78, 0xa3, 0xec, 0xf8, 0x65, 0x68, 0x65, 0xb9, 0x3f, 0x8e, 0x42, 0x95,
	0x80, 0x66, 0x96, 0xfb, 0xcf, 0xc2, 0xc1, 0x6f, 0x6b, 0xd0, 0xd1, 0xf9, 0xce, 0x2e, 0xa2, 0x7d,
	0x0f, 0x5a, 0xc2, 0x97, 0xcc, 0x36, 0x76, 0x1b, 0x42, 0x4a, 0xba, 0xa6, 0x95, 0xb8, 0x8a, 0x2d,
	0xcd, 0xe0, 0xde, 0x54, 0x84, 0xa0, 0xe1, 0xca, 0x05, 0xed, 0x41, 0xcb, 0x8b, 0x83, 0x93, 0x24,
	0x55, 0xd6, 0xa9, 0xd5, 0xe0, 0xd7, 0x50, 0x7f, 0xb4, 0xa0, 0x77, 0xa0, 0x15, 0xb2, 0xd3, 0x28,
	0x60, 0x2a, 0x6e, 0xeb, 0xda, 0x84, 0x27, 0x82, 0xea, 0x2a, 0x2e, 0x5d, 0x87, 0x7a, 0x14, 0x2a,
	0x0d, 0xf5, 0x28, 0xa4, 0x57, 0xa1, 0x13, 0x4c, 0x23, 0x16, 0xf3, 0xa5, 0x7f, 0xa6, 0x24, 0x3c,
	0x0b, 0x07, 0xbf, 0x5b, 0x03, 0x53, 0x5b, 0x77, 0x11, 0x0f, 0xcf, 0x2a, 0xbf, 0x06, 0xa0, 0x5a,
	0xc2, 0x52, 0x7b, 0x47, 0x51, 0x9e, 0x85, 0x98, 0xc1, 0x40, 0x5e, 0x14, 0xdb, 0x14, 0x9e, 0xea,
	0x25, 0xde, 0x06, 0xbe, 0x98, 0x33, 0x55, 0x80, 0xe2, 0x19, 0xfd, 0x17, 0xf9, 0xc8, 0x6c, 0x4b,
	0xd4, 0xab, 0x5a, 0xd1, 0x2b, 0x50, 0xf7, 0x17, 0xf6, 0x48, 0x98, 0xd5, 0x51, 0x21, 0x7d, 0xb4,
	0x70, 0xeb, 0xfe, 0x02, 0xb7, 0x24, 0xfe, 0xd7, 0x2c, 0xe0, 0xf6, 0x9a, 0x0c, 0x99, 0x5c, 0xd1,
	0x3d, 0xd8, 0x28, 0xb7, 0x1d, 0x34, 0x6e, 0x43, 0x08, 0xac, 0x97, 0xc9, 0xcf, 0x42, 0xba, 0x0f,
	0x46, 0xe8, 0x71, 0xcf, 0xde, 0x16, 0xda, 0xb7, 0xcf, 0x24, 0xec, 0xe0, 0x89, 0xc7, 0x3d, 0x57,
	0x48, 0xf4, 0xff, 0xda, 0x06, 0x03, 0x97, 0x74, 0x08, 0x6d, 0xe5, 0xa1, 0x0a, 0x15, 0x39, 0xd0,
	0x6d, 0xf1, 0xa1, 0xfc, 0x77, 0xb5, 0x00, 0xbd, 0x05, 0x4d, 0x6f, 0xc2, 0x62, 0x5e, 0xe4, 0xac,
	0x90, 0x44, 0xaa, 0x2b, 0x99, 0xf4, 0x1e, 0xb4, 0x67, 0xb2, 0x86, 0x45, 0x68, 0xad, 0xd1, 0xe5,
	0x83, 0x4a, 0xd3, 0x54, 0x05, 0xee, 0x6a, 0x29, 0xfa, 0x09, 0x74, 0xcb, 0x02, 0x22, 0xf0, 0xd6,
	0xa8, 0x5f, 0xdd, 0xf5, 0xb8, 0xb4, 0x70, 0x2b, 0xf2, 0x74, 0x04, 0xe6, 0x3c, 0xc9, 0xb8, 0xef,
	0x05, 0x2f, 0x45, 0x57, 0xb1, 0x46, 0xbd, 0xea, 0xde, 0x43, 0xc5, 0x75, 0x0b, 0x39, 0x74, 0x5b,
	0x75, 0x65, 0xd1, 0x6b, 0xd0, 0x6d, 0xdd, 0xa5, 0x1f, 0xcb, 0x7f, 0x57, 0x0b, 0xd0, 0x9b, 0xfa,
	0x9a, 0xb5, 0x85, 0xa4, 0x75, 0x20, 0x7a, 0xb4, 0x68, 0x21, 0xfa, 0xce, 0x0d, 0xc1, 0x9c, 0xa7,
	0x2c, 0x63, 0x71, 0xc0, 0x44, 0x6d, 0x60, 0x70, 0x84, 0xd4, 0xa1, 0xa2, 0xba, 0x05, 0x9f, 0x5e,
	0x07, 0x03, 0x59, 0xa2, 0x21, 0x59, 0x23, 0x90, 0x72, 0x5f, 0x66, 0x2c, 0x75, 0x05, 0x9d, 0xde,
	0x87, 0x6e, 0x1e, 0xa7, 0xcc, 0x0b, 0x55, 0xe3, 0xb2, 0x84, 0xdc, 0xa6, 0x92, 0x13, 0x1c, 0x79,
	0xb6, 0x95, 0x2f, 0x17, 0xf4, 0x36, 0xb4, 0x67, 0x8b, 0xb1, 0x50, 0xdc, 0x15, 0x1b, 0xba, 0x72,
	0xc3, 0xf3, 0x85, 0x50, 0xdd, 0x9a, 0x89, 0x7f, 0xfa, 0x13, 0xe8, 0xe2, 0xd4, 0x38, 0x8e, 0x02,
	0x19, 0xeb, 0x75, 0x95, 0x21, 0x3d, 0x4a, 0x3e, 0x2f, 0x31, 0xdd, 0x8a, 0x28, 0xbd, 0x03, 0x6d,
	0x25, 0x25, 0xaa, 0x0f, 0x4f, 0xd0, 0xbb, 0x1e, 0x25, 0xaf, 0x5c, 0xcd, 0xa4, 0xef, 0x01, 0x88,
	0x42, 0x18, 0xcf, 0x59, 0x3a, 0xb3, 0x89, 0x10, 0xa5, 0xd5, 0x52, 0x39, 0x64, 0xe9, 0xcc, 0xed,
	0x78, 0xfa, 0x91, 0x7e, 0x08, 0xdd, 0x49, 0x9a, 0xe4, 0xf3, 0xf1, 0x8c, 0xcd, 0x7c, 0x96, 0xda,
	0x9b, 0xaa, 0x7e, 0xf5, 0xa6, 0x4f, 0x91, 0xf9, 0x5c, 0xf0, 0x5c, 0x6b, 0xb2, 0x5c, 0xd0, 0xbb,
	0xd0, 0x14, 0x4b, 0x9b, 0xaa, 0xee, 0x5b, 0x39, 0x46, 0x6c, 0x73, 0xa5, 0x04, 0x16, 0xef, 0x34,
	0x9a, 0x45, 0xdc, 0xde, 0x52, 0xf9, 0xd1, 0xe3, 0xf0, 0x33, 0xa4, 0xba, 0x92, 0x49, 0x3f, 0x82,
	0x75, 0x0c, 0xdb, 0xd8, 0xe3, 0x3c, 0x8d, 0xfc, 0x9c, 0x33, 0x75, 0x97, 0xb6, 0x64, 0x34, 0x1f,
	0x6a, 0xb2, 0xb8, 0x4a, 0x6b, 0x48, 0x2b, 0x48, 0x58, 0x27, 0xde, 0x34, 0xf2, 0x32, 0xbb, 0x57,
	0xae, 0x93, 0x87, 0x48, 0x72, 0x25, 0x07, 0x73, 0x1f, 0x27, 0x9c, 0xd9, 0x3b, 0xe5, 0xdc, 0x7f,
	0x9e, 0x70, 0xe6, 0x0a, 0x3a, 0x7d, 0x1b, 0x5a, 0x3c, 0x0a, 0x5e, 0x32, 0x6e, 0xdb, 0x2a, 0x04,
	0x95, 0x42, 0x7e, 0x21, 0x78, 0xae, 0x92, 0x71, 0x0c, 0x13, 0x88, 0xe5, 0x18, 0x66, 0x97, 0xac,
	0x39, 0x86, 0x49, 0xc8, 0xa6, 0x63, 0x98, 0x9b, 0x84, 0x3a, 0x86, 0x49, 0xc9, 0x96, 0x63, 0x98,
	0x5b, 0x64, 0xdb, 0x31, 0xcc, 0xcb, 0xa4, 0xe7, 0x18, 0x66, 0x8f, 0xec, 0x38, 0x86, 0xb9, 0x43,
	0x6c, 0xc7, 0x30, 0x6d, 0x72, 0xc5, 0x31, 0xcc, 0x2b, 0xa4, 0xef, 0x18, 0x66, 0x9f, 0x5c, 0x75,
	0x0c, 0xf3, 0x2a, 0x79, 0xc3, 0x31, 0xcc, 0x37, 0xc8, 0x35, 0xc7, 0x30, 0xaf, 0x91, 0xeb, 0x8e,
	0x61, 0x5e, 0x27, 0x37, 0x1c, 0xc3, 0xbc, 0x41, 0x76, 0x1d, 0xc3, 0xdc, 0x25, 0x37, 0x1d, 0xc3,
	0xbc, 0x49, 0x06, 0x8e, 0x61, 0xbe, 0x49, 0x6e, 0x39, 0x86, 0x79, 0x8b, 0xdc, 0x76, 0x0c, 0xf3,
	0x36, 0xb9, 0xe3, 0x18, 0xe6, 0x1d, 0xb2, 0xe7, 0x18, 0xe6, 0x1e, 0xd9, 0x77, 0x0c, 0x73, 0x9f,
	0xdc, 0x75, 0x0c, 0xf3, 0x2e, 0x19, 0x3a, 0x86, 0x39, 0x24, 0x6f, 0xb9, 0x10, 0x9c, 0x78, 0x71,
	0xcc, 0xa6, 0xe3, 0x28, 0x74, 0xc1, 0x97, 0xf5, 0x89, 0xcf, 0xcd, 0x8c, 0x7b, 0x9c, 0xb9, 0xa0,
	0x5a, 0xc0, 0x98, 0x27, 0x38, 0xcf, 0x27, 0x6c, 0x9c, 0xa7, 0x53, 0x17, 0xc4, 0x13, 0x8f, 0xf8,
	0x94, 0xb9, 0xc4, 0x4f, 0x93, 0x6f, 0x71, 0xd3, 0xd4, 0x8b, 0x27, 0x39, 0xb6, 0x0d, 0x4b, 0x4e,
	0x86, 0x31, 0x36, 0x59, 0xb7, 0xad, 0x15, 0x76, 0xbe, 0x4e, 0xa2, 0x58, 0x3e, 0x5a, 0xea, 0x51,
	0x08, 0x74, 0xa6, 0xcc, 0x3b, 0x55, 0x74, 0x8f, 0x73, 0x2f, 0x38, 0xc1, 0x9c, 0x67, 0xae, 0x21,
	0xa6, 0x40, 0xeb, 0x38, 0x49, 0x67, 0x1e, 0x47, 0x9d, 0xd3, 0xe8, 0x94, 0xa5, 0x11, 0x0b, 0x33,
	0xb7, 0x75, 0x1c, 0xb1, 0x69, 0x98, 0xb9, 0x66, 0x90, 0xcc, 0xe6, 0x39, 0x67, 0x61, 0xd1, 0x00,
	0x55, 0x87, 0x2b, 0x3a, 0xd7, 0xb2, 0x9f, 0x14, 0xcd, 0x42, 0x35, 0x84, 0xc1, 0x77, 0x75, 0xe8,
	0x96, 0x31, 0xc0, 0xff, 0x62, 0x9c, 0xb7, 0x4b, 0xe3, 0x7c, 0x05, 0x6c, 0xc1, 0x2a, 0xd8, 0xaa,
	0x42, 0x2a, 0xeb, 0x2c, 0xa4, 0xc2, 0xa1, 0xc5, 0xa7, 0x99, 0x68, 0x17, 0x0d, 0x57, 0x3c, 0xaf,
	0x80, 0xa6, 0xb5, 0x55, 0xd0, 0x74, 0x17, 0x88, 0xd2, 0x3a, 0xf7, 0x52, 0x1e, 0x15, 0x5d, 0xa4,
	0xe9, 0x6e, 0x48, 0xfa, 0xa1, 0x26, 0x0f, 0xfe, 0x5e, 0x83, 0xcd, 0xcf, 0xa2, 0x8c, 0x4b, 0xcc,
	0xe1, 0xb2, 0x6f, 0x72, 0x96, 0x5d, 0x68, 0x30, 0x57, 0x07, 0x71, 0xfd, 0xec, 0x20, 0xde, 0x01,
	0x9d, 0x77, 0x8d, 0x2d, 0x70, 0xf9, 0x2c, 0xc4, 0x08, 0x7e, 0x93, 0xb3, 0x74, 0xa1, 0x91, 0x8f,
	0x58, 0x94, 0x90, 0x48, 0xb3, 0x8c, 0x44, 0x50, 0x5a, 0x76, 0x84, 0x96, 0x30, 0x5f, 0x75, 0x80,
	0x3e, 0x98, 0x81, 0xc7, 0xd9, 0x24, 0x49, 0x17, 0x6a, 0x9e, 0x17, 0xeb, 0xc1, 0x9f, 0x6b, 0xd0,
	0xc1, 0x36, 0x7a, 0x61, 0x84, 0x51, 0x75, 0xa4, 0xf1, 0x3d, 0x8e, 0x18, 0x15, 0x47, 0x6e, 0x83,
	0x7c, 0xe1, 0x51, 0xf3, 0x6c, 0x05, 0x7a, 0x49, 0x6e, 0x31, 0x4a, 0x5a, 0xaf, 0x1f, 0x25, 0x83,
	0x2f, 0x60, 0xbb, 0x02, 0x44, 0x59, 0x36, 0x4f, 0xe2, 0xec, 0x42, 0xd8, 0xb2, 0x07, 0x2d, 0xbc,
	0xa3, 0x79, 0x26, 0xc2, 0x6f, 0xba, 0x6a, 0x35, 0xf8, 0x67, 0x0d, 0x36, 0x1e, 0xe6, 0x3c, 0x99,
	0x89, 0x8e, 0xf4, 0x7f, 0x0f, 0xc4, 0xbb, 0x00, 0x5e, 0x71, 0x9a, 0x8a, 0x06, 0x51, 0x8d, 0xb5,
	0xa0, 0xbb, 0x25, 0x99, 0x22, 0x26, 0xed, 0x73, 0xc6, 0x6b, 0x11, 0xda, 0xce, 0xf7, 0x85, 0x76,
	0xf8, 0xfb, 0x1a, 0x34, 0xa5, 0x77, 0x6d, 0x68, 0x1c, 0xe5, 0x3e, 0xb9, 0x44, 0xb7, 0x60, 0xe3,
	0xcc, 0x0b, 0x13, 0x69, 0xd0, 0x35, 0xe8, 0x1c, 0x69, 0xe8, 0x4e, 0x0c, 0x4a, 0x61, 0xbd, 0x58,
	0xba, 0x6c, 0x3e, 0x5d, 0x90, 0x16, 0xdd, 0x00, 0xab, 0x84, 0xef, 0x49, 0x93, 0x6e, 0x03, 0x29,
	0x11, 0xa4, 0x58, 0x1b, 0x35, 0x09, 0xdd, 0x47, 0x8b, 0x38, 0x20, 0x26, 0x25, 0xd0, 0xad, 0x1c,
	0xd5, 0x19, 0xfe, 0xb1, 0x0e, 0x96, 0xc2, 0x64, 0x2f, 0x10, 0x61, 0x36, 0xa1, 0xe6, 0x49, 0xb3,
	0x74, 0x68, 0x43, 0x36, 0x65, 0x28, 0xfb, 0x53, 0x6a, 0xc3, 0x76, 0x11, 0xef, 0xf8, 0x38, 0x19,
	0xe7, 0xf3, 0x50, 0x68, 0xf9, 0x98, 0x6e, 0xc2, 0x9a, 0x9c, 0xb5, 0x0a, 0xbc, 0x92, 0x4f, 0x96,
	0x24, 0xbd, 0xff, 0x01, 0xed, 0x01, 0x95, 0xa4, 0xca, 0xee, 0x9f, 0xa1, 0x55, 0x92, 0x2e, 0x9a,
	0x6c, 0x48, 0x1e, 0xd2, 0x75, 0x00, 0x49, 0x99, 0xb2, 0x63, 0x4e, 0x1e, 0xd1, 0x1d, 0xd8, 0x8a,
	0xe2, 0xd3, 0x88, 0x4b, 0xa8, 0xea, 0x05, 0x01, 0x9b, 0xe3, 0xd6, 0x27, 0x78, 0x8a, 0xc4, 0x05,
	0xfa, 0x94, 0xa7, 0x78, 0x8a, 0x24, 0x55, 0x4e, 0xf9, 0x39, 0x7d, 0x03, 0xec, 0x25, 0x84, 0x88,
	0xb2, 0x0c, 0x35, 0x69, 0xee, 0xa7, 0xa8, 0x48, 0x5c, 0xd5, 0x82, 0xf4, 0x8b, 0xe1, 0x9f, 0x6a,
	0x60, 0x62, 0x8e, 0x75, 0x5c, 0x72, 0x72, 0x09, 0xa3, 0xac, 0x10, 0xd1, 0x38, 0x9f, 0x67, 0x2c,
	0x45, 0xc9, 0x03, 0x7a, 0x19, 0x36, 0x65, 0xa5, 0x95, 0x4f, 0x7c, 0x57, 0x18, 0x87, 0x13, 0xba,
	0x88, 0xca, 0x7b, 0x4b, 0x92, 0xb6, 0x77, 0x44, 0xaf, 0xc0, 0x65, 0x89, 0x0e, 0xc2, 0x90, 0x21,
	0x3c, 0x1b, 0xcf, 0x16, 0xe3, 0x69, 0x94, 0x71, 0xf2, 0x3e, 0x06, 0x46, 0xb0, 0xf4, 0xfe, 0xfb,
	0x48, 0xc1, 0x99, 0x5e, 0x50, 0x3e, 0x18, 0xfe, 0xa3, 0xae, 0x52, 0xac, 0xcd, 0x64, 0xd2, 0x4c,
	0x0d, 0x0d, 0x0b, 0x7b, 0xee, 0x60, 0x1d, 0xa9, 0x89, 0x32, 0x3e, 0x8d, 0xd8, 0xb7, 0x2c, 0x24,
	0x7b, 0x28, 0xa9, 0x69, 0x19, 0xf3, 0xd2, 0xe0, 0x84, 0x85, 0x64, 0x1f, 0xe3, 0xad, 0xa9, 0xc2,
	0x2c, 0x9e, 0x04, 0x5e, 0xca, 0xc9, 0x5d, 0x0c, 0xae, 0x66, 0x04, 0x27, 0x2c, 0x78, 0xc9, 0xc2,
	0x24, 0xe7, 0x64, 0x88, 0x11, 0xd0, 0xf4, 0x79, 0x9e, 0x06, 0x27, 0x5e, 0xc6, 0x42, 0xf2, 0x16,
	0xe6, 0x51, 0xf4, 0xfc, 0x31, 0x62, 0x4a, 0xf2, 0x36, 0xe6, 0xa0, 0x28, 0x51, 0x05, 0x45, 0x0b,
	0xfb, 0xde, 0x41, 0xe5, 0xc2, 0xdd, 0x2a, 0x7d, 0x44, 0xfb, 0xd0, 0xab, 0xe2, 0xa7, 0xc2, 0xfd,
	0xf7, 0x5f, 0xc3, 0xd3, 0xfb, 0xee, 0xbf, 0x86, 0xa7, 0xa3, 0xfe, 0x21, 0xbd, 0x06, 0x57, 0x96,
	0xf7, 0x1b, 0xf5, 0x85, 0x11, 0x1f, 0x8b, 0x0a, 0xc0, 0x62, 0x19, 0xfe, 0xab, 0x01, 0x1d, 0x7c,
	0x3b, 0x48, 0x74, 0x54, 0x03, 0x72, 0x09, 0xeb, 0xbf, 0xf2, 0xca, 0xa4, 0x4f, 0xea, 0x60, 0x5a,
	0x34, 0xea, 0xc8, 0x58, 0xcc, 0x09, 0xd0, 0xeb, 0xd0, 0xaf, 0xc8, 0x0a, 0x6c, 0x52, 0xec, 0xb0,
	0x54, 0x84, 0x97, 0x7c, 0x55, 0xfa, 0x75, 0x15, 0xc9, 0x25, 0x43, 0xdc, 0x00, 0x63, 0x45, 0x9e,
	0x7b, 0x93, 0x09, 0x0b, 0x49, 0x0b, 0xcb, 0xa7, 0x6a, 0x54, 0xac, 0x58, 0x6d, 0x61, 0xaf, 0x82,
	0x4a, 0x21, 0x8b, 0x62, 0xce, 0x26, 0xa9, 0x38, 0x7d, 0x5b, 0xa4, 0x51, 0x83, 0xa8, 0x25, 0xfd,
	0x72, 0xd5, 0x0f, 0x16, 0x93, 0xeb, 0x58, 0xb0, 0x9a, 0xe2, 0x61, 0xba, 0xc9, 0x0d, 0x71, 0x07,
	0x14, 0x29, 0x65, 0x01, 0x8b, 0x4e, 0x59, 0x48, 0x76, 0x57, 0x1c, 0x96, 0xa8, 0x1b, 0x01, 0x53,
	0x14, 0x4f, 0xc8, 0x4d, 0x7a, 0x15, 0x76, 0x2a, 0x7c, 0x8d, 0x72, 0x58, 0x48, 0x06, 0x2b, 0xcc,
	0x3c, 0xf6, 0xb2, 0x2c, 0x9a, 0x60, 0x44, 0xde, 0x5c, 0xf1, 0xb0, 0x60, 0xdd, 0x5a, 0xc9, 0xc8,
	0x9c, 0xc5, 0x21, 0x1e, 0xf7, 0x05, 0xd6, 0xba, 0x04, 0xb4, 0x45, 0xad, 0xb8, 0x25, 0x9a, 0xce,
	0xc3, 0x51, 0x89, 0xa6, 0x6b, 0xe3, 0xc5, 0xf0, 0x29, 0x58, 0x9f, 0xcb, 0xf7, 0x0e, 0x9d, 0xfd,
	0x98, 0x5c, 0x42, 0x33, 0xca, 0xaf, 0x2e, 0xcb, 0xfb, 0x7f, 0x1f, 0x23, 0xa2, 0x5e, 0x54, 0x96,
	0xd4, 0x0f, 0x86, 0xef, 0x94, 0xda, 0xb6, 0x6c, 0x22, 0x16, 0xb4, 0x33, 0x2e, 0xba, 0x07, 0xb9,
	0x84, 0x77, 0x23, 0xc3, 0x5b, 0x24, 0xd2, 0x40, 0x6a, 0xc3, 0x3d, 0xd1, 0xf4, 0x0f, 0x53, 0x76,
	0x1c, 0xbd, 0x42, 0xc9, 0xaf, 0x98, 0x7f, 0x92, 0x24, 0x2f, 0xc9, 0x25, 0x6c, 0xe2, 0x5f, 0x31,
	0x3f, 0x4b, 0xd0, 0x4c, 0x52, 0x1b, 0xfe, 0xad, 0x0e, 0xad, 0x5f, 0xc9, 0x97, 0x78, 0x13, 0xa1,
	0x7f, 0x8c, 0x37, 0xde, 0x2a, 0x5e, 0xb9, 0x49, 0x8d, 0x76, 0xd4, 0x3b, 0x35, 0xa9, 0x23, 0x5d,
	0x25, 0x8b, 0x34, 0x30, 0xbd, 0xe5, 0x70, 0x11, 0x83, 0x76, 0x97, 0xaf, 0xb9, 0xa4, 0x89, 0xc2,
	0xea, 0x16, 0x93, 0x16, 0x2a, 0x11, 0x17, 0x91, 0xb4, 0x85, 0x94, 0x6a, 0x27, 0xc4, 0xc4, 0x43,
	0x85, 0x0b, 0x20, 0xfa, 0x53, 0xe9, 0xad, 0x92, 0x58, 0xe2, 0x38, 0xd9, 0x1f, 0x49, 0x57, 0x35,
	0xab, 0x22, 0x62, 0x64, 0x1d, 0xd9, 0x2a, 0x50, 0x64, 0x03, 0x03, 0xb0, 0x6c, 0xc8, 0x84, 0x2c,
	0xc7, 0x80, 0x2c, 0x1d, 0xb2, 0x89, 0x26, 0x08, 0x0a, 0xa1, 0x38, 0xef, 0x74, 0xa5, 0xa2, 0xaa,
	0xeb, 0xc8, 0x13, 0xd7, 0x95, 0x6c, 0x61, 0x0e, 0xab, 0xf7, 0x9c, 0x6c, 0x8b, 0x10, 0x60, 0xa3,
	0x25, 0x3d, 0x19, 0x24, 0xce, 0xc8, 0x0e, 0x05, 0xfd, 0x26, 0x44, 0xec, 0xd1, 0x5f, 0x6a, 0xd0,
	0x39, 0xcc, 0xfd, 0x69, 0x94, 0x9d, 0xb0, 0x94, 0x7e, 0x5c, 0x9a, 0xb8, 0xf4, 0x75, 0xdf, 0xdb,
	0xfa, 0x57, 0x5f, 0xf7, 0x11, 0x4e, 0x63, 0x9f, 0x07, 0x95, 0x69, 0xfc, 0x5f, 0x28, 0xb8, 0x0b,
	0xc6, 0x61, 0x14, 0x4f, 0xe8, 0x96, 0x06, 0x3a, 0xb8, 0x52, 0xe0, 0xb6, 0xdf, 0x2d, 0x88, 0x49,
	0x3c, 0x19, 0x7d, 0xd7, 0x00, 0x53, 0x34, 0xfc, 0xe7, 0x93, 0x94, 0x7e, 0x04, 0xdd, 0x23, 0xd1,
	0xb6, 0xd5, 0x27, 0x38, 0x5b, 0x1d, 0xb2, 0x82, 0x90, 0xfb, 0xe4, 0x0c, 0x26, 0xc9, 0xe8, 0xbb,
	0x60, 0x49, 0x1c, 0x20, 0x21, 0x89, 0x16, 0x28, 0xb0, 0x68, 0xff, 0x2c, 0x8c, 0xa1, 0xa3, 0x72,
	0x94, 0x7a, 0x12, 0x05, 0x95, 0x90, 0x89, 0x3c, 0x68, 0x4d, 0x5b, 0xfb, 0x74, 0x36, 0xe7, 0x0b,
	0x7a, 0xbf, 0x1a, 0x9a, 0x0b, 0xee, 0x1a, 0x41, 0xc7, 0x2d, 0x3e, 0x43, 0xa8, 0x3d, 0x05, 0xe1,
	0x9c, 0x3d, 0x0f, 0x74, 0x2c, 0x5e, 0xc8, 0x8f, 0x62, 0x3b, 0x72, 0x1b, 0x86, 0x42, 0x52, 0xf4,
	0xbe, 0xde, 0x2a, 0x23, 0xcb, 0xa7, 0xfc, 0xc7, 0x24, 0xe1, 0xdf, 0x35, 0xd8, 0x29, 0x7f, 0x3d,
	0x92, 0x30, 0x4f, 0x7c, 0x1a, 0xa7, 0xf7, 0xc0, 0x3a, 0x62, 0x71, 0xa8, 0xbf, 0xb9, 0x9e, 0x8d,
	0xe2, 0x6a, 0x58, 0x1f, 0x00, 0x2c, 0xf3, 0x45, 0x6f, 0x54, 0x5f, 0xcf, 0x2f, 0x92, 0xc9, 0x27,
	0x67, 0xaa, 0x60, 0x50, 0x55, 0x21, 0x79, 0xfa, 0x13, 0xd9, 0xb9, 0x5a, 0x2e, 0xee, 0xbe, 0xdf,
	0x12, 0x9f, 0xfb, 0xdf, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x25, 0xb8, 0xe2, 0x55,
	0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/event.Publisher/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/event.Publisher/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/event.Publisher/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
type PublisherServer interface {
	Subscribe(context.Context, *Subscription) (*SubscriptionResponse, error)
	Unsubscribe(context.Context, *Subscription) (*SubscriptionResponse, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Publisher/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Publisher/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Publisher/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Publisher_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Publisher_Unsubscribe_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Publisher_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

// EventMgrClient is the client API for EventMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventMgrClient interface {
	SearchEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error)
	CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*RawEvent, error)
	Subscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Unsubscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ReadTopic(ctx context.Context, in *user.ReadTopicRequest, opts ...grpc.CallOption) (*common.Empty, error)
	SearchTopics(ctx context.Context, in *user.ListTopicsRequest, opts ...grpc.CallOption) (*user.ListTopicsResult, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type eventMgrClient struct {
	cc *grpc.ClientConn
}

func NewEventMgrClient(cc *grpc.ClientConn) EventMgrClient {
	return &eventMgrClient{cc}
}

func (c *eventMgrClient) SearchEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := c.cc.Invoke(ctx, "/event.EventMgr/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*RawEvent, error) {
	out := new(RawEvent)
	err := c.cc.Invoke(ctx, "/event.EventMgr/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) Subscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/event.EventMgr/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) Unsubscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/event.EventMgr/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) ReadTopic(ctx context.Context, in *user.ReadTopicRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/event.EventMgr/ReadTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) SearchTopics(ctx context.Context, in *user.ListTopicsRequest, opts ...grpc.CallOption) (*user.ListTopicsResult, error) {
	out := new(user.ListTopicsResult)
	err := c.cc.Invoke(ctx, "/event.EventMgr/SearchTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/event.EventMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventMgrServer is the server API for EventMgr service.
type EventMgrServer interface {
	SearchEvents(context.Context, *ListEventsRequest) (*RawEvents, error)
	CreateEvent(context.Context, *UserEvent) (*RawEvent, error)
	Subscribe(context.Context, *user.SubscribeRequest) (*common.Empty, error)
	Unsubscribe(context.Context, *user.SubscribeRequest) (*common.Empty, error)
	ReadTopic(context.Context, *user.ReadTopicRequest) (*common.Empty, error)
	SearchTopics(context.Context, *user.ListTopicsRequest) (*user.ListTopicsResult, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterEventMgrServer(s *grpc.Server, srv EventMgrServer) {
	s.RegisterService(&_EventMgr_serviceDesc, srv)
}

func _EventMgr_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).CreateEvent(ctx, req.(*UserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).Subscribe(ctx, req.(*user.SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).Unsubscribe(ctx, req.(*user.SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_ReadTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ReadTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).ReadTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/ReadTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).ReadTopic(ctx, req.(*user.ReadTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_SearchTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/SearchTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchTopics(ctx, req.(*user.ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventMgr",
	HandlerType: (*EventMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvents",
			Handler:    _EventMgr_SearchEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventMgr_CreateEvent_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _EventMgr_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EventMgr_Unsubscribe_Handler,
		},
		{
			MethodName: "ReadTopic",
			Handler:    _EventMgr_ReadTopic_Handler,
		},
		{
			MethodName: "SearchTopics",
			Handler:    _EventMgr_SearchTopics_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _EventMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

// ConversationEventReaderClient is the client API for ConversationEventReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationEventReaderClient interface {
	SendMessage(ctx context.Context, in *RawEvent, opts ...grpc.CallOption) (*RawEvent, error)
	ListEvents(ctx context.Context, in *conversation.ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error)
	SearchEvents(ctx context.Context, in *conversation.SearchMessageRequest, opts ...grpc.CallOption) (*RawEvents, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type conversationEventReaderClient struct {
	cc *grpc.ClientConn
}

func NewConversationEventReaderClient(cc *grpc.ClientConn) ConversationEventReaderClient {
	return &conversationEventReaderClient{cc}
}

func (c *conversationEventReaderClient) SendMessage(ctx context.Context, in *RawEvent, opts ...grpc.CallOption) (*RawEvent, error) {
	out := new(RawEvent)
	err := c.cc.Invoke(ctx, "/event.ConversationEventReader/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) ListEvents(ctx context.Context, in *conversation.ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := c.cc.Invoke(ctx, "/event.ConversationEventReader/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) SearchEvents(ctx context.Context, in *conversation.SearchMessageRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := c.cc.Invoke(ctx, "/event.ConversationEventReader/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/event.ConversationEventReader/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationEventReaderServer is the server API for ConversationEventReader service.
type ConversationEventReaderServer interface {
	SendMessage(context.Context, *RawEvent) (*RawEvent, error)
	ListEvents(context.Context, *conversation.ListEventsRequest) (*RawEvents, error)
	SearchEvents(context.Context, *conversation.SearchMessageRequest) (*RawEvents, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterConversationEventReaderServer(s *grpc.Server, srv ConversationEventReaderServer) {
	s.RegisterService(&_ConversationEventReader_serviceDesc, srv)
}

func _ConversationEventReader_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, req.(*RawEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, req.(*conversation.ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.SearchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, req.(*conversation.SearchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationEventReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.ConversationEventReader",
	HandlerType: (*ConversationEventReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ConversationEventReader_SendMessage_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ConversationEventReader_ListEvents_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _ConversationEventReader_SearchEvents_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ConversationEventReader_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}
