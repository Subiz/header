// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event/event.proto

It has these top-level messages:
	RawEventCreatedPayload
	UnsubscribeMessage
	RawEvents
	By
	RawEvent
	Reply
	Error
	Subscription
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"
import lang "bitbucket.org/subiz/header/lang"
import account "bitbucket.org/subiz/header/account"
import conversation "bitbucket.org/subiz/header/conversation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	// Out_EventCreated = 0;
	Event_Send_            Event = 1
	Event_ApiReply         Event = 2
	Event_RawEventCreated  Event = 3
	Event_Subscribe        Event = 4
	Event_SubscribeReply   Event = 6
	Event_Unsubscribe      Event = 5
	Event_UnsubscribeReply Event = 7
)

var Event_name = map[int32]string{
	1: "Send_",
	2: "ApiReply",
	3: "RawEventCreated",
	4: "Subscribe",
	6: "SubscribeReply",
	5: "Unsubscribe",
	7: "UnsubscribeReply",
}
var Event_value = map[string]int32{
	"Send_":            1,
	"ApiReply":         2,
	"RawEventCreated":  3,
	"Subscribe":        4,
	"SubscribeReply":   6,
	"Unsubscribe":      5,
	"UnsubscribeReply": 7,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Type int32

const (
	Type_conversation_updated Type = 9
	Type_message_sent         Type = 10
	// conversation_started = 1;
	Type_conversation_joined Type = 2
	// conversation_message = 3;
	Type_conversation_left Type = 4
	// conversation_closed = 5;
	Type_conversation_tagged   Type = 6
	Type_conversation_untagged Type = 7
	// conversation_waiting = 8;
	Type_channel_deintegrated       Type = 20
	Type_channel_integrated         Type = 21
	Type_message_seen               Type = 30
	Type_message_acked              Type = 31
	Type_message_received           Type = 32
	Type_conversation_member_typing Type = 33
	Type_conversation_postbacked    Type = 34
)

var Type_name = map[int32]string{
	9:  "conversation_updated",
	10: "message_sent",
	2:  "conversation_joined",
	4:  "conversation_left",
	6:  "conversation_tagged",
	7:  "conversation_untagged",
	20: "channel_deintegrated",
	21: "channel_integrated",
	30: "message_seen",
	31: "message_acked",
	32: "message_received",
	33: "conversation_member_typing",
	34: "conversation_postbacked",
}
var Type_value = map[string]int32{
	"conversation_updated":       9,
	"message_sent":               10,
	"conversation_joined":        2,
	"conversation_left":          4,
	"conversation_tagged":        6,
	"conversation_untagged":      7,
	"channel_deintegrated":       20,
	"channel_integrated":         21,
	"message_seen":               30,
	"message_acked":              31,
	"message_received":           32,
	"conversation_member_typing": 33,
	"conversation_postbacked":    34,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubscriberType int32

const (
	SubscriberType_user    SubscriberType = 0
	SubscriberType_channel SubscriberType = 1
)

var SubscriberType_name = map[int32]string{
	0: "user",
	1: "channel",
}
var SubscriberType_value = map[string]int32{
	"user":    0,
	"channel": 1,
}

func (x SubscriberType) Enum() *SubscriberType {
	p := new(SubscriberType)
	*p = x
	return p
}
func (x SubscriberType) String() string {
	return proto.EnumName(SubscriberType_name, int32(x))
}
func (x *SubscriberType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubscriberType_value, data, "SubscriberType")
	if err != nil {
		return err
	}
	*x = SubscriberType(value)
	return nil
}
func (SubscriberType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SubPrefix int32

const (
	SubPrefix_Webhook   SubPrefix = 0
	SubPrefix_Websocket SubPrefix = 1
)

var SubPrefix_name = map[int32]string{
	0: "Webhook",
	1: "Websocket",
}
var SubPrefix_value = map[string]int32{
	"Webhook":   0,
	"Websocket": 1,
}

func (x SubPrefix) Enum() *SubPrefix {
	p := new(SubPrefix)
	*p = x
	return p
}
func (x SubPrefix) String() string {
	return proto.EnumName(SubPrefix_name, int32(x))
}
func (x *SubPrefix) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubPrefix_value, data, "SubPrefix")
	if err != nil {
		return err
	}
	*x = SubPrefix(value)
	return nil
}
func (SubPrefix) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Object int32

const (
	Object_account      Object = 0
	Object_conversation Object = 1
	Object_message      Object = 2
	Object_integration  Object = 3
	Object_agent        Object = 4
	Object_postback     Object = 5
)

var Object_name = map[int32]string{
	0: "account",
	1: "conversation",
	2: "message",
	3: "integration",
	4: "agent",
	5: "postback",
}
var Object_value = map[string]int32{
	"account":      0,
	"conversation": 1,
	"message":      2,
	"integration":  3,
	"agent":        4,
	"postback":     5,
}

func (x Object) Enum() *Object {
	p := new(Object)
	*p = x
	return p
}
func (x Object) String() string {
	return proto.EnumName(Object_name, int32(x))
}
func (x *Object) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Object_value, data, "Object")
	if err != nil {
		return err
	}
	*x = Object(value)
	return nil
}
func (Object) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RawEventCreatedPayload struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	SubId            *string         `protobuf:"bytes,3,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	Topic            *string         `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Payload          *string         `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RawEventCreatedPayload) Reset()                    { *m = RawEventCreatedPayload{} }
func (m *RawEventCreatedPayload) String() string            { return proto.CompactTextString(m) }
func (*RawEventCreatedPayload) ProtoMessage()               {}
func (*RawEventCreatedPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RawEventCreatedPayload) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEventCreatedPayload) GetSubId() string {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return ""
}

func (m *RawEventCreatedPayload) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetPayload() string {
	if m != nil && m.Payload != nil {
		return *m.Payload
	}
	return ""
}

type UnsubscribeMessage struct {
	Topic            *string `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	SubId            *string `protobuf:"bytes,4,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UnsubscribeMessage) Reset()                    { *m = UnsubscribeMessage{} }
func (m *UnsubscribeMessage) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeMessage) ProtoMessage()               {}
func (*UnsubscribeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnsubscribeMessage) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *UnsubscribeMessage) GetSubId() string {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return ""
}

type RawEvents struct {
	Events           []*RawEvent `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RawEvents) Reset()                    { *m = RawEvents{} }
func (m *RawEvents) String() string            { return proto.CompactTextString(m) }
func (*RawEvents) ProtoMessage()               {}
func (*RawEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RawEvents) GetEvents() []*RawEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type By struct {
	Device           *common.Device `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	Id               *string        `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ClientId         *string        `protobuf:"bytes,4,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *By) Reset()                    { *m = By{} }
func (m *By) String() string            { return proto.CompactTextString(m) }
func (*By) ProtoMessage()               {}
func (*By) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *By) GetDevice() *common.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *By) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *By) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

type RawEvent struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created   *int64          `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Type      *string         `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	// optional string channel_id = 10;
	Topics []string `protobuf:"bytes,11,rep,name=topics" json:"topics,omitempty"`
	By     *By      `protobuf:"bytes,50,opt,name=by" json:"by,omitempty"`
	Object *string  `protobuf:"bytes,13,opt,name=object" json:"object,omitempty"`
	// optional string conversation_id = 15;
	ConversationId *string `protobuf:"bytes,20,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*RawEvent_Account
	//	*RawEvent_Agent
	//	*RawEvent_Message
	//	*RawEvent_Conversation
	//	*RawEvent_Postback
	Data             isRawEvent_Data `protobuf_oneof:"data"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RawEvent) Reset()                    { *m = RawEvent{} }
func (m *RawEvent) String() string            { return proto.CompactTextString(m) }
func (*RawEvent) ProtoMessage()               {}
func (*RawEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isRawEvent_Data interface {
	isRawEvent_Data()
}

type RawEvent_Account struct {
	Account *account.Account `protobuf:"bytes,38,opt,name=account,oneof"`
}
type RawEvent_Agent struct {
	Agent *account.Agent `protobuf:"bytes,36,opt,name=agent,oneof"`
}
type RawEvent_Message struct {
	Message *conversation.Message `protobuf:"bytes,37,opt,name=message,oneof"`
}
type RawEvent_Conversation struct {
	Conversation *conversation.Conversation `protobuf:"bytes,39,opt,name=conversation,oneof"`
}
type RawEvent_Postback struct {
	Postback *conversation.Postback `protobuf:"bytes,40,opt,name=postback,oneof"`
}

func (*RawEvent_Account) isRawEvent_Data()      {}
func (*RawEvent_Agent) isRawEvent_Data()        {}
func (*RawEvent_Message) isRawEvent_Data()      {}
func (*RawEvent_Conversation) isRawEvent_Data() {}
func (*RawEvent_Postback) isRawEvent_Data()     {}

func (m *RawEvent) GetData() isRawEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RawEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *RawEvent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *RawEvent) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *RawEvent) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *RawEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *RawEvent) GetBy() *By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *RawEvent) GetObject() string {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return ""
}

func (m *RawEvent) GetConversationId() string {
	if m != nil && m.ConversationId != nil {
		return *m.ConversationId
	}
	return ""
}

func (m *RawEvent) GetAccount() *account.Account {
	if x, ok := m.GetData().(*RawEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (m *RawEvent) GetAgent() *account.Agent {
	if x, ok := m.GetData().(*RawEvent_Agent); ok {
		return x.Agent
	}
	return nil
}

func (m *RawEvent) GetMessage() *conversation.Message {
	if x, ok := m.GetData().(*RawEvent_Message); ok {
		return x.Message
	}
	return nil
}

func (m *RawEvent) GetConversation() *conversation.Conversation {
	if x, ok := m.GetData().(*RawEvent_Conversation); ok {
		return x.Conversation
	}
	return nil
}

func (m *RawEvent) GetPostback() *conversation.Postback {
	if x, ok := m.GetData().(*RawEvent_Postback); ok {
		return x.Postback
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawEvent_OneofMarshaler, _RawEvent_OneofUnmarshaler, _RawEvent_OneofSizer, []interface{}{
		(*RawEvent_Account)(nil),
		(*RawEvent_Agent)(nil),
		(*RawEvent_Message)(nil),
		(*RawEvent_Conversation)(nil),
		(*RawEvent_Postback)(nil),
	}
}

func _RawEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawEvent)
	// data
	switch x := m.Data.(type) {
	case *RawEvent_Account:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Account); err != nil {
			return err
		}
	case *RawEvent_Agent:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Agent); err != nil {
			return err
		}
	case *RawEvent_Message:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *RawEvent_Conversation:
		b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conversation); err != nil {
			return err
		}
	case *RawEvent_Postback:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Postback); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RawEvent.Data has unexpected type %T", x)
	}
	return nil
}

func _RawEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawEvent)
	switch tag {
	case 38: // data.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(account.Account)
		err := b.DecodeMessage(msg)
		m.Data = &RawEvent_Account{msg}
		return true, err
	case 36: // data.agent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(account.Agent)
		err := b.DecodeMessage(msg)
		m.Data = &RawEvent_Agent{msg}
		return true, err
	case 37: // data.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(conversation.Message)
		err := b.DecodeMessage(msg)
		m.Data = &RawEvent_Message{msg}
		return true, err
	case 39: // data.conversation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(conversation.Conversation)
		err := b.DecodeMessage(msg)
		m.Data = &RawEvent_Conversation{msg}
		return true, err
	case 40: // data.postback
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(conversation.Postback)
		err := b.DecodeMessage(msg)
		m.Data = &RawEvent_Postback{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RawEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawEvent)
	// data
	switch x := m.Data.(type) {
	case *RawEvent_Account:
		s := proto.Size(x.Account)
		n += proto.SizeVarint(38<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RawEvent_Agent:
		s := proto.Size(x.Agent)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RawEvent_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RawEvent_Conversation:
		s := proto.Size(x.Conversation)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RawEvent_Postback:
		s := proto.Size(x.Postback)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Reply struct {
	Ctx              *common.Context `protobuf:"bytes,3,opt,name=ctx" json:"ctx,omitempty"`
	EventId          *string         `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	State            []byte          `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Err              *bool           `protobuf:"varint,10,opt,name=err" json:"err,omitempty"`
	ErrDescription   *string         `protobuf:"bytes,12,opt,name=err_description,json=errDescription" json:"err_description,omitempty"`
	ErrCode          *lang.T         `protobuf:"varint,13,opt,name=err_code,json=errCode,enum=lang.T" json:"err_code,omitempty"`
	ErrClass         *int32          `protobuf:"varint,15,opt,name=err_class,json=errClass" json:"err_class,omitempty"`
	Payload          []byte          `protobuf:"bytes,7,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Reply) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Reply) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *Reply) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Reply) GetErr() bool {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return false
}

func (m *Reply) GetErrDescription() string {
	if m != nil && m.ErrDescription != nil {
		return *m.ErrDescription
	}
	return ""
}

func (m *Reply) GetErrCode() lang.T {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return lang.T_undefined
}

func (m *Reply) GetErrClass() int32 {
	if m != nil && m.ErrClass != nil {
		return *m.ErrClass
	}
	return 0
}

func (m *Reply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Error struct {
	Error            *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	RequestId        *string `protobuf:"bytes,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Description      *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Error) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *Error) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *Error) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type Subscription struct {
	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	// optional SubscribeScope scope = 5;
	// optional string account_id = 6;
	SubId *string `protobuf:"bytes,7,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	// optional SubscriberType subscriber_type = 8;
	// optional string subscriber_id = 9;
	TargetTopic *string `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic" json:"target_topic,omitempty"`
	TargetKey   *string `protobuf:"bytes,11,opt,name=target_key,json=targetKey" json:"target_key,omitempty"`
	// optional string target_partition = 13;
	// time to life in seconds
	Ttls             *int64 `protobuf:"varint,12,opt,name=ttls" json:"ttls,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Subscription) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Subscription) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Subscription) GetSubId() string {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return ""
}

func (m *Subscription) GetTargetTopic() string {
	if m != nil && m.TargetTopic != nil {
		return *m.TargetTopic
	}
	return ""
}

func (m *Subscription) GetTargetKey() string {
	if m != nil && m.TargetKey != nil {
		return *m.TargetKey
	}
	return ""
}

func (m *Subscription) GetTtls() int64 {
	if m != nil && m.Ttls != nil {
		return *m.Ttls
	}
	return 0
}

func init() {
	proto.RegisterType((*RawEventCreatedPayload)(nil), "event.RawEventCreatedPayload")
	proto.RegisterType((*UnsubscribeMessage)(nil), "event.UnsubscribeMessage")
	proto.RegisterType((*RawEvents)(nil), "event.RawEvents")
	proto.RegisterType((*By)(nil), "event.By")
	proto.RegisterType((*RawEvent)(nil), "event.RawEvent")
	proto.RegisterType((*Reply)(nil), "event.Reply")
	proto.RegisterType((*Error)(nil), "event.Error")
	proto.RegisterType((*Subscription)(nil), "event.Subscription")
	proto.RegisterEnum("event.Event", Event_name, Event_value)
	proto.RegisterEnum("event.Type", Type_name, Type_value)
	proto.RegisterEnum("event.SubscriberType", SubscriberType_name, SubscriberType_value)
	proto.RegisterEnum("event.SubPrefix", SubPrefix_name, SubPrefix_value)
	proto.RegisterEnum("event.Object", Object_name, Object_value)
}

func init() { proto.RegisterFile("event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0x1b, 0xb7,
	0x12, 0xd6, 0x4a, 0x94, 0xc4, 0x1d, 0xc9, 0x36, 0x4d, 0xff, 0xad, 0xed, 0xd8, 0x91, 0x75, 0x72,
	0x62, 0xc1, 0x38, 0x90, 0xcf, 0x09, 0x72, 0x75, 0xae, 0x9a, 0x38, 0x01, 0xec, 0x2d, 0x8a, 0x06,
	0x4c, 0x8a, 0xa0, 0x37, 0x11, 0xf6, 0x67, 0x2c, 0x6f, 0x2c, 0xed, 0xaa, 0x5c, 0xca, 0x89, 0x7a,
	0x53, 0xa0, 0x6f, 0xd2, 0x37, 0xe9, 0x03, 0xf4, 0x65, 0xfa, 0x06, 0x05, 0xc9, 0x5d, 0x6b, 0x95,
	0x02, 0x6e, 0x6e, 0xb4, 0x9c, 0x99, 0x6f, 0xc8, 0x6f, 0xc8, 0xe1, 0x47, 0xc1, 0x26, 0xde, 0x61,
	0xaa, 0xce, 0xcd, 0xef, 0x70, 0x26, 0x33, 0x95, 0xf1, 0xa6, 0x31, 0x0e, 0x86, 0x61, 0xa2, 0xc2,
	0x79, 0x74, 0x8b, 0x6a, 0x98, 0xc9, 0xf1, 0x79, 0x3e, 0x0f, 0x93, 0x9f, 0xcf, 0x6f, 0x30, 0x88,
	0x51, 0x9e, 0x47, 0xd9, 0x74, 0x9a, 0xa5, 0xc5, 0xc7, 0xa6, 0x1d, 0x9c, 0x3d, 0x80, 0x9f, 0x04,
	0xe9, 0xd8, 0xfc, 0x14, 0xd8, 0xff, 0x3e, 0x80, 0x0d, 0xa2, 0x28, 0x9b, 0xa7, 0xaa, 0xfc, 0x16,
	0x19, 0xff, 0x7f, 0x90, 0x4d, 0x7a, 0x87, 0x32, 0x0f, 0x54, 0x62, 0x38, 0x2d, 0x0d, 0x9b, 0xdb,
	0xff, 0xd5, 0x81, 0x5d, 0x11, 0x7c, 0x7a, 0xad, 0xcb, 0xba, 0x90, 0x18, 0x28, 0x8c, 0xdf, 0x04,
	0x8b, 0x49, 0x16, 0xc4, 0xfc, 0x04, 0x1a, 0x91, 0xfa, 0xec, 0x39, 0x3d, 0x67, 0xd0, 0x79, 0xb6,
	0x31, 0x2c, 0x0a, 0xba, 0xc8, 0x52, 0x85, 0x9f, 0x95, 0xd0, 0x31, 0xbe, 0x03, 0xad, 0x7c, 0x1e,
	0x8e, 0x92, 0xd8, 0x6b, 0xf4, 0x9c, 0x81, 0x2b, 0x9a, 0xf9, 0x3c, 0xbc, 0x8a, 0xf9, 0x36, 0x34,
	0x55, 0x36, 0x4b, 0x22, 0x8f, 0x58, 0xaf, 0x31, 0xb8, 0x07, 0xed, 0x99, 0x9d, 0xda, 0x6b, 0x1a,
	0x7f, 0x69, 0xf6, 0x5f, 0x00, 0xff, 0x21, 0xcd, 0xe7, 0x61, 0x1e, 0xc9, 0x24, 0xc4, 0xef, 0x30,
	0xcf, 0x83, 0x31, 0x2e, 0x67, 0x69, 0x54, 0x67, 0x59, 0x2e, 0x49, 0x2a, 0x4b, 0xf6, 0x9f, 0x83,
	0x5b, 0x96, 0x91, 0xf3, 0x53, 0x68, 0x99, 0x73, 0xca, 0x3d, 0xd2, 0x6b, 0x18, 0xf2, 0xf6, 0x0c,
	0x4b, 0x84, 0x28, 0xc2, 0xfd, 0x1f, 0xa1, 0xfe, 0x72, 0xc1, 0x9f, 0x42, 0x2b, 0xc6, 0xbb, 0x24,
	0x42, 0xaf, 0x6e, 0x6a, 0x5d, 0x2f, 0x6b, 0x7d, 0x65, 0xbc, 0xa2, 0x88, 0xf2, 0x75, 0xa8, 0xdf,
	0x57, 0x5a, 0x4f, 0x62, 0x7e, 0x08, 0x6e, 0x34, 0x49, 0x30, 0x55, 0x4b, 0x36, 0xd4, 0x3a, 0xae,
	0xe2, 0xfe, 0x6f, 0x2d, 0xa0, 0xe5, 0x7a, 0x5f, 0xb3, 0x95, 0x5f, 0x4e, 0x7e, 0x04, 0x50, 0x9c,
	0xf2, 0x72, 0x76, 0xb7, 0xf0, 0x5c, 0xc5, 0x7a, 0x33, 0x23, 0x7b, 0x5c, 0x1e, 0xed, 0x39, 0x83,
	0x86, 0x28, 0x4d, 0xce, 0x81, 0xa8, 0xc5, 0x0c, 0x3d, 0xd7, 0xa4, 0x98, 0x31, 0xdf, 0x85, 0x96,
	0xd9, 0xbd, 0xdc, 0xeb, 0xf4, 0x1a, 0x03, 0x57, 0x14, 0x16, 0xdf, 0x87, 0x7a, 0xb8, 0xf0, 0x9e,
	0x19, 0x5a, 0x6e, 0xb1, 0x49, 0x2f, 0x17, 0xa2, 0x1e, 0x2e, 0x74, 0x4a, 0x16, 0x7e, 0xc4, 0x48,
	0x79, 0x6b, 0x66, 0xa2, 0xc2, 0xe2, 0xa7, 0xb0, 0x51, 0x6d, 0x23, 0x4d, 0x6e, 0xdb, 0x00, 0xd6,
	0xab, 0xee, 0xab, 0x98, 0xff, 0x07, 0xda, 0x05, 0x5d, 0xef, 0xa9, 0x59, 0x80, 0x0d, 0xcb, 0xb6,
	0x7d, 0x61, 0xbf, 0x97, 0x35, 0x51, 0x42, 0xf8, 0x53, 0x68, 0x06, 0x63, 0x4c, 0x95, 0xf7, 0xa4,
	0x38, 0x82, 0x7b, 0xac, 0xf6, 0x5e, 0xd6, 0x84, 0x0d, 0xf3, 0xff, 0x41, 0x7b, 0x6a, 0xfb, 0xc3,
	0xfb, 0xb7, 0x41, 0xee, 0x0c, 0x57, 0xba, 0xba, 0x68, 0x1e, 0x3d, 0x75, 0x81, 0xe3, 0xdf, 0x40,
	0xb7, 0x0a, 0xf1, 0x4e, 0x4d, 0xde, 0xc1, 0x6a, 0xde, 0x45, 0xc5, 0xb8, 0xac, 0x89, 0x95, 0x0c,
	0xfe, 0x1c, 0xe8, 0x2c, 0xcb, 0x55, 0x18, 0x44, 0xb7, 0xde, 0xc0, 0x64, 0xef, 0xae, 0x66, 0xbf,
	0x29, 0xa2, 0x97, 0x35, 0x71, 0x8f, 0x7c, 0xd9, 0x02, 0x12, 0x07, 0x2a, 0xf0, 0x09, 0x65, 0x6c,
	0xd3, 0x27, 0x74, 0x93, 0x71, 0x9f, 0x50, 0xce, 0xb6, 0x7c, 0x42, 0xb7, 0xd8, 0xb6, 0x4f, 0xe8,
	0x0e, 0xdb, 0xf5, 0x09, 0xdd, 0x65, 0x7b, 0x3e, 0xa1, 0x7b, 0xcc, 0xf3, 0x09, 0xf5, 0xd8, 0xbe,
	0x4f, 0xe8, 0x3e, 0x3b, 0xf0, 0x09, 0x3d, 0x60, 0x87, 0x3e, 0xa1, 0x87, 0xec, 0x91, 0x4f, 0xe8,
	0x23, 0x76, 0xe4, 0x13, 0x7a, 0xc4, 0x8e, 0x7d, 0x42, 0x8f, 0xd9, 0x63, 0x9f, 0xd0, 0xc7, 0xac,
	0xe7, 0x13, 0xda, 0x63, 0x27, 0x3e, 0xa1, 0x27, 0xac, 0xef, 0x13, 0xfa, 0x2f, 0xf6, 0x44, 0x34,
	0x73, 0x15, 0x28, 0x14, 0x50, 0xd4, 0x3e, 0x52, 0x99, 0xa0, 0x33, 0x3d, 0x98, 0xcb, 0x89, 0x00,
	0x33, 0x52, 0x89, 0x9a, 0xa0, 0x60, 0xa1, 0xcc, 0x3e, 0xe5, 0x28, 0x47, 0x5a, 0x79, 0xe6, 0xc1,
	0x18, 0x45, 0xc7, 0x76, 0xf9, 0x48, 0x37, 0x8c, 0x68, 0xcf, 0x75, 0x2c, 0x89, 0x85, 0xfb, 0x31,
	0x4b, 0x52, 0x3b, 0xec, 0x14, 0x43, 0x03, 0x70, 0x27, 0x18, 0xdc, 0x15, 0xfe, 0x40, 0xa9, 0x20,
	0xba, 0x99, 0xea, 0x1b, 0x25, 0x88, 0xe9, 0xe8, 0xd6, 0x75, 0x26, 0xa7, 0x81, 0xd2, 0x73, 0x4e,
	0x92, 0x3b, 0x94, 0x09, 0xc6, 0xb9, 0x68, 0x5d, 0x27, 0x38, 0x89, 0x73, 0x41, 0xa3, 0x6c, 0x3a,
	0x9b, 0x2b, 0x8c, 0xfb, 0x7f, 0x3a, 0xd0, 0x14, 0x38, 0x9b, 0x2c, 0xca, 0x0b, 0xd2, 0x78, 0xe0,
	0x82, 0xec, 0x03, 0x35, 0x0d, 0xaa, 0x3b, 0xce, 0xb1, 0xfa, 0x61, 0x6c, 0xab, 0x37, 0xa6, 0x6e,
	0x73, 0x7f, 0xbb, 0xc5, 0x26, 0x70, 0x06, 0x0d, 0x94, 0xd2, 0x83, 0x9e, 0x33, 0xa0, 0x42, 0x0f,
	0x75, 0xef, 0xa2, 0x94, 0xa3, 0x18, 0xb5, 0xd0, 0xcc, 0x4c, 0x33, 0x74, 0x6d, 0xef, 0xa2, 0x94,
	0xaf, 0x96, 0x5e, 0xde, 0x07, 0xaa, 0x81, 0x51, 0x16, 0xa3, 0x69, 0xff, 0xf5, 0x67, 0xed, 0xa1,
	0x91, 0xe8, 0x77, 0xa2, 0x8d, 0x52, 0x5e, 0x64, 0x31, 0xea, 0xdb, 0x6f, 0x30, 0x93, 0x20, 0xcf,
	0xbd, 0x8d, 0x9e, 0x33, 0x68, 0x0a, 0x9d, 0x74, 0xa1, 0xed, 0xaa, 0xd6, 0xb5, 0x0d, 0xa7, 0x7b,
	0xad, 0xfb, 0x00, 0xcd, 0xd7, 0x52, 0x66, 0x52, 0x93, 0x46, 0x3d, 0x30, 0xa4, 0x5d, 0x61, 0x0d,
	0x7d, 0xed, 0x25, 0xfe, 0x34, 0xc7, 0x5c, 0x2d, 0x55, 0xd5, 0x2d, 0x3c, 0x57, 0x31, 0xef, 0x41,
	0xa7, 0xca, 0xde, 0xca, 0x42, 0xd5, 0xd5, 0xff, 0xc3, 0x81, 0xee, 0x5b, 0x2b, 0xa5, 0xb6, 0x96,
	0xaf, 0xd0, 0x9e, 0x7f, 0x52, 0xda, 0x76, 0x55, 0xdc, 0x4f, 0xa0, 0xab, 0x02, 0x39, 0x46, 0x35,
	0xb2, 0x39, 0x60, 0x39, 0x58, 0xdf, 0x3b, 0x93, 0x79, 0x04, 0x50, 0x40, 0x6e, 0x71, 0xe1, 0x75,
	0x6c, 0x11, 0xd6, 0xf3, 0x2d, 0x2e, 0x8c, 0x42, 0xa9, 0x49, 0x6e, 0xf6, 0xbe, 0x21, 0xcc, 0xd8,
	0x27, 0x74, 0x8d, 0xad, 0x0b, 0x56, 0xa4, 0xcd, 0x02, 0xa9, 0x12, 0xcd, 0xfe, 0xec, 0x17, 0x68,
	0x5a, 0x09, 0x75, 0xa1, 0xf9, 0x16, 0xd3, 0x78, 0xc4, 0x1c, 0xde, 0x05, 0xfa, 0x62, 0x96, 0x98,
	0xc6, 0x61, 0x75, 0xbe, 0x05, 0x1b, 0x5f, 0x3c, 0x60, 0xac, 0xc1, 0xd7, 0xc0, 0x7d, 0x5b, 0xbe,
	0x27, 0x8c, 0x70, 0x0e, 0xeb, 0xf7, 0xa6, 0xcd, 0x6b, 0xf1, 0x0d, 0xe8, 0x54, 0x1e, 0x1d, 0xd6,
	0xe4, 0xdb, 0xc0, 0x2a, 0x0e, 0x0b, 0x6b, 0x9f, 0xfd, 0x5e, 0x07, 0xf2, 0x4e, 0x6b, 0xa8, 0x07,
	0xdb, 0x2b, 0xc2, 0x37, 0x9f, 0xc5, 0x66, 0x31, 0x97, 0x33, 0xe8, 0x96, 0xf7, 0x2d, 0xc7, 0x54,
	0x31, 0xe0, 0x7b, 0xb0, 0xb5, 0x82, 0x35, 0x37, 0x27, 0x66, 0x75, 0xbe, 0x03, 0x9b, 0x2b, 0x81,
	0x09, 0x5e, 0x2b, 0x46, 0xfe, 0x86, 0x57, 0xc1, 0x78, 0x8c, 0x31, 0x6b, 0xf1, 0x7d, 0xd8, 0x59,
	0x5d, 0x34, 0x2d, 0x42, 0x6d, 0xc3, 0xe7, 0x26, 0x48, 0x53, 0x9c, 0x8c, 0x62, 0x4c, 0x52, 0x85,
	0x63, 0x69, 0xf8, 0x6c, 0xf3, 0x5d, 0xe0, 0x65, 0xa4, 0xe2, 0xdf, 0x59, 0xe5, 0x89, 0x29, 0x3b,
	0xe6, 0x9b, 0xb0, 0x56, 0x7a, 0x82, 0xe8, 0x16, 0x63, 0xf6, 0x58, 0xef, 0x42, 0xe9, 0x92, 0x18,
	0x61, 0x72, 0x87, 0x31, 0xeb, 0xf1, 0x63, 0x38, 0x58, 0xe1, 0x31, 0xc5, 0x69, 0x68, 0xa5, 0x20,
	0x49, 0xc7, 0xec, 0x84, 0x1f, 0xc2, 0xde, 0x4a, 0xbc, 0x14, 0x41, 0x8c, 0x59, 0xff, 0xec, 0xb4,
	0xb2, 0xfb, 0xd2, 0xec, 0x25, 0x05, 0xa2, 0x05, 0x86, 0xd5, 0x78, 0x07, 0xda, 0x05, 0x57, 0xe6,
	0x9c, 0x9d, 0x9a, 0x53, 0x7b, 0x23, 0xf1, 0x3a, 0xf9, 0xac, 0x23, 0xef, 0x31, 0xbc, 0xc9, 0xb2,
	0x5b, 0x56, 0xd3, 0xe7, 0xf9, 0x1e, 0xc3, 0x3c, 0xd3, 0x7f, 0x72, 0x98, 0x73, 0xf6, 0x01, 0x5a,
	0xdf, 0xdb, 0xe7, 0xa8, 0x73, 0xff, 0xca, 0xb0, 0x9a, 0x2e, 0xb0, 0xca, 0x82, 0x39, 0x3a, 0x5c,
	0x54, 0xc3, 0xea, 0xfa, 0xc4, 0xcb, 0xfd, 0xd0, 0xd1, 0x86, 0xee, 0x29, 0xf3, 0xaa, 0x30, 0xa2,
	0x7b, 0xaa, 0xe4, 0xcc, 0x9a, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x99, 0xd4, 0xa1, 0xc0, 0xfa,
	0x09, 0x00, 0x00,
}
