// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event/event.proto

It has these top-level messages:
	RawEventCreatedPayload
	PubSubMessage
	UnsubscribeMessage
	RawEvents
	By
	RawEvent
	Subscription
	AllType
	ListEventsRequest
	UserEvent
	SubscriptionResponse
	AutomationEvent
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"
import account "bitbucket.org/subiz/header/account"
import conversation "bitbucket.org/subiz/header/conversation"
import content "bitbucket.org/subiz/header/content"
import user "bitbucket.org/subiz/header/user"
import notibox "bitbucket.org/subiz/header/notibox"
import payment "bitbucket.org/subiz/header/payment"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_Sub              Event = 0
	Event_RawEventCreated  Event = 3
	Event_Subscribe        Event = 4
	Event_SubscribeReply   Event = 6
	Event_Unsubscribe      Event = 5
	Event_UnsubscribeReply Event = 7
	Event_EventSync        Event = 8
	Event_EventCreated     Event = 9
)

var Event_name = map[int32]string{
	0: "Sub",
	3: "RawEventCreated",
	4: "Subscribe",
	6: "SubscribeReply",
	5: "Unsubscribe",
	7: "UnsubscribeReply",
	8: "EventSync",
	9: "EventCreated",
}
var Event_value = map[string]int32{
	"Sub":              0,
	"RawEventCreated":  3,
	"Subscribe":        4,
	"SubscribeReply":   6,
	"Unsubscribe":      5,
	"UnsubscribeReply": 7,
	"EventSync":        8,
	"EventCreated":     9,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AccountType int32

const (
	AccountType_a                        AccountType = 0
	AccountType_account_deleted          AccountType = 60
	AccountType_account_info_updated     AccountType = 61
	AccountType_group_created            AccountType = 62
	AccountType_group_deleted            AccountType = 63
	AccountType_group_info_updated       AccountType = 64
	AccountType_group_joined             AccountType = 65
	AccountType_group_left               AccountType = 66
	AccountType_invitation_accepted      AccountType = 68
	AccountType_agent_deleted            AccountType = 69
	AccountType_agent_info_updated       AccountType = 70
	AccountType_agent_permission_updated AccountType = 71
	AccountType_limit_updated            AccountType = 72
)

var AccountType_name = map[int32]string{
	0:  "a",
	60: "account_deleted",
	61: "account_info_updated",
	62: "group_created",
	63: "group_deleted",
	64: "group_info_updated",
	65: "group_joined",
	66: "group_left",
	68: "invitation_accepted",
	69: "agent_deleted",
	70: "agent_info_updated",
	71: "agent_permission_updated",
	72: "limit_updated",
}
var AccountType_value = map[string]int32{
	"a":                        0,
	"account_deleted":          60,
	"account_info_updated":     61,
	"group_created":            62,
	"group_deleted":            63,
	"group_info_updated":       64,
	"group_joined":             65,
	"group_left":               66,
	"invitation_accepted":      68,
	"agent_deleted":            69,
	"agent_info_updated":       70,
	"agent_permission_updated": 71,
	"limit_updated":            72,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserType int32

const (
	UserType_u                 UserType = 0
	UserType_my_user_upserted  UserType = 46
	UserType_user_info_updated UserType = 48
)

var UserType_name = map[int32]string{
	0:  "u",
	46: "my_user_upserted",
	48: "user_info_updated",
}
var UserType_value = map[string]int32{
	"u":                 0,
	"my_user_upserted":  46,
	"user_info_updated": 48,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}
func (UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EventType int32

const (
	EventType_e                        EventType = 0
	EventType_presence_updated         EventType = 38
	EventType_content_viewed           EventType = 39
	EventType_content_searched         EventType = 40
	EventType_content_addedtocart      EventType = 41
	EventType_content_checkedout       EventType = 42
	EventType_content_purchased        EventType = 43
	EventType_topic_read               EventType = 44
	EventType_subscribed_topic_updated EventType = 45
	EventType_user_topic_updated       EventType = 50
	EventType_user_attribute_created   EventType = 51
	EventType_user_attribute_updated   EventType = 52
	EventType_user_attribute_deleted   EventType = 55
)

var EventType_name = map[int32]string{
	0:  "e",
	38: "presence_updated",
	39: "content_viewed",
	40: "content_searched",
	41: "content_addedtocart",
	42: "content_checkedout",
	43: "content_purchased",
	44: "topic_read",
	45: "subscribed_topic_updated",
	50: "user_topic_updated",
	51: "user_attribute_created",
	52: "user_attribute_updated",
	55: "user_attribute_deleted",
}
var EventType_value = map[string]int32{
	"e":                        0,
	"presence_updated":         38,
	"content_viewed":           39,
	"content_searched":         40,
	"content_addedtocart":      41,
	"content_checkedout":       42,
	"content_purchased":        43,
	"topic_read":               44,
	"subscribed_topic_updated": 45,
	"user_topic_updated":       50,
	"user_attribute_created":   51,
	"user_attribute_updated":   52,
	"user_attribute_deleted":   55,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ConvoType int32

const (
	ConvoType_c                          ConvoType = 0
	ConvoType_conversation_updated       ConvoType = 9
	ConvoType_message_sent               ConvoType = 10
	ConvoType_conversation_state_updated ConvoType = 11
	// conversation_started = 1;
	ConvoType_conversation_joined ConvoType = 2
	// conversation_message = 3;
	ConvoType_conversation_left ConvoType = 4
	// conversation_closed = 5;
	ConvoType_conversation_tagged   ConvoType = 6
	ConvoType_conversation_untagged ConvoType = 7
	// conversation_waiting = 8;
	ConvoType_channel_deintegrated       ConvoType = 20
	ConvoType_channel_integrated         ConvoType = 21
	ConvoType_message_seen               ConvoType = 30
	ConvoType_message_acked              ConvoType = 31
	ConvoType_message_received           ConvoType = 32
	ConvoType_conversation_member_typing ConvoType = 33
	ConvoType_conversation_postbacked    ConvoType = 34
	ConvoType_conversation_unassigned    ConvoType = 35
	ConvoType_conversation_assigned      ConvoType = 36
	ConvoType_conversation_pending       ConvoType = 81
)

var ConvoType_name = map[int32]string{
	0:  "c",
	9:  "conversation_updated",
	10: "message_sent",
	11: "conversation_state_updated",
	2:  "conversation_joined",
	4:  "conversation_left",
	6:  "conversation_tagged",
	7:  "conversation_untagged",
	20: "channel_deintegrated",
	21: "channel_integrated",
	30: "message_seen",
	31: "message_acked",
	32: "message_received",
	33: "conversation_member_typing",
	34: "conversation_postbacked",
	35: "conversation_unassigned",
	36: "conversation_assigned",
	81: "conversation_pending",
}
var ConvoType_value = map[string]int32{
	"c": 0,
	"conversation_updated":       9,
	"message_sent":               10,
	"conversation_state_updated": 11,
	"conversation_joined":        2,
	"conversation_left":          4,
	"conversation_tagged":        6,
	"conversation_untagged":      7,
	"channel_deintegrated":       20,
	"channel_integrated":         21,
	"message_seen":               30,
	"message_acked":              31,
	"message_received":           32,
	"conversation_member_typing": 33,
	"conversation_postbacked":    34,
	"conversation_unassigned":    35,
	"conversation_assigned":      36,
	"conversation_pending":       81,
}

func (x ConvoType) String() string {
	return proto.EnumName(ConvoType_name, int32(x))
}
func (ConvoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type NotiboxType int32

const (
	NotiboxType_n                     NotiboxType = 0
	NotiboxType_notification_upserted NotiboxType = 52
	NotiboxType_notibox_upserted      NotiboxType = 53
)

var NotiboxType_name = map[int32]string{
	0:  "n",
	52: "notification_upserted",
	53: "notibox_upserted",
}
var NotiboxType_value = map[string]int32{
	"n": 0,
	"notification_upserted": 52,
	"notibox_upserted":      53,
}

func (x NotiboxType) String() string {
	return proto.EnumName(NotiboxType_name, int32(x))
}
func (NotiboxType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SubscriberType int32

const (
	SubscriberType_st_user    SubscriberType = 0
	SubscriberType_st_channel SubscriberType = 1
)

var SubscriberType_name = map[int32]string{
	0: "st_user",
	1: "st_channel",
}
var SubscriberType_value = map[string]int32{
	"st_user":    0,
	"st_channel": 1,
}

func (x SubscriberType) String() string {
	return proto.EnumName(SubscriberType_name, int32(x))
}
func (SubscriberType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SubPrefix int32

const (
	SubPrefix_Webhook   SubPrefix = 0
	SubPrefix_Websocket SubPrefix = 1
)

var SubPrefix_name = map[int32]string{
	0: "Webhook",
	1: "Websocket",
}
var SubPrefix_value = map[string]int32{
	"Webhook":   0,
	"Websocket": 1,
}

func (x SubPrefix) String() string {
	return proto.EnumName(SubPrefix_name, int32(x))
}
func (SubPrefix) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Object int32

const (
	Object_none         Object = 0
	Object_account      Object = 1
	Object_agent        Object = 2
	Object_message      Object = 3
	Object_conversation Object = 4
	Object_postback     Object = 5
	Object_content      Object = 6
	Object_topic        Object = 7
	Object_presence     Object = 8
	Object_user         Object = 10
	Object_unread_topic Object = 11
	Object_my_user      Object = 12
	Object_notification Object = 14
	Object_notibox      Object = 15
	Object_agent_perm   Object = 16
	Object_group_member Object = 17
	Object_group        Object = 18
	Object_integration  Object = 30
	Object_limit        Object = 19
)

var Object_name = map[int32]string{
	0:  "none",
	1:  "account",
	2:  "agent",
	3:  "message",
	4:  "conversation",
	5:  "postback",
	6:  "content",
	7:  "topic",
	8:  "presence",
	10: "user",
	11: "unread_topic",
	12: "my_user",
	14: "notification",
	15: "notibox",
	16: "agent_perm",
	17: "group_member",
	18: "group",
	30: "integration",
	19: "limit",
}
var Object_value = map[string]int32{
	"none":         0,
	"account":      1,
	"agent":        2,
	"message":      3,
	"conversation": 4,
	"postback":     5,
	"content":      6,
	"topic":        7,
	"presence":     8,
	"user":         10,
	"unread_topic": 11,
	"my_user":      12,
	"notification": 14,
	"notibox":      15,
	"agent_perm":   16,
	"group_member": 17,
	"group":        18,
	"integration":  30,
	"limit":        19,
}

func (x Object) String() string {
	return proto.EnumName(Object_name, int32(x))
}
func (Object) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RawEventCreatedPayload struct {
	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Subs        []string        `protobuf:"bytes,3,rep,name=subs" json:"subs,omitempty"`
	TargetTopic string          `protobuf:"bytes,4,opt,name=target_topic,json=targetTopic" json:"target_topic,omitempty"`
	Payload     string          `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	TargetKey   string          `protobuf:"bytes,6,opt,name=target_key,json=targetKey" json:"target_key,omitempty"`
	Payloads    []string        `protobuf:"bytes,7,rep,name=payloads" json:"payloads,omitempty"`
	Topic       string          `protobuf:"bytes,9,opt,name=topic" json:"topic,omitempty"`
	RouterTopic string          `protobuf:"bytes,10,opt,name=router_topic,json=routerTopic" json:"router_topic,omitempty"`
	Sub         string          `protobuf:"bytes,11,opt,name=sub" json:"sub,omitempty"`
}

func (m *RawEventCreatedPayload) Reset()                    { *m = RawEventCreatedPayload{} }
func (m *RawEventCreatedPayload) String() string            { return proto.CompactTextString(m) }
func (*RawEventCreatedPayload) ProtoMessage()               {}
func (*RawEventCreatedPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RawEventCreatedPayload) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEventCreatedPayload) GetSubs() []string {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *RawEventCreatedPayload) GetTargetTopic() string {
	if m != nil {
		return m.TargetTopic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *RawEventCreatedPayload) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

func (m *RawEventCreatedPayload) GetPayloads() []string {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *RawEventCreatedPayload) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *RawEventCreatedPayload) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

type PubSubMessage struct {
	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Sub     *Subscription   `protobuf:"bytes,2,opt,name=sub" json:"sub,omitempty"`
	Payload []byte          `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PubSubMessage) Reset()                    { *m = PubSubMessage{} }
func (m *PubSubMessage) String() string            { return proto.CompactTextString(m) }
func (*PubSubMessage) ProtoMessage()               {}
func (*PubSubMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PubSubMessage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PubSubMessage) GetSub() *Subscription {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *PubSubMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UnsubscribeMessage struct {
	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic string          `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	SubId string          `protobuf:"bytes,4,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
}

func (m *UnsubscribeMessage) Reset()                    { *m = UnsubscribeMessage{} }
func (m *UnsubscribeMessage) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeMessage) ProtoMessage()               {}
func (*UnsubscribeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnsubscribeMessage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UnsubscribeMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *UnsubscribeMessage) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

type RawEvents struct {
	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Events []*RawEvent     `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	Total  int64           `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Anchor string          `protobuf:"bytes,3,opt,name=anchor" json:"anchor,omitempty"`
}

func (m *RawEvents) Reset()                    { *m = RawEvents{} }
func (m *RawEvents) String() string            { return proto.CompactTextString(m) }
func (*RawEvents) ProtoMessage()               {}
func (*RawEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RawEvents) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEvents) GetEvents() []*RawEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RawEvents) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RawEvents) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

type By struct {
	Device   *common.Device `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	Id       string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ClientId string         `protobuf:"bytes,4,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *By) Reset()                    { *m = By{} }
func (m *By) String() string            { return proto.CompactTextString(m) }
func (*By) ProtoMessage()               {}
func (*By) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *By) GetDevice() *common.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *By) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *By) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type RawEvent struct {
	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id             string          `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId      string          `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created        int64           `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Type           string          `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	Topics         []string        `protobuf:"bytes,11,rep,name=topics" json:"topics,omitempty"`
	By             *By             `protobuf:"bytes,50,opt,name=by" json:"by,omitempty"`
	Object         string          `protobuf:"bytes,13,opt,name=object" json:"object,omitempty"`
	ConversationId string          `protobuf:"bytes,15,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Data           *RawEvent_Data  `protobuf:"bytes,20,opt,name=data" json:"data,omitempty"`
}

func (m *RawEvent) Reset()                    { *m = RawEvent{} }
func (m *RawEvent) String() string            { return proto.CompactTextString(m) }
func (*RawEvent) ProtoMessage()               {}
func (*RawEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RawEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RawEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RawEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RawEvent) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RawEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RawEvent) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *RawEvent) GetBy() *By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *RawEvent) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *RawEvent) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *RawEvent) GetData() *RawEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RawEvent_Data struct {
	Account       *account.Account           `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Agent         *account.Agent             `protobuf:"bytes,2,opt,name=agent" json:"agent,omitempty"`
	Message       *conversation.Message      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Conversation  *conversation.Conversation `protobuf:"bytes,4,opt,name=conversation" json:"conversation,omitempty"`
	Postback      *conversation.Postback     `protobuf:"bytes,5,opt,name=postback" json:"postback,omitempty"`
	Content       *content.Content           `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Topic         *user.Topic                `protobuf:"bytes,7,opt,name=topic" json:"topic,omitempty"`
	Presence      *user.Presence             `protobuf:"bytes,8,opt,name=presence" json:"presence,omitempty"`
	User          *user.User                 `protobuf:"bytes,10,opt,name=user" json:"user,omitempty"`
	UnreadTopic   *user.UnreadTopic          `protobuf:"bytes,11,opt,name=unread_topic,json=unreadTopic" json:"unread_topic,omitempty"`
	MyUser        *user.MyUser               `protobuf:"bytes,12,opt,name=my_user,json=myUser" json:"my_user,omitempty"`
	Notification  *notibox.Notification      `protobuf:"bytes,14,opt,name=notification" json:"notification,omitempty"`
	Notibox       *notibox.Box               `protobuf:"bytes,15,opt,name=notibox" json:"notibox,omitempty"`
	AgentPerm     *account.AgentPerm         `protobuf:"bytes,16,opt,name=agent_perm,json=agentPerm" json:"agent_perm,omitempty"`
	GroupMember   *account.GroupMember       `protobuf:"bytes,17,opt,name=group_member,json=groupMember" json:"group_member,omitempty"`
	Group         *account.AgentGroup        `protobuf:"bytes,18,opt,name=group" json:"group,omitempty"`
	Limit         *payment.Limit             `protobuf:"bytes,19,opt,name=limit" json:"limit,omitempty"`
	UserAttribute *user.AttributeData        `protobuf:"bytes,20,opt,name=user_attribute,json=userAttribute" json:"user_attribute,omitempty"`
}

func (m *RawEvent_Data) Reset()                    { *m = RawEvent_Data{} }
func (m *RawEvent_Data) String() string            { return proto.CompactTextString(m) }
func (*RawEvent_Data) ProtoMessage()               {}
func (*RawEvent_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *RawEvent_Data) GetAccount() *account.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *RawEvent_Data) GetAgent() *account.Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *RawEvent_Data) GetMessage() *conversation.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RawEvent_Data) GetConversation() *conversation.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *RawEvent_Data) GetPostback() *conversation.Postback {
	if m != nil {
		return m.Postback
	}
	return nil
}

func (m *RawEvent_Data) GetContent() *content.Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RawEvent_Data) GetTopic() *user.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *RawEvent_Data) GetPresence() *user.Presence {
	if m != nil {
		return m.Presence
	}
	return nil
}

func (m *RawEvent_Data) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RawEvent_Data) GetUnreadTopic() *user.UnreadTopic {
	if m != nil {
		return m.UnreadTopic
	}
	return nil
}

func (m *RawEvent_Data) GetMyUser() *user.MyUser {
	if m != nil {
		return m.MyUser
	}
	return nil
}

func (m *RawEvent_Data) GetNotification() *notibox.Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *RawEvent_Data) GetNotibox() *notibox.Box {
	if m != nil {
		return m.Notibox
	}
	return nil
}

func (m *RawEvent_Data) GetAgentPerm() *account.AgentPerm {
	if m != nil {
		return m.AgentPerm
	}
	return nil
}

func (m *RawEvent_Data) GetGroupMember() *account.GroupMember {
	if m != nil {
		return m.GroupMember
	}
	return nil
}

func (m *RawEvent_Data) GetGroup() *account.AgentGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RawEvent_Data) GetLimit() *payment.Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *RawEvent_Data) GetUserAttribute() *user.AttributeData {
	if m != nil {
		return m.UserAttribute
	}
	return nil
}

type Subscription struct {
	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Topic string          `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	// optional SubscribeScope scope = 5;
	// optional string account_id = 6;
	SubId string `protobuf:"bytes,7,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	// optional SubscriberType subscriber_type = 8;
	// optional string subscriber_id = 9;
	TargetTopic     string `protobuf:"bytes,10,opt,name=target_topic,json=targetTopic" json:"target_topic,omitempty"`
	TargetKey       string `protobuf:"bytes,11,opt,name=target_key,json=targetKey" json:"target_key,omitempty"`
	Ttls            int64  `protobuf:"varint,12,opt,name=ttls" json:"ttls,omitempty"`
	RouterTopic     string `protobuf:"bytes,13,opt,name=router_topic,json=routerTopic" json:"router_topic,omitempty"`
	TargetPartition string `protobuf:"bytes,14,opt,name=target_partition,json=targetPartition" json:"target_partition,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Subscription) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *Subscription) GetTargetTopic() string {
	if m != nil {
		return m.TargetTopic
	}
	return ""
}

func (m *Subscription) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

func (m *Subscription) GetTtls() int64 {
	if m != nil {
		return m.Ttls
	}
	return 0
}

func (m *Subscription) GetRouterTopic() string {
	if m != nil {
		return m.RouterTopic
	}
	return ""
}

func (m *Subscription) GetTargetPartition() string {
	if m != nil {
		return m.TargetPartition
	}
	return ""
}

type AllType struct {
	O         Object             `protobuf:"varint,2,opt,name=o,enum=event.Object" json:"o,omitempty"`
	E         *RawEvent          `protobuf:"bytes,3,opt,name=e" json:"e,omitempty"`
	B         *By                `protobuf:"bytes,4,opt,name=b" json:"b,omitempty"`
	Es        *RawEvents         `protobuf:"bytes,5,opt,name=es" json:"es,omitempty"`
	Ler       *ListEventsRequest `protobuf:"bytes,6,opt,name=ler" json:"ler,omitempty"`
	Userevent *UserEvent         `protobuf:"bytes,7,opt,name=userevent" json:"userevent,omitempty"`
}

func (m *AllType) Reset()                    { *m = AllType{} }
func (m *AllType) String() string            { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()               {}
func (*AllType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllType) GetO() Object {
	if m != nil {
		return m.O
	}
	return Object_none
}

func (m *AllType) GetE() *RawEvent {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *AllType) GetB() *By {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *AllType) GetEs() *RawEvents {
	if m != nil {
		return m.Es
	}
	return nil
}

func (m *AllType) GetLer() *ListEventsRequest {
	if m != nil {
		return m.Ler
	}
	return nil
}

func (m *AllType) GetUserevent() *UserEvent {
	if m != nil {
		return m.Userevent
	}
	return nil
}

type ListEventsRequest struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Query     string          `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Category  string          `protobuf:"bytes,9,opt,name=category" json:"category,omitempty"`
}

func (m *ListEventsRequest) Reset()                    { *m = ListEventsRequest{} }
func (m *ListEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEventsRequest) ProtoMessage()               {}
func (*ListEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListEventsRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListEventsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListEventsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEventsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ListEventsRequest) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *ListEventsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEventsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type UserEvent struct {
	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Event     *RawEvent       `protobuf:"bytes,5,opt,name=event" json:"event,omitempty"`
}

func (m *UserEvent) Reset()                    { *m = UserEvent{} }
func (m *UserEvent) String() string            { return proto.CompactTextString(m) }
func (*UserEvent) ProtoMessage()               {}
func (*UserEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UserEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserEvent) GetEvent() *RawEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type SubscriptionResponse struct {
	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Status bool            `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *SubscriptionResponse) Reset()                    { *m = SubscriptionResponse{} }
func (m *SubscriptionResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionResponse) ProtoMessage()               {}
func (*SubscriptionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SubscriptionResponse) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SubscriptionResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type AutomationEvent struct {
	Ctx        *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  string           `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId     string           `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Automation *user.Automation `protobuf:"bytes,5,opt,name=automation" json:"automation,omitempty"`
	Session    *user.Session    `protobuf:"bytes,6,opt,name=session" json:"session,omitempty"`
	User       *user.User       `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	Event      *RawEvent        `protobuf:"bytes,9,opt,name=event" json:"event,omitempty"`
}

func (m *AutomationEvent) Reset()                    { *m = AutomationEvent{} }
func (m *AutomationEvent) String() string            { return proto.CompactTextString(m) }
func (*AutomationEvent) ProtoMessage()               {}
func (*AutomationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AutomationEvent) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AutomationEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AutomationEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AutomationEvent) GetAutomation() *user.Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (m *AutomationEvent) GetSession() *user.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *AutomationEvent) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AutomationEvent) GetEvent() *RawEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*RawEventCreatedPayload)(nil), "event.RawEventCreatedPayload")
	proto.RegisterType((*PubSubMessage)(nil), "event.PubSubMessage")
	proto.RegisterType((*UnsubscribeMessage)(nil), "event.UnsubscribeMessage")
	proto.RegisterType((*RawEvents)(nil), "event.RawEvents")
	proto.RegisterType((*By)(nil), "event.By")
	proto.RegisterType((*RawEvent)(nil), "event.RawEvent")
	proto.RegisterType((*RawEvent_Data)(nil), "event.RawEvent.Data")
	proto.RegisterType((*Subscription)(nil), "event.Subscription")
	proto.RegisterType((*AllType)(nil), "event.AllType")
	proto.RegisterType((*ListEventsRequest)(nil), "event.ListEventsRequest")
	proto.RegisterType((*UserEvent)(nil), "event.UserEvent")
	proto.RegisterType((*SubscriptionResponse)(nil), "event.SubscriptionResponse")
	proto.RegisterType((*AutomationEvent)(nil), "event.AutomationEvent")
	proto.RegisterEnum("event.Event", Event_name, Event_value)
	proto.RegisterEnum("event.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("event.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("event.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("event.ConvoType", ConvoType_name, ConvoType_value)
	proto.RegisterEnum("event.NotiboxType", NotiboxType_name, NotiboxType_value)
	proto.RegisterEnum("event.SubscriberType", SubscriberType_name, SubscriberType_value)
	proto.RegisterEnum("event.SubPrefix", SubPrefix_name, SubPrefix_value)
	proto.RegisterEnum("event.Object", Object_name, Object_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyService service

type MyServiceClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
}

type myServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyServiceClient(cc *grpc.ClientConn) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := grpc.Invoke(ctx, "/event.MyService/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyService service

type MyServiceServer interface {
	Do(context.Context, *AllType) (*AllType, error)
}

func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	s.RegisterService(&_MyService_serviceDesc, srv)
}

func _MyService_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.MyService/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyService_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

// Client API for Publisher service

type PublisherClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := grpc.Invoke(ctx, "/event.Publisher/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := grpc.Invoke(ctx, "/event.Publisher/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publisher service

type PublisherServer interface {
	Subscribe(context.Context, *Subscription) (*SubscriptionResponse, error)
	Unsubscribe(context.Context, *Subscription) (*SubscriptionResponse, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Publisher/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Publisher/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Publisher_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Publisher_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

// Client API for EventMgr service

type EventMgrClient interface {
	SearchEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error)
	CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*RawEvent, error)
	Subscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Unsubscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ReadTopic(ctx context.Context, in *user.ReadTopicRequest, opts ...grpc.CallOption) (*common.Empty, error)
	SearchTopics(ctx context.Context, in *user.ListTopicsRequest, opts ...grpc.CallOption) (*user.ListTopicsResult, error)
}

type eventMgrClient struct {
	cc *grpc.ClientConn
}

func NewEventMgrClient(cc *grpc.ClientConn) EventMgrClient {
	return &eventMgrClient{cc}
}

func (c *eventMgrClient) SearchEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := grpc.Invoke(ctx, "/event.EventMgr/SearchEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*RawEvent, error) {
	out := new(RawEvent)
	err := grpc.Invoke(ctx, "/event.EventMgr/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) Subscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/event.EventMgr/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) Unsubscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/event.EventMgr/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) ReadTopic(ctx context.Context, in *user.ReadTopicRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/event.EventMgr/ReadTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) SearchTopics(ctx context.Context, in *user.ListTopicsRequest, opts ...grpc.CallOption) (*user.ListTopicsResult, error) {
	out := new(user.ListTopicsResult)
	err := grpc.Invoke(ctx, "/event.EventMgr/SearchTopics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventMgr service

type EventMgrServer interface {
	SearchEvents(context.Context, *ListEventsRequest) (*RawEvents, error)
	CreateEvent(context.Context, *UserEvent) (*RawEvent, error)
	Subscribe(context.Context, *user.SubscribeRequest) (*common.Empty, error)
	Unsubscribe(context.Context, *user.SubscribeRequest) (*common.Empty, error)
	ReadTopic(context.Context, *user.ReadTopicRequest) (*common.Empty, error)
	SearchTopics(context.Context, *user.ListTopicsRequest) (*user.ListTopicsResult, error)
}

func RegisterEventMgrServer(s *grpc.Server, srv EventMgrServer) {
	s.RegisterService(&_EventMgr_serviceDesc, srv)
}

func _EventMgr_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).CreateEvent(ctx, req.(*UserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).Subscribe(ctx, req.(*user.SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).Unsubscribe(ctx, req.(*user.SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_ReadTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ReadTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).ReadTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/ReadTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).ReadTopic(ctx, req.(*user.ReadTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_SearchTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventMgr/SearchTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchTopics(ctx, req.(*user.ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventMgr",
	HandlerType: (*EventMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvents",
			Handler:    _EventMgr_SearchEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventMgr_CreateEvent_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _EventMgr_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EventMgr_Unsubscribe_Handler,
		},
		{
			MethodName: "ReadTopic",
			Handler:    _EventMgr_ReadTopic_Handler,
		},
		{
			MethodName: "SearchTopics",
			Handler:    _EventMgr_SearchTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

// Client API for ConversationEventReader service

type ConversationEventReaderClient interface {
	SendMessage(ctx context.Context, in *RawEvent, opts ...grpc.CallOption) (*RawEvent, error)
	ListEvents(ctx context.Context, in *conversation.ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error)
	SearchEvents(ctx context.Context, in *conversation.SearchMessageRequest, opts ...grpc.CallOption) (*RawEvents, error)
}

type conversationEventReaderClient struct {
	cc *grpc.ClientConn
}

func NewConversationEventReaderClient(cc *grpc.ClientConn) ConversationEventReaderClient {
	return &conversationEventReaderClient{cc}
}

func (c *conversationEventReaderClient) SendMessage(ctx context.Context, in *RawEvent, opts ...grpc.CallOption) (*RawEvent, error) {
	out := new(RawEvent)
	err := grpc.Invoke(ctx, "/event.ConversationEventReader/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) ListEvents(ctx context.Context, in *conversation.ListEventsRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := grpc.Invoke(ctx, "/event.ConversationEventReader/ListEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) SearchEvents(ctx context.Context, in *conversation.SearchMessageRequest, opts ...grpc.CallOption) (*RawEvents, error) {
	out := new(RawEvents)
	err := grpc.Invoke(ctx, "/event.ConversationEventReader/SearchEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConversationEventReader service

type ConversationEventReaderServer interface {
	SendMessage(context.Context, *RawEvent) (*RawEvent, error)
	ListEvents(context.Context, *conversation.ListEventsRequest) (*RawEvents, error)
	SearchEvents(context.Context, *conversation.SearchMessageRequest) (*RawEvents, error)
}

func RegisterConversationEventReaderServer(s *grpc.Server, srv ConversationEventReaderServer) {
	s.RegisterService(&_ConversationEventReader_serviceDesc, srv)
}

func _ConversationEventReader_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, req.(*RawEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, req.(*conversation.ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.SearchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.ConversationEventReader/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, req.(*conversation.SearchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationEventReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.ConversationEventReader",
	HandlerType: (*ConversationEventReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ConversationEventReader_SendMessage_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ConversationEventReader_ListEvents_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _ConversationEventReader_SearchEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}

func init() { proto.RegisterFile("event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x18, 0xdb, 0x72, 0xdb, 0xc6,
	0x55, 0x24, 0x41, 0x12, 0x3c, 0xa0, 0xa4, 0xd5, 0xea, 0x06, 0x53, 0xb1, 0x2c, 0x31, 0xb6, 0x24,
	0x33, 0x8d, 0xe4, 0xd2, 0x6e, 0x33, 0xcd, 0x24, 0x76, 0xe5, 0x4b, 0x53, 0xa3, 0x71, 0xaa, 0x40,
	0xce, 0x64, 0xfa, 0xc4, 0xc1, 0x65, 0x45, 0x21, 0x22, 0x01, 0x06, 0xbb, 0x90, 0xcd, 0x3e, 0x76,
	0xa6, 0x4f, 0x9d, 0x66, 0x3a, 0x7d, 0x69, 0x3f, 0xa4, 0xcf, 0xfd, 0x84, 0xce, 0xe4, 0xbd, 0x6f,
	0xfd, 0x91, 0xce, 0xde, 0x40, 0x40, 0xb4, 0x3d, 0xf2, 0x4c, 0xfb, 0x42, 0x62, 0xcf, 0x75, 0xcf,
	0x65, 0xcf, 0x39, 0xbb, 0xb0, 0x42, 0x2e, 0x49, 0xcc, 0x8e, 0xc4, 0xef, 0xe1, 0x24, 0x4d, 0x58,
	0x82, 0xeb, 0x62, 0xd1, 0x39, 0xf4, 0x23, 0xe6, 0x67, 0xc1, 0x05, 0x61, 0x87, 0x49, 0x3a, 0x3c,
	0xa2, 0x99, 0x1f, 0xfd, 0xfe, 0xe8, 0x9c, 0x78, 0x21, 0x49, 0x8f, 0x82, 0x64, 0x3c, 0x4e, 0x62,
	0xf5, 0x27, 0xd9, 0x3a, 0xf7, 0xde, 0x41, 0xef, 0x05, 0x41, 0x92, 0xc5, 0x4c, 0xff, 0x2b, 0x8e,
	0x4f, 0xdf, 0xa9, 0x21, 0xbe, 0x24, 0x29, 0xf5, 0x58, 0x24, 0xf4, 0xcc, 0x16, 0xd7, 0xd0, 0x16,
	0x24, 0x31, 0xe3, 0x46, 0xa9, 0x7f, 0xc5, 0xd1, 0x7b, 0x07, 0x47, 0x46, 0xd5, 0xcf, 0x35, 0xa4,
	0xc7, 0x09, 0x8b, 0xfc, 0xe4, 0xb5, 0xfe, 0xbf, 0x06, 0xc7, 0xc4, 0x9b, 0x8e, 0xf9, 0x7e, 0xd4,
	0xbf, 0xe4, 0xe8, 0xfe, 0xb5, 0x0a, 0x1b, 0xae, 0xf7, 0xea, 0x19, 0x77, 0xf6, 0x93, 0x94, 0x78,
	0x8c, 0x84, 0x27, 0xde, 0x74, 0x94, 0x78, 0x21, 0xde, 0x85, 0x5a, 0xc0, 0x5e, 0xdb, 0x95, 0x9d,
	0xca, 0x81, 0xd5, 0x5f, 0x3e, 0x54, 0x6e, 0x7e, 0xc2, 0xcd, 0x79, 0xcd, 0x5c, 0x8e, 0xc3, 0x18,
	0x0c, 0x9a, 0xf9, 0xd4, 0xae, 0xed, 0xd4, 0x0e, 0x5a, 0xae, 0xf8, 0xc6, 0xbb, 0xd0, 0x66, 0x5e,
	0x3a, 0x24, 0x6c, 0xc0, 0x92, 0x49, 0x14, 0xd8, 0xc6, 0x4e, 0xe5, 0xa0, 0xe5, 0x5a, 0x12, 0xf6,
	0x92, 0x83, 0xb0, 0x0d, 0xcd, 0x89, 0x54, 0x62, 0xd7, 0x05, 0x56, 0x2f, 0xf1, 0x4d, 0x00, 0xc5,
	0x7c, 0x41, 0xa6, 0x76, 0x43, 0x20, 0x5b, 0x12, 0xf2, 0x1b, 0x32, 0xc5, 0x1d, 0x30, 0x15, 0x25,
	0xb5, 0x9b, 0x42, 0x67, 0xbe, 0xc6, 0x6b, 0x50, 0x97, 0x0a, 0x5b, 0x82, 0x4b, 0x2e, 0xf8, 0x6e,
	0xd2, 0x24, 0x63, 0x24, 0x55, 0xbb, 0x01, 0xb9, 0x1b, 0x09, 0x93, 0xbb, 0x41, 0x50, 0xa3, 0x99,
	0x6f, 0x5b, 0x02, 0xc3, 0x3f, 0xbb, 0x14, 0x16, 0x4f, 0x32, 0xff, 0x34, 0xf3, 0x5f, 0x10, 0x4a,
	0xbd, 0x21, 0xb9, 0x8e, 0x2b, 0xee, 0x48, 0x29, 0x55, 0x41, 0xb2, 0x7a, 0x28, 0x53, 0xf9, 0x34,
	0xf3, 0x69, 0x90, 0x46, 0x13, 0x9e, 0x32, 0x42, 0x74, 0xd1, 0xf4, 0xda, 0x4e, 0xe5, 0xa0, 0x9d,
	0x9b, 0xde, 0x0d, 0x01, 0x7f, 0x13, 0x53, 0xc9, 0xe0, 0x93, 0xf7, 0xd0, 0x9c, 0x1b, 0x5e, 0x2b,
	0x1a, 0xbe, 0x0e, 0x0d, 0x9a, 0xf9, 0x83, 0x28, 0x54, 0x01, 0xa8, 0xd3, 0xcc, 0x7f, 0x1e, 0x76,
	0xff, 0x58, 0x81, 0x96, 0x8e, 0x37, 0xbd, 0x8e, 0xf4, 0x7d, 0x68, 0x08, 0x5b, 0xa8, 0x6d, 0xec,
	0xd4, 0x04, 0x95, 0x34, 0x4d, 0x0b, 0x71, 0x15, 0x5a, 0x6e, 0x83, 0x79, 0x23, 0xe1, 0x82, 0x9a,
	0x2b, 0x17, 0x78, 0x03, 0x1a, 0x5e, 0x1c, 0x9c, 0x27, 0xa9, 0xda, 0x9d, 0x5a, 0x75, 0x7f, 0x07,
	0xd5, 0xc7, 0x53, 0xbc, 0x07, 0x8d, 0x90, 0x5c, 0x46, 0x01, 0x51, 0x7e, 0x5b, 0xd2, 0x5b, 0x78,
	0x2a, 0xa0, 0xae, 0xc2, 0xe2, 0x25, 0xa8, 0x46, 0xa1, 0x92, 0x50, 0x8d, 0x42, 0xbc, 0x05, 0xad,
	0x60, 0x14, 0x91, 0x98, 0xcd, 0xec, 0x33, 0x25, 0xe0, 0x79, 0xd8, 0xfd, 0x5b, 0x1b, 0x4c, 0xbd,
	0xbb, 0xeb, 0x58, 0x78, 0x55, 0xf8, 0x4d, 0x00, 0x55, 0x21, 0x66, 0xd2, 0x5b, 0x0a, 0xf2, 0x3c,
	0xe4, 0x11, 0x0c, 0xe4, 0x41, 0xb1, 0x4d, 0x61, 0xa9, 0x5e, 0xf2, 0xd3, 0xc0, 0xa6, 0x13, 0xa2,
	0x12, 0x50, 0x7c, 0x73, 0xfb, 0x45, 0x3c, 0xa8, 0x6d, 0x89, 0x7c, 0x55, 0x2b, 0x7c, 0x03, 0xaa,
	0xfe, 0xd4, 0xee, 0x8b, 0x6d, 0xb5, 0x94, 0x4b, 0x1f, 0x4f, 0xdd, 0xaa, 0x3f, 0xe5, 0x2c, 0x89,
	0xff, 0x1d, 0x09, 0x98, 0xbd, 0x28, 0x5d, 0x26, 0x57, 0x78, 0x1f, 0x96, 0x8b, 0x25, 0x88, 0x6f,
	0x6e, 0x59, 0x10, 0x2c, 0x15, 0xc1, 0xcf, 0x43, 0x7c, 0x00, 0x46, 0xe8, 0x31, 0xcf, 0x5e, 0x13,
	0xd2, 0xd7, 0xae, 0x04, 0xec, 0xf0, 0xa9, 0xc7, 0x3c, 0x57, 0x50, 0x74, 0x7e, 0x6c, 0x80, 0xc1,
	0x97, 0xb8, 0x07, 0x4d, 0x65, 0xa1, 0x72, 0x15, 0x3a, 0xd4, 0x55, 0xf2, 0x58, 0xfe, 0xbb, 0x9a,
	0x00, 0xdf, 0x86, 0xba, 0x37, 0x24, 0x31, 0xcb, 0x63, 0x96, 0x53, 0x72, 0xa8, 0x2b, 0x91, 0xf8,
	0x08, 0x9a, 0x63, 0x99, 0xc3, 0xc2, 0xb5, 0x56, 0x7f, 0xfd, 0xb0, 0x54, 0x40, 0x55, 0x82, 0xbb,
	0x9a, 0x0a, 0x3f, 0x84, 0x76, 0x91, 0x40, 0x38, 0xde, 0xea, 0x77, 0xca, 0x5c, 0x4f, 0x0a, 0x0b,
	0xb7, 0x44, 0x8f, 0xfb, 0x60, 0x4e, 0x12, 0xca, 0x7c, 0x2f, 0xb8, 0x10, 0x55, 0xc5, 0xea, 0x6f,
	0x94, 0x79, 0x4f, 0x14, 0xd6, 0xcd, 0xe9, 0xb8, 0xd9, 0xaa, 0x3c, 0x8b, 0x5a, 0xc3, 0xcd, 0xd6,
	0xe5, 0xfa, 0x89, 0xfc, 0x77, 0x35, 0x01, 0xde, 0xd5, 0xc7, 0xac, 0x29, 0x28, 0xad, 0x43, 0x51,
	0xa9, 0x45, 0x09, 0xd1, 0x67, 0xae, 0x07, 0xe6, 0x24, 0x25, 0x94, 0xc4, 0x01, 0x11, 0xb9, 0xc1,
	0x9d, 0x23, 0xa8, 0x4e, 0x14, 0xd4, 0xcd, 0xf1, 0x78, 0x1b, 0x0c, 0x8e, 0x12, 0x05, 0xc9, 0xea,
	0x83, 0xa4, 0xfb, 0x86, 0x92, 0xd4, 0x15, 0x70, 0xfc, 0x00, 0xda, 0x59, 0x9c, 0x12, 0x2f, 0x54,
	0x85, 0xcb, 0x12, 0x74, 0x2b, 0x8a, 0x4e, 0x60, 0xa4, 0x6e, 0x2b, 0x9b, 0x2d, 0xf0, 0x1d, 0x68,
	0x8e, 0xa7, 0x03, 0x21, 0xb8, 0x2d, 0x18, 0xda, 0x92, 0xe1, 0xc5, 0x54, 0x88, 0x6e, 0x8c, 0xc5,
	0x3f, 0xfe, 0x05, 0xb4, 0x79, 0xe3, 0x38, 0x8b, 0x02, 0xe9, 0xeb, 0x25, 0x15, 0x21, 0xdd, 0x4d,
	0xbe, 0x2a, 0x20, 0xdd, 0x12, 0x29, 0xde, 0x83, 0xa6, 0xa2, 0x12, 0xd9, 0xc7, 0x35, 0x68, 0xae,
	0xc7, 0xc9, 0x6b, 0x57, 0x23, 0xf1, 0x4f, 0x01, 0x44, 0x22, 0x0c, 0x26, 0x24, 0x1d, 0xdb, 0x48,
	0x90, 0xe2, 0x72, 0xaa, 0x9c, 0x90, 0x74, 0xec, 0xb6, 0x3c, 0xfd, 0x89, 0x3f, 0x81, 0xf6, 0x30,
	0x4d, 0xb2, 0xc9, 0x60, 0x4c, 0xc6, 0x3e, 0x49, 0xed, 0x15, 0x95, 0xbf, 0x9a, 0xe9, 0x0b, 0x8e,
	0x7c, 0x21, 0x70, 0xae, 0x35, 0x9c, 0x2d, 0xf0, 0x5d, 0xa8, 0x8b, 0xa5, 0x8d, 0x55, 0xf5, 0x2d,
	0xa9, 0x11, 0x6c, 0xae, 0xa4, 0xe0, 0xc9, 0x3b, 0x8a, 0xc6, 0x11, 0xb3, 0x57, 0x55, 0x7c, 0x74,
	0x3b, 0xfc, 0x92, 0x43, 0x5d, 0x89, 0xc4, 0x9f, 0xc2, 0x12, 0x77, 0xdb, 0xc0, 0x63, 0x2c, 0x8d,
	0xfc, 0x8c, 0x11, 0x75, 0x96, 0x56, 0xa5, 0x37, 0x8f, 0x35, 0x58, 0x1c, 0xa5, 0x45, 0x0e, 0xcb,
	0x41, 0x8e, 0x61, 0x02, 0xb2, 0x1c, 0xc3, 0x6c, 0xa3, 0x45, 0xc7, 0x30, 0x11, 0x5a, 0x71, 0x0c,
	0x73, 0x05, 0x61, 0xc7, 0x30, 0x31, 0x5a, 0x75, 0x0c, 0x73, 0x15, 0xad, 0x39, 0x86, 0xb9, 0x8e,
	0x36, 0x1c, 0xc3, 0xdc, 0x40, 0x9b, 0x8e, 0x61, 0x6e, 0x22, 0xdb, 0x31, 0x4c, 0x1b, 0xdd, 0x70,
	0x0c, 0xf3, 0x06, 0xea, 0x38, 0x86, 0xd9, 0x41, 0x5b, 0x8e, 0x61, 0x6e, 0xa1, 0x0f, 0x1c, 0xc3,
	0xfc, 0x00, 0xdd, 0x74, 0x0c, 0xf3, 0x26, 0xda, 0x76, 0x0c, 0x73, 0x1b, 0xdd, 0x72, 0x0c, 0xf3,
	0x16, 0xda, 0x71, 0x0c, 0x73, 0x07, 0xed, 0x3a, 0x86, 0xb9, 0x8b, 0xba, 0x8e, 0x61, 0x7e, 0x88,
	0x6e, 0x3b, 0x86, 0x79, 0x1b, 0xdd, 0x71, 0x0c, 0xf3, 0x0e, 0xda, 0x73, 0x0c, 0x73, 0x0f, 0xed,
	0x3b, 0x86, 0xb9, 0x8f, 0x0e, 0x1c, 0xc3, 0x3c, 0x40, 0x77, 0x1d, 0xc3, 0xbc, 0x8b, 0x7a, 0x8e,
	0x61, 0xf6, 0xd0, 0x47, 0x2e, 0x04, 0xe7, 0x5e, 0x1c, 0x93, 0xd1, 0x20, 0x0a, 0x5d, 0xf0, 0x65,
	0xba, 0xf0, 0xef, 0x3a, 0x65, 0x1e, 0x23, 0x2e, 0xa8, 0x13, 0x39, 0x60, 0x09, 0x6f, 0xaf, 0x43,
	0x32, 0xc8, 0xd2, 0x91, 0x0b, 0xe2, 0x8b, 0x45, 0x6c, 0x44, 0x5c, 0xe4, 0xa7, 0xc9, 0x2b, 0xce,
	0x34, 0xf2, 0xe2, 0x61, 0xc6, 0x4f, 0xb1, 0x25, 0x0b, 0xf5, 0x80, 0xd7, 0x3c, 0xb7, 0xa9, 0x05,
	0xb6, 0xbe, 0x4b, 0xa2, 0x58, 0x7e, 0x5a, 0xea, 0x53, 0x10, 0xb4, 0x46, 0xc4, 0xbb, 0x54, 0x70,
	0x8f, 0x31, 0x2f, 0x38, 0xe7, 0x21, 0xa0, 0xae, 0x21, 0x8a, 0x72, 0xe3, 0x2c, 0x49, 0xc7, 0x1e,
	0xe3, 0x32, 0x47, 0xd1, 0x25, 0x49, 0x23, 0x12, 0x52, 0xb7, 0x71, 0x16, 0x91, 0x51, 0x48, 0x5d,
	0x33, 0x48, 0xc6, 0x93, 0x8c, 0x91, 0x30, 0xaf, 0x47, 0xaa, 0xe0, 0xe4, 0x85, 0x64, 0x76, 0xbc,
	0xf3, 0xb3, 0xab, 0xce, 0x67, 0xf7, 0x0f, 0x55, 0x68, 0x17, 0x5b, 0xf2, 0xff, 0xa2, 0xbb, 0x36,
	0x0b, 0xdd, 0x75, 0x6e, 0xf6, 0x81, 0xf9, 0xd9, 0xa7, 0x3c, 0xe1, 0x58, 0x57, 0x27, 0x1c, 0xde,
	0x43, 0xd8, 0x88, 0x8a, 0xd3, 0x5b, 0x73, 0xc5, 0xf7, 0xdc, 0x0c, 0xb3, 0x38, 0x3f, 0xc3, 0xdc,
	0x05, 0xa4, 0xa4, 0x4e, 0xbc, 0x94, 0x45, 0xf9, 0xa1, 0x6e, 0xb9, 0xcb, 0x12, 0x7e, 0xa2, 0xc1,
	0xdd, 0x7f, 0x57, 0xa0, 0x79, 0x3c, 0x1a, 0xbd, 0xe4, 0xdd, 0x69, 0x0b, 0x2a, 0x89, 0x28, 0xe3,
	0x4b, 0xfd, 0x45, 0xd5, 0x26, 0x7e, 0x2b, 0x9a, 0x8d, 0x5b, 0x49, 0xf0, 0x4d, 0xa8, 0xe8, 0xda,
	0x3d, 0xd7, 0xf4, 0x2b, 0x04, 0x6f, 0x42, 0xc5, 0x57, 0x45, 0xba, 0xd0, 0xc0, 0x2a, 0x3e, 0xde,
	0x81, 0x2a, 0xa1, 0xaa, 0x04, 0xa3, 0x2b, 0x8c, 0xd4, 0xad, 0x12, 0x8a, 0x7b, 0x50, 0x1b, 0x91,
	0x54, 0x95, 0x5c, 0x5b, 0x91, 0x7c, 0x19, 0x51, 0xa6, 0x68, 0xc8, 0xf7, 0x19, 0xa1, 0xcc, 0xe5,
	0x44, 0xf8, 0x10, 0x5a, 0x3c, 0x9d, 0x04, 0x8d, 0x2a, 0xbd, 0x5a, 0x28, 0x2f, 0x65, 0x72, 0x3b,
	0x33, 0x92, 0xee, 0xbf, 0x2a, 0xb0, 0x32, 0x27, 0xea, 0x3a, 0x81, 0x2e, 0xb7, 0xfd, 0xea, 0xd5,
	0xb6, 0xbf, 0x09, 0x3a, 0xad, 0xf5, 0x24, 0xc3, 0x97, 0xcf, 0x43, 0x9e, 0x20, 0xdf, 0x67, 0x24,
	0x9d, 0xea, 0x39, 0x4b, 0x2c, 0x0a, 0x73, 0x4f, 0xbd, 0x38, 0xf7, 0x70, 0x6a, 0x59, 0x7f, 0xb8,
	0xf1, 0x75, 0x5d, 0x6f, 0x3a, 0x60, 0x06, 0x1e, 0x23, 0xc3, 0x24, 0x9d, 0xaa, 0xe9, 0x21, 0x5f,
	0x77, 0xff, 0x5c, 0x81, 0x56, 0x6e, 0xe9, 0xfb, 0x1b, 0x52, 0x7b, 0x87, 0x21, 0x46, 0xc9, 0x90,
	0x3b, 0x20, 0xef, 0x5c, 0x2a, 0x74, 0x73, 0x31, 0x97, 0xd8, 0xee, 0xd7, 0xb0, 0x56, 0x1a, 0x6b,
	0x09, 0x9d, 0x24, 0x31, 0xbd, 0xd6, 0xa4, 0xba, 0x01, 0x0d, 0x5e, 0x62, 0x32, 0x2a, 0xdc, 0x6b,
	0xba, 0x6a, 0xd5, 0xfd, 0xa1, 0x0a, 0xcb, 0xc7, 0x19, 0x4b, 0xc6, 0xa2, 0xc5, 0xfc, 0xdf, 0x0d,
	0xbd, 0x07, 0xe0, 0xe5, 0xda, 0xf2, 0x44, 0x95, 0x95, 0x3d, 0x87, 0xbb, 0x05, 0x1a, 0xbc, 0x0f,
	0x4d, 0x4a, 0x28, 0xe5, 0xe4, 0x32, 0x69, 0x17, 0x25, 0xf9, 0xa9, 0x04, 0xba, 0x1a, 0x9b, 0x77,
	0xf5, 0xe6, 0x5b, 0xba, 0x7a, 0xee, 0xe3, 0xd6, 0xbb, 0x7c, 0xdc, 0xfb, 0x4b, 0x05, 0xea, 0xd2,
	0x0d, 0x4d, 0xa8, 0x9d, 0x66, 0x3e, 0x5a, 0xc0, 0xab, 0xb0, 0x7c, 0xe5, 0x9e, 0x86, 0x6a, 0x78,
	0x11, 0x5a, 0xa7, 0xfa, 0xc6, 0x80, 0x0c, 0x8c, 0x61, 0x29, 0x5f, 0xba, 0x64, 0x32, 0x9a, 0xa2,
	0x06, 0x5e, 0x06, 0xab, 0x70, 0xad, 0x40, 0x75, 0xbc, 0x06, 0xa8, 0x00, 0x90, 0x64, 0x4d, 0x2e,
	0x49, 0xc8, 0x3e, 0x9d, 0xc6, 0x01, 0x32, 0x31, 0x82, 0x76, 0x49, 0x55, 0xab, 0xf7, 0xf7, 0x2a,
	0x58, 0x6a, 0x14, 0x14, 0xa5, 0xa3, 0x0e, 0x15, 0x4f, 0x6e, 0x4b, 0xc7, 0x20, 0x24, 0x23, 0xc2,
	0x69, 0x3f, 0xc3, 0x36, 0xac, 0xe5, 0x81, 0x89, 0xcf, 0x92, 0x41, 0x36, 0x09, 0x85, 0x94, 0xcf,
	0xf1, 0x0a, 0x2c, 0xca, 0x16, 0xaf, 0x66, 0x66, 0xf4, 0x70, 0x06, 0xd2, 0xfc, 0x8f, 0xf0, 0x06,
	0x60, 0x09, 0x2a, 0x71, 0xff, 0x92, 0xef, 0x4a, 0xc2, 0x45, 0x33, 0x09, 0xd1, 0x31, 0x5e, 0x02,
	0x90, 0x90, 0x11, 0x39, 0x63, 0xe8, 0x31, 0xde, 0x84, 0xd5, 0x28, 0xbe, 0x8c, 0x98, 0x9c, 0x90,
	0xbd, 0x20, 0x20, 0x13, 0xce, 0xfa, 0x94, 0x6b, 0x91, 0xe3, 0x88, 0xd6, 0xf2, 0x8c, 0x6b, 0x91,
	0xa0, 0x92, 0x96, 0x5f, 0xe1, 0x0f, 0xc0, 0x9e, 0x4d, 0x2e, 0x91, 0x88, 0x6b, 0x8e, 0xfd, 0x82,
	0x0b, 0x12, 0x67, 0x36, 0x07, 0xfd, 0xba, 0xf7, 0x10, 0x4c, 0x1e, 0x62, 0xed, 0x96, 0x0c, 0x2d,
	0x70, 0x27, 0xab, 0x39, 0x6c, 0x90, 0x4d, 0x28, 0x49, 0x39, 0xe1, 0x21, 0x5e, 0x87, 0x15, 0x99,
	0x91, 0x45, 0x85, 0xf7, 0x7a, 0xff, 0xa8, 0x2a, 0xe7, 0x6b, 0x09, 0x44, 0x4a, 0xd0, 0xb3, 0x62,
	0x4e, 0xba, 0xc7, 0x23, 0xac, 0x7a, 0xda, 0xe0, 0x32, 0x22, 0xaf, 0x48, 0x88, 0xf6, 0x39, 0xa5,
	0x86, 0x51, 0xe2, 0xa5, 0xc1, 0x39, 0x09, 0xd1, 0x01, 0xf7, 0x84, 0x86, 0x7a, 0x61, 0x48, 0x42,
	0x96, 0x04, 0x5e, 0xca, 0xd0, 0x5d, 0x6e, 0xb6, 0x46, 0x04, 0xe7, 0x24, 0xb8, 0x20, 0x61, 0x92,
	0x31, 0xd4, 0xe3, 0x9b, 0xd3, 0xf0, 0x49, 0x96, 0x06, 0xe7, 0x1e, 0x25, 0x21, 0xfa, 0x88, 0x7b,
	0x58, 0x74, 0x9d, 0x01, 0x1f, 0x32, 0xd1, 0x4f, 0xb8, 0x77, 0xf2, 0xe4, 0x51, 0xb3, 0x69, 0xbe,
	0xbf, 0x8f, 0xb9, 0x70, 0x61, 0x61, 0x19, 0xde, 0xc7, 0x1d, 0xd8, 0x28, 0x0f, 0x54, 0x79, 0x02,
	0xdc, 0x7f, 0x03, 0x4e, 0xf3, 0x3d, 0x78, 0x03, 0x4e, 0xc7, 0xef, 0x93, 0xde, 0x3f, 0x6b, 0xd0,
	0xe2, 0xf7, 0x81, 0x44, 0xbb, 0x2d, 0x40, 0x0b, 0x3c, 0xf5, 0x4a, 0x97, 0x24, 0x2d, 0xaa, 0xc5,
	0x93, 0x47, 0x0f, 0x36, 0x94, 0xc4, 0x0c, 0x01, 0xde, 0x86, 0x4e, 0x89, 0x56, 0x8c, 0x3f, 0x39,
	0x87, 0xa5, 0x5c, 0x38, 0xc3, 0xab, 0xac, 0xab, 0x2a, 0x57, 0xcd, 0x10, 0x22, 0xf9, 0x8c, 0x39,
	0x7a, 0xe6, 0x0d, 0x87, 0x24, 0x44, 0x0d, 0x7c, 0x03, 0xd6, 0xcb, 0x9b, 0x8a, 0x15, 0xaa, 0x29,
	0xf6, 0xab, 0xa6, 0xb1, 0x90, 0x44, 0x31, 0x23, 0xc3, 0x54, 0x68, 0x5f, 0x13, 0x71, 0xd2, 0x73,
	0xda, 0x0c, 0xbe, 0x5e, 0xb6, 0x83, 0xc4, 0x68, 0x9b, 0xa7, 0xa4, 0x86, 0x78, 0x3c, 0x9e, 0xe8,
	0x96, 0xc8, 0x3f, 0x05, 0x4a, 0x49, 0x40, 0xa2, 0x4b, 0x12, 0xa2, 0x9d, 0x39, 0x83, 0xe5, 0x9c,
	0xcd, 0x67, 0xb2, 0x28, 0x1e, 0xa2, 0x5d, 0xbc, 0x05, 0x9b, 0x25, 0xbc, 0x1e, 0xa4, 0x48, 0x88,
	0xba, 0x73, 0xc8, 0x2c, 0xf6, 0x28, 0x8d, 0x86, 0xdc, 0x23, 0x1f, 0xce, 0x59, 0x98, 0xa3, 0x6e,
	0xcf, 0x45, 0x64, 0x42, 0xe2, 0x90, 0xab, 0xfb, 0xba, 0xf7, 0x0c, 0xac, 0xaf, 0xe4, 0x6d, 0x41,
	0x47, 0x30, 0x46, 0x0b, 0x5c, 0x54, 0xf1, 0xc2, 0x31, 0x3b, 0x3f, 0x0f, 0xb8, 0x55, 0xea, 0x7a,
	0x31, 0x83, 0xfe, 0xac, 0xf7, 0x71, 0xa1, 0xea, 0xc9, 0x43, 0x68, 0x41, 0x93, 0x32, 0x71, 0xfa,
	0xd0, 0x02, 0x4f, 0x60, 0xca, 0x53, 0x5d, 0xb8, 0x12, 0x55, 0x7a, 0xfb, 0xa2, 0x66, 0x9e, 0xa4,
	0xe4, 0x2c, 0x7a, 0xcd, 0x29, 0xbf, 0x25, 0xfe, 0x79, 0x92, 0x5c, 0xa0, 0x05, 0x5e, 0x03, 0xbf,
	0x25, 0x3e, 0x4d, 0x82, 0x0b, 0xc2, 0x50, 0xa5, 0xf7, 0x43, 0x15, 0x1a, 0x72, 0x1a, 0xc2, 0x26,
	0x18, 0x71, 0x12, 0xf3, 0x63, 0x69, 0xe5, 0x17, 0x65, 0x54, 0xc1, 0x2d, 0x75, 0x13, 0x46, 0x55,
	0x0e, 0x57, 0x0e, 0x47, 0x35, 0x1e, 0xa2, 0xa2, 0xc9, 0xc8, 0xc0, 0xed, 0xd9, 0xe5, 0x14, 0xd5,
	0x39, 0xb1, 0x3a, 0x6a, 0xa8, 0xc1, 0x85, 0x88, 0xd3, 0x82, 0x9a, 0x82, 0x4a, 0x9d, 0x79, 0x64,
	0x72, 0xa5, 0xc2, 0x04, 0xe0, 0xf2, 0x8a, 0x77, 0x41, 0x64, 0x09, 0x75, 0xb2, 0xbe, 0xa0, 0x36,
	0x47, 0x17, 0x3d, 0x86, 0x96, 0x38, 0x5a, 0x39, 0x0a, 0x2d, 0x73, 0x07, 0xcc, 0xea, 0x19, 0x42,
	0xb3, 0x2a, 0x2a, 0xc3, 0x8f, 0x56, 0xf8, 0x16, 0x04, 0x04, 0x61, 0xde, 0x2e, 0x74, 0xb6, 0x71,
	0x51, 0xdb, 0x1c, 0x27, 0xea, 0x1d, 0x5a, 0xed, 0xdf, 0x87, 0xd6, 0x8b, 0xe9, 0x29, 0x49, 0xc5,
	0x93, 0xcc, 0x1e, 0x54, 0x9f, 0x26, 0x78, 0x49, 0x35, 0x30, 0x35, 0x50, 0x76, 0xae, 0xac, 0xbb,
	0x0b, 0xfd, 0x3f, 0x55, 0xa0, 0x75, 0x92, 0xf9, 0xa3, 0x88, 0x9e, 0x93, 0x14, 0x7f, 0x5e, 0x68,
	0x58, 0xf8, 0x4d, 0xaf, 0x64, 0x9d, 0xad, 0x37, 0x3d, 0x9d, 0xe9, 0x19, 0xe3, 0x51, 0xa9, 0x99,
	0xbd, 0xbf, 0x80, 0xfe, 0x7f, 0xaa, 0x60, 0x8a, 0x52, 0xfb, 0x62, 0x98, 0xe2, 0xcf, 0xa0, 0x7d,
	0x2a, 0x0a, 0xa6, 0x7a, 0x0d, 0x7b, 0xeb, 0x24, 0xda, 0x99, 0x1b, 0x63, 0xbb, 0x0b, 0xb8, 0x0f,
	0x96, 0xec, 0x8e, 0xb2, 0x51, 0xcf, 0x0d, 0xa5, 0x9d, 0xab, 0xcd, 0xbd, 0xbb, 0x80, 0x1f, 0x14,
	0xcd, 0xdf, 0x50, 0x33, 0xc4, 0xac, 0x15, 0x4b, 0x65, 0x8b, 0x7a, 0xd8, 0x79, 0x36, 0x9e, 0xb0,
	0x69, 0x77, 0x01, 0xff, 0xbc, 0x6c, 0xf5, 0xb5, 0xf9, 0x1e, 0x40, 0xcb, 0xcd, 0x5f, 0x06, 0x14,
	0x57, 0x0e, 0x78, 0x2b, 0xd7, 0xb1, 0xf6, 0xca, 0x4b, 0xf9, 0x52, 0xb5, 0x29, 0x19, 0xb9, 0x53,
	0x24, 0x44, 0x73, 0x6e, 0xcc, 0x23, 0x68, 0x36, 0x62, 0xdd, 0x85, 0xfe, 0x8f, 0x15, 0xd8, 0x2c,
	0xbe, 0xd4, 0xc8, 0xd9, 0x46, 0x3c, 0x43, 0xe3, 0x23, 0xb0, 0x4e, 0x49, 0x1c, 0xea, 0xf7, 0xcd,
	0xab, 0x4e, 0x9a, 0xf3, 0x1a, 0x7e, 0x04, 0x30, 0x0b, 0x08, 0xbe, 0x55, 0x7e, 0xd3, 0xb9, 0x46,
	0xa8, 0xf0, 0xd3, 0x2b, 0x61, 0xee, 0x96, 0x45, 0x48, 0x9c, 0x7e, 0x8e, 0x7a, 0x9b, 0x14, 0xbf,
	0x21, 0xde, 0xcb, 0xef, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x59, 0x1c, 0x5c, 0xab, 0x18,
	0x00, 0x00,
}
