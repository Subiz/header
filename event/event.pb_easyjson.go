// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package event

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	content "github.com/subiz/header/content"
	conversation "github.com/subiz/header/conversation"
	notibox "github.com/subiz/header/notibox"
	payment "github.com/subiz/header/payment"
	user "github.com/subiz/header/user"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson524579e4DecodeGithubComSubizHeaderEvent(in *jlexer.Lexer, out *publisherClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent(out *jwriter.Writer, in publisherClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v publisherClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v publisherClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *publisherClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *publisherClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent1(in *jlexer.Lexer, out *eventMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent1(out *jwriter.Writer, in eventMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent1(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent2(in *jlexer.Lexer, out *conversationEventReaderClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent2(out *jwriter.Writer, in conversationEventReaderClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v conversationEventReaderClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v conversationEventReaderClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *conversationEventReaderClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *conversationEventReaderClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent2(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent3(in *jlexer.Lexer, out *UserEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(RawEvent)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent3(out *jwriter.Writer, in UserEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent3(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderUser(in *jlexer.Lexer, out *user.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*user.Trace, 0, 8)
					} else {
						out.Traces = []*user.Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *user.Trace
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(user.Trace)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser1(in, &*v1)
					}
					out.Traces = append(out.Traces, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_ban":
			if in.IsNull() {
				in.Skip()
				out.IsBan = nil
			} else {
				if out.IsBan == nil {
					out.IsBan = new(bool)
				}
				*out.IsBan = bool(in.Bool())
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*user.AttributeData, 0, 8)
					} else {
						out.Attributes = []*user.AttributeData{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *user.AttributeData
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(user.AttributeData)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser2(in, &*v2)
					}
					out.Attributes = append(out.Attributes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "segments":
			if in.IsNull() {
				in.Skip()
				out.Segments = nil
			} else {
				in.Delim('[')
				if out.Segments == nil {
					if !in.IsDelim(']') {
						out.Segments = make([]string, 0, 4)
					} else {
						out.Segments = []string{}
					}
				} else {
					out.Segments = (out.Segments)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Segments = append(out.Segments, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subiz_id":
			if in.IsNull() {
				in.Skip()
				out.SubizId = nil
			} else {
				if out.SubizId == nil {
					out.SubizId = new(string)
				}
				*out.SubizId = string(in.String())
			}
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Aliases = append(out.Aliases, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "par":
			if in.IsNull() {
				in.Skip()
				out.Par = nil
			} else {
				if out.Par == nil {
					out.Par = new(int32)
				}
				*out.Par = int32(in.Int32())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "modified_week":
			if in.IsNull() {
				in.Skip()
				out.ModifiedWeek = nil
			} else {
				if out.ModifiedWeek == nil {
					out.ModifiedWeek = new(int32)
				}
				*out.ModifiedWeek = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser(out *jwriter.Writer, in user.User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Traces {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser1(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsBan != nil {
		const prefix string = ",\"is_ban\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsBan))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Attributes {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser2(out, *v8)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Segments) != 0 {
		const prefix string = ",\"segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Segments {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.SubizId != nil {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubizId))
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Aliases {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Par != nil {
		const prefix string = ",\"par\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Par))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.ModifiedWeek != nil {
		const prefix string = ",\"modified_week\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ModifiedWeek))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser2(in *jlexer.Lexer, out *user.AttributeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "number":
			if in.IsNull() {
				in.Skip()
				out.Number = nil
			} else {
				if out.Number == nil {
					out.Number = new(float64)
				}
				*out.Number = float64(in.Float64())
			}
		case "boolean":
			if in.IsNull() {
				in.Skip()
				out.Boolean = nil
			} else {
				if out.Boolean == nil {
					out.Boolean = new(bool)
				}
				*out.Boolean = bool(in.Bool())
			}
		case "datetime":
			if in.IsNull() {
				in.Skip()
				out.Datetime = nil
			} else {
				if out.Datetime == nil {
					out.Datetime = new(string)
				}
				*out.Datetime = string(in.String())
			}
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]string, 0, 4)
					} else {
						out.List = []string{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.List = append(out.List, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "setter":
			if in.IsNull() {
				in.Skip()
				out.Setter = nil
			} else {
				if out.Setter == nil {
					out.Setter = new(string)
				}
				*out.Setter = string(in.String())
			}
		case "setter_type":
			if in.IsNull() {
				in.Skip()
				out.SetterType = nil
			} else {
				if out.SetterType == nil {
					out.SetterType = new(string)
				}
				*out.SetterType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser2(out *jwriter.Writer, in user.AttributeData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Number != nil {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Number))
	}
	if in.Boolean != nil {
		const prefix string = ",\"boolean\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Boolean))
	}
	if in.Datetime != nil {
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Datetime))
	}
	if len(in.List) != 0 {
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.List {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.Setter != nil {
		const prefix string = ",\"setter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Setter))
	}
	if in.SetterType != nil {
		const prefix string = ",\"setter_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SetterType))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser1(in *jlexer.Lexer, out *user.Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			if in.IsNull() {
				in.Skip()
				out.EventId = nil
			} else {
				if out.EventId == nil {
					out.EventId = new(string)
				}
				*out.EventId = string(in.String())
			}
		case "ip":
			if in.IsNull() {
				in.Skip()
				out.Ip = nil
			} else {
				if out.Ip == nil {
					out.Ip = new(string)
				}
				*out.Ip = string(in.String())
			}
		case "location_id":
			if in.IsNull() {
				in.Skip()
				out.LocationId = nil
			} else {
				if out.LocationId == nil {
					out.LocationId = new(int32)
				}
				*out.LocationId = int32(in.Int32())
			}
		case "city_name":
			if in.IsNull() {
				in.Skip()
				out.CityName = nil
			} else {
				if out.CityName == nil {
					out.CityName = new(string)
				}
				*out.CityName = string(in.String())
			}
		case "country_name":
			if in.IsNull() {
				in.Skip()
				out.CountryName = nil
			} else {
				if out.CountryName == nil {
					out.CountryName = new(string)
				}
				*out.CountryName = string(in.String())
			}
		case "continent_code":
			if in.IsNull() {
				in.Skip()
				out.ContinentCode = nil
			} else {
				if out.ContinentCode == nil {
					out.ContinentCode = new(string)
				}
				*out.ContinentCode = string(in.String())
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float32)
				}
				*out.Latitude = float32(in.Float32())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float32)
				}
				*out.Longitude = float32(in.Float32())
			}
		case "postal_code":
			if in.IsNull() {
				in.Skip()
				out.PostalCode = nil
			} else {
				if out.PostalCode == nil {
					out.PostalCode = new(string)
				}
				*out.PostalCode = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "isp":
			if in.IsNull() {
				in.Skip()
				out.Isp = nil
			} else {
				if out.Isp == nil {
					out.Isp = new(string)
				}
				*out.Isp = string(in.String())
			}
		case "continent_name":
			if in.IsNull() {
				in.Skip()
				out.ContinentName = nil
			} else {
				if out.ContinentName == nil {
					out.ContinentName = new(string)
				}
				*out.ContinentName = string(in.String())
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "platform":
			if in.IsNull() {
				in.Skip()
				out.Platform = nil
			} else {
				if out.Platform == nil {
					out.Platform = new(string)
				}
				*out.Platform = string(in.String())
			}
		case "device_type":
			if in.IsNull() {
				in.Skip()
				out.DeviceType = nil
			} else {
				if out.DeviceType == nil {
					out.DeviceType = new(string)
				}
				*out.DeviceType = string(in.String())
			}
		case "browser_name":
			if in.IsNull() {
				in.Skip()
				out.BrowserName = nil
			} else {
				if out.BrowserName == nil {
					out.BrowserName = new(string)
				}
				*out.BrowserName = string(in.String())
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(string)
				}
				*out.Language = string(in.String())
			}
		case "user_agent":
			if in.IsNull() {
				in.Skip()
				out.UserAgent = nil
			} else {
				if out.UserAgent == nil {
					out.UserAgent = new(string)
				}
				*out.UserAgent = string(in.String())
			}
		case "screen_resolution":
			if in.IsNull() {
				in.Skip()
				out.ScreenResolution = nil
			} else {
				if out.ScreenResolution == nil {
					out.ScreenResolution = new(string)
				}
				*out.ScreenResolution = string(in.String())
			}
		case "ga_client_id":
			if in.IsNull() {
				in.Skip()
				out.GaClientId = nil
			} else {
				if out.GaClientId == nil {
					out.GaClientId = new(string)
				}
				*out.GaClientId = string(in.String())
			}
		case "ga_tracking_id":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingId = nil
			} else {
				if out.GaTrackingId == nil {
					out.GaTrackingId = new(string)
				}
				*out.GaTrackingId = string(in.String())
			}
		case "ads_netword":
			if in.IsNull() {
				in.Skip()
				out.AdsNetword = nil
			} else {
				if out.AdsNetword == nil {
					out.AdsNetword = new(string)
				}
				*out.AdsNetword = string(in.String())
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]*user.Campaign, 0, 8)
					} else {
						out.Campaigns = []*user.Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *user.Campaign
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(user.Campaign)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser3(in, &*v16)
					}
					out.Campaigns = append(out.Campaigns, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "tracked":
			if in.IsNull() {
				in.Skip()
				out.Tracked = nil
			} else {
				if out.Tracked == nil {
					out.Tracked = new(int64)
				}
				*out.Tracked = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser1(out *jwriter.Writer, in user.Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EventId != nil {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventId))
	}
	if in.Ip != nil {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Ip))
	}
	if in.LocationId != nil {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.LocationId))
	}
	if in.CityName != nil {
		const prefix string = ",\"city_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CityName))
	}
	if in.CountryName != nil {
		const prefix string = ",\"country_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryName))
	}
	if in.ContinentCode != nil {
		const prefix string = ",\"continent_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContinentCode))
	}
	if in.Latitude != nil {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Latitude))
	}
	if in.Longitude != nil {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Longitude))
	}
	if in.PostalCode != nil {
		const prefix string = ",\"postal_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PostalCode))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Isp != nil {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Isp))
	}
	if in.ContinentName != nil {
		const prefix string = ",\"continent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContinentName))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.Platform != nil {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Platform))
	}
	if in.DeviceType != nil {
		const prefix string = ",\"device_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DeviceType))
	}
	if in.BrowserName != nil {
		const prefix string = ",\"browser_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BrowserName))
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Language))
	}
	if in.UserAgent != nil {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserAgent))
	}
	if in.ScreenResolution != nil {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ScreenResolution))
	}
	if in.GaClientId != nil {
		const prefix string = ",\"ga_client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GaClientId))
	}
	if in.GaTrackingId != nil {
		const prefix string = ",\"ga_tracking_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GaTrackingId))
	}
	if in.AdsNetword != nil {
		const prefix string = ",\"ads_netword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AdsNetword))
	}
	if len(in.Campaigns) != 0 {
		const prefix string = ",\"campaigns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Campaigns {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser3(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Tracked != nil {
		const prefix string = ",\"tracked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Tracked))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser3(in *jlexer.Lexer, out *user.Campaign) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(string)
				}
				*out.Source = string(in.String())
			}
		case "medium":
			if in.IsNull() {
				in.Skip()
				out.Medium = nil
			} else {
				if out.Medium == nil {
					out.Medium = new(string)
				}
				*out.Medium = string(in.String())
			}
		case "term":
			if in.IsNull() {
				in.Skip()
				out.Term = nil
			} else {
				if out.Term == nil {
					out.Term = new(string)
				}
				*out.Term = string(in.String())
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(string)
				}
				*out.Content = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser3(out *jwriter.Writer, in user.Campaign) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Source != nil {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Source))
	}
	if in.Medium != nil {
		const prefix string = ",\"medium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Medium))
	}
	if in.Term != nil {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Term))
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Content))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent4(in *jlexer.Lexer, out *UnsubscribeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			out.Topic = string(in.String())
		case "sub_id":
			out.SubId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent4(out *jwriter.Writer, in UnsubscribeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.SubId != "" {
		const prefix string = ",\"sub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnsubscribeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnsubscribeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnsubscribeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnsubscribeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent4(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent5(in *jlexer.Lexer, out *SubscriptionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "status":
			out.Status = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent5(out *jwriter.Writer, in SubscriptionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Status {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent5(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent6(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			out.Topic = string(in.String())
		case "sub_id":
			out.SubId = string(in.String())
		case "target_topic":
			out.TargetTopic = string(in.String())
		case "target_key":
			out.TargetKey = string(in.String())
		case "ttls":
			out.Ttls = int64(in.Int64())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "target_partition":
			out.TargetPartition = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent6(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.SubId != "" {
		const prefix string = ",\"sub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubId))
	}
	if in.TargetTopic != "" {
		const prefix string = ",\"target_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetTopic))
	}
	if in.TargetKey != "" {
		const prefix string = ",\"target_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetKey))
	}
	if in.Ttls != 0 {
		const prefix string = ",\"ttls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ttls))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.TargetPartition != 0 {
		const prefix string = ",\"target_partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TargetPartition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent6(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent7(in *jlexer.Lexer, out *RawEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]*RawEvent, 0, 8)
					} else {
						out.Events = []*RawEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *RawEvent
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(RawEvent)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Events = append(out.Events, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		case "anchor":
			out.Anchor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent7(out *jwriter.Writer, in RawEvents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Events {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent7(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEventRawEvent(in *jlexer.Lexer, out *RawEvent_Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(account.Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(account.Agent)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(conversation.Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "conversation":
			if in.IsNull() {
				in.Skip()
				out.Conversation = nil
			} else {
				if out.Conversation == nil {
					out.Conversation = new(conversation.Conversation)
				}
				(*out.Conversation).UnmarshalEasyJSON(in)
			}
		case "postback":
			if in.IsNull() {
				in.Skip()
				out.Postback = nil
			} else {
				if out.Postback == nil {
					out.Postback = new(conversation.Postback)
				}
				(*out.Postback).UnmarshalEasyJSON(in)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(content.Content)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(user.Topic)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser4(in, &*out.Topic)
			}
		case "presence":
			if in.IsNull() {
				in.Skip()
				out.Presence = nil
			} else {
				if out.Presence == nil {
					out.Presence = new(user.Presence)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser5(in, &*out.Presence)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		case "unread_topic":
			if in.IsNull() {
				in.Skip()
				out.UnreadTopic = nil
			} else {
				if out.UnreadTopic == nil {
					out.UnreadTopic = new(user.UnreadTopic)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser6(in, &*out.UnreadTopic)
			}
		case "my_user":
			if in.IsNull() {
				in.Skip()
				out.MyUser = nil
			} else {
				if out.MyUser == nil {
					out.MyUser = new(user.MyUser)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser7(in, &*out.MyUser)
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(notibox.Notification)
				}
				easyjson524579e4DecodeGithubComSubizHeaderNotibox(in, &*out.Notification)
			}
		case "notibox":
			if in.IsNull() {
				in.Skip()
				out.Notibox = nil
			} else {
				if out.Notibox == nil {
					out.Notibox = new(notibox.Box)
				}
				easyjson524579e4DecodeGithubComSubizHeaderNotibox1(in, &*out.Notibox)
			}
		case "agent_perm":
			if in.IsNull() {
				in.Skip()
				out.AgentPerm = nil
			} else {
				if out.AgentPerm == nil {
					out.AgentPerm = new(account.AgentPerm)
				}
				(*out.AgentPerm).UnmarshalEasyJSON(in)
			}
		case "group_member":
			if in.IsNull() {
				in.Skip()
				out.GroupMember = nil
			} else {
				if out.GroupMember == nil {
					out.GroupMember = new(account.GroupMember)
				}
				(*out.GroupMember).UnmarshalEasyJSON(in)
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(account.AgentGroup)
				}
				(*out.Group).UnmarshalEasyJSON(in)
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(payment.Limit)
				}
				easyjson524579e4DecodeGithubComSubizHeaderPayment(in, &*out.Limit)
			}
		case "user_attribute":
			if in.IsNull() {
				in.Skip()
				out.UserAttribute = nil
			} else {
				if out.UserAttribute == nil {
					out.UserAttribute = new(user.AttributeData)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser2(in, &*out.UserAttribute)
			}
		case "alias":
			if in.IsNull() {
				in.Skip()
				out.Alias = nil
			} else {
				if out.Alias == nil {
					out.Alias = new(user.Alias)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser8(in, &*out.Alias)
			}
		case "note":
			if in.IsNull() {
				in.Skip()
				out.Note = nil
			} else {
				if out.Note == nil {
					out.Note = new(user.Note)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser9(in, &*out.Note)
			}
		case "ticket":
			if in.IsNull() {
				in.Skip()
				out.Ticket = nil
			} else {
				if out.Ticket == nil {
					out.Ticket = new(conversation.Ticket)
				}
				(*out.Ticket).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEventRawEvent(out *jwriter.Writer, in RawEvent_Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Agent != nil {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Agent).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Conversation != nil {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Conversation).MarshalEasyJSON(out)
	}
	if in.Postback != nil {
		const prefix string = ",\"postback\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Postback).MarshalEasyJSON(out)
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Content).MarshalEasyJSON(out)
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser4(out, *in.Topic)
	}
	if in.Presence != nil {
		const prefix string = ",\"presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser5(out, *in.Presence)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	if in.UnreadTopic != nil {
		const prefix string = ",\"unread_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser6(out, *in.UnreadTopic)
	}
	if in.MyUser != nil {
		const prefix string = ",\"my_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser7(out, *in.MyUser)
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderNotibox(out, *in.Notification)
	}
	if in.Notibox != nil {
		const prefix string = ",\"notibox\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderNotibox1(out, *in.Notibox)
	}
	if in.AgentPerm != nil {
		const prefix string = ",\"agent_perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AgentPerm).MarshalEasyJSON(out)
	}
	if in.GroupMember != nil {
		const prefix string = ",\"group_member\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GroupMember).MarshalEasyJSON(out)
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Group).MarshalEasyJSON(out)
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderPayment(out, *in.Limit)
	}
	if in.UserAttribute != nil {
		const prefix string = ",\"user_attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser2(out, *in.UserAttribute)
	}
	if in.Alias != nil {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser8(out, *in.Alias)
	}
	if in.Note != nil {
		const prefix string = ",\"note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser9(out, *in.Note)
	}
	if in.Ticket != nil {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ticket).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvent_Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEventRawEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvent_Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEventRawEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvent_Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEventRawEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvent_Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEventRawEvent(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderUser9(in *jlexer.Lexer, out *user.Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "creator_id":
			if in.IsNull() {
				in.Skip()
				out.CreatorId = nil
			} else {
				if out.CreatorId == nil {
					out.CreatorId = new(string)
				}
				*out.CreatorId = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "creator_type":
			if in.IsNull() {
				in.Skip()
				out.CreatorType = nil
			} else {
				if out.CreatorType == nil {
					out.CreatorType = new(string)
				}
				*out.CreatorType = string(in.String())
			}
		case "target_id":
			if in.IsNull() {
				in.Skip()
				out.TargetId = nil
			} else {
				if out.TargetId == nil {
					out.TargetId = new(string)
				}
				*out.TargetId = string(in.String())
			}
		case "target_type":
			if in.IsNull() {
				in.Skip()
				out.TargetType = nil
			} else {
				if out.TargetType == nil {
					out.TargetType = new(string)
				}
				*out.TargetType = string(in.String())
			}
		case "link_id":
			if in.IsNull() {
				in.Skip()
				out.LinkId = nil
			} else {
				if out.LinkId == nil {
					out.LinkId = new(string)
				}
				*out.LinkId = string(in.String())
			}
		case "link_type":
			if in.IsNull() {
				in.Skip()
				out.LinkType = nil
			} else {
				if out.LinkType == nil {
					out.LinkType = new(string)
				}
				*out.LinkType = string(in.String())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]*user.NoteLink, 0, 8)
					} else {
						out.Links = []*user.NoteLink{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *user.NoteLink
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(user.NoteLink)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser10(in, &*v22)
					}
					out.Links = append(out.Links, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser9(out *jwriter.Writer, in user.Note) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.CreatorId != nil {
		const prefix string = ",\"creator_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatorId))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.CreatorType != nil {
		const prefix string = ",\"creator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatorType))
	}
	if in.TargetId != nil {
		const prefix string = ",\"target_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetId))
	}
	if in.TargetType != nil {
		const prefix string = ",\"target_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TargetType))
	}
	if in.LinkId != nil {
		const prefix string = ",\"link_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LinkId))
	}
	if in.LinkType != nil {
		const prefix string = ",\"link_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LinkType))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Links {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser10(out, *v24)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser10(in *jlexer.Lexer, out *user.NoteLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser10(out *jwriter.Writer, in user.NoteLink) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser8(in *jlexer.Lexer, out *user.Alias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "alias":
			if in.IsNull() {
				in.Skip()
				out.Alias = nil
			} else {
				if out.Alias == nil {
					out.Alias = new(string)
				}
				*out.Alias = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser8(out *jwriter.Writer, in user.Alias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Alias != nil {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Alias))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderPayment(in *jlexer.Lexer, out *payment.Limit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "max_automations":
			if in.IsNull() {
				in.Skip()
				out.MaxAutomations = nil
			} else {
				if out.MaxAutomations == nil {
					out.MaxAutomations = new(uint32)
				}
				*out.MaxAutomations = uint32(in.Uint32())
			}
		case "max_segments":
			if in.IsNull() {
				in.Skip()
				out.MaxSegments = nil
			} else {
				if out.MaxSegments == nil {
					out.MaxSegments = new(uint32)
				}
				*out.MaxSegments = uint32(in.Uint32())
			}
		case "max_agents":
			if in.IsNull() {
				in.Skip()
				out.MaxAgents = nil
			} else {
				if out.MaxAgents == nil {
					out.MaxAgents = new(uint32)
				}
				*out.MaxAgents = uint32(in.Uint32())
			}
		case "can_buy_agent":
			if in.IsNull() {
				in.Skip()
				out.CanBuyAgent = nil
			} else {
				if out.CanBuyAgent == nil {
					out.CanBuyAgent = new(bool)
				}
				*out.CanBuyAgent = bool(in.Bool())
			}
		case "automation_webhook_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationWebhookQuota = nil
			} else {
				if out.AutomationWebhookQuota == nil {
					out.AutomationWebhookQuota = new(uint32)
				}
				*out.AutomationWebhookQuota = uint32(in.Uint32())
			}
		case "automation_email_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationEmailQuota = nil
			} else {
				if out.AutomationEmailQuota == nil {
					out.AutomationEmailQuota = new(uint32)
				}
				*out.AutomationEmailQuota = uint32(in.Uint32())
			}
		case "automation_message_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationMessageQuota = nil
			} else {
				if out.AutomationMessageQuota == nil {
					out.AutomationMessageQuota = new(uint32)
				}
				*out.AutomationMessageQuota = uint32(in.Uint32())
			}
		case "max_rules":
			if in.IsNull() {
				in.Skip()
				out.MaxRules = nil
			} else {
				if out.MaxRules == nil {
					out.MaxRules = new(uint32)
				}
				*out.MaxRules = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderPayment(out *jwriter.Writer, in payment.Limit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.MaxAutomations != nil {
		const prefix string = ",\"max_automations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAutomations))
	}
	if in.MaxSegments != nil {
		const prefix string = ",\"max_segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxSegments))
	}
	if in.MaxAgents != nil {
		const prefix string = ",\"max_agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAgents))
	}
	if in.CanBuyAgent != nil {
		const prefix string = ",\"can_buy_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanBuyAgent))
	}
	if in.AutomationWebhookQuota != nil {
		const prefix string = ",\"automation_webhook_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationWebhookQuota))
	}
	if in.AutomationEmailQuota != nil {
		const prefix string = ",\"automation_email_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationEmailQuota))
	}
	if in.AutomationMessageQuota != nil {
		const prefix string = ",\"automation_message_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationMessageQuota))
	}
	if in.MaxRules != nil {
		const prefix string = ",\"max_rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxRules))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderNotibox1(in *jlexer.Lexer, out *notibox.Box) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "new_count":
			if in.IsNull() {
				in.Skip()
				out.NewCount = nil
			} else {
				if out.NewCount == nil {
					out.NewCount = new(int64)
				}
				*out.NewCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderNotibox1(out *jwriter.Writer, in notibox.Box) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.NewCount != nil {
		const prefix string = ",\"new_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.NewCount))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderNotibox(in *jlexer.Lexer, out *notibox.Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(string)
				}
				*out.Data = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				if out.Read == nil {
					out.Read = new(int64)
				}
				*out.Read = int64(in.Int64())
			}
		case "view":
			if in.IsNull() {
				in.Skip()
				out.View = nil
			} else {
				if out.View == nil {
					out.View = new(bool)
				}
				*out.View = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderNotibox(out *jwriter.Writer, in notibox.Notification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Data))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Read != nil {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Read))
	}
	if in.View != nil {
		const prefix string = ",\"view\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.View))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser7(in *jlexer.Lexer, out *user.MyUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(int32)
				}
				*out.Unread = int32(in.Int32())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser7(out *jwriter.Writer, in user.MyUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Unread))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser6(in *jlexer.Lexer, out *user.UnreadTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(int32)
				}
				*out.Unread = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser6(out *jwriter.Writer, in user.UnreadTopic) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Unread))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser5(in *jlexer.Lexer, out *user.Presence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "pinged":
			if in.IsNull() {
				in.Skip()
				out.Pinged = nil
			} else {
				if out.Pinged == nil {
					out.Pinged = new(int64)
				}
				*out.Pinged = int64(in.Int64())
			}
		case "pinged_minute":
			if in.IsNull() {
				in.Skip()
				out.PingedMinute = nil
			} else {
				if out.PingedMinute == nil {
					out.PingedMinute = new(int64)
				}
				*out.PingedMinute = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser5(out *jwriter.Writer, in user.Presence) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.Pinged != nil {
		const prefix string = ",\"pinged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Pinged))
	}
	if in.PingedMinute != nil {
		const prefix string = ",\"pinged_minute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PingedMinute))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser4(in *jlexer.Lexer, out *user.Topic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "unread":
			if in.IsNull() {
				in.Skip()
				out.Unread = nil
			} else {
				if out.Unread == nil {
					out.Unread = new(int32)
				}
				*out.Unread = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser4(out *jwriter.Writer, in user.Topic) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Unread != nil {
		const prefix string = ",\"unread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Unread))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent8(in *jlexer.Lexer, out *RawEventCreatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "subs":
			if in.IsNull() {
				in.Skip()
				out.Subs = nil
			} else {
				in.Delim('[')
				if out.Subs == nil {
					if !in.IsDelim(']') {
						out.Subs = make([]string, 0, 4)
					} else {
						out.Subs = []string{}
					}
				} else {
					out.Subs = (out.Subs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Subs = append(out.Subs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "target_topic":
			out.TargetTopic = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "target_key":
			out.TargetKey = string(in.String())
		case "payloads":
			if in.IsNull() {
				in.Skip()
				out.Payloads = nil
			} else {
				in.Delim('[')
				if out.Payloads == nil {
					if !in.IsDelim(']') {
						out.Payloads = make([]string, 0, 4)
					} else {
						out.Payloads = []string{}
					}
				} else {
					out.Payloads = (out.Payloads)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Payloads = append(out.Payloads, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topic":
			out.Topic = string(in.String())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "sub":
			out.Sub = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent8(out *jwriter.Writer, in RawEventCreatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Subs) != 0 {
		const prefix string = ",\"subs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Subs {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	if in.TargetTopic != "" {
		const prefix string = ",\"target_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetTopic))
	}
	if in.Payload != "" {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	if in.TargetKey != "" {
		const prefix string = ",\"target_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetKey))
	}
	if len(in.Payloads) != 0 {
		const prefix string = ",\"payloads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Payloads {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.Sub != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sub))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEventCreatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEventCreatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEventCreatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEventCreatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent8(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent9(in *jlexer.Lexer, out *RawEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Topics = append(out.Topics, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "by":
			if in.IsNull() {
				in.Skip()
				out.By = nil
			} else {
				if out.By == nil {
					out.By = new(By)
				}
				(*out.By).UnmarshalEasyJSON(in)
			}
		case "object":
			out.Object = string(in.String())
		case "conversation_id":
			out.ConversationId = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(RawEvent_Data)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent9(out *jwriter.Writer, in RawEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Topics {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.By != nil {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.By).MarshalEasyJSON(out)
	}
	if in.Object != "" {
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Object))
	}
	if in.ConversationId != "" {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationId))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent9(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent10(in *jlexer.Lexer, out *PubSubMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.Sub = nil
			} else {
				if out.Sub == nil {
					out.Sub = new(Subscription)
				}
				(*out.Sub).UnmarshalEasyJSON(in)
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent10(out *jwriter.Writer, in PubSubMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Sub != nil {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sub).MarshalEasyJSON(out)
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PubSubMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PubSubMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PubSubMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PubSubMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent10(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent11(in *jlexer.Lexer, out *ListEventsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "anchor":
			out.Anchor = string(in.String())
		case "limit":
			out.Limit = int32(in.Int32())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent11(out *jwriter.Writer, in ListEventsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Query != "" {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Limit))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListEventsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListEventsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent11(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent12(in *jlexer.Lexer, out *By) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(common.Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "client_id":
			out.ClientId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent12(out *jwriter.Writer, in By) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Device).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v By) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v By) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *By) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *By) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent12(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderEvent13(in *jlexer.Lexer, out *AutomationEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "automation":
			if in.IsNull() {
				in.Skip()
				out.Automation = nil
			} else {
				if out.Automation == nil {
					out.Automation = new(user.Automation)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser11(in, &*out.Automation)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(RawEvent)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderEvent13(out *jwriter.Writer, in AutomationEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Automation != nil {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser11(out, *in.Automation)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutomationEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGithubComSubizHeaderEvent13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutomationEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGithubComSubizHeaderEvent13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutomationEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGithubComSubizHeaderEvent13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutomationEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGithubComSubizHeaderEvent13(l, v)
}
func easyjson524579e4DecodeGithubComSubizHeaderUser11(in *jlexer.Lexer, out *user.Automation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(string)
				}
				*out.Channel = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*user.Condition, 0, 8)
					} else {
						out.Conditions = []*user.Condition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *user.Condition
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(user.Condition)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser12(in, &*v37)
					}
					out.Conditions = append(out.Conditions, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "condition":
			if in.IsNull() {
				in.Skip()
				out.Condition = nil
			} else {
				if out.Condition == nil {
					out.Condition = new(user.SCondition)
				}
				easyjson524579e4DecodeGithubComSubizHeaderUser13(in, &*out.Condition)
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "action_type":
			if in.IsNull() {
				in.Skip()
				out.ActionType = nil
			} else {
				if out.ActionType == nil {
					out.ActionType = new(string)
				}
				*out.ActionType = string(in.String())
			}
		case "action_data":
			if in.IsNull() {
				in.Skip()
				out.ActionData = nil
			} else {
				if out.ActionData == nil {
					out.ActionData = new(string)
				}
				*out.ActionData = string(in.String())
			}
		case "scope":
			if in.IsNull() {
				in.Skip()
				out.Scope = nil
			} else {
				if out.Scope == nil {
					out.Scope = new(string)
				}
				*out.Scope = string(in.String())
			}
		case "cross_channel":
			if in.IsNull() {
				in.Skip()
				out.CrossChannel = nil
			} else {
				if out.CrossChannel == nil {
					out.CrossChannel = new(bool)
				}
				*out.CrossChannel = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(string)
				}
				*out.Metadata = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser11(out *jwriter.Writer, in user.Automation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Channel))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Conditions {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser12(out, *v39)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Condition != nil {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson524579e4EncodeGithubComSubizHeaderUser13(out, *in.Condition)
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.ActionType != nil {
		const prefix string = ",\"action_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ActionType))
	}
	if in.ActionData != nil {
		const prefix string = ",\"action_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ActionData))
	}
	if in.Scope != nil {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Scope))
	}
	if in.CrossChannel != nil {
		const prefix string = ",\"cross_channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CrossChannel))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Metadata))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser13(in *jlexer.Lexer, out *user.SCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(string)
				}
				*out.Join = string(in.String())
			}
		case "event_type_time":
			if in.IsNull() {
				in.Skip()
				out.EventTypeTime = nil
			} else {
				if out.EventTypeTime == nil {
					out.EventTypeTime = new(string)
				}
				*out.EventTypeTime = string(in.String())
			}
		case "event_type":
			if in.IsNull() {
				in.Skip()
				out.EventType = nil
			} else {
				if out.EventType == nil {
					out.EventType = new(string)
				}
				*out.EventType = string(in.String())
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*user.SCondition, 0, 8)
					} else {
						out.Conditions = []*user.SCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *user.SCondition
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(user.SCondition)
						}
						easyjson524579e4DecodeGithubComSubizHeaderUser13(in, &*v40)
					}
					out.Conditions = append(out.Conditions, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "event_existed":
			if in.IsNull() {
				in.Skip()
				out.EventExisted = nil
			} else {
				if out.EventExisted == nil {
					out.EventExisted = new(bool)
				}
				*out.EventExisted = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser13(out *jwriter.Writer, in user.SCondition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Operator != nil {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Operator))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Join))
	}
	if in.EventTypeTime != nil {
		const prefix string = ",\"event_type_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventTypeTime))
	}
	if in.EventType != nil {
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EventType))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Conditions {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					easyjson524579e4EncodeGithubComSubizHeaderUser13(out, *v42)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Priority))
	}
	if in.EventExisted != nil {
		const prefix string = ",\"event_existed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EventExisted))
	}
	out.RawByte('}')
}
func easyjson524579e4DecodeGithubComSubizHeaderUser12(in *jlexer.Lexer, out *user.Condition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(string)
				}
				*out.Join = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGithubComSubizHeaderUser12(out *jwriter.Writer, in user.Condition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Join))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Operator != nil {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Operator))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}
