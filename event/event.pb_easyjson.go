// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package event

import (
	json "encoding/json"
	account "git.subiz.net/header/account"
	common "git.subiz.net/header/common"
	content "git.subiz.net/header/content"
	conversation "git.subiz.net/header/conversation"
	notibox "git.subiz.net/header/notibox"
	payment "git.subiz.net/header/payment"
	user "git.subiz.net/header/user"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson524579e4DecodeGitSubizNetHeaderEvent(in *jlexer.Lexer, out *publisherClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent(out *jwriter.Writer, in publisherClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v publisherClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v publisherClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *publisherClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *publisherClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent1(in *jlexer.Lexer, out *eventMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent1(out *jwriter.Writer, in eventMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent1(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent2(in *jlexer.Lexer, out *conversationEventReaderClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent2(out *jwriter.Writer, in conversationEventReaderClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v conversationEventReaderClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v conversationEventReaderClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *conversationEventReaderClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *conversationEventReaderClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent2(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent3(in *jlexer.Lexer, out *UserEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(RawEvent)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent3(out *jwriter.Writer, in UserEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent3(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent4(in *jlexer.Lexer, out *UnsubscribeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			out.Topic = string(in.String())
		case "sub_id":
			out.SubId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent4(out *jwriter.Writer, in UnsubscribeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.SubId != "" {
		const prefix string = ",\"sub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnsubscribeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnsubscribeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnsubscribeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnsubscribeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent4(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent5(in *jlexer.Lexer, out *SubscriptionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "status":
			out.Status = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent5(out *jwriter.Writer, in SubscriptionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Status {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent5(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent6(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "topic":
			out.Topic = string(in.String())
		case "sub_id":
			out.SubId = string(in.String())
		case "target_topic":
			out.TargetTopic = string(in.String())
		case "target_key":
			out.TargetKey = string(in.String())
		case "ttls":
			out.Ttls = int64(in.Int64())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "target_partition":
			out.TargetPartition = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent6(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.SubId != "" {
		const prefix string = ",\"sub_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubId))
	}
	if in.TargetTopic != "" {
		const prefix string = ",\"target_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetTopic))
	}
	if in.TargetKey != "" {
		const prefix string = ",\"target_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetKey))
	}
	if in.Ttls != 0 {
		const prefix string = ",\"ttls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ttls))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.TargetPartition != 0 {
		const prefix string = ",\"target_partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TargetPartition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent6(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent7(in *jlexer.Lexer, out *RawEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]*RawEvent, 0, 8)
					} else {
						out.Events = []*RawEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *RawEvent
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(RawEvent)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		case "anchor":
			out.Anchor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent7(out *jwriter.Writer, in RawEvents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent7(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEventRawEvent(in *jlexer.Lexer, out *RawEvent_Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(account.Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(account.Agent)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(conversation.Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "conversation":
			if in.IsNull() {
				in.Skip()
				out.Conversation = nil
			} else {
				if out.Conversation == nil {
					out.Conversation = new(conversation.Conversation)
				}
				(*out.Conversation).UnmarshalEasyJSON(in)
			}
		case "postback":
			if in.IsNull() {
				in.Skip()
				out.Postback = nil
			} else {
				if out.Postback == nil {
					out.Postback = new(conversation.Postback)
				}
				(*out.Postback).UnmarshalEasyJSON(in)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(content.Content)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(user.Topic)
				}
				(*out.Topic).UnmarshalEasyJSON(in)
			}
		case "presence":
			if in.IsNull() {
				in.Skip()
				out.Presence = nil
			} else {
				if out.Presence == nil {
					out.Presence = new(user.Presence)
				}
				(*out.Presence).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "unread_topic":
			if in.IsNull() {
				in.Skip()
				out.UnreadTopic = nil
			} else {
				if out.UnreadTopic == nil {
					out.UnreadTopic = new(user.UnreadTopic)
				}
				(*out.UnreadTopic).UnmarshalEasyJSON(in)
			}
		case "my_user":
			if in.IsNull() {
				in.Skip()
				out.MyUser = nil
			} else {
				if out.MyUser == nil {
					out.MyUser = new(user.MyUser)
				}
				(*out.MyUser).UnmarshalEasyJSON(in)
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(notibox.Notification)
				}
				(*out.Notification).UnmarshalEasyJSON(in)
			}
		case "notibox":
			if in.IsNull() {
				in.Skip()
				out.Notibox = nil
			} else {
				if out.Notibox == nil {
					out.Notibox = new(notibox.Box)
				}
				(*out.Notibox).UnmarshalEasyJSON(in)
			}
		case "agent_perm":
			if in.IsNull() {
				in.Skip()
				out.AgentPerm = nil
			} else {
				if out.AgentPerm == nil {
					out.AgentPerm = new(account.AgentPerm)
				}
				(*out.AgentPerm).UnmarshalEasyJSON(in)
			}
		case "group_member":
			if in.IsNull() {
				in.Skip()
				out.GroupMember = nil
			} else {
				if out.GroupMember == nil {
					out.GroupMember = new(account.GroupMember)
				}
				(*out.GroupMember).UnmarshalEasyJSON(in)
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(account.AgentGroup)
				}
				(*out.Group).UnmarshalEasyJSON(in)
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(payment.Limit)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "user_attribute":
			if in.IsNull() {
				in.Skip()
				out.UserAttribute = nil
			} else {
				if out.UserAttribute == nil {
					out.UserAttribute = new(user.AttributeData)
				}
				(*out.UserAttribute).UnmarshalEasyJSON(in)
			}
		case "alias":
			if in.IsNull() {
				in.Skip()
				out.Alias = nil
			} else {
				if out.Alias == nil {
					out.Alias = new(user.Alias)
				}
				(*out.Alias).UnmarshalEasyJSON(in)
			}
		case "note":
			if in.IsNull() {
				in.Skip()
				out.Note = nil
			} else {
				if out.Note == nil {
					out.Note = new(user.Note)
				}
				(*out.Note).UnmarshalEasyJSON(in)
			}
		case "ticket":
			if in.IsNull() {
				in.Skip()
				out.Ticket = nil
			} else {
				if out.Ticket == nil {
					out.Ticket = new(conversation.Ticket)
				}
				(*out.Ticket).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEventRawEvent(out *jwriter.Writer, in RawEvent_Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.Agent != nil {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Agent).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Conversation != nil {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Conversation).MarshalEasyJSON(out)
	}
	if in.Postback != nil {
		const prefix string = ",\"postback\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Postback).MarshalEasyJSON(out)
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Content).MarshalEasyJSON(out)
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Topic).MarshalEasyJSON(out)
	}
	if in.Presence != nil {
		const prefix string = ",\"presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Presence).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UnreadTopic != nil {
		const prefix string = ",\"unread_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UnreadTopic).MarshalEasyJSON(out)
	}
	if in.MyUser != nil {
		const prefix string = ",\"my_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MyUser).MarshalEasyJSON(out)
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Notification).MarshalEasyJSON(out)
	}
	if in.Notibox != nil {
		const prefix string = ",\"notibox\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Notibox).MarshalEasyJSON(out)
	}
	if in.AgentPerm != nil {
		const prefix string = ",\"agent_perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AgentPerm).MarshalEasyJSON(out)
	}
	if in.GroupMember != nil {
		const prefix string = ",\"group_member\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GroupMember).MarshalEasyJSON(out)
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Group).MarshalEasyJSON(out)
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.UserAttribute != nil {
		const prefix string = ",\"user_attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UserAttribute).MarshalEasyJSON(out)
	}
	if in.Alias != nil {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Alias).MarshalEasyJSON(out)
	}
	if in.Note != nil {
		const prefix string = ",\"note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Note).MarshalEasyJSON(out)
	}
	if in.Ticket != nil {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ticket).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvent_Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEventRawEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvent_Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEventRawEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvent_Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEventRawEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvent_Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEventRawEvent(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent8(in *jlexer.Lexer, out *RawEventCreatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "subs":
			if in.IsNull() {
				in.Skip()
				out.Subs = nil
			} else {
				in.Delim('[')
				if out.Subs == nil {
					if !in.IsDelim(']') {
						out.Subs = make([]string, 0, 4)
					} else {
						out.Subs = []string{}
					}
				} else {
					out.Subs = (out.Subs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Subs = append(out.Subs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "target_topic":
			out.TargetTopic = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "target_key":
			out.TargetKey = string(in.String())
		case "payloads":
			if in.IsNull() {
				in.Skip()
				out.Payloads = nil
			} else {
				in.Delim('[')
				if out.Payloads == nil {
					if !in.IsDelim(']') {
						out.Payloads = make([]string, 0, 4)
					} else {
						out.Payloads = []string{}
					}
				} else {
					out.Payloads = (out.Payloads)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Payloads = append(out.Payloads, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topic":
			out.Topic = string(in.String())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "sub":
			out.Sub = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent8(out *jwriter.Writer, in RawEventCreatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Subs) != 0 {
		const prefix string = ",\"subs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Subs {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if in.TargetTopic != "" {
		const prefix string = ",\"target_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetTopic))
	}
	if in.Payload != "" {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	if in.TargetKey != "" {
		const prefix string = ",\"target_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TargetKey))
	}
	if len(in.Payloads) != 0 {
		const prefix string = ",\"payloads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Payloads {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.Sub != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sub))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEventCreatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEventCreatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEventCreatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEventCreatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent8(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent9(in *jlexer.Lexer, out *RawEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Topics = append(out.Topics, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "by":
			if in.IsNull() {
				in.Skip()
				out.By = nil
			} else {
				if out.By == nil {
					out.By = new(By)
				}
				(*out.By).UnmarshalEasyJSON(in)
			}
		case "object":
			out.Object = string(in.String())
		case "conversation_id":
			out.ConversationId = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(RawEvent_Data)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent9(out *jwriter.Writer, in RawEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Topics {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.By != nil {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.By).MarshalEasyJSON(out)
	}
	if in.Object != "" {
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Object))
	}
	if in.ConversationId != "" {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationId))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent9(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent10(in *jlexer.Lexer, out *PubSubMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.Sub = nil
			} else {
				if out.Sub == nil {
					out.Sub = new(Subscription)
				}
				(*out.Sub).UnmarshalEasyJSON(in)
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent10(out *jwriter.Writer, in PubSubMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Sub != nil {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sub).MarshalEasyJSON(out)
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PubSubMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PubSubMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PubSubMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PubSubMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent10(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent11(in *jlexer.Lexer, out *ListEventsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "anchor":
			out.Anchor = string(in.String())
		case "limit":
			out.Limit = int32(in.Int32())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent11(out *jwriter.Writer, in ListEventsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Query != "" {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Limit))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListEventsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListEventsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent11(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent12(in *jlexer.Lexer, out *By) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(common.Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "client_id":
			out.ClientId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent12(out *jwriter.Writer, in By) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Device).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v By) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v By) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *By) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *By) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent12(l, v)
}
func easyjson524579e4DecodeGitSubizNetHeaderEvent13(in *jlexer.Lexer, out *AutomationEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "automation":
			if in.IsNull() {
				in.Skip()
				out.Automation = nil
			} else {
				if out.Automation == nil {
					out.Automation = new(user.Automation)
				}
				(*out.Automation).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(RawEvent)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson524579e4EncodeGitSubizNetHeaderEvent13(out *jwriter.Writer, in AutomationEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Automation != nil {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Automation).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutomationEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson524579e4EncodeGitSubizNetHeaderEvent13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutomationEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson524579e4EncodeGitSubizNetHeaderEvent13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutomationEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson524579e4DecodeGitSubizNetHeaderEvent13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutomationEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson524579e4DecodeGitSubizNetHeaderEvent13(l, v)
}
