syntax = "proto3";

package event;

import "bitbucket.org/subiz/header/common/common.proto";
import "bitbucket.org/subiz/header/account/account.proto";
import "bitbucket.org/subiz/header/conversation/conversation.proto";
import "bitbucket.org/subiz/header/content/content.proto";
import "bitbucket.org/subiz/header/user/user.proto";

message RawEventCreatedPayload {
	common.Context ctx = 1;
	string sub_id = 3;
	string topic = 4;
	string payload = 5; //json format
}

message UnsubscribeMessage {
	string topic = 3;
	string sub_id = 4;
}

enum Event {
	Sub = 0;
	//Out_EventCreated = 0;
	RawEventCreated = 3;  //
	Subscribe = 4; // subscription
	SubscribeReply = 6;
	Unsubscribe = 5; // subscription
	UnsubscribeReply = 7;
}

message RawEvents {
	common.Context ctx = 1;
	repeated RawEvent events = 4;
	int64 total = 2;
	string anchor = 3;
}

message By {
	common.Device device = 2;
	string id = 3;
	string client_id = 4;
}

message RawEvent {
	reserved 10, 12, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42;
	reserved "channel_id", "by_user_id", "state", "message_to", "page_url", "page_title", "browser_language", "device_type", "user_id", "joiner_id", "joiner_type", "leaver_id", "attachments", "text", "format", "deliverieds", "fields", "computed", "account", "agent", "message", "conversation", "postback", "content", "topic";
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;
	int64 created = 8;
	string type = 9; // eventtype
	repeated string topics = 11;

	By by = 50;
	string object = 13;
	string conversation_id = 15;

	message Data {
		account.Account account = 1;
		account.Agent agent = 2;
		conversation.Message message = 3;
		conversation.Conversation conversation = 4;
		conversation.Postback postback = 5;
		content.Content content = 6;
		user.Topic topic = 7;
		user.Presence presence = 8;
		user.Previewing previewing = 9;
		user.User user = 10;
	}
	Data data = 20;
}

enum Type {
	c = 0;
	conversation_updated = 9;
	message_sent = 10;
	conversation_state_updated = 11;
	//conversation_started = 1;
	conversation_joined = 2;

	//conversation_message = 3;
	conversation_left = 4;
	//conversation_closed = 5;
	conversation_tagged = 6;
	conversation_untagged = 7;

	//conversation_waiting = 8;
	channel_deintegrated = 20;
	channel_integrated = 21;

	message_seen = 30;
	message_acked = 31;
	message_received = 32;
	conversation_member_typing = 33;
	conversation_postbacked = 34;

	conversation_unassigned = 35;
	conversation_assigned = 36;
}

enum SubscriberType {
	user = 0;
	channel = 1;
}

message Subscription { // raweventcreatedpayload
	reserved "target_partition";
	reserved 13;

	common.Context ctx = 1;
	string topic = 3;
	//optional string user_id = 4; // connectorid or userid

	//optional SubscribeScope scope = 5;
	//optional string account_id = 6;
	string sub_id = 7;

	//optional SubscriberType subscriber_type = 8;
	//optional string subscriber_id = 9;
	string target_topic = 10;
	string target_key = 11;
	//optional string target_partition = 13;
	// time to life in seconds
	int64 ttls = 12;

}

enum SubPrefix {
	Webhook = 0;
	Websocket = 1;
}

enum Object {
	none = 0;
	account = 1;
	agent = 2;
	message = 3;
	conversation = 4;
	integration = 30;
	postback = 5;
	content = 6;
	topic = 7;
}

message AllType {
	Object o = 2;
	RawEvent e = 3;
	By b = 4;
	RawEvents es = 5;
	ListEventsRequest ler = 6;
	UserEvent userevent = 7;
}

// for generating swagger data
service MyService {
	rpc Do(AllType) returns (AllType) {}
}

message ListEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	string category = 9;
}

message UserEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	RawEvent event = 5;
}
