syntax = "proto2";

package event;

import "bitbucket.org/subiz/header/common/common.proto";
import "bitbucket.org/subiz/header/lang/lang.proto";
import "bitbucket.org/subiz/header/auth/auth.proto";

import "bitbucket.org/subiz/header/account/account.proto";
import "bitbucket.org/subiz/header/conversation/conversation.proto";

message RawEventCreatedPayload {
	optional common.Context ctx = 1;
	optional string sub_id = 3;
	optional string topic = 4;
	optional string payload = 5; //json format
}

message UnsubscribeMessage {
	optional string topic = 3;
	optional string sub_id = 4;
}

enum EVENT {
	//Out_EventCreated = 0;
	Send_ = 1;
	ApiReply = 2;
	RawEventCreated = 3;  //
	Subscribe = 4; // subscription
	SubscribeReply = 6;
	Unsubscribe = 5; // subscription
	UnsubscribeReply = 7;
}

message RawEvents {
	repeated RawEvent events = 4;
}

message Conversation {
	optional string id = 3;
	optional string channel_id = 4;
}

message RawEvent {
	reserved 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35;
	reserved "state", "message_to", "page_url", "page_title", "browser_language", "device_type", "user_id", "joiner_id", "joiner_type", "leaver_id", "attachments", "text", "format", "deliverieds", "fields", "computed";
	optional common.Context ctx = 1;
	optional string id = 3;
	optional string account_id = 4;
	optional int64 created = 8;
	optional string type = 9;
	//optional string channel_id = 10;
	repeated string topics = 11;
	//---
	optional auth.By by = 12;
	optional string object = 13;
	//optional string conversation_id = 15;
	optional string conversation_id = 20;
	optional string channel_id = 40;

	oneof data {
		account.Account account = 38;
		account.Agent agent = 36;
		conversation.Message message = 37;
		conversation.Conversation conversation = 39;
	};
}

message Reply {
	optional common.Context ctx = 3;
	optional string event_id = 1;
	optional bytes state = 2;

	optional bool err = 10;
	optional string err_description = 12;
	optional lang.T err_code = 13;
	optional int32 err_class = 15;

	optional bytes payload = 7;
}

enum EventType {
	conversation_updated = 9;
	message_sent = 10;
  //conversation_started = 1;
	conversation_joined = 2;

	//conversation_message = 3;
	conversation_left = 4;
	//conversation_closed = 5;
	conversation_tagged = 6;
	conversation_untagged = 7;

	//conversation_waiting = 8;
}

message Error {
	optional string error = 2;
	optional string request_id = 3;
	optional string description = 4;
}

enum SubscriberType {
	user = 0;
	channel = 1;
}

message Subscription { // raweventcreatedpayload
	reserved "target_partition";
	reserved 13;

	optional common.Context ctx = 1;
	optional string topic = 3;
	//optional string user_id = 4; // connectorid or userid

	//optional SubscribeScope scope = 5;
	//optional string account_id = 6;
	optional string sub_id = 7;

	//optional SubscriberType subscriber_type = 8;
	//optional string subscriber_id = 9;
	optional string target_topic = 10;
	optional string target_key = 11;
	//optional string target_partition = 13;
	// time to life in seconds
	optional int64 ttls = 12;

}

enum SubPrefix {
	Webhook = 0;
	Websocket = 1;
}

enum Object {
	account = 0;
	conversation = 1;
	message = 2;
}