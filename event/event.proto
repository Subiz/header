syntax = "proto3";

package event;

import "bitbucket.org/subiz/header/common/common.proto";
import "bitbucket.org/subiz/header/account/account.proto";
import "bitbucket.org/subiz/header/conversation/conversation.proto";
import "bitbucket.org/subiz/header/content/content.proto";
import "bitbucket.org/subiz/header/user/user.proto";
import "bitbucket.org/subiz/header/notibox/notibox.proto";

message RawEventCreatedPayload {
	common.Context ctx = 1;
	repeated string subs = 3;
	string target_topic = 4;
	string payload = 5; //json format
	string target_key = 6;
	repeated string payloads = 7; // payload for each sub, payload must be empty
	string topic = 9;
	string router_topic = 10;
}

message UnsubscribeMessage {
	common.Context ctx = 1;
	string topic = 3;
	string sub_id = 4;
}

enum Event {
	Sub = 0;
	RawEventCreated = 3;  //
	Subscribe = 4; // subscription
	SubscribeReply = 6;
	Unsubscribe = 5; // subscription
	UnsubscribeReply = 7;
	EventSync = 8;
	EventCreated = 9;
}

message RawEvents {
	common.Context ctx = 1;
	repeated RawEvent events = 4;
	int64 total = 2;
	string anchor = 3;
}

message By {
	common.Device device = 2;
	string id = 3;
	string client_id = 4;
}

message RawEvent {
	reserved 10, 12, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42;
	reserved "channel_id", "by_user_id", "state", "message_to", "page_url", "page_title", "browser_language", "device_type", "user_id", "joiner_id", "joiner_type", "leaver_id", "attachments", "text", "format", "deliverieds", "fields", "computed", "account", "agent", "message", "postback", "content", "topic";
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;
	int64 created = 8;
	string type = 9; // eventtype
	repeated string topics = 11;
	By by = 50;
	string object = 13;
	string conversation_id = 15;
	message Data {
		account.Account account = 1;
		account.Agent agent = 2;
		conversation.Message message = 3;
		conversation.Conversation conversation = 4;
		conversation.Postback postback = 5;
		content.Content content = 6;
		user.Topic topic = 7;
		user.Presence presence = 8;
		user.User user = 10;
		user.UnreadTopic unread_topic = 11;
		user.MyUser my_user = 12;
		notibox.Notification notification = 14;
		notibox.Box notibox = 15;
		account.AgentPerm agent_perm = 16;
		account.GroupMember group_member = 17;
		account.AgentGroup group = 18;
	}
	Data data = 20;
}

enum AccountType {
	a = 0;
	account_deleted = 60;
	account_info_updated = 61;
	group_created = 62;
	group_deleted = 63;
	group_info_updated = 64;
	group_joined = 65;
	group_left = 66;
	invitation_accepted = 68;
	agent_deleted = 69;
	agent_info_updated = 70;
	agent_permission_updated = 71;
}

enum UserType {
	u = 0;
	my_user_upserted = 46;
	user_info_updated = 48;
}

enum EventType {
	e = 0;
	presence_updated = 38;
	content_viewed = 39;
	content_searched = 40;
	content_addedtocart = 41;
	content_checkedout = 42;
	content_purchased = 43;
	topic_read = 44;
	subscribed_topic_updated = 45;
	user_topic_updated = 50;
}

enum ConvoType {
	c = 0;
	conversation_updated = 9;
	message_sent = 10;
	conversation_state_updated = 11;
	//conversation_started = 1;
	conversation_joined = 2;
	//conversation_message = 3;
	conversation_left = 4;
	//conversation_closed = 5;
	conversation_tagged = 6;
	conversation_untagged = 7;
	//conversation_waiting = 8;
	channel_deintegrated = 20;
	channel_integrated = 21;
	message_seen = 30;
	message_acked = 31;
	message_received = 32;
	conversation_member_typing = 33;
	conversation_postbacked = 34;
	conversation_unassigned = 35;
	conversation_assigned = 36;
	conversation_pending = 81;
}

enum NotiboxType {
	n = 0;
	notification_upserted = 52;
	notibox_upserted = 53;
}

enum SubscriberType {
	st_user = 0;
	st_channel = 1;
}

message Subscription { // raweventcreatedpayload
	common.Context ctx = 1;
	string topic = 3;
	//optional string user_id = 4; // connectorid or userid

	//optional SubscribeScope scope = 5;
	//optional string account_id = 6;
	string sub_id = 7;

	//optional SubscriberType subscriber_type = 8;
	//optional string subscriber_id = 9;
	string target_topic = 10;
	string target_key = 11;
	int64 ttls = 12;
	string router_topic = 13;
}

enum SubPrefix {
	Webhook = 0;
	Websocket = 1;
}

enum Object {
	none = 0;
	account = 1;
	agent = 2;
	message = 3;
	conversation = 4;
	postback = 5;
	content = 6;
	topic = 7;
	presence = 8;
	user = 10;
	unread_topic = 11;
	my_user = 12;
	notification = 14;
	notibox = 15;
	agent_perm = 16;
	group_member = 17;
	group = 18;
	integration = 30;
}

message AllType {
	Object o = 2;
	RawEvent e = 3;
	By b = 4;
	RawEvents es = 5;
	ListEventsRequest ler = 6;
	UserEvent userevent = 7;
}

// for generating swagger data
service MyService {
	rpc Do(AllType) returns (AllType) {}
}

message ListEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	string category = 9;
}

message UserEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	RawEvent event = 5;
}

message SubscriptionResponse {
	common.Context ctx = 1;
	bool status = 2;
}

service Publisher {
	rpc Subscribe(Subscription) returns (SubscriptionResponse);
	rpc Unsubscribe(Subscription) returns (SubscriptionResponse);
}

service EventMgr {
	rpc SearchEvents (ListEventsRequest) returns (RawEvents) {}
	rpc CreateEvent (UserEvent) returns (RawEvent) {}
	rpc Subscribe (user.SubscribeRequest) returns (common.Empty) {}
	rpc Unsubscribe (user.SubscribeRequest) returns (common.Empty) {}
	rpc ReadTopic (user.ReadTopicRequest) returns (common.Empty) {}
	rpc SearchTopics (user.ListTopicsRequest) returns (user.ListTopicsResult) {}
}

service ConversationEventReader {
	rpc SendMessage(RawEvent) returns (RawEvent);
	rpc ListEvents(conversation.ListEventsRequest) returns (RawEvents);
	rpc SearchEvents(conversation.SearchMessageRequest) returns (RawEvents);
}

message AutomationEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	user.Automation automation = 5;
	user.Session session = 6;
	user.User user = 7;
	RawEvent event = 9;
}
