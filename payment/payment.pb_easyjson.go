// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package payment

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3258bd9eDecodeGithubComSubizHeaderPayment(in *jlexer.Lexer, out *subizInternalPaymentMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment(out *jwriter.Writer, in subizInternalPaymentMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subizInternalPaymentMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subizInternalPaymentMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subizInternalPaymentMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subizInternalPaymentMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment1(in *jlexer.Lexer, out *paymentMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment1(out *jwriter.Writer, in paymentMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v paymentMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v paymentMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *paymentMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *paymentMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment1(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment2(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "promotion_code":
			if in.IsNull() {
				in.Skip()
				out.PromotionCode = nil
			} else {
				if out.PromotionCode == nil {
					out.PromotionCode = new(string)
				}
				*out.PromotionCode = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "started":
			if in.IsNull() {
				in.Skip()
				out.Started = nil
			} else {
				if out.Started == nil {
					out.Started = new(int64)
				}
				*out.Started = int64(in.Int64())
			}
		case "due_date":
			if in.IsNull() {
				in.Skip()
				out.DueDate = nil
			} else {
				if out.DueDate == nil {
					out.DueDate = new(int64)
				}
				*out.DueDate = int64(in.Int64())
			}
		case "auto_renew":
			if in.IsNull() {
				in.Skip()
				out.AutoRenew = nil
			} else {
				if out.AutoRenew == nil {
					out.AutoRenew = new(bool)
				}
				*out.AutoRenew = bool(in.Bool())
			}
		case "billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.BillingCycleMonth = nil
			} else {
				if out.BillingCycleMonth == nil {
					out.BillingCycleMonth = new(uint32)
				}
				*out.BillingCycleMonth = uint32(in.Uint32())
			}
		case "next_billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.NextBillingCycleMonth = nil
			} else {
				if out.NextBillingCycleMonth == nil {
					out.NextBillingCycleMonth = new(uint32)
				}
				*out.NextBillingCycleMonth = uint32(in.Uint32())
			}
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "addons":
			if in.IsNull() {
				in.Skip()
				out.Addons = nil
			} else {
				in.Delim('[')
				if out.Addons == nil {
					if !in.IsDelim(']') {
						out.Addons = make([]*Addon, 0, 8)
					} else {
						out.Addons = []*Addon{}
					}
				} else {
					out.Addons = (out.Addons)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Addon
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Addon)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Addons = append(out.Addons, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credit":
			if in.IsNull() {
				in.Skip()
				out.Credit = nil
			} else {
				if out.Credit == nil {
					out.Credit = new(float32)
				}
				*out.Credit = float32(in.Float32())
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*Note, 0, 8)
					} else {
						out.Notes = []*Note{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Note
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Note)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Notes = append(out.Notes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "referral_by":
			if in.IsNull() {
				in.Skip()
				out.ReferralBy = nil
			} else {
				if out.ReferralBy == nil {
					out.ReferralBy = new(string)
				}
				*out.ReferralBy = string(in.String())
			}
		case "customer":
			if in.IsNull() {
				in.Skip()
				out.Customer = nil
			} else {
				if out.Customer == nil {
					out.Customer = new(Customer)
				}
				(*out.Customer).UnmarshalEasyJSON(in)
			}
		case "primary_payment_method":
			if in.IsNull() {
				in.Skip()
				out.PrimaryPaymentMethod = nil
			} else {
				if out.PrimaryPaymentMethod == nil {
					out.PrimaryPaymentMethod = new(string)
				}
				*out.PrimaryPaymentMethod = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(Limit)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "v3_state":
			if in.IsNull() {
				in.Skip()
				out.V3State = nil
			} else {
				if out.V3State == nil {
					out.V3State = new(int32)
				}
				*out.V3State = int32(in.Int32())
			}
		case "auto_charge":
			if in.IsNull() {
				in.Skip()
				out.AutoCharge = nil
			} else {
				if out.AutoCharge == nil {
					out.AutoCharge = new(bool)
				}
				*out.AutoCharge = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment2(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.PromotionCode != nil {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PromotionCode))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Started != nil {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Started))
	}
	if in.DueDate != nil {
		const prefix string = ",\"due_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DueDate))
	}
	if in.AutoRenew != nil {
		const prefix string = ",\"auto_renew\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutoRenew))
	}
	if in.BillingCycleMonth != nil {
		const prefix string = ",\"billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.BillingCycleMonth))
	}
	if in.NextBillingCycleMonth != nil {
		const prefix string = ",\"next_billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.NextBillingCycleMonth))
	}
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if len(in.Addons) != 0 {
		const prefix string = ",\"addons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Addons {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Credit != nil {
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Credit))
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Notes {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ReferralBy != nil {
		const prefix string = ",\"referral_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferralBy))
	}
	if in.Customer != nil {
		const prefix string = ",\"customer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Customer).MarshalEasyJSON(out)
	}
	if in.PrimaryPaymentMethod != nil {
		const prefix string = ",\"primary_payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PrimaryPaymentMethod))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.V3State != nil {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.V3State))
	}
	if in.AutoCharge != nil {
		const prefix string = ",\"auto_charge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutoCharge))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment2(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment3(in *jlexer.Lexer, out *Stripe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "card_last4":
			if in.IsNull() {
				in.Skip()
				out.CardLast4 = nil
			} else {
				if out.CardLast4 == nil {
					out.CardLast4 = new(string)
				}
				*out.CardLast4 = string(in.String())
			}
		case "customer_id":
			if in.IsNull() {
				in.Skip()
				out.CustomerId = nil
			} else {
				if out.CustomerId == nil {
					out.CustomerId = new(string)
				}
				*out.CustomerId = string(in.String())
			}
		case "token":
			if in.IsNull() {
				in.Skip()
				out.Token = nil
			} else {
				if out.Token == nil {
					out.Token = new(string)
				}
				*out.Token = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment3(out *jwriter.Writer, in Stripe) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CardLast4 != nil {
		const prefix string = ",\"card_last4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CardLast4))
	}
	if in.CustomerId != nil {
		const prefix string = ",\"customer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CustomerId))
	}
	if in.Token != nil {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stripe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stripe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stripe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stripe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment3(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment4(in *jlexer.Lexer, out *String) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "str":
			if in.IsNull() {
				in.Skip()
				out.Str = nil
			} else {
				if out.Str == nil {
					out.Str = new(string)
				}
				*out.Str = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment4(out *jwriter.Writer, in String) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Str != nil {
		const prefix string = ",\"str\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Str))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v String) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v String) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *String) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *String) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment4(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment5(in *jlexer.Lexer, out *SearchInvoiceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment5(out *jwriter.Writer, in SearchInvoiceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchInvoiceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchInvoiceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchInvoiceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchInvoiceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment5(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment6(in *jlexer.Lexer, out *RenewInvoiceItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.BillingCycleMonth = nil
			} else {
				if out.BillingCycleMonth == nil {
					out.BillingCycleMonth = new(uint32)
				}
				*out.BillingCycleMonth = uint32(in.Uint32())
			}
		case "agent_count":
			if in.IsNull() {
				in.Skip()
				out.AgentCount = nil
			} else {
				if out.AgentCount == nil {
					out.AgentCount = new(uint32)
				}
				*out.AgentCount = uint32(in.Uint32())
			}
		case "from_time":
			if in.IsNull() {
				in.Skip()
				out.FromTime = nil
			} else {
				if out.FromTime == nil {
					out.FromTime = new(int64)
				}
				*out.FromTime = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment6(out *jwriter.Writer, in RenewInvoiceItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if in.BillingCycleMonth != nil {
		const prefix string = ",\"billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.BillingCycleMonth))
	}
	if in.AgentCount != nil {
		const prefix string = ",\"agent_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AgentCount))
	}
	if in.FromTime != nil {
		const prefix string = ",\"from_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FromTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenewInvoiceItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenewInvoiceItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenewInvoiceItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenewInvoiceItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment6(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment7(in *jlexer.Lexer, out *ReferralProgram) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(bool)
				}
				*out.Status = bool(in.Bool())
			}
		case "earning":
			if in.IsNull() {
				in.Skip()
				out.Earning = nil
			} else {
				if out.Earning == nil {
					out.Earning = new(float32)
				}
				*out.Earning = float32(in.Float32())
			}
		case "commission_rate":
			if in.IsNull() {
				in.Skip()
				out.CommissionRate = nil
			} else {
				if out.CommissionRate == nil {
					out.CommissionRate = new(float32)
				}
				*out.CommissionRate = float32(in.Float32())
			}
		case "bank_info":
			if in.IsNull() {
				in.Skip()
				out.BankInfo = nil
			} else {
				if out.BankInfo == nil {
					out.BankInfo = new(BankInfo)
				}
				(*out.BankInfo).UnmarshalEasyJSON(in)
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment7(out *jwriter.Writer, in ReferralProgram) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Status))
	}
	if in.Earning != nil {
		const prefix string = ",\"earning\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Earning))
	}
	if in.CommissionRate != nil {
		const prefix string = ",\"commission_rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.CommissionRate))
	}
	if in.BankInfo != nil {
		const prefix string = ",\"bank_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BankInfo).MarshalEasyJSON(out)
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReferralProgram) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReferralProgram) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReferralProgram) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReferralProgram) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment7(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment8(in *jlexer.Lexer, out *ReferralCreditCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "credit":
			if in.IsNull() {
				in.Skip()
				out.Credit = nil
			} else {
				if out.Credit == nil {
					out.Credit = new(float32)
				}
				*out.Credit = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment8(out *jwriter.Writer, in ReferralCreditCode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.Credit != nil {
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Credit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReferralCreditCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReferralCreditCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReferralCreditCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReferralCreditCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment8(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment9(in *jlexer.Lexer, out *PromotionCodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "promotionCodes":
			if in.IsNull() {
				in.Skip()
				out.PromotionCodes = nil
			} else {
				in.Delim('[')
				if out.PromotionCodes == nil {
					if !in.IsDelim(']') {
						out.PromotionCodes = make([]*PromotionCode, 0, 8)
					} else {
						out.PromotionCodes = []*PromotionCode{}
					}
				} else {
					out.PromotionCodes = (out.PromotionCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *PromotionCode
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(PromotionCode)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.PromotionCodes = append(out.PromotionCodes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(int64)
				}
				*out.Total = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment9(out *jwriter.Writer, in PromotionCodes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.PromotionCodes) != 0 {
		const prefix string = ",\"promotionCodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.PromotionCodes {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromotionCodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromotionCodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromotionCodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromotionCodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment9(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPaymentPromotionCode(in *jlexer.Lexer, out *PromotionCode_Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fixed_amount":
			if in.IsNull() {
				in.Skip()
				out.FixedAmount = nil
			} else {
				if out.FixedAmount == nil {
					out.FixedAmount = new(FixedAmountPromotionCode)
				}
				(*out.FixedAmount).UnmarshalEasyJSON(in)
			}
		case "percent":
			if in.IsNull() {
				in.Skip()
				out.Percent = nil
			} else {
				if out.Percent == nil {
					out.Percent = new(PercentPromotionCode)
				}
				(*out.Percent).UnmarshalEasyJSON(in)
			}
		case "credit":
			if in.IsNull() {
				in.Skip()
				out.Credit = nil
			} else {
				if out.Credit == nil {
					out.Credit = new(CreditCode)
				}
				(*out.Credit).UnmarshalEasyJSON(in)
			}
		case "referral":
			if in.IsNull() {
				in.Skip()
				out.Referral = nil
			} else {
				if out.Referral == nil {
					out.Referral = new(ReferralCreditCode)
				}
				(*out.Referral).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPaymentPromotionCode(out *jwriter.Writer, in PromotionCode_Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FixedAmount != nil {
		const prefix string = ",\"fixed_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FixedAmount).MarshalEasyJSON(out)
	}
	if in.Percent != nil {
		const prefix string = ",\"percent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Percent).MarshalEasyJSON(out)
	}
	if in.Credit != nil {
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Credit).MarshalEasyJSON(out)
	}
	if in.Referral != nil {
		const prefix string = ",\"referral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Referral).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromotionCode_Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPaymentPromotionCode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromotionCode_Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPaymentPromotionCode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromotionCode_Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPaymentPromotionCode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromotionCode_Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPaymentPromotionCode(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment10(in *jlexer.Lexer, out *PromotionCodeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(bool)
				}
				*out.Status = bool(in.Bool())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(string)
				}
				*out.Error = string(in.String())
			}
		case "promotionCode":
			if in.IsNull() {
				in.Skip()
				out.PromotionCode = nil
			} else {
				if out.PromotionCode == nil {
					out.PromotionCode = new(PromotionCode)
				}
				(*out.PromotionCode).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment10(out *jwriter.Writer, in PromotionCodeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Status))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Error))
	}
	if in.PromotionCode != nil {
		const prefix string = ",\"promotionCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PromotionCode).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromotionCodeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromotionCodeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromotionCodeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromotionCodeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment10(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment11(in *jlexer.Lexer, out *PromotionCodeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment11(out *jwriter.Writer, in PromotionCodeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Code))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromotionCodeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromotionCodeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromotionCodeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromotionCodeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment11(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment12(in *jlexer.Lexer, out *PromotionCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "redeem_count":
			if in.IsNull() {
				in.Skip()
				out.RedeemCount = nil
			} else {
				if out.RedeemCount == nil {
					out.RedeemCount = new(int32)
				}
				*out.RedeemCount = int32(in.Int32())
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(PromotionCode_Data)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(int64)
				}
				*out.Start = int64(in.Int64())
			}
		case "end":
			if in.IsNull() {
				in.Skip()
				out.End = nil
			} else {
				if out.End == nil {
					out.End = new(int64)
				}
				*out.End = int64(in.Int64())
			}
		case "for_plan":
			if in.IsNull() {
				in.Skip()
				out.ForPlan = nil
			} else {
				if out.ForPlan == nil {
					out.ForPlan = new(string)
				}
				*out.ForPlan = string(in.String())
			}
		case "for_account_id":
			if in.IsNull() {
				in.Skip()
				out.ForAccountId = nil
			} else {
				if out.ForAccountId == nil {
					out.ForAccountId = new(string)
				}
				*out.ForAccountId = string(in.String())
			}
		case "max_redemptions":
			if in.IsNull() {
				in.Skip()
				out.MaxRedemptions = nil
			} else {
				if out.MaxRedemptions == nil {
					out.MaxRedemptions = new(int32)
				}
				*out.MaxRedemptions = int32(in.Int32())
			}
		case "addon":
			if in.IsNull() {
				in.Skip()
				out.Addon = nil
			} else {
				if out.Addon == nil {
					out.Addon = new(string)
				}
				*out.Addon = string(in.String())
			}
		case "for_items":
			if in.IsNull() {
				in.Skip()
				out.ForItems = nil
			} else {
				in.Delim('[')
				if out.ForItems == nil {
					if !in.IsDelim(']') {
						out.ForItems = make([]string, 0, 4)
					} else {
						out.ForItems = []string{}
					}
				} else {
					out.ForItems = (out.ForItems)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.ForItems = append(out.ForItems, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "min_amount":
			if in.IsNull() {
				in.Skip()
				out.MinAmount = nil
			} else {
				if out.MinAmount == nil {
					out.MinAmount = new(float32)
				}
				*out.MinAmount = float32(in.Float32())
			}
		case "max_amount":
			if in.IsNull() {
				in.Skip()
				out.MaxAmount = nil
			} else {
				if out.MaxAmount == nil {
					out.MaxAmount = new(float32)
				}
				*out.MaxAmount = float32(in.Float32())
			}
		case "for_plans":
			if in.IsNull() {
				in.Skip()
				out.ForPlans = nil
			} else {
				in.Delim('[')
				if out.ForPlans == nil {
					if !in.IsDelim(']') {
						out.ForPlans = make([]string, 0, 4)
					} else {
						out.ForPlans = []string{}
					}
				} else {
					out.ForPlans = (out.ForPlans)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.ForPlans = append(out.ForPlans, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "for_account_ids":
			if in.IsNull() {
				in.Skip()
				out.ForAccountIds = nil
			} else {
				in.Delim('[')
				if out.ForAccountIds == nil {
					if !in.IsDelim(']') {
						out.ForAccountIds = make([]string, 0, 4)
					} else {
						out.ForAccountIds = []string{}
					}
				} else {
					out.ForAccountIds = (out.ForAccountIds)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.ForAccountIds = append(out.ForAccountIds, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "for_channels":
			if in.IsNull() {
				in.Skip()
				out.ForChannels = nil
			} else {
				in.Delim('[')
				if out.ForChannels == nil {
					if !in.IsDelim(']') {
						out.ForChannels = make([]string, 0, 4)
					} else {
						out.ForChannels = []string{}
					}
				} else {
					out.ForChannels = (out.ForChannels)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.ForChannels = append(out.ForChannels, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_deleted":
			if in.IsNull() {
				in.Skip()
				out.IsDeleted = nil
			} else {
				if out.IsDeleted == nil {
					out.IsDeleted = new(bool)
				}
				*out.IsDeleted = bool(in.Bool())
			}
		case "for_number_of_agents":
			if in.IsNull() {
				in.Skip()
				out.ForNumberOfAgents = nil
			} else {
				in.Delim('[')
				if out.ForNumberOfAgents == nil {
					if !in.IsDelim(']') {
						out.ForNumberOfAgents = make([]uint32, 0, 16)
					} else {
						out.ForNumberOfAgents = []uint32{}
					}
				} else {
					out.ForNumberOfAgents = (out.ForNumberOfAgents)[:0]
				}
				for !in.IsDelim(']') {
					var v14 uint32
					v14 = uint32(in.Uint32())
					out.ForNumberOfAgents = append(out.ForNumberOfAgents, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment12(out *jwriter.Writer, in PromotionCode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.RedeemCount != nil {
		const prefix string = ",\"redeem_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.RedeemCount))
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Code))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	if in.Start != nil {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Start))
	}
	if in.End != nil {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.End))
	}
	if in.ForPlan != nil {
		const prefix string = ",\"for_plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ForPlan))
	}
	if in.ForAccountId != nil {
		const prefix string = ",\"for_account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ForAccountId))
	}
	if in.MaxRedemptions != nil {
		const prefix string = ",\"max_redemptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.MaxRedemptions))
	}
	if in.Addon != nil {
		const prefix string = ",\"addon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Addon))
	}
	if len(in.ForItems) != 0 {
		const prefix string = ",\"for_items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ForItems {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.MinAmount != nil {
		const prefix string = ",\"min_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.MinAmount))
	}
	if in.MaxAmount != nil {
		const prefix string = ",\"max_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.MaxAmount))
	}
	if len(in.ForPlans) != 0 {
		const prefix string = ",\"for_plans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.ForPlans {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.ForAccountIds) != 0 {
		const prefix string = ",\"for_account_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.ForAccountIds {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.ForChannels) != 0 {
		const prefix string = ",\"for_channels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.ForChannels {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if in.IsDeleted != nil {
		const prefix string = ",\"is_deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsDeleted))
	}
	if len(in.ForNumberOfAgents) != 0 {
		const prefix string = ",\"for_number_of_agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.ForNumberOfAgents {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromotionCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromotionCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromotionCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromotionCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment12(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment13(in *jlexer.Lexer, out *Plans) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plans":
			if in.IsNull() {
				in.Skip()
				out.Plans = nil
			} else {
				in.Delim('[')
				if out.Plans == nil {
					if !in.IsDelim(']') {
						out.Plans = make([]*Plan, 0, 8)
					} else {
						out.Plans = []*Plan{}
					}
				} else {
					out.Plans = (out.Plans)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Plan
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Plan)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Plans = append(out.Plans, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment13(out *jwriter.Writer, in Plans) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Plans) != 0 {
		const prefix string = ",\"plans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Plans {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plans) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plans) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plans) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plans) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment13(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment14(in *jlexer.Lexer, out *PlanInvoiceItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agent_count":
			if in.IsNull() {
				in.Skip()
				out.AgentCount = nil
			} else {
				if out.AgentCount == nil {
					out.AgentCount = new(uint32)
				}
				*out.AgentCount = uint32(in.Uint32())
			}
		case "billing_cycle_month":
			if in.IsNull() {
				in.Skip()
				out.BillingCycleMonth = nil
			} else {
				if out.BillingCycleMonth == nil {
					out.BillingCycleMonth = new(uint32)
				}
				*out.BillingCycleMonth = uint32(in.Uint32())
			}
		case "old_plan":
			if in.IsNull() {
				in.Skip()
				out.OldPlan = nil
			} else {
				if out.OldPlan == nil {
					out.OldPlan = new(string)
				}
				*out.OldPlan = string(in.String())
			}
		case "new_plan":
			if in.IsNull() {
				in.Skip()
				out.NewPlan = nil
			} else {
				if out.NewPlan == nil {
					out.NewPlan = new(string)
				}
				*out.NewPlan = string(in.String())
			}
		case "save_percentage":
			if in.IsNull() {
				in.Skip()
				out.SavePercentage = nil
			} else {
				if out.SavePercentage == nil {
					out.SavePercentage = new(float32)
				}
				*out.SavePercentage = float32(in.Float32())
			}
		case "started":
			if in.IsNull() {
				in.Skip()
				out.Started = nil
			} else {
				if out.Started == nil {
					out.Started = new(int64)
				}
				*out.Started = int64(in.Int64())
			}
		case "day_left":
			if in.IsNull() {
				in.Skip()
				out.DayLeft = nil
			} else {
				if out.DayLeft == nil {
					out.DayLeft = new(int32)
				}
				*out.DayLeft = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment14(out *jwriter.Writer, in PlanInvoiceItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AgentCount != nil {
		const prefix string = ",\"agent_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AgentCount))
	}
	if in.BillingCycleMonth != nil {
		const prefix string = ",\"billing_cycle_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.BillingCycleMonth))
	}
	if in.OldPlan != nil {
		const prefix string = ",\"old_plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OldPlan))
	}
	if in.NewPlan != nil {
		const prefix string = ",\"new_plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NewPlan))
	}
	if in.SavePercentage != nil {
		const prefix string = ",\"save_percentage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.SavePercentage))
	}
	if in.Started != nil {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Started))
	}
	if in.DayLeft != nil {
		const prefix string = ",\"day_left\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DayLeft))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlanInvoiceItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlanInvoiceItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlanInvoiceItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlanInvoiceItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment14(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment15(in *jlexer.Lexer, out *Plan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(Limit)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "level":
			if in.IsNull() {
				in.Skip()
				out.Level = nil
			} else {
				if out.Level == nil {
					out.Level = new(uint32)
				}
				*out.Level = uint32(in.Uint32())
			}
		case "can_buy_agent":
			if in.IsNull() {
				in.Skip()
				out.CanBuyAgent = nil
			} else {
				if out.CanBuyAgent == nil {
					out.CanBuyAgent = new(bool)
				}
				*out.CanBuyAgent = bool(in.Bool())
			}
		case "can_buy":
			if in.IsNull() {
				in.Skip()
				out.CanBuy = nil
			} else {
				if out.CanBuy == nil {
					out.CanBuy = new(bool)
				}
				*out.CanBuy = bool(in.Bool())
			}
		case "has_start_time":
			if in.IsNull() {
				in.Skip()
				out.HasStartTime = nil
			} else {
				if out.HasStartTime == nil {
					out.HasStartTime = new(bool)
				}
				*out.HasStartTime = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment15(out *jwriter.Writer, in Plan) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Level != nil {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Level))
	}
	if in.CanBuyAgent != nil {
		const prefix string = ",\"can_buy_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanBuyAgent))
	}
	if in.CanBuy != nil {
		const prefix string = ",\"can_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanBuy))
	}
	if in.HasStartTime != nil {
		const prefix string = ",\"has_start_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasStartTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment15(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment16(in *jlexer.Lexer, out *PercentPromotionCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "percent":
			if in.IsNull() {
				in.Skip()
				out.Percent = nil
			} else {
				if out.Percent == nil {
					out.Percent = new(float32)
				}
				*out.Percent = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment16(out *jwriter.Writer, in PercentPromotionCode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Percent != nil {
		const prefix string = ",\"percent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Percent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PercentPromotionCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PercentPromotionCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PercentPromotionCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PercentPromotionCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment16(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment17(in *jlexer.Lexer, out *PaymentRenewCycleRequested) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.Sub = nil
			} else {
				if out.Sub == nil {
					out.Sub = new(Subscription)
				}
				(*out.Sub).UnmarshalEasyJSON(in)
			}
		case "cycle_id":
			if in.IsNull() {
				in.Skip()
				out.CycleId = nil
			} else {
				if out.CycleId == nil {
					out.CycleId = new(string)
				}
				*out.CycleId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment17(out *jwriter.Writer, in PaymentRenewCycleRequested) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Sub != nil {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sub).MarshalEasyJSON(out)
	}
	if in.CycleId != nil {
		const prefix string = ",\"cycle_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CycleId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentRenewCycleRequested) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentRenewCycleRequested) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentRenewCycleRequested) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentRenewCycleRequested) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment17(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment18(in *jlexer.Lexer, out *PaymentMethods) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payment_methods":
			if in.IsNull() {
				in.Skip()
				out.PaymentMethods = nil
			} else {
				in.Delim('[')
				if out.PaymentMethods == nil {
					if !in.IsDelim(']') {
						out.PaymentMethods = make([]*PaymentMethod, 0, 8)
					} else {
						out.PaymentMethods = []*PaymentMethod{}
					}
				} else {
					out.PaymentMethods = (out.PaymentMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *PaymentMethod
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(PaymentMethod)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.PaymentMethods = append(out.PaymentMethods, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment18(out *jwriter.Writer, in PaymentMethods) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PaymentMethods) != 0 {
		const prefix string = ",\"payment_methods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.PaymentMethods {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethods) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethods) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethods) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethods) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment18(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment19(in *jlexer.Lexer, out *PaymentMethod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "stripe":
			if in.IsNull() {
				in.Skip()
				out.Stripe = nil
			} else {
				if out.Stripe == nil {
					out.Stripe = new(Stripe)
				}
				(*out.Stripe).UnmarshalEasyJSON(in)
			}
		case "failed_message":
			if in.IsNull() {
				in.Skip()
				out.FailedMessage = nil
			} else {
				if out.FailedMessage == nil {
					out.FailedMessage = new(string)
				}
				*out.FailedMessage = string(in.String())
			}
		case "charged":
			if in.IsNull() {
				in.Skip()
				out.Charged = nil
			} else {
				if out.Charged == nil {
					out.Charged = new(int64)
				}
				*out.Charged = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment19(out *jwriter.Writer, in PaymentMethod) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Stripe != nil {
		const prefix string = ",\"stripe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Stripe).MarshalEasyJSON(out)
	}
	if in.FailedMessage != nil {
		const prefix string = ",\"failed_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FailedMessage))
	}
	if in.Charged != nil {
		const prefix string = ",\"charged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Charged))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethod) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethod) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethod) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethod) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment19(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment20(in *jlexer.Lexer, out *PayRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "invoice_ids":
			if in.IsNull() {
				in.Skip()
				out.InvoiceIds = nil
			} else {
				in.Delim('[')
				if out.InvoiceIds == nil {
					if !in.IsDelim(']') {
						out.InvoiceIds = make([]string, 0, 4)
					} else {
						out.InvoiceIds = []string{}
					}
				} else {
					out.InvoiceIds = (out.InvoiceIds)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.InvoiceIds = append(out.InvoiceIds, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "CustomerInfo":
			if in.IsNull() {
				in.Skip()
				out.CustomerInfo = nil
			} else {
				if out.CustomerInfo == nil {
					out.CustomerInfo = new(Contact)
				}
				(*out.CustomerInfo).UnmarshalEasyJSON(in)
			}
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(float32)
				}
				*out.Amount = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment20(out *jwriter.Writer, in PayRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.InvoiceIds) != 0 {
		const prefix string = ",\"invoice_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.InvoiceIds {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.CustomerInfo != nil {
		const prefix string = ",\"CustomerInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CustomerInfo).MarshalEasyJSON(out)
	}
	if in.Amount != nil {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PayRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PayRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PayRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PayRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment20(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment21(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment21(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Message))
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Note) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Note) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Note) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Note) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment21(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment22(in *jlexer.Lexer, out *Logs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]*Log, 0, 8)
					} else {
						out.Logs = []*Log{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *Log
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(Log)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Logs = append(out.Logs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment22(out *jwriter.Writer, in Logs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Logs) != 0 {
		const prefix string = ",\"logs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Logs {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Logs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Logs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Logs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Logs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment22(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment23(in *jlexer.Lexer, out *LogPromotionCodeUsed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment23(out *jwriter.Writer, in LogPromotionCodeUsed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Code))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogPromotionCodeUsed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogPromotionCodeUsed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogPromotionCodeUsed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogPromotionCodeUsed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment23(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment24(in *jlexer.Lexer, out *LogPayForAgentReferrers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "log_pay_for_agent_referrers":
			if in.IsNull() {
				in.Skip()
				out.LogPayForAgentReferrers = nil
			} else {
				in.Delim('[')
				if out.LogPayForAgentReferrers == nil {
					if !in.IsDelim(']') {
						out.LogPayForAgentReferrers = make([]*LogPayForAgentReferrer, 0, 8)
					} else {
						out.LogPayForAgentReferrers = []*LogPayForAgentReferrer{}
					}
				} else {
					out.LogPayForAgentReferrers = (out.LogPayForAgentReferrers)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *LogPayForAgentReferrer
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(LogPayForAgentReferrer)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					out.LogPayForAgentReferrers = append(out.LogPayForAgentReferrers, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment24(out *jwriter.Writer, in LogPayForAgentReferrers) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.LogPayForAgentReferrers) != 0 {
		const prefix string = ",\"log_pay_for_agent_referrers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.LogPayForAgentReferrers {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogPayForAgentReferrers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogPayForAgentReferrers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogPayForAgentReferrers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogPayForAgentReferrers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment24(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment25(in *jlexer.Lexer, out *LogPayForAgentReferrer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(float32)
				}
				*out.Amount = float32(in.Float32())
			}
		case "transation_id":
			if in.IsNull() {
				in.Skip()
				out.TransationId = nil
			} else {
				if out.TransationId == nil {
					out.TransationId = new(string)
				}
				*out.TransationId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment25(out *jwriter.Writer, in LogPayForAgentReferrer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.Amount != nil {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Amount))
	}
	if in.TransationId != nil {
		const prefix string = ",\"transation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TransationId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogPayForAgentReferrer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogPayForAgentReferrer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogPayForAgentReferrer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogPayForAgentReferrer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment25(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment26(in *jlexer.Lexer, out *LogBillByAccountReferreds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "log_bill_by_account_referreds":
			if in.IsNull() {
				in.Skip()
				out.LogBillByAccountReferreds = nil
			} else {
				in.Delim('[')
				if out.LogBillByAccountReferreds == nil {
					if !in.IsDelim(']') {
						out.LogBillByAccountReferreds = make([]*LogBillByAccountReferred, 0, 8)
					} else {
						out.LogBillByAccountReferreds = []*LogBillByAccountReferred{}
					}
				} else {
					out.LogBillByAccountReferreds = (out.LogBillByAccountReferreds)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *LogBillByAccountReferred
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(LogBillByAccountReferred)
						}
						(*v40).UnmarshalEasyJSON(in)
					}
					out.LogBillByAccountReferreds = append(out.LogBillByAccountReferreds, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment26(out *jwriter.Writer, in LogBillByAccountReferreds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.LogBillByAccountReferreds) != 0 {
		const prefix string = ",\"log_bill_by_account_referreds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.LogBillByAccountReferreds {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					(*v42).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogBillByAccountReferreds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogBillByAccountReferreds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogBillByAccountReferreds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogBillByAccountReferreds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment26(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment27(in *jlexer.Lexer, out *LogBillByAccountReferred) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "commission_rate":
			if in.IsNull() {
				in.Skip()
				out.CommissionRate = nil
			} else {
				if out.CommissionRate == nil {
					out.CommissionRate = new(float32)
				}
				*out.CommissionRate = float32(in.Float32())
			}
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(float32)
				}
				*out.Amount = float32(in.Float32())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "bill_id":
			if in.IsNull() {
				in.Skip()
				out.BillId = nil
			} else {
				if out.BillId == nil {
					out.BillId = new(string)
				}
				*out.BillId = string(in.String())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment27(out *jwriter.Writer, in LogBillByAccountReferred) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.CommissionRate != nil {
		const prefix string = ",\"commission_rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.CommissionRate))
	}
	if in.Amount != nil {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Amount))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.BillId != nil {
		const prefix string = ",\"bill_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BillId))
	}
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogBillByAccountReferred) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogBillByAccountReferred) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogBillByAccountReferred) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogBillByAccountReferred) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment27(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment28(in *jlexer.Lexer, out *LogAccountReferreds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "log_account_referreds":
			if in.IsNull() {
				in.Skip()
				out.LogAccountReferreds = nil
			} else {
				in.Delim('[')
				if out.LogAccountReferreds == nil {
					if !in.IsDelim(']') {
						out.LogAccountReferreds = make([]*LogAccountReferred, 0, 8)
					} else {
						out.LogAccountReferreds = []*LogAccountReferred{}
					}
				} else {
					out.LogAccountReferreds = (out.LogAccountReferreds)[:0]
				}
				for !in.IsDelim(']') {
					var v43 *LogAccountReferred
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(LogAccountReferred)
						}
						(*v43).UnmarshalEasyJSON(in)
					}
					out.LogAccountReferreds = append(out.LogAccountReferreds, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment28(out *jwriter.Writer, in LogAccountReferreds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.LogAccountReferreds) != 0 {
		const prefix string = ",\"log_account_referreds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.LogAccountReferreds {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogAccountReferreds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogAccountReferreds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogAccountReferreds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogAccountReferreds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment28(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment29(in *jlexer.Lexer, out *LogAccountReferred) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment29(out *jwriter.Writer, in LogAccountReferred) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogAccountReferred) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogAccountReferred) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogAccountReferred) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogAccountReferred) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment29(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment30(in *jlexer.Lexer, out *Log) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(string)
				}
				*out.User = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(string)
				}
				*out.Action = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "month":
			if in.IsNull() {
				in.Skip()
				out.Month = nil
			} else {
				if out.Month == nil {
					out.Month = new(int32)
				}
				*out.Month = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment30(out *jwriter.Writer, in Log) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.User))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Action != nil {
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Action))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Month != nil {
		const prefix string = ",\"month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Month))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Log) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Log) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Log) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Log) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment30(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment31(in *jlexer.Lexer, out *ListPromotionCodeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment31(out *jwriter.Writer, in ListPromotionCodeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListPromotionCodeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListPromotionCodeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListPromotionCodeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListPromotionCodeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment31(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment32(in *jlexer.Lexer, out *ListLogsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment32(out *jwriter.Writer, in ListLogsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListLogsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListLogsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListLogsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListLogsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment32(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment33(in *jlexer.Lexer, out *ListInvoiceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "order_by":
			if in.IsNull() {
				in.Skip()
				out.OrderBy = nil
			} else {
				if out.OrderBy == nil {
					out.OrderBy = new(string)
				}
				*out.OrderBy = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment33(out *jwriter.Writer, in ListInvoiceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.OrderBy != nil {
		const prefix string = ",\"order_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OrderBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListInvoiceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListInvoiceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListInvoiceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListInvoiceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment33(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment34(in *jlexer.Lexer, out *ListCommentsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "topic_id":
			if in.IsNull() {
				in.Skip()
				out.TopicId = nil
			} else {
				if out.TopicId == nil {
					out.TopicId = new(string)
				}
				*out.TopicId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment34(out *jwriter.Writer, in ListCommentsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.TopicId != nil {
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TopicId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListCommentsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListCommentsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListCommentsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListCommentsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment34(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment35(in *jlexer.Lexer, out *Limit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "max_automations":
			if in.IsNull() {
				in.Skip()
				out.MaxAutomations = nil
			} else {
				if out.MaxAutomations == nil {
					out.MaxAutomations = new(uint32)
				}
				*out.MaxAutomations = uint32(in.Uint32())
			}
		case "max_segments":
			if in.IsNull() {
				in.Skip()
				out.MaxSegments = nil
			} else {
				if out.MaxSegments == nil {
					out.MaxSegments = new(uint32)
				}
				*out.MaxSegments = uint32(in.Uint32())
			}
		case "max_agents":
			if in.IsNull() {
				in.Skip()
				out.MaxAgents = nil
			} else {
				if out.MaxAgents == nil {
					out.MaxAgents = new(uint32)
				}
				*out.MaxAgents = uint32(in.Uint32())
			}
		case "can_buy_agent":
			if in.IsNull() {
				in.Skip()
				out.CanBuyAgent = nil
			} else {
				if out.CanBuyAgent == nil {
					out.CanBuyAgent = new(bool)
				}
				*out.CanBuyAgent = bool(in.Bool())
			}
		case "automation_webhook_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationWebhookQuota = nil
			} else {
				if out.AutomationWebhookQuota == nil {
					out.AutomationWebhookQuota = new(uint32)
				}
				*out.AutomationWebhookQuota = uint32(in.Uint32())
			}
		case "automation_email_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationEmailQuota = nil
			} else {
				if out.AutomationEmailQuota == nil {
					out.AutomationEmailQuota = new(uint32)
				}
				*out.AutomationEmailQuota = uint32(in.Uint32())
			}
		case "automation_message_quota":
			if in.IsNull() {
				in.Skip()
				out.AutomationMessageQuota = nil
			} else {
				if out.AutomationMessageQuota == nil {
					out.AutomationMessageQuota = new(uint32)
				}
				*out.AutomationMessageQuota = uint32(in.Uint32())
			}
		case "max_rules":
			if in.IsNull() {
				in.Skip()
				out.MaxRules = nil
			} else {
				if out.MaxRules == nil {
					out.MaxRules = new(uint32)
				}
				*out.MaxRules = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment35(out *jwriter.Writer, in Limit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.MaxAutomations != nil {
		const prefix string = ",\"max_automations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAutomations))
	}
	if in.MaxSegments != nil {
		const prefix string = ",\"max_segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxSegments))
	}
	if in.MaxAgents != nil {
		const prefix string = ",\"max_agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxAgents))
	}
	if in.CanBuyAgent != nil {
		const prefix string = ",\"can_buy_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.CanBuyAgent))
	}
	if in.AutomationWebhookQuota != nil {
		const prefix string = ",\"automation_webhook_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationWebhookQuota))
	}
	if in.AutomationEmailQuota != nil {
		const prefix string = ",\"automation_email_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationEmailQuota))
	}
	if in.AutomationMessageQuota != nil {
		const prefix string = ",\"automation_message_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AutomationMessageQuota))
	}
	if in.MaxRules != nil {
		const prefix string = ",\"max_rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MaxRules))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Limit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Limit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Limit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Limit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment35(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment36(in *jlexer.Lexer, out *Invoices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "invoices":
			if in.IsNull() {
				in.Skip()
				out.Invoices = nil
			} else {
				in.Delim('[')
				if out.Invoices == nil {
					if !in.IsDelim(']') {
						out.Invoices = make([]*Invoice, 0, 8)
					} else {
						out.Invoices = []*Invoice{}
					}
				} else {
					out.Invoices = (out.Invoices)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *Invoice
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(Invoice)
						}
						(*v46).UnmarshalEasyJSON(in)
					}
					out.Invoices = append(out.Invoices, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment36(out *jwriter.Writer, in Invoices) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Invoices) != 0 {
		const prefix string = ",\"invoices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Invoices {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					(*v48).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invoices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invoices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invoices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invoices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment36(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPaymentInvoiceItem(in *jlexer.Lexer, out *InvoiceItem_Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "renew":
			if in.IsNull() {
				in.Skip()
				out.Renew = nil
			} else {
				if out.Renew == nil {
					out.Renew = new(RenewInvoiceItem)
				}
				(*out.Renew).UnmarshalEasyJSON(in)
			}
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(AgentInvoiceItem)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(PlanInvoiceItem)
				}
				(*out.Plan).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPaymentInvoiceItem(out *jwriter.Writer, in InvoiceItem_Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Renew != nil {
		const prefix string = ",\"renew\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Renew).MarshalEasyJSON(out)
	}
	if in.Agent != nil {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Agent).MarshalEasyJSON(out)
	}
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Plan).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceItem_Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPaymentInvoiceItem(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceItem_Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPaymentInvoiceItem(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceItem_Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPaymentInvoiceItem(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceItem_Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPaymentInvoiceItem(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment37(in *jlexer.Lexer, out *InvoiceItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "invoice_id":
			if in.IsNull() {
				in.Skip()
				out.InvoiceId = nil
			} else {
				if out.InvoiceId == nil {
					out.InvoiceId = new(string)
				}
				*out.InvoiceId = string(in.String())
			}
		case "quantity":
			if in.IsNull() {
				in.Skip()
				out.Quantity = nil
			} else {
				if out.Quantity == nil {
					out.Quantity = new(int32)
				}
				*out.Quantity = int32(in.Int32())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(InvoiceItem_Data)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment37(out *jwriter.Writer, in InvoiceItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.InvoiceId != nil {
		const prefix string = ",\"invoice_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InvoiceId))
	}
	if in.Quantity != nil {
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Quantity))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment37(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment38(in *jlexer.Lexer, out *InvoiceCreatedEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(string)
				}
				*out.To = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "billing_name":
			if in.IsNull() {
				in.Skip()
				out.BillingName = nil
			} else {
				if out.BillingName == nil {
					out.BillingName = new(string)
				}
				*out.BillingName = string(in.String())
			}
		case "invoice_id":
			if in.IsNull() {
				in.Skip()
				out.InvoiceId = nil
			} else {
				if out.InvoiceId == nil {
					out.InvoiceId = new(string)
				}
				*out.InvoiceId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "lang":
			if in.IsNull() {
				in.Skip()
				out.Lang = nil
			} else {
				if out.Lang == nil {
					out.Lang = new(common.L)
				}
				*out.Lang = common.L(in.Int32())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment38(out *jwriter.Writer, in InvoiceCreatedEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.To))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.BillingName != nil {
		const prefix string = ",\"billing_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BillingName))
	}
	if in.InvoiceId != nil {
		const prefix string = ",\"invoice_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InvoiceId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Lang != nil {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lang))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceCreatedEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceCreatedEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceCreatedEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceCreatedEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment38(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment39(in *jlexer.Lexer, out *Invoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "amount_due":
			if in.IsNull() {
				in.Skip()
				out.AmountDue = nil
			} else {
				if out.AmountDue == nil {
					out.AmountDue = new(float32)
				}
				*out.AmountDue = float32(in.Float32())
			}
		case "promotion_code":
			if in.IsNull() {
				in.Skip()
				out.PromotionCode = nil
			} else {
				if out.PromotionCode == nil {
					out.PromotionCode = new(string)
				}
				*out.PromotionCode = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "billing_info":
			if in.IsNull() {
				in.Skip()
				out.BillingInfo = nil
			} else {
				if out.BillingInfo == nil {
					out.BillingInfo = new(BillingInfo)
				}
				(*out.BillingInfo).UnmarshalEasyJSON(in)
			}
		case "due_date":
			if in.IsNull() {
				in.Skip()
				out.DueDate = nil
			} else {
				if out.DueDate == nil {
					out.DueDate = new(int64)
				}
				*out.DueDate = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*InvoiceItem, 0, 8)
					} else {
						out.Items = []*InvoiceItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *InvoiceItem
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(InvoiceItem)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subtotal":
			if in.IsNull() {
				in.Skip()
				out.Subtotal = nil
			} else {
				if out.Subtotal == nil {
					out.Subtotal = new(float32)
				}
				*out.Subtotal = float32(in.Float32())
			}
		case "tax_percent":
			if in.IsNull() {
				in.Skip()
				out.TaxPercent = nil
			} else {
				if out.TaxPercent == nil {
					out.TaxPercent = new(float32)
				}
				*out.TaxPercent = float32(in.Float32())
			}
		case "tax":
			if in.IsNull() {
				in.Skip()
				out.Tax = nil
			} else {
				if out.Tax == nil {
					out.Tax = new(float32)
				}
				*out.Tax = float32(in.Float32())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(float32)
				}
				*out.Total = float32(in.Float32())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*Note, 0, 8)
					} else {
						out.Notes = []*Note{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v50 *Note
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						if v50 == nil {
							v50 = new(Note)
						}
						(*v50).UnmarshalEasyJSON(in)
					}
					out.Notes = append(out.Notes, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bills":
			if in.IsNull() {
				in.Skip()
				out.Bills = nil
			} else {
				in.Delim('[')
				if out.Bills == nil {
					if !in.IsDelim(']') {
						out.Bills = make([]string, 0, 4)
					} else {
						out.Bills = []string{}
					}
				} else {
					out.Bills = (out.Bills)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.Bills = append(out.Bills, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "payment_made":
			if in.IsNull() {
				in.Skip()
				out.PaymentMade = nil
			} else {
				if out.PaymentMade == nil {
					out.PaymentMade = new(float32)
				}
				*out.PaymentMade = float32(in.Float32())
			}
		case "current_sub":
			if in.IsNull() {
				in.Skip()
				out.CurrentSub = nil
			} else {
				if out.CurrentSub == nil {
					out.CurrentSub = new(Subscription)
				}
				(*out.CurrentSub).UnmarshalEasyJSON(in)
			}
		case "current_plan":
			if in.IsNull() {
				in.Skip()
				out.CurrentPlan = nil
			} else {
				if out.CurrentPlan == nil {
					out.CurrentPlan = new(Plan)
				}
				(*out.CurrentPlan).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment39(out *jwriter.Writer, in Invoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AmountDue != nil {
		const prefix string = ",\"amount_due\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.AmountDue))
	}
	if in.PromotionCode != nil {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PromotionCode))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.BillingInfo != nil {
		const prefix string = ",\"billing_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BillingInfo).MarshalEasyJSON(out)
	}
	if in.DueDate != nil {
		const prefix string = ",\"due_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DueDate))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Items {
				if v52 > 0 {
					out.RawByte(',')
				}
				if v53 == nil {
					out.RawString("null")
				} else {
					(*v53).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Subtotal != nil {
		const prefix string = ",\"subtotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Subtotal))
	}
	if in.TaxPercent != nil {
		const prefix string = ",\"tax_percent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.TaxPercent))
	}
	if in.Tax != nil {
		const prefix string = ",\"tax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Tax))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Total))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.Notes {
				if v54 > 0 {
					out.RawByte(',')
				}
				if v55 == nil {
					out.RawString("null")
				} else {
					(*v55).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Bills) != 0 {
		const prefix string = ",\"bills\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Bills {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.PaymentMade != nil {
		const prefix string = ",\"payment_made\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.PaymentMade))
	}
	if in.CurrentSub != nil {
		const prefix string = ",\"current_sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CurrentSub).MarshalEasyJSON(out)
	}
	if in.CurrentPlan != nil {
		const prefix string = ",\"current_plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CurrentPlan).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment39(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment40(in *jlexer.Lexer, out *FixedAmountPromotionCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(float32)
				}
				*out.Amount = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment40(out *jwriter.Writer, in FixedAmountPromotionCode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Amount != nil {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FixedAmountPromotionCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FixedAmountPromotionCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FixedAmountPromotionCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FixedAmountPromotionCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment40(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment41(in *jlexer.Lexer, out *ExchangeRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from_currency":
			if in.IsNull() {
				in.Skip()
				out.FromCurrency = nil
			} else {
				if out.FromCurrency == nil {
					out.FromCurrency = new(string)
				}
				*out.FromCurrency = string(in.String())
			}
		case "to_currency":
			if in.IsNull() {
				in.Skip()
				out.ToCurrency = nil
			} else {
				if out.ToCurrency == nil {
					out.ToCurrency = new(string)
				}
				*out.ToCurrency = string(in.String())
			}
		case "exchange_rate":
			if in.IsNull() {
				in.Skip()
				out.ExchangeRate = nil
			} else {
				if out.ExchangeRate == nil {
					out.ExchangeRate = new(float32)
				}
				*out.ExchangeRate = float32(in.Float32())
			}
		case "exchange_time":
			if in.IsNull() {
				in.Skip()
				out.ExchangeTime = nil
			} else {
				if out.ExchangeTime == nil {
					out.ExchangeTime = new(int64)
				}
				*out.ExchangeTime = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment41(out *jwriter.Writer, in ExchangeRate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FromCurrency != nil {
		const prefix string = ",\"from_currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FromCurrency))
	}
	if in.ToCurrency != nil {
		const prefix string = ",\"to_currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ToCurrency))
	}
	if in.ExchangeRate != nil {
		const prefix string = ",\"exchange_rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.ExchangeRate))
	}
	if in.ExchangeTime != nil {
		const prefix string = ",\"exchange_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExchangeTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment41(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment42(in *jlexer.Lexer, out *ESubscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sub":
			if in.IsNull() {
				in.Skip()
				out.Sub = nil
			} else {
				if out.Sub == nil {
					out.Sub = new(Subscription)
				}
				(*out.Sub).UnmarshalEasyJSON(in)
			}
		case "err":
			if in.IsNull() {
				in.Skip()
				out.Err = nil
			} else {
				if out.Err == nil {
					out.Err = new(string)
				}
				*out.Err = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment42(out *jwriter.Writer, in ESubscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sub != nil {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sub).MarshalEasyJSON(out)
	}
	if in.Err != nil {
		const prefix string = ",\"err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ESubscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ESubscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ESubscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ESubscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment42(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment43(in *jlexer.Lexer, out *EInvoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inv":
			if in.IsNull() {
				in.Skip()
				out.Inv = nil
			} else {
				if out.Inv == nil {
					out.Inv = new(Invoice)
				}
				(*out.Inv).UnmarshalEasyJSON(in)
			}
		case "err":
			if in.IsNull() {
				in.Skip()
				out.Err = nil
			} else {
				if out.Err == nil {
					out.Err = new(string)
				}
				*out.Err = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment43(out *jwriter.Writer, in EInvoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Inv != nil {
		const prefix string = ",\"inv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Inv).MarshalEasyJSON(out)
	}
	if in.Err != nil {
		const prefix string = ",\"err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EInvoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EInvoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EInvoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EInvoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment43(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment44(in *jlexer.Lexer, out *DiffSubRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "dst":
			if in.IsNull() {
				in.Skip()
				out.Dst = nil
			} else {
				if out.Dst == nil {
					out.Dst = new(Subscription)
				}
				(*out.Dst).UnmarshalEasyJSON(in)
			}
		case "src":
			if in.IsNull() {
				in.Skip()
				out.Src = nil
			} else {
				if out.Src == nil {
					out.Src = new(Subscription)
				}
				(*out.Src).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment44(out *jwriter.Writer, in DiffSubRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Dst != nil {
		const prefix string = ",\"dst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Dst).MarshalEasyJSON(out)
	}
	if in.Src != nil {
		const prefix string = ",\"src\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Src).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiffSubRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiffSubRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiffSubRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiffSubRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment44(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment45(in *jlexer.Lexer, out *Customer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if out.Contacts == nil {
					if !in.IsDelim(']') {
						out.Contacts = make([]*Contact, 0, 8)
					} else {
						out.Contacts = []*Contact{}
					}
				} else {
					out.Contacts = (out.Contacts)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *Contact
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(Contact)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.Contacts = append(out.Contacts, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "billing_info":
			if in.IsNull() {
				in.Skip()
				out.BillingInfo = nil
			} else {
				if out.BillingInfo == nil {
					out.BillingInfo = new(BillingInfo)
				}
				(*out.BillingInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment45(out *jwriter.Writer, in Customer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Contacts) != 0 {
		const prefix string = ",\"contacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Contacts {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.BillingInfo != nil {
		const prefix string = ",\"billing_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BillingInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Customer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Customer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Customer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Customer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment45(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment46(in *jlexer.Lexer, out *CreditCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "credit":
			if in.IsNull() {
				in.Skip()
				out.Credit = nil
			} else {
				if out.Credit == nil {
					out.Credit = new(float32)
				}
				*out.Credit = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment46(out *jwriter.Writer, in CreditCode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Credit != nil {
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Credit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreditCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreditCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreditCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreditCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment46(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment47(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "job_title":
			if in.IsNull() {
				in.Skip()
				out.JobTitle = nil
			} else {
				if out.JobTitle == nil {
					out.JobTitle = new(string)
				}
				*out.JobTitle = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "primary":
			if in.IsNull() {
				in.Skip()
				out.Primary = nil
			} else {
				if out.Primary == nil {
					out.Primary = new(bool)
				}
				*out.Primary = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment47(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Email))
	}
	if in.Phone != nil {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Phone))
	}
	if in.JobTitle != nil {
		const prefix string = ",\"job_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JobTitle))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Primary != nil {
		const prefix string = ",\"primary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Primary))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment47(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment48(in *jlexer.Lexer, out *Comments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]*Comment, 0, 8)
					} else {
						out.Comments = []*Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *Comment
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(Comment)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.Comments = append(out.Comments, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment48(out *jwriter.Writer, in Comments) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Comments) != 0 {
		const prefix string = ",\"comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Comments {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment48(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment49(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "topic_id":
			if in.IsNull() {
				in.Skip()
				out.TopicId = nil
			} else {
				if out.TopicId == nil {
					out.TopicId = new(string)
				}
				*out.TopicId = string(in.String())
			}
		case "topic_type":
			if in.IsNull() {
				in.Skip()
				out.TopicType = nil
			} else {
				if out.TopicType == nil {
					out.TopicType = new(string)
				}
				*out.TopicType = string(in.String())
			}
		case "author_account_id":
			if in.IsNull() {
				in.Skip()
				out.AuthorAccountId = nil
			} else {
				if out.AuthorAccountId == nil {
					out.AuthorAccountId = new(string)
				}
				*out.AuthorAccountId = string(in.String())
			}
		case "author_id":
			if in.IsNull() {
				in.Skip()
				out.AuthorId = nil
			} else {
				if out.AuthorId == nil {
					out.AuthorId = new(string)
				}
				*out.AuthorId = string(in.String())
			}
		case "author_email":
			if in.IsNull() {
				in.Skip()
				out.AuthorEmail = nil
			} else {
				if out.AuthorEmail == nil {
					out.AuthorEmail = new(string)
				}
				*out.AuthorEmail = string(in.String())
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(string)
				}
				*out.Content = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment49(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.TopicId != nil {
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TopicId))
	}
	if in.TopicType != nil {
		const prefix string = ",\"topic_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TopicType))
	}
	if in.AuthorAccountId != nil {
		const prefix string = ",\"author_account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AuthorAccountId))
	}
	if in.AuthorId != nil {
		const prefix string = ",\"author_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AuthorId))
	}
	if in.AuthorEmail != nil {
		const prefix string = ",\"author_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AuthorEmail))
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Content))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment49(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment50(in *jlexer.Lexer, out *BillingInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "vat":
			if in.IsNull() {
				in.Skip()
				out.Vat = nil
			} else {
				if out.Vat == nil {
					out.Vat = new(string)
				}
				*out.Vat = string(in.String())
			}
		case "country_code":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment50(out *jwriter.Writer, in BillingInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Address != nil {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Address))
	}
	if in.Vat != nil {
		const prefix string = ",\"vat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Vat))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BillingInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BillingInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BillingInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BillingInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment50(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment51(in *jlexer.Lexer, out *Bill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(float32)
				}
				*out.Amount = float32(in.Float32())
			}
		case "invoice_ids":
			if in.IsNull() {
				in.Skip()
				out.InvoiceIds = nil
			} else {
				in.Delim('[')
				if out.InvoiceIds == nil {
					if !in.IsDelim(']') {
						out.InvoiceIds = make([]string, 0, 4)
					} else {
						out.InvoiceIds = []string{}
					}
				} else {
					out.InvoiceIds = (out.InvoiceIds)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.InvoiceIds = append(out.InvoiceIds, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "customer_info":
			if in.IsNull() {
				in.Skip()
				out.CustomerInfo = nil
			} else {
				if out.CustomerInfo == nil {
					out.CustomerInfo = new(Contact)
				}
				(*out.CustomerInfo).UnmarshalEasyJSON(in)
			}
		case "payment_method":
			if in.IsNull() {
				in.Skip()
				out.PaymentMethod = nil
			} else {
				if out.PaymentMethod == nil {
					out.PaymentMethod = new(string)
				}
				*out.PaymentMethod = string(in.String())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(int32)
				}
				*out.Year = int32(in.Int32())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment51(out *jwriter.Writer, in Bill) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Amount != nil {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Amount))
	}
	if len(in.InvoiceIds) != 0 {
		const prefix string = ",\"invoice_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.InvoiceIds {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.CustomerInfo != nil {
		const prefix string = ",\"customer_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CustomerInfo).MarshalEasyJSON(out)
	}
	if in.PaymentMethod != nil {
		const prefix string = ",\"payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PaymentMethod))
	}
	if in.Year != nil {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Year))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment51(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment52(in *jlexer.Lexer, out *BankInfoRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "referrer_id":
			if in.IsNull() {
				in.Skip()
				out.ReferrerId = nil
			} else {
				if out.ReferrerId == nil {
					out.ReferrerId = new(string)
				}
				*out.ReferrerId = string(in.String())
			}
		case "bank_name":
			if in.IsNull() {
				in.Skip()
				out.BankName = nil
			} else {
				if out.BankName == nil {
					out.BankName = new(string)
				}
				*out.BankName = string(in.String())
			}
		case "account_number":
			if in.IsNull() {
				in.Skip()
				out.AccountNumber = nil
			} else {
				if out.AccountNumber == nil {
					out.AccountNumber = new(string)
				}
				*out.AccountNumber = string(in.String())
			}
		case "card_number":
			if in.IsNull() {
				in.Skip()
				out.CardNumber = nil
			} else {
				if out.CardNumber == nil {
					out.CardNumber = new(string)
				}
				*out.CardNumber = string(in.String())
			}
		case "branch":
			if in.IsNull() {
				in.Skip()
				out.Branch = nil
			} else {
				if out.Branch == nil {
					out.Branch = new(string)
				}
				*out.Branch = string(in.String())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment52(out *jwriter.Writer, in BankInfoRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.ReferrerId != nil {
		const prefix string = ",\"referrer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferrerId))
	}
	if in.BankName != nil {
		const prefix string = ",\"bank_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BankName))
	}
	if in.AccountNumber != nil {
		const prefix string = ",\"account_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountNumber))
	}
	if in.CardNumber != nil {
		const prefix string = ",\"card_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CardNumber))
	}
	if in.Branch != nil {
		const prefix string = ",\"branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Branch))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankInfoRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankInfoRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankInfoRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankInfoRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment52(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment53(in *jlexer.Lexer, out *BankInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank_name":
			if in.IsNull() {
				in.Skip()
				out.BankName = nil
			} else {
				if out.BankName == nil {
					out.BankName = new(string)
				}
				*out.BankName = string(in.String())
			}
		case "account_number":
			if in.IsNull() {
				in.Skip()
				out.AccountNumber = nil
			} else {
				if out.AccountNumber == nil {
					out.AccountNumber = new(string)
				}
				*out.AccountNumber = string(in.String())
			}
		case "card_number":
			if in.IsNull() {
				in.Skip()
				out.CardNumber = nil
			} else {
				if out.CardNumber == nil {
					out.CardNumber = new(string)
				}
				*out.CardNumber = string(in.String())
			}
		case "branch":
			if in.IsNull() {
				in.Skip()
				out.Branch = nil
			} else {
				if out.Branch == nil {
					out.Branch = new(string)
				}
				*out.Branch = string(in.String())
			}
		case "fullname":
			if in.IsNull() {
				in.Skip()
				out.Fullname = nil
			} else {
				if out.Fullname == nil {
					out.Fullname = new(string)
				}
				*out.Fullname = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment53(out *jwriter.Writer, in BankInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BankName != nil {
		const prefix string = ",\"bank_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BankName))
	}
	if in.AccountNumber != nil {
		const prefix string = ",\"account_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountNumber))
	}
	if in.CardNumber != nil {
		const prefix string = ",\"card_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CardNumber))
	}
	if in.Branch != nil {
		const prefix string = ",\"branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Branch))
	}
	if in.Fullname != nil {
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fullname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment53(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment54(in *jlexer.Lexer, out *AgentInvoiceItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plan":
			if in.IsNull() {
				in.Skip()
				out.Plan = nil
			} else {
				if out.Plan == nil {
					out.Plan = new(string)
				}
				*out.Plan = string(in.String())
			}
		case "day_left":
			if in.IsNull() {
				in.Skip()
				out.DayLeft = nil
			} else {
				if out.DayLeft == nil {
					out.DayLeft = new(int32)
				}
				*out.DayLeft = int32(in.Int32())
			}
		case "agent_count":
			if in.IsNull() {
				in.Skip()
				out.AgentCount = nil
			} else {
				if out.AgentCount == nil {
					out.AgentCount = new(int32)
				}
				*out.AgentCount = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment54(out *jwriter.Writer, in AgentInvoiceItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Plan != nil {
		const prefix string = ",\"plan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Plan))
	}
	if in.DayLeft != nil {
		const prefix string = ",\"day_left\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DayLeft))
	}
	if in.AgentCount != nil {
		const prefix string = ",\"agent_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.AgentCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentInvoiceItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentInvoiceItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentInvoiceItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentInvoiceItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment54(l, v)
}
func easyjson3258bd9eDecodeGithubComSubizHeaderPayment55(in *jlexer.Lexer, out *Addon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(Currency)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Currency).UnmarshalJSON(data))
				}
			}
		case "charge_type":
			if in.IsNull() {
				in.Skip()
				out.ChargeType = nil
			} else {
				if out.ChargeType == nil {
					out.ChargeType = new(string)
				}
				*out.ChargeType = string(in.String())
			}
		case "period":
			if in.IsNull() {
				in.Skip()
				out.Period = nil
			} else {
				if out.Period == nil {
					out.Period = new(int32)
				}
				*out.Period = int32(in.Int32())
			}
		case "period_unit":
			if in.IsNull() {
				in.Skip()
				out.PeriodUnit = nil
			} else {
				if out.PeriodUnit == nil {
					out.PeriodUnit = new(string)
				}
				*out.PeriodUnit = string(in.String())
			}
		case "quantity":
			if in.IsNull() {
				in.Skip()
				out.Quantity = nil
			} else {
				if out.Quantity == nil {
					out.Quantity = new(int32)
				}
				*out.Quantity = int32(in.Int32())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3258bd9eEncodeGithubComSubizHeaderPayment55(out *jwriter.Writer, in Addon) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Currency))
	}
	if in.ChargeType != nil {
		const prefix string = ",\"charge_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChargeType))
	}
	if in.Period != nil {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Period))
	}
	if in.PeriodUnit != nil {
		const prefix string = ",\"period_unit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PeriodUnit))
	}
	if in.Quantity != nil {
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Quantity))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Addon) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Addon) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3258bd9eEncodeGithubComSubizHeaderPayment55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Addon) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Addon) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3258bd9eDecodeGithubComSubizHeaderPayment55(l, v)
}
