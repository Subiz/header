// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payment/payment.proto

/*
Package payment is a generated protocol buffer package.

It is generated from these files:
	payment/payment.proto

It has these top-level messages:
	StripeInfo
	PaymentMethod
	Limit
	Plan
	Subscription
	Bill
	Invoice
	InvoiceItem
	Contact
	BillingInfo
	Customer
	PromotionCode
	Constraint
	Credit
	ExchangeRate
	AccountNote
	InvoiceNote
	Log
	Addon
	String
*/
package payment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Currency int32

const (
	Currency_usd Currency = 0
	Currency_vnd Currency = 1
	Currency_brl Currency = 2
)

var Currency_name = map[int32]string{
	0: "usd",
	1: "vnd",
	2: "brl",
}
var Currency_value = map[string]int32{
	"usd": 0,
	"vnd": 1,
	"brl": 2,
}

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}
func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}
func (x *Currency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_value, data, "Currency")
	if err != nil {
		return err
	}
	*x = Currency(value)
	return nil
}
func (Currency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event int32

const (
	Event_LimitSynced  Event = 0
	Event_LimitUpdated Event = 1
)

var Event_name = map[int32]string{
	0: "LimitSynced",
	1: "LimitUpdated",
}
var Event_value = map[string]int32{
	"LimitSynced":  0,
	"LimitUpdated": 1,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PaymentMethod_Name int32

const (
	PaymentMethod_cash   PaymentMethod_Name = 0
	PaymentMethod_stripe PaymentMethod_Name = 1
)

var PaymentMethod_Name_name = map[int32]string{
	0: "cash",
	1: "stripe",
}
var PaymentMethod_Name_value = map[string]int32{
	"cash":   0,
	"stripe": 1,
}

func (x PaymentMethod_Name) Enum() *PaymentMethod_Name {
	p := new(PaymentMethod_Name)
	*p = x
	return p
}
func (x PaymentMethod_Name) String() string {
	return proto.EnumName(PaymentMethod_Name_name, int32(x))
}
func (x *PaymentMethod_Name) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentMethod_Name_value, data, "PaymentMethod_Name")
	if err != nil {
		return err
	}
	*x = PaymentMethod_Name(value)
	return nil
}
func (PaymentMethod_Name) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type PaymentMethod_Status int32

const (
	PaymentMethod_active   PaymentMethod_Status = 0
	PaymentMethod_inactive PaymentMethod_Status = 1
)

var PaymentMethod_Status_name = map[int32]string{
	0: "active",
	1: "inactive",
}
var PaymentMethod_Status_value = map[string]int32{
	"active":   0,
	"inactive": 1,
}

func (x PaymentMethod_Status) Enum() *PaymentMethod_Status {
	p := new(PaymentMethod_Status)
	*p = x
	return p
}
func (x PaymentMethod_Status) String() string {
	return proto.EnumName(PaymentMethod_Status_name, int32(x))
}
func (x *PaymentMethod_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentMethod_Status_value, data, "PaymentMethod_Status")
	if err != nil {
		return err
	}
	*x = PaymentMethod_Status(value)
	return nil
}
func (PaymentMethod_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type Plan_PeriodUnit int32

const (
	Plan_day   Plan_PeriodUnit = 0
	Plan_week  Plan_PeriodUnit = 1
	Plan_month Plan_PeriodUnit = 2
	Plan_year  Plan_PeriodUnit = 3
)

var Plan_PeriodUnit_name = map[int32]string{
	0: "day",
	1: "week",
	2: "month",
	3: "year",
}
var Plan_PeriodUnit_value = map[string]int32{
	"day":   0,
	"week":  1,
	"month": 2,
	"year":  3,
}

func (x Plan_PeriodUnit) Enum() *Plan_PeriodUnit {
	p := new(Plan_PeriodUnit)
	*p = x
	return p
}
func (x Plan_PeriodUnit) String() string {
	return proto.EnumName(Plan_PeriodUnit_name, int32(x))
}
func (x *Plan_PeriodUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Plan_PeriodUnit_value, data, "Plan_PeriodUnit")
	if err != nil {
		return err
	}
	*x = Plan_PeriodUnit(value)
	return nil
}
func (Plan_PeriodUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Plan_Type int32

const (
	Plan_free     Plan_Type = 0
	Plan_standard Plan_Type = 1
	Plan_advanced Plan_Type = 2
)

var Plan_Type_name = map[int32]string{
	0: "free",
	1: "standard",
	2: "advanced",
}
var Plan_Type_value = map[string]int32{
	"free":     0,
	"standard": 1,
	"advanced": 2,
}

func (x Plan_Type) Enum() *Plan_Type {
	p := new(Plan_Type)
	*p = x
	return p
}
func (x Plan_Type) String() string {
	return proto.EnumName(Plan_Type_name, int32(x))
}
func (x *Plan_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Plan_Type_value, data, "Plan_Type")
	if err != nil {
		return err
	}
	*x = Plan_Type(value)
	return nil
}
func (Plan_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

type Subscription_Status int32

const (
	Subscription_pending  Subscription_Status = 0
	Subscription_active   Subscription_Status = 1
	Subscription_inactive Subscription_Status = 2
	Subscription_trialing Subscription_Status = 3
)

var Subscription_Status_name = map[int32]string{
	0: "pending",
	1: "active",
	2: "inactive",
	3: "trialing",
}
var Subscription_Status_value = map[string]int32{
	"pending":  0,
	"active":   1,
	"inactive": 2,
	"trialing": 3,
}

func (x Subscription_Status) Enum() *Subscription_Status {
	p := new(Subscription_Status)
	*p = x
	return p
}
func (x Subscription_Status) String() string {
	return proto.EnumName(Subscription_Status_name, int32(x))
}
func (x *Subscription_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Subscription_Status_value, data, "Subscription_Status")
	if err != nil {
		return err
	}
	*x = Subscription_Status(value)
	return nil
}
func (Subscription_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Invoice_Status int32

const (
	Invoice_draft  Invoice_Status = 0
	Invoice_open   Invoice_Status = 1
	Invoice_closed Invoice_Status = 2
	Invoice_voided Invoice_Status = 3
)

var Invoice_Status_name = map[int32]string{
	0: "draft",
	1: "open",
	2: "closed",
	3: "voided",
}
var Invoice_Status_value = map[string]int32{
	"draft":  0,
	"open":   1,
	"closed": 2,
	"voided": 3,
}

func (x Invoice_Status) Enum() *Invoice_Status {
	p := new(Invoice_Status)
	*p = x
	return p
}
func (x Invoice_Status) String() string {
	return proto.EnumName(Invoice_Status_name, int32(x))
}
func (x *Invoice_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Invoice_Status_value, data, "Invoice_Status")
	if err != nil {
		return err
	}
	*x = Invoice_Status(value)
	return nil
}
func (Invoice_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type InvoiceItem_Type int32

const (
	InvoiceItem_plan  InvoiceItem_Type = 0
	InvoiceItem_addon InvoiceItem_Type = 1
)

var InvoiceItem_Type_name = map[int32]string{
	0: "plan",
	1: "addon",
}
var InvoiceItem_Type_value = map[string]int32{
	"plan":  0,
	"addon": 1,
}

func (x InvoiceItem_Type) Enum() *InvoiceItem_Type {
	p := new(InvoiceItem_Type)
	*p = x
	return p
}
func (x InvoiceItem_Type) String() string {
	return proto.EnumName(InvoiceItem_Type_name, int32(x))
}
func (x *InvoiceItem_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InvoiceItem_Type_value, data, "InvoiceItem_Type")
	if err != nil {
		return err
	}
	*x = InvoiceItem_Type(value)
	return nil
}
func (InvoiceItem_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Contact_Title int32

const (
	Contact_mr  Contact_Title = 0
	Contact_ms  Contact_Title = 1
	Contact_mrs Contact_Title = 2
	Contact_dr  Contact_Title = 3
)

var Contact_Title_name = map[int32]string{
	0: "mr",
	1: "ms",
	2: "mrs",
	3: "dr",
}
var Contact_Title_value = map[string]int32{
	"mr":  0,
	"ms":  1,
	"mrs": 2,
	"dr":  3,
}

func (x Contact_Title) Enum() *Contact_Title {
	p := new(Contact_Title)
	*p = x
	return p
}
func (x Contact_Title) String() string {
	return proto.EnumName(Contact_Title_name, int32(x))
}
func (x *Contact_Title) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Contact_Title_value, data, "Contact_Title")
	if err != nil {
		return err
	}
	*x = Contact_Title(value)
	return nil
}
func (Contact_Title) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type PromotionCode_Type int32

const (
	PromotionCode_fixed_amount    PromotionCode_Type = 0
	PromotionCode_percent         PromotionCode_Type = 1
	PromotionCode_credit          PromotionCode_Type = 2
	PromotionCode_referral_credit PromotionCode_Type = 3
)

var PromotionCode_Type_name = map[int32]string{
	0: "fixed_amount",
	1: "percent",
	2: "credit",
	3: "referral_credit",
}
var PromotionCode_Type_value = map[string]int32{
	"fixed_amount":    0,
	"percent":         1,
	"credit":          2,
	"referral_credit": 3,
}

func (x PromotionCode_Type) Enum() *PromotionCode_Type {
	p := new(PromotionCode_Type)
	*p = x
	return p
}
func (x PromotionCode_Type) String() string {
	return proto.EnumName(PromotionCode_Type_name, int32(x))
}
func (x *PromotionCode_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionCode_Type_value, data, "PromotionCode_Type")
	if err != nil {
		return err
	}
	*x = PromotionCode_Type(value)
	return nil
}
func (PromotionCode_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type Log_Action int32

const (
	Log_create_invoice             Log_Action = 0
	Log_change_invoice_status      Log_Action = 1
	Log_create_discount            Log_Action = 2
	Log_delete_discount            Log_Action = 3
	Log_redeem_discount            Log_Action = 4
	Log_add_credit                 Log_Action = 5
	Log_redeem_credit              Log_Action = 6
	Log_delete_account             Log_Action = 7
	Log_change_plan                Log_Action = 8
	Log_change_subscription_status Log_Action = 9
	Log_renew_subscription         Log_Action = 10
	Log_click_subscribe_button     Log_Action = 11
	Log_pay_for_referrer           Log_Action = 12
	Log_add_money_for_referrer     Log_Action = 13
	Log_pay_invoice                Log_Action = 14
)

var Log_Action_name = map[int32]string{
	0:  "create_invoice",
	1:  "change_invoice_status",
	2:  "create_discount",
	3:  "delete_discount",
	4:  "redeem_discount",
	5:  "add_credit",
	6:  "redeem_credit",
	7:  "delete_account",
	8:  "change_plan",
	9:  "change_subscription_status",
	10: "renew_subscription",
	11: "click_subscribe_button",
	12: "pay_for_referrer",
	13: "add_money_for_referrer",
	14: "pay_invoice",
}
var Log_Action_value = map[string]int32{
	"create_invoice":             0,
	"change_invoice_status":      1,
	"create_discount":            2,
	"delete_discount":            3,
	"redeem_discount":            4,
	"add_credit":                 5,
	"redeem_credit":              6,
	"delete_account":             7,
	"change_plan":                8,
	"change_subscription_status": 9,
	"renew_subscription":         10,
	"click_subscribe_button":     11,
	"pay_for_referrer":           12,
	"add_money_for_referrer":     13,
	"pay_invoice":                14,
}

func (x Log_Action) Enum() *Log_Action {
	p := new(Log_Action)
	*p = x
	return p
}
func (x Log_Action) String() string {
	return proto.EnumName(Log_Action_name, int32(x))
}
func (x *Log_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Log_Action_value, data, "Log_Action")
	if err != nil {
		return err
	}
	*x = Log_Action(value)
	return nil
}
func (Log_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type Addon_Type int32

const (
	Addon_credit Addon_Type = 0
	Addon_agent  Addon_Type = 1
)

var Addon_Type_name = map[int32]string{
	0: "credit",
	1: "agent",
}
var Addon_Type_value = map[string]int32{
	"credit": 0,
	"agent":  1,
}

func (x Addon_Type) Enum() *Addon_Type {
	p := new(Addon_Type)
	*p = x
	return p
}
func (x Addon_Type) String() string {
	return proto.EnumName(Addon_Type_name, int32(x))
}
func (x *Addon_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_Type_value, data, "Addon_Type")
	if err != nil {
		return err
	}
	*x = Addon_Type(value)
	return nil
}
func (Addon_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

type Addon_ChargeType int32

const (
	Addon_one_time  Addon_ChargeType = 0
	Addon_recurring Addon_ChargeType = 1
)

var Addon_ChargeType_name = map[int32]string{
	0: "one_time",
	1: "recurring",
}
var Addon_ChargeType_value = map[string]int32{
	"one_time":  0,
	"recurring": 1,
}

func (x Addon_ChargeType) Enum() *Addon_ChargeType {
	p := new(Addon_ChargeType)
	*p = x
	return p
}
func (x Addon_ChargeType) String() string {
	return proto.EnumName(Addon_ChargeType_name, int32(x))
}
func (x *Addon_ChargeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_ChargeType_value, data, "Addon_ChargeType")
	if err != nil {
		return err
	}
	*x = Addon_ChargeType(value)
	return nil
}
func (Addon_ChargeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 1} }

type Addon_PeriodUnit int32

const (
	Addon_day   Addon_PeriodUnit = 0
	Addon_week  Addon_PeriodUnit = 1
	Addon_month Addon_PeriodUnit = 2
	Addon_year  Addon_PeriodUnit = 3
)

var Addon_PeriodUnit_name = map[int32]string{
	0: "day",
	1: "week",
	2: "month",
	3: "year",
}
var Addon_PeriodUnit_value = map[string]int32{
	"day":   0,
	"week":  1,
	"month": 2,
	"year":  3,
}

func (x Addon_PeriodUnit) Enum() *Addon_PeriodUnit {
	p := new(Addon_PeriodUnit)
	*p = x
	return p
}
func (x Addon_PeriodUnit) String() string {
	return proto.EnumName(Addon_PeriodUnit_name, int32(x))
}
func (x *Addon_PeriodUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_PeriodUnit_value, data, "Addon_PeriodUnit")
	if err != nil {
		return err
	}
	*x = Addon_PeriodUnit(value)
	return nil
}
func (Addon_PeriodUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 2} }

type StripeInfo struct {
	CardLast4        *string `protobuf:"bytes,2,opt,name=card_last4,json=cardLast4" json:"card_last4,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StripeInfo) Reset()                    { *m = StripeInfo{} }
func (m *StripeInfo) String() string            { return proto.CompactTextString(m) }
func (*StripeInfo) ProtoMessage()               {}
func (*StripeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StripeInfo) GetCardLast4() string {
	if m != nil && m.CardLast4 != nil {
		return *m.CardLast4
	}
	return ""
}

func (m *StripeInfo) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

type PaymentMethod struct {
	Name             *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountId        *string     `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StripeInfo       *StripeInfo `protobuf:"bytes,4,opt,name=stripe_info,json=stripeInfo" json:"stripe_info,omitempty"`
	Status           *string     `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	Primary          *bool       `protobuf:"varint,6,opt,name=primary" json:"primary,omitempty"`
	StripeToken      *bool       `protobuf:"varint,7,opt,name=stripe_token,json=stripeToken" json:"stripe_token,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PaymentMethod) Reset()                    { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()               {}
func (*PaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PaymentMethod) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PaymentMethod) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PaymentMethod) GetStripeInfo() *StripeInfo {
	if m != nil {
		return m.StripeInfo
	}
	return nil
}

func (m *PaymentMethod) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *PaymentMethod) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

func (m *PaymentMethod) GetStripeToken() bool {
	if m != nil && m.StripeToken != nil {
		return *m.StripeToken
	}
	return false
}

type Limit struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	MaxAutomations   *int32          `protobuf:"varint,2,opt,name=max_automations,json=maxAutomations" json:"max_automations,omitempty"`
	MaxConcurrents   *int32          `protobuf:"varint,3,opt,name=max_concurrents,json=maxConcurrents" json:"max_concurrents,omitempty"`
	MaxConversations *int32          `protobuf:"varint,4,opt,name=max_conversations,json=maxConversations" json:"max_conversations,omitempty"`
	MaxSegments      *int32          `protobuf:"varint,5,opt,name=max_segments,json=maxSegments" json:"max_segments,omitempty"`
	MaxAgents        *int32          `protobuf:"varint,6,opt,name=max_agents,json=maxAgents" json:"max_agents,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Limit) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Limit) GetMaxAutomations() int32 {
	if m != nil && m.MaxAutomations != nil {
		return *m.MaxAutomations
	}
	return 0
}

func (m *Limit) GetMaxConcurrents() int32 {
	if m != nil && m.MaxConcurrents != nil {
		return *m.MaxConcurrents
	}
	return 0
}

func (m *Limit) GetMaxConversations() int32 {
	if m != nil && m.MaxConversations != nil {
		return *m.MaxConversations
	}
	return 0
}

func (m *Limit) GetMaxSegments() int32 {
	if m != nil && m.MaxSegments != nil {
		return *m.MaxSegments
	}
	return 0
}

func (m *Limit) GetMaxAgents() int32 {
	if m != nil && m.MaxAgents != nil {
		return *m.MaxAgents
	}
	return 0
}

type Plan struct {
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Limit            *Limit   `protobuf:"bytes,3,opt,name=limit" json:"limit,omitempty"`
	Price            *float32 `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Currency         *string  `protobuf:"bytes,5,opt,name=currency" json:"currency,omitempty"`
	Created          *int64   `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	TrialPeriodDays  *int32   `protobuf:"varint,9,opt,name=trial_period_days,json=trialPeriodDays" json:"trial_period_days,omitempty"`
	Period           *int32   `protobuf:"varint,10,opt,name=period" json:"period,omitempty"`
	PeriodUnit       *string  `protobuf:"bytes,11,opt,name=period_unit,json=periodUnit" json:"period_unit,omitempty"`
	Level            *int32   `protobuf:"varint,14,opt,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Plan) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Plan) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Plan) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Plan) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Plan) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Plan) GetTrialPeriodDays() int32 {
	if m != nil && m.TrialPeriodDays != nil {
		return *m.TrialPeriodDays
	}
	return 0
}

func (m *Plan) GetPeriod() int32 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return 0
}

func (m *Plan) GetPeriodUnit() string {
	if m != nil && m.PeriodUnit != nil {
		return *m.PeriodUnit
	}
	return ""
}

func (m *Plan) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

type Subscription struct {
	AccountId             *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PromotionCode         *string  `protobuf:"bytes,4,opt,name=promotion_code,json=promotionCode" json:"promotion_code,omitempty"`
	BillingCycleStart     *int64   `protobuf:"varint,5,opt,name=billing_cycle_start,json=billingCycleStart" json:"billing_cycle_start,omitempty"`
	BillingCycleEnd       *int64   `protobuf:"varint,6,opt,name=billing_cycle_end,json=billingCycleEnd" json:"billing_cycle_end,omitempty"`
	AutoRenew             *bool    `protobuf:"varint,9,opt,name=auto_renew,json=autoRenew" json:"auto_renew,omitempty"`
	Status                *string  `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	Created               *int64   `protobuf:"varint,11,opt,name=created" json:"created,omitempty"`
	BillingCycleMonth     *int32   `protobuf:"varint,15,opt,name=billing_cycle_month,json=billingCycleMonth" json:"billing_cycle_month,omitempty"`
	NextBillingCycleMonth *int32   `protobuf:"varint,16,opt,name=next_billing_cycle_month,json=nextBillingCycleMonth" json:"next_billing_cycle_month,omitempty"`
	Plan                  *string  `protobuf:"bytes,17,opt,name=plan" json:"plan,omitempty"`
	TrialStart            *int64   `protobuf:"varint,18,opt,name=trial_start,json=trialStart" json:"trial_start,omitempty"`
	TrialEnd              *int64   `protobuf:"varint,19,opt,name=trial_end,json=trialEnd" json:"trial_end,omitempty"`
	Addons                []*Addon `protobuf:"bytes,21,rep,name=addons" json:"addons,omitempty"`
	Limit                 *Limit   `protobuf:"bytes,22,opt,name=limit" json:"limit,omitempty"`
	Year                  *int32   `protobuf:"varint,23,opt,name=year" json:"year,omitempty"`
	AgentCount            *int32   `protobuf:"varint,24,opt,name=agent_count,json=agentCount" json:"agent_count,omitempty"`
	PlanPrice             *float32 `protobuf:"fixed32,25,opt,name=plan_price,json=planPrice" json:"plan_price,omitempty"`
	XXX_unrecognized      []byte   `json:"-"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Subscription) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Subscription) GetPromotionCode() string {
	if m != nil && m.PromotionCode != nil {
		return *m.PromotionCode
	}
	return ""
}

func (m *Subscription) GetBillingCycleStart() int64 {
	if m != nil && m.BillingCycleStart != nil {
		return *m.BillingCycleStart
	}
	return 0
}

func (m *Subscription) GetBillingCycleEnd() int64 {
	if m != nil && m.BillingCycleEnd != nil {
		return *m.BillingCycleEnd
	}
	return 0
}

func (m *Subscription) GetAutoRenew() bool {
	if m != nil && m.AutoRenew != nil {
		return *m.AutoRenew
	}
	return false
}

func (m *Subscription) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Subscription) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Subscription) GetBillingCycleMonth() int32 {
	if m != nil && m.BillingCycleMonth != nil {
		return *m.BillingCycleMonth
	}
	return 0
}

func (m *Subscription) GetNextBillingCycleMonth() int32 {
	if m != nil && m.NextBillingCycleMonth != nil {
		return *m.NextBillingCycleMonth
	}
	return 0
}

func (m *Subscription) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *Subscription) GetTrialStart() int64 {
	if m != nil && m.TrialStart != nil {
		return *m.TrialStart
	}
	return 0
}

func (m *Subscription) GetTrialEnd() int64 {
	if m != nil && m.TrialEnd != nil {
		return *m.TrialEnd
	}
	return 0
}

func (m *Subscription) GetAddons() []*Addon {
	if m != nil {
		return m.Addons
	}
	return nil
}

func (m *Subscription) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Subscription) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Subscription) GetAgentCount() int32 {
	if m != nil && m.AgentCount != nil {
		return *m.AgentCount
	}
	return 0
}

func (m *Subscription) GetPlanPrice() float32 {
	if m != nil && m.PlanPrice != nil {
		return *m.PlanPrice
	}
	return 0
}

type Bill struct {
	Id               *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Amount           *float32 `protobuf:"fixed32,5,opt,name=amount" json:"amount,omitempty"`
	InvoiceIds       []string `protobuf:"bytes,6,rep,name=invoice_ids,json=invoiceIds" json:"invoice_ids,omitempty"`
	Created          *int64   `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	CustomerInfo     *Contact `protobuf:"bytes,8,opt,name=customer_info,json=customerInfo" json:"customer_info,omitempty"`
	PaymentMethod    *string  `protobuf:"bytes,10,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Year             *int32   `protobuf:"varint,11,opt,name=year" json:"year,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Bill) Reset()                    { *m = Bill{} }
func (m *Bill) String() string            { return proto.CompactTextString(m) }
func (*Bill) ProtoMessage()               {}
func (*Bill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Bill) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Bill) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Bill) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Bill) GetInvoiceIds() []string {
	if m != nil {
		return m.InvoiceIds
	}
	return nil
}

func (m *Bill) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Bill) GetCustomerInfo() *Contact {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (m *Bill) GetPaymentMethod() string {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return ""
}

func (m *Bill) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

type Invoice struct {
	AccountId        *string        `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string        `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AmountDue        *float32       `protobuf:"fixed32,4,opt,name=amount_due,json=amountDue" json:"amount_due,omitempty"`
	PromotionCode    *string        `protobuf:"bytes,5,opt,name=promotion_code,json=promotionCode" json:"promotion_code,omitempty"`
	Description      *string        `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Currency         *string        `protobuf:"bytes,7,opt,name=currency" json:"currency,omitempty"`
	BillingInfo      *BillingInfo   `protobuf:"bytes,8,opt,name=billing_info,json=billingInfo" json:"billing_info,omitempty"`
	DueDate          *int64         `protobuf:"varint,9,opt,name=due_date,json=dueDate" json:"due_date,omitempty"`
	Status           *string        `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	Created          *int64         `protobuf:"varint,11,opt,name=created" json:"created,omitempty"`
	LineItems        []*InvoiceItem `protobuf:"bytes,12,rep,name=line_items,json=lineItems" json:"line_items,omitempty"`
	ExchangeRate     *ExchangeRate  `protobuf:"bytes,13,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate,omitempty"`
	Subtotal         *float32       `protobuf:"fixed32,14,opt,name=subtotal" json:"subtotal,omitempty"`
	TaxPercent       *float32       `protobuf:"fixed32,15,opt,name=tax_percent,json=taxPercent" json:"tax_percent,omitempty"`
	Tax              *float32       `protobuf:"fixed32,16,opt,name=tax" json:"tax,omitempty"`
	Total            *float32       `protobuf:"fixed32,17,opt,name=total" json:"total,omitempty"`
	Updated          *int64         `protobuf:"varint,18,opt,name=updated" json:"updated,omitempty"`
	Year             *int32         `protobuf:"varint,19,opt,name=year" json:"year,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Invoice) Reset()                    { *m = Invoice{} }
func (m *Invoice) String() string            { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()               {}
func (*Invoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Invoice) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Invoice) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Invoice) GetAmountDue() float32 {
	if m != nil && m.AmountDue != nil {
		return *m.AmountDue
	}
	return 0
}

func (m *Invoice) GetPromotionCode() string {
	if m != nil && m.PromotionCode != nil {
		return *m.PromotionCode
	}
	return ""
}

func (m *Invoice) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Invoice) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Invoice) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

func (m *Invoice) GetDueDate() int64 {
	if m != nil && m.DueDate != nil {
		return *m.DueDate
	}
	return 0
}

func (m *Invoice) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Invoice) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Invoice) GetLineItems() []*InvoiceItem {
	if m != nil {
		return m.LineItems
	}
	return nil
}

func (m *Invoice) GetExchangeRate() *ExchangeRate {
	if m != nil {
		return m.ExchangeRate
	}
	return nil
}

func (m *Invoice) GetSubtotal() float32 {
	if m != nil && m.Subtotal != nil {
		return *m.Subtotal
	}
	return 0
}

func (m *Invoice) GetTaxPercent() float32 {
	if m != nil && m.TaxPercent != nil {
		return *m.TaxPercent
	}
	return 0
}

func (m *Invoice) GetTax() float32 {
	if m != nil && m.Tax != nil {
		return *m.Tax
	}
	return 0
}

func (m *Invoice) GetTotal() float32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *Invoice) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Invoice) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

type InvoiceItem struct {
	Id               *string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Amount           *float32  `protobuf:"fixed32,2,opt,name=amount" json:"amount,omitempty"`
	Currency         *Currency `protobuf:"varint,3,opt,name=currency,enum=payment.Currency" json:"currency,omitempty"`
	AccountId        *string   `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Description      *string   `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	InvoiceId        *string   `protobuf:"bytes,6,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	Quantity         *int32    `protobuf:"varint,7,opt,name=quantity" json:"quantity,omitempty"`
	StartPeriod      *int64    `protobuf:"varint,8,opt,name=start_period,json=startPeriod" json:"start_period,omitempty"`
	EndPeriod        *int64    `protobuf:"varint,9,opt,name=end_period,json=endPeriod" json:"end_period,omitempty"`
	Type             *string   `protobuf:"bytes,10,opt,name=type" json:"type,omitempty"`
	PlanType         *string   `protobuf:"bytes,11,opt,name=plan_type,json=planType" json:"plan_type,omitempty"`
	AddonType        *string   `protobuf:"bytes,12,opt,name=addon_type,json=addonType" json:"addon_type,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *InvoiceItem) Reset()                    { *m = InvoiceItem{} }
func (m *InvoiceItem) String() string            { return proto.CompactTextString(m) }
func (*InvoiceItem) ProtoMessage()               {}
func (*InvoiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InvoiceItem) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *InvoiceItem) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *InvoiceItem) GetCurrency() Currency {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return Currency_usd
}

func (m *InvoiceItem) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *InvoiceItem) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *InvoiceItem) GetInvoiceId() string {
	if m != nil && m.InvoiceId != nil {
		return *m.InvoiceId
	}
	return ""
}

func (m *InvoiceItem) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *InvoiceItem) GetStartPeriod() int64 {
	if m != nil && m.StartPeriod != nil {
		return *m.StartPeriod
	}
	return 0
}

func (m *InvoiceItem) GetEndPeriod() int64 {
	if m != nil && m.EndPeriod != nil {
		return *m.EndPeriod
	}
	return 0
}

func (m *InvoiceItem) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *InvoiceItem) GetPlanType() string {
	if m != nil && m.PlanType != nil {
		return *m.PlanType
	}
	return ""
}

func (m *InvoiceItem) GetAddonType() string {
	if m != nil && m.AddonType != nil {
		return *m.AddonType
	}
	return ""
}

type Contact struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email            *string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone            *string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	JobTitle         *string `protobuf:"bytes,5,opt,name=job_title,json=jobTitle" json:"job_title,omitempty"`
	Title            *string `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Primary          *bool   `protobuf:"varint,7,opt,name=primary" json:"primary,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Contact) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Contact) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Contact) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Contact) GetJobTitle() string {
	if m != nil && m.JobTitle != nil {
		return *m.JobTitle
	}
	return ""
}

func (m *Contact) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Contact) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

type BillingInfo struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Address          *string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Vat              *string `protobuf:"bytes,4,opt,name=vat" json:"vat,omitempty"`
	CountryCode      *string `protobuf:"bytes,5,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BillingInfo) Reset()                    { *m = BillingInfo{} }
func (m *BillingInfo) String() string            { return proto.CompactTextString(m) }
func (*BillingInfo) ProtoMessage()               {}
func (*BillingInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BillingInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BillingInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *BillingInfo) GetVat() string {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return ""
}

func (m *BillingInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

type Customer struct {
	Id               *string      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId        *string      `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Contacts         []*Contact   `protobuf:"bytes,4,rep,name=contacts" json:"contacts,omitempty"`
	Created          *int64       `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	BillingInfo      *BillingInfo `protobuf:"bytes,6,opt,name=billing_info,json=billingInfo" json:"billing_info,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Customer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Customer) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Customer) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Customer) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Customer) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

type PromotionCode struct {
	Description      *string     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Type             *string     `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	Value            *float32    `protobuf:"fixed32,4,opt,name=value" json:"value,omitempty"`
	TimesRedeemed    *int32      `protobuf:"varint,5,opt,name=times_redeemed,json=timesRedeemed" json:"times_redeemed,omitempty"`
	CreatedBy        *string     `protobuf:"bytes,9,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Created          *int64      `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Code             *string     `protobuf:"bytes,11,opt,name=code" json:"code,omitempty"`
	Constraint       *Constraint `protobuf:"bytes,12,opt,name=constraint" json:"constraint,omitempty"`
	Name             *string     `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PromotionCode) Reset()                    { *m = PromotionCode{} }
func (m *PromotionCode) String() string            { return proto.CompactTextString(m) }
func (*PromotionCode) ProtoMessage()               {}
func (*PromotionCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PromotionCode) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PromotionCode) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *PromotionCode) GetValue() float32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *PromotionCode) GetTimesRedeemed() int32 {
	if m != nil && m.TimesRedeemed != nil {
		return *m.TimesRedeemed
	}
	return 0
}

func (m *PromotionCode) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *PromotionCode) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *PromotionCode) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *PromotionCode) GetConstraint() *Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *PromotionCode) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Constraint struct {
	Start            *int64   `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End              *int64   `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Plan             *string  `protobuf:"bytes,3,opt,name=plan" json:"plan,omitempty"`
	AccountId        *string  `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MaxRedemptions   *int32   `protobuf:"varint,5,opt,name=max_redemptions,json=maxRedemptions" json:"max_redemptions,omitempty"`
	ReferrerId       *string  `protobuf:"bytes,6,opt,name=referrer_id,json=referrerId" json:"referrer_id,omitempty"`
	MinAmount        *float32 `protobuf:"fixed32,7,opt,name=min_amount,json=minAmount" json:"min_amount,omitempty"`
	MaxAmount        *float32 `protobuf:"fixed32,8,opt,name=max_amount,json=maxAmount" json:"max_amount,omitempty"`
	Addon            *string  `protobuf:"bytes,9,opt,name=addon" json:"addon,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Constraint) Reset()                    { *m = Constraint{} }
func (m *Constraint) String() string            { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()               {}
func (*Constraint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Constraint) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *Constraint) GetEnd() int64 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

func (m *Constraint) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *Constraint) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Constraint) GetMaxRedemptions() int32 {
	if m != nil && m.MaxRedemptions != nil {
		return *m.MaxRedemptions
	}
	return 0
}

func (m *Constraint) GetReferrerId() string {
	if m != nil && m.ReferrerId != nil {
		return *m.ReferrerId
	}
	return ""
}

func (m *Constraint) GetMinAmount() float32 {
	if m != nil && m.MinAmount != nil {
		return *m.MinAmount
	}
	return 0
}

func (m *Constraint) GetMaxAmount() float32 {
	if m != nil && m.MaxAmount != nil {
		return *m.MaxAmount
	}
	return 0
}

func (m *Constraint) GetAddon() string {
	if m != nil && m.Addon != nil {
		return *m.Addon
	}
	return ""
}

type Credit struct {
	AccountId        *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Amount           *float32 `protobuf:"fixed32,3,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Credit) Reset()                    { *m = Credit{} }
func (m *Credit) String() string            { return proto.CompactTextString(m) }
func (*Credit) ProtoMessage()               {}
func (*Credit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Credit) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Credit) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type ExchangeRate struct {
	FromCurrency     *string  `protobuf:"bytes,2,opt,name=from_currency,json=fromCurrency" json:"from_currency,omitempty"`
	ToCurrency       *string  `protobuf:"bytes,3,opt,name=to_currency,json=toCurrency" json:"to_currency,omitempty"`
	ExchangeRate     *float32 `protobuf:"fixed32,4,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate,omitempty"`
	ExchangeDate     *int64   `protobuf:"varint,5,opt,name=exchange_date,json=exchangeDate" json:"exchange_date,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ExchangeRate) Reset()                    { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()               {}
func (*ExchangeRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExchangeRate) GetFromCurrency() string {
	if m != nil && m.FromCurrency != nil {
		return *m.FromCurrency
	}
	return ""
}

func (m *ExchangeRate) GetToCurrency() string {
	if m != nil && m.ToCurrency != nil {
		return *m.ToCurrency
	}
	return ""
}

func (m *ExchangeRate) GetExchangeRate() float32 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *ExchangeRate) GetExchangeDate() int64 {
	if m != nil && m.ExchangeDate != nil {
		return *m.ExchangeDate
	}
	return 0
}

type AccountNote struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Message          *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	CreatedBy        *string `protobuf:"bytes,4,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Created          *int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountNote) Reset()                    { *m = AccountNote{} }
func (m *AccountNote) String() string            { return proto.CompactTextString(m) }
func (*AccountNote) ProtoMessage()               {}
func (*AccountNote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AccountNote) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AccountNote) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *AccountNote) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *AccountNote) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type InvoiceNote struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	InvoiceId        *string `protobuf:"bytes,3,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	Message          *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	CreatedBy        *string `protobuf:"bytes,5,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Created          *int64  `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InvoiceNote) Reset()                    { *m = InvoiceNote{} }
func (m *InvoiceNote) String() string            { return proto.CompactTextString(m) }
func (*InvoiceNote) ProtoMessage()               {}
func (*InvoiceNote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *InvoiceNote) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *InvoiceNote) GetInvoiceId() string {
	if m != nil && m.InvoiceId != nil {
		return *m.InvoiceId
	}
	return ""
}

func (m *InvoiceNote) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *InvoiceNote) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *InvoiceNote) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type Log struct {
	User             *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Id               *string `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
	Action           *string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	Created          *int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Description      *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	AccountId        *string `protobuf:"bytes,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Month            *int32  `protobuf:"varint,7,opt,name=month" json:"month,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Log) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *Log) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Log) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *Log) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Log) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Log) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Log) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

type Addon struct {
	Type             *string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name             *string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Price            *float32  `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Currency         *Currency `protobuf:"varint,5,opt,name=currency,enum=payment.Currency" json:"currency,omitempty"`
	ChargeType       *string   `protobuf:"bytes,6,opt,name=charge_type,json=chargeType" json:"charge_type,omitempty"`
	Period           *int32    `protobuf:"varint,7,opt,name=period" json:"period,omitempty"`
	PeriodUnit       *string   `protobuf:"bytes,8,opt,name=period_unit,json=periodUnit" json:"period_unit,omitempty"`
	Quantity         *int32    `protobuf:"varint,9,opt,name=quantity" json:"quantity,omitempty"`
	Created          *int64    `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Addon) Reset()                    { *m = Addon{} }
func (m *Addon) String() string            { return proto.CompactTextString(m) }
func (*Addon) ProtoMessage()               {}
func (*Addon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Addon) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Addon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Addon) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Addon) GetCurrency() Currency {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return Currency_usd
}

func (m *Addon) GetChargeType() string {
	if m != nil && m.ChargeType != nil {
		return *m.ChargeType
	}
	return ""
}

func (m *Addon) GetPeriod() int32 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return 0
}

func (m *Addon) GetPeriodUnit() string {
	if m != nil && m.PeriodUnit != nil {
		return *m.PeriodUnit
	}
	return ""
}

func (m *Addon) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *Addon) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type String struct {
	Str              *string `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *String) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

func init() {
	proto.RegisterType((*StripeInfo)(nil), "payment.StripeInfo")
	proto.RegisterType((*PaymentMethod)(nil), "payment.PaymentMethod")
	proto.RegisterType((*Limit)(nil), "payment.Limit")
	proto.RegisterType((*Plan)(nil), "payment.Plan")
	proto.RegisterType((*Subscription)(nil), "payment.Subscription")
	proto.RegisterType((*Bill)(nil), "payment.Bill")
	proto.RegisterType((*Invoice)(nil), "payment.Invoice")
	proto.RegisterType((*InvoiceItem)(nil), "payment.InvoiceItem")
	proto.RegisterType((*Contact)(nil), "payment.Contact")
	proto.RegisterType((*BillingInfo)(nil), "payment.BillingInfo")
	proto.RegisterType((*Customer)(nil), "payment.Customer")
	proto.RegisterType((*PromotionCode)(nil), "payment.PromotionCode")
	proto.RegisterType((*Constraint)(nil), "payment.Constraint")
	proto.RegisterType((*Credit)(nil), "payment.Credit")
	proto.RegisterType((*ExchangeRate)(nil), "payment.ExchangeRate")
	proto.RegisterType((*AccountNote)(nil), "payment.AccountNote")
	proto.RegisterType((*InvoiceNote)(nil), "payment.InvoiceNote")
	proto.RegisterType((*Log)(nil), "payment.Log")
	proto.RegisterType((*Addon)(nil), "payment.Addon")
	proto.RegisterType((*String)(nil), "payment.String")
	proto.RegisterEnum("payment.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("payment.Event", Event_name, Event_value)
	proto.RegisterEnum("payment.PaymentMethod_Name", PaymentMethod_Name_name, PaymentMethod_Name_value)
	proto.RegisterEnum("payment.PaymentMethod_Status", PaymentMethod_Status_name, PaymentMethod_Status_value)
	proto.RegisterEnum("payment.Plan_PeriodUnit", Plan_PeriodUnit_name, Plan_PeriodUnit_value)
	proto.RegisterEnum("payment.Plan_Type", Plan_Type_name, Plan_Type_value)
	proto.RegisterEnum("payment.Subscription_Status", Subscription_Status_name, Subscription_Status_value)
	proto.RegisterEnum("payment.Invoice_Status", Invoice_Status_name, Invoice_Status_value)
	proto.RegisterEnum("payment.InvoiceItem_Type", InvoiceItem_Type_name, InvoiceItem_Type_value)
	proto.RegisterEnum("payment.Contact_Title", Contact_Title_name, Contact_Title_value)
	proto.RegisterEnum("payment.PromotionCode_Type", PromotionCode_Type_name, PromotionCode_Type_value)
	proto.RegisterEnum("payment.Log_Action", Log_Action_name, Log_Action_value)
	proto.RegisterEnum("payment.Addon_Type", Addon_Type_name, Addon_Type_value)
	proto.RegisterEnum("payment.Addon_ChargeType", Addon_ChargeType_name, Addon_ChargeType_value)
	proto.RegisterEnum("payment.Addon_PeriodUnit", Addon_PeriodUnit_name, Addon_PeriodUnit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SubizInternalPaymentMgr service

type SubizInternalPaymentMgrClient interface {
	CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error)
}

type subizInternalPaymentMgrClient struct {
	cc *grpc.ClientConn
}

func NewSubizInternalPaymentMgrClient(cc *grpc.ClientConn) SubizInternalPaymentMgrClient {
	return &subizInternalPaymentMgrClient{cc}
}

func (c *subizInternalPaymentMgrClient) CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := grpc.Invoke(ctx, "/payment.SubizInternalPaymentMgr/CreateBill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubizInternalPaymentMgr service

type SubizInternalPaymentMgrServer interface {
	CreateBill(context.Context, *Bill) (*Bill, error)
}

func RegisterSubizInternalPaymentMgrServer(s *grpc.Server, srv SubizInternalPaymentMgrServer) {
	s.RegisterService(&_SubizInternalPaymentMgr_serviceDesc, srv)
}

func _SubizInternalPaymentMgr_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.SubizInternalPaymentMgr/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubizInternalPaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.SubizInternalPaymentMgr",
	HandlerType: (*SubizInternalPaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _SubizInternalPaymentMgr_CreateBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}

// Client API for PaymentMgr service

type PaymentMgrClient interface {
	UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	GetSubscription(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error)
	GetCredit(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error)
	GetPromotionCode(ctx context.Context, in *String, opts ...grpc.CallOption) (*PromotionCode, error)
	AddPaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	DeletePaymentMethod(ctx context.Context, in *String, opts ...grpc.CallOption) (*common.Empty, error)
	CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
}

type paymentMgrClient struct {
	cc *grpc.ClientConn
}

func NewPaymentMgrClient(cc *grpc.ClientConn) PaymentMgrClient {
	return &paymentMgrClient{cc}
}

func (c *paymentMgrClient) UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/UpdateSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSubscription(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetCredit(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetCredit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetPromotionCode(ctx context.Context, in *String, opts ...grpc.CallOption) (*PromotionCode, error) {
	out := new(PromotionCode)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetPromotionCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddPaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/AddPaymentMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePaymentMethod(ctx context.Context, in *String, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/DeletePaymentMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/CreateCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMgr service

type PaymentMgrServer interface {
	UpdateSubscription(context.Context, *Subscription) (*Subscription, error)
	GetSubscription(context.Context, *common.Empty) (*Subscription, error)
	GetCredit(context.Context, *common.Empty) (*Subscription, error)
	GetPromotionCode(context.Context, *String) (*PromotionCode, error)
	AddPaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	DeletePaymentMethod(context.Context, *String) (*common.Empty, error)
	CreateCustomer(context.Context, *Customer) (*Customer, error)
}

func RegisterPaymentMgrServer(s *grpc.Server, srv PaymentMgrServer) {
	s.RegisterService(&_PaymentMgr_serviceDesc, srv)
}

func _PaymentMgr_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSubscription(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetCredit(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentMgr",
	HandlerType: (*PaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSubscription",
			Handler:    _PaymentMgr_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentMgr_GetSubscription_Handler,
		},
		{
			MethodName: "GetCredit",
			Handler:    _PaymentMgr_GetCredit_Handler,
		},
		{
			MethodName: "GetPromotionCode",
			Handler:    _PaymentMgr_GetPromotionCode_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _PaymentMgr_AddPaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _PaymentMgr_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _PaymentMgr_CreateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}

func init() { proto.RegisterFile("payment/payment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6e, 0xe4, 0xc6,
	0x11, 0xd6, 0x90, 0xc3, 0xf9, 0xa9, 0x99, 0x91, 0x28, 0x4a, 0x2b, 0xd3, 0x72, 0x1c, 0xcb, 0x74,
	0x9c, 0x6c, 0x36, 0xb6, 0x16, 0xd9, 0xd8, 0x31, 0x90, 0x20, 0x08, 0xb4, 0xda, 0x8d, 0x21, 0x60,
	0x6d, 0x08, 0xd4, 0xfa, 0x4c, 0xf4, 0xb0, 0x5b, 0x23, 0x7a, 0x87, 0xcd, 0x09, 0xd9, 0x23, 0xcf,
	0xf8, 0x92, 0x4b, 0x72, 0xc9, 0xc5, 0x4f, 0x90, 0x3c, 0x41, 0x9e, 0x20, 0xa7, 0xbc, 0x44, 0xee,
	0xb9, 0xfb, 0x0d, 0x02, 0x04, 0x08, 0xaa, 0xba, 0xf9, 0x37, 0xd2, 0x4a, 0x0b, 0x9f, 0x86, 0xf5,
	0x55, 0x35, 0xa7, 0xba, 0xba, 0xea, 0xab, 0x6a, 0xc2, 0x83, 0x05, 0x5b, 0xa7, 0x42, 0xaa, 0xc7,
	0xe6, 0xf7, 0x78, 0x91, 0x67, 0x2a, 0xf3, 0xfa, 0x46, 0x3c, 0x3c, 0x9e, 0x26, 0x6a, 0xba, 0x8c,
	0x5f, 0x09, 0x75, 0x9c, 0xe5, 0xb3, 0xc7, 0xc5, 0x72, 0x9a, 0x7c, 0xfb, 0xf8, 0x4a, 0x30, 0x2e,
	0xf2, 0xc7, 0x71, 0x96, 0xa6, 0x99, 0x34, 0x3f, 0x7a, 0x61, 0xf0, 0x02, 0xe0, 0x42, 0xe5, 0xc9,
	0x42, 0x9c, 0xc9, 0xcb, 0xcc, 0x7b, 0x17, 0x20, 0x66, 0x39, 0x8f, 0xe6, 0xac, 0x50, 0x9f, 0xf8,
	0xd6, 0x51, 0xe7, 0xe1, 0x30, 0x1c, 0x22, 0xf2, 0x02, 0x01, 0xef, 0x3d, 0x18, 0xc5, 0xcb, 0x42,
	0x65, 0xa9, 0xc8, 0xa3, 0x84, 0xfb, 0x36, 0xe9, 0xa1, 0x84, 0xce, 0x78, 0xf0, 0x9d, 0x05, 0x93,
	0x73, 0xed, 0xc9, 0x17, 0x42, 0x5d, 0x65, 0xdc, 0xf3, 0xa0, 0x2b, 0x59, 0x2a, 0xcc, 0xbb, 0xe8,
	0x19, 0xff, 0x85, 0xc5, 0x71, 0xb6, 0x94, 0xaa, 0x7e, 0xcb, 0xd0, 0x20, 0x67, 0xdc, 0xfb, 0x04,
	0x46, 0x05, 0xb9, 0x14, 0x25, 0xf2, 0x32, 0xf3, 0xbb, 0x47, 0x9d, 0x87, 0xa3, 0x27, 0x7b, 0xc7,
	0xe5, 0x86, 0x6b, 0x77, 0x43, 0x28, 0x6a, 0xd7, 0x0f, 0xa0, 0x57, 0x28, 0xa6, 0x96, 0x85, 0xef,
	0xd0, 0x0b, 0x8d, 0xe4, 0xf9, 0xd0, 0x5f, 0xe4, 0x49, 0xca, 0xf2, 0xb5, 0xdf, 0x3b, 0xea, 0x3c,
	0x1c, 0x84, 0xa5, 0xe8, 0xbd, 0x0f, 0x63, 0xf3, 0x3f, 0x2a, 0x7b, 0x25, 0xa4, 0xdf, 0x27, 0xb5,
	0xf9, 0xef, 0x97, 0x08, 0x05, 0x3f, 0x82, 0xee, 0x97, 0xe8, 0xf1, 0x00, 0xba, 0x31, 0x2b, 0xae,
	0xdc, 0x2d, 0x0f, 0xf0, 0x6f, 0xd0, 0xc0, 0xed, 0x04, 0x01, 0xf4, 0x2e, 0xf4, 0x9f, 0x00, 0xf4,
	0x58, 0xac, 0x92, 0x6b, 0xe1, 0x6e, 0x79, 0x63, 0x18, 0x24, 0xd2, 0x48, 0x9d, 0xe0, 0xfb, 0x0e,
	0x38, 0x2f, 0x92, 0x34, 0x51, 0xde, 0xfb, 0x60, 0xc7, 0x6a, 0xe5, 0x77, 0x68, 0x3b, 0x3b, 0xc7,
	0xe6, 0x14, 0x4e, 0x33, 0xa9, 0xc4, 0x4a, 0x85, 0xa8, 0xf3, 0x7e, 0x06, 0x3b, 0x29, 0x5b, 0x45,
	0x6c, 0xa9, 0xb2, 0x94, 0xa9, 0x24, 0x93, 0x05, 0xc5, 0xcd, 0x09, 0xb7, 0x53, 0xb6, 0x3a, 0xa9,
	0xd1, 0xd2, 0x30, 0xce, 0x64, 0xbc, 0xcc, 0x73, 0x21, 0x55, 0x41, 0x61, 0xd4, 0x86, 0xa7, 0x35,
	0xea, 0xfd, 0x02, 0x76, 0x8d, 0xe1, 0xb5, 0xc8, 0x0b, 0xf3, 0xce, 0x2e, 0x99, 0xba, 0xda, 0xb4,
	0xc6, 0x31, 0x20, 0x68, 0x5c, 0x88, 0x59, 0x4a, 0xaf, 0x74, 0xc8, 0x6e, 0x94, 0xb2, 0xd5, 0x85,
	0x81, 0xf0, 0xe8, 0xc8, 0xc3, 0x19, 0x19, 0xf4, 0xc8, 0x60, 0x88, 0xce, 0x11, 0x10, 0x7c, 0x6f,
	0x41, 0xf7, 0x7c, 0xce, 0xe4, 0xad, 0xc7, 0xfe, 0x13, 0x70, 0xe6, 0x18, 0x09, 0x72, 0x75, 0xf4,
	0x64, 0xbb, 0x3a, 0x51, 0x8a, 0x4f, 0xa8, 0x95, 0xde, 0x3e, 0x38, 0x8b, 0x3c, 0x89, 0x05, 0x79,
	0x69, 0x85, 0x5a, 0xf0, 0x0e, 0x61, 0xa0, 0xf7, 0x14, 0xaf, 0xcd, 0xf9, 0x56, 0x32, 0x9e, 0x70,
	0x9c, 0x0b, 0xa6, 0x04, 0xf7, 0x07, 0x47, 0x9d, 0x87, 0x76, 0x58, 0x8a, 0xde, 0x23, 0xd8, 0x55,
	0x79, 0xc2, 0xe6, 0xd1, 0x42, 0xe4, 0x49, 0xc6, 0x23, 0xce, 0xd6, 0x85, 0x3f, 0x24, 0xa7, 0x77,
	0x48, 0x71, 0x4e, 0xf8, 0x33, 0xb6, 0x2e, 0x30, 0x7f, 0xb4, 0x95, 0x0f, 0x64, 0x60, 0x24, 0xcc,
	0x79, 0xb3, 0x7a, 0x29, 0x13, 0xe5, 0x8f, 0x74, 0xce, 0x6b, 0xe8, 0x2b, 0xa9, 0x1d, 0x9e, 0x8b,
	0x6b, 0x31, 0xf7, 0xb7, 0x69, 0x9d, 0x16, 0x82, 0x4f, 0x00, 0xce, 0x6b, 0x9b, 0x3e, 0xd8, 0x9c,
	0xad, 0xdd, 0x2d, 0x4c, 0xa4, 0x6f, 0x84, 0x78, 0xe5, 0x76, 0xbc, 0x21, 0x38, 0x69, 0x26, 0xd5,
	0x95, 0x6b, 0x21, 0xb8, 0x16, 0x2c, 0x77, 0xed, 0xe0, 0x23, 0xe8, 0xbe, 0x5c, 0x2f, 0x28, 0xdf,
	0x2e, 0x73, 0x61, 0xb2, 0xa9, 0x50, 0x4c, 0x72, 0x96, 0x73, 0xb7, 0x83, 0x12, 0xe3, 0xd7, 0x4c,
	0xc6, 0x82, 0xbb, 0x56, 0xf0, 0x37, 0x07, 0xc6, 0x17, 0xcb, 0x69, 0x11, 0xe7, 0xc9, 0x02, 0x4f,
	0xf0, 0xbe, 0xc2, 0xfa, 0x10, 0xb6, 0x17, 0x79, 0x96, 0x66, 0x68, 0x1b, 0xc5, 0x19, 0xd7, 0x31,
	0x1e, 0x86, 0x93, 0x0a, 0x3d, 0xcd, 0xb8, 0xf0, 0x8e, 0x61, 0x6f, 0x9a, 0xcc, 0xe7, 0x89, 0x9c,
	0x45, 0xf1, 0x3a, 0x9e, 0x8b, 0xa8, 0x50, 0x2c, 0x57, 0x14, 0x76, 0x3b, 0xdc, 0x35, 0xaa, 0x53,
	0xd4, 0x5c, 0xa0, 0x02, 0xa3, 0xdc, 0xb6, 0x17, 0x92, 0x53, 0x6a, 0xd8, 0xe1, 0x4e, 0xd3, 0xfa,
	0xb9, 0xe4, 0xe4, 0xe1, 0x52, 0x65, 0x51, 0x2e, 0xa4, 0xf8, 0x86, 0x8e, 0x62, 0x10, 0x0e, 0x11,
	0x09, 0x11, 0x68, 0x14, 0x31, 0x6c, 0x16, 0x71, 0x79, 0xc4, 0xa3, 0xf6, 0x11, 0xdf, 0x70, 0x96,
	0x82, 0xea, 0xef, 0xd0, 0x59, 0xb4, 0x9c, 0xfd, 0x02, 0x15, 0xde, 0x67, 0xe0, 0x4b, 0xb1, 0x52,
	0xd1, 0x6d, 0x8b, 0x5c, 0x5a, 0xf4, 0x00, 0xf5, 0x4f, 0x6f, 0x2c, 0xf4, 0xa0, 0xbb, 0x98, 0x33,
	0xe9, 0xef, 0xea, 0x8c, 0xc6, 0x67, 0xcc, 0x0d, 0x9d, 0x5f, 0x3a, 0x42, 0x1e, 0xb9, 0x06, 0x04,
	0xe9, 0xd0, 0xbc, 0x03, 0x43, 0x6d, 0x80, 0x21, 0xd9, 0x23, 0xf5, 0x80, 0x00, 0x8c, 0xc5, 0x4f,
	0xa1, 0xc7, 0x38, 0xc7, 0x82, 0x7c, 0x70, 0x64, 0xb7, 0x0a, 0xe2, 0x04, 0xe1, 0xd0, 0x68, 0xeb,
	0xba, 0x39, 0xb8, 0xab, 0x6e, 0x3c, 0x9d, 0x44, 0xfe, 0x5b, 0xb4, 0x09, 0x7a, 0x46, 0xff, 0xa8,
	0x52, 0x23, 0xca, 0x00, 0xdf, 0x27, 0x15, 0x10, 0x74, 0x8a, 0x08, 0x1e, 0x07, 0x6e, 0x24, 0xd2,
	0x15, 0xf7, 0x36, 0x55, 0xdc, 0x10, 0x91, 0x73, 0x04, 0x82, 0xdf, 0x55, 0x04, 0x37, 0x82, 0xfe,
	0x42, 0x48, 0x9e, 0xc8, 0x99, 0xe6, 0xc0, 0x92, 0xdf, 0x5a, 0x6c, 0x67, 0xa1, 0x44, 0xdb, 0x43,
	0x3b, 0x3b, 0xf8, 0x6f, 0x07, 0xba, 0x18, 0x48, 0x6f, 0x1b, 0xac, 0x2a, 0x1f, 0xad, 0x84, 0x6f,
	0xe4, 0x69, 0x77, 0x33, 0x4f, 0x0f, 0xa0, 0xc7, 0x52, 0xf2, 0xd8, 0x21, 0x8f, 0x8c, 0x84, 0xdb,
	0x49, 0xe4, 0x75, 0x96, 0xc4, 0x22, 0x4a, 0x38, 0xb2, 0x8f, 0x8d, 0xa5, 0x68, 0xa0, 0x33, 0xde,
	0x4a, 0x93, 0x7e, 0x3b, 0x4d, 0x3e, 0x85, 0x49, 0xdd, 0xb9, 0xb0, 0xab, 0x0c, 0x28, 0x96, 0x6e,
	0x15, 0x4b, 0xe4, 0x61, 0x16, 0xab, 0x70, 0x5c, 0x75, 0x33, 0x6c, 0x2a, 0x58, 0x31, 0xda, 0x20,
	0x4a, 0xa9, 0x9f, 0x99, 0xbc, 0x9c, 0x2c, 0x36, 0x9b, 0x1c, 0xc5, 0x7e, 0x54, 0xc7, 0x3e, 0xf8,
	0x5f, 0x17, 0xfa, 0x67, 0xda, 0xb5, 0x8d, 0xfd, 0x5a, 0x9b, 0xfb, 0xbd, 0x2d, 0x3c, 0xb4, 0xe3,
	0x88, 0x2f, 0x4b, 0x1e, 0x1c, 0x6a, 0xe4, 0xd9, 0x52, 0xdc, 0x52, 0xc6, 0xce, 0x6d, 0x65, 0x7c,
	0x04, 0x23, 0x2e, 0x2a, 0x6e, 0xa0, 0x82, 0x1c, 0x86, 0x4d, 0xa8, 0x45, 0xaa, 0xfd, 0x0d, 0x52,
	0xfd, 0x0c, 0xc6, 0x65, 0x89, 0x34, 0xe2, 0xb5, 0x5f, 0xc5, 0xcb, 0x14, 0x08, 0xb5, 0xe1, 0xd1,
	0xb4, 0x16, 0xbc, 0xb7, 0x61, 0xc0, 0x97, 0x22, 0xe2, 0x4c, 0x09, 0xaa, 0x6f, 0x3b, 0xec, 0xf3,
	0xa5, 0x78, 0xc6, 0x94, 0xf8, 0x01, 0xd5, 0xfd, 0x2b, 0x80, 0x79, 0x22, 0x45, 0x94, 0x28, 0x91,
	0x16, 0xfe, 0x98, 0xca, 0xa4, 0xf6, 0xc1, 0x84, 0xf7, 0x4c, 0x89, 0x34, 0x1c, 0xa2, 0x1d, 0x3e,
	0x15, 0xde, 0x6f, 0x60, 0x22, 0x56, 0xf1, 0x15, 0x93, 0x33, 0x11, 0xe5, 0xe8, 0xc6, 0x84, 0x7c,
	0x7f, 0x50, 0xad, 0x7b, 0x6e, 0xb4, 0x21, 0x53, 0x22, 0x1c, 0x8b, 0x86, 0x84, 0x21, 0x29, 0x96,
	0x53, 0x95, 0x29, 0xa6, 0xf9, 0xdc, 0x0a, 0x2b, 0x99, 0xaa, 0x9d, 0xad, 0xb0, 0x97, 0xc4, 0x42,
	0x2a, 0xa2, 0x18, 0x2b, 0x04, 0xc5, 0x56, 0xe7, 0x1a, 0xf1, 0x5c, 0xb0, 0x15, 0x5b, 0x11, 0x8d,
	0x58, 0x21, 0x3e, 0x62, 0x6f, 0xd0, 0xef, 0xda, 0xd5, 0xcd, 0x4c, 0xbf, 0xc8, 0x87, 0xfe, 0x72,
	0xc1, 0x69, 0xbf, 0x9a, 0x32, 0x4a, 0xb1, 0x4a, 0xa4, 0xbd, 0x46, 0x22, 0x7d, 0x5a, 0x15, 0xe1,
	0x10, 0x1c, 0x9e, 0xb3, 0x4b, 0xa5, 0xfb, 0x48, 0xb6, 0x10, 0xd2, 0xed, 0x60, 0x31, 0xc6, 0xf3,
	0xac, 0xc0, 0x86, 0x80, 0xcf, 0xd7, 0x59, 0xc2, 0x05, 0x77, 0xed, 0xe0, 0x3b, 0x1b, 0x46, 0x8d,
	0x00, 0x99, 0x24, 0xeb, 0x54, 0x49, 0x56, 0x17, 0x99, 0xd5, 0x2a, 0xb2, 0x8f, 0x1b, 0x49, 0x81,
	0x29, 0xb9, 0xfd, 0x64, 0xb7, 0x2e, 0x12, 0xa3, 0x68, 0xe4, 0xc9, 0x3d, 0xa5, 0xbc, 0x91, 0x84,
	0xce, 0xcd, 0x24, 0x7c, 0x17, 0xa0, 0x2e, 0x6a, 0x93, 0xa5, 0xc3, 0xaa, 0xa6, 0xf1, 0x40, 0xfe,
	0xb8, 0x64, 0x52, 0x25, 0x4a, 0xe7, 0xa8, 0x13, 0x56, 0xb2, 0x1e, 0xe0, 0x58, 0xae, 0x4c, 0x7b,
	0x37, 0xdd, 0x7f, 0x44, 0x98, 0x6e, 0xbe, 0xf8, 0x76, 0x21, 0x79, 0x69, 0xa0, 0xf3, 0x71, 0x28,
	0x24, 0x37, 0x6a, 0x0f, 0xba, 0x6a, 0xbd, 0x10, 0x26, 0x1f, 0xe9, 0x19, 0x39, 0x9b, 0x38, 0x91,
	0x14, 0xba, 0xdd, 0x0f, 0x10, 0xa0, 0xc6, 0x8c, 0xdb, 0x45, 0x56, 0xd6, 0xda, 0xb1, 0xd9, 0x2e,
	0x22, 0xa8, 0x0e, 0xde, 0xa9, 0xfb, 0x37, 0x2e, 0x71, 0xb7, 0xf0, 0xcc, 0x48, 0xed, 0x76, 0x82,
	0x7f, 0x75, 0xa0, 0x6f, 0x68, 0xe6, 0xd6, 0xf9, 0x68, 0x1f, 0x1c, 0x91, 0xb2, 0x64, 0x6e, 0x98,
	0x40, 0x0b, 0x34, 0x0f, 0x5d, 0x65, 0xb2, 0xec, 0xd5, 0x5a, 0x40, 0x27, 0xbf, 0xce, 0xa6, 0x91,
	0x4a, 0xd4, 0xbc, 0x2c, 0xff, 0xc1, 0xd7, 0xd9, 0xf4, 0x25, 0xca, 0x94, 0x75, 0xa4, 0xd0, 0xd1,
	0xd4, 0x42, 0x73, 0x10, 0xee, 0xb7, 0x06, 0xe1, 0xe0, 0x21, 0x38, 0x7a, 0x61, 0x0f, 0xac, 0x34,
	0x77, 0xb7, 0xe8, 0xb7, 0x70, 0x3b, 0x38, 0xb6, 0xa4, 0x79, 0xe1, 0x5a, 0x08, 0x70, 0x9c, 0x4f,
	0x16, 0x30, 0x6a, 0x14, 0xfe, 0xad, 0xbb, 0xf0, 0xa1, 0xcf, 0x38, 0xcf, 0x45, 0x51, 0x98, 0x7d,
	0x94, 0x22, 0x96, 0xc7, 0x35, 0x53, 0x66, 0x1f, 0xf8, 0x88, 0x07, 0x48, 0x89, 0x92, 0xaf, 0x9b,
	0x3c, 0x36, 0x32, 0x18, 0xb2, 0x58, 0xf0, 0xcf, 0x0e, 0x0c, 0x4e, 0x0d, 0x25, 0x9b, 0x1c, 0xb6,
	0x5e, 0xd3, 0x47, 0x6e, 0xcc, 0x3b, 0x1f, 0xc1, 0x20, 0xd6, 0xf1, 0xc6, 0x99, 0xd7, 0xbe, 0x95,
	0xef, 0x2b, 0x8b, 0x26, 0x0b, 0x39, 0x6d, 0x16, 0xda, 0xe4, 0xc2, 0xde, 0x1b, 0x72, 0x61, 0xf0,
	0x1f, 0xbc, 0x0e, 0xdd, 0x45, 0xca, 0xf6, 0xcd, 0x7a, 0x28, 0x53, 0xb2, 0xd7, 0x48, 0xc9, 0x7d,
	0x70, 0xae, 0xd9, 0xbc, 0xea, 0x05, 0x5a, 0xc0, 0x3e, 0xa0, 0x92, 0x54, 0x14, 0x51, 0x2e, 0xb8,
	0x10, 0xa9, 0xf1, 0xdb, 0x09, 0x27, 0x84, 0x86, 0x06, 0xa4, 0x3b, 0x9d, 0xde, 0x48, 0x34, 0x5d,
	0x53, 0x09, 0xe0, 0x9d, 0x4e, 0x23, 0x4f, 0x5b, 0xd3, 0x33, 0xb4, 0xb7, 0xed, 0x41, 0x97, 0x4e,
	0x45, 0xd7, 0x00, 0x3d, 0x23, 0x21, 0xc7, 0x99, 0x2c, 0x54, 0xce, 0x12, 0xa9, 0x28, 0xff, 0x9b,
	0x57, 0xb3, 0xd3, 0x4a, 0x15, 0x36, 0xcc, 0xaa, 0x34, 0x99, 0xd4, 0x69, 0x12, 0xfc, 0xc1, 0x54,
	0x8a, 0x0b, 0xe3, 0xcb, 0x64, 0x25, 0x78, 0xa4, 0xe9, 0xc7, 0xdd, 0xd2, 0xa3, 0x06, 0x11, 0xaa,
	0x61, 0xb7, 0x5c, 0xf0, 0x44, 0xb9, 0x96, 0xb7, 0x07, 0x3b, 0xb9, 0xb8, 0x14, 0x79, 0xce, 0xe6,
	0x91, 0x01, 0xed, 0xe0, 0x2f, 0x16, 0x40, 0xfd, 0xb7, 0x18, 0x29, 0x3d, 0x8b, 0x75, 0x68, 0x2f,
	0x5a, 0xc0, 0xcc, 0xc3, 0x01, 0xcc, 0x22, 0x0c, 0x1f, 0xab, 0x69, 0xce, 0x6e, 0x4c, 0x73, 0xf7,
	0x50, 0x99, 0xb9, 0x73, 0x61, 0xb0, 0xd3, 0x85, 0xbe, 0x48, 0x39, 0xd5, 0x9d, 0x2b, 0xac, 0x51,
	0xec, 0x13, 0xda, 0x4f, 0x7d, 0x4b, 0xd6, 0x07, 0x09, 0x25, 0x74, 0x46, 0x27, 0x92, 0x26, 0xd2,
	0xec, 0x98, 0x8a, 0xd1, 0x0a, 0x87, 0x69, 0x22, 0x4f, 0xd2, 0x72, 0x28, 0xa3, 0x3b, 0x96, 0x56,
	0x0f, 0x8c, 0x9a, 0xad, 0x8c, 0x7a, 0xdf, 0x30, 0x8a, 0x39, 0x4a, 0x2d, 0x04, 0xbf, 0x87, 0xde,
	0x29, 0xc5, 0xe4, 0xbe, 0x61, 0xa3, 0xe6, 0x7d, 0xbb, 0xc9, 0xfb, 0xc1, 0xdf, 0x3b, 0x30, 0x6e,
	0x36, 0x46, 0xef, 0x03, 0x98, 0x5c, 0xe6, 0x59, 0x1a, 0x55, 0xdd, 0x40, 0xbf, 0x6a, 0x8c, 0x60,
	0xd9, 0x08, 0xa8, 0x27, 0x66, 0x51, 0xab, 0x61, 0x0c, 0x43, 0x50, 0x59, 0x65, 0xf0, 0xc1, 0x66,
	0x33, 0xd6, 0x29, 0xdc, 0xee, 0xba, 0x4d, 0x23, 0x1a, 0x1c, 0x74, 0x01, 0x56, 0x46, 0x38, 0x3d,
	0x04, 0x7f, 0x82, 0xd1, 0x89, 0xde, 0xc5, 0x97, 0x99, 0xba, 0x77, 0xa6, 0xf2, 0xa1, 0x9f, 0x8a,
	0xa2, 0x60, 0x33, 0x51, 0xd2, 0x90, 0x11, 0x37, 0xea, 0xa1, 0x7b, 0x47, 0x3d, 0xb4, 0x69, 0x00,
	0x23, 0x54, 0x76, 0xd4, 0x37, 0xf1, 0xa0, 0xdd, 0xd8, 0xec, 0xcd, 0xc6, 0xd6, 0x70, 0xb0, 0x7b,
	0x97, 0x83, 0xce, 0x1d, 0x0e, 0xf6, 0xda, 0x0e, 0xfe, 0xb5, 0x0b, 0xf6, 0x8b, 0x6c, 0x86, 0xc9,
	0xbd, 0x2c, 0x44, 0x5e, 0xd2, 0x32, 0x3e, 0x1b, 0xea, 0x1c, 0xb4, 0xda, 0x7f, 0xdc, 0xe0, 0x20,
	0x23, 0x35, 0xdf, 0xde, 0x6d, 0xd3, 0xc1, 0x1b, 0xb5, 0xf2, 0x46, 0x40, 0x7a, 0x9b, 0x01, 0xd9,
	0x37, 0x37, 0x5e, 0xd3, 0xc7, 0xb5, 0x10, 0xfc, 0xdb, 0x82, 0xde, 0x49, 0x6c, 0xa8, 0x6f, 0x5b,
	0xff, 0x59, 0x64, 0xc2, 0xe4, 0x6e, 0x79, 0x6f, 0xc3, 0x03, 0x93, 0x18, 0x65, 0x30, 0xf5, 0xd0,
	0xe8, 0x76, 0x90, 0x0f, 0x8c, 0x39, 0x4f, 0x0a, 0xfa, 0x13, 0x4d, 0x12, 0x5c, 0xcc, 0x45, 0x13,
	0xb4, 0x35, 0x73, 0x20, 0x1d, 0xd6, 0x60, 0xd7, 0xdb, 0xa6, 0x56, 0x5e, 0x32, 0x89, 0xe3, 0xed,
	0xc2, 0xc4, 0x18, 0x19, 0xa8, 0x87, 0x0e, 0x99, 0x97, 0x99, 0x5d, 0xb8, 0x7d, 0x6f, 0x07, 0x46,
	0xc6, 0x21, 0xea, 0xf0, 0x03, 0xef, 0xc7, 0x70, 0x68, 0x80, 0xa2, 0x71, 0x17, 0x2f, 0xdd, 0x1c,
	0x7a, 0x07, 0xe0, 0xd1, 0x6d, 0xb7, 0xa5, 0x76, 0xc1, 0x3b, 0x84, 0x83, 0x78, 0x9e, 0xc4, 0xaf,
	0x4a, 0x7c, 0x2a, 0xa2, 0xe9, 0x52, 0xa9, 0x4c, 0xba, 0x23, 0x6f, 0x1f, 0xdc, 0x05, 0x5b, 0x47,
	0x97, 0x59, 0x1e, 0x95, 0xbc, 0xe1, 0x8e, 0x71, 0x05, 0x7a, 0x9c, 0x66, 0x52, 0x6c, 0xe8, 0x26,
	0xe8, 0x16, 0xae, 0x28, 0x03, 0xb7, 0x1d, 0xfc, 0xd9, 0x06, 0x87, 0xee, 0x91, 0x55, 0x47, 0xb1,
	0x1a, 0x1d, 0xa5, 0xa4, 0x64, 0xbb, 0x3d, 0x7f, 0xdc, 0xf2, 0xe5, 0xe5, 0xe3, 0x8d, 0x2f, 0x2f,
	0xf7, 0xcc, 0x83, 0xef, 0x51, 0x78, 0xf2, 0x99, 0x88, 0x1a, 0x5d, 0x0c, 0x34, 0x44, 0x84, 0x5f,
	0x7f, 0x67, 0xe9, 0xdf, 0xf5, 0x9d, 0x65, 0x70, 0xe3, 0x3b, 0x4b, 0x73, 0x12, 0x1c, 0x6e, 0x4c,
	0x82, 0xaf, 0x6d, 0x62, 0xc1, 0xbb, 0xa6, 0xcf, 0xd4, 0x8d, 0x44, 0xcf, 0x64, 0x33, 0xea, 0x2f,
	0xc1, 0xcf, 0x01, 0x4e, 0x6b, 0xdf, 0xc6, 0x30, 0xc8, 0xa4, 0x88, 0xb0, 0x7f, 0xba, 0x5b, 0xde,
	0x04, 0x86, 0xb9, 0xc0, 0x8d, 0xe1, 0x6d, 0xb6, 0xf3, 0x03, 0xbf, 0xe8, 0x1c, 0xe2, 0xf4, 0x8e,
	0x6f, 0xc0, 0x26, 0x54, 0xa8, 0xb2, 0x28, 0xf1, 0xf1, 0xd1, 0x87, 0x38, 0xda, 0x98, 0xb8, 0xf5,
	0xc1, 0x5e, 0x16, 0xdc, 0xdd, 0xc2, 0x87, 0x6b, 0xc9, 0xf5, 0xf0, 0x35, 0xcd, 0xe7, 0xae, 0xf5,
	0xe8, 0x11, 0x38, 0xcf, 0xaf, 0xf1, 0x7e, 0xb1, 0x03, 0x23, 0xba, 0xf2, 0x5f, 0xac, 0xe9, 0x03,
	0xd0, 0x16, 0x36, 0x4f, 0x02, 0xbe, 0xd2, 0xd7, 0x07, 0xb7, 0xf3, 0xe4, 0x39, 0xbc, 0x75, 0xb1,
	0x9c, 0x26, 0xdf, 0x9e, 0x49, 0x25, 0x72, 0xc9, 0xe6, 0xe5, 0xc7, 0xd8, 0x59, 0xee, 0x3d, 0x02,
	0x38, 0xa5, 0xa0, 0xd0, 0x95, 0x7c, 0xd2, 0x9a, 0x5e, 0x0e, 0xdb, 0xe2, 0x93, 0x7f, 0xd8, 0x00,
	0x8d, 0xa5, 0x4f, 0xc1, 0xd3, 0x7f, 0xd1, 0xfa, 0xda, 0x54, 0x5f, 0xa8, 0x9a, 0xf0, 0xe1, 0xed,
	0xb0, 0xf7, 0x19, 0xec, 0x7c, 0x2e, 0x54, 0x0b, 0x9a, 0x94, 0x1f, 0x41, 0x9f, 0xa7, 0x0b, 0xb5,
	0x7e, 0xdd, 0xc2, 0x5f, 0xc2, 0xf0, 0x73, 0xa1, 0x4c, 0x73, 0x7b, 0xb3, 0x25, 0xbf, 0x05, 0xf7,
	0x73, 0xa1, 0xda, 0x93, 0xd7, 0x4e, 0xeb, 0x03, 0xb2, 0x9c, 0x1d, 0x1e, 0x54, 0x40, 0xdb, 0xf0,
	0x29, 0xb8, 0x27, 0x9c, 0xb7, 0xbf, 0x62, 0x37, 0x6c, 0x9b, 0xf8, 0xe1, 0x6b, 0x70, 0xef, 0x53,
	0xd8, 0x7b, 0x46, 0xc4, 0xd1, 0x86, 0x6f, 0xf8, 0xd0, 0xde, 0x8e, 0xf7, 0x6b, 0xd8, 0xd6, 0x47,
	0x54, 0x4d, 0xbc, 0xcd, 0x5a, 0xd3, 0xd0, 0xe1, 0x4d, 0xe8, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x35, 0x9c, 0x52, 0x60, 0x15, 0x18, 0x00, 0x00,
}
