// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payment/payment.proto

/*
Package payment is a generated protocol buffer package.

It is generated from these files:
	payment/payment.proto

It has these top-level messages:
	Stripe
	PaymentMethods
	PaymentMethod
	Limit
	Plans
	Plan
	Subscription
	Bill
	Note
	Invoices
	Invoice
	AgentInvoiceItem
	RenewInvoiceItem
	PlanInvoiceItem
	InvoiceItem
	BillingInfo
	Contact
	Customer
	FixedAmountPromotionCode
	PercentPromotionCode
	CreditCode
	ReferralCreditCode
	PromotionCode
	ExchangeRate
	Log
	Addon
	PaymentRenewCycleRequested
	String
	PayRequest
	ESubscription
	EInvoice
	InvoiceCreatedEmail
*/
package payment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"
import lang "bitbucket.org/subiz/header/lang"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Currency int32

const (
	Currency_usd Currency = 0
	Currency_vnd Currency = 1
	Currency_brl Currency = 2
)

var Currency_name = map[int32]string{
	0: "usd",
	1: "vnd",
	2: "brl",
}
var Currency_value = map[string]int32{
	"usd": 0,
	"vnd": 1,
	"brl": 2,
}

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}
func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}
func (x *Currency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_value, data, "Currency")
	if err != nil {
		return err
	}
	*x = Currency(value)
	return nil
}
func (Currency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event int32

const (
	Event_PaymentSynced           Event = 0
	Event_LimitUpdated            Event = 1
	Event_PaymentRequested        Event = 4
	Event_PaymentRenewCycle       Event = 5
	Event_InvoiceCreatedEmailSend Event = 6
	Event_PaymentV3Synced         Event = 8
	Event_SubscriptionUpdated     Event = 14
	Event_InvoiceUpdated          Event = 10
	Event_PaymentMethodUpdated    Event = 11
	Event_BillingUpdated          Event = 12
	Event_LogUpdated              Event = 13
	Event_PromotionCodeUpdated    Event = 15
)

var Event_name = map[int32]string{
	0:  "PaymentSynced",
	1:  "LimitUpdated",
	4:  "PaymentRequested",
	5:  "PaymentRenewCycle",
	6:  "InvoiceCreatedEmailSend",
	8:  "PaymentV3Synced",
	14: "SubscriptionUpdated",
	10: "InvoiceUpdated",
	11: "PaymentMethodUpdated",
	12: "BillingUpdated",
	13: "LogUpdated",
	15: "PromotionCodeUpdated",
}
var Event_value = map[string]int32{
	"PaymentSynced":           0,
	"LimitUpdated":            1,
	"PaymentRequested":        4,
	"PaymentRenewCycle":       5,
	"InvoiceCreatedEmailSend": 6,
	"PaymentV3Synced":         8,
	"SubscriptionUpdated":     14,
	"InvoiceUpdated":          10,
	"PaymentMethodUpdated":    11,
	"BillingUpdated":          12,
	"LogUpdated":              13,
	"PromotionCodeUpdated":    15,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PaymentMethod_Type int32

const (
	PaymentMethod_bank_transfer PaymentMethod_Type = 0
	PaymentMethod_credit_card   PaymentMethod_Type = 1
)

var PaymentMethod_Type_name = map[int32]string{
	0: "bank_transfer",
	1: "credit_card",
}
var PaymentMethod_Type_value = map[string]int32{
	"bank_transfer": 0,
	"credit_card":   1,
}

func (x PaymentMethod_Type) Enum() *PaymentMethod_Type {
	p := new(PaymentMethod_Type)
	*p = x
	return p
}
func (x PaymentMethod_Type) String() string {
	return proto.EnumName(PaymentMethod_Type_name, int32(x))
}
func (x *PaymentMethod_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentMethod_Type_value, data, "PaymentMethod_Type")
	if err != nil {
		return err
	}
	*x = PaymentMethod_Type(value)
	return nil
}
func (PaymentMethod_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type PaymentMethod_State int32

const (
	PaymentMethod_active PaymentMethod_State = 0
	PaymentMethod_failed PaymentMethod_State = 1
)

var PaymentMethod_State_name = map[int32]string{
	0: "active",
	1: "failed",
}
var PaymentMethod_State_value = map[string]int32{
	"active": 0,
	"failed": 1,
}

func (x PaymentMethod_State) Enum() *PaymentMethod_State {
	p := new(PaymentMethod_State)
	*p = x
	return p
}
func (x PaymentMethod_State) String() string {
	return proto.EnumName(PaymentMethod_State_name, int32(x))
}
func (x *PaymentMethod_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentMethod_State_value, data, "PaymentMethod_State")
	if err != nil {
		return err
	}
	*x = PaymentMethod_State(value)
	return nil
}
func (PaymentMethod_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type Plan_Type int32

const (
	Plan_trial    Plan_Type = 0
	Plan_free     Plan_Type = 1
	Plan_standard Plan_Type = 2
	Plan_advanced Plan_Type = 3
)

var Plan_Type_name = map[int32]string{
	0: "trial",
	1: "free",
	2: "standard",
	3: "advanced",
}
var Plan_Type_value = map[string]int32{
	"trial":    0,
	"free":     1,
	"standard": 2,
	"advanced": 3,
}

func (x Plan_Type) Enum() *Plan_Type {
	p := new(Plan_Type)
	*p = x
	return p
}
func (x Plan_Type) String() string {
	return proto.EnumName(Plan_Type_name, int32(x))
}
func (x *Plan_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Plan_Type_value, data, "Plan_Type")
	if err != nil {
		return err
	}
	*x = Plan_Type(value)
	return nil
}
func (Plan_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Invoice_State int32

const (
	Invoice_draft    Invoice_State = 0
	Invoice_open     Invoice_State = 1
	Invoice_overdue  Invoice_State = 2
	Invoice_paid     Invoice_State = 3
	Invoice_voided   Invoice_State = 4
	Invoice_queueing Invoice_State = 5
)

var Invoice_State_name = map[int32]string{
	0: "draft",
	1: "open",
	2: "overdue",
	3: "paid",
	4: "voided",
	5: "queueing",
}
var Invoice_State_value = map[string]int32{
	"draft":    0,
	"open":     1,
	"overdue":  2,
	"paid":     3,
	"voided":   4,
	"queueing": 5,
}

func (x Invoice_State) Enum() *Invoice_State {
	p := new(Invoice_State)
	*p = x
	return p
}
func (x Invoice_State) String() string {
	return proto.EnumName(Invoice_State_name, int32(x))
}
func (x *Invoice_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Invoice_State_value, data, "Invoice_State")
	if err != nil {
		return err
	}
	*x = Invoice_State(value)
	return nil
}
func (Invoice_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type Contact_Title int32

const (
	Contact_mr  Contact_Title = 0
	Contact_ms  Contact_Title = 1
	Contact_mrs Contact_Title = 2
	Contact_dr  Contact_Title = 3
)

var Contact_Title_name = map[int32]string{
	0: "mr",
	1: "ms",
	2: "mrs",
	3: "dr",
}
var Contact_Title_value = map[string]int32{
	"mr":  0,
	"ms":  1,
	"mrs": 2,
	"dr":  3,
}

func (x Contact_Title) Enum() *Contact_Title {
	p := new(Contact_Title)
	*p = x
	return p
}
func (x Contact_Title) String() string {
	return proto.EnumName(Contact_Title_name, int32(x))
}
func (x *Contact_Title) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Contact_Title_value, data, "Contact_Title")
	if err != nil {
		return err
	}
	*x = Contact_Title(value)
	return nil
}
func (Contact_Title) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type PromotionCode_Type int32

const (
	PromotionCode_fixed_amount_promotion_code PromotionCode_Type = 0
	PromotionCode_percent_promotion_code      PromotionCode_Type = 1
	PromotionCode_credit_code                 PromotionCode_Type = 2
	PromotionCode_referral_credit_code        PromotionCode_Type = 3
)

var PromotionCode_Type_name = map[int32]string{
	0: "fixed_amount_promotion_code",
	1: "percent_promotion_code",
	2: "credit_code",
	3: "referral_credit_code",
}
var PromotionCode_Type_value = map[string]int32{
	"fixed_amount_promotion_code": 0,
	"percent_promotion_code":      1,
	"credit_code":                 2,
	"referral_credit_code":        3,
}

func (x PromotionCode_Type) Enum() *PromotionCode_Type {
	p := new(PromotionCode_Type)
	*p = x
	return p
}
func (x PromotionCode_Type) String() string {
	return proto.EnumName(PromotionCode_Type_name, int32(x))
}
func (x *PromotionCode_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionCode_Type_value, data, "PromotionCode_Type")
	if err != nil {
		return err
	}
	*x = PromotionCode_Type(value)
	return nil
}
func (PromotionCode_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

type Log_Action int32

const (
	Log_create_invoice         Log_Action = 0
	Log_change_invoice_status  Log_Action = 1
	Log_create_discount        Log_Action = 2
	Log_delete_discount        Log_Action = 3
	Log_redeem_discount        Log_Action = 4
	Log_add_credit             Log_Action = 5
	Log_redeem_credit          Log_Action = 6
	Log_delete_account         Log_Action = 7
	Log_change_plan            Log_Action = 8
	Log_renew_subscription     Log_Action = 10
	Log_click_subscribe_button Log_Action = 11
	Log_pay_for_referrer       Log_Action = 12
	Log_add_money_for_referrer Log_Action = 13
	Log_pay_invoice            Log_Action = 14
)

var Log_Action_name = map[int32]string{
	0:  "create_invoice",
	1:  "change_invoice_status",
	2:  "create_discount",
	3:  "delete_discount",
	4:  "redeem_discount",
	5:  "add_credit",
	6:  "redeem_credit",
	7:  "delete_account",
	8:  "change_plan",
	10: "renew_subscription",
	11: "click_subscribe_button",
	12: "pay_for_referrer",
	13: "add_money_for_referrer",
	14: "pay_invoice",
}
var Log_Action_value = map[string]int32{
	"create_invoice":         0,
	"change_invoice_status":  1,
	"create_discount":        2,
	"delete_discount":        3,
	"redeem_discount":        4,
	"add_credit":             5,
	"redeem_credit":          6,
	"delete_account":         7,
	"change_plan":            8,
	"renew_subscription":     10,
	"click_subscribe_button": 11,
	"pay_for_referrer":       12,
	"add_money_for_referrer": 13,
	"pay_invoice":            14,
}

func (x Log_Action) Enum() *Log_Action {
	p := new(Log_Action)
	*p = x
	return p
}
func (x Log_Action) String() string {
	return proto.EnumName(Log_Action_name, int32(x))
}
func (x *Log_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Log_Action_value, data, "Log_Action")
	if err != nil {
		return err
	}
	*x = Log_Action(value)
	return nil
}
func (Log_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

type Addon_Type int32

const (
	Addon_credit Addon_Type = 0
	Addon_agent  Addon_Type = 1
)

var Addon_Type_name = map[int32]string{
	0: "credit",
	1: "agent",
}
var Addon_Type_value = map[string]int32{
	"credit": 0,
	"agent":  1,
}

func (x Addon_Type) Enum() *Addon_Type {
	p := new(Addon_Type)
	*p = x
	return p
}
func (x Addon_Type) String() string {
	return proto.EnumName(Addon_Type_name, int32(x))
}
func (x *Addon_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_Type_value, data, "Addon_Type")
	if err != nil {
		return err
	}
	*x = Addon_Type(value)
	return nil
}
func (Addon_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

type Addon_ChargeType int32

const (
	Addon_one_time  Addon_ChargeType = 0
	Addon_recurring Addon_ChargeType = 1
)

var Addon_ChargeType_name = map[int32]string{
	0: "one_time",
	1: "recurring",
}
var Addon_ChargeType_value = map[string]int32{
	"one_time":  0,
	"recurring": 1,
}

func (x Addon_ChargeType) Enum() *Addon_ChargeType {
	p := new(Addon_ChargeType)
	*p = x
	return p
}
func (x Addon_ChargeType) String() string {
	return proto.EnumName(Addon_ChargeType_name, int32(x))
}
func (x *Addon_ChargeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_ChargeType_value, data, "Addon_ChargeType")
	if err != nil {
		return err
	}
	*x = Addon_ChargeType(value)
	return nil
}
func (Addon_ChargeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 1} }

type Addon_PeriodUnit int32

const (
	Addon_day   Addon_PeriodUnit = 0
	Addon_week  Addon_PeriodUnit = 1
	Addon_month Addon_PeriodUnit = 2
	Addon_year  Addon_PeriodUnit = 3
)

var Addon_PeriodUnit_name = map[int32]string{
	0: "day",
	1: "week",
	2: "month",
	3: "year",
}
var Addon_PeriodUnit_value = map[string]int32{
	"day":   0,
	"week":  1,
	"month": 2,
	"year":  3,
}

func (x Addon_PeriodUnit) Enum() *Addon_PeriodUnit {
	p := new(Addon_PeriodUnit)
	*p = x
	return p
}
func (x Addon_PeriodUnit) String() string {
	return proto.EnumName(Addon_PeriodUnit_name, int32(x))
}
func (x *Addon_PeriodUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Addon_PeriodUnit_value, data, "Addon_PeriodUnit")
	if err != nil {
		return err
	}
	*x = Addon_PeriodUnit(value)
	return nil
}
func (Addon_PeriodUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 2} }

type Stripe struct {
	CardLast4        *string `protobuf:"bytes,2,opt,name=card_last4,json=cardLast4" json:"card_last4,omitempty"`
	CustomerId       *string `protobuf:"bytes,3,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Token            *string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Stripe) Reset()                    { *m = Stripe{} }
func (m *Stripe) String() string            { return proto.CompactTextString(m) }
func (*Stripe) ProtoMessage()               {}
func (*Stripe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stripe) GetCardLast4() string {
	if m != nil && m.CardLast4 != nil {
		return *m.CardLast4
	}
	return ""
}

func (m *Stripe) GetCustomerId() string {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return ""
}

func (m *Stripe) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type PaymentMethods struct {
	PaymentMethods   []*PaymentMethod `protobuf:"bytes,2,rep,name=payment_methods,json=paymentMethods" json:"payment_methods,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PaymentMethods) Reset()                    { *m = PaymentMethods{} }
func (m *PaymentMethods) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethods) ProtoMessage()               {}
func (*PaymentMethods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PaymentMethods) GetPaymentMethods() []*PaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

type PaymentMethod struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Type             *string         `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	State            *string         `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Created          *int64          `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Stripe           *Stripe         `protobuf:"bytes,9,opt,name=stripe" json:"stripe,omitempty"`
	FailedMessage    *string         `protobuf:"bytes,10,opt,name=failed_message,json=failedMessage" json:"failed_message,omitempty"`
	Charged          *int64          `protobuf:"varint,11,opt,name=charged" json:"charged,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PaymentMethod) Reset()                    { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()               {}
func (*PaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PaymentMethod) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PaymentMethod) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *PaymentMethod) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PaymentMethod) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PaymentMethod) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *PaymentMethod) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *PaymentMethod) GetStripe() *Stripe {
	if m != nil {
		return m.Stripe
	}
	return nil
}

func (m *PaymentMethod) GetFailedMessage() string {
	if m != nil && m.FailedMessage != nil {
		return *m.FailedMessage
	}
	return ""
}

func (m *PaymentMethod) GetCharged() int64 {
	if m != nil && m.Charged != nil {
		return *m.Charged
	}
	return 0
}

type Limit struct {
	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MaxAutomations *uint32         `protobuf:"varint,4,opt,name=max_automations,json=maxAutomations" json:"max_automations,omitempty"`
	// optional uint32 max_conversations = 6;
	MaxSegments            *uint32 `protobuf:"varint,7,opt,name=max_segments,json=maxSegments" json:"max_segments,omitempty"`
	MaxAgents              *uint32 `protobuf:"varint,8,opt,name=max_agents,json=maxAgents" json:"max_agents,omitempty"`
	CanBuyAgent            *bool   `protobuf:"varint,10,opt,name=can_buy_agent,json=canBuyAgent" json:"can_buy_agent,omitempty"`
	AutomationWebhookQuota *uint32 `protobuf:"varint,12,opt,name=automation_webhook_quota,json=automationWebhookQuota" json:"automation_webhook_quota,omitempty"`
	AutomationEmailQuota   *uint32 `protobuf:"varint,13,opt,name=automation_email_quota,json=automationEmailQuota" json:"automation_email_quota,omitempty"`
	AutomationMessageQuota *uint32 `protobuf:"varint,14,opt,name=automation_message_quota,json=automationMessageQuota" json:"automation_message_quota,omitempty"`
	MaxRules               *uint32 `protobuf:"varint,16,opt,name=max_rules,json=maxRules" json:"max_rules,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Limit) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Limit) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Limit) GetMaxAutomations() uint32 {
	if m != nil && m.MaxAutomations != nil {
		return *m.MaxAutomations
	}
	return 0
}

func (m *Limit) GetMaxSegments() uint32 {
	if m != nil && m.MaxSegments != nil {
		return *m.MaxSegments
	}
	return 0
}

func (m *Limit) GetMaxAgents() uint32 {
	if m != nil && m.MaxAgents != nil {
		return *m.MaxAgents
	}
	return 0
}

func (m *Limit) GetCanBuyAgent() bool {
	if m != nil && m.CanBuyAgent != nil {
		return *m.CanBuyAgent
	}
	return false
}

func (m *Limit) GetAutomationWebhookQuota() uint32 {
	if m != nil && m.AutomationWebhookQuota != nil {
		return *m.AutomationWebhookQuota
	}
	return 0
}

func (m *Limit) GetAutomationEmailQuota() uint32 {
	if m != nil && m.AutomationEmailQuota != nil {
		return *m.AutomationEmailQuota
	}
	return 0
}

func (m *Limit) GetAutomationMessageQuota() uint32 {
	if m != nil && m.AutomationMessageQuota != nil {
		return *m.AutomationMessageQuota
	}
	return 0
}

func (m *Limit) GetMaxRules() uint32 {
	if m != nil && m.MaxRules != nil {
		return *m.MaxRules
	}
	return 0
}

type Plans struct {
	Plans            []*Plan `protobuf:"bytes,2,rep,name=plans" json:"plans,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Plans) Reset()                    { *m = Plans{} }
func (m *Plans) String() string            { return proto.CompactTextString(m) }
func (*Plans) ProtoMessage()               {}
func (*Plans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Plans) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

type Plan struct {
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Limit            *Limit   `protobuf:"bytes,3,opt,name=limit" json:"limit,omitempty"`
	Price            *float32 `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Level            *uint32  `protobuf:"varint,14,opt,name=level" json:"level,omitempty"`
	CanBuyAgent      *bool    `protobuf:"varint,15,opt,name=can_buy_agent,json=canBuyAgent" json:"can_buy_agent,omitempty"`
	CanBuy           *bool    `protobuf:"varint,16,opt,name=can_buy,json=canBuy" json:"can_buy,omitempty"`
	HasStartTime     *bool    `protobuf:"varint,17,opt,name=has_start_time,json=hasStartTime" json:"has_start_time,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Plan) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Plan) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Plan) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Plan) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Plan) GetCanBuyAgent() bool {
	if m != nil && m.CanBuyAgent != nil {
		return *m.CanBuyAgent
	}
	return false
}

func (m *Plan) GetCanBuy() bool {
	if m != nil && m.CanBuy != nil {
		return *m.CanBuy
	}
	return false
}

func (m *Plan) GetHasStartTime() bool {
	if m != nil && m.HasStartTime != nil {
		return *m.HasStartTime
	}
	return false
}

type Subscription struct {
	Ctx                   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId             *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created               *int64          `protobuf:"varint,11,opt,name=created" json:"created,omitempty"`
	PromotionCode         *string         `protobuf:"bytes,4,opt,name=promotion_code,json=promotionCode" json:"promotion_code,omitempty"`
	Name                  *string         `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Started               *int64          `protobuf:"varint,5,opt,name=started" json:"started,omitempty"`
	DueDate               *int64          `protobuf:"varint,6,opt,name=due_date,json=dueDate" json:"due_date,omitempty"`
	AutoRenew             *bool           `protobuf:"varint,9,opt,name=auto_renew,json=autoRenew" json:"auto_renew,omitempty"`
	BillingCycleMonth     *uint32         `protobuf:"varint,15,opt,name=billing_cycle_month,json=billingCycleMonth" json:"billing_cycle_month,omitempty"`
	NextBillingCycleMonth *uint32         `protobuf:"varint,16,opt,name=next_billing_cycle_month,json=nextBillingCycleMonth" json:"next_billing_cycle_month,omitempty"`
	Plan                  *string         `protobuf:"bytes,17,opt,name=plan" json:"plan,omitempty"`
	Addons                []*Addon        `protobuf:"bytes,21,rep,name=addons" json:"addons,omitempty"`
	Credit                *float32        `protobuf:"fixed32,27,opt,name=credit" json:"credit,omitempty"`
	Notes                 []*Note         `protobuf:"bytes,28,rep,name=notes" json:"notes,omitempty"`
	ReferralBy            *string         `protobuf:"bytes,29,opt,name=referral_by,json=referralBy" json:"referral_by,omitempty"`
	Customer              *Customer       `protobuf:"bytes,31,opt,name=customer" json:"customer,omitempty"`
	PrimaryPaymentMethod  *string         `protobuf:"bytes,32,opt,name=primary_payment_method,json=primaryPaymentMethod" json:"primary_payment_method,omitempty"`
	Limit                 *Limit          `protobuf:"bytes,42,opt,name=limit" json:"limit,omitempty"`
	V3State               *int32          `protobuf:"varint,43,opt,name=v3_state,json=v3State" json:"v3_state,omitempty"`
	XXX_unrecognized      []byte          `json:"-"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Subscription) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Subscription) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Subscription) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Subscription) GetPromotionCode() string {
	if m != nil && m.PromotionCode != nil {
		return *m.PromotionCode
	}
	return ""
}

func (m *Subscription) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Subscription) GetStarted() int64 {
	if m != nil && m.Started != nil {
		return *m.Started
	}
	return 0
}

func (m *Subscription) GetDueDate() int64 {
	if m != nil && m.DueDate != nil {
		return *m.DueDate
	}
	return 0
}

func (m *Subscription) GetAutoRenew() bool {
	if m != nil && m.AutoRenew != nil {
		return *m.AutoRenew
	}
	return false
}

func (m *Subscription) GetBillingCycleMonth() uint32 {
	if m != nil && m.BillingCycleMonth != nil {
		return *m.BillingCycleMonth
	}
	return 0
}

func (m *Subscription) GetNextBillingCycleMonth() uint32 {
	if m != nil && m.NextBillingCycleMonth != nil {
		return *m.NextBillingCycleMonth
	}
	return 0
}

func (m *Subscription) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *Subscription) GetAddons() []*Addon {
	if m != nil {
		return m.Addons
	}
	return nil
}

func (m *Subscription) GetCredit() float32 {
	if m != nil && m.Credit != nil {
		return *m.Credit
	}
	return 0
}

func (m *Subscription) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Subscription) GetReferralBy() string {
	if m != nil && m.ReferralBy != nil {
		return *m.ReferralBy
	}
	return ""
}

func (m *Subscription) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *Subscription) GetPrimaryPaymentMethod() string {
	if m != nil && m.PrimaryPaymentMethod != nil {
		return *m.PrimaryPaymentMethod
	}
	return ""
}

func (m *Subscription) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Subscription) GetV3State() int32 {
	if m != nil && m.V3State != nil {
		return *m.V3State
	}
	return 0
}

type Bill struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AccountId        *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Amount           *float32        `protobuf:"fixed32,5,opt,name=amount" json:"amount,omitempty"`
	InvoiceIds       []string        `protobuf:"bytes,6,rep,name=invoice_ids,json=invoiceIds" json:"invoice_ids,omitempty"`
	Created          *int64          `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	CustomerInfo     *Contact        `protobuf:"bytes,8,opt,name=customer_info,json=customerInfo" json:"customer_info,omitempty"`
	PaymentMethod    *string         `protobuf:"bytes,10,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Year             *int32          `protobuf:"varint,11,opt,name=year" json:"year,omitempty"`
	Description      *string         `protobuf:"bytes,12,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Bill) Reset()                    { *m = Bill{} }
func (m *Bill) String() string            { return proto.CompactTextString(m) }
func (*Bill) ProtoMessage()               {}
func (*Bill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bill) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Bill) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Bill) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Bill) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Bill) GetInvoiceIds() []string {
	if m != nil {
		return m.InvoiceIds
	}
	return nil
}

func (m *Bill) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Bill) GetCustomerInfo() *Contact {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (m *Bill) GetPaymentMethod() string {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return ""
}

func (m *Bill) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Bill) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type Note struct {
	Message          *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Creator          *string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	Created          *int64  `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Note) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Note) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Note) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type Invoices struct {
	Invoices         []*Invoice `protobuf:"bytes,2,rep,name=invoices" json:"invoices,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Invoices) Reset()                    { *m = Invoices{} }
func (m *Invoices) String() string            { return proto.CompactTextString(m) }
func (*Invoices) ProtoMessage()               {}
func (*Invoices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Invoices) GetInvoices() []*Invoice {
	if m != nil {
		return m.Invoices
	}
	return nil
}

type Invoice struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AmountDue        *float32        `protobuf:"fixed32,4,opt,name=amount_due,json=amountDue" json:"amount_due,omitempty"`
	PromotionCode    *string         `protobuf:"bytes,5,opt,name=promotion_code,json=promotionCode" json:"promotion_code,omitempty"`
	Description      *string         `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	BillingInfo      *BillingInfo    `protobuf:"bytes,8,opt,name=billing_info,json=billingInfo" json:"billing_info,omitempty"`
	DueDate          *int64          `protobuf:"varint,9,opt,name=due_date,json=dueDate" json:"due_date,omitempty"`
	State            *string         `protobuf:"bytes,10,opt,name=state" json:"state,omitempty"`
	Created          *int64          `protobuf:"varint,11,opt,name=created" json:"created,omitempty"`
	Items            []*InvoiceItem  `protobuf:"bytes,12,rep,name=items" json:"items,omitempty"`
	Subtotal         *float32        `protobuf:"fixed32,14,opt,name=subtotal" json:"subtotal,omitempty"`
	TaxPercent       *float32        `protobuf:"fixed32,15,opt,name=tax_percent,json=taxPercent" json:"tax_percent,omitempty"`
	Tax              *float32        `protobuf:"fixed32,16,opt,name=tax" json:"tax,omitempty"`
	Total            *float32        `protobuf:"fixed32,17,opt,name=total" json:"total,omitempty"`
	Updated          *int64          `protobuf:"varint,18,opt,name=updated" json:"updated,omitempty"`
	Year             *int32          `protobuf:"varint,19,opt,name=year" json:"year,omitempty"`
	Notes            []*Note         `protobuf:"bytes,22,rep,name=notes" json:"notes,omitempty"`
	Bills            []string        `protobuf:"bytes,23,rep,name=bills" json:"bills,omitempty"`
	PaymentMade      *float32        `protobuf:"fixed32,24,opt,name=payment_made,json=paymentMade" json:"payment_made,omitempty"`
	CurrentSub       *Subscription   `protobuf:"bytes,25,opt,name=current_sub,json=currentSub" json:"current_sub,omitempty"`
	CurrentPlan      *Plan           `protobuf:"bytes,26,opt,name=current_plan,json=currentPlan" json:"current_plan,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Invoice) Reset()                    { *m = Invoice{} }
func (m *Invoice) String() string            { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()               {}
func (*Invoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Invoice) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Invoice) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Invoice) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Invoice) GetAmountDue() float32 {
	if m != nil && m.AmountDue != nil {
		return *m.AmountDue
	}
	return 0
}

func (m *Invoice) GetPromotionCode() string {
	if m != nil && m.PromotionCode != nil {
		return *m.PromotionCode
	}
	return ""
}

func (m *Invoice) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Invoice) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

func (m *Invoice) GetDueDate() int64 {
	if m != nil && m.DueDate != nil {
		return *m.DueDate
	}
	return 0
}

func (m *Invoice) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Invoice) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Invoice) GetItems() []*InvoiceItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Invoice) GetSubtotal() float32 {
	if m != nil && m.Subtotal != nil {
		return *m.Subtotal
	}
	return 0
}

func (m *Invoice) GetTaxPercent() float32 {
	if m != nil && m.TaxPercent != nil {
		return *m.TaxPercent
	}
	return 0
}

func (m *Invoice) GetTax() float32 {
	if m != nil && m.Tax != nil {
		return *m.Tax
	}
	return 0
}

func (m *Invoice) GetTotal() float32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *Invoice) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *Invoice) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Invoice) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Invoice) GetBills() []string {
	if m != nil {
		return m.Bills
	}
	return nil
}

func (m *Invoice) GetPaymentMade() float32 {
	if m != nil && m.PaymentMade != nil {
		return *m.PaymentMade
	}
	return 0
}

func (m *Invoice) GetCurrentSub() *Subscription {
	if m != nil {
		return m.CurrentSub
	}
	return nil
}

func (m *Invoice) GetCurrentPlan() *Plan {
	if m != nil {
		return m.CurrentPlan
	}
	return nil
}

type AgentInvoiceItem struct {
	Plan             *string `protobuf:"bytes,3,opt,name=plan" json:"plan,omitempty"`
	DayLeft          *int32  `protobuf:"varint,4,opt,name=day_left,json=dayLeft" json:"day_left,omitempty"`
	AgentCount       *int32  `protobuf:"varint,8,opt,name=agent_count,json=agentCount" json:"agent_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AgentInvoiceItem) Reset()                    { *m = AgentInvoiceItem{} }
func (m *AgentInvoiceItem) String() string            { return proto.CompactTextString(m) }
func (*AgentInvoiceItem) ProtoMessage()               {}
func (*AgentInvoiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AgentInvoiceItem) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *AgentInvoiceItem) GetDayLeft() int32 {
	if m != nil && m.DayLeft != nil {
		return *m.DayLeft
	}
	return 0
}

func (m *AgentInvoiceItem) GetAgentCount() int32 {
	if m != nil && m.AgentCount != nil {
		return *m.AgentCount
	}
	return 0
}

type RenewInvoiceItem struct {
	Plan              *string `protobuf:"bytes,3,opt,name=plan" json:"plan,omitempty"`
	BillingCycleMonth *uint32 `protobuf:"varint,4,opt,name=billing_cycle_month,json=billingCycleMonth" json:"billing_cycle_month,omitempty"`
	AgentCount        *uint32 `protobuf:"varint,5,opt,name=agent_count,json=agentCount" json:"agent_count,omitempty"`
	FromTime          *int64  `protobuf:"varint,6,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *RenewInvoiceItem) Reset()                    { *m = RenewInvoiceItem{} }
func (m *RenewInvoiceItem) String() string            { return proto.CompactTextString(m) }
func (*RenewInvoiceItem) ProtoMessage()               {}
func (*RenewInvoiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RenewInvoiceItem) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *RenewInvoiceItem) GetBillingCycleMonth() uint32 {
	if m != nil && m.BillingCycleMonth != nil {
		return *m.BillingCycleMonth
	}
	return 0
}

func (m *RenewInvoiceItem) GetAgentCount() uint32 {
	if m != nil && m.AgentCount != nil {
		return *m.AgentCount
	}
	return 0
}

func (m *RenewInvoiceItem) GetFromTime() int64 {
	if m != nil && m.FromTime != nil {
		return *m.FromTime
	}
	return 0
}

type PlanInvoiceItem struct {
	AgentCount        *uint32  `protobuf:"varint,2,opt,name=agent_count,json=agentCount" json:"agent_count,omitempty"`
	BillingCycleMonth *uint32  `protobuf:"varint,5,opt,name=billing_cycle_month,json=billingCycleMonth" json:"billing_cycle_month,omitempty"`
	OldPlan           *string  `protobuf:"bytes,6,opt,name=old_plan,json=oldPlan" json:"old_plan,omitempty"`
	NewPlan           *string  `protobuf:"bytes,3,opt,name=new_plan,json=newPlan" json:"new_plan,omitempty"`
	SavePercentage    *float32 `protobuf:"fixed32,9,opt,name=save_percentage,json=savePercentage" json:"save_percentage,omitempty"`
	Started           *int64   `protobuf:"varint,8,opt,name=started" json:"started,omitempty"`
	DayLeft           *int32   `protobuf:"varint,4,opt,name=day_left,json=dayLeft" json:"day_left,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *PlanInvoiceItem) Reset()                    { *m = PlanInvoiceItem{} }
func (m *PlanInvoiceItem) String() string            { return proto.CompactTextString(m) }
func (*PlanInvoiceItem) ProtoMessage()               {}
func (*PlanInvoiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PlanInvoiceItem) GetAgentCount() uint32 {
	if m != nil && m.AgentCount != nil {
		return *m.AgentCount
	}
	return 0
}

func (m *PlanInvoiceItem) GetBillingCycleMonth() uint32 {
	if m != nil && m.BillingCycleMonth != nil {
		return *m.BillingCycleMonth
	}
	return 0
}

func (m *PlanInvoiceItem) GetOldPlan() string {
	if m != nil && m.OldPlan != nil {
		return *m.OldPlan
	}
	return ""
}

func (m *PlanInvoiceItem) GetNewPlan() string {
	if m != nil && m.NewPlan != nil {
		return *m.NewPlan
	}
	return ""
}

func (m *PlanInvoiceItem) GetSavePercentage() float32 {
	if m != nil && m.SavePercentage != nil {
		return *m.SavePercentage
	}
	return 0
}

func (m *PlanInvoiceItem) GetStarted() int64 {
	if m != nil && m.Started != nil {
		return *m.Started
	}
	return 0
}

func (m *PlanInvoiceItem) GetDayLeft() int32 {
	if m != nil && m.DayLeft != nil {
		return *m.DayLeft
	}
	return 0
}

type InvoiceItem struct {
	Description      *string           `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	InvoiceId        *string           `protobuf:"bytes,6,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	Quantity         *int32            `protobuf:"varint,7,opt,name=quantity" json:"quantity,omitempty"`
	Price            *float32          `protobuf:"fixed32,8,opt,name=price" json:"price,omitempty"`
	Data             *InvoiceItem_Data `protobuf:"bytes,9,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *InvoiceItem) Reset()                    { *m = InvoiceItem{} }
func (m *InvoiceItem) String() string            { return proto.CompactTextString(m) }
func (*InvoiceItem) ProtoMessage()               {}
func (*InvoiceItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InvoiceItem) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *InvoiceItem) GetInvoiceId() string {
	if m != nil && m.InvoiceId != nil {
		return *m.InvoiceId
	}
	return ""
}

func (m *InvoiceItem) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *InvoiceItem) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *InvoiceItem) GetData() *InvoiceItem_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type InvoiceItem_Data struct {
	Renew            *RenewInvoiceItem `protobuf:"bytes,2,opt,name=renew" json:"renew,omitempty"`
	Agent            *AgentInvoiceItem `protobuf:"bytes,3,opt,name=agent" json:"agent,omitempty"`
	Plan             *PlanInvoiceItem  `protobuf:"bytes,5,opt,name=plan" json:"plan,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *InvoiceItem_Data) Reset()                    { *m = InvoiceItem_Data{} }
func (m *InvoiceItem_Data) String() string            { return proto.CompactTextString(m) }
func (*InvoiceItem_Data) ProtoMessage()               {}
func (*InvoiceItem_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

func (m *InvoiceItem_Data) GetRenew() *RenewInvoiceItem {
	if m != nil {
		return m.Renew
	}
	return nil
}

func (m *InvoiceItem_Data) GetAgent() *AgentInvoiceItem {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *InvoiceItem_Data) GetPlan() *PlanInvoiceItem {
	if m != nil {
		return m.Plan
	}
	return nil
}

type BillingInfo struct {
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Address          *string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Vat              *string `protobuf:"bytes,4,opt,name=vat" json:"vat,omitempty"`
	CountryCode      *string `protobuf:"bytes,5,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BillingInfo) Reset()                    { *m = BillingInfo{} }
func (m *BillingInfo) String() string            { return proto.CompactTextString(m) }
func (*BillingInfo) ProtoMessage()               {}
func (*BillingInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BillingInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BillingInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *BillingInfo) GetVat() string {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return ""
}

func (m *BillingInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

type Contact struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Name             *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email            *string         `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone            *string         `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	JobTitle         *string         `protobuf:"bytes,5,opt,name=job_title,json=jobTitle" json:"job_title,omitempty"`
	Title            *string         `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Primary          *bool           `protobuf:"varint,7,opt,name=primary" json:"primary,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Contact) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Contact) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Contact) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Contact) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Contact) GetJobTitle() string {
	if m != nil && m.JobTitle != nil {
		return *m.JobTitle
	}
	return ""
}

func (m *Contact) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Contact) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

type Customer struct {
	Id               *string      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId        *string      `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Contacts         []*Contact   `protobuf:"bytes,4,rep,name=contacts" json:"contacts,omitempty"`
	Created          *int64       `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	BillingInfo      *BillingInfo `protobuf:"bytes,6,opt,name=billing_info,json=billingInfo" json:"billing_info,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Customer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Customer) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Customer) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Customer) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Customer) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

type FixedAmountPromotionCode struct {
	Amount           *float32 `protobuf:"fixed32,2,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FixedAmountPromotionCode) Reset()                    { *m = FixedAmountPromotionCode{} }
func (m *FixedAmountPromotionCode) String() string            { return proto.CompactTextString(m) }
func (*FixedAmountPromotionCode) ProtoMessage()               {}
func (*FixedAmountPromotionCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FixedAmountPromotionCode) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type PercentPromotionCode struct {
	Percent          *float32 `protobuf:"fixed32,2,opt,name=percent" json:"percent,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PercentPromotionCode) Reset()                    { *m = PercentPromotionCode{} }
func (m *PercentPromotionCode) String() string            { return proto.CompactTextString(m) }
func (*PercentPromotionCode) ProtoMessage()               {}
func (*PercentPromotionCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PercentPromotionCode) GetPercent() float32 {
	if m != nil && m.Percent != nil {
		return *m.Percent
	}
	return 0
}

type CreditCode struct {
	Credit           *float32 `protobuf:"fixed32,2,opt,name=credit" json:"credit,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CreditCode) Reset()                    { *m = CreditCode{} }
func (m *CreditCode) String() string            { return proto.CompactTextString(m) }
func (*CreditCode) ProtoMessage()               {}
func (*CreditCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreditCode) GetCredit() float32 {
	if m != nil && m.Credit != nil {
		return *m.Credit
	}
	return 0
}

type ReferralCreditCode struct {
	ReferrerId       *string  `protobuf:"bytes,2,opt,name=referrer_id,json=referrerId" json:"referrer_id,omitempty"`
	Credit           *float32 `protobuf:"fixed32,3,opt,name=credit" json:"credit,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ReferralCreditCode) Reset()                    { *m = ReferralCreditCode{} }
func (m *ReferralCreditCode) String() string            { return proto.CompactTextString(m) }
func (*ReferralCreditCode) ProtoMessage()               {}
func (*ReferralCreditCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReferralCreditCode) GetReferrerId() string {
	if m != nil && m.ReferrerId != nil {
		return *m.ReferrerId
	}
	return ""
}

func (m *ReferralCreditCode) GetCredit() float32 {
	if m != nil && m.Credit != nil {
		return *m.Credit
	}
	return 0
}

type PromotionCode struct {
	Ctx              *common.Context     `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Description      *string             `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Type             *string             `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	RedeemCount      *int32              `protobuf:"varint,5,opt,name=redeem_count,json=redeemCount" json:"redeem_count,omitempty"`
	Creator          *string             `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	Created          *int64              `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Code             *string             `protobuf:"bytes,11,opt,name=code" json:"code,omitempty"`
	Data             *PromotionCode_Data `protobuf:"bytes,14,opt,name=data" json:"data,omitempty"`
	Start            *int64              `protobuf:"varint,16,opt,name=start" json:"start,omitempty"`
	End              *int64              `protobuf:"varint,17,opt,name=end" json:"end,omitempty"`
	ForPlan          *string             `protobuf:"bytes,18,opt,name=for_plan,json=forPlan" json:"for_plan,omitempty"`
	ForAccountId     *string             `protobuf:"bytes,19,opt,name=for_account_id,json=forAccountId" json:"for_account_id,omitempty"`
	MaxRedemptions   *int32              `protobuf:"varint,20,opt,name=max_redemptions,json=maxRedemptions" json:"max_redemptions,omitempty"`
	Addon            *string             `protobuf:"bytes,21,opt,name=addon" json:"addon,omitempty"`
	ForItems         []string            `protobuf:"bytes,23,rep,name=for_items,json=forItems" json:"for_items,omitempty"`
	MinAmount        *float32            `protobuf:"fixed32,24,opt,name=min_amount,json=minAmount" json:"min_amount,omitempty"`
	MaxAmount        *float32            `protobuf:"fixed32,25,opt,name=max_amount,json=maxAmount" json:"max_amount,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *PromotionCode) Reset()                    { *m = PromotionCode{} }
func (m *PromotionCode) String() string            { return proto.CompactTextString(m) }
func (*PromotionCode) ProtoMessage()               {}
func (*PromotionCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PromotionCode) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PromotionCode) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PromotionCode) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *PromotionCode) GetRedeemCount() int32 {
	if m != nil && m.RedeemCount != nil {
		return *m.RedeemCount
	}
	return 0
}

func (m *PromotionCode) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *PromotionCode) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *PromotionCode) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *PromotionCode) GetData() *PromotionCode_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PromotionCode) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *PromotionCode) GetEnd() int64 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

func (m *PromotionCode) GetForPlan() string {
	if m != nil && m.ForPlan != nil {
		return *m.ForPlan
	}
	return ""
}

func (m *PromotionCode) GetForAccountId() string {
	if m != nil && m.ForAccountId != nil {
		return *m.ForAccountId
	}
	return ""
}

func (m *PromotionCode) GetMaxRedemptions() int32 {
	if m != nil && m.MaxRedemptions != nil {
		return *m.MaxRedemptions
	}
	return 0
}

func (m *PromotionCode) GetAddon() string {
	if m != nil && m.Addon != nil {
		return *m.Addon
	}
	return ""
}

func (m *PromotionCode) GetForItems() []string {
	if m != nil {
		return m.ForItems
	}
	return nil
}

func (m *PromotionCode) GetMinAmount() float32 {
	if m != nil && m.MinAmount != nil {
		return *m.MinAmount
	}
	return 0
}

func (m *PromotionCode) GetMaxAmount() float32 {
	if m != nil && m.MaxAmount != nil {
		return *m.MaxAmount
	}
	return 0
}

type PromotionCode_Data struct {
	FixedAmount      *FixedAmountPromotionCode `protobuf:"bytes,1,opt,name=fixed_amount,json=fixedAmount" json:"fixed_amount,omitempty"`
	Percent          *PercentPromotionCode     `protobuf:"bytes,2,opt,name=percent" json:"percent,omitempty"`
	Credit           *CreditCode               `protobuf:"bytes,3,opt,name=credit" json:"credit,omitempty"`
	Referral         *ReferralCreditCode       `protobuf:"bytes,4,opt,name=referral" json:"referral,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *PromotionCode_Data) Reset()                    { *m = PromotionCode_Data{} }
func (m *PromotionCode_Data) String() string            { return proto.CompactTextString(m) }
func (*PromotionCode_Data) ProtoMessage()               {}
func (*PromotionCode_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

func (m *PromotionCode_Data) GetFixedAmount() *FixedAmountPromotionCode {
	if m != nil {
		return m.FixedAmount
	}
	return nil
}

func (m *PromotionCode_Data) GetPercent() *PercentPromotionCode {
	if m != nil {
		return m.Percent
	}
	return nil
}

func (m *PromotionCode_Data) GetCredit() *CreditCode {
	if m != nil {
		return m.Credit
	}
	return nil
}

func (m *PromotionCode_Data) GetReferral() *ReferralCreditCode {
	if m != nil {
		return m.Referral
	}
	return nil
}

type ExchangeRate struct {
	FromCurrency     *string  `protobuf:"bytes,2,opt,name=from_currency,json=fromCurrency" json:"from_currency,omitempty"`
	ToCurrency       *string  `protobuf:"bytes,3,opt,name=to_currency,json=toCurrency" json:"to_currency,omitempty"`
	ExchangeRate     *float32 `protobuf:"fixed32,4,opt,name=exchange_rate,json=exchangeRate" json:"exchange_rate,omitempty"`
	ExchangeTime     *int64   `protobuf:"varint,5,opt,name=exchange_time,json=exchangeTime" json:"exchange_time,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ExchangeRate) Reset()                    { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()               {}
func (*ExchangeRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ExchangeRate) GetFromCurrency() string {
	if m != nil && m.FromCurrency != nil {
		return *m.FromCurrency
	}
	return ""
}

func (m *ExchangeRate) GetToCurrency() string {
	if m != nil && m.ToCurrency != nil {
		return *m.ToCurrency
	}
	return ""
}

func (m *ExchangeRate) GetExchangeRate() float32 {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return 0
}

func (m *ExchangeRate) GetExchangeTime() int64 {
	if m != nil && m.ExchangeTime != nil {
		return *m.ExchangeTime
	}
	return 0
}

type Log struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	User             *string         `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Id               *string         `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
	Action           *string         `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	Created          *int64          `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Description      *string         `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	AccountId        *string         `protobuf:"bytes,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Month            *int32          `protobuf:"varint,7,opt,name=month" json:"month,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Log) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Log) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *Log) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Log) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *Log) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Log) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Log) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Log) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

type Addon struct {
	Type             *string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name             *string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Price            *float32  `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Currency         *Currency `protobuf:"varint,5,opt,name=currency,enum=payment.Currency" json:"currency,omitempty"`
	ChargeType       *string   `protobuf:"bytes,6,opt,name=charge_type,json=chargeType" json:"charge_type,omitempty"`
	Period           *int32    `protobuf:"varint,7,opt,name=period" json:"period,omitempty"`
	PeriodUnit       *string   `protobuf:"bytes,8,opt,name=period_unit,json=periodUnit" json:"period_unit,omitempty"`
	Quantity         *int32    `protobuf:"varint,9,opt,name=quantity" json:"quantity,omitempty"`
	Created          *int64    `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Addon) Reset()                    { *m = Addon{} }
func (m *Addon) String() string            { return proto.CompactTextString(m) }
func (*Addon) ProtoMessage()               {}
func (*Addon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Addon) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Addon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Addon) GetPrice() float32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Addon) GetCurrency() Currency {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return Currency_usd
}

func (m *Addon) GetChargeType() string {
	if m != nil && m.ChargeType != nil {
		return *m.ChargeType
	}
	return ""
}

func (m *Addon) GetPeriod() int32 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return 0
}

func (m *Addon) GetPeriodUnit() string {
	if m != nil && m.PeriodUnit != nil {
		return *m.PeriodUnit
	}
	return ""
}

func (m *Addon) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *Addon) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type PaymentRenewCycleRequested struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId        *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Sub              *Subscription   `protobuf:"bytes,3,opt,name=sub" json:"sub,omitempty"`
	CycleId          *string         `protobuf:"bytes,4,opt,name=cycle_id,json=cycleId" json:"cycle_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PaymentRenewCycleRequested) Reset()                    { *m = PaymentRenewCycleRequested{} }
func (m *PaymentRenewCycleRequested) String() string            { return proto.CompactTextString(m) }
func (*PaymentRenewCycleRequested) ProtoMessage()               {}
func (*PaymentRenewCycleRequested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PaymentRenewCycleRequested) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PaymentRenewCycleRequested) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PaymentRenewCycleRequested) GetSub() *Subscription {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *PaymentRenewCycleRequested) GetCycleId() string {
	if m != nil && m.CycleId != nil {
		return *m.CycleId
	}
	return ""
}

type String struct {
	Str              *string `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *String) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

type PayRequest struct {
	AccountId        *string  `protobuf:"bytes,8,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	InvoiceIds       []string `protobuf:"bytes,6,rep,name=invoice_ids,json=invoiceIds" json:"invoice_ids,omitempty"`
	Description      *string  `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	CustomerInfo     *Contact `protobuf:"bytes,9,opt,name=CustomerInfo" json:"CustomerInfo,omitempty"`
	Amount           *float32 `protobuf:"fixed32,10,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PayRequest) Reset()                    { *m = PayRequest{} }
func (m *PayRequest) String() string            { return proto.CompactTextString(m) }
func (*PayRequest) ProtoMessage()               {}
func (*PayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PayRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PayRequest) GetInvoiceIds() []string {
	if m != nil {
		return m.InvoiceIds
	}
	return nil
}

func (m *PayRequest) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PayRequest) GetCustomerInfo() *Contact {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (m *PayRequest) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type ESubscription struct {
	Sub              *Subscription `protobuf:"bytes,2,opt,name=sub" json:"sub,omitempty"`
	Err              *string       `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ESubscription) Reset()                    { *m = ESubscription{} }
func (m *ESubscription) String() string            { return proto.CompactTextString(m) }
func (*ESubscription) ProtoMessage()               {}
func (*ESubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ESubscription) GetSub() *Subscription {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *ESubscription) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

type EInvoice struct {
	Inv              *Invoice `protobuf:"bytes,3,opt,name=inv" json:"inv,omitempty"`
	Err              *string  `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EInvoice) Reset()                    { *m = EInvoice{} }
func (m *EInvoice) String() string            { return proto.CompactTextString(m) }
func (*EInvoice) ProtoMessage()               {}
func (*EInvoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *EInvoice) GetInv() *Invoice {
	if m != nil {
		return m.Inv
	}
	return nil
}

func (m *EInvoice) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

type InvoiceCreatedEmail struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To               *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BillingName      *string         `protobuf:"bytes,4,opt,name=billing_name,json=billingName" json:"billing_name,omitempty"`
	InvoiceId        *string         `protobuf:"bytes,5,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	Created          *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Lang             *lang.L         `protobuf:"varint,8,opt,name=lang,enum=lang.L" json:"lang,omitempty"`
	From             *string         `protobuf:"bytes,10,opt,name=from" json:"from,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *InvoiceCreatedEmail) Reset()                    { *m = InvoiceCreatedEmail{} }
func (m *InvoiceCreatedEmail) String() string            { return proto.CompactTextString(m) }
func (*InvoiceCreatedEmail) ProtoMessage()               {}
func (*InvoiceCreatedEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *InvoiceCreatedEmail) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *InvoiceCreatedEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *InvoiceCreatedEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *InvoiceCreatedEmail) GetBillingName() string {
	if m != nil && m.BillingName != nil {
		return *m.BillingName
	}
	return ""
}

func (m *InvoiceCreatedEmail) GetInvoiceId() string {
	if m != nil && m.InvoiceId != nil {
		return *m.InvoiceId
	}
	return ""
}

func (m *InvoiceCreatedEmail) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *InvoiceCreatedEmail) GetLang() lang.L {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return lang.L_en
}

func (m *InvoiceCreatedEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func init() {
	proto.RegisterType((*Stripe)(nil), "payment.Stripe")
	proto.RegisterType((*PaymentMethods)(nil), "payment.PaymentMethods")
	proto.RegisterType((*PaymentMethod)(nil), "payment.PaymentMethod")
	proto.RegisterType((*Limit)(nil), "payment.Limit")
	proto.RegisterType((*Plans)(nil), "payment.Plans")
	proto.RegisterType((*Plan)(nil), "payment.Plan")
	proto.RegisterType((*Subscription)(nil), "payment.Subscription")
	proto.RegisterType((*Bill)(nil), "payment.Bill")
	proto.RegisterType((*Note)(nil), "payment.Note")
	proto.RegisterType((*Invoices)(nil), "payment.Invoices")
	proto.RegisterType((*Invoice)(nil), "payment.Invoice")
	proto.RegisterType((*AgentInvoiceItem)(nil), "payment.AgentInvoiceItem")
	proto.RegisterType((*RenewInvoiceItem)(nil), "payment.RenewInvoiceItem")
	proto.RegisterType((*PlanInvoiceItem)(nil), "payment.PlanInvoiceItem")
	proto.RegisterType((*InvoiceItem)(nil), "payment.InvoiceItem")
	proto.RegisterType((*InvoiceItem_Data)(nil), "payment.InvoiceItem.Data")
	proto.RegisterType((*BillingInfo)(nil), "payment.BillingInfo")
	proto.RegisterType((*Contact)(nil), "payment.Contact")
	proto.RegisterType((*Customer)(nil), "payment.Customer")
	proto.RegisterType((*FixedAmountPromotionCode)(nil), "payment.FixedAmountPromotionCode")
	proto.RegisterType((*PercentPromotionCode)(nil), "payment.PercentPromotionCode")
	proto.RegisterType((*CreditCode)(nil), "payment.CreditCode")
	proto.RegisterType((*ReferralCreditCode)(nil), "payment.ReferralCreditCode")
	proto.RegisterType((*PromotionCode)(nil), "payment.PromotionCode")
	proto.RegisterType((*PromotionCode_Data)(nil), "payment.PromotionCode.Data")
	proto.RegisterType((*ExchangeRate)(nil), "payment.ExchangeRate")
	proto.RegisterType((*Log)(nil), "payment.Log")
	proto.RegisterType((*Addon)(nil), "payment.Addon")
	proto.RegisterType((*PaymentRenewCycleRequested)(nil), "payment.PaymentRenewCycleRequested")
	proto.RegisterType((*String)(nil), "payment.String")
	proto.RegisterType((*PayRequest)(nil), "payment.PayRequest")
	proto.RegisterType((*ESubscription)(nil), "payment.ESubscription")
	proto.RegisterType((*EInvoice)(nil), "payment.EInvoice")
	proto.RegisterType((*InvoiceCreatedEmail)(nil), "payment.InvoiceCreatedEmail")
	proto.RegisterEnum("payment.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("payment.Event", Event_name, Event_value)
	proto.RegisterEnum("payment.PaymentMethod_Type", PaymentMethod_Type_name, PaymentMethod_Type_value)
	proto.RegisterEnum("payment.PaymentMethod_State", PaymentMethod_State_name, PaymentMethod_State_value)
	proto.RegisterEnum("payment.Plan_Type", Plan_Type_name, Plan_Type_value)
	proto.RegisterEnum("payment.Invoice_State", Invoice_State_name, Invoice_State_value)
	proto.RegisterEnum("payment.Contact_Title", Contact_Title_name, Contact_Title_value)
	proto.RegisterEnum("payment.PromotionCode_Type", PromotionCode_Type_name, PromotionCode_Type_value)
	proto.RegisterEnum("payment.Log_Action", Log_Action_name, Log_Action_value)
	proto.RegisterEnum("payment.Addon_Type", Addon_Type_name, Addon_Type_value)
	proto.RegisterEnum("payment.Addon_ChargeType", Addon_ChargeType_name, Addon_ChargeType_value)
	proto.RegisterEnum("payment.Addon_PeriodUnit", Addon_PeriodUnit_name, Addon_PeriodUnit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SubizInternalPaymentMgr service

type SubizInternalPaymentMgrClient interface {
	CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error)
	UpdateExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error)
}

type subizInternalPaymentMgrClient struct {
	cc *grpc.ClientConn
}

func NewSubizInternalPaymentMgrClient(cc *grpc.ClientConn) SubizInternalPaymentMgrClient {
	return &subizInternalPaymentMgrClient{cc}
}

func (c *subizInternalPaymentMgrClient) CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := grpc.Invoke(ctx, "/payment.SubizInternalPaymentMgr/CreateBill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subizInternalPaymentMgrClient) UpdateExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := grpc.Invoke(ctx, "/payment.SubizInternalPaymentMgr/UpdateExchangeRate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubizInternalPaymentMgr service

type SubizInternalPaymentMgrServer interface {
	CreateBill(context.Context, *Bill) (*Bill, error)
	UpdateExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error)
}

func RegisterSubizInternalPaymentMgrServer(s *grpc.Server, srv SubizInternalPaymentMgrServer) {
	s.RegisterService(&_SubizInternalPaymentMgr_serviceDesc, srv)
}

func _SubizInternalPaymentMgr_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.SubizInternalPaymentMgr/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubizInternalPaymentMgr_UpdateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).UpdateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.SubizInternalPaymentMgr/UpdateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).UpdateExchangeRate(ctx, req.(*ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubizInternalPaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.SubizInternalPaymentMgr",
	HandlerType: (*SubizInternalPaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _SubizInternalPaymentMgr_CreateBill_Handler,
		},
		{
			MethodName: "UpdateExchangeRate",
			Handler:    _SubizInternalPaymentMgr_UpdateExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}

// Client API for PaymentMgr service

type PaymentMgrClient interface {
	Purchase(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	GetSubscription(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error)
	GetPromotionCode(ctx context.Context, in *String, opts ...grpc.CallOption) (*PromotionCode, error)
	AddPaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	DeletePaymentMethod(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListPaymentMethods(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PaymentMethods, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Bill, error)
	ListInvoices(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Invoices, error)
	CreateInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
	// rpc Creat(Customer) returns (Customer);
	ListPlans(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Plans, error)
	ExportInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*String, error)
	GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error)
	TransferMoney(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Bill, error)
}

type paymentMgrClient struct {
	cc *grpc.ClientConn
}

func NewPaymentMgrClient(cc *grpc.ClientConn) PaymentMgrClient {
	return &paymentMgrClient{cc}
}

func (c *paymentMgrClient) Purchase(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/Purchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/UpdateSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSubscription(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetPromotionCode(ctx context.Context, in *String, opts ...grpc.CallOption) (*PromotionCode, error) {
	out := new(PromotionCode)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetPromotionCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddPaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/AddPaymentMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/UpdatePaymentMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePaymentMethod(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/DeletePaymentMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPaymentMethods(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PaymentMethods, error) {
	out := new(PaymentMethods)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/ListPaymentMethods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/Pay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListInvoices(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Invoices, error) {
	out := new(Invoices)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/ListInvoices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreateInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/CreateInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPlans(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Plans, error) {
	out := new(Plans)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/ListPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ExportInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/ExportInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/GetExchangeRate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) TransferMoney(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := grpc.Invoke(ctx, "/payment.PaymentMgr/TransferMoney", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMgr service

type PaymentMgrServer interface {
	Purchase(context.Context, *Subscription) (*Subscription, error)
	UpdateSubscription(context.Context, *Subscription) (*Subscription, error)
	GetSubscription(context.Context, *common.Empty) (*Subscription, error)
	GetPromotionCode(context.Context, *String) (*PromotionCode, error)
	AddPaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	DeletePaymentMethod(context.Context, *common.Id) (*common.Empty, error)
	ListPaymentMethods(context.Context, *common.Empty) (*PaymentMethods, error)
	Pay(context.Context, *PayRequest) (*Bill, error)
	ListInvoices(context.Context, *common.Id) (*Invoices, error)
	CreateInvoice(context.Context, *Invoice) (*Invoice, error)
	// rpc Creat(Customer) returns (Customer);
	ListPlans(context.Context, *common.Empty) (*Plans, error)
	ExportInvoice(context.Context, *common.Id) (*String, error)
	GetExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error)
	TransferMoney(context.Context, *PayRequest) (*Bill, error)
}

func RegisterPaymentMgrServer(s *grpc.Server, srv PaymentMgrServer) {
	s.RegisterService(&_PaymentMgr_serviceDesc, srv)
}

func _PaymentMgr_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Purchase(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSubscription(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/UpdatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/ListPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/ListInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListInvoices(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPlans(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/ExportInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, req.(*ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentMgr/TransferMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).TransferMoney(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentMgr",
	HandlerType: (*PaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Purchase",
			Handler:    _PaymentMgr_Purchase_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _PaymentMgr_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentMgr_GetSubscription_Handler,
		},
		{
			MethodName: "GetPromotionCode",
			Handler:    _PaymentMgr_GetPromotionCode_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _PaymentMgr_AddPaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _PaymentMgr_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _PaymentMgr_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _PaymentMgr_ListPaymentMethods_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentMgr_Pay_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _PaymentMgr_ListInvoices_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _PaymentMgr_CreateInvoice_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _PaymentMgr_ListPlans_Handler,
		},
		{
			MethodName: "ExportInvoice",
			Handler:    _PaymentMgr_ExportInvoice_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _PaymentMgr_GetExchangeRate_Handler,
		},
		{
			MethodName: "TransferMoney",
			Handler:    _PaymentMgr_TransferMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}

func init() { proto.RegisterFile("payment/payment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x6f, 0xdc, 0xd6,
	0x76, 0xd7, 0x0c, 0x87, 0xf3, 0x71, 0xe6, 0x43, 0xd4, 0x95, 0x2c, 0xd3, 0xe3, 0x1a, 0x96, 0x19,
	0xa7, 0x76, 0x14, 0x47, 0x0e, 0x64, 0xb7, 0x0e, 0xd0, 0x02, 0xa9, 0x2d, 0xab, 0x81, 0x0a, 0x3b,
	0x50, 0x28, 0xa7, 0xdd, 0x95, 0xb8, 0x33, 0xbc, 0x92, 0x18, 0x0f, 0xc9, 0x31, 0x79, 0x47, 0xd6,
	0x64, 0xdd, 0x45, 0xbb, 0x28, 0xd0, 0x45, 0xd1, 0x5d, 0x5b, 0x20, 0xff, 0x43, 0x37, 0x45, 0x81,
	0x6e, 0xfb, 0x37, 0x14, 0xdd, 0x15, 0x6f, 0xf5, 0xb6, 0x0f, 0x6f, 0xfd, 0x70, 0xce, 0xbd, 0xe4,
	0x90, 0x9c, 0x91, 0xad, 0xbc, 0xbc, 0x8d, 0xc5, 0xf3, 0x71, 0xbf, 0xce, 0x3d, 0x1f, 0xbf, 0x7b,
	0xc6, 0x70, 0x63, 0xca, 0xe7, 0xa1, 0x88, 0xe4, 0x63, 0xfd, 0x77, 0x6f, 0x9a, 0xc4, 0x32, 0x66,
	0x2d, 0x4d, 0x0e, 0xf7, 0x46, 0x81, 0x1c, 0xcd, 0xc6, 0x6f, 0x85, 0xdc, 0x8b, 0x93, 0xb3, 0xc7,
	0xe9, 0x6c, 0x14, 0xfc, 0xf8, 0xf8, 0x5c, 0x70, 0x5f, 0x24, 0x8f, 0xc7, 0x71, 0x18, 0xc6, 0x91,
	0xfe, 0xa3, 0x06, 0x0e, 0x77, 0x3f, 0xa0, 0x3f, 0xe1, 0xd1, 0x19, 0xfd, 0xa3, 0x74, 0x9d, 0xbf,
	0x85, 0xe6, 0x89, 0x4c, 0x82, 0xa9, 0x60, 0x77, 0x00, 0xc6, 0x3c, 0xf1, 0xbd, 0x09, 0x4f, 0xe5,
	0x53, 0xbb, 0xbe, 0x53, 0x7b, 0xd8, 0x71, 0x3b, 0xc8, 0x79, 0x85, 0x0c, 0x76, 0x17, 0xba, 0xe3,
	0x59, 0x2a, 0xe3, 0x50, 0x24, 0x5e, 0xe0, 0xdb, 0x06, 0xc9, 0x21, 0x63, 0x1d, 0xf9, 0x6c, 0x0b,
	0x4c, 0x19, 0xbf, 0x15, 0x91, 0xdd, 0x20, 0x91, 0x22, 0x9c, 0xef, 0x60, 0x70, 0xac, 0x8e, 0xf1,
	0x5a, 0xc8, 0xf3, 0xd8, 0x4f, 0xd9, 0xd7, 0xb0, 0xae, 0x0f, 0xe6, 0x85, 0x8a, 0x65, 0xd7, 0x77,
	0x8c, 0x87, 0xdd, 0xfd, 0xed, 0xbd, 0xec, 0xfc, 0xa5, 0x11, 0xee, 0x60, 0x5a, 0x9a, 0xc0, 0xf9,
	0xbf, 0x3a, 0xf4, 0x4b, 0x1a, 0xec, 0x1e, 0x18, 0x63, 0x79, 0x69, 0xd7, 0x76, 0x6a, 0x0f, 0xbb,
	0xfb, 0xeb, 0x7b, 0xda, 0x18, 0x07, 0x71, 0x24, 0xc5, 0xa5, 0x74, 0x51, 0xc6, 0x18, 0x34, 0xe4,
	0x7c, 0x2a, 0xf4, 0xb9, 0xe8, 0x9b, 0x0d, 0xa0, 0x9e, 0x9f, 0xa4, 0x1e, 0xf8, 0x68, 0x01, 0x3e,
	0x1e, 0xc7, 0xb3, 0x48, 0xe2, 0x09, 0xd5, 0x31, 0x3a, 0x9a, 0xa3, 0x0e, 0x98, 0x4a, 0x2e, 0x85,
	0x6d, 0xaa, 0x03, 0x12, 0xc1, 0x6c, 0x68, 0x8d, 0x13, 0xc1, 0xa5, 0xf0, 0xed, 0xf6, 0x4e, 0xed,
	0xa1, 0xe1, 0x66, 0x24, 0x7b, 0x00, 0xcd, 0x94, 0x4c, 0x6b, 0x77, 0xf4, 0xc6, 0xb2, 0xf3, 0x29,
	0x8b, 0xbb, 0x5a, 0xcc, 0x3e, 0x85, 0xc1, 0x29, 0x0f, 0x26, 0xc2, 0xf7, 0x42, 0x91, 0xa6, 0xfc,
	0x4c, 0xd8, 0x40, 0x2b, 0xf4, 0x15, 0xf7, 0xb5, 0x62, 0xd2, 0x4a, 0xe7, 0x3c, 0x39, 0x13, 0xbe,
	0xdd, 0xd5, 0x2b, 0x29, 0xd2, 0xd9, 0x85, 0xc6, 0x1b, 0x3c, 0xd0, 0x06, 0xf4, 0x47, 0x3c, 0x7a,
	0xeb, 0xc9, 0x84, 0x47, 0xe9, 0xa9, 0x48, 0xac, 0x35, 0xb6, 0x0e, 0xdd, 0x71, 0x22, 0xfc, 0x40,
	0x7a, 0x78, 0x95, 0x56, 0xcd, 0xb9, 0x0b, 0xe6, 0x09, 0x6d, 0x1c, 0xa0, 0xc9, 0xc7, 0x32, 0xb8,
	0x10, 0xd6, 0x1a, 0x7e, 0xab, 0xb5, 0xac, 0x9a, 0xf3, 0xef, 0x06, 0x98, 0xaf, 0x82, 0x30, 0x90,
	0xd7, 0x31, 0x6b, 0xd9, 0x64, 0x46, 0xd5, 0x64, 0x0f, 0x60, 0x3d, 0xe4, 0x97, 0x1e, 0x9f, 0xc9,
	0x38, 0xe4, 0x32, 0x88, 0xa3, 0x94, 0xcc, 0xda, 0x77, 0x07, 0x21, 0xbf, 0x7c, 0xbe, 0xe0, 0xb2,
	0x7b, 0xd0, 0x43, 0xc5, 0x54, 0x9c, 0xa1, 0x81, 0x52, 0xbb, 0x45, 0x5a, 0xdd, 0x90, 0x5f, 0x9e,
	0x68, 0x16, 0x2e, 0x45, 0x73, 0x9d, 0x91, 0x42, 0x9b, 0x14, 0x3a, 0x38, 0x0d, 0x31, 0x98, 0x03,
	0xfd, 0x31, 0x8f, 0xbc, 0xd1, 0x6c, 0xae, 0x54, 0xc8, 0x86, 0x6d, 0xb7, 0x3b, 0xe6, 0xd1, 0x8b,
	0xd9, 0x9c, 0x94, 0xd8, 0x57, 0x60, 0x2f, 0xb6, 0xe2, 0xbd, 0x17, 0xa3, 0xf3, 0x38, 0x7e, 0xeb,
	0xbd, 0x9b, 0xc5, 0x92, 0xdb, 0x3d, 0x9a, 0x70, 0x7b, 0x21, 0xff, 0x1b, 0x25, 0xfe, 0x0e, 0xa5,
	0xec, 0x29, 0x14, 0x24, 0x9e, 0x08, 0x79, 0x30, 0xd1, 0xe3, 0xfa, 0x34, 0x6e, 0x6b, 0x21, 0x3d,
	0x44, 0xa1, 0x1a, 0x55, 0x5e, 0x4f, 0x5f, 0xae, 0x1e, 0x37, 0xa8, 0xae, 0xa7, 0xaf, 0x59, 0x8d,
	0xbc, 0x0d, 0x78, 0x34, 0x2f, 0x99, 0x4d, 0x44, 0x6a, 0x5b, 0xa4, 0xda, 0x0e, 0xf9, 0xa5, 0x8b,
	0xb4, 0xf3, 0x08, 0xcc, 0xe3, 0x09, 0x8f, 0x52, 0xf6, 0x09, 0x98, 0x53, 0xfc, 0xd0, 0x01, 0xd4,
	0x5f, 0x04, 0xd0, 0x84, 0x47, 0xae, 0x92, 0x39, 0x7f, 0x5f, 0x87, 0x06, 0xd2, 0x18, 0x02, 0x11,
	0x0f, 0xf3, 0x10, 0xc0, 0x6f, 0x76, 0x1f, 0xcc, 0x09, 0xde, 0x35, 0x5d, 0x5d, 0x77, 0x7f, 0x90,
	0xcf, 0x40, 0x1e, 0xe0, 0x2a, 0x21, 0x7a, 0xfe, 0x34, 0x09, 0xc6, 0x82, 0x2e, 0xaf, 0xee, 0x2a,
	0x02, 0xb9, 0x13, 0x71, 0x21, 0x26, 0xfa, 0x28, 0x8a, 0x58, 0xbe, 0x87, 0xf5, 0xe5, 0x7b, 0xb8,
	0x09, 0x2d, 0xad, 0x43, 0x67, 0x6b, 0xbb, 0x4d, 0x25, 0x65, 0xf7, 0x61, 0x70, 0xce, 0x53, 0x2f,
	0x95, 0x3c, 0x91, 0x9e, 0x0c, 0x42, 0x61, 0x6f, 0x90, 0xbc, 0x77, 0xce, 0xd3, 0x13, 0x64, 0xbe,
	0x09, 0x42, 0xe1, 0x3c, 0xd3, 0xee, 0xde, 0x01, 0x53, 0x26, 0x01, 0x9f, 0x58, 0x6b, 0xac, 0x0d,
	0x8d, 0xd3, 0x44, 0x08, 0xab, 0xc6, 0x7a, 0xd0, 0x4e, 0x25, 0x8f, 0x7c, 0xf4, 0xf6, 0x3a, 0x52,
	0xdc, 0xbf, 0xe0, 0xd1, 0x58, 0xf8, 0x96, 0xe1, 0xfc, 0x64, 0x42, 0xef, 0x64, 0x36, 0x4a, 0xc7,
	0x49, 0x30, 0x45, 0x93, 0xff, 0x01, 0x3c, 0xbc, 0x10, 0xfe, 0xdd, 0x72, 0xf8, 0x7f, 0x0a, 0x83,
	0x69, 0x12, 0x87, 0x31, 0xdd, 0xfd, 0x38, 0xf6, 0x85, 0xce, 0x28, 0xfd, 0x9c, 0x7b, 0x10, 0xfb,
	0x22, 0xbf, 0x95, 0x56, 0xe1, 0x56, 0x6c, 0x68, 0x91, 0x09, 0x84, 0x4f, 0xb9, 0xc6, 0x70, 0x33,
	0x92, 0xdd, 0x82, 0xb6, 0x3f, 0x13, 0x9e, 0x8f, 0x69, 0xa8, 0xa9, 0x44, 0xfe, 0x4c, 0xbc, 0xc4,
	0x78, 0xc6, 0x8d, 0xce, 0x64, 0xec, 0x25, 0x22, 0x12, 0xef, 0x29, 0xe5, 0xb4, 0xdd, 0x0e, 0x72,
	0x5c, 0x64, 0xb0, 0x3d, 0xd8, 0x1c, 0x05, 0x93, 0x49, 0x10, 0x9d, 0x79, 0xe3, 0xf9, 0x78, 0x22,
	0xbc, 0x30, 0x8e, 0xe4, 0x39, 0xdd, 0x4e, 0xdf, 0xdd, 0xd0, 0xa2, 0x03, 0x94, 0xbc, 0x46, 0x01,
	0x7b, 0x06, 0x76, 0x24, 0x2e, 0xa5, 0xb7, 0x6a, 0x90, 0x72, 0xc8, 0x1b, 0x28, 0x7f, 0xb1, 0x34,
	0x90, 0x41, 0x03, 0x1d, 0x8f, 0x6e, 0xae, 0xe3, 0xd2, 0x37, 0xfb, 0x63, 0x68, 0x72, 0xdf, 0xc7,
	0xf0, 0xbf, 0x41, 0x9e, 0xba, 0xf0, 0xb3, 0xe7, 0xc8, 0x76, 0xb5, 0x94, 0x6d, 0x43, 0x53, 0x65,
	0x2b, 0xfb, 0x36, 0x79, 0x9a, 0xa6, 0xd0, 0xd1, 0xa3, 0x58, 0x8a, 0xd4, 0xfe, 0xa3, 0x8a, 0xa3,
	0x7f, 0x1b, 0x4b, 0xe1, 0x2a, 0x19, 0x56, 0xa8, 0x44, 0x9c, 0x8a, 0x24, 0xe1, 0x13, 0x6f, 0x34,
	0xb7, 0xef, 0xa8, 0x0a, 0x95, 0xb1, 0x5e, 0xcc, 0xd9, 0x17, 0xd0, 0xce, 0xea, 0x95, 0x7d, 0x97,
	0xae, 0x7c, 0x23, 0x9f, 0xe8, 0x40, 0x0b, 0xdc, 0x5c, 0x05, 0x63, 0x7e, 0x9a, 0x04, 0x21, 0x4f,
	0xe6, 0x5e, 0xb9, 0x60, 0xd9, 0x3b, 0x34, 0xf5, 0x96, 0x96, 0x96, 0x6b, 0x51, 0x1e, 0x51, 0xbb,
	0x1f, 0x8a, 0xa8, 0x5b, 0xd0, 0xbe, 0x78, 0xe2, 0xa9, 0x72, 0xf2, 0xf9, 0x4e, 0xed, 0xa1, 0xe9,
	0xb6, 0x2e, 0x9e, 0x50, 0x5e, 0x76, 0xfe, 0xbb, 0x0e, 0x0d, 0xb4, 0xea, 0x75, 0x9c, 0xf3, 0x67,
	0x56, 0xb0, 0x6d, 0x68, 0xf2, 0x10, 0xbf, 0xc9, 0xad, 0xea, 0xae, 0xa6, 0xd0, 0x72, 0x41, 0x74,
	0x11, 0x07, 0x63, 0xe1, 0x05, 0x7e, 0x6a, 0x37, 0x77, 0x0c, 0xb4, 0x9c, 0x66, 0x1d, 0xf9, 0x69,
	0xd1, 0xcb, 0x5b, 0x65, 0x2f, 0xff, 0x13, 0xe8, 0x2f, 0x60, 0x41, 0x74, 0x1a, 0x53, 0x62, 0xee,
	0xee, 0x5b, 0x0b, 0xc3, 0xc6, 0x91, 0xe4, 0x63, 0xe9, 0xf6, 0x72, 0xa8, 0x10, 0x9d, 0xc6, 0x14,
	0x1c, 0x65, 0x9b, 0xea, 0x92, 0x57, 0xaa, 0xf5, 0xe8, 0x4b, 0x73, 0xc1, 0x13, 0x0a, 0x2d, 0xd3,
	0xa5, 0x6f, 0xb6, 0x03, 0x5d, 0x5f, 0xe4, 0x21, 0x4c, 0x79, 0xbb, 0xe3, 0x16, 0x59, 0xce, 0x1b,
	0x68, 0xa0, 0x5f, 0xe0, 0xae, 0xb3, 0x82, 0xaa, 0x4c, 0x91, 0x91, 0xf9, 0x79, 0xe2, 0x44, 0x17,
	0xf3, 0x8c, 0x2c, 0x9e, 0xb4, 0x59, 0x3a, 0xa9, 0xf3, 0x15, 0xb4, 0x8f, 0x94, 0x45, 0x52, 0xf6,
	0x08, 0xda, 0xda, 0x3a, 0x59, 0xee, 0x5d, 0x1c, 0x58, 0x2b, 0xb9, 0xb9, 0x86, 0xf3, 0xaf, 0x4d,
	0x68, 0x69, 0xee, 0xcf, 0xcf, 0x38, 0xf5, 0xea, 0x25, 0xae, 0xba, 0x73, 0xba, 0x46, 0xcf, 0x9f,
	0x65, 0x19, 0xba, 0xa3, 0x38, 0x2f, 0x67, 0x62, 0x45, 0x1a, 0x32, 0x57, 0xa5, 0xa1, 0x8a, 0x55,
	0x9b, 0x4b, 0x56, 0x65, 0xcf, 0xa0, 0x97, 0xe5, 0x82, 0xc2, 0x45, 0x6f, 0xe5, 0xe7, 0xd6, 0x99,
	0x00, 0xaf, 0xd7, 0xed, 0x8e, 0x16, 0x44, 0x29, 0x67, 0x75, 0xca, 0x39, 0x2b, 0x87, 0x54, 0x70,
	0x05, 0xa4, 0xaa, 0xe4, 0xd4, 0x5d, 0x30, 0x03, 0x29, 0xc2, 0xd4, 0xee, 0x91, 0xd1, 0xb7, 0xaa,
	0x46, 0x3f, 0x92, 0x22, 0x74, 0x95, 0x0a, 0x1b, 0x42, 0x3b, 0x9d, 0x8d, 0x64, 0x2c, 0xb9, 0xaa,
	0x50, 0x75, 0x37, 0xa7, 0xd1, 0xe1, 0x25, 0xbf, 0xf4, 0xa6, 0x22, 0x19, 0x67, 0x25, 0xaa, 0xee,
	0x82, 0xe4, 0x97, 0xc7, 0x8a, 0xc3, 0x2c, 0x30, 0x24, 0xbf, 0xa4, 0x44, 0x57, 0x77, 0xf1, 0x53,
	0xc1, 0x5b, 0x9c, 0x6b, 0x43, 0xd5, 0x40, 0x35, 0x91, 0x0d, 0xad, 0xd9, 0xd4, 0xa7, 0xad, 0x32,
	0xb5, 0x55, 0x4d, 0xe6, 0xae, 0xbb, 0x59, 0x70, 0xdd, 0x3c, 0x8d, 0x6d, 0x7f, 0x20, 0x8d, 0x6d,
	0x81, 0x89, 0xd6, 0x4b, 0xed, 0x9b, 0x14, 0x86, 0x8a, 0x40, 0x80, 0x94, 0x07, 0x0c, 0xf7, 0x85,
	0x6d, 0xd3, 0x2e, 0xba, 0x59, 0xb8, 0x70, 0x5f, 0xb0, 0x3f, 0x45, 0x84, 0x9e, 0x24, 0xa8, 0x92,
	0xce, 0x46, 0xf6, 0x2d, 0xba, 0x9f, 0x1b, 0x0b, 0xd0, 0x59, 0x28, 0x7c, 0x08, 0xdc, 0x49, 0xf3,
	0x64, 0x36, 0x62, 0x5f, 0x42, 0x2f, 0x1b, 0x47, 0x89, 0x7b, 0x48, 0x03, 0x2b, 0x60, 0x22, 0x9b,
	0x1a, 0x09, 0xe7, 0x75, 0x86, 0x21, 0x3b, 0x60, 0xfa, 0x09, 0x3f, 0x95, 0xaa, 0x02, 0xc7, 0x53,
	0x11, 0x59, 0x35, 0xd6, 0x85, 0x56, 0x7c, 0x21, 0x12, 0x7f, 0x26, 0xac, 0x3a, 0xb2, 0xa7, 0x3c,
	0xf0, 0x2d, 0x03, 0x31, 0xe6, 0x45, 0x1c, 0xf8, 0xc2, 0xb7, 0x1a, 0x58, 0x96, 0xdf, 0xcd, 0xc4,
	0x4c, 0x04, 0xd1, 0x99, 0x65, 0x3a, 0x23, 0xb0, 0x08, 0x17, 0x14, 0x2e, 0x31, 0xaf, 0x22, 0x46,
	0xa1, 0x8a, 0xa0, 0x23, 0xf1, 0xb9, 0x37, 0x11, 0xa7, 0x92, 0xfc, 0xdc, 0x74, 0x5b, 0x3e, 0x9f,
	0xbf, 0x12, 0xa7, 0x94, 0xc1, 0x08, 0x6d, 0x78, 0x14, 0x25, 0xe4, 0x9b, 0xa6, 0x0b, 0xc4, 0x3a,
	0x40, 0x8e, 0xf3, 0xcf, 0x35, 0xb0, 0xa8, 0x10, 0x7e, 0x6c, 0x91, 0x2b, 0xea, 0x64, 0xe3, 0xaa,
	0x3a, 0x59, 0x59, 0xd9, 0x24, 0xbd, 0xc2, 0xca, 0x08, 0xe5, 0x4e, 0x93, 0x38, 0x54, 0x70, 0x46,
	0xe5, 0x94, 0x36, 0x32, 0x08, 0xca, 0xfc, 0xb6, 0x06, 0xeb, 0x68, 0xd2, 0xe2, 0xae, 0x2a, 0x33,
	0xd6, 0x97, 0x66, 0xbc, 0x62, 0x8b, 0xe6, 0x55, 0x5b, 0xbc, 0x05, 0xed, 0x78, 0xe2, 0xab, 0xcb,
	0x55, 0x81, 0xdd, 0x8a, 0x27, 0xfe, 0xb1, 0x36, 0x69, 0x24, 0xde, 0x7b, 0x05, 0x2b, 0xb4, 0x22,
	0xf1, 0x9e, 0x44, 0x0f, 0x60, 0x3d, 0xe5, 0x17, 0x22, 0x0b, 0x12, 0xcc, 0xa2, 0x1d, 0x72, 0xba,
	0x01, 0xb2, 0x8f, 0x73, 0x6e, 0x11, 0xad, 0xb4, 0x97, 0xd1, 0xca, 0xea, 0x0b, 0x73, 0xfe, 0xa7,
	0x0e, 0xdd, 0xe2, 0xa1, 0x2b, 0xf9, 0xc7, 0x5c, 0xce, 0x3f, 0x77, 0x00, 0x16, 0x45, 0x4a, 0x9f,
	0xa3, 0x93, 0xd7, 0x28, 0x0c, 0xf7, 0x77, 0x33, 0x1e, 0xc9, 0x40, 0xce, 0xa9, 0x46, 0x99, 0x6e,
	0x4e, 0x2f, 0xf0, 0x6b, 0xbb, 0x88, 0x5f, 0xbf, 0x80, 0x86, 0xcf, 0x25, 0xd7, 0xaf, 0xb3, 0x5b,
	0xab, 0x72, 0xc9, 0xde, 0x4b, 0x2e, 0xb9, 0x4b, 0x6a, 0xc3, 0x7f, 0xa9, 0x41, 0x03, 0x49, 0xf6,
	0x18, 0x4c, 0x85, 0xb1, 0xea, 0x95, 0x81, 0x55, 0xff, 0x72, 0x95, 0x1e, 0x0e, 0x50, 0x50, 0xd8,
	0xa8, 0x0c, 0xa8, 0x7a, 0xbd, 0xab, 0xf4, 0xd8, 0x23, 0xed, 0x97, 0x26, 0xe9, 0xdb, 0xa5, 0x48,
	0x2c, 0xaa, 0x93, 0x96, 0x33, 0x85, 0x6e, 0x21, 0xf7, 0xae, 0x84, 0xf9, 0x36, 0xb4, 0xb8, 0xef,
	0x27, 0x22, 0x4d, 0xb3, 0x5b, 0xd6, 0x24, 0x26, 0xba, 0x0b, 0x2e, 0x75, 0x7d, 0xc4, 0x4f, 0xcc,
	0x34, 0xe4, 0x78, 0xc9, 0xbc, 0x58, 0x2e, 0xba, 0x9a, 0x87, 0xc5, 0xc2, 0xf9, 0xff, 0x1a, 0xb4,
	0x74, 0x5d, 0xbf, 0xe6, 0xdb, 0x7b, 0x69, 0x47, 0x5b, 0x60, 0xd2, 0x2b, 0x4a, 0xef, 0x47, 0x11,
	0x74, 0x51, 0xe7, 0x71, 0x94, 0xd5, 0x6b, 0x45, 0x60, 0x04, 0xfd, 0x10, 0x8f, 0x3c, 0x19, 0xc8,
	0x49, 0xb6, 0x9d, 0xf6, 0x0f, 0xf1, 0xe8, 0x0d, 0xd2, 0x94, 0x97, 0x49, 0xd0, 0xd4, 0x6d, 0x07,
	0xe2, 0xda, 0xd0, 0xd2, 0xe8, 0x8c, 0x9c, 0xa1, 0xed, 0x66, 0xa4, 0xf3, 0x10, 0x4c, 0x35, 0xb0,
	0x09, 0xf5, 0x10, 0x5f, 0xc8, 0xf8, 0x37, 0xb5, 0x6a, 0xac, 0x05, 0x46, 0x98, 0xa4, 0x56, 0x1d,
	0x19, 0x7e, 0x62, 0x19, 0xce, 0x7f, 0xd6, 0xa0, 0x9d, 0xc1, 0x42, 0x5d, 0x75, 0xeb, 0x57, 0x20,
	0xad, 0xa5, 0x67, 0xc1, 0x23, 0x68, 0x8f, 0x95, 0x81, 0xf0, 0xc5, 0x6b, 0xac, 0x44, 0x44, 0xb9,
	0x46, 0xb1, 0xe0, 0x99, 0xe5, 0x82, 0x57, 0x2d, 0xba, 0xcd, 0x6b, 0x16, 0x5d, 0x67, 0x1f, 0xec,
	0xbf, 0x0c, 0x2e, 0x85, 0xff, 0x9c, 0x80, 0xc0, 0x71, 0xa9, 0xd6, 0x2f, 0x60, 0x60, 0xbd, 0x08,
	0x03, 0x9d, 0x2f, 0x61, 0x4b, 0x87, 0x75, 0x59, 0x1f, 0x8d, 0xa9, 0x2b, 0xa5, 0x1a, 0x90, 0x91,
	0xce, 0x7d, 0x80, 0x03, 0x42, 0xe8, 0xd9, 0xbc, 0x1a, 0xbd, 0xd7, 0x8b, 0xe8, 0xdd, 0x79, 0x0d,
	0xcc, 0xd5, 0x28, 0xbc, 0xa0, 0x9d, 0xc3, 0x75, 0xd5, 0x50, 0xaa, 0x17, 0xe1, 0x3a, 0x35, 0x94,
	0x16, 0xd3, 0x19, 0xa5, 0xe9, 0x7e, 0xd5, 0x84, 0x7e, 0x79, 0x83, 0xd7, 0xf0, 0xc1, 0x4a, 0x7e,
	0x31, 0x96, 0xf3, 0x4b, 0xd6, 0x21, 0x6a, 0x16, 0x3a, 0x44, 0xf7, 0xa0, 0x97, 0x08, 0x5f, 0x88,
	0xb0, 0x90, 0xdd, 0x4d, 0xb7, 0xab, 0x78, 0x2a, 0x19, 0x17, 0xa0, 0x64, 0xe7, 0x4a, 0x28, 0x09,
	0xe5, 0x5b, 0x65, 0xd0, 0xa0, 0xd0, 0xea, 0xaa, 0xa5, 0xf0, 0x9b, 0x3d, 0xd6, 0xd9, 0x68, 0x40,
	0x87, 0xb8, 0xbd, 0x88, 0xf9, 0xe2, 0x49, 0x0b, 0xf9, 0x48, 0x63, 0xa7, 0x44, 0x12, 0x48, 0x31,
	0x5c, 0x45, 0x60, 0x3c, 0x8b, 0xc8, 0x27, 0x90, 0x62, 0xb8, 0xf8, 0x89, 0x49, 0xf8, 0x34, 0x4e,
	0x54, 0x8a, 0x67, 0x6a, 0x87, 0xa7, 0x71, 0x42, 0x29, 0xfe, 0x3e, 0x0c, 0x50, 0x54, 0x70, 0xe4,
	0x4d, 0x52, 0xe8, 0x9d, 0xc6, 0xc9, 0xf3, 0x6a, 0x13, 0x07, 0x0f, 0x1d, 0x4e, 0x55, 0x13, 0x67,
	0x8b, 0xec, 0x30, 0x08, 0xf9, 0xa5, 0xbb, 0xe0, 0xe2, 0x8e, 0xe8, 0x1d, 0x67, 0xdf, 0x50, 0xa1,
	0x48, 0x04, 0xd5, 0xbf, 0x38, 0xf1, 0x14, 0x6e, 0x53, 0x98, 0x06, 0x37, 0x74, 0x44, 0x20, 0xed,
	0x0e, 0x40, 0x18, 0x44, 0x9e, 0x76, 0x47, 0x05, 0x6a, 0x3a, 0x61, 0x10, 0x29, 0xb7, 0xcd, 0x7b,
	0x3e, 0x4a, 0x7c, 0x4b, 0x8b, 0xf9, 0xa5, 0x12, 0x0f, 0x7f, 0x9d, 0xa5, 0xe4, 0x97, 0xd0, 0x3b,
	0x45, 0x6f, 0xcf, 0x34, 0x95, 0x27, 0xdc, 0xcb, 0x8d, 0x78, 0x55, 0x28, 0xb8, 0xdd, 0xd3, 0x85,
	0x84, 0x3d, 0x2b, 0xfb, 0x79, 0x77, 0xff, 0xce, 0xe2, 0x16, 0x56, 0xc4, 0x45, 0x1e, 0x06, 0xec,
	0xf3, 0x92, 0xa7, 0x76, 0xf7, 0x37, 0x17, 0xb1, 0x9e, 0xfb, 0x7b, 0xfe, 0x96, 0x7d, 0x06, 0xed,
	0xec, 0x4d, 0x4a, 0x69, 0xae, 0x78, 0xd9, 0xcb, 0x61, 0xe2, 0xe6, 0xca, 0x4e, 0xa4, 0xdb, 0x1e,
	0x77, 0xe1, 0x76, 0xf1, 0xb0, 0x5e, 0x19, 0xde, 0x5b, 0x6b, 0x6c, 0x08, 0xdb, 0x7a, 0x67, 0x55,
	0x59, 0xad, 0xd8, 0x0f, 0x44, 0x46, 0x9d, 0xd9, 0xb0, 0x95, 0xbf, 0x9a, 0x8b, 0x12, 0xc3, 0xf9,
	0xb7, 0x1a, 0xf4, 0x0e, 0x2f, 0xc7, 0xe7, 0x3c, 0x3a, 0x13, 0x2e, 0xa2, 0xbd, 0x4f, 0xa0, 0x4f,
	0x48, 0x46, 0x41, 0xc1, 0xf1, 0x5c, 0xc7, 0x6c, 0x0f, 0x99, 0x07, 0x9a, 0x47, 0xd0, 0x3a, 0x5e,
	0xa8, 0xe8, 0x3e, 0xb1, 0x8c, 0x73, 0x85, 0x4f, 0xa0, 0x2f, 0xf4, 0xac, 0x5e, 0x82, 0xd8, 0x5f,
	0x3d, 0x59, 0x7a, 0xa2, 0xb2, 0x54, 0xae, 0x44, 0xc0, 0x49, 0xe5, 0xc5, 0x5c, 0x89, 0xc0, 0xd3,
	0x3f, 0x36, 0xc0, 0x78, 0x15, 0x9f, 0x5d, 0xb3, 0x04, 0xcd, 0x52, 0x91, 0x64, 0x25, 0x08, 0xbf,
	0x75, 0x4a, 0x6f, 0xe7, 0x29, 0x7d, 0x5b, 0x35, 0x44, 0xf3, 0xec, 0xa0, 0xa9, 0x62, 0x1c, 0x37,
	0xca, 0x71, 0x7c, 0x2d, 0xd0, 0x52, 0x88, 0xae, 0xe6, 0x8a, 0x96, 0xb2, 0xc2, 0x6e, 0x0a, 0xb1,
	0x28, 0xc2, 0xf9, 0x8f, 0x3a, 0x34, 0x9f, 0x8f, 0x75, 0x52, 0x1a, 0xa8, 0xc5, 0x3c, 0x8d, 0x74,
	0xac, 0x35, 0x76, 0x0b, 0x6e, 0x68, 0xcb, 0x64, 0x78, 0x08, 0x9f, 0x4d, 0x33, 0xac, 0x61, 0x9b,
	0xb0, 0xae, 0xd5, 0xfd, 0x20, 0xa5, 0x45, 0xac, 0x3a, 0x32, 0x7d, 0x31, 0x11, 0x45, 0xa6, 0x81,
	0x4c, 0x9d, 0xd9, 0x72, 0x66, 0x83, 0x0d, 0x00, 0xb8, 0xef, 0x6b, 0x37, 0xb0, 0x4c, 0xb6, 0x01,
	0xfd, 0x2c, 0xfd, 0x29, 0x56, 0x13, 0x37, 0xa4, 0x27, 0xd3, 0xa7, 0xb0, 0x5a, 0xe4, 0x53, 0x6a,
	0x43, 0x98, 0x64, 0xac, 0x36, 0xdb, 0x06, 0x46, 0xc8, 0x07, 0xdf, 0x21, 0xb9, 0x2d, 0x2c, 0x40,
	0xc7, 0x1c, 0x4f, 0x82, 0xf1, 0xdb, 0x8c, 0x3f, 0x12, 0xde, 0x68, 0x26, 0x65, 0x1c, 0x59, 0x5d,
	0xb6, 0x05, 0xd6, 0x94, 0xcf, 0x3d, 0x4c, 0x15, 0x59, 0x0d, 0xb0, 0x7a, 0x38, 0x02, 0x77, 0x14,
	0xc6, 0x91, 0xa8, 0xc8, 0xfa, 0xb8, 0x2c, 0x8e, 0xc8, 0x0c, 0x33, 0x70, 0xfe, 0xce, 0x00, 0x93,
	0xfa, 0x49, 0x2b, 0xbb, 0xfd, 0x19, 0x0a, 0x31, 0xca, 0x28, 0x64, 0x45, 0x63, 0x93, 0xfa, 0x44,
	0xda, 0x7f, 0xf1, 0x4e, 0x07, 0xa5, 0x3e, 0x91, 0x12, 0xb8, 0xb9, 0x0a, 0xfd, 0x32, 0x42, 0x8d,
	0x78, 0xaf, 0x50, 0x3f, 0x40, 0xb1, 0x28, 0x60, 0xb7, 0xa1, 0x39, 0x15, 0x49, 0x10, 0xfb, 0xfa,
	0x9a, 0x35, 0x85, 0x03, 0xd5, 0x97, 0x37, 0x8b, 0x02, 0xa9, 0x3d, 0x11, 0x14, 0xeb, 0xfb, 0x28,
	0x90, 0x25, 0x4c, 0xdb, 0xa9, 0x60, 0xda, 0x2b, 0xab, 0x8b, 0x73, 0x47, 0xe7, 0x09, 0xc8, 0xb2,
	0x92, 0xb5, 0x86, 0x0f, 0x35, 0x82, 0x96, 0x56, 0xcd, 0xf9, 0x0c, 0xe0, 0x60, 0xb1, 0xb7, 0x1e,
	0xb4, 0xe3, 0x48, 0xc5, 0x98, 0xb5, 0xc6, 0xfa, 0xd0, 0x49, 0x04, 0x1e, 0x0c, 0x1f, 0x66, 0x35,
	0xe7, 0x29, 0xc0, 0xf1, 0x62, 0x37, 0x2d, 0x30, 0x7c, 0x3e, 0x57, 0x4f, 0xbd, 0xf7, 0x42, 0xbc,
	0xb5, 0x6a, 0x38, 0x2d, 0xb9, 0xac, 0x7a, 0xe8, 0xe1, 0x1b, 0xd7, 0x32, 0x9c, 0x9f, 0x6a, 0x30,
	0xd4, 0x3d, 0x31, 0x42, 0xc4, 0xf4, 0x12, 0x71, 0xc5, 0xbb, 0x99, 0x48, 0x31, 0x68, 0x7e, 0x79,
	0x07, 0xe4, 0x01, 0x18, 0xf8, 0xc0, 0x35, 0x3e, 0xf4, 0xc0, 0x45, 0x0d, 0x2c, 0x7d, 0xea, 0x81,
	0x94, 0x37, 0xc3, 0x5a, 0x44, 0x1f, 0xf9, 0xce, 0x50, 0xfd, 0xee, 0x15, 0x9d, 0x61, 0xc5, 0x4c,
	0x65, 0x96, 0x19, 0xf0, 0xd3, 0xf9, 0xaf, 0x1a, 0xc0, 0x31, 0x9f, 0xeb, 0x2d, 0x57, 0x76, 0xd3,
	0xae, 0xee, 0xe6, 0xa3, 0xcd, 0xb3, 0x4a, 0x96, 0x68, 0x2d, 0x67, 0x89, 0xa7, 0xd0, 0x3b, 0x28,
	0x74, 0xc7, 0xf4, 0x8b, 0x64, 0x45, 0x0f, 0xad, 0xa8, 0x55, 0x80, 0x71, 0x50, 0x82, 0x71, 0x7f,
	0x05, 0xfd, 0xc3, 0x52, 0x97, 0x5b, 0xdb, 0xab, 0xfe, 0x51, 0x7b, 0x21, 0x78, 0x48, 0x12, 0x1d,
	0x21, 0xf8, 0xe9, 0xfc, 0x05, 0xb4, 0x0f, 0xb3, 0xd6, 0x95, 0x03, 0x46, 0x10, 0x5d, 0x68, 0xb3,
	0x2f, 0xf7, 0xbb, 0x50, 0x98, 0xcd, 0xd0, 0x58, 0xcc, 0xf0, 0x9b, 0x1a, 0x6c, 0x6a, 0x95, 0x03,
	0xe5, 0xa0, 0xf4, 0x03, 0xc9, 0x35, 0xbb, 0x9b, 0x32, 0xce, 0x30, 0xb7, 0x8c, 0x3f, 0x86, 0xb9,
	0xef, 0x2d, 0xb0, 0x32, 0x05, 0xba, 0xda, 0x44, 0x86, 0x8a, 0xbf, 0xc5, 0x78, 0x2f, 0xbf, 0x21,
	0xcd, 0xea, 0x1b, 0xf2, 0xca, 0xe6, 0x1f, 0xbb, 0x0d, 0x8d, 0x09, 0x8f, 0xce, 0xe8, 0xf6, 0x07,
	0xfb, 0xad, 0x3d, 0xfa, 0x05, 0xf5, 0x95, 0x4b, 0x4c, 0xcc, 0x2c, 0x58, 0x02, 0x75, 0x13, 0x8b,
	0xbe, 0x77, 0x3f, 0xc5, 0xb7, 0x83, 0x4e, 0x10, 0x2d, 0x30, 0x66, 0xa9, 0x6f, 0xad, 0xe1, 0xc7,
	0x45, 0xe4, 0xab, 0xb7, 0xc6, 0x28, 0x99, 0x58, 0xf5, 0xdd, 0x7f, 0xaa, 0x83, 0x79, 0x78, 0x81,
	0x18, 0x62, 0x23, 0xff, 0x51, 0xf3, 0x64, 0x4e, 0x3f, 0x57, 0xac, 0x31, 0x0b, 0x7a, 0xd4, 0x34,
	0xfe, 0x5e, 0xb5, 0x94, 0xac, 0x1a, 0x26, 0xc9, 0x3c, 0xb2, 0x74, 0x3c, 0x59, 0x0d, 0x76, 0x03,
	0x36, 0x96, 0xe2, 0xcd, 0x32, 0xd9, 0x6d, 0xb8, 0xb9, 0xc2, 0xf0, 0x27, 0x22, 0xf2, 0xad, 0x26,
	0xe6, 0x7f, 0x3d, 0xe6, 0xaf, 0x9f, 0xe8, 0x05, 0xdb, 0xec, 0x26, 0x6c, 0x16, 0x9d, 0x22, 0x5b,
	0x77, 0x80, 0x59, 0x5f, 0x4f, 0x95, 0xf1, 0x00, 0x81, 0x43, 0xa9, 0xf3, 0x9d, 0x49, 0xba, 0xa8,
	0xad, 0xdf, 0x25, 0x19, 0xaf, 0x87, 0xa5, 0xe5, 0x55, 0x9c, 0xd3, 0x7d, 0x1a, 0x5d, 0x04, 0x53,
	0x99, 0x64, 0x7d, 0xff, 0x1f, 0x6a, 0x70, 0xf3, 0x64, 0x36, 0x0a, 0x7e, 0x3c, 0x8a, 0xa4, 0x48,
	0x22, 0x3e, 0xc9, 0x56, 0x39, 0x4b, 0xd8, 0x2e, 0xbd, 0x37, 0xb8, 0x14, 0xd4, 0x20, 0xef, 0x97,
	0x9e, 0x41, 0xc3, 0x32, 0xc9, 0x5e, 0x00, 0x53, 0x93, 0x96, 0x30, 0xcc, 0xc2, 0xfd, 0x8b, 0xec,
	0xe1, 0x6a, 0xf6, 0xfe, 0xff, 0x36, 0x29, 0x13, 0x64, 0xcb, 0x7f, 0x05, 0xed, 0xe3, 0x59, 0x32,
	0x3e, 0xe7, 0x69, 0x71, 0xa2, 0xa2, 0xc9, 0x86, 0xab, 0xd9, 0x8b, 0xcd, 0x94, 0xb8, 0x3f, 0x6f,
	0x8e, 0x67, 0xb0, 0xfe, 0x8d, 0x90, 0x25, 0x56, 0x3f, 0x8b, 0x9b, 0xc3, 0x70, 0x2a, 0xe7, 0x57,
	0x0d, 0xfc, 0x33, 0xb0, 0xbe, 0x11, 0x95, 0x37, 0x5d, 0xf9, 0xc7, 0xe8, 0xe8, 0x6c, 0xb8, 0xbd,
	0xfa, 0xc5, 0xc1, 0x5e, 0x80, 0xf5, 0xdc, 0xf7, 0xcb, 0xbf, 0x71, 0x5c, 0xf1, 0x4b, 0xfd, 0xf0,
	0x0a, 0x3e, 0x3b, 0x84, 0x4d, 0x75, 0xfa, 0x5f, 0x36, 0xcd, 0x97, 0xb0, 0xf9, 0x92, 0xb0, 0x47,
	0x99, 0x0d, 0x99, 0x11, 0x8e, 0xfc, 0x61, 0xd9, 0x20, 0xec, 0xcf, 0x81, 0xbd, 0x0a, 0x52, 0x59,
	0xf9, 0x1f, 0x08, 0x15, 0xab, 0xdd, 0x5c, 0xbd, 0x5c, 0xca, 0x3e, 0x03, 0xe3, 0x98, 0xcf, 0xd9,
	0x66, 0x51, 0xae, 0xe3, 0xae, 0xea, 0x6c, 0x5f, 0x60, 0xa8, 0xa6, 0x32, 0xff, 0x81, 0xa0, 0xb8,
	0xa7, 0x8d, 0x6a, 0xaa, 0x4c, 0xd9, 0x13, 0xe8, 0x2b, 0x3f, 0xce, 0x72, 0xeb, 0x52, 0x3a, 0x1d,
	0x2e, 0x71, 0xd8, 0x2e, 0x74, 0xe8, 0x30, 0xf4, 0xd3, 0x6f, 0xe5, 0x0c, 0x83, 0x52, 0x8f, 0x28,
	0x65, 0x8f, 0xa0, 0x7f, 0x78, 0x39, 0x8d, 0x93, 0x6c, 0x47, 0xa5, 0x0d, 0x55, 0xef, 0x9e, 0x7d,
	0x4d, 0x9e, 0xf5, 0xfb, 0xc7, 0x09, 0x9e, 0xe7, 0x8d, 0xfe, 0x3f, 0x07, 0xaf, 0x11, 0xaa, 0x5d,
	0xc7, 0x66, 0xbf, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8b, 0xdc, 0x15, 0xf7, 0x22, 0x00, 0x00,
}
