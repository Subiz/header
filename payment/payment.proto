syntax = "proto2";

package payment;

import "bitbucket.org/subiz/header/common/common.proto";
import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
// import "github.com/golang/protobuf/ptypes/empty/empty.proto";
// import "google/api/annotations.proto";

enum Currency {
    usd = 0;
    vnd = 1;
    brl = 2;
}

message PaymentMethod {
    enum Name {
        cash = 0;
        stripe = 1;
    }

    optional Name name = 1 [default = stripe];
    optional string account_id = 2;

    message StripeInfo {
        optional string card_last4 = 1;
        optional string customer_id = 2;
    }

    optional StripeInfo stripe_info = 3;

    enum Status {
        active = 0;
        inactive = 1;
    }

    optional Status status = 4 [default = inactive];
    optional bool primary = 5;
}

message Limit {
    optional common.Context ctx = 1;
    optional int32 max_automations = 2;
    optional int32 max_concurrents = 3;
    optional int32 max_conversations = 4;
    optional int32 max_segments = 5;
    optional int32 max_agents = 6;
}

message Plan {
    enum ID {
        free = 0;
        standard = 1;
        advanced = 2;
    }

    optional ID id = 1;
    optional string name = 2;
    optional Limit limit = 3;
    optional float price = 4;
    optional Currency currency = 5 [default = usd];
    optional google.protobuf.Timestamp created = 8;
    optional int32 trial_period_days = 9 [default = 30];
    optional int32 period = 10 [default = 1];

    enum PeriodUnit {
        day = 0;
        week = 1;
        month = 2;
        year = 3;
    }

    optional PeriodUnit period_unit = 11 [default = month];
}

message Subscription {
    optional string id = 1;
    optional string account_id = 2;
    optional string discount_id = 3;
    optional google.protobuf.Timestamp period_start = 5;
    optional google.protobuf.Timestamp period_end = 6;
    optional bool auto_renew = 9;

    enum Status {
        pending = 0;
        active = 1;
        inactive = 2;
        trialing = 3;
    }

    optional Status status = 10 [default = pending];
    optional google.protobuf.Timestamp created = 11;
    optional int32 billing_cycle = 15;
    optional Plan.ID plan_id = 16;
    optional int32 plan_quantity = 17;
    optional google.protobuf.Timestamp trial_start = 18;
    optional google.protobuf.Timestamp trial_end = 19;
    optional float plan_price = 20;
    repeated Addon addons = 21;
    optional Limit limit = 22;
}

message Bill {
    optional string id = 1;
    optional string account_id = 2;
    optional float amount = 3;
    repeated string invoice_ids = 4;
    optional PaymentMethod.Name payment_method = 5;
    optional google.protobuf.Timestamp created = 6;
    optional Customer.Contact customer_info = 7;
}

message Invoice {
    optional string id = 1;
    optional string account_id = 2;
    optional float amount_due = 4;
    optional string discount_id = 5;
    optional string description = 6;
    optional Currency currency = 7;
    optional Customer.BillingInfo billing_info = 8;
    optional google.protobuf.Timestamp due_date = 9;

    enum Status {
        draft = 0;
        open = 1;
        closed = 2;
        voided = 3;
    }

    optional Status status = 10 [default = draft];
    optional google.protobuf.Timestamp created = 11;
    repeated InvoiceItem line_items = 12;
    optional ExchangeRate exchange_rate = 13;
    optional float subtotal = 14;
    optional float tax_percent = 15;
    optional float tax = 16;
    optional float total = 17;
    optional google.protobuf.Timestamp updated = 18;
}

message InvoiceItem {
    optional string id = 1;
    optional float amount = 2;
    optional Currency currency = 3;
    optional string account_id = 4;
    optional string description = 5;
    optional string invoice_id = 6;
    optional int32 quantity = 7;

    message Period {
        optional google.protobuf.Timestamp start = 1;
        optional google.protobuf.Timestamp end = 2;
    }

    optional Period period = 8;

    enum Type {
        plan = 0;
        addon = 1;
    }

    optional Type type = 10 [default = plan];
    optional Plan.ID plan_id = 11;
    optional Addon.ID addon_id = 12;
}

message Customer {
    optional string id = 1;
    optional string account_id = 2;

    message Contact {
        optional string name = 1;
        optional string email = 2;
        optional string phone = 3;
        optional string job_title = 4;

        enum Title {
            mr = 0;
            ms = 1;
            mrs = 2;
            dr = 3;
        }

        optional Title title = 5;
        optional bool primary = 6;
    }

    repeated Contact contacts = 4;
    optional google.protobuf.Timestamp created = 5;

    message BillingInfo {
        optional string name = 1;
        optional string address = 2;
        optional string vat = 3;
        optional string country_code = 4;
    }

    optional BillingInfo billing_info = 6;
}

message Discount {
    optional string id = 1;
    optional string description = 2;

    enum Type {
        fixed_amount = 0;
        percent = 1;
        credit = 2;
        referral_credit = 3;
    }

    optional string type = 3;
    optional float value = 4;
    optional int32 times_redeemed = 5;
    optional string created_by = 9;
    optional google.protobuf.Timestamp created = 10;
    optional string code = 11;

    message Constraint {
        optional google.protobuf.Timestamp start = 1;
        optional google.protobuf.Timestamp end = 2;
        optional Plan.ID plan_id = 3;
        optional string account_id = 4;
        optional int32 max_redemptions = 5;
        optional string referrer_id = 6;
        optional float min_amount = 7;
        optional float max_amount = 8;
        optional Addon.ID addon_id = 9;
    }

    optional Constraint constraint = 12;
    optional string name = 13;
}

message Credit {
    optional string account_id = 1;
    optional float amount = 2;
}

message ExchangeRate {
    optional Currency from_currency = 1;
    optional Currency to_currency = 2;
    optional float exchange_rate = 3;
    optional google.protobuf.Timestamp exchange_date = 4;
}

message AccountNote {
    optional string account_id = 2;
    optional string message = 3;
    optional string created_by = 4;
    optional google.protobuf.Timestamp created = 5;
}

message InvoiceNote {
    optional string account_id = 2;
    optional string invoice_id = 3;
    optional string message = 4;
    optional string created_by = 5;
    optional google.protobuf.Timestamp created = 6;
}

message Log {
    optional string user = 1;

    enum Action {
        create_invoice = 0;
        change_invoice_status = 1;
        create_discount = 2;
        delete_discount = 3;
        redeem_discount = 4;
        add_credit = 5;
        redeem_credit = 6;
        delete_account = 7;
        change_plan = 8;
        change_subscription_status = 9;
        renew_subscription = 10;
        click_subscribe_button = 11;
        pay_for_referrer = 12;
        add_money_for_referrer = 13;
        pay_invoice = 14;
    }

    optional Action action = 2;
    optional string description = 3;
    optional google.protobuf.Timestamp time = 4;
}

message Addon {
    enum ID {
        credit = 0;
        agent = 1;
    }

    optional ID id = 1;
    optional string name = 2;
    optional float price = 3;
    optional Currency currency = 4 [default = usd];

    enum ChargeType {
        one_time = 0;
        recurring = 1;
    }

    optional ChargeType charge_type = 5;
    optional int32 period = 6 [default = 1];

    enum PeriodUnit {
        day = 0;
        week = 1;
        month = 2;
        year = 3;
    }

    optional PeriodUnit period_unit = 7 [default = month];

    enum Type {
        on_off = 0;
        quantity = 1;
    }

    optional Type type = 8 [default = quantity];
    optional google.protobuf.Timestamp created = 9;
}

enum Event {
    LimitSynced = 0;
    LimitUpdated = 1;
}

// service PlanService {
//     rpc ListPlans(google.protobuf.Empty) returns (Plan) {
//         option (google.api.http) = {
//             get: "/v4/plans"
//         };
//     }

//     rpc CreatePlan (Plan) returns (Plan) {
//         option (google.api.http) = {
//             post: "/v4/plans"
//             body: "*"
//         };
//     }

//     rpc GetPlan (Plan) returns (Plan) {
//         option (google.api.http) = {
//             get: "/v4/plans/{id}"
//         };
//     }

//     rpc UpdatePlan (Plan) returns (Plan) {
//         option (google.api.http) = {
//             put: "/v4/plans/{id}"
//             body: "*"
//         };
//     }

//     rpc DeletePlan (Plan) returns (Plan) {
//         option (google.api.http) = {
//             delete: "/v4/plans/{id}"
//         };
//     }
// }
