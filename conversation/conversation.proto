syntax = "proto2";

package conversation;

import "bitbucket.org/subiz/header/common/common.proto";
import "bitbucket.org/subiz/header/user/user.proto";

message Limit {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional int32 conversation_history = 2;
	optional int32 max_rules = 7;
}

message Rule {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional int32 priority = 4;
	enum AssignStrategy {
		all_agents = 0;
		agentgroup = 2;
		agents = 3;
		most_recent = 4;
		roundrobin_all_agents = 5;
		roundrobin_agents = 6;
	}
	optional string strategy = 5;
	repeated string assign_tos = 6;
	repeated Condition conditions = 7;
	optional bool enabled = 8;
	optional int64 created = 9;
	optional int64 modified = 12;
	optional string name = 10;
	optional string description = 11;
}

message AvailabilityCheckRequest {
	optional common.Context ctx = 1;
	optional string integration_id = 3;
	optional user.User user = 4;
	optional string account_id = 5;
	optional string user_id = 6;
}

message AvailabilityCheckResult {
	optional common.Context ctx = 1;
	optional bool availability = 2;
	optional string reason = 3;
	optional string payload = 5;
}

message Condition {
	enum JoinOperator {
		none = 0;
		and = 1;
		or = 2;
	}

	optional string join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message Route {
	optional common.Context ctx = 1;
	repeated Rule rules = 2;
}

message RouteResult {
	optional string rule_id = 1;
	optional string strategy = 3;
	repeated string agent_ids = 4;
}

message MemberSeen {
	optional string member_id = 2;
	optional string message_id = 3;
}

message Member {
	optional string type = 3; // type
	optional string subiz_id = 8;
	optional string id = 4;
	optional string name = 10;
	optional string avatar_url = 6;
	optional bool left = 11;
}

message Conversation {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	// Creation time
	optional int64 created = 4;

	optional int64 closed = 6;
	repeated Member members = 7;
	repeated Tag tags = 10;

	enum State {
		conversation_none = 0;
		unassigned = 2;
		active = 6;
		ended = 8;
	}
	optional string state = 11; // converation state
	optional StartRequest request = 14;
	optional int64 accepted = 15; // time chat is accepted after being in unassigned list

	optional string channel_type = 17;
	optional Integration integration = 18;
	optional int64 actived = 19;
	optional string last_message_id = 21; // internal use only
	optional Message last_message = 20;
}

message UserConversation { // used in database
	optional string account_id = 6;
	optional string state = 11;
	optional string user_id = 2;
	optional string convo_id = 4;
	optional string last_seen_event = 5;
}

message StartRequest {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string channel_type = 4;
	optional string from = 12;
	repeated string to = 5;
	optional string page_url = 6;
	optional string page_title = 7;
	optional string message = 8;
	optional string browser_language = 9;
	optional string language = 10;
	optional string device_type = 11;

	optional int64 created = 13;
	optional string conversation_id = 14;
	optional string ip = 15;
	optional string country = 16;
	optional string country_code = 17;
	optional string city = 18;
	optional string timezone = 19;

	optional string starter_id = 20;
	optional string starter_type = 21;
	repeated string agent_ids = 22;
	optional user.User user = 25;
	optional string integration_id = 26;
}

message Conversations {
	optional common.Context ctx = 1;
	repeated Conversation conversations = 3;
	optional string anchor = 4;
	repeated string user_ids = 5;
}

message Search {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string keyword = 4;
	optional int32 limit = 5;
	optional string before_id = 6;
	optional string after_id = 7;
}

message ListConversationsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string state = 4;
	optional int32 limit = 5;
	optional string anchor = 6;
	optional string member_id = 8;
	optional string group_by = 9;
	optional string integration_id = 10;
}

message ListEventsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string start_id = 4;
	optional int32 limit = 6;
}

message ListConversationsByUserRequest {
	optional string account_id = 1;
	optional string channel_id = 2; // if null -> all channel
	optional string user_id = 3; // must be visitor id
	optional string start_id = 4;
	optional int32 limit = 5;
}

enum Event {
	ConversationAssigned = 0; // conversation is assigned to an agent
	ConversationWaiting = 2; // new conversation is added to unassigned list

	ConversationStartRequested = 3; // conversation started from an agent // conversationstart

	ConversationAccepted = 4; // conversation from unassigned list is accepted by an agent
	ConversationDropped = 5; // conversation dropped from unassigned list

	ConversationEventCreated = 6;
	ConversationJoinRequested = 7;
	ConversationMessageRequested = 8; // message
	ConversationLeaveRequested = 9; // conversation
	ConversationCloseRequested = 10; // id
	ConversationTagRequested = 11;
	ConversationUntagRequested = 12;

	ConversationReadRequested = 13;
	ConversationListRequested = 14;
	ConversationAcceptRequested = 15;

	ConversationUpdateRuleRequested = 20; // rule
  ConversationCreateRuleRequested = 21; // rule
	ConversationDeleteRuleRequested = 22; // id
	ConversationReadRuleRequested = 23; // id
	ConversationListRuleRequested = 24; // id accountid, return top N rule


	//ConversationRequested = 50; // user request for new conversation
	ConversationUserRequestReply = 51; // user
	ConversationLimitUpdated = 52;

	ConversationRequestWaitTimeout = 60;

	ConversationListEventsRequested = 61;

	ChannelDeintegrateRequested = 65;     // id -> empty
	ChannelIntegrateRequested = 66;  // integration -> integration
	ChannelIntegrationListRequested = 67; // id -> integrations


	ConnectorUpsertRequested = 68;
	ConnectorListRequested = 69;

	CannedResponseCreateRequested = 80; // canned response
	CannedResponseUpdateRequested = 81; // canned response
	CannedResponseDeleteRequested = 82; // id
	CannedResponseReadRequested = 83; // id
	CannedResponseListRequested = 84; // search

	TagCreateRequested = 85; // tag
	TagUpdateRequested = 86; // tag
	TagReadRequested = 87; // id
	TagDeleteRequested = 88; // id
	TagListRequested = 89; // search

	ConversationMessageAckRequested = 90;
	ConversationMessageReceiveRequested = 91;
	ConversationMessageSeeRequested = 92;
	ChannelIntegrationAvailabilityCheck = 93;

	ConversationMessageSearchRequest = 94;
	ConversationRequested = 100;
}

message RequestState {
	optional string account_id = 1;
	optional string conversation_id = 2;
	optional string channel_id = 3;
}

message Reaction {
	optional string name = 3;
	optional int32 count = 4;
	repeated string users = 5;
}

message EsMessage {
	optional string id = 2;
	optional string account_id = 3;
	optional string conversation_id = 4;
	repeated string member_ids = 5;
	optional string text = 6;
	repeated string attachments = 7;
	repeated string fields = 8;
}

message Message {
	optional common.Context ctx = 1;
	optional string account_id = 5;
	optional string conversation_id = 14;
	optional string id = 11;
	optional string text = 2;
	optional string format = 3;
	repeated Attachment attachments = 4;

	repeated Reaction reactions = 7;

	repeated Field fields =	10;
	optional Computed computed = 12;
}

message Computed {
	repeated Seen seen = 4;
	repeated Ack ack = 5;
	repeated Received received = 6;
}

message Seen {
	optional string member_id = 6;
	optional int64 at = 4;
}

message Ack {
	optional string member_id = 5;
	optional string error = 6;
	optional int64 at = 4;
}

message Received {
	optional string member_id = 4;
	optional int64 at = 5;
}

message Field {
	optional string value = 3;
	optional string key = 2;
}

message Button {
	enum ButtonType {
		url_button = 2;
		postback_button = 3;
		event_button = 4;
	}

	optional string type = 2;

	optional string id = 15;
	// post back
	optional string title = 3;
	optional string payload = 4;
	optional string image_url = 5;
	optional string content_id = 10;

	//	optional RawEvent event = 12;
	optional string url = 14;
}

message AskInfomationAnswer {
	optional string message_id = 2;
	optional string answer = 3;
}

message AskInfomation {
	optional string question = 2;
	optional string input_type = 3;
	optional string key = 4; // user.name user.phone
	optional string answer = 5;
	optional int64 answered = 6;
	enum InputType {
		phone = 0;
		email = 1;
		text = 2;
		password = 3;
		number = 4;
		date = 5;
		color = 6;
		location = 7;
		time = 8;
		url = 9;
	}
}

message GenericElementTemplate {
	optional string title = 2;
	optional string image_url = 3;
	optional string subtitle = 4;
	optional Button default_action = 5;
	repeated Button buttons = 6;
}

message Attachment {
	enum AttachmentType {
		file = 2;
		generic = 3;
		preview = 4;
		button = 5;
		input = 6;
		ask_info_form = 7;
		ask_info_form_answer = 8;
	}
	optional string type = 12;
	// file
	optional string mimetype = 2;
	optional string url = 3;
	optional string thumbnail_url = 4;
	optional string name = 5;
	optional string description = 6;
	//optional string data = 7; // for custom data
	optional int32 length = 15;
	optional int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;
	// preview
	optional string title = 9;
	optional string color = 10;
	optional string pretext = 11;

	repeated Button buttons = 16;
	optional AskInfomation ask_info = 17;
	optional AskInfomationAnswer ask_info_answer = 18;
	//repeated string inputtype = 17;

}

message Tag {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string title = 4;
	optional int64 created = 5;
	optional int64 modified = 6;
	optional string creator_id = 7;
	optional string color = 8;
}

message CannedResponse {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string text = 5;
	repeated string keys = 6;
	optional int64 created = 7;
	optional int64 modified = 8;
	optional string creator = 9;
}

message CannedResponses {
	optional common.Context ctx = 1;
	repeated CannedResponse responses = 3;
}

message Tags {
	optional common.Context ctx = 1;
	repeated Tag tags = 4;
}

message Postback {
	optional Message message = 2;
	optional Button button = 3;
}

message AllType {
	optional Limit l = 5;
	optional Rule r = 6;
	optional Condition co = 7;
	optional Route ro = 8;
	optional RouteResult rr = 9;
	optional MemberSeen ms = 12;
	optional Member m = 13;
	optional Conversation c = 14;
	optional StartRequest sr = 16;
	optional Postback pb = 18;
	optional Tags tags = 20;
	optional CannedResponse canr = 22;
	optional Tag tag = 23;
	optional Attachment att = 25;
	optional GenericElementTemplate getem = 26;
	optional Button button = 27;
	optional Message messa = 28;
	optional Computed com = 29;
	optional Reaction rea = 31;
	optional Field fiel = 35;
	optional Received reci = 36;
	optional Ack ack = 37;
	optional Seen seen = 38;
	optional ListConversationsByUserRequest lcbur = 39;
	optional ListEventsRequest ler = 41;
	optional Search search = 42;
	optional ListConversationsRequest listcon = 43;
	optional AvailabilityCheckRequest acreq = 44;
	optional AvailabilityCheckResult acres = 45;
}

service Converstation {
	rpc Do(AllType) returns (AllType) {};
}

message UseConnector {
	optional string account_id = 2;
	optional string connector_id = 3;

	enum State {
		disabled = 0;
		activated = 1;
	}
	optional string state = 8;

	optional string updated = 9;
	optional string by = 10;
}

message Integrations {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	repeated Integration integrations = 3;
}

message Integration {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string connector_id = 3;
	optional string logo_url = 4;
	optional string name = 5;
	optional string connector_type = 12; // see client.Client_ChannelType
	optional int64 integrated = 6;
	optional int64 updated = 7;
	optional string state = 8;
	enum State {
		disabled = 0;
		activated = 1;
	}
	optional string id = 10; // generated by connector, must be format of accid.XXX.connectorid
}

message SearchMessageRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	repeated string user_ids = 4;
	optional string query = 5;
	optional string anchor = 6;
	optional int32 limit = 7;
}

service RuleMgr {
	rpc UpdateRule(Rule) returns (Rule);
	rpc CreateRule(Rule) returns (Rule);
	rpc DeleteRule(common.Id) returns (common.Empty);
	rpc ReadRule(common.Id) returns (Rule);
}

service ConversationMgr {
	rpc SendMessage(Message) returns (Message);
	rpc SeenMessage(Message) returns (Message);
	rpc ReceiveMessage(Message) returns (Message);
	rpc AckMessage(Message) returns (Message);
	rpc StartConversation(StartRequest) returns (Conversation);
	rpc EndConversation(common.Id) returns (Conversation);
	rpc GetConversation(common.Id) returns (Conversation);
	rpc ListConversations(ListConversationsRequest) returns (Conversations);
	rpc AcceptConversation(common.Id) returns (Conversation);
	rpc TagConversation(Tag) returns (common.Empty);
	rpc UntagConversation(Tag) returns (common.Empty);
}

service CannedResponseMgr {
	rpc CreateCannedResponse(CannedResponse) returns (CannedResponse);
	rpc UpdateCannedResponse(CannedResponse) returns (CannedResponse);
	rpc ListCannedResponses(Search) returns (CannedResponses);
	rpc DeleteCannedResponse(common.Id) returns (common.Empty);
}

service TagMgr {
	rpc CreateTag(Tag) returns (Tag);
	rpc UpdateTag(Tag) returns (Tag);
	rpc DeleteTag(common.Id) returns (common.Empty);
	rpc ListTag(Search) returns (Tags);
	rpc GetTag(common.Id) returns (Tag);
}

service IntegrationMgr {
	rpc Deintegrate(common.Id) returns (common.Empty);
	rpc ListIntegrations(common.Id) returns (Integrations);
	rpc Integrate(Integration) returns (Integration);
	rpc CheckAvailability(AvailabilityCheckRequest) returns (AvailabilityCheckResult);
}