syntax = "proto2";

package conversation;

//import "bitbucket.org/subiz/servicespec/proto/auth/auth.proto";
import "bitbucket.org/subiz/header/event/event.proto";
import "bitbucket.org/subiz/header/common/common.proto";

message Id {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
}

message Account {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional int32 max_rules = 3;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

message Limit {
	optional common.Context ctx = 1;

	optional string account_id = 3;
	optional int32 max_rules = 7;
}

message Rule {
	optional common.Context ctx = 1;
	// @inject_tag: name:"ip"
	optional string id = 2;
	optional string account_id = 3;
	//optional string priority = 4;
	optional AssignStrategy strategy = 5;
	repeated string assign_tos = 6;
	repeated Condition conditions = 7;
	optional bool enabled = 8;
	optional int64 created_time = 9;
	optional string prev_id = 10;
	optional string next_id = 11;
}

message Condition {
	optional JoinOperator join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message Route {
	repeated Rule rules = 1;
}

message RouteResult {
	optional string rule_id = 1;
	optional 	AssignStrategy strategy = 3;
	repeated string agent_ids = 4;
}

enum AssignStrategy {
	ALLAGENTS = 0;
	AGENTGROUP = 2;
	AGENTS = 3;
	MOSTRECENT = 4;
	ROUNDROBINALLAGENTS = 5;
	ROUNDROBINAGENTS = 6;
}

// get number of unread message
message Conversation {
	reserved "request_id";
	reserved 13;

	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	// Creation time
	optional int64 created_time = 4;
	// Last active time
	optional int64 last_active_time = 5;
	// Closed time
	optional int64 closed_time = 6;
	repeated event.User users = 7;
	optional string channel_id = 9;
	repeated string tags = 10;

	optional ConversationState state = 11;
	optional ChatRequest request = 14;
}

message UserConversation { // used in database
	optional ConversationState state = 11;
	optional string user_id = 2;
	optional string convo_id = 4;
	optional string last_seen_event = 5;
}

enum ConversationState {
	conversation_none = 0;
	assigning = 1;
	unassigned = 2;
	opened = 3;
	closed = 4;
}

// ChateEventType
enum ChatEventType {
	NONE = 0;
	MESSAGE = 1; // content= content of message, attachments attachment
	CLOSED = 3; // content, attachments = null

	ADD = 4;
	//JOINED = 4; // SenderId: senderid || could be null, Content: joinner id, Attachmemts: null
	LEFT = 5; // senderid: senderid || could be null
	//	SEEN = 6; // Content = event id, attachment = null
	RATED = 7; // content = number of star, attachment = null
	INPUT = 8; // content = refered message id; attachment depended on type of event

	TAG = 9; // Content = tag
	UNTAG = 10; // Content = tag
	TRANSFER = 11; // Content = joinerid1,joinerid2 (',' delimiter)
	ACK = 12;
	TYPING = 13;
	STOPTYPING = 14;
}

enum DeviceType {
	UNKNOWN = 0;
	MOBILE = 1;
	TABLET = 2;
	DESKTOP = 3;
}

message ChatRequest {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string channel_id = 4;
	optional string message_to = 5;
	optional string page_url = 6;
	optional string page_title = 7;
	optional string message = 8;
	optional string browser_language = 9;
	optional string language = 10;
	optional DeviceType device_type = 11;
	optional string user_id = 12;
	optional int64 created_time = 13;
	optional string conversation_id = 14;
	optional string ip = 15;
	optional string country = 16;
	optional string country_code = 17;
	optional string city = 18;
	optional string time_zone = 19;
}

message Conversations {
	repeated Conversation conversations = 1;
}

message ChatStart {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string user_id = 4;
	optional string channel_id = 5;
}

message ReplyConversationRequest {
	optional common.Context ctx = 1;
	optional string account_id = 4;
	optional string agent_id = 2;
	optional string conversation_id = 3;
}

message ListConversations {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional ConversationState state = 4;
	optional int32 limit = 5;
	optional string start_id = 6;
}

message ListUsersUnreadRequest {
	optional string AccountId = 1;
	optional string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	optional string UserId = 1;
	optional int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListEventsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string start_id = 4;
	optional int32 limit = 6;
}

message ListChatsByUserRequest {
	optional string AccountId = 1;
	optional string ChannelId = 2; // if null -> all channel
	optional string UserId = 3; // must be visitor id
	optional string StartId = 4;
	optional int32 Limit = 5;
}

message OEChatDropped {
	optional string AccountId = 1;
	optional string ChatId = 2;
	optional string ChannelId = 3;
}

message OEChatAccepted {
	optional string AccountId = 2;
	optional string ChatId = 3;
	optional string AgentId = 4;
}

message OEChatStarted {
	optional string AccountId = 2;
	optional string ChatId = 3;
	optional string ChannelId = 4;
	optional string CreatedTime = 5;
}

message EvChatResult { // delete after 5mins, so be quick
	optional string RequestId = 1; //request id
	optional bool Ok = 2;
	optional int32 Code = 3;
	optional string CreatedTime = 4;
	optional string Description = 5;
}

message EvChatUserInfoRequested {
	optional string RequestId = 1;
	optional string ChatId = 2;
	optional string AccountId = 3;
	optional string ChannelId = 4;
	optional string MessageTo = 5;
	optional string PageUrl = 6;
	optional string PageTitle = 7;
	optional string Message = 8;
	optional string BrowserLanguage = 9;
	optional string Language = 10;
	optional DeviceType DeviceType = 11;
	optional string UserId = 12;
	optional string CreatedTime = 13;
}

enum Event {
	ConversationAssigned = 0; // chat is assigned to an agent
	ConversationWaiting = 2; // new chat is added to unassigned list

	ConversationStartRequested = 3; // chat started from an agent // chatstart

	ConversationAccepted = 4; // chat from unassigned list is accepted by an agent
	ConversationDropped = 5; // chat dropped from unassigned list

	ConversationEventCreated = 6;
	ConversationJoinRequested = 7;
	ConversationMessageRequested = 8;
	ConversationLeaveRequested = 9;
	ConversationCloseRequested = 10;
	ConversationTagRequested = 11;
	ConversationUntagRequested = 12;

	ConversationReadRequested = 13;
	ConversationListRequested = 14;
	ConversationReplyRequested = 15;

	ConversationUpdateRuleRequested = 20; // rule
  ConversationCreateRuleRequested = 21; // rule
	ConversationDeleteRuleRequested = 22; // id
	ConversationReadRuleRequested = 23; // id
	ConversationListRuleRequested = 24; // id accountid, return top N rule

	ChatUserInfoRequested = 18;
	ChatUserInfoReply = 19;


	ConversationRequested = 50; // user request for new conversation
	ConversationUserRequestReply = 51; // user
	ConversationLimitUpdated = 52;

	ConversationRequestWaitTimeout = 60;

	ConversationListEventsRequested = 61;
}
// ==================

message FileTemplate {
	optional string Id = 1;
}

message QuickRepliesTemplate {
	optional string Text = 1;
	optional string ContentType = 4; // listbutton or location or ...
	repeated Button Replies = 5; // limit to 11
}

message GenericElement { // display
	optional string Title = 1;
	optional string ImageUrl = 2;
	optional string Subtitle = 3; // limited character
	optional Button DefaultAction = 4;
	repeated Button Buttons = 5; // limit to 10
}

message GenericTemplate {
	repeated GenericElement Elements = 1; // limit to 5
}

message Button {
	optional string Type = 1;
	///...
}

message UrlButton { // input
	optional string Type = 1; // UrlButton
	optional string Title = 2;
	optional string Url = 3;
}

message PostbackButton {
	optional string Type = 1; // PostbackButton
	optional string Title = 2;
	optional string Payload = 3;
	optional string ImageUrl = 4;
}

message CallButton {
}

message LoginButton {
}

message EventButton {
	optional string Type = 1; // EventButton
	optional string Title = 2;
	optional string ImageUrl = 4;
	optional string Event = 3; // this event will sent to chat
}

message SurveyForm {
	optional string Placeholder = 1;
}

message RateFormTemplate {
	optional string Type = 1;
}

message RequestState {
	optional string account_id = 1;
	optional string conversation_id = 2;
	optional string channel_id = 3;


}