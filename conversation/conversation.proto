syntax = "proto2";

package conversation;

//import "bitbucket.org/subiz/header/auth/auth.proto";
import "bitbucket.org/subiz/header/common/common.proto";
import "bitbucket.org/subiz/header/auth/auth.proto";

message Id {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

message Limit {
	optional common.Context ctx = 1;

	optional string account_id = 3;
	optional int32 max_rules = 7;
}

message Rule {
	optional common.Context ctx = 1;
	// @inject_tag: name:"ip"
	optional string id = 2;
	optional string account_id = 3;
	//optional string priority = 4;
	optional AssignStrategy strategy = 5;
	repeated string assign_tos = 6;
	repeated Condition conditions = 7;
	optional bool enabled = 8;
	optional int64 created_time = 9;
	optional string prev_id = 10;
	optional string next_id = 11;
}

message Condition {
	optional JoinOperator join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message Route {
	repeated Rule rules = 1;
}

message RouteResult {
	optional string rule_id = 1;
	optional 	AssignStrategy strategy = 3;
	repeated string agent_ids = 4;
}

enum AssignStrategy {
	ALLAGENTS = 0;
	AGENTGROUP = 2;
	AGENTS = 3;
	MOSTRECENT = 4;
	ROUNDROBINALLAGENTS = 5;
	ROUNDROBINAGENTS = 6;
}

// get number of unread message
message Conversation {
	reserved "request_id";
	reserved 13;

	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	// Creation time
	optional int64 created = 4;
	// Last active time
	optional int64 last_actived = 5;
	// Closed time
	optional int64 closed = 6;
	repeated auth.By users = 7;
	optional string channel_id = 9;
	repeated string tags = 10;

	optional string state = 11; // converation state
	optional Request request = 14;
}

message UserConversation { // used in database
	optional string state = 11;
	optional string user_id = 2;
	optional string convo_id = 4;
	optional string last_seen_event = 5;
}

enum State {
	conversation_none = 0;

	//	assigning = 1;
	unassigned = 2;
	//opened = 3;
	//closed = 4;
	started = 5;
	active = 6;
	ended = 8;
}


message Request {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string channel_id = 4;
	optional string message_to = 5;
	optional string page_url = 6;
	optional string page_title = 7;
	optional string message = 8;
	optional string browser_language = 9;
	optional string language = 10;
	optional string device_type = 11;
	optional string user_id = 12;
	optional int64 created_time = 13;
	optional string conversation_id = 14;
	optional string ip = 15;
	optional string country = 16;
	optional string country_code = 17;
	optional string city = 18;
	optional string time_zone = 19;
}

message Conversations {
	repeated Conversation conversations = 1;
}

message Start {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string user_id = 4;
	optional string channel_id = 5;
	optional string user_name = 10;
	optional string user_avatar_url = 11;

}

message ReplyConversationRequest {
	optional common.Context ctx = 1;
	optional string account_id = 4;
	optional string agent_id = 2;
	optional string conversation_id = 3;
}

message ListConversations {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional State state = 4;
	optional int32 limit = 5;
	optional string start_id = 6;
}

message ListUsersUnreadRequest {
	optional string AccountId = 1;
	optional string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	optional string UserId = 1;
	optional int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListEventsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string start_id = 4;
	optional int32 limit = 6;
}

message ListChatsByUserRequest {
	optional string AccountId = 1;
	optional string ChannelId = 2; // if null -> all channel
	optional string UserId = 3; // must be visitor id
	optional string StartId = 4;
	optional int32 Limit = 5;
}

enum Event {
	ConversationAssigned = 0; // chat is assigned to an agent
	ConversationWaiting = 2; // new chat is added to unassigned list

	ConversationStartRequested = 3; // chat started from an agent // chatstart

	ConversationAccepted = 4; // chat from unassigned list is accepted by an agent
	ConversationDropped = 5; // chat dropped from unassigned list

	ConversationEventCreated = 6;
	ConversationJoinRequested = 7;
	ConversationMessageRequested = 8;
	ConversationLeaveRequested = 9;
	ConversationCloseRequested = 10;
	ConversationTagRequested = 11;
	ConversationUntagRequested = 12;

	ConversationReadRequested = 13;
	ConversationListRequested = 14;
	ConversationReplyRequested = 15;

	ConversationUpdateRuleRequested = 20; // rule
  ConversationCreateRuleRequested = 21; // rule
	ConversationDeleteRuleRequested = 22; // id
	ConversationReadRuleRequested = 23; // id
	ConversationListRuleRequested = 24; // id accountid, return top N rule

	ChatUserInfoRequested = 18;
	ChatUserInfoReply = 19;


	ConversationRequested = 50; // user request for new conversation
	ConversationUserRequestReply = 51; // user
	ConversationLimitUpdated = 52;

	ConversationRequestWaitTimeout = 60;

	ConversationListEventsRequested = 61;
}

message RequestState {
	optional string account_id = 1;
	optional string conversation_id = 2;
	optional string channel_id = 3;
}


message Reaction {
	optional string name = 3;
	optional int32 count = 4;
	repeated string users = 5;
}

message Message {
	optional string text = 2;
	optional string format = 3;
	repeated Attachment attachments = 4;

	repeated Reaction reactions = 7;
	optional int32 opened = 8;
	optional bool delivered = 9;

	repeated Field fields = 10;
}

message Field {
	optional string value = 3;
	optional string key = 2;
}

message Button {
	optional string type = 2;

	// post back
	optional string title = 3;
	optional string payload = 4;
	optional string image_url = 5;
	optional string content_id = 10;

	//	optional RawEvent event = 12;
	optional string url = 14;
}

message GenericElementTemplate {
	optional string title = 2;
	optional string image_url = 3;
	optional string subtitle = 4;
	optional Button default_action = 5;
	repeated Button buttons = 6;
}

message Attachment {
	optional string type = 12;
	// file
	optional string mimetype = 2;
	optional string url = 3;
	optional string thumbnail_url = 4;
	optional string name = 5;
	optional string descrition = 6;
	//optional string data = 7; // for custom data
	optional int32 length = 15;
	optional int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;

	// preview
	optional string title = 9;
	optional string color = 10;
	optional string pretext = 11;

	repeated Button buttons = 16;
}

enum ActionType {
	url_button = 2;
	postback_button = 3;
	event_button = 4;
}

enum AttachmentType {
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
}
