syntax = "proto2";

package conversation;

//import "bitbucket.org/subiz/header/auth/auth.proto";
import "bitbucket.org/subiz/header/common/common.proto";
//import "bitbucket.org/subiz/header/auth/auth.proto";
import "bitbucket.org/subiz/header/client/client.proto";

import "bitbucket.org/subiz/header/user/user.proto";

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

message Limit {
	optional common.Context ctx = 1;

	optional string account_id = 3;
	optional int32 max_rules = 7;
}

message Rule {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	//optional string priority = 4;
	optional AssignStrategy strategy = 5;
	repeated string assign_tos = 6;
	repeated Condition conditions = 7;
	optional bool enabled = 8;
	optional int64 created_time = 9;
	optional string prev_id = 10;
	optional string next_id = 11;
}

message Condition {
	optional JoinOperator join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message Route {
	repeated Rule rules = 1;
}

message RouteResult {
	optional string rule_id = 1;
	optional 	AssignStrategy strategy = 3;
	repeated string agent_ids = 4;
}

enum AssignStrategy {
	ALLAGENTS = 0;
	AGENTGROUP = 2;
	AGENTS = 3;
	MOSTRECENT = 4;
	ROUNDROBINALLAGENTS = 5;
	ROUNDROBINAGENTS = 6;
}

message MemberSeen {
	optional string member_id = 2;
	optional string message_id = 3;
}

message Member {
	optional string type = 3; // type
	optional string subiz_id = 8;
	optional string id = 4;
	optional string name = 10;
	optional string avatar_url = 6;

	optional client.Connector connector = 9;
	optional Domain domain = 12;
}

// get number of unread message
message Conversation {
	reserved "request_id";
	reserved 13;

	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	// Creation time
	optional int64 created = 4;
	// Last active time
	optional int64 last_actived = 5;
	// Closed timeph
	optional int64 closed = 6;
	repeated Member members = 7;
	repeated Tag tags = 10;

	optional string state = 11; // converation state

	optional StartRequest request = 14;
}

enum State {
	conversation_none = 0;

	//	assigning = 1;
	unassigned = 2;
	//opened = 3;
	//closed = 4;
	//started = 5;
	active = 6;
	ended = 8;
}

message UserConversation { // used in database
	optional string state = 11;
	optional string user_id = 2;
	optional string convo_id = 4;
	optional string last_seen_event = 5;
}

message StartRequest {
	reserved 12;

	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string connector_id = 4;
	repeated string to = 5;
	optional string page_url = 6;
	optional string page_title = 7;
	optional string message = 8;
	optional string browser_language = 9;
	optional string language = 10;
	optional string device_type = 11;
	optional Member user_member = 24;
	optional int64 created = 13;
	optional string conversation_id = 14;
	optional string ip = 15;
	optional string country = 16;
	optional string country_code = 17;
	optional string city = 18;
	optional string timezone = 19;

	optional string starter_id = 20;
	optional string starter_type = 21;
	repeated string agent_ids = 22;

	optional user.User user = 25;

}

message Conversations {
	repeated Conversation conversations = 1;
}

message ConnectedDomain {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	//optional ChannelConector connector = 4;
	//optional bool is_en = 6;
	optional string domain_id = 11;
	optional string connector_id = 12;
	optional int64 created = 7;
	optional int64 modified = 9;
	//optional auth.By by = 10;
}

message Domain {
	optional common.Context ctx = 1;
	optional string id = 6;
	optional string name = 7;
	optional string description = 8;
	optional string payload = 9;
	//optional bool is_enabled = 4;
	optional int64 created = 5;
}

message ReplyConversationRequest {
	optional common.Context ctx = 1;
	optional string account_id = 4;
	optional string agent_id = 2;
	optional string conversation_id = 3;
}

message Search {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string keyword = 4;
	optional int32 limit = 5;
	optional string before_id = 6;
	optional string after_id = 7;
}

message ListConversations {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string state = 4;
	optional int32 limit = 5;
	optional string start_id = 6;
}

message ListUsersUnreadRequest {
	optional string AccountId = 1;
	optional string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	optional string UserId = 1;
	optional int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListEventsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string start_id = 4;
	optional int32 limit = 6;
}

message ListConversationsByUserRequest {
	optional string AccountId = 1;
	optional string ChannelId = 2; // if null -> all channel
	optional string UserId = 3; // must be visitor id
	optional string StartId = 4;
	optional int32 Limit = 5;
}

enum Event {
	ConversationAssigned = 0; // conversation is assigned to an agent
	ConversationWaiting = 2; // new conversation is added to unassigned list

	ConversationStartRequested = 3; // conversation started from an agent // conversationstart

	ConversationAccepted = 4; // conversation from unassigned list is accepted by an agent
	ConversationDropped = 5; // conversation dropped from unassigned list

	ConversationEventCreated = 6;
	ConversationJoinRequested = 7;
	ConversationMessageRequested = 8; // message
	ConversationLeaveRequested = 9; // conversation
	ConversationCloseRequested = 10; // id
	ConversationTagRequested = 11;
	ConversationUntagRequested = 12;

	ConversationReadRequested = 13;
	ConversationListRequested = 14;
	ConversationReplyRequested = 15;

	ConversationUpdateRuleRequested = 20; // rule
  ConversationCreateRuleRequested = 21; // rule
	ConversationDeleteRuleRequested = 22; // id
	ConversationReadRuleRequested = 23; // id
	ConversationListRuleRequested = 24; // id accountid, return top N rule



	//ConversationRequested = 50; // user request for new conversation
	ConversationUserRequestReply = 51; // user
	ConversationLimitUpdated = 52;

	ConversationRequestWaitTimeout = 60;

	ConversationListEventsRequested = 61;

	ChannelIntegrateRequested = 63;         // Integration -> integration
	ChannelIntegrationDeleteRequested = 65;     // id -> empty
	ChannelIntegrationUpdateRequested = 66;  // integration -> integration
	ChannelIntegrationListRequested = 67; // id -> integrations
	ChannelIntegrationGetRequested = 68; // id -> integration

	CannedResponseCreateRequested = 80; // canned response
	CannedResponseUpdateRequested = 81; // canned response
	CannedResponseDeleteRequested = 82; // id
	CannedResponseReadRequested = 83; // id
	CannedResponseListRequested = 84; // search

	TagCreateRequested = 85; // tag
	TagUpdateRequested = 86; // tag
	TagReadRequested = 87; // id
	TagDeleteRequested = 88; // id
	TagListRequested = 89; // search

	ConversationMessageAckRequested = 90;
	ConversationMessageReceiveRequested = 91;
	ConversationMessageSeeRequested = 92;
}

message RequestState {
	optional string account_id = 1;
	optional string conversation_id = 2;
	optional string channel_id = 3;
}


message Reaction {
	optional string name = 3;
	optional int32 count = 4;
	repeated string users = 5;
}

message Message {
	optional common.Context ctx = 1;
	optional string conversation_id = 14;
	optional string id = 11;
	optional string text = 2;
	optional string format = 3;
	repeated Attachment attachments = 4;

	repeated Reaction reactions = 7;

	repeated Field fields =	10;
	optional Computed computed = 12;
}

message Computed {
	repeated Seen seen = 4;
	repeated Ack ack = 5;
	repeated Received received = 6;
}

message Seen {
	optional string member_id = 6;
	optional int64 at = 4;
}

message Ack {
	optional string member_id = 5;
	optional string error = 6;
	optional int64 at = 4;
}

message Received {
	optional string member_id = 4;
	optional int64 at = 5;
}

message Field {
	optional string value = 3;
	optional string key = 2;
}

enum ButtonType {
	url = 0;
	postback = 1;
};

message Button {
	optional string type = 2;

	optional string id = 15;
	// post back
	optional string title = 3;
	optional string payload = 4;
	optional string image_url = 5;
	optional string content_id = 10;

	//	optional RawEvent event = 12;
	optional string url = 14;
}

message GenericElementTemplate {
	optional string title = 2;
	optional string image_url = 3;
	optional string subtitle = 4;
	optional Button default_action = 5;
	repeated Button buttons = 6;
}

message Attachment {
	optional string type = 12;
	// file
	optional string mimetype = 2;
	optional string url = 3;
	optional string thumbnail_url = 4;
	optional string name = 5;
	optional string descrition = 6;
	//optional string data = 7; // for custom data
	optional int32 length = 15;
	optional int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;
	// preview
	optional string title = 9;
	optional string color = 10;
	optional string pretext = 11;

	repeated Button buttons = 16;
	//repeated string inputtype = 17;

}

enum ActionType {
	url_button = 2;
	postback_button = 3;
	event_button = 4;
}

enum AttachmentType {
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
	input = 6;
}

message Tag {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string title = 4;
	optional int64 created = 5;
	optional int64 modified = 6;
	optional string creator_id = 7;
	optional string color = 8;
}

message CannedResponse {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string text = 5;
	repeated string keys = 6;
	optional int64 created = 7;
	optional int64 modified = 8;
	optional string creator = 9;
}

message CannedResponses {
	optional common.Context ctx = 1;
	repeated CannedResponse responses = 3;
}

message Tags {
	optional common.Context ctx = 1;
	optional Tag tags = 4;
}

enum PlatformType {
	message = 0;
	email = 2;
}

message Postback {
	optional Message message = 2;
	optional Button button = 3;
}