// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conversation

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
	user "github.com/subiz/header/user"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation(in *jlexer.Lexer, out *ticketMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation(out *jwriter.Writer, in ticketMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ticketMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ticketMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ticketMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ticketMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation1(in *jlexer.Lexer, out *ticketAttributeMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation1(out *jwriter.Writer, in ticketAttributeMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ticketAttributeMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ticketAttributeMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ticketAttributeMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ticketAttributeMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation1(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation2(in *jlexer.Lexer, out *templateMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation2(out *jwriter.Writer, in templateMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v templateMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v templateMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *templateMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *templateMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation2(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation3(in *jlexer.Lexer, out *tagMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation3(out *jwriter.Writer, in tagMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tagMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tagMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tagMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tagMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation3(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation4(in *jlexer.Lexer, out *ruleMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation4(out *jwriter.Writer, in ruleMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ruleMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ruleMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ruleMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ruleMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation4(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation5(in *jlexer.Lexer, out *integrationMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation5(out *jwriter.Writer, in integrationMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v integrationMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v integrationMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *integrationMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *integrationMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation5(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation6(in *jlexer.Lexer, out *conversationReporterClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation6(out *jwriter.Writer, in conversationReporterClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v conversationReporterClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v conversationReporterClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *conversationReporterClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *conversationReporterClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation6(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation7(in *jlexer.Lexer, out *conversationMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation7(out *jwriter.Writer, in conversationMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v conversationMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v conversationMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *conversationMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *conversationMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation7(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation8(in *jlexer.Lexer, out *agentPresenceMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation8(out *jwriter.Writer, in agentPresenceMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v agentPresenceMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v agentPresenceMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *agentPresenceMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *agentPresenceMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation8(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation9(in *jlexer.Lexer, out *UserConversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "convo_id":
			if in.IsNull() {
				in.Skip()
				out.ConvoId = nil
			} else {
				if out.ConvoId == nil {
					out.ConvoId = new(string)
				}
				*out.ConvoId = string(in.String())
			}
		case "last_seen_event":
			if in.IsNull() {
				in.Skip()
				out.LastSeenEvent = nil
			} else {
				if out.LastSeenEvent == nil {
					out.LastSeenEvent = new(string)
				}
				*out.LastSeenEvent = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation9(out *jwriter.Writer, in UserConversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.ConvoId != nil {
		const prefix string = ",\"convo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConvoId))
	}
	if in.LastSeenEvent != nil {
		const prefix string = ",\"last_seen_event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastSeenEvent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserConversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserConversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserConversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserConversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation9(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation10(in *jlexer.Lexer, out *UseConnector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "connector_id":
			if in.IsNull() {
				in.Skip()
				out.ConnectorId = nil
			} else {
				if out.ConnectorId == nil {
					out.ConnectorId = new(string)
				}
				*out.ConnectorId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(string)
				}
				*out.Updated = string(in.String())
			}
		case "by":
			if in.IsNull() {
				in.Skip()
				out.By = nil
			} else {
				if out.By == nil {
					out.By = new(string)
				}
				*out.By = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation10(out *jwriter.Writer, in UseConnector) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConnectorId != nil {
		const prefix string = ",\"connector_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConnectorId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Updated))
	}
	if in.By != nil {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UseConnector) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UseConnector) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UseConnector) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UseConnector) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation10(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation11(in *jlexer.Lexer, out *TotalConversationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_conversation":
			if in.IsNull() {
				in.Skip()
				out.TotalConversation = nil
			} else {
				if out.TotalConversation == nil {
					out.TotalConversation = new(int64)
				}
				*out.TotalConversation = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation11(out *jwriter.Writer, in TotalConversationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TotalConversation != nil {
		const prefix string = ",\"total_conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.TotalConversation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TotalConversationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TotalConversationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TotalConversationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TotalConversationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation11(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation12(in *jlexer.Lexer, out *Tickets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "tickets":
			if in.IsNull() {
				in.Skip()
				out.Tickets = nil
			} else {
				in.Delim('[')
				if out.Tickets == nil {
					if !in.IsDelim(']') {
						out.Tickets = make([]*Ticket, 0, 8)
					} else {
						out.Tickets = []*Ticket{}
					}
				} else {
					out.Tickets = (out.Tickets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Ticket
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Ticket)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Tickets = append(out.Tickets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation12(out *jwriter.Writer, in Tickets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Tickets) != 0 {
		const prefix string = ",\"tickets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Tickets {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tickets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tickets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tickets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tickets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation12(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation13(in *jlexer.Lexer, out *TicketListRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "order_by":
			if in.IsNull() {
				in.Skip()
				out.OrderBy = nil
			} else {
				if out.OrderBy == nil {
					out.OrderBy = new(string)
				}
				*out.OrderBy = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "is_assigned":
			if in.IsNull() {
				in.Skip()
				out.IsAssigned = nil
			} else {
				if out.IsAssigned == nil {
					out.IsAssigned = new(bool)
				}
				*out.IsAssigned = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation13(out *jwriter.Writer, in TicketListRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.OrderBy != nil {
		const prefix string = ",\"order_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OrderBy))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.IsAssigned != nil {
		const prefix string = ",\"is_assigned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsAssigned))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketListRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketListRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketListRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketListRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation13(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation14(in *jlexer.Lexer, out *TicketAttributeDefinitions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*TicketAttributeDefinition, 0, 8)
					} else {
						out.Attributes = []*TicketAttributeDefinition{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *TicketAttributeDefinition
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TicketAttributeDefinition)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation14(out *jwriter.Writer, in TicketAttributeDefinitions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Attributes {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketAttributeDefinitions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketAttributeDefinitions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketAttributeDefinitions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketAttributeDefinitions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation14(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation15(in *jlexer.Lexer, out *TicketAttributeDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "list_items":
			if in.IsNull() {
				in.Skip()
				out.ListItems = nil
			} else {
				in.Delim('[')
				if out.ListItems == nil {
					if !in.IsDelim(']') {
						out.ListItems = make([]string, 0, 4)
					} else {
						out.ListItems = []string{}
					}
				} else {
					out.ListItems = (out.ListItems)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.ListItems = append(out.ListItems, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation15(out *jwriter.Writer, in TicketAttributeDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if len(in.ListItems) != 0 {
		const prefix string = ",\"list_items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.ListItems {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Kind))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketAttributeDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketAttributeDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketAttributeDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketAttributeDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation15(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation16(in *jlexer.Lexer, out *TicketAttributeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "ticket_id":
			if in.IsNull() {
				in.Skip()
				out.TicketId = nil
			} else {
				if out.TicketId == nil {
					out.TicketId = new(string)
				}
				*out.TicketId = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "number":
			if in.IsNull() {
				in.Skip()
				out.Number = nil
			} else {
				if out.Number == nil {
					out.Number = new(float64)
				}
				*out.Number = float64(in.Float64())
			}
		case "boolean":
			if in.IsNull() {
				in.Skip()
				out.Boolean = nil
			} else {
				if out.Boolean == nil {
					out.Boolean = new(bool)
				}
				*out.Boolean = bool(in.Bool())
			}
		case "datetime":
			if in.IsNull() {
				in.Skip()
				out.Datetime = nil
			} else {
				if out.Datetime == nil {
					out.Datetime = new(string)
				}
				*out.Datetime = string(in.String())
			}
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]string, 0, 4)
					} else {
						out.List = []string{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.List = append(out.List, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "setter":
			if in.IsNull() {
				in.Skip()
				out.Setter = nil
			} else {
				if out.Setter == nil {
					out.Setter = new(string)
				}
				*out.Setter = string(in.String())
			}
		case "setter_type":
			if in.IsNull() {
				in.Skip()
				out.SetterType = nil
			} else {
				if out.SetterType == nil {
					out.SetterType = new(string)
				}
				*out.SetterType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation16(out *jwriter.Writer, in TicketAttributeData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.TicketId != nil {
		const prefix string = ",\"ticket_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TicketId))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Number != nil {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Number))
	}
	if in.Boolean != nil {
		const prefix string = ",\"boolean\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Boolean))
	}
	if in.Datetime != nil {
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Datetime))
	}
	if len(in.List) != 0 {
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.List {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Setter != nil {
		const prefix string = ",\"setter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Setter))
	}
	if in.SetterType != nil {
		const prefix string = ",\"setter_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SetterType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TicketAttributeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TicketAttributeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TicketAttributeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TicketAttributeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation16(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation17(in *jlexer.Lexer, out *Ticket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "duedate":
			if in.IsNull() {
				in.Skip()
				out.Duedate = nil
			} else {
				if out.Duedate == nil {
					out.Duedate = new(int64)
				}
				*out.Duedate = int64(in.Int64())
			}
		case "subject":
			if in.IsNull() {
				in.Skip()
				out.Subject = nil
			} else {
				if out.Subject == nil {
					out.Subject = new(string)
				}
				*out.Subject = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*TicketAttributeData, 0, 8)
					} else {
						out.Attributes = []*TicketAttributeData{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *TicketAttributeData
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(TicketAttributeData)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "user_ids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.UserIds = append(out.UserIds, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.AgentIds = append(out.AgentIds, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_assigned":
			if in.IsNull() {
				in.Skip()
				out.IsAssigned = nil
			} else {
				if out.IsAssigned == nil {
					out.IsAssigned = new(bool)
				}
				*out.IsAssigned = bool(in.Bool())
			}
		case "updated_by":
			if in.IsNull() {
				in.Skip()
				out.UpdatedBy = nil
			} else {
				if out.UpdatedBy == nil {
					out.UpdatedBy = new(string)
				}
				*out.UpdatedBy = string(in.String())
			}
		case "created_by":
			if in.IsNull() {
				in.Skip()
				out.CreatedBy = nil
			} else {
				if out.CreatedBy == nil {
					out.CreatedBy = new(string)
				}
				*out.CreatedBy = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation17(out *jwriter.Writer, in Ticket) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Priority))
	}
	if in.Duedate != nil {
		const prefix string = ",\"duedate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Duedate))
	}
	if in.Subject != nil {
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Subject))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Attributes {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if len(in.UserIds) != 0 {
		const prefix string = ",\"user_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.UserIds {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.AgentIds {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if in.IsAssigned != nil {
		const prefix string = ",\"is_assigned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsAssigned))
	}
	if in.UpdatedBy != nil {
		const prefix string = ",\"updated_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UpdatedBy))
	}
	if in.CreatedBy != nil {
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatedBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ticket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ticket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ticket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ticket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation17(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation18(in *jlexer.Lexer, out *Templates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "templates":
			if in.IsNull() {
				in.Skip()
				out.Templates = nil
			} else {
				in.Delim('[')
				if out.Templates == nil {
					if !in.IsDelim(']') {
						out.Templates = make([]*Template, 0, 8)
					} else {
						out.Templates = []*Template{}
					}
				} else {
					out.Templates = (out.Templates)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Template
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Template)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Templates = append(out.Templates, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(int64)
				}
				*out.Total = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation18(out *jwriter.Writer, in Templates) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Templates) != 0 {
		const prefix string = ",\"templates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Templates {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Templates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Templates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Templates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Templates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation18(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation19(in *jlexer.Lexer, out *TemplateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]string, 0, 4)
					} else {
						out.Ids = []string{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Ids = append(out.Ids, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation19(out *jwriter.Writer, in TemplateData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if len(in.Ids) != 0 {
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Ids {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TemplateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TemplateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TemplateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TemplateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation19(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation20(in *jlexer.Lexer, out *Template) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]string, 0, 4)
					} else {
						out.Keys = []string{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Keys = append(out.Keys, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_type":
			if in.IsNull() {
				in.Skip()
				out.ChannelType = nil
			} else {
				if out.ChannelType == nil {
					out.ChannelType = new(string)
				}
				*out.ChannelType = string(in.String())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*TemplateData, 0, 8)
					} else {
						out.Data = []*TemplateData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v29 *TemplateData
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(TemplateData)
						}
						(*v29).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_public":
			if in.IsNull() {
				in.Skip()
				out.IsPublic = nil
			} else {
				if out.IsPublic == nil {
					out.IsPublic = new(bool)
				}
				*out.IsPublic = bool(in.Bool())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				if out.Creator == nil {
					out.Creator = new(string)
				}
				*out.Creator = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation20(out *jwriter.Writer, in Template) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Keys) != 0 {
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Keys {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if in.ChannelType != nil {
		const prefix string = ",\"channel_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChannelType))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Data {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsPublic != nil {
		const prefix string = ",\"is_public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsPublic))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Creator != nil {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Creator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Template) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Template) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Template) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Template) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation20(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation21(in *jlexer.Lexer, out *Tags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]*Tag, 0, 8)
					} else {
						out.Tags = []*Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *Tag
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(Tag)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Tags = append(out.Tags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation21(out *jwriter.Writer, in Tags) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Tags {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation21(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation22(in *jlexer.Lexer, out *TagRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation22(out *jwriter.Writer, in TagRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation22(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation23(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "creator_id":
			if in.IsNull() {
				in.Skip()
				out.CreatorId = nil
			} else {
				if out.CreatorId == nil {
					out.CreatorId = new(string)
				}
				*out.CreatorId = string(in.String())
			}
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(string)
				}
				*out.Color = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation23(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.CreatorId != nil {
		const prefix string = ",\"creator_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CreatorId))
	}
	if in.Color != nil {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation23(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation24(in *jlexer.Lexer, out *StartRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "channel_type":
			if in.IsNull() {
				in.Skip()
				out.ChannelType = nil
			} else {
				if out.ChannelType == nil {
					out.ChannelType = new(string)
				}
				*out.ChannelType = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(string)
				}
				*out.From = string(in.String())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]string, 0, 4)
					} else {
						out.To = []string{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.To = append(out.To, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjsonB8de26a5DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "chain_id":
			if in.IsNull() {
				in.Skip()
				out.ChainId = nil
			} else {
				if out.ChainId == nil {
					out.ChainId = new(string)
				}
				*out.ChainId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "automation_id":
			if in.IsNull() {
				in.Skip()
				out.AutomationId = nil
			} else {
				if out.AutomationId == nil {
					out.AutomationId = new(string)
				}
				*out.AutomationId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation24(out *jwriter.Writer, in StartRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ChannelType != nil {
		const prefix string = ",\"channel_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChannelType))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.From))
	}
	if len(in.To) != 0 {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.To {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB8de26a5EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.ChainId != nil {
		const prefix string = ",\"chain_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChainId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.AutomationId != nil {
		const prefix string = ",\"automation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AutomationId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation24(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderUser(in *jlexer.Lexer, out *user.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*user.Trace, 0, 8)
					} else {
						out.Traces = []*user.Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *user.Trace
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(user.Trace)
						}
						easyjsonB8de26a5DecodeGithubComSubizHeaderUser1(in, &*v40)
					}
					out.Traces = append(out.Traces, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_ban":
			out.IsBan = bool(in.Bool())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*user.AttributeData, 0, 8)
					} else {
						out.Attributes = []*user.AttributeData{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *user.AttributeData
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(user.AttributeData)
						}
						easyjsonB8de26a5DecodeGithubComSubizHeaderUser2(in, &*v41)
					}
					out.Attributes = append(out.Attributes, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "segments":
			if in.IsNull() {
				in.Skip()
				out.Segments = nil
			} else {
				in.Delim('[')
				if out.Segments == nil {
					if !in.IsDelim(']') {
						out.Segments = make([]string, 0, 4)
					} else {
						out.Segments = []string{}
					}
				} else {
					out.Segments = (out.Segments)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.Segments = append(out.Segments, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subiz_id":
			out.SubizId = string(in.String())
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Aliases = append(out.Aliases, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "par":
			out.Par = int32(in.Int32())
		case "modified":
			out.Modified = int64(in.Int64())
		case "modified_week":
			out.ModifiedWeek = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderUser(out *jwriter.Writer, in user.User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Traces {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					easyjsonB8de26a5EncodeGithubComSubizHeaderUser1(out, *v45)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsBan {
		const prefix string = ",\"is_ban\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsBan))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.Attributes {
				if v46 > 0 {
					out.RawByte(',')
				}
				if v47 == nil {
					out.RawString("null")
				} else {
					easyjsonB8de26a5EncodeGithubComSubizHeaderUser2(out, *v47)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Segments) != 0 {
		const prefix string = ",\"segments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Segments {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if in.SubizId != "" {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubizId))
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Aliases {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.Par != 0 {
		const prefix string = ",\"par\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Par))
	}
	if in.Modified != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Modified))
	}
	if in.ModifiedWeek != 0 {
		const prefix string = ",\"modified_week\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ModifiedWeek))
	}
	out.RawByte('}')
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderUser2(in *jlexer.Lexer, out *user.AttributeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "state":
			out.State = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "modified":
			out.Modified = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		case "number":
			out.Number = float64(in.Float64())
		case "boolean":
			out.Boolean = bool(in.Bool())
		case "datetime":
			out.Datetime = string(in.String())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]string, 0, 4)
					} else {
						out.List = []string{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.List = append(out.List, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "setter":
			out.Setter = string(in.String())
		case "setter_type":
			out.SetterType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderUser2(out *jwriter.Writer, in user.AttributeData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Modified != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Modified))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Number))
	}
	if in.Boolean {
		const prefix string = ",\"boolean\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Boolean))
	}
	if in.Datetime != "" {
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	if len(in.List) != 0 {
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.List {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	if in.Setter != "" {
		const prefix string = ",\"setter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Setter))
	}
	if in.SetterType != "" {
		const prefix string = ",\"setter_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SetterType))
	}
	out.RawByte('}')
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderUser1(in *jlexer.Lexer, out *user.Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventId = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "location_id":
			out.LocationId = int32(in.Int32())
		case "city_name":
			out.CityName = string(in.String())
		case "country_name":
			out.CountryName = string(in.String())
		case "continent_code":
			out.ContinentCode = string(in.String())
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		case "postal_code":
			out.PostalCode = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "isp":
			out.Isp = string(in.String())
		case "continent_name":
			out.ContinentName = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "device_type":
			out.DeviceType = string(in.String())
		case "browser_name":
			out.BrowserName = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "screen_resolution":
			out.ScreenResolution = string(in.String())
		case "ga_client_id":
			out.GaClientId = string(in.String())
		case "ga_tracking_ids":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingIds = nil
			} else {
				in.Delim('[')
				if out.GaTrackingIds == nil {
					if !in.IsDelim(']') {
						out.GaTrackingIds = make([]string, 0, 4)
					} else {
						out.GaTrackingIds = []string{}
					}
				} else {
					out.GaTrackingIds = (out.GaTrackingIds)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.GaTrackingIds = append(out.GaTrackingIds, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ads_network":
			out.AdsNetwork = string(in.String())
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]*user.Campaign, 0, 8)
					} else {
						out.Campaigns = []*user.Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *user.Campaign
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(user.Campaign)
						}
						easyjsonB8de26a5DecodeGithubComSubizHeaderUser3(in, &*v56)
					}
					out.Campaigns = append(out.Campaigns, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			out.Created = int64(in.Int64())
		case "tracked":
			out.Tracked = int64(in.Int64())
		case "referrer":
			out.Referrer = string(in.String())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderUser1(out *jwriter.Writer, in user.Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EventId != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventId))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.LocationId != 0 {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LocationId))
	}
	if in.CityName != "" {
		const prefix string = ",\"city_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CityName))
	}
	if in.CountryName != "" {
		const prefix string = ",\"country_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryName))
	}
	if in.ContinentCode != "" {
		const prefix string = ",\"continent_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentCode))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Longitude))
	}
	if in.PostalCode != "" {
		const prefix string = ",\"postal_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostalCode))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Isp != "" {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Isp))
	}
	if in.ContinentName != "" {
		const prefix string = ",\"continent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentName))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"country_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.DeviceType != "" {
		const prefix string = ",\"device_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceType))
	}
	if in.BrowserName != "" {
		const prefix string = ",\"browser_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrowserName))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.GaClientId != "" {
		const prefix string = ",\"ga_client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GaClientId))
	}
	if len(in.GaTrackingIds) != 0 {
		const prefix string = ",\"ga_tracking_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.GaTrackingIds {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	if in.AdsNetwork != "" {
		const prefix string = ",\"ads_network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdsNetwork))
	}
	if len(in.Campaigns) != 0 {
		const prefix string = ",\"campaigns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Campaigns {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					easyjsonB8de26a5EncodeGithubComSubizHeaderUser3(out, *v60)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Tracked != 0 {
		const prefix string = ",\"tracked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Tracked))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	out.RawByte('}')
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderUser3(in *jlexer.Lexer, out *user.Campaign) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "medium":
			out.Medium = string(in.String())
		case "term":
			out.Term = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderUser3(out *jwriter.Writer, in user.Campaign) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Medium))
	}
	if in.Term != "" {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Term))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	out.RawByte('}')
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation25(in *jlexer.Lexer, out *ServiceLevelAgreements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "service_level_agreements":
			if in.IsNull() {
				in.Skip()
				out.ServiceLevelAgreements = nil
			} else {
				in.Delim('[')
				if out.ServiceLevelAgreements == nil {
					if !in.IsDelim(']') {
						out.ServiceLevelAgreements = make([]*ServiceLevelAgreement, 0, 8)
					} else {
						out.ServiceLevelAgreements = []*ServiceLevelAgreement{}
					}
				} else {
					out.ServiceLevelAgreements = (out.ServiceLevelAgreements)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *ServiceLevelAgreement
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(ServiceLevelAgreement)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.ServiceLevelAgreements = append(out.ServiceLevelAgreements, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation25(out *jwriter.Writer, in ServiceLevelAgreements) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.ServiceLevelAgreements) != 0 {
		const prefix string = ",\"service_level_agreements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.ServiceLevelAgreements {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceLevelAgreements) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceLevelAgreements) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceLevelAgreements) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceLevelAgreements) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation25(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation26(in *jlexer.Lexer, out *ServiceLevelAgreementTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "resolve_within":
			if in.IsNull() {
				in.Skip()
				out.ResolveWithin = nil
			} else {
				if out.ResolveWithin == nil {
					out.ResolveWithin = new(int32)
				}
				*out.ResolveWithin = int32(in.Int32())
			}
		case "operational_hours":
			if in.IsNull() {
				in.Skip()
				out.OperationalHours = nil
			} else {
				if out.OperationalHours == nil {
					out.OperationalHours = new(string)
				}
				*out.OperationalHours = string(in.String())
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(bool)
				}
				*out.Notification = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation26(out *jwriter.Writer, in ServiceLevelAgreementTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Priority))
	}
	if in.ResolveWithin != nil {
		const prefix string = ",\"resolve_within\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ResolveWithin))
	}
	if in.OperationalHours != nil {
		const prefix string = ",\"operational_hours\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OperationalHours))
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Notification))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceLevelAgreementTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceLevelAgreementTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceLevelAgreementTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceLevelAgreementTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation26(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation27(in *jlexer.Lexer, out *ServiceLevelAgreement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "strategy":
			if in.IsNull() {
				in.Skip()
				out.Strategy = nil
			} else {
				if out.Strategy == nil {
					out.Strategy = new(string)
				}
				*out.Strategy = string(in.String())
			}
		case "assign_to":
			if in.IsNull() {
				in.Skip()
				out.AssignTo = nil
			} else {
				if out.AssignTo == nil {
					out.AssignTo = new(string)
				}
				*out.AssignTo = string(in.String())
			}
		case "targets":
			if in.IsNull() {
				in.Skip()
				out.Targets = nil
			} else {
				in.Delim('[')
				if out.Targets == nil {
					if !in.IsDelim(']') {
						out.Targets = make([]*ServiceLevelAgreementTarget, 0, 8)
					} else {
						out.Targets = []*ServiceLevelAgreementTarget{}
					}
				} else {
					out.Targets = (out.Targets)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *ServiceLevelAgreementTarget
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(ServiceLevelAgreementTarget)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.Targets = append(out.Targets, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_default":
			if in.IsNull() {
				in.Skip()
				out.IsDefault = nil
			} else {
				if out.IsDefault == nil {
					out.IsDefault = new(bool)
				}
				*out.IsDefault = bool(in.Bool())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "order":
			if in.IsNull() {
				in.Skip()
				out.Order = nil
			} else {
				if out.Order == nil {
					out.Order = new(int32)
				}
				*out.Order = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation27(out *jwriter.Writer, in ServiceLevelAgreement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Strategy != nil {
		const prefix string = ",\"strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Strategy))
	}
	if in.AssignTo != nil {
		const prefix string = ",\"assign_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AssignTo))
	}
	if len(in.Targets) != 0 {
		const prefix string = ",\"targets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.Targets {
				if v65 > 0 {
					out.RawByte(',')
				}
				if v66 == nil {
					out.RawString("null")
				} else {
					(*v66).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsDefault != nil {
		const prefix string = ",\"is_default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsDefault))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.Order != nil {
		const prefix string = ",\"order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceLevelAgreement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceLevelAgreement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceLevelAgreement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceLevelAgreement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation27(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation28(in *jlexer.Lexer, out *Seen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation28(out *jwriter.Writer, in Seen) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Seen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Seen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Seen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Seen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation28(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation29(in *jlexer.Lexer, out *SearchTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation29(out *jwriter.Writer, in SearchTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation29(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation30(in *jlexer.Lexer, out *SearchMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "user_ids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.UserIds = append(out.UserIds, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation30(out *jwriter.Writer, in SearchMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if len(in.UserIds) != 0 {
		const prefix string = ",\"user_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.UserIds {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation30(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation31(in *jlexer.Lexer, out *Search) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "keyword":
			if in.IsNull() {
				in.Skip()
				out.Keyword = nil
			} else {
				if out.Keyword == nil {
					out.Keyword = new(string)
				}
				*out.Keyword = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "before_id":
			if in.IsNull() {
				in.Skip()
				out.BeforeId = nil
			} else {
				if out.BeforeId == nil {
					out.BeforeId = new(string)
				}
				*out.BeforeId = string(in.String())
			}
		case "after_id":
			if in.IsNull() {
				in.Skip()
				out.AfterId = nil
			} else {
				if out.AfterId == nil {
					out.AfterId = new(string)
				}
				*out.AfterId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation31(out *jwriter.Writer, in Search) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Keyword != nil {
		const prefix string = ",\"keyword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Keyword))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.BeforeId != nil {
		const prefix string = ",\"before_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BeforeId))
	}
	if in.AfterId != nil {
		const prefix string = ",\"after_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AfterId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Search) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Search) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Search) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Search) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation31(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation32(in *jlexer.Lexer, out *Rule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "strategy":
			if in.IsNull() {
				in.Skip()
				out.Strategy = nil
			} else {
				if out.Strategy == nil {
					out.Strategy = new(string)
				}
				*out.Strategy = string(in.String())
			}
		case "assign_tos":
			if in.IsNull() {
				in.Skip()
				out.AssignTos = nil
			} else {
				in.Delim('[')
				if out.AssignTos == nil {
					if !in.IsDelim(']') {
						out.AssignTos = make([]string, 0, 4)
					} else {
						out.AssignTos = []string{}
					}
				} else {
					out.AssignTos = (out.AssignTos)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.AssignTos = append(out.AssignTos, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*Condition, 0, 8)
					} else {
						out.Conditions = []*Condition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v71 *Condition
					if in.IsNull() {
						in.Skip()
						v71 = nil
					} else {
						if v71 == nil {
							v71 = new(Condition)
						}
						(*v71).UnmarshalEasyJSON(in)
					}
					out.Conditions = append(out.Conditions, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				if out.Modified == nil {
					out.Modified = new(int64)
				}
				*out.Modified = int64(in.Int64())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "available_agents_only":
			if in.IsNull() {
				in.Skip()
				out.AvailableAgentsOnly = nil
			} else {
				if out.AvailableAgentsOnly == nil {
					out.AvailableAgentsOnly = new(bool)
				}
				*out.AvailableAgentsOnly = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation32(out *jwriter.Writer, in Rule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Priority))
	}
	if in.Strategy != nil {
		const prefix string = ",\"strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Strategy))
	}
	if len(in.AssignTos) != 0 {
		const prefix string = ",\"assign_tos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.AssignTos {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.Conditions {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil {
					out.RawString("null")
				} else {
					(*v75).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Modified != nil {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Modified))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.AvailableAgentsOnly != nil {
		const prefix string = ",\"available_agents_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AvailableAgentsOnly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation32(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation33(in *jlexer.Lexer, out *RouteResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rule_id":
			if in.IsNull() {
				in.Skip()
				out.RuleId = nil
			} else {
				if out.RuleId == nil {
					out.RuleId = new(string)
				}
				*out.RuleId = string(in.String())
			}
		case "strategy":
			if in.IsNull() {
				in.Skip()
				out.Strategy = nil
			} else {
				if out.Strategy == nil {
					out.Strategy = new(string)
				}
				*out.Strategy = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v76 string
					v76 = string(in.String())
					out.AgentIds = append(out.AgentIds, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation33(out *jwriter.Writer, in RouteResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RuleId != nil {
		const prefix string = ",\"rule_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RuleId))
	}
	if in.Strategy != nil {
		const prefix string = ",\"strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Strategy))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.AgentIds {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.String(string(v78))
			}
			out.RawByte(']')
		}
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RouteResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RouteResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RouteResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RouteResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation33(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation34(in *jlexer.Lexer, out *Route) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*Rule, 0, 8)
					} else {
						out.Rules = []*Rule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v79 *Rule
					if in.IsNull() {
						in.Skip()
						v79 = nil
					} else {
						if v79 == nil {
							v79 = new(Rule)
						}
						(*v79).UnmarshalEasyJSON(in)
					}
					out.Rules = append(out.Rules, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation34(out *jwriter.Writer, in Route) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Rules) != 0 {
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v80, v81 := range in.Rules {
				if v80 > 0 {
					out.RawByte(',')
				}
				if v81 == nil {
					out.RawString("null")
				} else {
					(*v81).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Route) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Route) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Route) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Route) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation34(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation35(in *jlexer.Lexer, out *RequestState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "channel_id":
			if in.IsNull() {
				in.Skip()
				out.ChannelId = nil
			} else {
				if out.ChannelId == nil {
					out.ChannelId = new(string)
				}
				*out.ChannelId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation35(out *jwriter.Writer, in RequestState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.ChannelId != nil {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChannelId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation35(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation36(in *jlexer.Lexer, out *ReportTicket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.AgentIds = append(out.AgentIds, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tag_ids":
			if in.IsNull() {
				in.Skip()
				out.TagIds = nil
			} else {
				in.Delim('[')
				if out.TagIds == nil {
					if !in.IsDelim(']') {
						out.TagIds = make([]string, 0, 4)
					} else {
						out.TagIds = []string{}
					}
				} else {
					out.TagIds = (out.TagIds)[:0]
				}
				for !in.IsDelim(']') {
					var v83 string
					v83 = string(in.String())
					out.TagIds = append(out.TagIds, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(int64)
				}
				*out.CreatedAt = int64(in.Int64())
			}
		case "resolved_at":
			if in.IsNull() {
				in.Skip()
				out.ResolvedAt = nil
			} else {
				if out.ResolvedAt == nil {
					out.ResolvedAt = new(int64)
				}
				*out.ResolvedAt = int64(in.Int64())
			}
		case "is_resolved":
			if in.IsNull() {
				in.Skip()
				out.IsResolved = nil
			} else {
				if out.IsResolved == nil {
					out.IsResolved = new(bool)
				}
				*out.IsResolved = bool(in.Bool())
			}
		case "resolve_time":
			if in.IsNull() {
				in.Skip()
				out.ResolveTime = nil
			} else {
				if out.ResolveTime == nil {
					out.ResolveTime = new(int64)
				}
				*out.ResolveTime = int64(in.Int64())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "closed_at":
			if in.IsNull() {
				in.Skip()
				out.ClosedAt = nil
			} else {
				if out.ClosedAt == nil {
					out.ClosedAt = new(int64)
				}
				*out.ClosedAt = int64(in.Int64())
			}
		case "is_unresolved":
			if in.IsNull() {
				in.Skip()
				out.IsUnresolved = nil
			} else {
				if out.IsUnresolved == nil {
					out.IsUnresolved = new(bool)
				}
				*out.IsUnresolved = bool(in.Bool())
			}
		case "is_violated":
			if in.IsNull() {
				in.Skip()
				out.IsViolated = nil
			} else {
				if out.IsViolated == nil {
					out.IsViolated = new(bool)
				}
				*out.IsViolated = bool(in.Bool())
			}
		case "has_agent":
			if in.IsNull() {
				in.Skip()
				out.HasAgent = nil
			} else {
				if out.HasAgent == nil {
					out.HasAgent = new(bool)
				}
				*out.HasAgent = bool(in.Bool())
			}
		case "user_ids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.UserIds = append(out.UserIds, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation36(out *jwriter.Writer, in ReportTicket) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Priority))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v85, v86 := range in.AgentIds {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	if len(in.TagIds) != 0 {
		const prefix string = ",\"tag_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v87, v88 := range in.TagIds {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.CreatedAt))
	}
	if in.ResolvedAt != nil {
		const prefix string = ",\"resolved_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ResolvedAt))
	}
	if in.IsResolved != nil {
		const prefix string = ",\"is_resolved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsResolved))
	}
	if in.ResolveTime != nil {
		const prefix string = ",\"resolve_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ResolveTime))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.ClosedAt != nil {
		const prefix string = ",\"closed_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ClosedAt))
	}
	if in.IsUnresolved != nil {
		const prefix string = ",\"is_unresolved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsUnresolved))
	}
	if in.IsViolated != nil {
		const prefix string = ",\"is_violated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsViolated))
	}
	if in.HasAgent != nil {
		const prefix string = ",\"has_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasAgent))
	}
	if len(in.UserIds) != 0 {
		const prefix string = ",\"user_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.UserIds {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportTicket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportTicket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportTicket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportTicket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation36(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation37(in *jlexer.Lexer, out *Received) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation37(out *jwriter.Writer, in Received) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Received) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Received) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Received) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Received) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation37(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation38(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(int32)
				}
				*out.Count = int32(in.Int32())
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v91 string
					v91 = string(in.String())
					out.Users = append(out.Users, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation38(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Count != nil {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Count))
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.Users {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation38(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation39(in *jlexer.Lexer, out *QuickReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content_type":
			if in.IsNull() {
				in.Skip()
				out.ContentType = nil
			} else {
				if out.ContentType == nil {
					out.ContentType = new(string)
				}
				*out.ContentType = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation39(out *jwriter.Writer, in QuickReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContentType != nil {
		const prefix string = ",\"content_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentType))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuickReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuickReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuickReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuickReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation39(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation40(in *jlexer.Lexer, out *Postback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "button":
			if in.IsNull() {
				in.Skip()
				out.Button = nil
			} else {
				if out.Button == nil {
					out.Button = new(Button)
				}
				(*out.Button).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation40(out *jwriter.Writer, in Postback) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Button != nil {
		const prefix string = ",\"button\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Button).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Postback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Postback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Postback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Postback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation40(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation41(in *jlexer.Lexer, out *MessageId) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation41(out *jwriter.Writer, in MessageId) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageId) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageId) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageId) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageId) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation41(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation42(in *jlexer.Lexer, out *MessageAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(string)
				}
				*out.Error = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation42(out *jwriter.Writer, in MessageAck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation42(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation43(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v94 *Attachment
					if in.IsNull() {
						in.Skip()
						v94 = nil
					} else {
						if v94 == nil {
							v94 = new(Attachment)
						}
						(*v94).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v95 *Reaction
					if in.IsNull() {
						in.Skip()
						v95 = nil
					} else {
						if v95 == nil {
							v95 = new(Reaction)
						}
						(*v95).UnmarshalEasyJSON(in)
					}
					out.Reactions = append(out.Reactions, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*Field, 0, 8)
					} else {
						out.Fields = []*Field{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v96 *Field
					if in.IsNull() {
						in.Skip()
						v96 = nil
					} else {
						if v96 == nil {
							v96 = new(Field)
						}
						(*v96).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "computed":
			if in.IsNull() {
				in.Skip()
				out.Computed = nil
			} else {
				if out.Computed == nil {
					out.Computed = new(Computed)
				}
				(*out.Computed).UnmarshalEasyJSON(in)
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "chain_id":
			if in.IsNull() {
				in.Skip()
				out.ChainId = nil
			} else {
				if out.ChainId == nil {
					out.ChainId = new(string)
				}
				*out.ChainId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation43(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v97, v98 := range in.Attachments {
				if v97 > 0 {
					out.RawByte(',')
				}
				if v98 == nil {
					out.RawString("null")
				} else {
					(*v98).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Reactions) != 0 {
		const prefix string = ",\"reactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v99, v100 := range in.Reactions {
				if v99 > 0 {
					out.RawByte(',')
				}
				if v100 == nil {
					out.RawString("null")
				} else {
					(*v100).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v101, v102 := range in.Fields {
				if v101 > 0 {
					out.RawByte(',')
				}
				if v102 == nil {
					out.RawString("null")
				} else {
					(*v102).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Computed != nil {
		const prefix string = ",\"computed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Computed).MarshalEasyJSON(out)
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.ChainId != nil {
		const prefix string = ",\"chain_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChainId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation43(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation44(in *jlexer.Lexer, out *MemberV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation44(out *jwriter.Writer, in MemberV3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemberV3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemberV3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemberV3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemberV3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation44(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation45(in *jlexer.Lexer, out *MemberSeen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation45(out *jwriter.Writer, in MemberSeen) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemberSeen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemberSeen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemberSeen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemberSeen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation45(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation46(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "subiz_id":
			if in.IsNull() {
				in.Skip()
				out.SubizId = nil
			} else {
				if out.SubizId == nil {
					out.SubizId = new(string)
				}
				*out.SubizId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "left":
			if in.IsNull() {
				in.Skip()
				out.Left = nil
			} else {
				if out.Left == nil {
					out.Left = new(bool)
				}
				*out.Left = bool(in.Bool())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*Field, 0, 8)
					} else {
						out.Fields = []*Field{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v103 *Field
					if in.IsNull() {
						in.Skip()
						v103 = nil
					} else {
						if v103 == nil {
							v103 = new(Field)
						}
						(*v103).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_page_view_url":
			if in.IsNull() {
				in.Skip()
				out.LastPageViewUrl = nil
			} else {
				if out.LastPageViewUrl == nil {
					out.LastPageViewUrl = new(string)
				}
				*out.LastPageViewUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation46(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.SubizId != nil {
		const prefix string = ",\"subiz_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubizId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.AvatarUrl != nil {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvatarUrl))
	}
	if in.Left != nil {
		const prefix string = ",\"left\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Left))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.Fields {
				if v104 > 0 {
					out.RawByte(',')
				}
				if v105 == nil {
					out.RawString("null")
				} else {
					(*v105).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.LastPageViewUrl != nil {
		const prefix string = ",\"last_page_view_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastPageViewUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation46(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation47(in *jlexer.Lexer, out *ListEventsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "start_id":
			if in.IsNull() {
				in.Skip()
				out.StartId = nil
			} else {
				if out.StartId == nil {
					out.StartId = new(string)
				}
				*out.StartId = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation47(out *jwriter.Writer, in ListEventsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.StartId != nil {
		const prefix string = ",\"start_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartId))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListEventsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListEventsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListEventsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation47(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation48(in *jlexer.Lexer, out *ListConversationsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "group_by":
			if in.IsNull() {
				in.Skip()
				out.GroupBy = nil
			} else {
				if out.GroupBy == nil {
					out.GroupBy = new(string)
				}
				*out.GroupBy = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation48(out *jwriter.Writer, in ListConversationsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.GroupBy != nil {
		const prefix string = ",\"group_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupBy))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListConversationsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListConversationsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListConversationsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListConversationsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation48(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation49(in *jlexer.Lexer, out *ListConversationsByUserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "channel_id":
			if in.IsNull() {
				in.Skip()
				out.ChannelId = nil
			} else {
				if out.ChannelId == nil {
					out.ChannelId = new(string)
				}
				*out.ChannelId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "start_id":
			if in.IsNull() {
				in.Skip()
				out.StartId = nil
			} else {
				if out.StartId == nil {
					out.StartId = new(string)
				}
				*out.StartId = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation49(out *jwriter.Writer, in ListConversationsByUserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ChannelId != nil {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChannelId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.StartId != nil {
		const prefix string = ",\"start_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartId))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListConversationsByUserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListConversationsByUserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListConversationsByUserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListConversationsByUserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation49(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation50(in *jlexer.Lexer, out *Integrations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integrations":
			if in.IsNull() {
				in.Skip()
				out.Integrations = nil
			} else {
				in.Delim('[')
				if out.Integrations == nil {
					if !in.IsDelim(']') {
						out.Integrations = make([]*Integration, 0, 8)
					} else {
						out.Integrations = []*Integration{}
					}
				} else {
					out.Integrations = (out.Integrations)[:0]
				}
				for !in.IsDelim(']') {
					var v106 *Integration
					if in.IsNull() {
						in.Skip()
						v106 = nil
					} else {
						if v106 == nil {
							v106 = new(Integration)
						}
						(*v106).UnmarshalEasyJSON(in)
					}
					out.Integrations = append(out.Integrations, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation50(out *jwriter.Writer, in Integrations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if len(in.Integrations) != 0 {
		const prefix string = ",\"integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.Integrations {
				if v107 > 0 {
					out.RawByte(',')
				}
				if v108 == nil {
					out.RawString("null")
				} else {
					(*v108).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Integrations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Integrations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Integrations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Integrations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation50(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation51(in *jlexer.Lexer, out *Integration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "connector_id":
			if in.IsNull() {
				in.Skip()
				out.ConnectorId = nil
			} else {
				if out.ConnectorId == nil {
					out.ConnectorId = new(string)
				}
				*out.ConnectorId = string(in.String())
			}
		case "logo_url":
			if in.IsNull() {
				in.Skip()
				out.LogoUrl = nil
			} else {
				if out.LogoUrl == nil {
					out.LogoUrl = new(string)
				}
				*out.LogoUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "connector_type":
			if in.IsNull() {
				in.Skip()
				out.ConnectorType = nil
			} else {
				if out.ConnectorType == nil {
					out.ConnectorType = new(string)
				}
				*out.ConnectorType = string(in.String())
			}
		case "integrated":
			if in.IsNull() {
				in.Skip()
				out.Integrated = nil
			} else {
				if out.Integrated == nil {
					out.Integrated = new(int64)
				}
				*out.Integrated = int64(in.Int64())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation51(out *jwriter.Writer, in Integration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConnectorId != nil {
		const prefix string = ",\"connector_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConnectorId))
	}
	if in.LogoUrl != nil {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LogoUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.ConnectorType != nil {
		const prefix string = ",\"connector_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConnectorType))
	}
	if in.Integrated != nil {
		const prefix string = ",\"integrated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Integrated))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Integration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Integration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Integration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Integration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation51(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation52(in *jlexer.Lexer, out *GetTicketRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation52(out *jwriter.Writer, in GetTicketRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTicketRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTicketRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTicketRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTicketRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation52(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation53(in *jlexer.Lexer, out *GenericElementTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "subtitle":
			if in.IsNull() {
				in.Skip()
				out.Subtitle = nil
			} else {
				if out.Subtitle == nil {
					out.Subtitle = new(string)
				}
				*out.Subtitle = string(in.String())
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(Button)
				}
				(*out.DefaultAction).UnmarshalEasyJSON(in)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*Button, 0, 8)
					} else {
						out.Buttons = []*Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v109 *Button
					if in.IsNull() {
						in.Skip()
						v109 = nil
					} else {
						if v109 == nil {
							v109 = new(Button)
						}
						(*v109).UnmarshalEasyJSON(in)
					}
					out.Buttons = append(out.Buttons, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation53(out *jwriter.Writer, in GenericElementTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Subtitle != nil {
		const prefix string = ",\"subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Subtitle))
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DefaultAction).MarshalEasyJSON(out)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v110, v111 := range in.Buttons {
				if v110 > 0 {
					out.RawByte(',')
				}
				if v111 == nil {
					out.RawString("null")
				} else {
					(*v111).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericElementTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericElementTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericElementTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericElementTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation53(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation54(in *jlexer.Lexer, out *FormSubmit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "form_message_id":
			if in.IsNull() {
				in.Skip()
				out.FormMessageId = nil
			} else {
				if out.FormMessageId == nil {
					out.FormMessageId = new(string)
				}
				*out.FormMessageId = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*FormField, 0, 8)
					} else {
						out.Fields = []*FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v112 *FormField
					if in.IsNull() {
						in.Skip()
						v112 = nil
					} else {
						if v112 == nil {
							v112 = new(FormField)
						}
						(*v112).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation54(out *jwriter.Writer, in FormSubmit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FormMessageId != nil {
		const prefix string = ",\"form_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FormMessageId))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.Fields {
				if v113 > 0 {
					out.RawByte(',')
				}
				if v114 == nil {
					out.RawString("null")
				} else {
					(*v114).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormSubmit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormSubmit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormSubmit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormSubmit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation54(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation55(in *jlexer.Lexer, out *FormField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v115 string
					v115 = string(in.String())
					out.Items = append(out.Items, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation55(out *jwriter.Writer, in FormField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.Items {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.String(string(v117))
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation55(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation56(in *jlexer.Lexer, out *Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*FormField, 0, 8)
					} else {
						out.Fields = []*FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v118 *FormField
					if in.IsNull() {
						in.Skip()
						v118 = nil
					} else {
						if v118 == nil {
							v118 = new(FormField)
						}
						(*v118).UnmarshalEasyJSON(in)
					}
					out.Fields = append(out.Fields, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "submit_url":
			if in.IsNull() {
				in.Skip()
				out.SubmitUrl = nil
			} else {
				if out.SubmitUrl == nil {
					out.SubmitUrl = new(string)
				}
				*out.SubmitUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation56(out *jwriter.Writer, in Form) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v119, v120 := range in.Fields {
				if v119 > 0 {
					out.RawByte(',')
				}
				if v120 == nil {
					out.RawString("null")
				} else {
					(*v120).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SubmitUrl != nil {
		const prefix string = ",\"submit_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubmitUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Form) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Form) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Form) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Form) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation56(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation57(in *jlexer.Lexer, out *Field) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation57(out *jwriter.Writer, in Field) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Field) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Field) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Field) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Field) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation57(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation58(in *jlexer.Lexer, out *EsMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "member_ids":
			if in.IsNull() {
				in.Skip()
				out.MemberIds = nil
			} else {
				in.Delim('[')
				if out.MemberIds == nil {
					if !in.IsDelim(']') {
						out.MemberIds = make([]string, 0, 4)
					} else {
						out.MemberIds = []string{}
					}
				} else {
					out.MemberIds = (out.MemberIds)[:0]
				}
				for !in.IsDelim(']') {
					var v121 string
					v121 = string(in.String())
					out.MemberIds = append(out.MemberIds, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v122 string
					v122 = string(in.String())
					out.Attachments = append(out.Attachments, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v123 string
					v123 = string(in.String())
					out.Fields = append(out.Fields, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation58(out *jwriter.Writer, in EsMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if len(in.MemberIds) != 0 {
		const prefix string = ",\"member_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v124, v125 := range in.MemberIds {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.String(string(v125))
			}
			out.RawByte(']')
		}
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v126, v127 := range in.Attachments {
				if v126 > 0 {
					out.RawByte(',')
				}
				out.String(string(v127))
			}
			out.RawByte(']')
		}
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.Fields {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.String(string(v129))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EsMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EsMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EsMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EsMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation58(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation59(in *jlexer.Lexer, out *DeleteTicketRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation59(out *jwriter.Writer, in DeleteTicketRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteTicketRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteTicketRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteTicketRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteTicketRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation59(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation60(in *jlexer.Lexer, out *DeleteTicketAttrRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation60(out *jwriter.Writer, in DeleteTicketAttrRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteTicketAttrRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteTicketAttrRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteTicketAttrRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteTicketAttrRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation60(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation61(in *jlexer.Lexer, out *CountTicketResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int64, 0, 8)
					} else {
						out.Data = []int64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v130 int64
					v130 = int64(in.Int64())
					out.Data = append(out.Data, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation61(out *jwriter.Writer, in CountTicketResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v131, v132 := range in.Data {
				if v131 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v132))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountTicketResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountTicketResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountTicketResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountTicketResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation61(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation62(in *jlexer.Lexer, out *CountTicketRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "tag_id":
			if in.IsNull() {
				in.Skip()
				out.TagId = nil
			} else {
				if out.TagId == nil {
					out.TagId = new(string)
				}
				*out.TagId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "is_resolved":
			if in.IsNull() {
				in.Skip()
				out.IsResolved = nil
			} else {
				if out.IsResolved == nil {
					out.IsResolved = new(bool)
				}
				*out.IsResolved = bool(in.Bool())
			}
		case "has_agent":
			if in.IsNull() {
				in.Skip()
				out.HasAgent = nil
			} else {
				if out.HasAgent == nil {
					out.HasAgent = new(bool)
				}
				*out.HasAgent = bool(in.Bool())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		case "is_unresolved":
			if in.IsNull() {
				in.Skip()
				out.IsUnresolved = nil
			} else {
				if out.IsUnresolved == nil {
					out.IsUnresolved = new(bool)
				}
				*out.IsUnresolved = bool(in.Bool())
			}
		case "is_violated":
			if in.IsNull() {
				in.Skip()
				out.IsViolated = nil
			} else {
				if out.IsViolated == nil {
					out.IsViolated = new(bool)
				}
				*out.IsViolated = bool(in.Bool())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation62(out *jwriter.Writer, in CountTicketRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Priority))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.TagId != nil {
		const prefix string = ",\"tag_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TagId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.IsResolved != nil {
		const prefix string = ",\"is_resolved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsResolved))
	}
	if in.HasAgent != nil {
		const prefix string = ",\"has_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasAgent))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	if in.IsUnresolved != nil {
		const prefix string = ",\"is_unresolved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsUnresolved))
	}
	if in.IsViolated != nil {
		const prefix string = ",\"is_violated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsViolated))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountTicketRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountTicketRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountTicketRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountTicketRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation62(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation63(in *jlexer.Lexer, out *CountByTagsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*CountByTag, 0, 8)
					} else {
						out.Data = []*CountByTag{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v133 *CountByTag
					if in.IsNull() {
						in.Skip()
						v133 = nil
					} else {
						if v133 == nil {
							v133 = new(CountByTag)
						}
						(*v133).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation63(out *jwriter.Writer, in CountByTagsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v134, v135 := range in.Data {
				if v134 > 0 {
					out.RawByte(',')
				}
				if v135 == nil {
					out.RawString("null")
				} else {
					(*v135).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByTagsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByTagsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByTagsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByTagsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation63(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation64(in *jlexer.Lexer, out *CountByTagsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "tag_ids":
			if in.IsNull() {
				in.Skip()
				out.TagIds = nil
			} else {
				in.Delim('[')
				if out.TagIds == nil {
					if !in.IsDelim(']') {
						out.TagIds = make([]string, 0, 4)
					} else {
						out.TagIds = []string{}
					}
				} else {
					out.TagIds = (out.TagIds)[:0]
				}
				for !in.IsDelim(']') {
					var v136 string
					v136 = string(in.String())
					out.TagIds = append(out.TagIds, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(int32)
				}
				*out.From = int32(in.Int32())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(int32)
				}
				*out.To = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		case "has_user":
			if in.IsNull() {
				in.Skip()
				out.HasUser = nil
			} else {
				if out.HasUser == nil {
					out.HasUser = new(bool)
				}
				*out.HasUser = bool(in.Bool())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation64(out *jwriter.Writer, in CountByTagsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if len(in.TagIds) != 0 {
		const prefix string = ",\"tag_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v137, v138 := range in.TagIds {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.String(string(v138))
			}
			out.RawByte(']')
		}
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.To))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	if in.HasUser != nil {
		const prefix string = ",\"has_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasUser))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByTagsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByTagsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByTagsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByTagsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation64(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation65(in *jlexer.Lexer, out *CountByTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_id":
			if in.IsNull() {
				in.Skip()
				out.TagId = nil
			} else {
				if out.TagId == nil {
					out.TagId = new(string)
				}
				*out.TagId = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int64, 0, 8)
					} else {
						out.Data = []int64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v139 int64
					v139 = int64(in.Int64())
					out.Data = append(out.Data, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation65(out *jwriter.Writer, in CountByTag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TagId != nil {
		const prefix string = ",\"tag_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TagId))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v140, v141 := range in.Data {
				if v140 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v141))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByTag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByTag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByTag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByTag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation65(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation66(in *jlexer.Lexer, out *CountByGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(int32)
				}
				*out.From = int32(in.Int32())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(int32)
				}
				*out.To = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		case "has_user":
			if in.IsNull() {
				in.Skip()
				out.HasUser = nil
			} else {
				if out.HasUser == nil {
					out.HasUser = new(bool)
				}
				*out.HasUser = bool(in.Bool())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation66(out *jwriter.Writer, in CountByGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.To))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	if in.HasUser != nil {
		const prefix string = ",\"has_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasUser))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation66(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation67(in *jlexer.Lexer, out *CountByGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int64, 0, 8)
					} else {
						out.Data = []int64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v142 int64
					v142 = int64(in.Int64())
					out.Data = append(out.Data, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation67(out *jwriter.Writer, in CountByGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.Data {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v144))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation67(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation68(in *jlexer.Lexer, out *CountByAgentsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*CountByAgent, 0, 8)
					} else {
						out.Data = []*CountByAgent{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v145 *CountByAgent
					if in.IsNull() {
						in.Skip()
						v145 = nil
					} else {
						if v145 == nil {
							v145 = new(CountByAgent)
						}
						(*v145).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v145)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation68(out *jwriter.Writer, in CountByAgentsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v146, v147 := range in.Data {
				if v146 > 0 {
					out.RawByte(',')
				}
				if v147 == nil {
					out.RawString("null")
				} else {
					(*v147).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByAgentsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByAgentsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByAgentsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByAgentsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation68(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation69(in *jlexer.Lexer, out *CountByAgentsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v148 string
					v148 = string(in.String())
					out.AgentIds = append(out.AgentIds, v148)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(int32)
				}
				*out.From = int32(in.Int32())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(int32)
				}
				*out.To = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		case "has_user":
			if in.IsNull() {
				in.Skip()
				out.HasUser = nil
			} else {
				if out.HasUser == nil {
					out.HasUser = new(bool)
				}
				*out.HasUser = bool(in.Bool())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation69(out *jwriter.Writer, in CountByAgentsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v149, v150 := range in.AgentIds {
				if v149 > 0 {
					out.RawByte(',')
				}
				out.String(string(v150))
			}
			out.RawByte(']')
		}
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.To))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	if in.HasUser != nil {
		const prefix string = ",\"has_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasUser))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByAgentsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByAgentsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByAgentsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByAgentsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation69(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation70(in *jlexer.Lexer, out *CountByAgentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(int32)
				}
				*out.From = int32(in.Int32())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(int32)
				}
				*out.To = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		case "has_user":
			if in.IsNull() {
				in.Skip()
				out.HasUser = nil
			} else {
				if out.HasUser == nil {
					out.HasUser = new(bool)
				}
				*out.HasUser = bool(in.Bool())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation70(out *jwriter.Writer, in CountByAgentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.To))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	if in.HasUser != nil {
		const prefix string = ",\"has_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HasUser))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByAgentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByAgentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByAgentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByAgentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation70(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation71(in *jlexer.Lexer, out *CountByAgent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int64, 0, 8)
					} else {
						out.Data = []int64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v151 int64
					v151 = int64(in.Int64())
					out.Data = append(out.Data, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation71(out *jwriter.Writer, in CountByAgent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v152, v153 := range in.Data {
				if v152 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v153))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountByAgent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountByAgent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountByAgent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountByAgent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation71(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation72(in *jlexer.Lexer, out *Conversations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "conversations":
			if in.IsNull() {
				in.Skip()
				out.Conversations = nil
			} else {
				in.Delim('[')
				if out.Conversations == nil {
					if !in.IsDelim(']') {
						out.Conversations = make([]*Conversation, 0, 8)
					} else {
						out.Conversations = []*Conversation{}
					}
				} else {
					out.Conversations = (out.Conversations)[:0]
				}
				for !in.IsDelim(']') {
					var v154 *Conversation
					if in.IsNull() {
						in.Skip()
						v154 = nil
					} else {
						if v154 == nil {
							v154 = new(Conversation)
						}
						(*v154).UnmarshalEasyJSON(in)
					}
					out.Conversations = append(out.Conversations, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "user_ids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.UserIds = append(out.UserIds, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation72(out *jwriter.Writer, in Conversations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Conversations) != 0 {
		const prefix string = ",\"conversations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v156, v157 := range in.Conversations {
				if v156 > 0 {
					out.RawByte(',')
				}
				if v157 == nil {
					out.RawString("null")
				} else {
					(*v157).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if len(in.UserIds) != 0 {
		const prefix string = ",\"user_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v158, v159 := range in.UserIds {
				if v158 > 0 {
					out.RawByte(',')
				}
				out.String(string(v159))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation72(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation73(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "closed":
			if in.IsNull() {
				in.Skip()
				out.Closed = nil
			} else {
				if out.Closed == nil {
					out.Closed = new(int64)
				}
				*out.Closed = int64(in.Int64())
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Member, 0, 8)
					} else {
						out.Members = []*Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v160 *Member
					if in.IsNull() {
						in.Skip()
						v160 = nil
					} else {
						if v160 == nil {
							v160 = new(Member)
						}
						(*v160).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]*Tag, 0, 8)
					} else {
						out.Tags = []*Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v161 *Tag
					if in.IsNull() {
						in.Skip()
						v161 = nil
					} else {
						if v161 == nil {
							v161 = new(Tag)
						}
						(*v161).UnmarshalEasyJSON(in)
					}
					out.Tags = append(out.Tags, v161)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ended":
			if in.IsNull() {
				in.Skip()
				out.Ended = nil
			} else {
				if out.Ended == nil {
					out.Ended = new(int64)
				}
				*out.Ended = int64(in.Int64())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "accepted":
			if in.IsNull() {
				in.Skip()
				out.Accepted = nil
			} else {
				if out.Accepted == nil {
					out.Accepted = new(int64)
				}
				*out.Accepted = int64(in.Int64())
			}
		case "channel_type":
			if in.IsNull() {
				in.Skip()
				out.ChannelType = nil
			} else {
				if out.ChannelType == nil {
					out.ChannelType = new(string)
				}
				*out.ChannelType = string(in.String())
			}
		case "integration":
			if in.IsNull() {
				in.Skip()
				out.Integration = nil
			} else {
				if out.Integration == nil {
					out.Integration = new(Integration)
				}
				(*out.Integration).UnmarshalEasyJSON(in)
			}
		case "actived":
			if in.IsNull() {
				in.Skip()
				out.Actived = nil
			} else {
				if out.Actived == nil {
					out.Actived = new(int64)
				}
				*out.Actived = int64(in.Int64())
			}
		case "last_message_id":
			if in.IsNull() {
				in.Skip()
				out.LastMessageId = nil
			} else {
				if out.LastMessageId == nil {
					out.LastMessageId = new(string)
				}
				*out.LastMessageId = string(in.String())
			}
		case "last_message":
			if in.IsNull() {
				in.Skip()
				out.LastMessage = nil
			} else {
				if out.LastMessage == nil {
					out.LastMessage = new(Message)
				}
				(*out.LastMessage).UnmarshalEasyJSON(in)
			}
		case "response_sec":
			if in.IsNull() {
				in.Skip()
				out.ResponseSec = nil
			} else {
				if out.ResponseSec == nil {
					out.ResponseSec = new(int64)
				}
				*out.ResponseSec = int64(in.Int64())
			}
		case "chain_id":
			if in.IsNull() {
				in.Skip()
				out.ChainId = nil
			} else {
				if out.ChainId == nil {
					out.ChainId = new(string)
				}
				*out.ChainId = string(in.String())
			}
		case "left_members":
			if in.IsNull() {
				in.Skip()
				out.LeftMembers = nil
			} else {
				in.Delim('[')
				if out.LeftMembers == nil {
					if !in.IsDelim(']') {
						out.LeftMembers = make([]*Member, 0, 8)
					} else {
						out.LeftMembers = []*Member{}
					}
				} else {
					out.LeftMembers = (out.LeftMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v162 *Member
					if in.IsNull() {
						in.Skip()
						v162 = nil
					} else {
						if v162 == nil {
							v162 = new(Member)
						}
						(*v162).UnmarshalEasyJSON(in)
					}
					out.LeftMembers = append(out.LeftMembers, v162)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ticket":
			if in.IsNull() {
				in.Skip()
				out.Ticket = nil
			} else {
				if out.Ticket == nil {
					out.Ticket = new(Ticket)
				}
				(*out.Ticket).UnmarshalEasyJSON(in)
			}
		case "ticket_id":
			if in.IsNull() {
				in.Skip()
				out.TicketId = nil
			} else {
				if out.TicketId == nil {
					out.TicketId = new(string)
				}
				*out.TicketId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation73(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Closed != nil {
		const prefix string = ",\"closed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Closed))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v163, v164 := range in.Members {
				if v163 > 0 {
					out.RawByte(',')
				}
				if v164 == nil {
					out.RawString("null")
				} else {
					(*v164).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v165, v166 := range in.Tags {
				if v165 > 0 {
					out.RawByte(',')
				}
				if v166 == nil {
					out.RawString("null")
				} else {
					(*v166).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Ended != nil {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Ended))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Accepted != nil {
		const prefix string = ",\"accepted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Accepted))
	}
	if in.ChannelType != nil {
		const prefix string = ",\"channel_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChannelType))
	}
	if in.Integration != nil {
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Integration).MarshalEasyJSON(out)
	}
	if in.Actived != nil {
		const prefix string = ",\"actived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Actived))
	}
	if in.LastMessageId != nil {
		const prefix string = ",\"last_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastMessageId))
	}
	if in.LastMessage != nil {
		const prefix string = ",\"last_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LastMessage).MarshalEasyJSON(out)
	}
	if in.ResponseSec != nil {
		const prefix string = ",\"response_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ResponseSec))
	}
	if in.ChainId != nil {
		const prefix string = ",\"chain_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChainId))
	}
	if len(in.LeftMembers) != 0 {
		const prefix string = ",\"left_members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v167, v168 := range in.LeftMembers {
				if v167 > 0 {
					out.RawByte(',')
				}
				if v168 == nil {
					out.RawString("null")
				} else {
					(*v168).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Ticket != nil {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ticket).MarshalEasyJSON(out)
	}
	if in.TicketId != nil {
		const prefix string = ",\"ticket_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TicketId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation73(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation74(in *jlexer.Lexer, out *ContentTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v169 string
					v169 = string(in.String())
					out.Labels = append(out.Labels, v169)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(string)
				}
				*out.Availability = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "sale_price":
			if in.IsNull() {
				in.Skip()
				out.SalePrice = nil
			} else {
				if out.SalePrice == nil {
					out.SalePrice = new(float32)
				}
				*out.SalePrice = float32(in.Float32())
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v170 string
					v170 = string(in.String())
					out.Categories = append(out.Categories, v170)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachment_urls":
			if in.IsNull() {
				in.Skip()
				out.AttachmentUrls = nil
			} else {
				in.Delim('[')
				if out.AttachmentUrls == nil {
					if !in.IsDelim(']') {
						out.AttachmentUrls = make([]string, 0, 4)
					} else {
						out.AttachmentUrls = []string{}
					}
				} else {
					out.AttachmentUrls = (out.AttachmentUrls)[:0]
				}
				for !in.IsDelim(']') {
					var v171 string
					v171 = string(in.String())
					out.AttachmentUrls = append(out.AttachmentUrls, v171)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "related_ids":
			if in.IsNull() {
				in.Skip()
				out.RelatedIds = nil
			} else {
				in.Delim('[')
				if out.RelatedIds == nil {
					if !in.IsDelim(']') {
						out.RelatedIds = make([]string, 0, 4)
					} else {
						out.RelatedIds = []string{}
					}
				} else {
					out.RelatedIds = (out.RelatedIds)[:0]
				}
				for !in.IsDelim(']') {
					var v172 string
					v172 = string(in.String())
					out.RelatedIds = append(out.RelatedIds, v172)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(Button)
				}
				(*out.DefaultAction).UnmarshalEasyJSON(in)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*Button, 0, 8)
					} else {
						out.Buttons = []*Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v173 *Button
					if in.IsNull() {
						in.Skip()
						v173 = nil
					} else {
						if v173 == nil {
							v173 = new(Button)
						}
						(*v173).UnmarshalEasyJSON(in)
					}
					out.Buttons = append(out.Buttons, v173)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation74(out *jwriter.Writer, in ContentTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v174, v175 := range in.Labels {
				if v174 > 0 {
					out.RawByte(',')
				}
				out.String(string(v175))
			}
			out.RawByte(']')
		}
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Availability))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Currency))
	}
	if in.SalePrice != nil {
		const prefix string = ",\"sale_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.SalePrice))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v176, v177 := range in.Categories {
				if v176 > 0 {
					out.RawByte(',')
				}
				out.String(string(v177))
			}
			out.RawByte(']')
		}
	}
	if len(in.AttachmentUrls) != 0 {
		const prefix string = ",\"attachment_urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v178, v179 := range in.AttachmentUrls {
				if v178 > 0 {
					out.RawByte(',')
				}
				out.String(string(v179))
			}
			out.RawByte(']')
		}
	}
	if len(in.RelatedIds) != 0 {
		const prefix string = ",\"related_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v180, v181 := range in.RelatedIds {
				if v180 > 0 {
					out.RawByte(',')
				}
				out.String(string(v181))
			}
			out.RawByte(']')
		}
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DefaultAction).MarshalEasyJSON(out)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v182, v183 := range in.Buttons {
				if v182 > 0 {
					out.RawByte(',')
				}
				if v183 == nil {
					out.RawString("null")
				} else {
					(*v183).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation74(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation75(in *jlexer.Lexer, out *Condition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(string)
				}
				*out.Join = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation75(out *jwriter.Writer, in Condition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Join))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Operator != nil {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Operator))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Condition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Condition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Condition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Condition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation75(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation76(in *jlexer.Lexer, out *Computed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seen":
			if in.IsNull() {
				in.Skip()
				out.Seen = nil
			} else {
				in.Delim('[')
				if out.Seen == nil {
					if !in.IsDelim(']') {
						out.Seen = make([]*Seen, 0, 8)
					} else {
						out.Seen = []*Seen{}
					}
				} else {
					out.Seen = (out.Seen)[:0]
				}
				for !in.IsDelim(']') {
					var v184 *Seen
					if in.IsNull() {
						in.Skip()
						v184 = nil
					} else {
						if v184 == nil {
							v184 = new(Seen)
						}
						(*v184).UnmarshalEasyJSON(in)
					}
					out.Seen = append(out.Seen, v184)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ack":
			if in.IsNull() {
				in.Skip()
				out.Ack = nil
			} else {
				in.Delim('[')
				if out.Ack == nil {
					if !in.IsDelim(']') {
						out.Ack = make([]*Ack, 0, 8)
					} else {
						out.Ack = []*Ack{}
					}
				} else {
					out.Ack = (out.Ack)[:0]
				}
				for !in.IsDelim(']') {
					var v185 *Ack
					if in.IsNull() {
						in.Skip()
						v185 = nil
					} else {
						if v185 == nil {
							v185 = new(Ack)
						}
						(*v185).UnmarshalEasyJSON(in)
					}
					out.Ack = append(out.Ack, v185)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "received":
			if in.IsNull() {
				in.Skip()
				out.Received = nil
			} else {
				in.Delim('[')
				if out.Received == nil {
					if !in.IsDelim(']') {
						out.Received = make([]*Received, 0, 8)
					} else {
						out.Received = []*Received{}
					}
				} else {
					out.Received = (out.Received)[:0]
				}
				for !in.IsDelim(']') {
					var v186 *Received
					if in.IsNull() {
						in.Skip()
						v186 = nil
					} else {
						if v186 == nil {
							v186 = new(Received)
						}
						(*v186).UnmarshalEasyJSON(in)
					}
					out.Received = append(out.Received, v186)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation76(out *jwriter.Writer, in Computed) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Seen) != 0 {
		const prefix string = ",\"seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v187, v188 := range in.Seen {
				if v187 > 0 {
					out.RawByte(',')
				}
				if v188 == nil {
					out.RawString("null")
				} else {
					(*v188).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Ack) != 0 {
		const prefix string = ",\"ack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v189, v190 := range in.Ack {
				if v189 > 0 {
					out.RawByte(',')
				}
				if v190 == nil {
					out.RawString("null")
				} else {
					(*v190).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Received) != 0 {
		const prefix string = ",\"received\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v191, v192 := range in.Received {
				if v191 > 0 {
					out.RawByte(',')
				}
				if v192 == nil {
					out.RawString("null")
				} else {
					(*v192).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Computed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Computed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Computed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Computed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation76(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation77(in *jlexer.Lexer, out *Chain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation77(out *jwriter.Writer, in Chain) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation77(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation78(in *jlexer.Lexer, out *Button) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "content_id":
			if in.IsNull() {
				in.Skip()
				out.ContentId = nil
			} else {
				if out.ContentId == nil {
					out.ContentId = new(string)
				}
				*out.ContentId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation78(out *jwriter.Writer, in Button) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.ContentId != nil {
		const prefix string = ",\"content_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PhoneNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Button) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Button) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Button) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Button) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation78(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation79(in *jlexer.Lexer, out *AvgResponseTimeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg_response_sec":
			if in.IsNull() {
				in.Skip()
				out.AvgResponseSec = nil
			} else {
				if out.AvgResponseSec == nil {
					out.AvgResponseSec = new(float64)
				}
				*out.AvgResponseSec = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation79(out *jwriter.Writer, in AvgResponseTimeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AvgResponseSec != nil {
		const prefix string = ",\"avg_response_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.AvgResponseSec))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvgResponseTimeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvgResponseTimeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvgResponseTimeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvgResponseTimeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation79(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation80(in *jlexer.Lexer, out *AvgResponseTimeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(int32)
				}
				*out.From = int32(in.Int32())
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(int32)
				}
				*out.To = int32(in.Int32())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation80(out *jwriter.Writer, in AvgResponseTimeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.From))
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.To))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvgResponseTimeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvgResponseTimeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvgResponseTimeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvgResponseTimeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation80(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation81(in *jlexer.Lexer, out *AvgResolveTimeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg_resolve_sec":
			if in.IsNull() {
				in.Skip()
				out.AvgResolveSec = nil
			} else {
				if out.AvgResolveSec == nil {
					out.AvgResolveSec = new(float64)
				}
				*out.AvgResolveSec = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation81(out *jwriter.Writer, in AvgResolveTimeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AvgResolveSec != nil {
		const prefix string = ",\"avg_resolve_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.AvgResolveSec))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvgResolveTimeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvgResolveTimeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvgResolveTimeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvgResolveTimeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation81(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation82(in *jlexer.Lexer, out *AvgResolveTimeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "tag_id":
			if in.IsNull() {
				in.Skip()
				out.TagId = nil
			} else {
				if out.TagId == nil {
					out.TagId = new(string)
				}
				*out.TagId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "from_hour":
			if in.IsNull() {
				in.Skip()
				out.FromHour = nil
			} else {
				if out.FromHour == nil {
					out.FromHour = new(int32)
				}
				*out.FromHour = int32(in.Int32())
			}
		case "to_hour":
			if in.IsNull() {
				in.Skip()
				out.ToHour = nil
			} else {
				if out.ToHour == nil {
					out.ToHour = new(int32)
				}
				*out.ToHour = int32(in.Int32())
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(string)
				}
				*out.Range = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation82(out *jwriter.Writer, in AvgResolveTimeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Priority))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.TagId != nil {
		const prefix string = ",\"tag_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TagId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.FromHour != nil {
		const prefix string = ",\"from_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.FromHour))
	}
	if in.ToHour != nil {
		const prefix string = ",\"to_hour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ToHour))
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Range))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvgResolveTimeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvgResolveTimeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvgResolveTimeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvgResolveTimeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation82(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation83(in *jlexer.Lexer, out *AvailabilityCheckResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(bool)
				}
				*out.Availability = bool(in.Bool())
			}
		case "reason":
			if in.IsNull() {
				in.Skip()
				out.Reason = nil
			} else {
				if out.Reason == nil {
					out.Reason = new(string)
				}
				*out.Reason = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation83(out *jwriter.Writer, in AvailabilityCheckResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Availability))
	}
	if in.Reason != nil {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Reason))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvailabilityCheckResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvailabilityCheckResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvailabilityCheckResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvailabilityCheckResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation83(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation84(in *jlexer.Lexer, out *AvailabilityCheckRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				easyjsonB8de26a5DecodeGithubComSubizHeaderUser(in, &*out.User)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation84(out *jwriter.Writer, in AvailabilityCheckRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB8de26a5EncodeGithubComSubizHeaderUser(out, *in.User)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvailabilityCheckRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvailabilityCheckRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvailabilityCheckRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvailabilityCheckRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation84(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation85(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "mimetype":
			if in.IsNull() {
				in.Skip()
				out.Mimetype = nil
			} else {
				if out.Mimetype == nil {
					out.Mimetype = new(string)
				}
				*out.Mimetype = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailUrl = nil
			} else {
				if out.ThumbnailUrl == nil {
					out.ThumbnailUrl = new(string)
				}
				*out.ThumbnailUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "length":
			if in.IsNull() {
				in.Skip()
				out.Length = nil
			} else {
				if out.Length == nil {
					out.Length = new(int32)
				}
				*out.Length = int32(in.Int32())
			}
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				if out.Size == nil {
					out.Size = new(int32)
				}
				*out.Size = int32(in.Int32())
			}
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]*GenericElementTemplate, 0, 8)
					} else {
						out.Elements = []*GenericElementTemplate{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v193 *GenericElementTemplate
					if in.IsNull() {
						in.Skip()
						v193 = nil
					} else {
						if v193 == nil {
							v193 = new(GenericElementTemplate)
						}
						(*v193).UnmarshalEasyJSON(in)
					}
					out.Elements = append(out.Elements, v193)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(string)
				}
				*out.Color = string(in.String())
			}
		case "pretext":
			if in.IsNull() {
				in.Skip()
				out.Pretext = nil
			} else {
				if out.Pretext == nil {
					out.Pretext = new(string)
				}
				*out.Pretext = string(in.String())
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*Button, 0, 8)
					} else {
						out.Buttons = []*Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v194 *Button
					if in.IsNull() {
						in.Skip()
						v194 = nil
					} else {
						if v194 == nil {
							v194 = new(Button)
						}
						(*v194).UnmarshalEasyJSON(in)
					}
					out.Buttons = append(out.Buttons, v194)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ask_info":
			if in.IsNull() {
				in.Skip()
				out.AskInfo = nil
			} else {
				if out.AskInfo == nil {
					out.AskInfo = new(AskInfomation)
				}
				(*out.AskInfo).UnmarshalEasyJSON(in)
			}
		case "ask_info_answer":
			if in.IsNull() {
				in.Skip()
				out.AskInfoAnswer = nil
			} else {
				if out.AskInfoAnswer == nil {
					out.AskInfoAnswer = new(AskInfomationAnswer)
				}
				(*out.AskInfoAnswer).UnmarshalEasyJSON(in)
			}
		case "form":
			if in.IsNull() {
				in.Skip()
				out.Form = nil
			} else {
				if out.Form == nil {
					out.Form = new(Form)
				}
				(*out.Form).UnmarshalEasyJSON(in)
			}
		case "form_submit":
			if in.IsNull() {
				in.Skip()
				out.FormSubmit = nil
			} else {
				if out.FormSubmit == nil {
					out.FormSubmit = new(FormSubmit)
				}
				(*out.FormSubmit).UnmarshalEasyJSON(in)
			}
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				in.Delim('[')
				if out.Contents == nil {
					if !in.IsDelim(']') {
						out.Contents = make([]*ContentTemplate, 0, 8)
					} else {
						out.Contents = []*ContentTemplate{}
					}
				} else {
					out.Contents = (out.Contents)[:0]
				}
				for !in.IsDelim(']') {
					var v195 *ContentTemplate
					if in.IsNull() {
						in.Skip()
						v195 = nil
					} else {
						if v195 == nil {
							v195 = new(ContentTemplate)
						}
						(*v195).UnmarshalEasyJSON(in)
					}
					out.Contents = append(out.Contents, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quick_replies":
			if in.IsNull() {
				in.Skip()
				out.QuickReplies = nil
			} else {
				in.Delim('[')
				if out.QuickReplies == nil {
					if !in.IsDelim(']') {
						out.QuickReplies = make([]*QuickReply, 0, 8)
					} else {
						out.QuickReplies = []*QuickReply{}
					}
				} else {
					out.QuickReplies = (out.QuickReplies)[:0]
				}
				for !in.IsDelim(']') {
					var v196 *QuickReply
					if in.IsNull() {
						in.Skip()
						v196 = nil
					} else {
						if v196 == nil {
							v196 = new(QuickReply)
						}
						(*v196).UnmarshalEasyJSON(in)
					}
					out.QuickReplies = append(out.QuickReplies, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation85(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Mimetype != nil {
		const prefix string = ",\"mimetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mimetype))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.ThumbnailUrl != nil {
		const prefix string = ",\"thumbnail_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ThumbnailUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Length != nil {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Length))
	}
	if in.Size != nil {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Size))
	}
	if len(in.Elements) != 0 {
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v197, v198 := range in.Elements {
				if v197 > 0 {
					out.RawByte(',')
				}
				if v198 == nil {
					out.RawString("null")
				} else {
					(*v198).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Color != nil {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Color))
	}
	if in.Pretext != nil {
		const prefix string = ",\"pretext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Pretext))
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v199, v200 := range in.Buttons {
				if v199 > 0 {
					out.RawByte(',')
				}
				if v200 == nil {
					out.RawString("null")
				} else {
					(*v200).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AskInfo != nil {
		const prefix string = ",\"ask_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AskInfo).MarshalEasyJSON(out)
	}
	if in.AskInfoAnswer != nil {
		const prefix string = ",\"ask_info_answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AskInfoAnswer).MarshalEasyJSON(out)
	}
	if in.Form != nil {
		const prefix string = ",\"form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Form).MarshalEasyJSON(out)
	}
	if in.FormSubmit != nil {
		const prefix string = ",\"form_submit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FormSubmit).MarshalEasyJSON(out)
	}
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v201, v202 := range in.Contents {
				if v201 > 0 {
					out.RawByte(',')
				}
				if v202 == nil {
					out.RawString("null")
				} else {
					(*v202).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.QuickReplies) != 0 {
		const prefix string = ",\"quick_replies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v203, v204 := range in.QuickReplies {
				if v203 > 0 {
					out.RawByte(',')
				}
				if v204 == nil {
					out.RawString("null")
				} else {
					(*v204).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation85(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation86(in *jlexer.Lexer, out *AskInfomationAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation86(out *jwriter.Writer, in AskInfomationAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AskInfomationAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AskInfomationAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AskInfomationAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AskInfomationAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation86(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation87(in *jlexer.Lexer, out *AskInfomation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			if in.IsNull() {
				in.Skip()
				out.Question = nil
			} else {
				if out.Question == nil {
					out.Question = new(string)
				}
				*out.Question = string(in.String())
			}
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation87(out *jwriter.Writer, in AskInfomation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Question != nil {
		const prefix string = ",\"question\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Question))
	}
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AskInfomation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AskInfomation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AskInfomation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AskInfomation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation87(l, v)
}
func easyjsonB8de26a5DecodeGithubComSubizHeaderConversation88(in *jlexer.Lexer, out *Ack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(string)
				}
				*out.Error = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB8de26a5EncodeGithubComSubizHeaderConversation88(out *jwriter.Writer, in Ack) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Error))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB8de26a5EncodeGithubComSubizHeaderConversation88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB8de26a5DecodeGithubComSubizHeaderConversation88(l, v)
}
