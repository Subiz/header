// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: conversation.proto

package conversation

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State int32

const (
	State_none              State = 0  // convo
	State_unassigned        State = 2  // convo
	State_active            State = 6  // convo
	State_ended             State = 8  // convo
	State_pending           State = 9  // ticket and convo
	State_all               State = 10 // ticket
	State_open              State = 11 // ticket
	State_resolved          State = 13 // ticket
	State_closed            State = 14 // ticket
	State_waiting_for_reply State = 15 // waiting for reply
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "none",
		2:  "unassigned",
		6:  "active",
		8:  "ended",
		9:  "pending",
		10: "all",
		11: "open",
		13: "resolved",
		14: "closed",
		15: "waiting_for_reply",
	}
	State_value = map[string]int32{
		"none":              0,
		"unassigned":        2,
		"active":            6,
		"ended":             8,
		"pending":           9,
		"all":               10,
		"open":              11,
		"resolved":          13,
		"closed":            14,
		"waiting_for_reply": 15,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = State(num)
	return nil
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

type TicketListOrderBy int32

const (
	TicketListOrderBy_created TicketListOrderBy = 1
	TicketListOrderBy_duedate TicketListOrderBy = 2
)

// Enum value maps for TicketListOrderBy.
var (
	TicketListOrderBy_name = map[int32]string{
		1: "created",
		2: "duedate",
	}
	TicketListOrderBy_value = map[string]int32{
		"created": 1,
		"duedate": 2,
	}
)

func (x TicketListOrderBy) Enum() *TicketListOrderBy {
	p := new(TicketListOrderBy)
	*p = x
	return p
}

func (x TicketListOrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketListOrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[1].Descriptor()
}

func (TicketListOrderBy) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[1]
}

func (x TicketListOrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TicketListOrderBy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TicketListOrderBy(num)
	return nil
}

// Deprecated: Use TicketListOrderBy.Descriptor instead.
func (TicketListOrderBy) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

type TicketPriority int32

const (
	TicketPriority_low    TicketPriority = 0
	TicketPriority_medium TicketPriority = 1
	TicketPriority_high   TicketPriority = 2
	TicketPriority_urgent TicketPriority = 3
)

// Enum value maps for TicketPriority.
var (
	TicketPriority_name = map[int32]string{
		0: "low",
		1: "medium",
		2: "high",
		3: "urgent",
	}
	TicketPriority_value = map[string]int32{
		"low":    0,
		"medium": 1,
		"high":   2,
		"urgent": 3,
	}
)

func (x TicketPriority) Enum() *TicketPriority {
	p := new(TicketPriority)
	*p = x
	return p
}

func (x TicketPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[2].Descriptor()
}

func (TicketPriority) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[2]
}

func (x TicketPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TicketPriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TicketPriority(num)
	return nil
}

// Deprecated: Use TicketPriority.Descriptor instead.
func (TicketPriority) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

// Report metrics
type Metric int32

const (
	Metric_created_conversations                     Metric = 0 // all conversation
	Metric_created_conversations_by_agent            Metric = 2
	Metric_created_conversations_by_group            Metric = 3
	Metric_created_conversations_by_tag              Metric = 4
	Metric_agent_replied_conversations               Metric = 6
	Metric_agent_replied_conversations_by_agents     Metric = 7
	Metric_agent_replied_conversations_by_bots       Metric = 8
	Metric_agent_replied_conversations_by_agent      Metric = 9
	Metric_agent_replied_conversations_by_group      Metric = 10
	Metric_agent_replied_conversations_by_tag        Metric = 11
	Metric_user_replied_conversations                Metric = 12
	Metric_user_replied_conversations_by_agent       Metric = 13
	Metric_user_replied_conversations_by_group       Metric = 14
	Metric_user_replied_conversations_by_tag         Metric = 15
	Metric_agent_repling_conversations               Metric = 16
	Metric_agent_repling_conversations_by_agents     Metric = 17
	Metric_agent_repling_conversations_by_bots       Metric = 18
	Metric_agent_repling_conversations_by_agent      Metric = 19
	Metric_agent_repling_conversations_by_group      Metric = 20
	Metric_no_agent_replied_in_1min_conversations    Metric = 32
	Metric_agent_non_replied_in_1min_conversations   Metric = 34
	Metric_no_agent_replied_in_5min_conversations    Metric = 35
	Metric_agent_non_replied_in_5min_conversations   Metric = 37
	Metric_no_agent_replied_in_15min_conversations   Metric = 38
	Metric_agent_non_replied_in_15min_conversations  Metric = 40
	Metric_no_agent_replied_in_24hour_conversations  Metric = 41
	Metric_agent_non_replied_in_24hour_conversations Metric = 43
)

// Enum value maps for Metric.
var (
	Metric_name = map[int32]string{
		0:  "created_conversations",
		2:  "created_conversations_by_agent",
		3:  "created_conversations_by_group",
		4:  "created_conversations_by_tag",
		6:  "agent_replied_conversations",
		7:  "agent_replied_conversations_by_agents",
		8:  "agent_replied_conversations_by_bots",
		9:  "agent_replied_conversations_by_agent",
		10: "agent_replied_conversations_by_group",
		11: "agent_replied_conversations_by_tag",
		12: "user_replied_conversations",
		13: "user_replied_conversations_by_agent",
		14: "user_replied_conversations_by_group",
		15: "user_replied_conversations_by_tag",
		16: "agent_repling_conversations",
		17: "agent_repling_conversations_by_agents",
		18: "agent_repling_conversations_by_bots",
		19: "agent_repling_conversations_by_agent",
		20: "agent_repling_conversations_by_group",
		32: "no_agent_replied_in_1min_conversations",
		34: "agent_non_replied_in_1min_conversations",
		35: "no_agent_replied_in_5min_conversations",
		37: "agent_non_replied_in_5min_conversations",
		38: "no_agent_replied_in_15min_conversations",
		40: "agent_non_replied_in_15min_conversations",
		41: "no_agent_replied_in_24hour_conversations",
		43: "agent_non_replied_in_24hour_conversations",
	}
	Metric_value = map[string]int32{
		"created_conversations":                     0,
		"created_conversations_by_agent":            2,
		"created_conversations_by_group":            3,
		"created_conversations_by_tag":              4,
		"agent_replied_conversations":               6,
		"agent_replied_conversations_by_agents":     7,
		"agent_replied_conversations_by_bots":       8,
		"agent_replied_conversations_by_agent":      9,
		"agent_replied_conversations_by_group":      10,
		"agent_replied_conversations_by_tag":        11,
		"user_replied_conversations":                12,
		"user_replied_conversations_by_agent":       13,
		"user_replied_conversations_by_group":       14,
		"user_replied_conversations_by_tag":         15,
		"agent_repling_conversations":               16,
		"agent_repling_conversations_by_agents":     17,
		"agent_repling_conversations_by_bots":       18,
		"agent_repling_conversations_by_agent":      19,
		"agent_repling_conversations_by_group":      20,
		"no_agent_replied_in_1min_conversations":    32,
		"agent_non_replied_in_1min_conversations":   34,
		"no_agent_replied_in_5min_conversations":    35,
		"agent_non_replied_in_5min_conversations":   37,
		"no_agent_replied_in_15min_conversations":   38,
		"agent_non_replied_in_15min_conversations":  40,
		"no_agent_replied_in_24hour_conversations":  41,
		"agent_non_replied_in_24hour_conversations": 43,
	}
)

func (x Metric) Enum() *Metric {
	p := new(Metric)
	*p = x
	return p
}

func (x Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[3].Descriptor()
}

func (Metric) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[3]
}

func (x Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Metric) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Metric(num)
	return nil
}

// Deprecated: Use Metric.Descriptor instead.
func (Metric) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

type CountByTagsRequest_Range int32

const (
	CountByTagsRequest_hour CountByTagsRequest_Range = 0
	CountByTagsRequest_day  CountByTagsRequest_Range = 1
)

// Enum value maps for CountByTagsRequest_Range.
var (
	CountByTagsRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountByTagsRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountByTagsRequest_Range) Enum() *CountByTagsRequest_Range {
	p := new(CountByTagsRequest_Range)
	*p = x
	return p
}

func (x CountByTagsRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountByTagsRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[4].Descriptor()
}

func (CountByTagsRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[4]
}

func (x CountByTagsRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountByTagsRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountByTagsRequest_Range(num)
	return nil
}

// Deprecated: Use CountByTagsRequest_Range.Descriptor instead.
func (CountByTagsRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5, 0}
}

type ServiceLevelAgreementTarget_OperationalHours int32

const (
	ServiceLevelAgreementTarget_BUSINESS_HOURS ServiceLevelAgreementTarget_OperationalHours = 0
)

// Enum value maps for ServiceLevelAgreementTarget_OperationalHours.
var (
	ServiceLevelAgreementTarget_OperationalHours_name = map[int32]string{
		0: "BUSINESS_HOURS",
	}
	ServiceLevelAgreementTarget_OperationalHours_value = map[string]int32{
		"BUSINESS_HOURS": 0,
	}
)

func (x ServiceLevelAgreementTarget_OperationalHours) Enum() *ServiceLevelAgreementTarget_OperationalHours {
	p := new(ServiceLevelAgreementTarget_OperationalHours)
	*p = x
	return p
}

func (x ServiceLevelAgreementTarget_OperationalHours) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceLevelAgreementTarget_OperationalHours) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[5].Descriptor()
}

func (ServiceLevelAgreementTarget_OperationalHours) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[5]
}

func (x ServiceLevelAgreementTarget_OperationalHours) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceLevelAgreementTarget_OperationalHours) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceLevelAgreementTarget_OperationalHours(num)
	return nil
}

// Deprecated: Use ServiceLevelAgreementTarget_OperationalHours.Descriptor instead.
func (ServiceLevelAgreementTarget_OperationalHours) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17, 0}
}

type ServiceLevelAgreement_AssignStrategy int32

const (
	ServiceLevelAgreement_ALL_AGENTS  ServiceLevelAgreement_AssignStrategy = 0
	ServiceLevelAgreement_AGENT_GROUP ServiceLevelAgreement_AssignStrategy = 1
	ServiceLevelAgreement_AGENT       ServiceLevelAgreement_AssignStrategy = 2
)

// Enum value maps for ServiceLevelAgreement_AssignStrategy.
var (
	ServiceLevelAgreement_AssignStrategy_name = map[int32]string{
		0: "ALL_AGENTS",
		1: "AGENT_GROUP",
		2: "AGENT",
	}
	ServiceLevelAgreement_AssignStrategy_value = map[string]int32{
		"ALL_AGENTS":  0,
		"AGENT_GROUP": 1,
		"AGENT":       2,
	}
)

func (x ServiceLevelAgreement_AssignStrategy) Enum() *ServiceLevelAgreement_AssignStrategy {
	p := new(ServiceLevelAgreement_AssignStrategy)
	*p = x
	return p
}

func (x ServiceLevelAgreement_AssignStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceLevelAgreement_AssignStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[6].Descriptor()
}

func (ServiceLevelAgreement_AssignStrategy) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[6]
}

func (x ServiceLevelAgreement_AssignStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceLevelAgreement_AssignStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceLevelAgreement_AssignStrategy(num)
	return nil
}

// Deprecated: Use ServiceLevelAgreement_AssignStrategy.Descriptor instead.
func (ServiceLevelAgreement_AssignStrategy) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{18, 0}
}

type CountTicketRequest_Range int32

const (
	CountTicketRequest_hour CountTicketRequest_Range = 0
	CountTicketRequest_day  CountTicketRequest_Range = 1
)

// Enum value maps for CountTicketRequest_Range.
var (
	CountTicketRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountTicketRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountTicketRequest_Range) Enum() *CountTicketRequest_Range {
	p := new(CountTicketRequest_Range)
	*p = x
	return p
}

func (x CountTicketRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountTicketRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[7].Descriptor()
}

func (CountTicketRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[7]
}

func (x CountTicketRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountTicketRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountTicketRequest_Range(num)
	return nil
}

// Deprecated: Use CountTicketRequest_Range.Descriptor instead.
func (CountTicketRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{24, 0}
}

type AvgResolveTimeRequest_Range int32

const (
	AvgResolveTimeRequest_hour AvgResolveTimeRequest_Range = 0
	AvgResolveTimeRequest_day  AvgResolveTimeRequest_Range = 1
)

// Enum value maps for AvgResolveTimeRequest_Range.
var (
	AvgResolveTimeRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	AvgResolveTimeRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x AvgResolveTimeRequest_Range) Enum() *AvgResolveTimeRequest_Range {
	p := new(AvgResolveTimeRequest_Range)
	*p = x
	return p
}

func (x AvgResolveTimeRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvgResolveTimeRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[8].Descriptor()
}

func (AvgResolveTimeRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[8]
}

func (x AvgResolveTimeRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AvgResolveTimeRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AvgResolveTimeRequest_Range(num)
	return nil
}

// Deprecated: Use AvgResolveTimeRequest_Range.Descriptor instead.
func (AvgResolveTimeRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{26, 0}
}

type AvailibilityReportRequest_Range int32

const (
	AvailibilityReportRequest_hour  AvailibilityReportRequest_Range = 0
	AvailibilityReportRequest_day   AvailibilityReportRequest_Range = 1
	AvailibilityReportRequest_month AvailibilityReportRequest_Range = 2
)

// Enum value maps for AvailibilityReportRequest_Range.
var (
	AvailibilityReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
		2: "month",
	}
	AvailibilityReportRequest_Range_value = map[string]int32{
		"hour":  0,
		"day":   1,
		"month": 2,
	}
)

func (x AvailibilityReportRequest_Range) Enum() *AvailibilityReportRequest_Range {
	p := new(AvailibilityReportRequest_Range)
	*p = x
	return p
}

func (x AvailibilityReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailibilityReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[9].Descriptor()
}

func (AvailibilityReportRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[9]
}

func (x AvailibilityReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AvailibilityReportRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AvailibilityReportRequest_Range(num)
	return nil
}

// Deprecated: Use AvailibilityReportRequest_Range.Descriptor instead.
func (AvailibilityReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{28, 0}
}

type CountReportRequest_Range int32

const (
	CountReportRequest_hour CountReportRequest_Range = 0
	CountReportRequest_day  CountReportRequest_Range = 1
)

// Enum value maps for CountReportRequest_Range.
var (
	CountReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountReportRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountReportRequest_Range) Enum() *CountReportRequest_Range {
	p := new(CountReportRequest_Range)
	*p = x
	return p
}

func (x CountReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[10].Descriptor()
}

func (CountReportRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[10]
}

func (x CountReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountReportRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountReportRequest_Range(num)
	return nil
}

// Deprecated: Use CountReportRequest_Range.Descriptor instead.
func (CountReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{29, 0}
}

type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Keyword   *string         `protobuf:"bytes,4,opt,name=keyword" json:"keyword,omitempty"`
	Limit     *int32          `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	BeforeId  *string         `protobuf:"bytes,6,opt,name=before_id,json=beforeId" json:"before_id,omitempty"`
	AfterId   *string         `protobuf:"bytes,7,opt,name=after_id,json=afterId" json:"after_id,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *Search) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Search) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Search) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *Search) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *Search) GetBeforeId() string {
	if x != nil && x.BeforeId != nil {
		return *x.BeforeId
	}
	return ""
}

func (x *Search) GetAfterId() string {
	if x != nil && x.AfterId != nil {
		return *x.AfterId
	}
	return ""
}

type ListConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// optional string state = 4; // empty or unassigned
	MemberId *string `protobuf:"bytes,8,opt,name=member_id,json=memberId" json:"member_id,omitempty"` // ignore
	// optional string group_by = 9;
	IntegrationId *string  `protobuf:"bytes,10,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	UserId        *string  `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Limit         *int32   `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Anchor        *string  `protobuf:"bytes,6,opt,name=anchor" json:"anchor,omitempty"`
	AgentId       *string  `protobuf:"bytes,12,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"` // list conversations of agent
	UserIds       []string `protobuf:"bytes,13,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"` // for live, only return id and state
	State         *string  `protobuf:"bytes,14,opt,name=state" json:"state,omitempty"`
}

func (x *ListConversationsRequest) Reset() {
	*x = ListConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRequest) ProtoMessage() {}

func (x *ListConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *ListConversationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListConversationsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListConversationsRequest) GetMemberId() string {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return ""
}

func (x *ListConversationsRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListConversationsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListConversationsRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ListConversationsRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListConversationsRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	StartId        *string         `protobuf:"bytes,4,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit          *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *ListEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListEventsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListEventsRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ListEventsRequest) GetStartId() string {
	if x != nil && x.StartId != nil {
		return *x.StartId
	}
	return ""
}

func (x *ListEventsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListConversationsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChannelId *string `protobuf:"bytes,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"` // if null -> all channel
	UserId    *string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`          // must be visitor id
	StartId   *string `protobuf:"bytes,4,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit     *int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListConversationsByUserRequest) Reset() {
	*x = ListConversationsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsByUserRequest) ProtoMessage() {}

func (x *ListConversationsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsByUserRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsByUserRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ListConversationsByUserRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetStartId() string {
	if x != nil && x.StartId != nil {
		return *x.StartId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type EsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId      *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string  `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	MemberIds      []string `protobuf:"bytes,5,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	Text           *string  `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Attachments    []string `protobuf:"bytes,7,rep,name=attachments" json:"attachments,omitempty"`
	Fields         []string `protobuf:"bytes,8,rep,name=fields" json:"fields,omitempty"`
}

func (x *EsMessage) Reset() {
	*x = EsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsMessage) ProtoMessage() {}

func (x *EsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsMessage.ProtoReflect.Descriptor instead.
func (*EsMessage) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *EsMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EsMessage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *EsMessage) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *EsMessage) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *EsMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EsMessage) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EsMessage) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type CountByTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string  `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	TagIds        []string `protobuf:"bytes,4,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	From          *int32   `protobuf:"varint,5,opt,name=from" json:"from,omitempty"` // deprecated
	To            *int32   `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`     // deprecated
	Range         *string  `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	HasUser       *bool    `protobuf:"varint,9,opt,name=has_user,json=hasUser" json:"has_user,omitempty"`
	FromHour      *int32   `protobuf:"varint,10,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32   `protobuf:"varint,11,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
}

func (x *CountByTagsRequest) Reset() {
	*x = CountByTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTagsRequest) ProtoMessage() {}

func (x *CountByTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTagsRequest.ProtoReflect.Descriptor instead.
func (*CountByTagsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *CountByTagsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountByTagsRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountByTagsRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *CountByTagsRequest) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *CountByTagsRequest) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *CountByTagsRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountByTagsRequest) GetHasUser() bool {
	if x != nil && x.HasUser != nil {
		return *x.HasUser
	}
	return false
}

func (x *CountByTagsRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *CountByTagsRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

type CountByTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId *string `protobuf:"bytes,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	Data  []int64 `protobuf:"varint,3,rep,name=data" json:"data,omitempty"`
}

func (x *CountByTag) Reset() {
	*x = CountByTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTag) ProtoMessage() {}

func (x *CountByTag) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTag.ProtoReflect.Descriptor instead.
func (*CountByTag) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *CountByTag) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountByTag) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type CountByTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CountByTag `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (x *CountByTagsResponse) Reset() {
	*x = CountByTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTagsResponse) ProtoMessage() {}

func (x *CountByTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTagsResponse.ProtoReflect.Descriptor instead.
func (*CountByTagsResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *CountByTagsResponse) GetData() []*CountByTag {
	if x != nil {
		return x.Data
	}
	return nil
}

type AvgResponseTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	From          *int32  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"` // deprecated
	To            *int32  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`     // deprecated
	FromHour      *int32  `protobuf:"varint,7,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,8,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
}

func (x *AvgResponseTimeRequest) Reset() {
	*x = AvgResponseTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResponseTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResponseTimeRequest) ProtoMessage() {}

func (x *AvgResponseTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResponseTimeRequest.ProtoReflect.Descriptor instead.
func (*AvgResponseTimeRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *AvgResponseTimeRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvgResponseTimeRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *AvgResponseTimeRequest) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

type AvgResponseTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseSec *float64 `protobuf:"fixed64,2,opt,name=avg_response_sec,json=avgResponseSec" json:"avg_response_sec,omitempty"`
}

func (x *AvgResponseTimeResponse) Reset() {
	*x = AvgResponseTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResponseTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResponseTimeResponse) ProtoMessage() {}

func (x *AvgResponseTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResponseTimeResponse.ProtoReflect.Descriptor instead.
func (*AvgResponseTimeResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *AvgResponseTimeResponse) GetAvgResponseSec() float64 {
	if x != nil && x.AvgResponseSec != nil {
		return *x.AvgResponseSec
	}
	return 0
}

type TotalConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConversation *int64 `protobuf:"varint,2,opt,name=total_conversation,json=totalConversation" json:"total_conversation,omitempty"`
}

func (x *TotalConversationResponse) Reset() {
	*x = TotalConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalConversationResponse) ProtoMessage() {}

func (x *TotalConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalConversationResponse.ProtoReflect.Descriptor instead.
func (*TotalConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *TotalConversationResponse) GetTotalConversation() int64 {
	if x != nil && x.TotalConversation != nil {
		return *x.TotalConversation
	}
	return 0
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id             *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ConversationId *string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *Chain) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Chain) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Chain) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context        `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string                `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string                `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string                `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	State          *string                `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority       *string                `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	Duedate        *int64                 `protobuf:"varint,7,opt,name=duedate" json:"duedate,omitempty"`
	Subject        *string                `protobuf:"bytes,8,opt,name=subject" json:"subject,omitempty"`
	Created        *int64                 `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Attributes     []*TicketAttributeData `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty"` // remove
	Updated        *int64                 `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	UserIds        []string               `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	AgentIds       []string               `protobuf:"bytes,13,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	IsAssigned     *bool                  `protobuf:"varint,14,opt,name=is_assigned,json=isAssigned" json:"is_assigned,omitempty"`
	UpdatedBy      *string                `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	CreatedBy      *string                `protobuf:"bytes,16,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Note           *string                `protobuf:"bytes,19,opt,name=note" json:"note,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *Ticket) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Ticket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Ticket) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *Ticket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Ticket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Ticket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *Ticket) GetDuedate() int64 {
	if x != nil && x.Duedate != nil {
		return *x.Duedate
	}
	return 0
}

func (x *Ticket) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Ticket) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Ticket) GetAttributes() []*TicketAttributeData {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Ticket) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *Ticket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *Ticket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *Ticket) GetIsAssigned() bool {
	if x != nil && x.IsAssigned != nil {
		return *x.IsAssigned
	}
	return false
}

func (x *Ticket) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *Ticket) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Ticket) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type TicketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	State     *string          `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"` // "", "open", "resolved"
	AgentId   *string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	OrderBy   *string          `protobuf:"bytes,5,opt,name=order_by,json=orderBy" json:"order_by,omitempty"` // created, duedate
	Anchor    *string          `protobuf:"bytes,6,opt,name=anchor" json:"anchor,omitempty"`
	Limit     *int32           `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	TagIds    []string         `protobuf:"bytes,8,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	Created   *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	Priority  *string          `protobuf:"bytes,10,opt,name=priority" json:"priority,omitempty"`
}

func (x *TicketListRequest) Reset() {
	*x = TicketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListRequest) ProtoMessage() {}

func (x *TicketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListRequest.ProtoReflect.Descriptor instead.
func (*TicketListRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *TicketListRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TicketListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TicketListRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TicketListRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *TicketListRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *TicketListRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *TicketListRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *TicketListRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *TicketListRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TicketListRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

type Tickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tickets   []*Ticket       `protobuf:"bytes,3,rep,name=tickets" json:"tickets,omitempty"`
	Anchor    *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *Tickets) Reset() {
	*x = Tickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickets) ProtoMessage() {}

func (x *Tickets) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickets.ProtoReflect.Descriptor instead.
func (*Tickets) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *Tickets) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tickets) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Tickets) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Tickets) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type ESTickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tickets   []*ESTicket     `protobuf:"bytes,3,rep,name=tickets" json:"tickets,omitempty"`
	Anchor    *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *ESTickets) Reset() {
	*x = ESTickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESTickets) ProtoMessage() {}

func (x *ESTickets) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESTickets.ProtoReflect.Descriptor instead.
func (*ESTickets) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *ESTickets) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ESTickets) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESTickets) GetTickets() []*ESTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *ESTickets) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type TicketAttributeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TicketId   *string         `protobuf:"bytes,3,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Key        *string         `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	State      *string         `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Created    *int64          `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Modified   *int64          `protobuf:"varint,8,opt,name=modified" json:"modified,omitempty"`
	Text       *string         `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	Number     *float64        `protobuf:"fixed64,11,opt,name=number" json:"number,omitempty"`
	Boolean    *bool           `protobuf:"varint,12,opt,name=boolean" json:"boolean,omitempty"`
	Datetime   *string         `protobuf:"bytes,13,opt,name=datetime" json:"datetime,omitempty"`
	List       []string        `protobuf:"bytes,14,rep,name=list" json:"list,omitempty"`
	Setter     *string         `protobuf:"bytes,16,opt,name=setter" json:"setter,omitempty"`
	SetterType *string         `protobuf:"bytes,17,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
}

func (x *TicketAttributeData) Reset() {
	*x = TicketAttributeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketAttributeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketAttributeData) ProtoMessage() {}

func (x *TicketAttributeData) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketAttributeData.ProtoReflect.Descriptor instead.
func (*TicketAttributeData) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *TicketAttributeData) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TicketAttributeData) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TicketAttributeData) GetTicketId() string {
	if x != nil && x.TicketId != nil {
		return *x.TicketId
	}
	return ""
}

func (x *TicketAttributeData) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TicketAttributeData) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TicketAttributeData) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *TicketAttributeData) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *TicketAttributeData) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TicketAttributeData) GetNumber() float64 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *TicketAttributeData) GetBoolean() bool {
	if x != nil && x.Boolean != nil {
		return *x.Boolean
	}
	return false
}

func (x *TicketAttributeData) GetDatetime() string {
	if x != nil && x.Datetime != nil {
		return *x.Datetime
	}
	return ""
}

func (x *TicketAttributeData) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TicketAttributeData) GetSetter() string {
	if x != nil && x.Setter != nil {
		return *x.Setter
	}
	return ""
}

func (x *TicketAttributeData) GetSetterType() string {
	if x != nil && x.SetterType != nil {
		return *x.SetterType
	}
	return ""
}

type ServiceLevelAgreementTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority         *string `protobuf:"bytes,1,opt,name=priority" json:"priority,omitempty"`
	ResolveWithin    *int32  `protobuf:"varint,2,opt,name=resolve_within,json=resolveWithin" json:"resolve_within,omitempty"` // hours
	OperationalHours *string `protobuf:"bytes,3,opt,name=operational_hours,json=operationalHours" json:"operational_hours,omitempty"`
	Notification     *bool   `protobuf:"varint,4,opt,name=notification" json:"notification,omitempty"`
}

func (x *ServiceLevelAgreementTarget) Reset() {
	*x = ServiceLevelAgreementTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreementTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreementTarget) ProtoMessage() {}

func (x *ServiceLevelAgreementTarget) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreementTarget.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreementTarget) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17}
}

func (x *ServiceLevelAgreementTarget) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ServiceLevelAgreementTarget) GetResolveWithin() int32 {
	if x != nil && x.ResolveWithin != nil {
		return *x.ResolveWithin
	}
	return 0
}

func (x *ServiceLevelAgreementTarget) GetOperationalHours() string {
	if x != nil && x.OperationalHours != nil {
		return *x.OperationalHours
	}
	return ""
}

func (x *ServiceLevelAgreementTarget) GetNotification() bool {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return false
}

type ServiceLevelAgreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context                `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string                        `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string                        `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name        *string                        `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description *string                        `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Strategy    *string                        `protobuf:"bytes,6,opt,name=strategy" json:"strategy,omitempty"`
	AssignTo    *string                        `protobuf:"bytes,7,opt,name=assign_to,json=assignTo" json:"assign_to,omitempty"` // agent id, group id
	Targets     []*ServiceLevelAgreementTarget `protobuf:"bytes,8,rep,name=targets" json:"targets,omitempty"`
	IsDefault   *bool                          `protobuf:"varint,9,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Created     *int64                         `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated     *int64                         `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	Order       *int32                         `protobuf:"varint,12,opt,name=order" json:"order,omitempty"`
}

func (x *ServiceLevelAgreement) Reset() {
	*x = ServiceLevelAgreement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreement) ProtoMessage() {}

func (x *ServiceLevelAgreement) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreement.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreement) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{18}
}

func (x *ServiceLevelAgreement) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ServiceLevelAgreement) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ServiceLevelAgreement) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ServiceLevelAgreement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceLevelAgreement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ServiceLevelAgreement) GetStrategy() string {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return ""
}

func (x *ServiceLevelAgreement) GetAssignTo() string {
	if x != nil && x.AssignTo != nil {
		return *x.AssignTo
	}
	return ""
}

func (x *ServiceLevelAgreement) GetTargets() []*ServiceLevelAgreementTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ServiceLevelAgreement) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *ServiceLevelAgreement) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ServiceLevelAgreement) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *ServiceLevelAgreement) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type ServiceLevelAgreements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                    *common.Context          `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	ServiceLevelAgreements []*ServiceLevelAgreement `protobuf:"bytes,2,rep,name=service_level_agreements,json=serviceLevelAgreements" json:"service_level_agreements,omitempty"`
}

func (x *ServiceLevelAgreements) Reset() {
	*x = ServiceLevelAgreements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreements) ProtoMessage() {}

func (x *ServiceLevelAgreements) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreements.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreements) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{19}
}

func (x *ServiceLevelAgreements) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ServiceLevelAgreements) GetServiceLevelAgreements() []*ServiceLevelAgreement {
	if x != nil {
		return x.ServiceLevelAgreements
	}
	return nil
}

type DeleteTicketAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key *string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *DeleteTicketAttrRequest) Reset() {
	*x = DeleteTicketAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketAttrRequest) ProtoMessage() {}

func (x *DeleteTicketAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketAttrRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketAttrRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTicketAttrRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteTicketAttrRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type GetTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{21}
}

func (x *GetTicketRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GetTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *GetTicketRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *GetTicketRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type DeleteTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *DeleteTicketRequest) Reset() {
	*x = DeleteTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketRequest) ProtoMessage() {}

func (x *DeleteTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTicketRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *DeleteTicketRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *DeleteTicketRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type ReportTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId     *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string  `protobuf:"bytes,4,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	State         *string  `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority      *string  `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	AgentIds      []string `protobuf:"bytes,7,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	TagIds        []string `protobuf:"bytes,8,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	CreatedAt     *int64   `protobuf:"varint,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ResolvedAt    *int64   `protobuf:"varint,10,opt,name=resolved_at,json=resolvedAt" json:"resolved_at,omitempty"`
	IsResolved    *bool    `protobuf:"varint,11,opt,name=is_resolved,json=isResolved" json:"is_resolved,omitempty"`
	ResolveTime   *int64   `protobuf:"varint,12,opt,name=resolve_time,json=resolveTime" json:"resolve_time,omitempty"` // seconds
	GroupId       *string  `protobuf:"bytes,14,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ClosedAt      *int64   `protobuf:"varint,15,opt,name=closed_at,json=closedAt" json:"closed_at,omitempty"`
	IsUnresolved  *bool    `protobuf:"varint,16,opt,name=is_unresolved,json=isUnresolved" json:"is_unresolved,omitempty"`
	IsViolated    *bool    `protobuf:"varint,17,opt,name=is_violated,json=isViolated" json:"is_violated,omitempty"`
	HasAgent      *bool    `protobuf:"varint,18,opt,name=has_agent,json=hasAgent" json:"has_agent,omitempty"`
	UserIds       []string `protobuf:"bytes,19,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (x *ReportTicket) Reset() {
	*x = ReportTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTicket) ProtoMessage() {}

func (x *ReportTicket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTicket.ProtoReflect.Descriptor instead.
func (*ReportTicket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{23}
}

func (x *ReportTicket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ReportTicket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ReportTicket) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ReportTicket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ReportTicket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ReportTicket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ReportTicket) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ReportTicket) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ReportTicket) GetResolvedAt() int64 {
	if x != nil && x.ResolvedAt != nil {
		return *x.ResolvedAt
	}
	return 0
}

func (x *ReportTicket) GetIsResolved() bool {
	if x != nil && x.IsResolved != nil {
		return *x.IsResolved
	}
	return false
}

func (x *ReportTicket) GetResolveTime() int64 {
	if x != nil && x.ResolveTime != nil {
		return *x.ResolveTime
	}
	return 0
}

func (x *ReportTicket) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *ReportTicket) GetClosedAt() int64 {
	if x != nil && x.ClosedAt != nil {
		return *x.ClosedAt
	}
	return 0
}

func (x *ReportTicket) GetIsUnresolved() bool {
	if x != nil && x.IsUnresolved != nil {
		return *x.IsUnresolved
	}
	return false
}

func (x *ReportTicket) GetIsViolated() bool {
	if x != nil && x.IsViolated != nil {
		return *x.IsViolated
	}
	return false
}

func (x *ReportTicket) GetHasAgent() bool {
	if x != nil && x.HasAgent != nil {
		return *x.HasAgent
	}
	return false
}

func (x *ReportTicket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CountTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,4,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	State         *string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority      *string `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	AgentId       *string `protobuf:"bytes,7,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TagId         *string `protobuf:"bytes,8,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	GroupId       *string `protobuf:"bytes,9,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	IsResolved    *bool   `protobuf:"varint,10,opt,name=is_resolved,json=isResolved" json:"is_resolved,omitempty"`
	HasAgent      *bool   `protobuf:"varint,11,opt,name=has_agent,json=hasAgent" json:"has_agent,omitempty"`
	FromHour      *int32  `protobuf:"varint,13,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,14,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	Range         *string `protobuf:"bytes,15,opt,name=range" json:"range,omitempty"`
	IsUnresolved  *bool   `protobuf:"varint,16,opt,name=is_unresolved,json=isUnresolved" json:"is_unresolved,omitempty"`
	IsViolated    *bool   `protobuf:"varint,17,opt,name=is_violated,json=isViolated" json:"is_violated,omitempty"`
	UserId        *string `protobuf:"bytes,18,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (x *CountTicketRequest) Reset() {
	*x = CountTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTicketRequest) ProtoMessage() {}

func (x *CountTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTicketRequest.ProtoReflect.Descriptor instead.
func (*CountTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{24}
}

func (x *CountTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountTicketRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountTicketRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CountTicketRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *CountTicketRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *CountTicketRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountTicketRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CountTicketRequest) GetIsResolved() bool {
	if x != nil && x.IsResolved != nil {
		return *x.IsResolved
	}
	return false
}

func (x *CountTicketRequest) GetHasAgent() bool {
	if x != nil && x.HasAgent != nil {
		return *x.HasAgent
	}
	return false
}

func (x *CountTicketRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *CountTicketRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

func (x *CountTicketRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountTicketRequest) GetIsUnresolved() bool {
	if x != nil && x.IsUnresolved != nil {
		return *x.IsUnresolved
	}
	return false
}

func (x *CountTicketRequest) GetIsViolated() bool {
	if x != nil && x.IsViolated != nil {
		return *x.IsViolated
	}
	return false
}

func (x *CountTicketRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type CountTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int64 `protobuf:"varint,2,rep,name=data" json:"data,omitempty"`
}

func (x *CountTicketResponse) Reset() {
	*x = CountTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTicketResponse) ProtoMessage() {}

func (x *CountTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTicketResponse.ProtoReflect.Descriptor instead.
func (*CountTicketResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{25}
}

func (x *CountTicketResponse) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type AvgResolveTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	Priority      *string `protobuf:"bytes,4,opt,name=priority" json:"priority,omitempty"`
	AgentId       *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TagId         *string `protobuf:"bytes,6,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	GroupId       *string `protobuf:"bytes,7,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FromHour      *int32  `protobuf:"varint,9,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,10,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	Range         *string `protobuf:"bytes,11,opt,name=range" json:"range,omitempty"`
}

func (x *AvgResolveTimeRequest) Reset() {
	*x = AvgResolveTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResolveTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResolveTimeRequest) ProtoMessage() {}

func (x *AvgResolveTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResolveTimeRequest.ProtoReflect.Descriptor instead.
func (*AvgResolveTimeRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{26}
}

func (x *AvgResolveTimeRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *AvgResolveTimeRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

func (x *AvgResolveTimeRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

type AvgResolveTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResolveSec *float64 `protobuf:"fixed64,2,opt,name=avg_resolve_sec,json=avgResolveSec" json:"avg_resolve_sec,omitempty"`
}

func (x *AvgResolveTimeResponse) Reset() {
	*x = AvgResolveTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResolveTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResolveTimeResponse) ProtoMessage() {}

func (x *AvgResolveTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResolveTimeResponse.ProtoReflect.Descriptor instead.
func (*AvgResolveTimeResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{27}
}

func (x *AvgResolveTimeResponse) GetAvgResolveSec() float64 {
	if x != nil && x.AvgResolveSec != nil {
		return *x.AvgResolveSec
	}
	return 0
}

type AvailibilityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId        *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	From           *string         `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"` // try date --rfc-3339=seconds date in rfc 3339 seconds standard. E.g: 2019-03-07T10:42:01+07:00
	Range          *string         `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	NumberOfPoints *int32          `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
}

func (x *AvailibilityReportRequest) Reset() {
	*x = AvailibilityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailibilityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailibilityReportRequest) ProtoMessage() {}

func (x *AvailibilityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailibilityReportRequest.ProtoReflect.Descriptor instead.
func (*AvailibilityReportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{28}
}

func (x *AvailibilityReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailibilityReportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *AvailibilityReportRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *AvailibilityReportRequest) GetNumberOfPoints() int32 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

type CountReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId  *string         `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	Metric         *string         `protobuf:"bytes,4,opt,name=metric" json:"metric,omitempty"`
	From           *string         `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"` // try date --rfc-3339=seconds
	Range          *string         `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	AgentId        *string         `protobuf:"bytes,10,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	GroupId        *string         `protobuf:"bytes,11,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	TagId          *string         `protobuf:"bytes,12,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	NumberOfPoints *int32          `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
}

func (x *CountReportRequest) Reset() {
	*x = CountReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountReportRequest) ProtoMessage() {}

func (x *CountReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountReportRequest.ProtoReflect.Descriptor instead.
func (*CountReportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{29}
}

func (x *CountReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CountReportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountReportRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountReportRequest) GetMetric() string {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return ""
}

func (x *CountReportRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *CountReportRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountReportRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *CountReportRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CountReportRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountReportRequest) GetNumberOfPoints() int32 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	From  *string         `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	Range *string         `protobuf:"bytes,4,opt,name=range" json:"range,omitempty"`
	Data  []int64         `protobuf:"varint,5,rep,name=data" json:"data,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{30}
}

func (x *ReportResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportResponse) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *ReportResponse) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *ReportResponse) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *string `protobuf:"bytes,1,opt,name=operator" json:"operator,omitempty"` // eq | ne ...
	Value    *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`       // encoded json
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{31}
}

func (x *FilterCondition) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *FilterCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type FilterUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationTagIds  []string         `protobuf:"bytes,3,rep,name=conversation_tag_ids,json=conversationTagIds" json:"conversation_tag_ids,omitempty"`
	ConversationState   *string          `protobuf:"bytes,4,opt,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"` // deprecated
	TicketState         *string          `protobuf:"bytes,5,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`                   // deprecated
	Limit               *int64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Anchor              *string          `protobuf:"bytes,7,opt,name=anchor" json:"anchor,omitempty"`
	ConversationCreated *FilterCondition `protobuf:"bytes,8,opt,name=conversation_created,json=conversationCreated" json:"conversation_created,omitempty"`
	SegmentId           *string          `protobuf:"bytes,9,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	ConversationStates  []string         `protobuf:"bytes,10,rep,name=conversation_states,json=conversationStates" json:"conversation_states,omitempty"`
	TicketStates        []string         `protobuf:"bytes,11,rep,name=ticket_states,json=ticketStates" json:"ticket_states,omitempty"`
}

func (x *FilterUserRequest) Reset() {
	*x = FilterUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserRequest) ProtoMessage() {}

func (x *FilterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserRequest.ProtoReflect.Descriptor instead.
func (*FilterUserRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{32}
}

func (x *FilterUserRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *FilterUserRequest) GetConversationTagIds() []string {
	if x != nil {
		return x.ConversationTagIds
	}
	return nil
}

func (x *FilterUserRequest) GetConversationState() string {
	if x != nil && x.ConversationState != nil {
		return *x.ConversationState
	}
	return ""
}

func (x *FilterUserRequest) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *FilterUserRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *FilterUserRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *FilterUserRequest) GetConversationCreated() *FilterCondition {
	if x != nil {
		return x.ConversationCreated
	}
	return nil
}

func (x *FilterUserRequest) GetSegmentId() string {
	if x != nil && x.SegmentId != nil {
		return *x.SegmentId
	}
	return ""
}

func (x *FilterUserRequest) GetConversationStates() []string {
	if x != nil {
		return x.ConversationStates
	}
	return nil
}

func (x *FilterUserRequest) GetTicketStates() []string {
	if x != nil {
		return x.TicketStates
	}
	return nil
}

type FilterUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional int64 total = 2;
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Anchor  *string  `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *FilterUserResponse) Reset() {
	*x = FilterUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserResponse) ProtoMessage() {}

func (x *FilterUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserResponse.ProtoReflect.Descriptor instead.
func (*FilterUserResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{33}
}

func (x *FilterUserResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *FilterUserResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type SearchConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId         *string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	State          *string          `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`                                // deprecated
	TicketState    *string          `protobuf:"bytes,5,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"` // deprecated
	Limit          *int64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Anchor         *string          `protobuf:"bytes,7,opt,name=anchor" json:"anchor,omitempty"`
	ConnectorId    *string          `protobuf:"bytes,8,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"` // deprecated
	Text           *string          `protobuf:"bytes,9,opt,name=text" json:"text,omitempty"`
	TagIds         []string         `protobuf:"bytes,10,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	MessageCreated *FilterCondition `protobuf:"bytes,11,opt,name=message_created,json=messageCreated" json:"message_created,omitempty"`
	States         []string         `protobuf:"bytes,12,rep,name=states" json:"states,omitempty"`
	TicketStates   []string         `protobuf:"bytes,13,rep,name=ticket_states,json=ticketStates" json:"ticket_states,omitempty"`
	ConnectorIds   []string         `protobuf:"bytes,14,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"` // channel
}

func (x *SearchConversationRequest) Reset() {
	*x = SearchConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationRequest) ProtoMessage() {}

func (x *SearchConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationRequest.ProtoReflect.Descriptor instead.
func (*SearchConversationRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{34}
}

func (x *SearchConversationRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SearchConversationRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SearchConversationRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *SearchConversationRequest) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *SearchConversationRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchConversationRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchConversationRequest) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *SearchConversationRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchConversationRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *SearchConversationRequest) GetMessageCreated() *FilterCondition {
	if x != nil {
		return x.MessageCreated
	}
	return nil
}

func (x *SearchConversationRequest) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *SearchConversationRequest) GetTicketStates() []string {
	if x != nil {
		return x.TicketStates
	}
	return nil
}

func (x *SearchConversationRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

type SearchConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional int64 total = 2;
	ConversationIds []string                 `protobuf:"bytes,3,rep,name=conversation_ids,json=conversationIds" json:"conversation_ids,omitempty"`
	Anchor          *string                  `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Result          []*ESConversationMessage `protobuf:"bytes,5,rep,name=result" json:"result,omitempty"` // for preview matched messages
}

func (x *SearchConversationResponse) Reset() {
	*x = SearchConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationResponse) ProtoMessage() {}

func (x *SearchConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationResponse.ProtoReflect.Descriptor instead.
func (*SearchConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{35}
}

func (x *SearchConversationResponse) GetConversationIds() []string {
	if x != nil {
		return x.ConversationIds
	}
	return nil
}

func (x *SearchConversationResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchConversationResponse) GetResult() []*ESConversationMessage {
	if x != nil {
		return x.Result
	}
	return nil
}

// conversation for index in elastic search
type ESConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *string                        `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string                        `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds           []string                       `protobuf:"bytes,4,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	State            *string                        `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	TicketState      *string                        `protobuf:"bytes,6,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`
	Id               *string                        `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Created          *int64                         `protobuf:"varint,10,opt,name=created" json:"created,omitempty"` // unix seconds
	SegmentIds       []string                       `protobuf:"bytes,11,rep,name=segment_ids,json=segmentIds" json:"segment_ids,omitempty"`
	IsReplied        *bool                          `protobuf:"varint,12,opt,name=is_replied,json=isReplied" json:"is_replied,omitempty"` // deprecated
	RepliedAt        *int64                         `protobuf:"varint,13,opt,name=replied_at,json=repliedAt" json:"replied_at,omitempty"` // deprecated
	AssignedAgentIds []string                       `protobuf:"bytes,14,rep,name=assigned_agent_ids,json=assignedAgentIds" json:"assigned_agent_ids,omitempty"`
	AssignedGroupId  *string                        `protobuf:"bytes,15,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentIds         []string                       `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // deprecated
	ConnectorId      *string                        `protobuf:"bytes,17,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	ChannelSource    *string                        `protobuf:"bytes,18,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	LastMessageTime  *int64                         `protobuf:"varint,19,opt,name=last_message_time,json=lastMessageTime" json:"last_message_time,omitempty"`
	ConnectorType    *string                        `protobuf:"bytes,20,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	UserReplied      *bool                          `protobuf:"varint,22,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	AgentReplied     *bool                          `protobuf:"varint,23,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt   *int64                         `protobuf:"varint,24,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"` // unix seconds
	RepliedByBots    *bool                          `protobuf:"varint,25,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents  *bool                          `protobuf:"varint,26,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTimes    []*ESConversation_ResponseTime `protobuf:"bytes,27,rep,name=response_times,json=responseTimes" json:"response_times,omitempty"`
	RepliedAgentIds  []string                       `protobuf:"bytes,28,rep,name=replied_agent_ids,json=repliedAgentIds" json:"replied_agent_ids,omitempty"`
}

func (x *ESConversation) Reset() {
	*x = ESConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversation) ProtoMessage() {}

func (x *ESConversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversation.ProtoReflect.Descriptor instead.
func (*ESConversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{36}
}

func (x *ESConversation) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESConversation) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ESConversation) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ESConversation) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ESConversation) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *ESConversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESConversation) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESConversation) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *ESConversation) GetIsReplied() bool {
	if x != nil && x.IsReplied != nil {
		return *x.IsReplied
	}
	return false
}

func (x *ESConversation) GetRepliedAt() int64 {
	if x != nil && x.RepliedAt != nil {
		return *x.RepliedAt
	}
	return 0
}

func (x *ESConversation) GetAssignedAgentIds() []string {
	if x != nil {
		return x.AssignedAgentIds
	}
	return nil
}

func (x *ESConversation) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ESConversation) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ESConversation) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *ESConversation) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ESConversation) GetLastMessageTime() int64 {
	if x != nil && x.LastMessageTime != nil {
		return *x.LastMessageTime
	}
	return 0
}

func (x *ESConversation) GetConnectorType() string {
	if x != nil && x.ConnectorType != nil {
		return *x.ConnectorType
	}
	return ""
}

func (x *ESConversation) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ESConversation) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ESConversation) GetAgentRepliedAt() int64 {
	if x != nil && x.AgentRepliedAt != nil {
		return *x.AgentRepliedAt
	}
	return 0
}

func (x *ESConversation) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ESConversation) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ESConversation) GetResponseTimes() []*ESConversation_ResponseTime {
	if x != nil {
		return x.ResponseTimes
	}
	return nil
}

func (x *ESConversation) GetRepliedAgentIds() []string {
	if x != nil {
		return x.RepliedAgentIds
	}
	return nil
}

// conversation message for index in elastic search
type ESConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId             *string  `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ConversationState  *string  `protobuf:"bytes,5,opt,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"`
	TicketState        *string  `protobuf:"bytes,6,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`
	ConnectorId        *string  `protobuf:"bytes,7,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	Text               *string  `protobuf:"bytes,8,opt,name=text" json:"text,omitempty"`
	ConversationId     *string  `protobuf:"bytes,9,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Created            *int64   `protobuf:"varint,10,opt,name=created" json:"created,omitempty"` // unix seconds
	Id                 *string  `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`            // event id
	ConversationTagIds []string `protobuf:"bytes,12,rep,name=conversation_tag_ids,json=conversationTagIds" json:"conversation_tag_ids,omitempty"`
}

func (x *ESConversationMessage) Reset() {
	*x = ESConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversationMessage) ProtoMessage() {}

func (x *ESConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversationMessage.ProtoReflect.Descriptor instead.
func (*ESConversationMessage) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{37}
}

func (x *ESConversationMessage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESConversationMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ESConversationMessage) GetConversationState() string {
	if x != nil && x.ConversationState != nil {
		return *x.ConversationState
	}
	return ""
}

func (x *ESConversationMessage) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *ESConversationMessage) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *ESConversationMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ESConversationMessage) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ESConversationMessage) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESConversationMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESConversationMessage) GetConversationTagIds() []string {
	if x != nil {
		return x.ConversationTagIds
	}
	return nil
}

// for update user segment ids of a conversation in elastic search
type UpdateUserSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId         *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SegmentIds     []string        `protobuf:"bytes,4,rep,name=segment_ids,json=segmentIds" json:"segment_ids,omitempty"` // all segment ids
	ConversationId *string         `protobuf:"bytes,5,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *UpdateUserSegmentRequest) Reset() {
	*x = UpdateUserSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSegmentRequest) ProtoMessage() {}

func (x *UpdateUserSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSegmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSegmentRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateUserSegmentRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateUserSegmentRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateUserSegmentRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UpdateUserSegmentRequest) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *UpdateUserSegmentRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

type ESTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	State          *string         `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority       *string         `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	Duedate        *int64          `protobuf:"varint,7,opt,name=duedate" json:"duedate,omitempty"`
	Created        *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"` // unix seconds
	UserIds        []string        `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	AgentIds       []string        `protobuf:"bytes,13,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	TagIds         []string        `protobuf:"bytes,17,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
}

func (x *ESTicket) Reset() {
	*x = ESTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESTicket) ProtoMessage() {}

func (x *ESTicket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESTicket.ProtoReflect.Descriptor instead.
func (*ESTicket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{39}
}

func (x *ESTicket) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ESTicket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESTicket) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ESTicket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESTicket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ESTicket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ESTicket) GetDuedate() int64 {
	if x != nil && x.Duedate != nil {
		return *x.Duedate
	}
	return 0
}

func (x *ESTicket) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESTicket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ESTicket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ESTicket) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type ConversationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	Anchor          *string          `protobuf:"bytes,14,opt,name=anchor" json:"anchor,omitempty"`
	Limit           *int64           `protobuf:"varint,15,opt,name=limit" json:"limit,omitempty"`
	AgentIds        []string         `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,17,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,18,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,19,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,20,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,21,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,22,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,23,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,24,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,25,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
}

func (x *ConversationListRequest) Reset() {
	*x = ConversationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationListRequest) ProtoMessage() {}

func (x *ConversationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationListRequest.ProtoReflect.Descriptor instead.
func (*ConversationListRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{40}
}

func (x *ConversationListRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversationListRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *ConversationListRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ConversationListRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ConversationListRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *ConversationListRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ConversationListRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *ConversationListRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ConversationListRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ConversationListRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ConversationListRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ConversationListRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ConversationListRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ConversationListRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *ConversationListRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ConversationListRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ConversationListRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ConversationListRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ConversationListRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ConversationListRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

type ConversationListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor          *string           `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Result          []*ESConversation `protobuf:"bytes,3,rep,name=result" json:"result,omitempty"`
	Total           *int64            `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	ConversationIds []string          `protobuf:"bytes,5,rep,name=conversation_ids,json=conversationIds" json:"conversation_ids,omitempty"`
}

func (x *ConversationListResponse) Reset() {
	*x = ConversationListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationListResponse) ProtoMessage() {}

func (x *ConversationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationListResponse.ProtoReflect.Descriptor instead.
func (*ConversationListResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{41}
}

func (x *ConversationListResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ConversationListResponse) GetResult() []*ESConversation {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ConversationListResponse) GetTotal() int64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *ConversationListResponse) GetConversationIds() []string {
	if x != nil {
		return x.ConversationIds
	}
	return nil
}

// export users in conversations list page
type UserExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	Emails          []string         `protobuf:"bytes,16,rep,name=emails" json:"emails,omitempty"`                                    // send to this emails
	AttributeKeys   []string         `protobuf:"bytes,17,rep,name=attribute_keys,json=attributeKeys" json:"attribute_keys,omitempty"` // exported attributes
	EmailSubject    *string          `protobuf:"bytes,18,opt,name=email_subject,json=emailSubject" json:"email_subject,omitempty"`
	LanguageCode    *string          `protobuf:"bytes,19,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	AgentIds        []string         `protobuf:"bytes,20,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,21,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,22,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,23,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,24,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,25,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,26,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,27,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,28,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,29,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
}

func (x *UserExportRequest) Reset() {
	*x = UserExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExportRequest) ProtoMessage() {}

func (x *UserExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExportRequest.ProtoReflect.Descriptor instead.
func (*UserExportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{42}
}

func (x *UserExportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserExportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UserExportRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *UserExportRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *UserExportRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *UserExportRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *UserExportRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UserExportRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *UserExportRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *UserExportRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *UserExportRequest) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *UserExportRequest) GetEmailSubject() string {
	if x != nil && x.EmailSubject != nil {
		return *x.EmailSubject
	}
	return ""
}

func (x *UserExportRequest) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *UserExportRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *UserExportRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserExportRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *UserExportRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *UserExportRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UserExportRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *UserExportRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *UserExportRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *UserExportRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *UserExportRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

type ReportConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	AgentIds        []string         `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,17,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,18,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,19,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,20,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,21,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,22,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,23,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,24,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,25,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
	Range           *string          `protobuf:"bytes,26,opt,name=range" json:"range,omitempty"` // hour | day
	NumberOfPoints  *int64           `protobuf:"varint,29,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
	From            *string          `protobuf:"bytes,30,opt,name=from" json:"from,omitempty"` // rfc3339
}

func (x *ReportConversationsRequest) Reset() {
	*x = ReportConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConversationsRequest) ProtoMessage() {}

func (x *ReportConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConversationsRequest.ProtoReflect.Descriptor instead.
func (*ReportConversationsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{43}
}

func (x *ReportConversationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportConversationsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ReportConversationsRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *ReportConversationsRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ReportConversationsRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ReportConversationsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ReportConversationsRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *ReportConversationsRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ReportConversationsRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ReportConversationsRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ReportConversationsRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ReportConversationsRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ReportConversationsRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

func (x *ReportConversationsRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *ReportConversationsRequest) GetNumberOfPoints() int64 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

func (x *ReportConversationsRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

type ESConversation_ResponseTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Seconds *int64  `protobuf:"varint,2,opt,name=seconds" json:"seconds,omitempty"`
}

func (x *ESConversation_ResponseTime) Reset() {
	*x = ESConversation_ResponseTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversation_ResponseTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversation_ResponseTime) ProtoMessage() {}

func (x *ESConversation_ResponseTime) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversation_ResponseTime.ProtoReflect.Descriptor instead.
func (*ESConversation_ResponseTime) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ESConversation_ResponseTime) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ESConversation_ResponseTime) GetSeconds() int64 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

var File_conversation_proto protoreflect.FileDescriptor

var file_conversation_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb2, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa8, 0x01,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x09, 0x45, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x12,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x1a, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x41, 0x76, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75,
	0x72, 0x22, 0x43, 0x0a, 0x17, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x65, 0x63, 0x22, 0x4a, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75,
	0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x45, 0x53, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x22, 0x81, 0x03, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10,
	0x00, 0x22, 0xc4, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x43, 0x0a, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x0e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x5d, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x6e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x10, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x02,
	0x0a, 0x15, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x40,
	0x0a, 0x16, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x63,
	0x22, 0xf3, 0x01, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x25, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x10, 0x02, 0x22, 0xd2, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x47, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc0, 0x07, 0x0a, 0x0e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x43,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x08, 0x45, 0x53, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x07, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6f, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xf9, 0x07, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xcd, 0x07, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x2a, 0x89, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0f, 0x2a,
	0x2d, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x2a, 0x3b,
	0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x2a, 0xca, 0x08, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x10, 0x08,
	0x12, 0x28, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0e, 0x12, 0x25,
	0x0a, 0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x61, 0x67, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10,
	0x11, 0x12, 0x27, 0x0a, 0x23, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x14, 0x12, 0x2a,
	0x0a, 0x26, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x20, 0x12, 0x2b, 0x0a, 0x27, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x22, 0x12, 0x2a, 0x0a, 0x26, 0x6e, 0x6f, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x35,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x23, 0x12, 0x2b, 0x0a, 0x27, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x35, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x25,
	0x12, 0x2b, 0x0a, 0x27, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x26, 0x12, 0x2c, 0x0a,
	0x28, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x28, 0x12, 0x2c, 0x0a, 0x28, 0x6e,
	0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x32, 0x34, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x29, 0x12, 0x2d, 0x0a, 0x29, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x32, 0x34, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x2b, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
}

var (
	file_conversation_proto_rawDescOnce sync.Once
	file_conversation_proto_rawDescData = file_conversation_proto_rawDesc
)

func file_conversation_proto_rawDescGZIP() []byte {
	file_conversation_proto_rawDescOnce.Do(func() {
		file_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_conversation_proto_rawDescData)
	})
	return file_conversation_proto_rawDescData
}

var file_conversation_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_conversation_proto_goTypes = []interface{}{
	(State)(0),                    // 0: conversation.State
	(TicketListOrderBy)(0),        // 1: conversation.TicketListOrderBy
	(TicketPriority)(0),           // 2: conversation.TicketPriority
	(Metric)(0),                   // 3: conversation.Metric
	(CountByTagsRequest_Range)(0), // 4: conversation.CountByTagsRequest.Range
	(ServiceLevelAgreementTarget_OperationalHours)(0), // 5: conversation.ServiceLevelAgreementTarget.OperationalHours
	(ServiceLevelAgreement_AssignStrategy)(0),         // 6: conversation.ServiceLevelAgreement.AssignStrategy
	(CountTicketRequest_Range)(0),                     // 7: conversation.CountTicketRequest.Range
	(AvgResolveTimeRequest_Range)(0),                  // 8: conversation.AvgResolveTimeRequest.Range
	(AvailibilityReportRequest_Range)(0),              // 9: conversation.AvailibilityReportRequest.Range
	(CountReportRequest_Range)(0),                     // 10: conversation.CountReportRequest.Range
	(*Search)(nil),                                    // 11: conversation.Search
	(*ListConversationsRequest)(nil),                  // 12: conversation.ListConversationsRequest
	(*ListEventsRequest)(nil),                         // 13: conversation.ListEventsRequest
	(*ListConversationsByUserRequest)(nil),            // 14: conversation.ListConversationsByUserRequest
	(*EsMessage)(nil),                                 // 15: conversation.EsMessage
	(*CountByTagsRequest)(nil),                        // 16: conversation.CountByTagsRequest
	(*CountByTag)(nil),                                // 17: conversation.CountByTag
	(*CountByTagsResponse)(nil),                       // 18: conversation.CountByTagsResponse
	(*AvgResponseTimeRequest)(nil),                    // 19: conversation.AvgResponseTimeRequest
	(*AvgResponseTimeResponse)(nil),                   // 20: conversation.AvgResponseTimeResponse
	(*TotalConversationResponse)(nil),                 // 21: conversation.TotalConversationResponse
	(*Chain)(nil),                                     // 22: conversation.Chain
	(*Ticket)(nil),                                    // 23: conversation.Ticket
	(*TicketListRequest)(nil),                         // 24: conversation.TicketListRequest
	(*Tickets)(nil),                                   // 25: conversation.Tickets
	(*ESTickets)(nil),                                 // 26: conversation.ESTickets
	(*TicketAttributeData)(nil),                       // 27: conversation.TicketAttributeData
	(*ServiceLevelAgreementTarget)(nil),               // 28: conversation.ServiceLevelAgreementTarget
	(*ServiceLevelAgreement)(nil),                     // 29: conversation.ServiceLevelAgreement
	(*ServiceLevelAgreements)(nil),                    // 30: conversation.ServiceLevelAgreements
	(*DeleteTicketAttrRequest)(nil),                   // 31: conversation.DeleteTicketAttrRequest
	(*GetTicketRequest)(nil),                          // 32: conversation.GetTicketRequest
	(*DeleteTicketRequest)(nil),                       // 33: conversation.DeleteTicketRequest
	(*ReportTicket)(nil),                              // 34: conversation.ReportTicket
	(*CountTicketRequest)(nil),                        // 35: conversation.CountTicketRequest
	(*CountTicketResponse)(nil),                       // 36: conversation.CountTicketResponse
	(*AvgResolveTimeRequest)(nil),                     // 37: conversation.AvgResolveTimeRequest
	(*AvgResolveTimeResponse)(nil),                    // 38: conversation.AvgResolveTimeResponse
	(*AvailibilityReportRequest)(nil),                 // 39: conversation.AvailibilityReportRequest
	(*CountReportRequest)(nil),                        // 40: conversation.CountReportRequest
	(*ReportResponse)(nil),                            // 41: conversation.ReportResponse
	(*FilterCondition)(nil),                           // 42: conversation.FilterCondition
	(*FilterUserRequest)(nil),                         // 43: conversation.FilterUserRequest
	(*FilterUserResponse)(nil),                        // 44: conversation.FilterUserResponse
	(*SearchConversationRequest)(nil),                 // 45: conversation.SearchConversationRequest
	(*SearchConversationResponse)(nil),                // 46: conversation.SearchConversationResponse
	(*ESConversation)(nil),                            // 47: conversation.ESConversation
	(*ESConversationMessage)(nil),                     // 48: conversation.ESConversationMessage
	(*UpdateUserSegmentRequest)(nil),                  // 49: conversation.UpdateUserSegmentRequest
	(*ESTicket)(nil),                                  // 50: conversation.ESTicket
	(*ConversationListRequest)(nil),                   // 51: conversation.ConversationListRequest
	(*ConversationListResponse)(nil),                  // 52: conversation.ConversationListResponse
	(*UserExportRequest)(nil),                         // 53: conversation.UserExportRequest
	(*ReportConversationsRequest)(nil),                // 54: conversation.ReportConversationsRequest
	(*ESConversation_ResponseTime)(nil),               // 55: conversation.ESConversation.ResponseTime
	(*common.Context)(nil),                            // 56: common.Context
}
var file_conversation_proto_depIdxs = []int32{
	56, // 0: conversation.Search.ctx:type_name -> common.Context
	56, // 1: conversation.ListConversationsRequest.ctx:type_name -> common.Context
	56, // 2: conversation.ListEventsRequest.ctx:type_name -> common.Context
	17, // 3: conversation.CountByTagsResponse.data:type_name -> conversation.CountByTag
	56, // 4: conversation.Ticket.ctx:type_name -> common.Context
	27, // 5: conversation.Ticket.attributes:type_name -> conversation.TicketAttributeData
	56, // 6: conversation.TicketListRequest.ctx:type_name -> common.Context
	42, // 7: conversation.TicketListRequest.created:type_name -> conversation.FilterCondition
	56, // 8: conversation.Tickets.ctx:type_name -> common.Context
	23, // 9: conversation.Tickets.tickets:type_name -> conversation.Ticket
	56, // 10: conversation.ESTickets.ctx:type_name -> common.Context
	50, // 11: conversation.ESTickets.tickets:type_name -> conversation.ESTicket
	56, // 12: conversation.TicketAttributeData.ctx:type_name -> common.Context
	56, // 13: conversation.ServiceLevelAgreement.ctx:type_name -> common.Context
	28, // 14: conversation.ServiceLevelAgreement.targets:type_name -> conversation.ServiceLevelAgreementTarget
	56, // 15: conversation.ServiceLevelAgreements.ctx:type_name -> common.Context
	29, // 16: conversation.ServiceLevelAgreements.service_level_agreements:type_name -> conversation.ServiceLevelAgreement
	56, // 17: conversation.DeleteTicketAttrRequest.ctx:type_name -> common.Context
	56, // 18: conversation.GetTicketRequest.ctx:type_name -> common.Context
	56, // 19: conversation.DeleteTicketRequest.ctx:type_name -> common.Context
	56, // 20: conversation.AvailibilityReportRequest.ctx:type_name -> common.Context
	56, // 21: conversation.CountReportRequest.ctx:type_name -> common.Context
	56, // 22: conversation.ReportResponse.ctx:type_name -> common.Context
	42, // 23: conversation.FilterUserRequest.conversation_created:type_name -> conversation.FilterCondition
	42, // 24: conversation.SearchConversationRequest.message_created:type_name -> conversation.FilterCondition
	48, // 25: conversation.SearchConversationResponse.result:type_name -> conversation.ESConversationMessage
	55, // 26: conversation.ESConversation.response_times:type_name -> conversation.ESConversation.ResponseTime
	56, // 27: conversation.UpdateUserSegmentRequest.ctx:type_name -> common.Context
	56, // 28: conversation.ESTicket.ctx:type_name -> common.Context
	56, // 29: conversation.ConversationListRequest.ctx:type_name -> common.Context
	42, // 30: conversation.ConversationListRequest.agent_replied_at:type_name -> conversation.FilterCondition
	42, // 31: conversation.ConversationListRequest.created:type_name -> conversation.FilterCondition
	42, // 32: conversation.ConversationListRequest.user_id:type_name -> conversation.FilterCondition
	42, // 33: conversation.ConversationListRequest.tag_ids:type_name -> conversation.FilterCondition
	42, // 34: conversation.ConversationListRequest.state:type_name -> conversation.FilterCondition
	42, // 35: conversation.ConversationListRequest.response_time:type_name -> conversation.FilterCondition
	47, // 36: conversation.ConversationListResponse.result:type_name -> conversation.ESConversation
	56, // 37: conversation.UserExportRequest.ctx:type_name -> common.Context
	42, // 38: conversation.UserExportRequest.agent_replied_at:type_name -> conversation.FilterCondition
	42, // 39: conversation.UserExportRequest.created:type_name -> conversation.FilterCondition
	42, // 40: conversation.UserExportRequest.user_id:type_name -> conversation.FilterCondition
	42, // 41: conversation.UserExportRequest.tag_ids:type_name -> conversation.FilterCondition
	42, // 42: conversation.UserExportRequest.state:type_name -> conversation.FilterCondition
	42, // 43: conversation.UserExportRequest.response_time:type_name -> conversation.FilterCondition
	56, // 44: conversation.ReportConversationsRequest.ctx:type_name -> common.Context
	42, // 45: conversation.ReportConversationsRequest.agent_replied_at:type_name -> conversation.FilterCondition
	42, // 46: conversation.ReportConversationsRequest.created:type_name -> conversation.FilterCondition
	42, // 47: conversation.ReportConversationsRequest.user_id:type_name -> conversation.FilterCondition
	42, // 48: conversation.ReportConversationsRequest.tag_ids:type_name -> conversation.FilterCondition
	42, // 49: conversation.ReportConversationsRequest.state:type_name -> conversation.FilterCondition
	42, // 50: conversation.ReportConversationsRequest.response_time:type_name -> conversation.FilterCondition
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_conversation_proto_init() }
func file_conversation_proto_init() {
	if File_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResponseTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResponseTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESTickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketAttributeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreementTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResolveTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResolveTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailibilityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversation_ResponseTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conversation_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conversation_proto_goTypes,
		DependencyIndexes: file_conversation_proto_depIdxs,
		EnumInfos:         file_conversation_proto_enumTypes,
		MessageInfos:      file_conversation_proto_msgTypes,
	}.Build()
	File_conversation_proto = out.File
	file_conversation_proto_rawDesc = nil
	file_conversation_proto_goTypes = nil
	file_conversation_proto_depIdxs = nil
}
