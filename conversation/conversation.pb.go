// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: conversation.proto

package conversation

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State int32

const (
	State_none              State = 0  // convo
	State_unassigned        State = 2  // convo
	State_active            State = 6  // convo
	State_ended             State = 8  // convo
	State_pending           State = 9  // ticket and convo
	State_all               State = 10 // ticket
	State_open              State = 11 // ticket
	State_resolved          State = 13 // ticket
	State_closed            State = 14 // ticket
	State_waiting_for_reply State = 15 // waiting for reply
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "none",
		2:  "unassigned",
		6:  "active",
		8:  "ended",
		9:  "pending",
		10: "all",
		11: "open",
		13: "resolved",
		14: "closed",
		15: "waiting_for_reply",
	}
	State_value = map[string]int32{
		"none":              0,
		"unassigned":        2,
		"active":            6,
		"ended":             8,
		"pending":           9,
		"all":               10,
		"open":              11,
		"resolved":          13,
		"closed":            14,
		"waiting_for_reply": 15,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = State(num)
	return nil
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

type AttachmentType int32

const (
	AttachmentType_file                 AttachmentType = 2
	AttachmentType_generic              AttachmentType = 3
	AttachmentType_preview              AttachmentType = 4
	AttachmentType_button               AttachmentType = 5
	AttachmentType_input                AttachmentType = 6
	AttachmentType_ask_info_form        AttachmentType = 7
	AttachmentType_ask_info_form_answer AttachmentType = 8
	AttachmentType_form                 AttachmentType = 9
	AttachmentType_form_submit          AttachmentType = 10
	AttachmentType_fallback             AttachmentType = 11
	AttachmentType_content_template     AttachmentType = 12
	AttachmentType_quick_replies        AttachmentType = 13
	AttachmentType_command              AttachmentType = 14 // request_user_info
	AttachmentType_link                 AttachmentType = 15
)

// Enum value maps for AttachmentType.
var (
	AttachmentType_name = map[int32]string{
		2:  "file",
		3:  "generic",
		4:  "preview",
		5:  "button",
		6:  "input",
		7:  "ask_info_form",
		8:  "ask_info_form_answer",
		9:  "form",
		10: "form_submit",
		11: "fallback",
		12: "content_template",
		13: "quick_replies",
		14: "command",
		15: "link",
	}
	AttachmentType_value = map[string]int32{
		"file":                 2,
		"generic":              3,
		"preview":              4,
		"button":               5,
		"input":                6,
		"ask_info_form":        7,
		"ask_info_form_answer": 8,
		"form":                 9,
		"form_submit":          10,
		"fallback":             11,
		"content_template":     12,
		"quick_replies":        13,
		"command":              14,
		"link":                 15,
	}
)

func (x AttachmentType) Enum() *AttachmentType {
	p := new(AttachmentType)
	*p = x
	return p
}

func (x AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[1].Descriptor()
}

func (AttachmentType) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[1]
}

func (x AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AttachmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AttachmentType(num)
	return nil
}

// Deprecated: Use AttachmentType.Descriptor instead.
func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

type TicketListOrderBy int32

const (
	TicketListOrderBy_created TicketListOrderBy = 1
	TicketListOrderBy_duedate TicketListOrderBy = 2
)

// Enum value maps for TicketListOrderBy.
var (
	TicketListOrderBy_name = map[int32]string{
		1: "created",
		2: "duedate",
	}
	TicketListOrderBy_value = map[string]int32{
		"created": 1,
		"duedate": 2,
	}
)

func (x TicketListOrderBy) Enum() *TicketListOrderBy {
	p := new(TicketListOrderBy)
	*p = x
	return p
}

func (x TicketListOrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketListOrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[2].Descriptor()
}

func (TicketListOrderBy) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[2]
}

func (x TicketListOrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TicketListOrderBy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TicketListOrderBy(num)
	return nil
}

// Deprecated: Use TicketListOrderBy.Descriptor instead.
func (TicketListOrderBy) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

type TicketPriority int32

const (
	TicketPriority_low    TicketPriority = 0
	TicketPriority_medium TicketPriority = 1
	TicketPriority_high   TicketPriority = 2
	TicketPriority_urgent TicketPriority = 3
)

// Enum value maps for TicketPriority.
var (
	TicketPriority_name = map[int32]string{
		0: "low",
		1: "medium",
		2: "high",
		3: "urgent",
	}
	TicketPriority_value = map[string]int32{
		"low":    0,
		"medium": 1,
		"high":   2,
		"urgent": 3,
	}
)

func (x TicketPriority) Enum() *TicketPriority {
	p := new(TicketPriority)
	*p = x
	return p
}

func (x TicketPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[3].Descriptor()
}

func (TicketPriority) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[3]
}

func (x TicketPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TicketPriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TicketPriority(num)
	return nil
}

// Deprecated: Use TicketPriority.Descriptor instead.
func (TicketPriority) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

// Report metrics
type Metric int32

const (
	Metric_created_conversations                     Metric = 0 // all conversation
	Metric_created_conversations_by_agent            Metric = 2
	Metric_created_conversations_by_group            Metric = 3
	Metric_created_conversations_by_tag              Metric = 4
	Metric_agent_replied_conversations               Metric = 6
	Metric_agent_replied_conversations_by_agents     Metric = 7
	Metric_agent_replied_conversations_by_bots       Metric = 8
	Metric_agent_replied_conversations_by_agent      Metric = 9
	Metric_agent_replied_conversations_by_group      Metric = 10
	Metric_agent_replied_conversations_by_tag        Metric = 11
	Metric_user_replied_conversations                Metric = 12
	Metric_user_replied_conversations_by_agent       Metric = 13
	Metric_user_replied_conversations_by_group       Metric = 14
	Metric_user_replied_conversations_by_tag         Metric = 15
	Metric_agent_repling_conversations               Metric = 16
	Metric_agent_repling_conversations_by_agents     Metric = 17
	Metric_agent_repling_conversations_by_bots       Metric = 18
	Metric_agent_repling_conversations_by_agent      Metric = 19
	Metric_agent_repling_conversations_by_group      Metric = 20
	Metric_no_agent_replied_in_1min_conversations    Metric = 32
	Metric_agent_non_replied_in_1min_conversations   Metric = 34
	Metric_no_agent_replied_in_5min_conversations    Metric = 35
	Metric_agent_non_replied_in_5min_conversations   Metric = 37
	Metric_no_agent_replied_in_15min_conversations   Metric = 38
	Metric_agent_non_replied_in_15min_conversations  Metric = 40
	Metric_no_agent_replied_in_24hour_conversations  Metric = 41
	Metric_agent_non_replied_in_24hour_conversations Metric = 43
)

// Enum value maps for Metric.
var (
	Metric_name = map[int32]string{
		0:  "created_conversations",
		2:  "created_conversations_by_agent",
		3:  "created_conversations_by_group",
		4:  "created_conversations_by_tag",
		6:  "agent_replied_conversations",
		7:  "agent_replied_conversations_by_agents",
		8:  "agent_replied_conversations_by_bots",
		9:  "agent_replied_conversations_by_agent",
		10: "agent_replied_conversations_by_group",
		11: "agent_replied_conversations_by_tag",
		12: "user_replied_conversations",
		13: "user_replied_conversations_by_agent",
		14: "user_replied_conversations_by_group",
		15: "user_replied_conversations_by_tag",
		16: "agent_repling_conversations",
		17: "agent_repling_conversations_by_agents",
		18: "agent_repling_conversations_by_bots",
		19: "agent_repling_conversations_by_agent",
		20: "agent_repling_conversations_by_group",
		32: "no_agent_replied_in_1min_conversations",
		34: "agent_non_replied_in_1min_conversations",
		35: "no_agent_replied_in_5min_conversations",
		37: "agent_non_replied_in_5min_conversations",
		38: "no_agent_replied_in_15min_conversations",
		40: "agent_non_replied_in_15min_conversations",
		41: "no_agent_replied_in_24hour_conversations",
		43: "agent_non_replied_in_24hour_conversations",
	}
	Metric_value = map[string]int32{
		"created_conversations":                     0,
		"created_conversations_by_agent":            2,
		"created_conversations_by_group":            3,
		"created_conversations_by_tag":              4,
		"agent_replied_conversations":               6,
		"agent_replied_conversations_by_agents":     7,
		"agent_replied_conversations_by_bots":       8,
		"agent_replied_conversations_by_agent":      9,
		"agent_replied_conversations_by_group":      10,
		"agent_replied_conversations_by_tag":        11,
		"user_replied_conversations":                12,
		"user_replied_conversations_by_agent":       13,
		"user_replied_conversations_by_group":       14,
		"user_replied_conversations_by_tag":         15,
		"agent_repling_conversations":               16,
		"agent_repling_conversations_by_agents":     17,
		"agent_repling_conversations_by_bots":       18,
		"agent_repling_conversations_by_agent":      19,
		"agent_repling_conversations_by_group":      20,
		"no_agent_replied_in_1min_conversations":    32,
		"agent_non_replied_in_1min_conversations":   34,
		"no_agent_replied_in_5min_conversations":    35,
		"agent_non_replied_in_5min_conversations":   37,
		"no_agent_replied_in_15min_conversations":   38,
		"agent_non_replied_in_15min_conversations":  40,
		"no_agent_replied_in_24hour_conversations":  41,
		"agent_non_replied_in_24hour_conversations": 43,
	}
)

func (x Metric) Enum() *Metric {
	p := new(Metric)
	*p = x
	return p
}

func (x Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[4].Descriptor()
}

func (Metric) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[4]
}

func (x Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Metric) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Metric(num)
	return nil
}

// Deprecated: Use Metric.Descriptor instead.
func (Metric) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

type Rule_AssignStrategy int32

const (
	Rule_all_agents            Rule_AssignStrategy = 0
	Rule_agentgroup            Rule_AssignStrategy = 2
	Rule_agents                Rule_AssignStrategy = 3
	Rule_most_recent           Rule_AssignStrategy = 4
	Rule_roundrobin_all_agents Rule_AssignStrategy = 5
	Rule_roundrobin_agents     Rule_AssignStrategy = 6
	Rule_first_reply           Rule_AssignStrategy = 7 // list of agent
	Rule_first_reply_of_all    Rule_AssignStrategy = 8 // all agent
	Rule_first_reply_of_group  Rule_AssignStrategy = 9 // group
)

// Enum value maps for Rule_AssignStrategy.
var (
	Rule_AssignStrategy_name = map[int32]string{
		0: "all_agents",
		2: "agentgroup",
		3: "agents",
		4: "most_recent",
		5: "roundrobin_all_agents",
		6: "roundrobin_agents",
		7: "first_reply",
		8: "first_reply_of_all",
		9: "first_reply_of_group",
	}
	Rule_AssignStrategy_value = map[string]int32{
		"all_agents":            0,
		"agentgroup":            2,
		"agents":                3,
		"most_recent":           4,
		"roundrobin_all_agents": 5,
		"roundrobin_agents":     6,
		"first_reply":           7,
		"first_reply_of_all":    8,
		"first_reply_of_group":  9,
	}
)

func (x Rule_AssignStrategy) Enum() *Rule_AssignStrategy {
	p := new(Rule_AssignStrategy)
	*p = x
	return p
}

func (x Rule_AssignStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_AssignStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[5].Descriptor()
}

func (Rule_AssignStrategy) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[5]
}

func (x Rule_AssignStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Rule_AssignStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Rule_AssignStrategy(num)
	return nil
}

// Deprecated: Use Rule_AssignStrategy.Descriptor instead.
func (Rule_AssignStrategy) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0, 0}
}

type Member_State int32

const (
	Member_active   Member_State = 0
	Member_left     Member_State = 1
	Member_observer Member_State = 2
)

// Enum value maps for Member_State.
var (
	Member_State_name = map[int32]string{
		0: "active",
		1: "left",
		2: "observer",
	}
	Member_State_value = map[string]int32{
		"active":   0,
		"left":     1,
		"observer": 2,
	}
)

func (x Member_State) Enum() *Member_State {
	p := new(Member_State)
	*p = x
	return p
}

func (x Member_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Member_State) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[6].Descriptor()
}

func (Member_State) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[6]
}

func (x Member_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Member_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Member_State(num)
	return nil
}

// Deprecated: Use Member_State.Descriptor instead.
func (Member_State) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7, 0}
}

type MessagePong_Type int32

const (
	MessagePong_ack          MessagePong_Type = 1
	MessagePong_seen         MessagePong_Type = 2
	MessagePong_receive      MessagePong_Type = 3 // deliverd to client machine
	MessagePong_delete       MessagePong_Type = 4
	MessagePong_like         MessagePong_Type = 5
	MessagePong_love         MessagePong_Type = 6
	MessagePong_haha         MessagePong_Type = 7
	MessagePong_wow          MessagePong_Type = 8
	MessagePong_sad          MessagePong_Type = 9
	MessagePong_angry        MessagePong_Type = 10
	MessagePong_remove_like  MessagePong_Type = 11
	MessagePong_remove_love  MessagePong_Type = 12
	MessagePong_remove_wow   MessagePong_Type = 13
	MessagePong_remove_haha  MessagePong_Type = 14
	MessagePong_remove_sad   MessagePong_Type = 15
	MessagePong_remove_angry MessagePong_Type = 16
	MessagePong_hide         MessagePong_Type = 17
	MessagePong_remove_hide  MessagePong_Type = 18
	MessagePong_open         MessagePong_Type = 19 // email opened
)

// Enum value maps for MessagePong_Type.
var (
	MessagePong_Type_name = map[int32]string{
		1:  "ack",
		2:  "seen",
		3:  "receive",
		4:  "delete",
		5:  "like",
		6:  "love",
		7:  "haha",
		8:  "wow",
		9:  "sad",
		10: "angry",
		11: "remove_like",
		12: "remove_love",
		13: "remove_wow",
		14: "remove_haha",
		15: "remove_sad",
		16: "remove_angry",
		17: "hide",
		18: "remove_hide",
		19: "open",
	}
	MessagePong_Type_value = map[string]int32{
		"ack":          1,
		"seen":         2,
		"receive":      3,
		"delete":       4,
		"like":         5,
		"love":         6,
		"haha":         7,
		"wow":          8,
		"sad":          9,
		"angry":        10,
		"remove_like":  11,
		"remove_love":  12,
		"remove_wow":   13,
		"remove_haha":  14,
		"remove_sad":   15,
		"remove_angry": 16,
		"hide":         17,
		"remove_hide":  18,
		"open":         19,
	}
)

func (x MessagePong_Type) Enum() *MessagePong_Type {
	p := new(MessagePong_Type)
	*p = x
	return p
}

func (x MessagePong_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagePong_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[7].Descriptor()
}

func (MessagePong_Type) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[7]
}

func (x MessagePong_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessagePong_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessagePong_Type(num)
	return nil
}

// Deprecated: Use MessagePong_Type.Descriptor instead.
func (MessagePong_Type) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17, 0}
}

type Button_ButtonType int32

const (
	Button_url_button                       Button_ButtonType = 2
	Button_postback_button                  Button_ButtonType = 3
	Button_event_button                     Button_ButtonType = 4
	Button_call_button                      Button_ButtonType = 5
	Button_widget_ask_desktop_notify_button Button_ButtonType = 6
	Button_widget_ask_contact_info_button   Button_ButtonType = 7
)

// Enum value maps for Button_ButtonType.
var (
	Button_ButtonType_name = map[int32]string{
		2: "url_button",
		3: "postback_button",
		4: "event_button",
		5: "call_button",
		6: "widget_ask_desktop_notify_button",
		7: "widget_ask_contact_info_button",
	}
	Button_ButtonType_value = map[string]int32{
		"url_button":                       2,
		"postback_button":                  3,
		"event_button":                     4,
		"call_button":                      5,
		"widget_ask_desktop_notify_button": 6,
		"widget_ask_contact_info_button":   7,
	}
)

func (x Button_ButtonType) Enum() *Button_ButtonType {
	p := new(Button_ButtonType)
	*p = x
	return p
}

func (x Button_ButtonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Button_ButtonType) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[8].Descriptor()
}

func (Button_ButtonType) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[8]
}

func (x Button_ButtonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Button_ButtonType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Button_ButtonType(num)
	return nil
}

// Deprecated: Use Button_ButtonType.Descriptor instead.
func (Button_ButtonType) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{20, 0}
}

type AskInfomation_InputType int32

const (
	AskInfomation_phone    AskInfomation_InputType = 0
	AskInfomation_email    AskInfomation_InputType = 1
	AskInfomation_text     AskInfomation_InputType = 2
	AskInfomation_password AskInfomation_InputType = 3
	AskInfomation_number   AskInfomation_InputType = 4
	AskInfomation_date     AskInfomation_InputType = 5
	AskInfomation_color    AskInfomation_InputType = 6
	AskInfomation_location AskInfomation_InputType = 7
	AskInfomation_time     AskInfomation_InputType = 8
	AskInfomation_url      AskInfomation_InputType = 9
)

// Enum value maps for AskInfomation_InputType.
var (
	AskInfomation_InputType_name = map[int32]string{
		0: "phone",
		1: "email",
		2: "text",
		3: "password",
		4: "number",
		5: "date",
		6: "color",
		7: "location",
		8: "time",
		9: "url",
	}
	AskInfomation_InputType_value = map[string]int32{
		"phone":    0,
		"email":    1,
		"text":     2,
		"password": 3,
		"number":   4,
		"date":     5,
		"color":    6,
		"location": 7,
		"time":     8,
		"url":      9,
	}
)

func (x AskInfomation_InputType) Enum() *AskInfomation_InputType {
	p := new(AskInfomation_InputType)
	*p = x
	return p
}

func (x AskInfomation_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AskInfomation_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[9].Descriptor()
}

func (AskInfomation_InputType) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[9]
}

func (x AskInfomation_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AskInfomation_InputType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AskInfomation_InputType(num)
	return nil
}

// Deprecated: Use AskInfomation_InputType.Descriptor instead.
func (AskInfomation_InputType) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{22, 0}
}

type ContentTemplate_Availability int32

const (
	ContentTemplate_in_stock     ContentTemplate_Availability = 1
	ContentTemplate_out_of_stock ContentTemplate_Availability = 2
	ContentTemplate_preorder     ContentTemplate_Availability = 3
	ContentTemplate_discontinued ContentTemplate_Availability = 4
)

// Enum value maps for ContentTemplate_Availability.
var (
	ContentTemplate_Availability_name = map[int32]string{
		1: "in_stock",
		2: "out_of_stock",
		3: "preorder",
		4: "discontinued",
	}
	ContentTemplate_Availability_value = map[string]int32{
		"in_stock":     1,
		"out_of_stock": 2,
		"preorder":     3,
		"discontinued": 4,
	}
)

func (x ContentTemplate_Availability) Enum() *ContentTemplate_Availability {
	p := new(ContentTemplate_Availability)
	*p = x
	return p
}

func (x ContentTemplate_Availability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentTemplate_Availability) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[10].Descriptor()
}

func (ContentTemplate_Availability) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[10]
}

func (x ContentTemplate_Availability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentTemplate_Availability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentTemplate_Availability(num)
	return nil
}

// Deprecated: Use ContentTemplate_Availability.Descriptor instead.
func (ContentTemplate_Availability) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{23, 0}
}

type FormField_InputType int32

const (
	FormField_text     FormField_InputType = 0
	FormField_datetime FormField_InputType = 1
	FormField_list     FormField_InputType = 2
	FormField_number   FormField_InputType = 3
	FormField_boolean  FormField_InputType = 4
)

// Enum value maps for FormField_InputType.
var (
	FormField_InputType_name = map[int32]string{
		0: "text",
		1: "datetime",
		2: "list",
		3: "number",
		4: "boolean",
	}
	FormField_InputType_value = map[string]int32{
		"text":     0,
		"datetime": 1,
		"list":     2,
		"number":   3,
		"boolean":  4,
	}
)

func (x FormField_InputType) Enum() *FormField_InputType {
	p := new(FormField_InputType)
	*p = x
	return p
}

func (x FormField_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormField_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[11].Descriptor()
}

func (FormField_InputType) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[11]
}

func (x FormField_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FormField_InputType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FormField_InputType(num)
	return nil
}

// Deprecated: Use FormField_InputType.Descriptor instead.
func (FormField_InputType) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{29, 0}
}

type Integration_State int32

const (
	Integration_disabled  Integration_State = 0
	Integration_activated Integration_State = 1
)

// Enum value maps for Integration_State.
var (
	Integration_State_name = map[int32]string{
		0: "disabled",
		1: "activated",
	}
	Integration_State_value = map[string]int32{
		"disabled":  0,
		"activated": 1,
	}
)

func (x Integration_State) Enum() *Integration_State {
	p := new(Integration_State)
	*p = x
	return p
}

func (x Integration_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Integration_State) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[12].Descriptor()
}

func (Integration_State) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[12]
}

func (x Integration_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Integration_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Integration_State(num)
	return nil
}

// Deprecated: Use Integration_State.Descriptor instead.
func (Integration_State) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{38, 0}
}

type CountByTagsRequest_Range int32

const (
	CountByTagsRequest_hour CountByTagsRequest_Range = 0
	CountByTagsRequest_day  CountByTagsRequest_Range = 1
)

// Enum value maps for CountByTagsRequest_Range.
var (
	CountByTagsRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountByTagsRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountByTagsRequest_Range) Enum() *CountByTagsRequest_Range {
	p := new(CountByTagsRequest_Range)
	*p = x
	return p
}

func (x CountByTagsRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountByTagsRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[13].Descriptor()
}

func (CountByTagsRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[13]
}

func (x CountByTagsRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountByTagsRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountByTagsRequest_Range(num)
	return nil
}

// Deprecated: Use CountByTagsRequest_Range.Descriptor instead.
func (CountByTagsRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{41, 0}
}

type ServiceLevelAgreementTarget_OperationalHours int32

const (
	ServiceLevelAgreementTarget_BUSINESS_HOURS ServiceLevelAgreementTarget_OperationalHours = 0
)

// Enum value maps for ServiceLevelAgreementTarget_OperationalHours.
var (
	ServiceLevelAgreementTarget_OperationalHours_name = map[int32]string{
		0: "BUSINESS_HOURS",
	}
	ServiceLevelAgreementTarget_OperationalHours_value = map[string]int32{
		"BUSINESS_HOURS": 0,
	}
)

func (x ServiceLevelAgreementTarget_OperationalHours) Enum() *ServiceLevelAgreementTarget_OperationalHours {
	p := new(ServiceLevelAgreementTarget_OperationalHours)
	*p = x
	return p
}

func (x ServiceLevelAgreementTarget_OperationalHours) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceLevelAgreementTarget_OperationalHours) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[14].Descriptor()
}

func (ServiceLevelAgreementTarget_OperationalHours) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[14]
}

func (x ServiceLevelAgreementTarget_OperationalHours) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceLevelAgreementTarget_OperationalHours) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceLevelAgreementTarget_OperationalHours(num)
	return nil
}

// Deprecated: Use ServiceLevelAgreementTarget_OperationalHours.Descriptor instead.
func (ServiceLevelAgreementTarget_OperationalHours) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{53, 0}
}

type ServiceLevelAgreement_AssignStrategy int32

const (
	ServiceLevelAgreement_ALL_AGENTS  ServiceLevelAgreement_AssignStrategy = 0
	ServiceLevelAgreement_AGENT_GROUP ServiceLevelAgreement_AssignStrategy = 1
	ServiceLevelAgreement_AGENT       ServiceLevelAgreement_AssignStrategy = 2
)

// Enum value maps for ServiceLevelAgreement_AssignStrategy.
var (
	ServiceLevelAgreement_AssignStrategy_name = map[int32]string{
		0: "ALL_AGENTS",
		1: "AGENT_GROUP",
		2: "AGENT",
	}
	ServiceLevelAgreement_AssignStrategy_value = map[string]int32{
		"ALL_AGENTS":  0,
		"AGENT_GROUP": 1,
		"AGENT":       2,
	}
)

func (x ServiceLevelAgreement_AssignStrategy) Enum() *ServiceLevelAgreement_AssignStrategy {
	p := new(ServiceLevelAgreement_AssignStrategy)
	*p = x
	return p
}

func (x ServiceLevelAgreement_AssignStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceLevelAgreement_AssignStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[15].Descriptor()
}

func (ServiceLevelAgreement_AssignStrategy) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[15]
}

func (x ServiceLevelAgreement_AssignStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceLevelAgreement_AssignStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceLevelAgreement_AssignStrategy(num)
	return nil
}

// Deprecated: Use ServiceLevelAgreement_AssignStrategy.Descriptor instead.
func (ServiceLevelAgreement_AssignStrategy) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{54, 0}
}

type CountTicketRequest_Range int32

const (
	CountTicketRequest_hour CountTicketRequest_Range = 0
	CountTicketRequest_day  CountTicketRequest_Range = 1
)

// Enum value maps for CountTicketRequest_Range.
var (
	CountTicketRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountTicketRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountTicketRequest_Range) Enum() *CountTicketRequest_Range {
	p := new(CountTicketRequest_Range)
	*p = x
	return p
}

func (x CountTicketRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountTicketRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[16].Descriptor()
}

func (CountTicketRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[16]
}

func (x CountTicketRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountTicketRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountTicketRequest_Range(num)
	return nil
}

// Deprecated: Use CountTicketRequest_Range.Descriptor instead.
func (CountTicketRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{60, 0}
}

type AvgResolveTimeRequest_Range int32

const (
	AvgResolveTimeRequest_hour AvgResolveTimeRequest_Range = 0
	AvgResolveTimeRequest_day  AvgResolveTimeRequest_Range = 1
)

// Enum value maps for AvgResolveTimeRequest_Range.
var (
	AvgResolveTimeRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	AvgResolveTimeRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x AvgResolveTimeRequest_Range) Enum() *AvgResolveTimeRequest_Range {
	p := new(AvgResolveTimeRequest_Range)
	*p = x
	return p
}

func (x AvgResolveTimeRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvgResolveTimeRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[17].Descriptor()
}

func (AvgResolveTimeRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[17]
}

func (x AvgResolveTimeRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AvgResolveTimeRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AvgResolveTimeRequest_Range(num)
	return nil
}

// Deprecated: Use AvgResolveTimeRequest_Range.Descriptor instead.
func (AvgResolveTimeRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{62, 0}
}

type AvailibilityReportRequest_Range int32

const (
	AvailibilityReportRequest_hour  AvailibilityReportRequest_Range = 0
	AvailibilityReportRequest_day   AvailibilityReportRequest_Range = 1
	AvailibilityReportRequest_month AvailibilityReportRequest_Range = 2
)

// Enum value maps for AvailibilityReportRequest_Range.
var (
	AvailibilityReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
		2: "month",
	}
	AvailibilityReportRequest_Range_value = map[string]int32{
		"hour":  0,
		"day":   1,
		"month": 2,
	}
)

func (x AvailibilityReportRequest_Range) Enum() *AvailibilityReportRequest_Range {
	p := new(AvailibilityReportRequest_Range)
	*p = x
	return p
}

func (x AvailibilityReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailibilityReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[18].Descriptor()
}

func (AvailibilityReportRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[18]
}

func (x AvailibilityReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AvailibilityReportRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AvailibilityReportRequest_Range(num)
	return nil
}

// Deprecated: Use AvailibilityReportRequest_Range.Descriptor instead.
func (AvailibilityReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{64, 0}
}

type CountReportRequest_Range int32

const (
	CountReportRequest_hour CountReportRequest_Range = 0
	CountReportRequest_day  CountReportRequest_Range = 1
)

// Enum value maps for CountReportRequest_Range.
var (
	CountReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	CountReportRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x CountReportRequest_Range) Enum() *CountReportRequest_Range {
	p := new(CountReportRequest_Range)
	*p = x
	return p
}

func (x CountReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[19].Descriptor()
}

func (CountReportRequest_Range) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[19]
}

func (x CountReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CountReportRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CountReportRequest_Range(num)
	return nil
}

// Deprecated: Use CountReportRequest_Range.Descriptor instead.
func (CountReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{65, 0}
}

type SCondition_EventTime int32

const (
	SCondition_none    SCondition_EventTime = 0 // not an event
	SCondition_current SCondition_EventTime = 1
	SCondition_latest  SCondition_EventTime = 2
	SCondition_past    SCondition_EventTime = 3 // exists
)

// Enum value maps for SCondition_EventTime.
var (
	SCondition_EventTime_name = map[int32]string{
		0: "none",
		1: "current",
		2: "latest",
		3: "past",
	}
	SCondition_EventTime_value = map[string]int32{
		"none":    0,
		"current": 1,
		"latest":  2,
		"past":    3,
	}
)

func (x SCondition_EventTime) Enum() *SCondition_EventTime {
	p := new(SCondition_EventTime)
	*p = x
	return p
}

func (x SCondition_EventTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCondition_EventTime) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[20].Descriptor()
}

func (SCondition_EventTime) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[20]
}

func (x SCondition_EventTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SCondition_EventTime) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SCondition_EventTime(num)
	return nil
}

// Deprecated: Use SCondition_EventTime.Descriptor instead.
func (SCondition_EventTime) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{82, 0}
}

type SCondition_JoinOperator int32

const (
	SCondition_and SCondition_JoinOperator = 0
	SCondition_or  SCondition_JoinOperator = 1
)

// Enum value maps for SCondition_JoinOperator.
var (
	SCondition_JoinOperator_name = map[int32]string{
		0: "and",
		1: "or",
	}
	SCondition_JoinOperator_value = map[string]int32{
		"and": 0,
		"or":  1,
	}
)

func (x SCondition_JoinOperator) Enum() *SCondition_JoinOperator {
	p := new(SCondition_JoinOperator)
	*p = x
	return p
}

func (x SCondition_JoinOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCondition_JoinOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[21].Descriptor()
}

func (SCondition_JoinOperator) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[21]
}

func (x SCondition_JoinOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SCondition_JoinOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SCondition_JoinOperator(num)
	return nil
}

// Deprecated: Use SCondition_JoinOperator.Descriptor instead.
func (SCondition_JoinOperator) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{82, 1}
}

type SCondition_Function int32

const (
	SCondition_minute_of_day SCondition_Function = 0
	SCondition_hour_of_day   SCondition_Function = 1
	SCondition_day_of_week   SCondition_Function = 2
	SCondition_day_ago       SCondition_Function = 3
)

// Enum value maps for SCondition_Function.
var (
	SCondition_Function_name = map[int32]string{
		0: "minute_of_day",
		1: "hour_of_day",
		2: "day_of_week",
		3: "day_ago",
	}
	SCondition_Function_value = map[string]int32{
		"minute_of_day": 0,
		"hour_of_day":   1,
		"day_of_week":   2,
		"day_ago":       3,
	}
)

func (x SCondition_Function) Enum() *SCondition_Function {
	p := new(SCondition_Function)
	*p = x
	return p
}

func (x SCondition_Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCondition_Function) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[22].Descriptor()
}

func (SCondition_Function) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[22]
}

func (x SCondition_Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SCondition_Function) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SCondition_Function(num)
	return nil
}

// Deprecated: Use SCondition_Function.Descriptor instead.
func (SCondition_Function) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{82, 2}
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                  *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId           *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Priority            *int32          `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	Strategy            *string         `protobuf:"bytes,5,opt,name=strategy" json:"strategy,omitempty"`
	AssignTos           []string        `protobuf:"bytes,6,rep,name=assign_tos,json=assignTos" json:"assign_tos,omitempty"`
	Enabled             *bool           `protobuf:"varint,8,opt,name=enabled" json:"enabled,omitempty"`
	Created             *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Modified            *int64          `protobuf:"varint,12,opt,name=modified" json:"modified,omitempty"`
	Name                *string         `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	Description         *string         `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	AvailableAgentsOnly *bool           `protobuf:"varint,13,opt,name=available_agents_only,json=availableAgentsOnly" json:"available_agents_only,omitempty"` // strategy
	Condition           *SCondition     `protobuf:"bytes,14,opt,name=condition" json:"condition,omitempty"`
	// new condition
	ChannelCondition     *ChannelCondition         `protobuf:"bytes,15,opt,name=channel_condition,json=channelCondition" json:"channel_condition,omitempty"`
	TimmingCondition     *TimmingCondition         `protobuf:"bytes,16,opt,name=timming_condition,json=timmingCondition" json:"timming_condition,omitempty"`
	UserHasRepliedBefore *bool                     `protobuf:"varint,18,opt,name=user_has_replied_before,json=userHasRepliedBefore" json:"user_has_replied_before,omitempty"` // new
	UserConditions       []*UserAttributeCondition `protobuf:"bytes,19,rep,name=user_conditions,json=userConditions" json:"user_conditions,omitempty"`
	UserConditionJoin    *string                   `protobuf:"bytes,20,opt,name=user_condition_join,json=userConditionJoin" json:"user_condition_join,omitempty"` // and, or
	WhenOffline          *bool                     `protobuf:"varint,21,opt,name=when_offline,json=whenOffline" json:"when_offline,omitempty"`                    // only run when there is no online agent
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Rule) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Rule) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Rule) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Rule) GetStrategy() string {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return ""
}

func (x *Rule) GetAssignTos() []string {
	if x != nil {
		return x.AssignTos
	}
	return nil
}

func (x *Rule) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Rule) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Rule) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *Rule) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Rule) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Rule) GetAvailableAgentsOnly() bool {
	if x != nil && x.AvailableAgentsOnly != nil {
		return *x.AvailableAgentsOnly
	}
	return false
}

func (x *Rule) GetCondition() *SCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Rule) GetChannelCondition() *ChannelCondition {
	if x != nil {
		return x.ChannelCondition
	}
	return nil
}

func (x *Rule) GetTimmingCondition() *TimmingCondition {
	if x != nil {
		return x.TimmingCondition
	}
	return nil
}

func (x *Rule) GetUserHasRepliedBefore() bool {
	if x != nil && x.UserHasRepliedBefore != nil {
		return *x.UserHasRepliedBefore
	}
	return false
}

func (x *Rule) GetUserConditions() []*UserAttributeCondition {
	if x != nil {
		return x.UserConditions
	}
	return nil
}

func (x *Rule) GetUserConditionJoin() string {
	if x != nil && x.UserConditionJoin != nil {
		return *x.UserConditionJoin
	}
	return ""
}

func (x *Rule) GetWhenOffline() bool {
	if x != nil && x.WhenOffline != nil {
		return *x.WhenOffline
	}
	return false
}

type UserAttributeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Opeartor *string `protobuf:"bytes,3,opt,name=opeartor" json:"opeartor,omitempty"`
	Value    *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *UserAttributeCondition) Reset() {
	*x = UserAttributeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttributeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttributeCondition) ProtoMessage() {}

func (x *UserAttributeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttributeCondition.ProtoReflect.Descriptor instead.
func (*UserAttributeCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *UserAttributeCondition) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *UserAttributeCondition) GetOpeartor() string {
	if x != nil && x.Opeartor != nil {
		return *x.Opeartor
	}
	return ""
}

func (x *UserAttributeCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type TimmingCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InBusinessHour *bool    `protobuf:"varint,3,opt,name=in_business_hour,json=inBusinessHour" json:"in_business_hour,omitempty"` // if this is true, ignore all other timming conditions
	DaysOfWeek     []string `protobuf:"bytes,2,rep,name=days_of_week,json=daysOfWeek" json:"days_of_week,omitempty"`              // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	MinuteOfDays   []int32  `protobuf:"varint,4,rep,name=minute_of_days,json=minuteOfDays" json:"minute_of_days,omitempty"`       // pair [0-4] [6-9]
}

func (x *TimmingCondition) Reset() {
	*x = TimmingCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimmingCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimmingCondition) ProtoMessage() {}

func (x *TimmingCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimmingCondition.ProtoReflect.Descriptor instead.
func (*TimmingCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *TimmingCondition) GetInBusinessHour() bool {
	if x != nil && x.InBusinessHour != nil {
		return *x.InBusinessHour
	}
	return false
}

func (x *TimmingCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *TimmingCondition) GetMinuteOfDays() []int32 {
	if x != nil {
		return x.MinuteOfDays
	}
	return nil
}

type ChannelCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType *string `protobuf:"bytes,2,opt,name=channel_type,json=channelType" json:"channel_type,omitempty"` // default: all channel
	// for fb comment
	// for messenger
	// for zalo
	IntegrationId []string `protobuf:"bytes,3,rep,name=integration_id,json=integrationId" json:"integration_id,omitempty"` // optional for subiz and email
	// for subiz only
	LocationConditions []*LocationCondition `protobuf:"bytes,4,rep,name=location_conditions,json=locationConditions" json:"location_conditions,omitempty"` // or
	PageUrls           []string             `protobuf:"bytes,5,rep,name=page_urls,json=pageUrls" json:"page_urls,omitempty"`
	PageTitles         []string             `protobuf:"bytes,6,rep,name=page_titles,json=pageTitles" json:"page_titles,omitempty"`
	DeviceTypes        []string             `protobuf:"bytes,7,rep,name=device_types,json=deviceTypes" json:"device_types,omitempty"`                // desktop, mobile, tablet
	BrowserLanguages   []string             `protobuf:"bytes,8,rep,name=browser_languages,json=browserLanguages" json:"browser_languages,omitempty"` // vi, en
	// for email only
	EmailTos      []string `protobuf:"bytes,10,rep,name=email_tos,json=emailTos" json:"email_tos,omitempty"`                // contains
	EmailFroms    []string `protobuf:"bytes,11,rep,name=email_froms,json=emailFroms" json:"email_froms,omitempty"`          // contains
	EmailSubjects []string `protobuf:"bytes,12,rep,name=email_subjects,json=emailSubjects" json:"email_subjects,omitempty"` // contains
	EmailBodies   []string `protobuf:"bytes,13,rep,name=email_bodies,json=emailBodies" json:"email_bodies,omitempty"`       // contains
}

func (x *ChannelCondition) Reset() {
	*x = ChannelCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCondition) ProtoMessage() {}

func (x *ChannelCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCondition.ProtoReflect.Descriptor instead.
func (*ChannelCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelCondition) GetChannelType() string {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return ""
}

func (x *ChannelCondition) GetIntegrationId() []string {
	if x != nil {
		return x.IntegrationId
	}
	return nil
}

func (x *ChannelCondition) GetLocationConditions() []*LocationCondition {
	if x != nil {
		return x.LocationConditions
	}
	return nil
}

func (x *ChannelCondition) GetPageUrls() []string {
	if x != nil {
		return x.PageUrls
	}
	return nil
}

func (x *ChannelCondition) GetPageTitles() []string {
	if x != nil {
		return x.PageTitles
	}
	return nil
}

func (x *ChannelCondition) GetDeviceTypes() []string {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *ChannelCondition) GetBrowserLanguages() []string {
	if x != nil {
		return x.BrowserLanguages
	}
	return nil
}

func (x *ChannelCondition) GetEmailTos() []string {
	if x != nil {
		return x.EmailTos
	}
	return nil
}

func (x *ChannelCondition) GetEmailFroms() []string {
	if x != nil {
		return x.EmailFroms
	}
	return nil
}

func (x *ChannelCondition) GetEmailSubjects() []string {
	if x != nil {
		return x.EmailSubjects
	}
	return nil
}

func (x *ChannelCondition) GetEmailBodies() []string {
	if x != nil {
		return x.EmailBodies
	}
	return nil
}

type LocationCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityCode    *string `protobuf:"bytes,3,opt,name=city_code,json=cityCode" json:"city_code,omitempty"`          // must equal
	CountryCode *string `protobuf:"bytes,4,opt,name=country_code,json=countryCode" json:"country_code,omitempty"` // must equal
}

func (x *LocationCondition) Reset() {
	*x = LocationCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCondition) ProtoMessage() {}

func (x *LocationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCondition.ProtoReflect.Descriptor instead.
func (*LocationCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *LocationCondition) GetCityCode() string {
	if x != nil && x.CityCode != nil {
		return *x.CityCode
	}
	return ""
}

func (x *LocationCondition) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Rules []*Rule         `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *Route) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Route) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RouteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId   *string  `protobuf:"bytes,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Strategy *string  `protobuf:"bytes,3,opt,name=strategy" json:"strategy,omitempty"`
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	GroupId  *string  `protobuf:"bytes,5,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	State    *string  `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Assigned *int64   `protobuf:"varint,7,opt,name=assigned" json:"assigned,omitempty"` // ms
}

func (x *RouteResult) Reset() {
	*x = RouteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResult) ProtoMessage() {}

func (x *RouteResult) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResult.ProtoReflect.Descriptor instead.
func (*RouteResult) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *RouteResult) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *RouteResult) GetStrategy() string {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return ""
}

func (x *RouteResult) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *RouteResult) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *RouteResult) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *RouteResult) GetAssigned() int64 {
	if x != nil && x.Assigned != nil {
		return *x.Assigned
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Type            *string         `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"` // type
	SubizId         *string         `protobuf:"bytes,8,opt,name=subiz_id,json=subizId" json:"subiz_id,omitempty"`
	Id              *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Name            *string         `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	AvatarUrl       *string         `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	ConversationId  *string         `protobuf:"bytes,13,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Fields          []*Field        `protobuf:"bytes,14,rep,name=fields" json:"fields,omitempty"`
	LastPageViewUrl *string         `protobuf:"bytes,15,opt,name=last_page_view_url,json=lastPageViewUrl" json:"last_page_view_url,omitempty"`
	Membership      *string         `protobuf:"bytes,12,opt,name=membership" json:"membership,omitempty"`
	InvitedBy       *common.By      `protobuf:"bytes,16,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *Member) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Member) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Member) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Member) GetSubizId() string {
	if x != nil && x.SubizId != nil {
		return *x.SubizId
	}
	return ""
}

func (x *Member) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Member) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Member) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *Member) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *Member) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Member) GetLastPageViewUrl() string {
	if x != nil && x.LastPageViewUrl != nil {
		return *x.LastPageViewUrl
	}
	return ""
}

func (x *Member) GetMembership() string {
	if x != nil && x.Membership != nil {
		return *x.Membership
	}
	return ""
}

func (x *Member) GetInvitedBy() *common.By {
	if x != nil {
		return x.InvitedBy
	}
	return nil
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id            *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId     *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created       *int64          `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Members       []*Member       `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
	Tags          []*Tag          `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
	Ended         *int64          `protobuf:"varint,12,opt,name=ended" json:"ended,omitempty"`
	State         *string         `protobuf:"bytes,11,opt,name=state" json:"state,omitempty"` // converation state
	Integration   *Integration    `protobuf:"bytes,18,opt,name=integration" json:"integration,omitempty"`
	Actived       *int64          `protobuf:"varint,19,opt,name=actived" json:"actived,omitempty"`
	LastMessageId *string         `protobuf:"bytes,21,opt,name=last_message_id,json=lastMessageId" json:"last_message_id,omitempty"` // internal use only
	LastMessage   *Message        `protobuf:"bytes,20,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	ResponseSec   *int64          `protobuf:"varint,22,opt,name=response_sec,json=responseSec" json:"response_sec,omitempty"`
	ChainId       *string         `protobuf:"bytes,24,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Ticket        *Ticket         `protobuf:"bytes,27,opt,name=ticket" json:"ticket,omitempty"`
	TicketId      *string         `protobuf:"bytes,28,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"` // remove
	AssignedTo    *RouteResult    `protobuf:"bytes,30,opt,name=assigned_to,json=assignedTo" json:"assigned_to,omitempty"`
	FirstMessage  *string         `protobuf:"bytes,31,opt,name=first_message,json=firstMessage" json:"first_message,omitempty"`
	Subject       *string         `protobuf:"bytes,32,opt,name=subject" json:"subject,omitempty"`
	Fields        []*Field        `protobuf:"bytes,33,rep,name=fields" json:"fields,omitempty"`
	Ratings       []*Rating       `protobuf:"bytes,35,rep,name=ratings" json:"ratings,omitempty"`
	Source        *string         `protobuf:"bytes,36,opt,name=source" json:"source,omitempty"` // indicate where does the conversation happended (url)
	// my field
	AgentId *string `protobuf:"bytes,40,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Mute    *bool   `protobuf:"varint,41,opt,name=mute" json:"mute,omitempty"`   // true, false
	Read    *bool   `protobuf:"varint,42,opt,name=read" json:"read,omitempty"`   // true, false
	Watch   *bool   `protobuf:"varint,44,opt,name=watch" json:"watch,omitempty"` // true
	Updated *int64  `protobuf:"varint,43,opt,name=updated" json:"updated,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *Conversation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Conversation) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Conversation) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Conversation) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Conversation) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Conversation) GetEnded() int64 {
	if x != nil && x.Ended != nil {
		return *x.Ended
	}
	return 0
}

func (x *Conversation) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Conversation) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *Conversation) GetActived() int64 {
	if x != nil && x.Actived != nil {
		return *x.Actived
	}
	return 0
}

func (x *Conversation) GetLastMessageId() string {
	if x != nil && x.LastMessageId != nil {
		return *x.LastMessageId
	}
	return ""
}

func (x *Conversation) GetLastMessage() *Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *Conversation) GetResponseSec() int64 {
	if x != nil && x.ResponseSec != nil {
		return *x.ResponseSec
	}
	return 0
}

func (x *Conversation) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *Conversation) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *Conversation) GetTicketId() string {
	if x != nil && x.TicketId != nil {
		return *x.TicketId
	}
	return ""
}

func (x *Conversation) GetAssignedTo() *RouteResult {
	if x != nil {
		return x.AssignedTo
	}
	return nil
}

func (x *Conversation) GetFirstMessage() string {
	if x != nil && x.FirstMessage != nil {
		return *x.FirstMessage
	}
	return ""
}

func (x *Conversation) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Conversation) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Conversation) GetRatings() []*Rating {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *Conversation) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Conversation) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *Conversation) GetMute() bool {
	if x != nil && x.Mute != nil {
		return *x.Mute
	}
	return false
}

func (x *Conversation) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

func (x *Conversation) GetWatch() bool {
	if x != nil && x.Watch != nil {
		return *x.Watch
	}
	return false
}

func (x *Conversation) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

type Rating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rated    *int64  `protobuf:"varint,35,opt,name=rated" json:"rated,omitempty"`                       // rated time ms
	Rating   *int32  `protobuf:"varint,36,opt,name=rating" json:"rating,omitempty"`                     // 1-poor 2 3-average 4 5-great
	RatedBy  *string `protobuf:"bytes,37,opt,name=rated_by,json=ratedBy" json:"rated_by,omitempty"`     // must be user
	NoRating *bool   `protobuf:"varint,38,opt,name=no_rating,json=noRating" json:"no_rating,omitempty"` // use dont want to rate
	Comment  *string `protobuf:"bytes,39,opt,name=comment" json:"comment,omitempty"`
}

func (x *Rating) Reset() {
	*x = Rating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rating) ProtoMessage() {}

func (x *Rating) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rating.ProtoReflect.Descriptor instead.
func (*Rating) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *Rating) GetRated() int64 {
	if x != nil && x.Rated != nil {
		return *x.Rated
	}
	return 0
}

func (x *Rating) GetRating() int32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *Rating) GetRatedBy() string {
	if x != nil && x.RatedBy != nil {
		return *x.RatedBy
	}
	return ""
}

func (x *Rating) GetNoRating() bool {
	if x != nil && x.NoRating != nil {
		return *x.NoRating
	}
	return false
}

func (x *Rating) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type Conversations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Conversations []*Conversation `protobuf:"bytes,3,rep,name=conversations" json:"conversations,omitempty"`
	Anchor        *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	UserIds       []string        `protobuf:"bytes,5,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Errors        []*common.Error `protobuf:"bytes,6,rep,name=errors" json:"errors,omitempty"`
}

func (x *Conversations) Reset() {
	*x = Conversations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversations) ProtoMessage() {}

func (x *Conversations) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversations.ProtoReflect.Descriptor instead.
func (*Conversations) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *Conversations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversations) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *Conversations) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *Conversations) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *Conversations) GetErrors() []*common.Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Keyword   *string         `protobuf:"bytes,4,opt,name=keyword" json:"keyword,omitempty"`
	Limit     *int32          `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	BeforeId  *string         `protobuf:"bytes,6,opt,name=before_id,json=beforeId" json:"before_id,omitempty"`
	AfterId   *string         `protobuf:"bytes,7,opt,name=after_id,json=afterId" json:"after_id,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *Search) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Search) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Search) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *Search) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *Search) GetBeforeId() string {
	if x != nil && x.BeforeId != nil {
		return *x.BeforeId
	}
	return ""
}

func (x *Search) GetAfterId() string {
	if x != nil && x.AfterId != nil {
		return *x.AfterId
	}
	return ""
}

type ListConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// optional string state = 4; // empty or unassigned
	MemberId *string `protobuf:"bytes,8,opt,name=member_id,json=memberId" json:"member_id,omitempty"` // ignore
	// optional string group_by = 9;
	IntegrationId *string  `protobuf:"bytes,10,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	UserId        *string  `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Limit         *int32   `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Anchor        *string  `protobuf:"bytes,6,opt,name=anchor" json:"anchor,omitempty"`
	AgentId       *string  `protobuf:"bytes,12,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"` // list conversations of agent
	UserIds       []string `protobuf:"bytes,13,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"` // for live, only return id and state
	State         *string  `protobuf:"bytes,14,opt,name=state" json:"state,omitempty"`
}

func (x *ListConversationsRequest) Reset() {
	*x = ListConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRequest) ProtoMessage() {}

func (x *ListConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *ListConversationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListConversationsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListConversationsRequest) GetMemberId() string {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return ""
}

func (x *ListConversationsRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListConversationsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListConversationsRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ListConversationsRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListConversationsRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	StartId        *string         `protobuf:"bytes,4,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit          *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *ListEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListEventsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListEventsRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ListEventsRequest) GetStartId() string {
	if x != nil && x.StartId != nil {
		return *x.StartId
	}
	return ""
}

func (x *ListEventsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListConversationsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChannelId *string `protobuf:"bytes,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"` // if null -> all channel
	UserId    *string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`          // must be visitor id
	StartId   *string `protobuf:"bytes,4,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit     *int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListConversationsByUserRequest) Reset() {
	*x = ListConversationsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsByUserRequest) ProtoMessage() {}

func (x *ListConversationsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsByUserRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsByUserRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *ListConversationsByUserRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetStartId() string {
	if x != nil && x.StartId != nil {
		return *x.StartId
	}
	return ""
}

func (x *ListConversationsByUserRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type EsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId      *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string  `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	MemberIds      []string `protobuf:"bytes,5,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	Text           *string  `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Attachments    []string `protobuf:"bytes,7,rep,name=attachments" json:"attachments,omitempty"`
	Fields         []string `protobuf:"bytes,8,rep,name=fields" json:"fields,omitempty"`
}

func (x *EsMessage) Reset() {
	*x = EsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsMessage) ProtoMessage() {}

func (x *EsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsMessage.ProtoReflect.Descriptor instead.
func (*EsMessage) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *EsMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EsMessage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *EsMessage) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *EsMessage) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *EsMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EsMessage) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EsMessage) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`
	Text           *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Format         *string         `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	Attachments    []*Attachment   `protobuf:"bytes,4,rep,name=attachments" json:"attachments,omitempty"`
	Fields         []*Field        `protobuf:"bytes,10,rep,name=fields" json:"fields,omitempty"`
	IntegrationId  *string         `protobuf:"bytes,15,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	ChainId        *string         `protobuf:"bytes,16,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	// used for reaction and delivery status, could be ignore
	Pongs     []*MessagePong `protobuf:"bytes,17,rep,name=pongs" json:"pongs,omitempty"`
	Revisions []*Revision    `protobuf:"bytes,18,rep,name=revisions" json:"revisions,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *Message) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Message) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Message) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *Message) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Message) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *Message) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Message) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *Message) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *Message) GetPongs() []*MessagePong {
	if x != nil {
		return x.Pongs
	}
	return nil
}

func (x *Message) GetRevisions() []*Revision {
	if x != nil {
		return x.Revisions
	}
	return nil
}

type MessagePong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId *string `protobuf:"bytes,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Type     *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Created  *int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	AckError *string `protobuf:"bytes,6,opt,name=ack_error,json=ackError" json:"ack_error,omitempty"` // used in ack
	Count    *int64  `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
}

func (x *MessagePong) Reset() {
	*x = MessagePong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePong) ProtoMessage() {}

func (x *MessagePong) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePong.ProtoReflect.Descriptor instead.
func (*MessagePong) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17}
}

func (x *MessagePong) GetMemberId() string {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return ""
}

func (x *MessagePong) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MessagePong) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *MessagePong) GetAckError() string {
	if x != nil && x.AckError != nil {
		return *x.AckError
	}
	return ""
}

func (x *MessagePong) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        *string       `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	Format      *string       `protobuf:"bytes,6,opt,name=format" json:"format,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,7,rep,name=attachments" json:"attachments,omitempty"`
	Fields      []*Field      `protobuf:"bytes,8,rep,name=fields" json:"fields,omitempty"`
	Created     *int64        `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
}

func (x *Revision) Reset() {
	*x = Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{18}
}

func (x *Revision) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Revision) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *Revision) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Revision) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Revision) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Key   *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{19}
}

func (x *Field) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Field) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id   *string `protobuf:"bytes,15,opt,name=id" json:"id,omitempty"`
	// post back
	Title     *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Payload   *string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	ImageUrl  *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	ContentId *string `protobuf:"bytes,10,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	//	optional RawEvent event = 12;
	Url         *string `protobuf:"bytes,14,opt,name=url" json:"url,omitempty"`
	PhoneNumber *string `protobuf:"bytes,16,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{20}
}

func (x *Button) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Button) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Button) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Button) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

func (x *Button) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Button) GetContentId() string {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return ""
}

func (x *Button) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Button) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

type AskInfomationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *string `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Answer    *string `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
}

func (x *AskInfomationAnswer) Reset() {
	*x = AskInfomationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskInfomationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskInfomationAnswer) ProtoMessage() {}

func (x *AskInfomationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskInfomationAnswer.ProtoReflect.Descriptor instead.
func (*AskInfomationAnswer) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{21}
}

func (x *AskInfomationAnswer) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *AskInfomationAnswer) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

type AskInfomation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question  *string `protobuf:"bytes,2,opt,name=question" json:"question,omitempty"`
	InputType *string `protobuf:"bytes,3,opt,name=input_type,json=inputType" json:"input_type,omitempty"`
	Key       *string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"` // user.name user.phone
	Answer    *string `protobuf:"bytes,5,opt,name=answer" json:"answer,omitempty"`
	Answered  *int64  `protobuf:"varint,6,opt,name=answered" json:"answered,omitempty"`
}

func (x *AskInfomation) Reset() {
	*x = AskInfomation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskInfomation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskInfomation) ProtoMessage() {}

func (x *AskInfomation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskInfomation.ProtoReflect.Descriptor instead.
func (*AskInfomation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{22}
}

func (x *AskInfomation) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

func (x *AskInfomation) GetInputType() string {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return ""
}

func (x *AskInfomation) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *AskInfomation) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *AskInfomation) GetAnswered() int64 {
	if x != nil && x.Answered != nil {
		return *x.Answered
	}
	return 0
}

type ContentTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl       *string   `protobuf:"bytes,2,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Description    *string   `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Title          *string   `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Url            *string   `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Labels         []string  `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty"`
	Availability   *string   `protobuf:"bytes,9,opt,name=availability" json:"availability,omitempty"`
	Price          *float32  `protobuf:"fixed32,10,opt,name=price" json:"price,omitempty"`
	Currency       *string   `protobuf:"bytes,11,opt,name=currency" json:"currency,omitempty"`
	SalePrice      *float32  `protobuf:"fixed32,12,opt,name=sale_price,json=salePrice" json:"sale_price,omitempty"`
	Categories     []string  `protobuf:"bytes,14,rep,name=categories" json:"categories,omitempty"`
	AttachmentUrls []string  `protobuf:"bytes,20,rep,name=attachment_urls,json=attachmentUrls" json:"attachment_urls,omitempty"`
	RelatedIds     []string  `protobuf:"bytes,21,rep,name=related_ids,json=relatedIds" json:"related_ids,omitempty"` // releated content ids
	DefaultAction  *Button   `protobuf:"bytes,22,opt,name=default_action,json=defaultAction" json:"default_action,omitempty"`
	Buttons        []*Button `protobuf:"bytes,23,rep,name=buttons" json:"buttons,omitempty"`
	Id             *string   `protobuf:"bytes,24,opt,name=id" json:"id,omitempty"`
}

func (x *ContentTemplate) Reset() {
	*x = ContentTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTemplate) ProtoMessage() {}

func (x *ContentTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTemplate.ProtoReflect.Descriptor instead.
func (*ContentTemplate) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{23}
}

func (x *ContentTemplate) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *ContentTemplate) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ContentTemplate) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ContentTemplate) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ContentTemplate) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContentTemplate) GetAvailability() string {
	if x != nil && x.Availability != nil {
		return *x.Availability
	}
	return ""
}

func (x *ContentTemplate) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ContentTemplate) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ContentTemplate) GetSalePrice() float32 {
	if x != nil && x.SalePrice != nil {
		return *x.SalePrice
	}
	return 0
}

func (x *ContentTemplate) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ContentTemplate) GetAttachmentUrls() []string {
	if x != nil {
		return x.AttachmentUrls
	}
	return nil
}

func (x *ContentTemplate) GetRelatedIds() []string {
	if x != nil {
		return x.RelatedIds
	}
	return nil
}

func (x *ContentTemplate) GetDefaultAction() *Button {
	if x != nil {
		return x.DefaultAction
	}
	return nil
}

func (x *ContentTemplate) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *ContentTemplate) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type GenericElementTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         *string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ImageUrl      *string   `protobuf:"bytes,3,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Subtitle      *string   `protobuf:"bytes,4,opt,name=subtitle" json:"subtitle,omitempty"`
	DefaultAction *Button   `protobuf:"bytes,5,opt,name=default_action,json=defaultAction" json:"default_action,omitempty"`
	Buttons       []*Button `protobuf:"bytes,6,rep,name=buttons" json:"buttons,omitempty"`
	Id            *string   `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"` // fb product id
}

func (x *GenericElementTemplate) Reset() {
	*x = GenericElementTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericElementTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericElementTemplate) ProtoMessage() {}

func (x *GenericElementTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericElementTemplate.ProtoReflect.Descriptor instead.
func (*GenericElementTemplate) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{24}
}

func (x *GenericElementTemplate) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GenericElementTemplate) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *GenericElementTemplate) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *GenericElementTemplate) GetDefaultAction() *Button {
	if x != nil {
		return x.DefaultAction
	}
	return nil
}

func (x *GenericElementTemplate) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *GenericElementTemplate) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,12,opt,name=type" json:"type,omitempty"`
	// file
	Mimetype     *string `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	Url          *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	ThumbnailUrl *string `protobuf:"bytes,4,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Name         *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description  *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	//optional string data = 7; // for custom data
	Length *int32 `protobuf:"varint,15,opt,name=length" json:"length,omitempty"`
	Size   *int32 `protobuf:"varint,13,opt,name=size" json:"size,omitempty"` // byte
	// generic
	Elements []*GenericElementTemplate `protobuf:"bytes,8,rep,name=elements" json:"elements,omitempty"`
	// preview
	Title         *string              `protobuf:"bytes,9,opt,name=title" json:"title,omitempty"`
	Color         *string              `protobuf:"bytes,10,opt,name=color" json:"color,omitempty"`
	Pretext       *string              `protobuf:"bytes,11,opt,name=pretext" json:"pretext,omitempty"`
	Buttons       []*Button            `protobuf:"bytes,16,rep,name=buttons" json:"buttons,omitempty"`
	AskInfo       *AskInfomation       `protobuf:"bytes,17,opt,name=ask_info,json=askInfo" json:"ask_info,omitempty"`
	AskInfoAnswer *AskInfomationAnswer `protobuf:"bytes,18,opt,name=ask_info_answer,json=askInfoAnswer" json:"ask_info_answer,omitempty"` //repeated string inputtype = 17;
	Form          *Form                `protobuf:"bytes,20,opt,name=form" json:"form,omitempty"`
	FormSubmit    *FormSubmit          `protobuf:"bytes,21,opt,name=form_submit,json=formSubmit" json:"form_submit,omitempty"`
	// content template
	Contents     []*ContentTemplate `protobuf:"bytes,22,rep,name=contents" json:"contents,omitempty"`
	QuickReplies []*QuickReply      `protobuf:"bytes,23,rep,name=quick_replies,json=quickReplies" json:"quick_replies,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{25}
}

func (x *Attachment) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Attachment) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Attachment) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *Attachment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Attachment) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Attachment) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *Attachment) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Attachment) GetElements() []*GenericElementTemplate {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Attachment) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Attachment) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *Attachment) GetPretext() string {
	if x != nil && x.Pretext != nil {
		return *x.Pretext
	}
	return ""
}

func (x *Attachment) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Attachment) GetAskInfo() *AskInfomation {
	if x != nil {
		return x.AskInfo
	}
	return nil
}

func (x *Attachment) GetAskInfoAnswer() *AskInfomationAnswer {
	if x != nil {
		return x.AskInfoAnswer
	}
	return nil
}

func (x *Attachment) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Attachment) GetFormSubmit() *FormSubmit {
	if x != nil {
		return x.FormSubmit
	}
	return nil
}

func (x *Attachment) GetContents() []*ContentTemplate {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Attachment) GetQuickReplies() []*QuickReply {
	if x != nil {
		return x.QuickReplies
	}
	return nil
}

type QuickReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType *string `protobuf:"bytes,2,opt,name=content_type,json=contentType" json:"content_type,omitempty"` // should be 'text'
	Title       *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Payload     *string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	ImageUrl    *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (x *QuickReply) Reset() {
	*x = QuickReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickReply) ProtoMessage() {}

func (x *QuickReply) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickReply.ProtoReflect.Descriptor instead.
func (*QuickReply) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{26}
}

func (x *QuickReply) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *QuickReply) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *QuickReply) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

func (x *QuickReply) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type Form struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     *string      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	State     *string      `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Fields    []*FormField `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
	SubmitUrl *string      `protobuf:"bytes,5,opt,name=submit_url,json=submitUrl" json:"submit_url,omitempty"`
}

func (x *Form) Reset() {
	*x = Form{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Form) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Form) ProtoMessage() {}

func (x *Form) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Form.ProtoReflect.Descriptor instead.
func (*Form) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{27}
}

func (x *Form) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Form) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Form) GetFields() []*FormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Form) GetSubmitUrl() string {
	if x != nil && x.SubmitUrl != nil {
		return *x.SubmitUrl
	}
	return ""
}

type FormSubmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormMessageId *string      `protobuf:"bytes,2,opt,name=form_message_id,json=formMessageId" json:"form_message_id,omitempty"`
	Fields        []*FormField `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	State         *string      `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

func (x *FormSubmit) Reset() {
	*x = FormSubmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSubmit) ProtoMessage() {}

func (x *FormSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSubmit.ProtoReflect.Descriptor instead.
func (*FormSubmit) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{28}
}

func (x *FormSubmit) GetFormMessageId() string {
	if x != nil && x.FormMessageId != nil {
		return *x.FormMessageId
	}
	return ""
}

func (x *FormSubmit) GetFields() []*FormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FormSubmit) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type FormField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType *string  `protobuf:"bytes,2,opt,name=input_type,json=inputType" json:"input_type,omitempty"`
	Items     []string `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	State     *string  `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Title     *string  `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	ImageUrl  *string  `protobuf:"bytes,6,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Name      *string  `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Answer    *string  `protobuf:"bytes,8,opt,name=answer" json:"answer,omitempty"`
	Answered  *int64   `protobuf:"varint,9,opt,name=answered" json:"answered,omitempty"`
}

func (x *FormField) Reset() {
	*x = FormField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormField) ProtoMessage() {}

func (x *FormField) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormField.ProtoReflect.Descriptor instead.
func (*FormField) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{29}
}

func (x *FormField) GetInputType() string {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return ""
}

func (x *FormField) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FormField) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *FormField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FormField) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FormField) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FormField) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *FormField) GetAnswered() int64 {
	if x != nil && x.Answered != nil {
		return *x.Answered
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id        *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Title     *string         `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Created   *int64          `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Modified  *int64          `protobuf:"varint,6,opt,name=modified" json:"modified,omitempty"`
	CreatorId *string         `protobuf:"bytes,7,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	Color     *string         `protobuf:"bytes,8,opt,name=color" json:"color,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{30}
}

func (x *Tag) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tag) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Tag) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Tag) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Tag) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Tag) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *Tag) GetCreatorId() string {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return ""
}

func (x *Tag) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

type TemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string  `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Key  *string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Ids  []string `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
}

func (x *TemplateData) Reset() {
	*x = TemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateData) ProtoMessage() {}

func (x *TemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateData.ProtoReflect.Descriptor instead.
func (*TemplateData) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{31}
}

func (x *TemplateData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *TemplateData) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TemplateData) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id           *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId    *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Keys         []string        `protobuf:"bytes,6,rep,name=keys" json:"keys,omitempty"`
	ChannelType  *string         `protobuf:"bytes,17,opt,name=channel_type,json=channelType" json:"channel_type,omitempty"`
	Message      *Message        `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	Data         []*TemplateData `protobuf:"bytes,18,rep,name=data" json:"data,omitempty"`
	IsPublic     *bool           `protobuf:"varint,11,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	Created      *int64          `protobuf:"varint,12,opt,name=created" json:"created,omitempty"`
	Modified     *int64          `protobuf:"varint,13,opt,name=modified" json:"modified,omitempty"`
	Creator      *string         `protobuf:"bytes,14,opt,name=creator" json:"creator,omitempty"`
	LatestPicked *int64          `protobuf:"varint,15,opt,name=latest_picked,json=latestPicked" json:"latest_picked,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{32}
}

func (x *Template) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Template) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Template) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Template) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Template) GetChannelType() string {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return ""
}

func (x *Template) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Template) GetData() []*TemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Template) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *Template) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Template) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *Template) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

func (x *Template) GetLatestPicked() int64 {
	if x != nil && x.LatestPicked != nil {
		return *x.LatestPicked
	}
	return 0
}

type SearchTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Anchor    *string         `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Limit     *int32          `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	AccountId *string         `protobuf:"bytes,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OrderBy   *string         `protobuf:"bytes,6,opt,name=order_by,json=orderBy" json:"order_by,omitempty"` // latest_picked
}

func (x *SearchTemplate) Reset() {
	*x = SearchTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTemplate) ProtoMessage() {}

func (x *SearchTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTemplate.ProtoReflect.Descriptor instead.
func (*SearchTemplate) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{33}
}

func (x *SearchTemplate) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchTemplate) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchTemplate) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchTemplate) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SearchTemplate) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

type Templates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Templates []*Template     `protobuf:"bytes,2,rep,name=templates" json:"templates,omitempty"`
	Anchor    *string         `protobuf:"bytes,3,opt,name=anchor" json:"anchor,omitempty"`
	Total     *int64          `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
}

func (x *Templates) Reset() {
	*x = Templates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Templates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Templates) ProtoMessage() {}

func (x *Templates) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Templates.ProtoReflect.Descriptor instead.
func (*Templates) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{34}
}

func (x *Templates) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Templates) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Templates) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *Templates) GetTotal() int64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Tags []*Tag          `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{35}
}

func (x *Tags) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tags) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Postback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Button  *Button  `protobuf:"bytes,3,opt,name=button" json:"button,omitempty"`
}

func (x *Postback) Reset() {
	*x = Postback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postback) ProtoMessage() {}

func (x *Postback) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postback.ProtoReflect.Descriptor instead.
func (*Postback) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{36}
}

func (x *Postback) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Postback) GetButton() *Button {
	if x != nil {
		return x.Button
	}
	return nil
}

type Integrations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId    *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Integrations []*Integration  `protobuf:"bytes,3,rep,name=integrations" json:"integrations,omitempty"`
}

func (x *Integrations) Reset() {
	*x = Integrations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrations) ProtoMessage() {}

func (x *Integrations) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrations.ProtoReflect.Descriptor instead.
func (*Integrations) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{37}
}

func (x *Integrations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Integrations) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Integrations) GetIntegrations() []*Integration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId     *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConnectorId   *string         `protobuf:"bytes,3,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	LogoUrl       *string         `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	Name          *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	ConnectorType *string         `protobuf:"bytes,12,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"` // see client.Client_ChannelType
	Integrated    *int64          `protobuf:"varint,6,opt,name=integrated" json:"integrated,omitempty"`
	Updated       *int64          `protobuf:"varint,7,opt,name=updated" json:"updated,omitempty"`
	State         *string         `protobuf:"bytes,8,opt,name=state" json:"state,omitempty"`
	Id            *string         `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"` // generated by connector, must be format of accid.XXX.connectorid
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{38}
}

func (x *Integration) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Integration) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Integration) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *Integration) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *Integration) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Integration) GetConnectorType() string {
	if x != nil && x.ConnectorType != nil {
		return *x.ConnectorType
	}
	return ""
}

func (x *Integration) GetIntegrated() int64 {
	if x != nil && x.Integrated != nil {
		return *x.Integrated
	}
	return 0
}

func (x *Integration) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *Integration) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Integration) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type SearchMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	UserIds        []string        `protobuf:"bytes,4,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Query          *string         `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Anchor         *string         `protobuf:"bytes,6,opt,name=anchor" json:"anchor,omitempty"`
	Limit          *int32          `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (x *SearchMessageRequest) Reset() {
	*x = SearchMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMessageRequest) ProtoMessage() {}

func (x *SearchMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMessageRequest.ProtoReflect.Descriptor instead.
func (*SearchMessageRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{39}
}

func (x *SearchMessageRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchMessageRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SearchMessageRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *SearchMessageRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SearchMessageRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SearchMessageRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchMessageRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{40}
}

func (x *TagRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TagRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TagRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *TagRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type CountByTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string  `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	TagIds        []string `protobuf:"bytes,4,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	From          *int32   `protobuf:"varint,5,opt,name=from" json:"from,omitempty"` // deprecated
	To            *int32   `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`     // deprecated
	Range         *string  `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	HasUser       *bool    `protobuf:"varint,9,opt,name=has_user,json=hasUser" json:"has_user,omitempty"`
	FromHour      *int32   `protobuf:"varint,10,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32   `protobuf:"varint,11,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
}

func (x *CountByTagsRequest) Reset() {
	*x = CountByTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTagsRequest) ProtoMessage() {}

func (x *CountByTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTagsRequest.ProtoReflect.Descriptor instead.
func (*CountByTagsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{41}
}

func (x *CountByTagsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountByTagsRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountByTagsRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *CountByTagsRequest) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *CountByTagsRequest) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *CountByTagsRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountByTagsRequest) GetHasUser() bool {
	if x != nil && x.HasUser != nil {
		return *x.HasUser
	}
	return false
}

func (x *CountByTagsRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *CountByTagsRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

type CountByTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId *string `protobuf:"bytes,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	Data  []int64 `protobuf:"varint,3,rep,name=data" json:"data,omitempty"`
}

func (x *CountByTag) Reset() {
	*x = CountByTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTag) ProtoMessage() {}

func (x *CountByTag) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTag.ProtoReflect.Descriptor instead.
func (*CountByTag) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{42}
}

func (x *CountByTag) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountByTag) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type CountByTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CountByTag `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (x *CountByTagsResponse) Reset() {
	*x = CountByTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTagsResponse) ProtoMessage() {}

func (x *CountByTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTagsResponse.ProtoReflect.Descriptor instead.
func (*CountByTagsResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{43}
}

func (x *CountByTagsResponse) GetData() []*CountByTag {
	if x != nil {
		return x.Data
	}
	return nil
}

type AvgResponseTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	From          *int32  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"` // deprecated
	To            *int32  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`     // deprecated
	FromHour      *int32  `protobuf:"varint,7,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,8,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
}

func (x *AvgResponseTimeRequest) Reset() {
	*x = AvgResponseTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResponseTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResponseTimeRequest) ProtoMessage() {}

func (x *AvgResponseTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResponseTimeRequest.ProtoReflect.Descriptor instead.
func (*AvgResponseTimeRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{44}
}

func (x *AvgResponseTimeRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvgResponseTimeRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *AvgResponseTimeRequest) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *AvgResponseTimeRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

type AvgResponseTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseSec *float64 `protobuf:"fixed64,2,opt,name=avg_response_sec,json=avgResponseSec" json:"avg_response_sec,omitempty"`
}

func (x *AvgResponseTimeResponse) Reset() {
	*x = AvgResponseTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResponseTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResponseTimeResponse) ProtoMessage() {}

func (x *AvgResponseTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResponseTimeResponse.ProtoReflect.Descriptor instead.
func (*AvgResponseTimeResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{45}
}

func (x *AvgResponseTimeResponse) GetAvgResponseSec() float64 {
	if x != nil && x.AvgResponseSec != nil {
		return *x.AvgResponseSec
	}
	return 0
}

type TotalConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConversation *int64 `protobuf:"varint,2,opt,name=total_conversation,json=totalConversation" json:"total_conversation,omitempty"`
}

func (x *TotalConversationResponse) Reset() {
	*x = TotalConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalConversationResponse) ProtoMessage() {}

func (x *TotalConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalConversationResponse.ProtoReflect.Descriptor instead.
func (*TotalConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{46}
}

func (x *TotalConversationResponse) GetTotalConversation() int64 {
	if x != nil && x.TotalConversation != nil {
		return *x.TotalConversation
	}
	return 0
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id             *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ConversationId *string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{47}
}

func (x *Chain) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Chain) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Chain) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context        `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string                `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string                `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string                `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	State          *string                `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority       *string                `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	Duedate        *int64                 `protobuf:"varint,7,opt,name=duedate" json:"duedate,omitempty"`
	Subject        *string                `protobuf:"bytes,8,opt,name=subject" json:"subject,omitempty"`
	Created        *int64                 `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Attributes     []*TicketAttributeData `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty"` // remove
	Updated        *int64                 `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	UserIds        []string               `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	AgentIds       []string               `protobuf:"bytes,13,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	IsAssigned     *bool                  `protobuf:"varint,14,opt,name=is_assigned,json=isAssigned" json:"is_assigned,omitempty"`
	UpdatedBy      *string                `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	CreatedBy      *string                `protobuf:"bytes,16,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Note           *string                `protobuf:"bytes,19,opt,name=note" json:"note,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{48}
}

func (x *Ticket) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Ticket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Ticket) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *Ticket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Ticket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Ticket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *Ticket) GetDuedate() int64 {
	if x != nil && x.Duedate != nil {
		return *x.Duedate
	}
	return 0
}

func (x *Ticket) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Ticket) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Ticket) GetAttributes() []*TicketAttributeData {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Ticket) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *Ticket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *Ticket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *Ticket) GetIsAssigned() bool {
	if x != nil && x.IsAssigned != nil {
		return *x.IsAssigned
	}
	return false
}

func (x *Ticket) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *Ticket) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Ticket) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type TicketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	State     *string          `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"` // "", "open", "resolved"
	AgentId   *string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	OrderBy   *string          `protobuf:"bytes,5,opt,name=order_by,json=orderBy" json:"order_by,omitempty"` // created, duedate
	Anchor    *string          `protobuf:"bytes,6,opt,name=anchor" json:"anchor,omitempty"`
	Limit     *int32           `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	TagIds    []string         `protobuf:"bytes,8,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	Created   *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	Priority  *string          `protobuf:"bytes,10,opt,name=priority" json:"priority,omitempty"`
}

func (x *TicketListRequest) Reset() {
	*x = TicketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListRequest) ProtoMessage() {}

func (x *TicketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListRequest.ProtoReflect.Descriptor instead.
func (*TicketListRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{49}
}

func (x *TicketListRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TicketListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TicketListRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TicketListRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *TicketListRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *TicketListRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *TicketListRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *TicketListRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *TicketListRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TicketListRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

type Tickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tickets   []*Ticket       `protobuf:"bytes,3,rep,name=tickets" json:"tickets,omitempty"`
	Anchor    *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *Tickets) Reset() {
	*x = Tickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickets) ProtoMessage() {}

func (x *Tickets) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickets.ProtoReflect.Descriptor instead.
func (*Tickets) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{50}
}

func (x *Tickets) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tickets) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Tickets) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Tickets) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type ESTickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tickets   []*ESTicket     `protobuf:"bytes,3,rep,name=tickets" json:"tickets,omitempty"`
	Anchor    *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *ESTickets) Reset() {
	*x = ESTickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESTickets) ProtoMessage() {}

func (x *ESTickets) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESTickets.ProtoReflect.Descriptor instead.
func (*ESTickets) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{51}
}

func (x *ESTickets) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ESTickets) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESTickets) GetTickets() []*ESTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *ESTickets) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type TicketAttributeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TicketId   *string         `protobuf:"bytes,3,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Key        *string         `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	State      *string         `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Created    *int64          `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Modified   *int64          `protobuf:"varint,8,opt,name=modified" json:"modified,omitempty"`
	Text       *string         `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	Number     *float64        `protobuf:"fixed64,11,opt,name=number" json:"number,omitempty"`
	Boolean    *bool           `protobuf:"varint,12,opt,name=boolean" json:"boolean,omitempty"`
	Datetime   *string         `protobuf:"bytes,13,opt,name=datetime" json:"datetime,omitempty"`
	List       []string        `protobuf:"bytes,14,rep,name=list" json:"list,omitempty"`
	Setter     *string         `protobuf:"bytes,16,opt,name=setter" json:"setter,omitempty"`
	SetterType *string         `protobuf:"bytes,17,opt,name=setter_type,json=setterType" json:"setter_type,omitempty"`
}

func (x *TicketAttributeData) Reset() {
	*x = TicketAttributeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketAttributeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketAttributeData) ProtoMessage() {}

func (x *TicketAttributeData) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketAttributeData.ProtoReflect.Descriptor instead.
func (*TicketAttributeData) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{52}
}

func (x *TicketAttributeData) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TicketAttributeData) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TicketAttributeData) GetTicketId() string {
	if x != nil && x.TicketId != nil {
		return *x.TicketId
	}
	return ""
}

func (x *TicketAttributeData) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TicketAttributeData) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TicketAttributeData) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *TicketAttributeData) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *TicketAttributeData) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TicketAttributeData) GetNumber() float64 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *TicketAttributeData) GetBoolean() bool {
	if x != nil && x.Boolean != nil {
		return *x.Boolean
	}
	return false
}

func (x *TicketAttributeData) GetDatetime() string {
	if x != nil && x.Datetime != nil {
		return *x.Datetime
	}
	return ""
}

func (x *TicketAttributeData) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TicketAttributeData) GetSetter() string {
	if x != nil && x.Setter != nil {
		return *x.Setter
	}
	return ""
}

func (x *TicketAttributeData) GetSetterType() string {
	if x != nil && x.SetterType != nil {
		return *x.SetterType
	}
	return ""
}

type ServiceLevelAgreementTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority         *string `protobuf:"bytes,1,opt,name=priority" json:"priority,omitempty"`
	ResolveWithin    *int32  `protobuf:"varint,2,opt,name=resolve_within,json=resolveWithin" json:"resolve_within,omitempty"` // hours
	OperationalHours *string `protobuf:"bytes,3,opt,name=operational_hours,json=operationalHours" json:"operational_hours,omitempty"`
	Notification     *bool   `protobuf:"varint,4,opt,name=notification" json:"notification,omitempty"`
}

func (x *ServiceLevelAgreementTarget) Reset() {
	*x = ServiceLevelAgreementTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreementTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreementTarget) ProtoMessage() {}

func (x *ServiceLevelAgreementTarget) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreementTarget.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreementTarget) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{53}
}

func (x *ServiceLevelAgreementTarget) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ServiceLevelAgreementTarget) GetResolveWithin() int32 {
	if x != nil && x.ResolveWithin != nil {
		return *x.ResolveWithin
	}
	return 0
}

func (x *ServiceLevelAgreementTarget) GetOperationalHours() string {
	if x != nil && x.OperationalHours != nil {
		return *x.OperationalHours
	}
	return ""
}

func (x *ServiceLevelAgreementTarget) GetNotification() bool {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return false
}

type ServiceLevelAgreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context                `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string                        `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string                        `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name        *string                        `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description *string                        `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Strategy    *string                        `protobuf:"bytes,6,opt,name=strategy" json:"strategy,omitempty"`
	AssignTo    *string                        `protobuf:"bytes,7,opt,name=assign_to,json=assignTo" json:"assign_to,omitempty"` // agent id, group id
	Targets     []*ServiceLevelAgreementTarget `protobuf:"bytes,8,rep,name=targets" json:"targets,omitempty"`
	IsDefault   *bool                          `protobuf:"varint,9,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Created     *int64                         `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated     *int64                         `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	Order       *int32                         `protobuf:"varint,12,opt,name=order" json:"order,omitempty"`
}

func (x *ServiceLevelAgreement) Reset() {
	*x = ServiceLevelAgreement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreement) ProtoMessage() {}

func (x *ServiceLevelAgreement) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreement.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreement) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{54}
}

func (x *ServiceLevelAgreement) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ServiceLevelAgreement) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ServiceLevelAgreement) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ServiceLevelAgreement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceLevelAgreement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ServiceLevelAgreement) GetStrategy() string {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return ""
}

func (x *ServiceLevelAgreement) GetAssignTo() string {
	if x != nil && x.AssignTo != nil {
		return *x.AssignTo
	}
	return ""
}

func (x *ServiceLevelAgreement) GetTargets() []*ServiceLevelAgreementTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ServiceLevelAgreement) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *ServiceLevelAgreement) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ServiceLevelAgreement) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *ServiceLevelAgreement) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type ServiceLevelAgreements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                    *common.Context          `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	ServiceLevelAgreements []*ServiceLevelAgreement `protobuf:"bytes,2,rep,name=service_level_agreements,json=serviceLevelAgreements" json:"service_level_agreements,omitempty"`
}

func (x *ServiceLevelAgreements) Reset() {
	*x = ServiceLevelAgreements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelAgreements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelAgreements) ProtoMessage() {}

func (x *ServiceLevelAgreements) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelAgreements.ProtoReflect.Descriptor instead.
func (*ServiceLevelAgreements) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{55}
}

func (x *ServiceLevelAgreements) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ServiceLevelAgreements) GetServiceLevelAgreements() []*ServiceLevelAgreement {
	if x != nil {
		return x.ServiceLevelAgreements
	}
	return nil
}

type DeleteTicketAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key *string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *DeleteTicketAttrRequest) Reset() {
	*x = DeleteTicketAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketAttrRequest) ProtoMessage() {}

func (x *DeleteTicketAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketAttrRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketAttrRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteTicketAttrRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteTicketAttrRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type GetTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{57}
}

func (x *GetTicketRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GetTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *GetTicketRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *GetTicketRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type DeleteTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *DeleteTicketRequest) Reset() {
	*x = DeleteTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketRequest) ProtoMessage() {}

func (x *DeleteTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteTicketRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *DeleteTicketRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *DeleteTicketRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type ReportTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId     *string  `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string  `protobuf:"bytes,4,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	State         *string  `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority      *string  `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	AgentIds      []string `protobuf:"bytes,7,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	TagIds        []string `protobuf:"bytes,8,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	CreatedAt     *int64   `protobuf:"varint,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ResolvedAt    *int64   `protobuf:"varint,10,opt,name=resolved_at,json=resolvedAt" json:"resolved_at,omitempty"`
	IsResolved    *bool    `protobuf:"varint,11,opt,name=is_resolved,json=isResolved" json:"is_resolved,omitempty"`
	ResolveTime   *int64   `protobuf:"varint,12,opt,name=resolve_time,json=resolveTime" json:"resolve_time,omitempty"` // seconds
	GroupId       *string  `protobuf:"bytes,14,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ClosedAt      *int64   `protobuf:"varint,15,opt,name=closed_at,json=closedAt" json:"closed_at,omitempty"`
	IsUnresolved  *bool    `protobuf:"varint,16,opt,name=is_unresolved,json=isUnresolved" json:"is_unresolved,omitempty"`
	IsViolated    *bool    `protobuf:"varint,17,opt,name=is_violated,json=isViolated" json:"is_violated,omitempty"`
	HasAgent      *bool    `protobuf:"varint,18,opt,name=has_agent,json=hasAgent" json:"has_agent,omitempty"`
	UserIds       []string `protobuf:"bytes,19,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (x *ReportTicket) Reset() {
	*x = ReportTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTicket) ProtoMessage() {}

func (x *ReportTicket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTicket.ProtoReflect.Descriptor instead.
func (*ReportTicket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{59}
}

func (x *ReportTicket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ReportTicket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ReportTicket) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ReportTicket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ReportTicket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ReportTicket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ReportTicket) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ReportTicket) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ReportTicket) GetResolvedAt() int64 {
	if x != nil && x.ResolvedAt != nil {
		return *x.ResolvedAt
	}
	return 0
}

func (x *ReportTicket) GetIsResolved() bool {
	if x != nil && x.IsResolved != nil {
		return *x.IsResolved
	}
	return false
}

func (x *ReportTicket) GetResolveTime() int64 {
	if x != nil && x.ResolveTime != nil {
		return *x.ResolveTime
	}
	return 0
}

func (x *ReportTicket) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *ReportTicket) GetClosedAt() int64 {
	if x != nil && x.ClosedAt != nil {
		return *x.ClosedAt
	}
	return 0
}

func (x *ReportTicket) GetIsUnresolved() bool {
	if x != nil && x.IsUnresolved != nil {
		return *x.IsUnresolved
	}
	return false
}

func (x *ReportTicket) GetIsViolated() bool {
	if x != nil && x.IsViolated != nil {
		return *x.IsViolated
	}
	return false
}

func (x *ReportTicket) GetHasAgent() bool {
	if x != nil && x.HasAgent != nil {
		return *x.HasAgent
	}
	return false
}

func (x *ReportTicket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CountTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,4,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	State         *string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority      *string `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	AgentId       *string `protobuf:"bytes,7,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TagId         *string `protobuf:"bytes,8,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	GroupId       *string `protobuf:"bytes,9,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	IsResolved    *bool   `protobuf:"varint,10,opt,name=is_resolved,json=isResolved" json:"is_resolved,omitempty"`
	HasAgent      *bool   `protobuf:"varint,11,opt,name=has_agent,json=hasAgent" json:"has_agent,omitempty"`
	FromHour      *int32  `protobuf:"varint,13,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,14,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	Range         *string `protobuf:"bytes,15,opt,name=range" json:"range,omitempty"`
	IsUnresolved  *bool   `protobuf:"varint,16,opt,name=is_unresolved,json=isUnresolved" json:"is_unresolved,omitempty"`
	IsViolated    *bool   `protobuf:"varint,17,opt,name=is_violated,json=isViolated" json:"is_violated,omitempty"`
	UserId        *string `protobuf:"bytes,18,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (x *CountTicketRequest) Reset() {
	*x = CountTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTicketRequest) ProtoMessage() {}

func (x *CountTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTicketRequest.ProtoReflect.Descriptor instead.
func (*CountTicketRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{60}
}

func (x *CountTicketRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountTicketRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountTicketRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CountTicketRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *CountTicketRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *CountTicketRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountTicketRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CountTicketRequest) GetIsResolved() bool {
	if x != nil && x.IsResolved != nil {
		return *x.IsResolved
	}
	return false
}

func (x *CountTicketRequest) GetHasAgent() bool {
	if x != nil && x.HasAgent != nil {
		return *x.HasAgent
	}
	return false
}

func (x *CountTicketRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *CountTicketRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

func (x *CountTicketRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountTicketRequest) GetIsUnresolved() bool {
	if x != nil && x.IsUnresolved != nil {
		return *x.IsUnresolved
	}
	return false
}

func (x *CountTicketRequest) GetIsViolated() bool {
	if x != nil && x.IsViolated != nil {
		return *x.IsViolated
	}
	return false
}

func (x *CountTicketRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type CountTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int64 `protobuf:"varint,2,rep,name=data" json:"data,omitempty"`
}

func (x *CountTicketResponse) Reset() {
	*x = CountTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTicketResponse) ProtoMessage() {}

func (x *CountTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTicketResponse.ProtoReflect.Descriptor instead.
func (*CountTicketResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{61}
}

func (x *CountTicketResponse) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type AvgResolveTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId *string `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	Priority      *string `protobuf:"bytes,4,opt,name=priority" json:"priority,omitempty"`
	AgentId       *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TagId         *string `protobuf:"bytes,6,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	GroupId       *string `protobuf:"bytes,7,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	FromHour      *int32  `protobuf:"varint,9,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour        *int32  `protobuf:"varint,10,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	Range         *string `protobuf:"bytes,11,opt,name=range" json:"range,omitempty"`
}

func (x *AvgResolveTimeRequest) Reset() {
	*x = AvgResolveTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResolveTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResolveTimeRequest) ProtoMessage() {}

func (x *AvgResolveTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResolveTimeRequest.ProtoReflect.Descriptor instead.
func (*AvgResolveTimeRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{62}
}

func (x *AvgResolveTimeRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AvgResolveTimeRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *AvgResolveTimeRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

func (x *AvgResolveTimeRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

type AvgResolveTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResolveSec *float64 `protobuf:"fixed64,2,opt,name=avg_resolve_sec,json=avgResolveSec" json:"avg_resolve_sec,omitempty"`
}

func (x *AvgResolveTimeResponse) Reset() {
	*x = AvgResolveTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvgResolveTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvgResolveTimeResponse) ProtoMessage() {}

func (x *AvgResolveTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvgResolveTimeResponse.ProtoReflect.Descriptor instead.
func (*AvgResolveTimeResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{63}
}

func (x *AvgResolveTimeResponse) GetAvgResolveSec() float64 {
	if x != nil && x.AvgResolveSec != nil {
		return *x.AvgResolveSec
	}
	return 0
}

type AvailibilityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId        *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	From           *string         `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"` // try date --rfc-3339=seconds date in rfc 3339 seconds standard. E.g: 2019-03-07T10:42:01+07:00
	Range          *string         `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	NumberOfPoints *int32          `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
}

func (x *AvailibilityReportRequest) Reset() {
	*x = AvailibilityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailibilityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailibilityReportRequest) ProtoMessage() {}

func (x *AvailibilityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailibilityReportRequest.ProtoReflect.Descriptor instead.
func (*AvailibilityReportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{64}
}

func (x *AvailibilityReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailibilityReportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *AvailibilityReportRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *AvailibilityReportRequest) GetNumberOfPoints() int32 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

type CountReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IntegrationId  *string         `protobuf:"bytes,3,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	Metric         *string         `protobuf:"bytes,4,opt,name=metric" json:"metric,omitempty"`
	From           *string         `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"` // try date --rfc-3339=seconds
	Range          *string         `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	AgentId        *string         `protobuf:"bytes,10,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	GroupId        *string         `protobuf:"bytes,11,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	TagId          *string         `protobuf:"bytes,12,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	NumberOfPoints *int32          `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
}

func (x *CountReportRequest) Reset() {
	*x = CountReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountReportRequest) ProtoMessage() {}

func (x *CountReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountReportRequest.ProtoReflect.Descriptor instead.
func (*CountReportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{65}
}

func (x *CountReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CountReportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CountReportRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *CountReportRequest) GetMetric() string {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return ""
}

func (x *CountReportRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *CountReportRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *CountReportRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *CountReportRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *CountReportRequest) GetTagId() string {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return ""
}

func (x *CountReportRequest) GetNumberOfPoints() int32 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	From  *string         `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	Range *string         `protobuf:"bytes,4,opt,name=range" json:"range,omitempty"`
	Data  []int64         `protobuf:"varint,5,rep,name=data" json:"data,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{66}
}

func (x *ReportResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportResponse) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *ReportResponse) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *ReportResponse) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConversationAgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId     *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Metric        *string         `protobuf:"bytes,3,opt,name=metric" json:"metric,omitempty"`
	Hour          *int32          `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	IntegrationId *string         `protobuf:"bytes,5,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
}

func (x *ConversationAgg) Reset() {
	*x = ConversationAgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAgg) ProtoMessage() {}

func (x *ConversationAgg) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAgg.ProtoReflect.Descriptor instead.
func (*ConversationAgg) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{67}
}

func (x *ConversationAgg) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationAgg) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversationAgg) GetMetric() string {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return ""
}

func (x *ConversationAgg) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ConversationAgg) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

type ConversationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id        *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// optional string state = 6;
	Created           *int64           `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	IntegrationId     *string          `protobuf:"bytes,8,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	ActivatedBy       *string          `protobuf:"bytes,9,opt,name=activated_by,json=activatedBy" json:"activated_by,omitempty"`
	FirstUserReplied  *int64           `protobuf:"varint,10,opt,name=first_user_replied,json=firstUserReplied" json:"first_user_replied,omitempty"`
	FirstAgentReplied map[string]int64 `protobuf:"bytes,11,rep,name=first_agent_replied,json=firstAgentReplied" json:"first_agent_replied,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AgentJoined       map[string]int64 `protobuf:"bytes,12,rep,name=agent_joined,json=agentJoined" json:"agent_joined,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *ConversationMetadata) Reset() {
	*x = ConversationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMetadata) ProtoMessage() {}

func (x *ConversationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMetadata.ProtoReflect.Descriptor instead.
func (*ConversationMetadata) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{68}
}

func (x *ConversationMetadata) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversationMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ConversationMetadata) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ConversationMetadata) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ConversationMetadata) GetActivatedBy() string {
	if x != nil && x.ActivatedBy != nil {
		return *x.ActivatedBy
	}
	return ""
}

func (x *ConversationMetadata) GetFirstUserReplied() int64 {
	if x != nil && x.FirstUserReplied != nil {
		return *x.FirstUserReplied
	}
	return 0
}

func (x *ConversationMetadata) GetFirstAgentReplied() map[string]int64 {
	if x != nil {
		return x.FirstAgentReplied
	}
	return nil
}

func (x *ConversationMetadata) GetAgentJoined() map[string]int64 {
	if x != nil {
		return x.AgentJoined
	}
	return nil
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *string `protobuf:"bytes,1,opt,name=operator" json:"operator,omitempty"` // eq | ne ...
	Value    *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`       // encoded json
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{69}
}

func (x *FilterCondition) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *FilterCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type FilterUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationTagIds  []string         `protobuf:"bytes,3,rep,name=conversation_tag_ids,json=conversationTagIds" json:"conversation_tag_ids,omitempty"`
	ConversationState   *string          `protobuf:"bytes,4,opt,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"` // deprecated
	TicketState         *string          `protobuf:"bytes,5,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`                   // deprecated
	Limit               *int64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Anchor              *string          `protobuf:"bytes,7,opt,name=anchor" json:"anchor,omitempty"`
	ConversationCreated *FilterCondition `protobuf:"bytes,8,opt,name=conversation_created,json=conversationCreated" json:"conversation_created,omitempty"`
	SegmentId           *string          `protobuf:"bytes,9,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	ConversationStates  []string         `protobuf:"bytes,10,rep,name=conversation_states,json=conversationStates" json:"conversation_states,omitempty"`
	TicketStates        []string         `protobuf:"bytes,11,rep,name=ticket_states,json=ticketStates" json:"ticket_states,omitempty"`
}

func (x *FilterUserRequest) Reset() {
	*x = FilterUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserRequest) ProtoMessage() {}

func (x *FilterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserRequest.ProtoReflect.Descriptor instead.
func (*FilterUserRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{70}
}

func (x *FilterUserRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *FilterUserRequest) GetConversationTagIds() []string {
	if x != nil {
		return x.ConversationTagIds
	}
	return nil
}

func (x *FilterUserRequest) GetConversationState() string {
	if x != nil && x.ConversationState != nil {
		return *x.ConversationState
	}
	return ""
}

func (x *FilterUserRequest) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *FilterUserRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *FilterUserRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *FilterUserRequest) GetConversationCreated() *FilterCondition {
	if x != nil {
		return x.ConversationCreated
	}
	return nil
}

func (x *FilterUserRequest) GetSegmentId() string {
	if x != nil && x.SegmentId != nil {
		return *x.SegmentId
	}
	return ""
}

func (x *FilterUserRequest) GetConversationStates() []string {
	if x != nil {
		return x.ConversationStates
	}
	return nil
}

func (x *FilterUserRequest) GetTicketStates() []string {
	if x != nil {
		return x.TicketStates
	}
	return nil
}

type FilterUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional int64 total = 2;
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Anchor  *string  `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *FilterUserResponse) Reset() {
	*x = FilterUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUserResponse) ProtoMessage() {}

func (x *FilterUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUserResponse.ProtoReflect.Descriptor instead.
func (*FilterUserResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{71}
}

func (x *FilterUserResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *FilterUserResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type SearchConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId         *string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	State          *string          `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`                                // deprecated
	TicketState    *string          `protobuf:"bytes,5,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"` // deprecated
	Limit          *int64           `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Anchor         *string          `protobuf:"bytes,7,opt,name=anchor" json:"anchor,omitempty"`
	ConnectorId    *string          `protobuf:"bytes,8,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"` // deprecated
	Text           *string          `protobuf:"bytes,9,opt,name=text" json:"text,omitempty"`
	TagIds         []string         `protobuf:"bytes,10,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	MessageCreated *FilterCondition `protobuf:"bytes,11,opt,name=message_created,json=messageCreated" json:"message_created,omitempty"`
	States         []string         `protobuf:"bytes,12,rep,name=states" json:"states,omitempty"`
	TicketStates   []string         `protobuf:"bytes,13,rep,name=ticket_states,json=ticketStates" json:"ticket_states,omitempty"`
	ConnectorIds   []string         `protobuf:"bytes,14,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"` // channel
}

func (x *SearchConversationRequest) Reset() {
	*x = SearchConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationRequest) ProtoMessage() {}

func (x *SearchConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationRequest.ProtoReflect.Descriptor instead.
func (*SearchConversationRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{72}
}

func (x *SearchConversationRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SearchConversationRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SearchConversationRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *SearchConversationRequest) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *SearchConversationRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchConversationRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchConversationRequest) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *SearchConversationRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchConversationRequest) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *SearchConversationRequest) GetMessageCreated() *FilterCondition {
	if x != nil {
		return x.MessageCreated
	}
	return nil
}

func (x *SearchConversationRequest) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *SearchConversationRequest) GetTicketStates() []string {
	if x != nil {
		return x.TicketStates
	}
	return nil
}

func (x *SearchConversationRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

type SearchConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional int64 total = 2;
	ConversationIds []string                 `protobuf:"bytes,3,rep,name=conversation_ids,json=conversationIds" json:"conversation_ids,omitempty"`
	Anchor          *string                  `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Result          []*ESConversationMessage `protobuf:"bytes,5,rep,name=result" json:"result,omitempty"` // for preview matched messages
}

func (x *SearchConversationResponse) Reset() {
	*x = SearchConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationResponse) ProtoMessage() {}

func (x *SearchConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationResponse.ProtoReflect.Descriptor instead.
func (*SearchConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{73}
}

func (x *SearchConversationResponse) GetConversationIds() []string {
	if x != nil {
		return x.ConversationIds
	}
	return nil
}

func (x *SearchConversationResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchConversationResponse) GetResult() []*ESConversationMessage {
	if x != nil {
		return x.Result
	}
	return nil
}

// conversation for index in elastic search
type ESConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *string                        `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId           *string                        `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds           []string                       `protobuf:"bytes,4,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	State            *string                        `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	TicketState      *string                        `protobuf:"bytes,6,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`
	Id               *string                        `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Created          *int64                         `protobuf:"varint,10,opt,name=created" json:"created,omitempty"` // unix seconds
	SegmentIds       []string                       `protobuf:"bytes,11,rep,name=segment_ids,json=segmentIds" json:"segment_ids,omitempty"`
	IsReplied        *bool                          `protobuf:"varint,12,opt,name=is_replied,json=isReplied" json:"is_replied,omitempty"` // deprecated
	RepliedAt        *int64                         `protobuf:"varint,13,opt,name=replied_at,json=repliedAt" json:"replied_at,omitempty"` // deprecated
	AssignedAgentIds []string                       `protobuf:"bytes,14,rep,name=assigned_agent_ids,json=assignedAgentIds" json:"assigned_agent_ids,omitempty"`
	AssignedGroupId  *string                        `protobuf:"bytes,15,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentIds         []string                       `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // deprecated
	ConnectorId      *string                        `protobuf:"bytes,17,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	ChannelSource    *string                        `protobuf:"bytes,18,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	LastMessageTime  *int64                         `protobuf:"varint,19,opt,name=last_message_time,json=lastMessageTime" json:"last_message_time,omitempty"`
	ConnectorType    *string                        `protobuf:"bytes,20,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	UserReplied      *bool                          `protobuf:"varint,22,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	AgentReplied     *bool                          `protobuf:"varint,23,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt   *int64                         `protobuf:"varint,24,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"` // unix seconds
	RepliedByBots    *bool                          `protobuf:"varint,25,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents  *bool                          `protobuf:"varint,26,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTimes    []*ESConversation_ResponseTime `protobuf:"bytes,27,rep,name=response_times,json=responseTimes" json:"response_times,omitempty"`
	RepliedAgentIds  []string                       `protobuf:"bytes,28,rep,name=replied_agent_ids,json=repliedAgentIds" json:"replied_agent_ids,omitempty"`
}

func (x *ESConversation) Reset() {
	*x = ESConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversation) ProtoMessage() {}

func (x *ESConversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversation.ProtoReflect.Descriptor instead.
func (*ESConversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{74}
}

func (x *ESConversation) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESConversation) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ESConversation) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ESConversation) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ESConversation) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *ESConversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESConversation) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESConversation) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *ESConversation) GetIsReplied() bool {
	if x != nil && x.IsReplied != nil {
		return *x.IsReplied
	}
	return false
}

func (x *ESConversation) GetRepliedAt() int64 {
	if x != nil && x.RepliedAt != nil {
		return *x.RepliedAt
	}
	return 0
}

func (x *ESConversation) GetAssignedAgentIds() []string {
	if x != nil {
		return x.AssignedAgentIds
	}
	return nil
}

func (x *ESConversation) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ESConversation) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ESConversation) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *ESConversation) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ESConversation) GetLastMessageTime() int64 {
	if x != nil && x.LastMessageTime != nil {
		return *x.LastMessageTime
	}
	return 0
}

func (x *ESConversation) GetConnectorType() string {
	if x != nil && x.ConnectorType != nil {
		return *x.ConnectorType
	}
	return ""
}

func (x *ESConversation) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ESConversation) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ESConversation) GetAgentRepliedAt() int64 {
	if x != nil && x.AgentRepliedAt != nil {
		return *x.AgentRepliedAt
	}
	return 0
}

func (x *ESConversation) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ESConversation) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ESConversation) GetResponseTimes() []*ESConversation_ResponseTime {
	if x != nil {
		return x.ResponseTimes
	}
	return nil
}

func (x *ESConversation) GetRepliedAgentIds() []string {
	if x != nil {
		return x.RepliedAgentIds
	}
	return nil
}

// conversation message for index in elastic search
type ESConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId             *string  `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ConversationState  *string  `protobuf:"bytes,5,opt,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"`
	TicketState        *string  `protobuf:"bytes,6,opt,name=ticket_state,json=ticketState" json:"ticket_state,omitempty"`
	ConnectorId        *string  `protobuf:"bytes,7,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	Text               *string  `protobuf:"bytes,8,opt,name=text" json:"text,omitempty"`
	ConversationId     *string  `protobuf:"bytes,9,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Created            *int64   `protobuf:"varint,10,opt,name=created" json:"created,omitempty"` // unix seconds
	Id                 *string  `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`            // event id
	ConversationTagIds []string `protobuf:"bytes,12,rep,name=conversation_tag_ids,json=conversationTagIds" json:"conversation_tag_ids,omitempty"`
}

func (x *ESConversationMessage) Reset() {
	*x = ESConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversationMessage) ProtoMessage() {}

func (x *ESConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversationMessage.ProtoReflect.Descriptor instead.
func (*ESConversationMessage) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{75}
}

func (x *ESConversationMessage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESConversationMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ESConversationMessage) GetConversationState() string {
	if x != nil && x.ConversationState != nil {
		return *x.ConversationState
	}
	return ""
}

func (x *ESConversationMessage) GetTicketState() string {
	if x != nil && x.TicketState != nil {
		return *x.TicketState
	}
	return ""
}

func (x *ESConversationMessage) GetConnectorId() string {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return ""
}

func (x *ESConversationMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ESConversationMessage) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ESConversationMessage) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESConversationMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESConversationMessage) GetConversationTagIds() []string {
	if x != nil {
		return x.ConversationTagIds
	}
	return nil
}

// for update user segment ids of a conversation in elastic search
type UpdateUserSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId         *string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SegmentIds     []string        `protobuf:"bytes,4,rep,name=segment_ids,json=segmentIds" json:"segment_ids,omitempty"` // all segment ids
	ConversationId *string         `protobuf:"bytes,5,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *UpdateUserSegmentRequest) Reset() {
	*x = UpdateUserSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSegmentRequest) ProtoMessage() {}

func (x *UpdateUserSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSegmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSegmentRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateUserSegmentRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateUserSegmentRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateUserSegmentRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UpdateUserSegmentRequest) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *UpdateUserSegmentRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

type ESTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId *string         `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Id             *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	State          *string         `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	Priority       *string         `protobuf:"bytes,6,opt,name=priority" json:"priority,omitempty"`
	Duedate        *int64          `protobuf:"varint,7,opt,name=duedate" json:"duedate,omitempty"`
	Created        *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"` // unix seconds
	UserIds        []string        `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	AgentIds       []string        `protobuf:"bytes,13,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	TagIds         []string        `protobuf:"bytes,17,rep,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
}

func (x *ESTicket) Reset() {
	*x = ESTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESTicket) ProtoMessage() {}

func (x *ESTicket) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESTicket.ProtoReflect.Descriptor instead.
func (*ESTicket) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{77}
}

func (x *ESTicket) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ESTicket) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ESTicket) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ESTicket) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ESTicket) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ESTicket) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *ESTicket) GetDuedate() int64 {
	if x != nil && x.Duedate != nil {
		return *x.Duedate
	}
	return 0
}

func (x *ESTicket) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ESTicket) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ESTicket) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ESTicket) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type ConversationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	Anchor          *string          `protobuf:"bytes,14,opt,name=anchor" json:"anchor,omitempty"`
	Limit           *int64           `protobuf:"varint,15,opt,name=limit" json:"limit,omitempty"`
	AgentIds        []string         `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,17,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,18,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,19,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,20,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,21,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,22,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,23,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,24,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,25,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
}

func (x *ConversationListRequest) Reset() {
	*x = ConversationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationListRequest) ProtoMessage() {}

func (x *ConversationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationListRequest.ProtoReflect.Descriptor instead.
func (*ConversationListRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{78}
}

func (x *ConversationListRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversationListRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *ConversationListRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ConversationListRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ConversationListRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *ConversationListRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ConversationListRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *ConversationListRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ConversationListRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ConversationListRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ConversationListRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ConversationListRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ConversationListRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ConversationListRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *ConversationListRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ConversationListRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ConversationListRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ConversationListRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ConversationListRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ConversationListRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

type ConversationListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor          *string           `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Result          []*ESConversation `protobuf:"bytes,3,rep,name=result" json:"result,omitempty"`
	Total           *int64            `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	ConversationIds []string          `protobuf:"bytes,5,rep,name=conversation_ids,json=conversationIds" json:"conversation_ids,omitempty"`
}

func (x *ConversationListResponse) Reset() {
	*x = ConversationListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationListResponse) ProtoMessage() {}

func (x *ConversationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationListResponse.ProtoReflect.Descriptor instead.
func (*ConversationListResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{79}
}

func (x *ConversationListResponse) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ConversationListResponse) GetResult() []*ESConversation {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ConversationListResponse) GetTotal() int64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *ConversationListResponse) GetConversationIds() []string {
	if x != nil {
		return x.ConversationIds
	}
	return nil
}

// export users in conversations list page
type UserExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	Emails          []string         `protobuf:"bytes,16,rep,name=emails" json:"emails,omitempty"`                                    // send to this emails
	AttributeKeys   []string         `protobuf:"bytes,17,rep,name=attribute_keys,json=attributeKeys" json:"attribute_keys,omitempty"` // exported attributes
	EmailSubject    *string          `protobuf:"bytes,18,opt,name=email_subject,json=emailSubject" json:"email_subject,omitempty"`
	LanguageCode    *string          `protobuf:"bytes,19,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	AgentIds        []string         `protobuf:"bytes,20,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,21,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,22,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,23,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,24,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,25,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,26,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,27,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,28,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,29,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
}

func (x *UserExportRequest) Reset() {
	*x = UserExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExportRequest) ProtoMessage() {}

func (x *UserExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExportRequest.ProtoReflect.Descriptor instead.
func (*UserExportRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{80}
}

func (x *UserExportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserExportRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UserExportRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *UserExportRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *UserExportRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *UserExportRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *UserExportRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UserExportRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *UserExportRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *UserExportRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *UserExportRequest) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *UserExportRequest) GetEmailSubject() string {
	if x != nil && x.EmailSubject != nil {
		return *x.EmailSubject
	}
	return ""
}

func (x *UserExportRequest) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *UserExportRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *UserExportRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserExportRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *UserExportRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *UserExportRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UserExportRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *UserExportRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *UserExportRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *UserExportRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *UserExportRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

type ReportConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AssignedAgentId *string          `protobuf:"bytes,3,opt,name=assigned_agent_id,json=assignedAgentId" json:"assigned_agent_id,omitempty"`
	AssignedGroupId *string          `protobuf:"bytes,4,opt,name=assigned_group_id,json=assignedGroupId" json:"assigned_group_id,omitempty"`
	AgentReplied    *bool            `protobuf:"varint,6,opt,name=agent_replied,json=agentReplied" json:"agent_replied,omitempty"`
	AgentRepliedAt  *FilterCondition `protobuf:"bytes,7,opt,name=agent_replied_at,json=agentRepliedAt" json:"agent_replied_at,omitempty"`
	Created         *FilterCondition `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	ConnectorIds    []string         `protobuf:"bytes,10,rep,name=connector_ids,json=connectorIds" json:"connector_ids,omitempty"`
	ChannelSource   *string          `protobuf:"bytes,11,opt,name=channel_source,json=channelSource" json:"channel_source,omitempty"`
	AgentIds        []string         `protobuf:"bytes,16,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // any of
	UserId          *FilterCondition `protobuf:"bytes,17,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TagIds          *FilterCondition `protobuf:"bytes,18,opt,name=tag_ids,json=tagIds" json:"tag_ids,omitempty"`
	ConnectorTypes  []string         `protobuf:"bytes,19,rep,name=connector_types,json=connectorTypes" json:"connector_types,omitempty"` // any of
	State           *FilterCondition `protobuf:"bytes,20,opt,name=state" json:"state,omitempty"`
	UserReplied     *bool            `protobuf:"varint,21,opt,name=user_replied,json=userReplied" json:"user_replied,omitempty"`
	RepliedByBots   *bool            `protobuf:"varint,22,opt,name=replied_by_bots,json=repliedByBots" json:"replied_by_bots,omitempty"`
	RepliedByAgents *bool            `protobuf:"varint,23,opt,name=replied_by_agents,json=repliedByAgents" json:"replied_by_agents,omitempty"`
	ResponseTime    *FilterCondition `protobuf:"bytes,24,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	RepliedAgentId  *string          `protobuf:"bytes,25,opt,name=replied_agent_id,json=repliedAgentId" json:"replied_agent_id,omitempty"`
	Range           *string          `protobuf:"bytes,26,opt,name=range" json:"range,omitempty"` // hour | day
	NumberOfPoints  *int64           `protobuf:"varint,29,opt,name=number_of_points,json=numberOfPoints" json:"number_of_points,omitempty"`
	From            *string          `protobuf:"bytes,30,opt,name=from" json:"from,omitempty"` // rfc3339
}

func (x *ReportConversationsRequest) Reset() {
	*x = ReportConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConversationsRequest) ProtoMessage() {}

func (x *ReportConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConversationsRequest.ProtoReflect.Descriptor instead.
func (*ReportConversationsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{81}
}

func (x *ReportConversationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportConversationsRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAssignedAgentId() string {
	if x != nil && x.AssignedAgentId != nil {
		return *x.AssignedAgentId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAssignedGroupId() string {
	if x != nil && x.AssignedGroupId != nil {
		return *x.AssignedGroupId
	}
	return ""
}

func (x *ReportConversationsRequest) GetAgentReplied() bool {
	if x != nil && x.AgentReplied != nil {
		return *x.AgentReplied
	}
	return false
}

func (x *ReportConversationsRequest) GetAgentRepliedAt() *FilterCondition {
	if x != nil {
		return x.AgentRepliedAt
	}
	return nil
}

func (x *ReportConversationsRequest) GetCreated() *FilterCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ReportConversationsRequest) GetConnectorIds() []string {
	if x != nil {
		return x.ConnectorIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetChannelSource() string {
	if x != nil && x.ChannelSource != nil {
		return *x.ChannelSource
	}
	return ""
}

func (x *ReportConversationsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetUserId() *FilterCondition {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ReportConversationsRequest) GetTagIds() *FilterCondition {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ReportConversationsRequest) GetConnectorTypes() []string {
	if x != nil {
		return x.ConnectorTypes
	}
	return nil
}

func (x *ReportConversationsRequest) GetState() *FilterCondition {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ReportConversationsRequest) GetUserReplied() bool {
	if x != nil && x.UserReplied != nil {
		return *x.UserReplied
	}
	return false
}

func (x *ReportConversationsRequest) GetRepliedByBots() bool {
	if x != nil && x.RepliedByBots != nil {
		return *x.RepliedByBots
	}
	return false
}

func (x *ReportConversationsRequest) GetRepliedByAgents() bool {
	if x != nil && x.RepliedByAgents != nil {
		return *x.RepliedByAgents
	}
	return false
}

func (x *ReportConversationsRequest) GetResponseTime() *FilterCondition {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ReportConversationsRequest) GetRepliedAgentId() string {
	if x != nil && x.RepliedAgentId != nil {
		return *x.RepliedAgentId
	}
	return ""
}

func (x *ReportConversationsRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *ReportConversationsRequest) GetNumberOfPoints() int64 {
	if x != nil && x.NumberOfPoints != nil {
		return *x.NumberOfPoints
	}
	return 0
}

func (x *ReportConversationsRequest) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
type SCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string       `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key           *string       `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`           // unique
	Operator      *string       `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"` // = # regex
	Value         *string       `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`       // JSON
	Join          *string       `protobuf:"bytes,7,opt,name=join" json:"join,omitempty"`
	EventTypeTime *string       `protobuf:"bytes,8,opt,name=event_type_time,json=eventTypeTime" json:"event_type_time,omitempty"` //
	EventType     *string       `protobuf:"bytes,10,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Conditions    []*SCondition `protobuf:"bytes,9,rep,name=conditions" json:"conditions,omitempty"`
	Priority      *int32        `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`
	EventExisted  *bool         `protobuf:"varint,13,opt,name=event_existed,json=eventExisted" json:"event_existed,omitempty"`
	Function      *string       `protobuf:"bytes,14,opt,name=function" json:"function,omitempty"` // used to transform value of left side before evaluate expression
}

func (x *SCondition) Reset() {
	*x = SCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCondition) ProtoMessage() {}

func (x *SCondition) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCondition.ProtoReflect.Descriptor instead.
func (*SCondition) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{82}
}

func (x *SCondition) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SCondition) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SCondition) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *SCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *SCondition) GetJoin() string {
	if x != nil && x.Join != nil {
		return *x.Join
	}
	return ""
}

func (x *SCondition) GetEventTypeTime() string {
	if x != nil && x.EventTypeTime != nil {
		return *x.EventTypeTime
	}
	return ""
}

func (x *SCondition) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

func (x *SCondition) GetConditions() []*SCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SCondition) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *SCondition) GetEventExisted() bool {
	if x != nil && x.EventExisted != nil {
		return *x.EventExisted
	}
	return false
}

func (x *SCondition) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

type ESConversation_ResponseTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Seconds *int64  `protobuf:"varint,2,opt,name=seconds" json:"seconds,omitempty"`
}

func (x *ESConversation_ResponseTime) Reset() {
	*x = ESConversation_ResponseTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESConversation_ResponseTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESConversation_ResponseTime) ProtoMessage() {}

func (x *ESConversation_ResponseTime) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESConversation_ResponseTime.ProtoReflect.Descriptor instead.
func (*ESConversation_ResponseTime) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{74, 0}
}

func (x *ESConversation_ResponseTime) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ESConversation_ResponseTime) GetSeconds() int64 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

var File_conversation_proto protoreflect.FileDescriptor

var file_conversation_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x07, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x6c,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x09, 0x22, 0x5c, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x61,
	0x72, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x61,
	0x72, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x54,
	0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79,
	0x73, 0x22, 0xc4, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62,
	0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x2b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x02, 0x22, 0xa2, 0x07, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb2, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x09, 0x45, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6e, 0x67, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67,
	0x52, 0x05, 0x70, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x03,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f,
	0x76, 0x65, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x61, 0x68, 0x61, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x77, 0x6f, 0x77, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x61, 0x64, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x10, 0x0c, 0x12, 0x0e, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x77, 0x10, 0x0d, 0x12, 0x0f, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x68, 0x61, 0x10, 0x0e, 0x12, 0x0e,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x64, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x72, 0x79, 0x10, 0x10,
	0x12, 0x08, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x10, 0x13, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x2f, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xee, 0x02, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x10, 0x07, 0x22, 0x4c, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x8d, 0x02, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x10,
	0x09, 0x22, 0xbc, 0x04, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4e, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x10, 0x04,
	0x22, 0xe4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xed, 0x05, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x49, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x39, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x7b, 0x0a, 0x0a, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x10, 0x04, 0x22, 0xd8, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x46,
	0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x22,
	0x9b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x92, 0x01,
	0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x34,
	0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x50, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x69, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22,
	0x8f, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xce, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x9a, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72,
	0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x0a,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x41,
	0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x6f, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x43, 0x0a, 0x17, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x63, 0x22, 0x4a, 0x0a, 0x19, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x09,
	0x45, 0x53, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x81, 0x03, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x4f,
	0x55, 0x52, 0x53, 0x10, 0x00, 0x22, 0xc4, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f,
	0x12, 0x43, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3c,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x5d, 0x0a, 0x18, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x04, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xae, 0x02, 0x0a, 0x15, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x10, 0x01, 0x22, 0x40, 0x0a, 0x16, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x53, 0x65, 0x63, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x02, 0x22, 0xd2, 0x02, 0x0a, 0x12, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22,
	0x71, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x04, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x12, 0x56, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x47, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc0, 0x07, 0x0a, 0x0e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x43,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x08, 0x45, 0x53, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x07, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6f, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x53, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xf9, 0x07, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xcd, 0x07, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x22, 0xfb, 0x03, 0x0a, 0x0a, 0x53, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x74,
	0x10, 0x03, 0x22, 0x1f, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x6f,
	0x72, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61,
	0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x6f, 0x10,
	0x03, 0x2a, 0x89, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0f, 0x2a, 0xe1, 0x01,
	0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10,
	0x0f, 0x2a, 0x2d, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02,
	0x2a, 0x3b, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x2a, 0xca, 0x08,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x04, 0x12, 0x1f, 0x0a,
	0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x06, 0x12, 0x29,
	0x0a, 0x25, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x0b, 0x12, 0x1e,
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x0c, 0x12, 0x27,
	0x0a, 0x23, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0e,
	0x12, 0x25, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x14,
	0x12, 0x2a, 0x0a, 0x26, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x20, 0x12, 0x2b, 0x0a, 0x27,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x22, 0x12, 0x2a, 0x0a, 0x26, 0x6e, 0x6f, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x35, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x23, 0x12, 0x2b, 0x0a, 0x27, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x35, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x25, 0x12, 0x2b, 0x0a, 0x27, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x26, 0x12,
	0x2c, 0x0a, 0x28, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x28, 0x12, 0x2c, 0x0a,
	0x28, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x32, 0x34, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x29, 0x12, 0x2d, 0x0a, 0x29, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x32, 0x34, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x2b, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e,
}

var (
	file_conversation_proto_rawDescOnce sync.Once
	file_conversation_proto_rawDescData = file_conversation_proto_rawDesc
)

func file_conversation_proto_rawDescGZIP() []byte {
	file_conversation_proto_rawDescOnce.Do(func() {
		file_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_conversation_proto_rawDescData)
	})
	return file_conversation_proto_rawDescData
}

var file_conversation_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_conversation_proto_goTypes = []interface{}{
	(State)(0),                                        // 0: conversation.State
	(AttachmentType)(0),                               // 1: conversation.AttachmentType
	(TicketListOrderBy)(0),                            // 2: conversation.TicketListOrderBy
	(TicketPriority)(0),                               // 3: conversation.TicketPriority
	(Metric)(0),                                       // 4: conversation.Metric
	(Rule_AssignStrategy)(0),                          // 5: conversation.Rule.AssignStrategy
	(Member_State)(0),                                 // 6: conversation.Member.State
	(MessagePong_Type)(0),                             // 7: conversation.MessagePong.Type
	(Button_ButtonType)(0),                            // 8: conversation.Button.ButtonType
	(AskInfomation_InputType)(0),                      // 9: conversation.AskInfomation.InputType
	(ContentTemplate_Availability)(0),                 // 10: conversation.ContentTemplate.Availability
	(FormField_InputType)(0),                          // 11: conversation.FormField.InputType
	(Integration_State)(0),                            // 12: conversation.Integration.State
	(CountByTagsRequest_Range)(0),                     // 13: conversation.CountByTagsRequest.Range
	(ServiceLevelAgreementTarget_OperationalHours)(0), // 14: conversation.ServiceLevelAgreementTarget.OperationalHours
	(ServiceLevelAgreement_AssignStrategy)(0),         // 15: conversation.ServiceLevelAgreement.AssignStrategy
	(CountTicketRequest_Range)(0),                     // 16: conversation.CountTicketRequest.Range
	(AvgResolveTimeRequest_Range)(0),                  // 17: conversation.AvgResolveTimeRequest.Range
	(AvailibilityReportRequest_Range)(0),              // 18: conversation.AvailibilityReportRequest.Range
	(CountReportRequest_Range)(0),                     // 19: conversation.CountReportRequest.Range
	(SCondition_EventTime)(0),                         // 20: conversation.SCondition.EventTime
	(SCondition_JoinOperator)(0),                      // 21: conversation.SCondition.JoinOperator
	(SCondition_Function)(0),                          // 22: conversation.SCondition.Function
	(*Rule)(nil),                                      // 23: conversation.Rule
	(*UserAttributeCondition)(nil),                    // 24: conversation.UserAttributeCondition
	(*TimmingCondition)(nil),                          // 25: conversation.TimmingCondition
	(*ChannelCondition)(nil),                          // 26: conversation.ChannelCondition
	(*LocationCondition)(nil),                         // 27: conversation.LocationCondition
	(*Route)(nil),                                     // 28: conversation.Route
	(*RouteResult)(nil),                               // 29: conversation.RouteResult
	(*Member)(nil),                                    // 30: conversation.Member
	(*Conversation)(nil),                              // 31: conversation.Conversation
	(*Rating)(nil),                                    // 32: conversation.Rating
	(*Conversations)(nil),                             // 33: conversation.Conversations
	(*Search)(nil),                                    // 34: conversation.Search
	(*ListConversationsRequest)(nil),                  // 35: conversation.ListConversationsRequest
	(*ListEventsRequest)(nil),                         // 36: conversation.ListEventsRequest
	(*ListConversationsByUserRequest)(nil),            // 37: conversation.ListConversationsByUserRequest
	(*EsMessage)(nil),                                 // 38: conversation.EsMessage
	(*Message)(nil),                                   // 39: conversation.Message
	(*MessagePong)(nil),                               // 40: conversation.MessagePong
	(*Revision)(nil),                                  // 41: conversation.Revision
	(*Field)(nil),                                     // 42: conversation.Field
	(*Button)(nil),                                    // 43: conversation.Button
	(*AskInfomationAnswer)(nil),                       // 44: conversation.AskInfomationAnswer
	(*AskInfomation)(nil),                             // 45: conversation.AskInfomation
	(*ContentTemplate)(nil),                           // 46: conversation.ContentTemplate
	(*GenericElementTemplate)(nil),                    // 47: conversation.GenericElementTemplate
	(*Attachment)(nil),                                // 48: conversation.Attachment
	(*QuickReply)(nil),                                // 49: conversation.QuickReply
	(*Form)(nil),                                      // 50: conversation.Form
	(*FormSubmit)(nil),                                // 51: conversation.FormSubmit
	(*FormField)(nil),                                 // 52: conversation.FormField
	(*Tag)(nil),                                       // 53: conversation.Tag
	(*TemplateData)(nil),                              // 54: conversation.TemplateData
	(*Template)(nil),                                  // 55: conversation.Template
	(*SearchTemplate)(nil),                            // 56: conversation.SearchTemplate
	(*Templates)(nil),                                 // 57: conversation.Templates
	(*Tags)(nil),                                      // 58: conversation.Tags
	(*Postback)(nil),                                  // 59: conversation.Postback
	(*Integrations)(nil),                              // 60: conversation.Integrations
	(*Integration)(nil),                               // 61: conversation.Integration
	(*SearchMessageRequest)(nil),                      // 62: conversation.SearchMessageRequest
	(*TagRequest)(nil),                                // 63: conversation.TagRequest
	(*CountByTagsRequest)(nil),                        // 64: conversation.CountByTagsRequest
	(*CountByTag)(nil),                                // 65: conversation.CountByTag
	(*CountByTagsResponse)(nil),                       // 66: conversation.CountByTagsResponse
	(*AvgResponseTimeRequest)(nil),                    // 67: conversation.AvgResponseTimeRequest
	(*AvgResponseTimeResponse)(nil),                   // 68: conversation.AvgResponseTimeResponse
	(*TotalConversationResponse)(nil),                 // 69: conversation.TotalConversationResponse
	(*Chain)(nil),                                     // 70: conversation.Chain
	(*Ticket)(nil),                                    // 71: conversation.Ticket
	(*TicketListRequest)(nil),                         // 72: conversation.TicketListRequest
	(*Tickets)(nil),                                   // 73: conversation.Tickets
	(*ESTickets)(nil),                                 // 74: conversation.ESTickets
	(*TicketAttributeData)(nil),                       // 75: conversation.TicketAttributeData
	(*ServiceLevelAgreementTarget)(nil),               // 76: conversation.ServiceLevelAgreementTarget
	(*ServiceLevelAgreement)(nil),                     // 77: conversation.ServiceLevelAgreement
	(*ServiceLevelAgreements)(nil),                    // 78: conversation.ServiceLevelAgreements
	(*DeleteTicketAttrRequest)(nil),                   // 79: conversation.DeleteTicketAttrRequest
	(*GetTicketRequest)(nil),                          // 80: conversation.GetTicketRequest
	(*DeleteTicketRequest)(nil),                       // 81: conversation.DeleteTicketRequest
	(*ReportTicket)(nil),                              // 82: conversation.ReportTicket
	(*CountTicketRequest)(nil),                        // 83: conversation.CountTicketRequest
	(*CountTicketResponse)(nil),                       // 84: conversation.CountTicketResponse
	(*AvgResolveTimeRequest)(nil),                     // 85: conversation.AvgResolveTimeRequest
	(*AvgResolveTimeResponse)(nil),                    // 86: conversation.AvgResolveTimeResponse
	(*AvailibilityReportRequest)(nil),                 // 87: conversation.AvailibilityReportRequest
	(*CountReportRequest)(nil),                        // 88: conversation.CountReportRequest
	(*ReportResponse)(nil),                            // 89: conversation.ReportResponse
	(*ConversationAgg)(nil),                           // 90: conversation.ConversationAgg
	(*ConversationMetadata)(nil),                      // 91: conversation.ConversationMetadata
	(*FilterCondition)(nil),                           // 92: conversation.FilterCondition
	(*FilterUserRequest)(nil),                         // 93: conversation.FilterUserRequest
	(*FilterUserResponse)(nil),                        // 94: conversation.FilterUserResponse
	(*SearchConversationRequest)(nil),                 // 95: conversation.SearchConversationRequest
	(*SearchConversationResponse)(nil),                // 96: conversation.SearchConversationResponse
	(*ESConversation)(nil),                            // 97: conversation.ESConversation
	(*ESConversationMessage)(nil),                     // 98: conversation.ESConversationMessage
	(*UpdateUserSegmentRequest)(nil),                  // 99: conversation.UpdateUserSegmentRequest
	(*ESTicket)(nil),                                  // 100: conversation.ESTicket
	(*ConversationListRequest)(nil),                   // 101: conversation.ConversationListRequest
	(*ConversationListResponse)(nil),                  // 102: conversation.ConversationListResponse
	(*UserExportRequest)(nil),                         // 103: conversation.UserExportRequest
	(*ReportConversationsRequest)(nil),                // 104: conversation.ReportConversationsRequest
	(*SCondition)(nil),                                // 105: conversation.SCondition
	nil,                                               // 106: conversation.ConversationMetadata.FirstAgentRepliedEntry
	nil,                                               // 107: conversation.ConversationMetadata.AgentJoinedEntry
	(*ESConversation_ResponseTime)(nil),               // 108: conversation.ESConversation.ResponseTime
	(*common.Context)(nil),                            // 109: common.Context
	(*common.By)(nil),                                 // 110: common.By
	(*common.Error)(nil),                              // 111: common.Error
}
var file_conversation_proto_depIdxs = []int32{
	109, // 0: conversation.Rule.ctx:type_name -> common.Context
	105, // 1: conversation.Rule.condition:type_name -> conversation.SCondition
	26,  // 2: conversation.Rule.channel_condition:type_name -> conversation.ChannelCondition
	25,  // 3: conversation.Rule.timming_condition:type_name -> conversation.TimmingCondition
	24,  // 4: conversation.Rule.user_conditions:type_name -> conversation.UserAttributeCondition
	27,  // 5: conversation.ChannelCondition.location_conditions:type_name -> conversation.LocationCondition
	109, // 6: conversation.Route.ctx:type_name -> common.Context
	23,  // 7: conversation.Route.rules:type_name -> conversation.Rule
	109, // 8: conversation.Member.ctx:type_name -> common.Context
	42,  // 9: conversation.Member.fields:type_name -> conversation.Field
	110, // 10: conversation.Member.invited_by:type_name -> common.By
	109, // 11: conversation.Conversation.ctx:type_name -> common.Context
	30,  // 12: conversation.Conversation.members:type_name -> conversation.Member
	53,  // 13: conversation.Conversation.tags:type_name -> conversation.Tag
	61,  // 14: conversation.Conversation.integration:type_name -> conversation.Integration
	39,  // 15: conversation.Conversation.last_message:type_name -> conversation.Message
	71,  // 16: conversation.Conversation.ticket:type_name -> conversation.Ticket
	29,  // 17: conversation.Conversation.assigned_to:type_name -> conversation.RouteResult
	42,  // 18: conversation.Conversation.fields:type_name -> conversation.Field
	32,  // 19: conversation.Conversation.ratings:type_name -> conversation.Rating
	109, // 20: conversation.Conversations.ctx:type_name -> common.Context
	31,  // 21: conversation.Conversations.conversations:type_name -> conversation.Conversation
	111, // 22: conversation.Conversations.errors:type_name -> common.Error
	109, // 23: conversation.Search.ctx:type_name -> common.Context
	109, // 24: conversation.ListConversationsRequest.ctx:type_name -> common.Context
	109, // 25: conversation.ListEventsRequest.ctx:type_name -> common.Context
	109, // 26: conversation.Message.ctx:type_name -> common.Context
	48,  // 27: conversation.Message.attachments:type_name -> conversation.Attachment
	42,  // 28: conversation.Message.fields:type_name -> conversation.Field
	40,  // 29: conversation.Message.pongs:type_name -> conversation.MessagePong
	41,  // 30: conversation.Message.revisions:type_name -> conversation.Revision
	48,  // 31: conversation.Revision.attachments:type_name -> conversation.Attachment
	42,  // 32: conversation.Revision.fields:type_name -> conversation.Field
	43,  // 33: conversation.ContentTemplate.default_action:type_name -> conversation.Button
	43,  // 34: conversation.ContentTemplate.buttons:type_name -> conversation.Button
	43,  // 35: conversation.GenericElementTemplate.default_action:type_name -> conversation.Button
	43,  // 36: conversation.GenericElementTemplate.buttons:type_name -> conversation.Button
	47,  // 37: conversation.Attachment.elements:type_name -> conversation.GenericElementTemplate
	43,  // 38: conversation.Attachment.buttons:type_name -> conversation.Button
	45,  // 39: conversation.Attachment.ask_info:type_name -> conversation.AskInfomation
	44,  // 40: conversation.Attachment.ask_info_answer:type_name -> conversation.AskInfomationAnswer
	50,  // 41: conversation.Attachment.form:type_name -> conversation.Form
	51,  // 42: conversation.Attachment.form_submit:type_name -> conversation.FormSubmit
	46,  // 43: conversation.Attachment.contents:type_name -> conversation.ContentTemplate
	49,  // 44: conversation.Attachment.quick_replies:type_name -> conversation.QuickReply
	52,  // 45: conversation.Form.fields:type_name -> conversation.FormField
	52,  // 46: conversation.FormSubmit.fields:type_name -> conversation.FormField
	109, // 47: conversation.Tag.ctx:type_name -> common.Context
	109, // 48: conversation.Template.ctx:type_name -> common.Context
	39,  // 49: conversation.Template.message:type_name -> conversation.Message
	54,  // 50: conversation.Template.data:type_name -> conversation.TemplateData
	109, // 51: conversation.SearchTemplate.ctx:type_name -> common.Context
	109, // 52: conversation.Templates.ctx:type_name -> common.Context
	55,  // 53: conversation.Templates.templates:type_name -> conversation.Template
	109, // 54: conversation.Tags.ctx:type_name -> common.Context
	53,  // 55: conversation.Tags.tags:type_name -> conversation.Tag
	39,  // 56: conversation.Postback.message:type_name -> conversation.Message
	43,  // 57: conversation.Postback.button:type_name -> conversation.Button
	109, // 58: conversation.Integrations.ctx:type_name -> common.Context
	61,  // 59: conversation.Integrations.integrations:type_name -> conversation.Integration
	109, // 60: conversation.Integration.ctx:type_name -> common.Context
	109, // 61: conversation.SearchMessageRequest.ctx:type_name -> common.Context
	109, // 62: conversation.TagRequest.ctx:type_name -> common.Context
	65,  // 63: conversation.CountByTagsResponse.data:type_name -> conversation.CountByTag
	109, // 64: conversation.Ticket.ctx:type_name -> common.Context
	75,  // 65: conversation.Ticket.attributes:type_name -> conversation.TicketAttributeData
	109, // 66: conversation.TicketListRequest.ctx:type_name -> common.Context
	92,  // 67: conversation.TicketListRequest.created:type_name -> conversation.FilterCondition
	109, // 68: conversation.Tickets.ctx:type_name -> common.Context
	71,  // 69: conversation.Tickets.tickets:type_name -> conversation.Ticket
	109, // 70: conversation.ESTickets.ctx:type_name -> common.Context
	100, // 71: conversation.ESTickets.tickets:type_name -> conversation.ESTicket
	109, // 72: conversation.TicketAttributeData.ctx:type_name -> common.Context
	109, // 73: conversation.ServiceLevelAgreement.ctx:type_name -> common.Context
	76,  // 74: conversation.ServiceLevelAgreement.targets:type_name -> conversation.ServiceLevelAgreementTarget
	109, // 75: conversation.ServiceLevelAgreements.ctx:type_name -> common.Context
	77,  // 76: conversation.ServiceLevelAgreements.service_level_agreements:type_name -> conversation.ServiceLevelAgreement
	109, // 77: conversation.DeleteTicketAttrRequest.ctx:type_name -> common.Context
	109, // 78: conversation.GetTicketRequest.ctx:type_name -> common.Context
	109, // 79: conversation.DeleteTicketRequest.ctx:type_name -> common.Context
	109, // 80: conversation.AvailibilityReportRequest.ctx:type_name -> common.Context
	109, // 81: conversation.CountReportRequest.ctx:type_name -> common.Context
	109, // 82: conversation.ReportResponse.ctx:type_name -> common.Context
	109, // 83: conversation.ConversationAgg.ctx:type_name -> common.Context
	106, // 84: conversation.ConversationMetadata.first_agent_replied:type_name -> conversation.ConversationMetadata.FirstAgentRepliedEntry
	107, // 85: conversation.ConversationMetadata.agent_joined:type_name -> conversation.ConversationMetadata.AgentJoinedEntry
	92,  // 86: conversation.FilterUserRequest.conversation_created:type_name -> conversation.FilterCondition
	92,  // 87: conversation.SearchConversationRequest.message_created:type_name -> conversation.FilterCondition
	98,  // 88: conversation.SearchConversationResponse.result:type_name -> conversation.ESConversationMessage
	108, // 89: conversation.ESConversation.response_times:type_name -> conversation.ESConversation.ResponseTime
	109, // 90: conversation.UpdateUserSegmentRequest.ctx:type_name -> common.Context
	109, // 91: conversation.ESTicket.ctx:type_name -> common.Context
	109, // 92: conversation.ConversationListRequest.ctx:type_name -> common.Context
	92,  // 93: conversation.ConversationListRequest.agent_replied_at:type_name -> conversation.FilterCondition
	92,  // 94: conversation.ConversationListRequest.created:type_name -> conversation.FilterCondition
	92,  // 95: conversation.ConversationListRequest.user_id:type_name -> conversation.FilterCondition
	92,  // 96: conversation.ConversationListRequest.tag_ids:type_name -> conversation.FilterCondition
	92,  // 97: conversation.ConversationListRequest.state:type_name -> conversation.FilterCondition
	92,  // 98: conversation.ConversationListRequest.response_time:type_name -> conversation.FilterCondition
	97,  // 99: conversation.ConversationListResponse.result:type_name -> conversation.ESConversation
	109, // 100: conversation.UserExportRequest.ctx:type_name -> common.Context
	92,  // 101: conversation.UserExportRequest.agent_replied_at:type_name -> conversation.FilterCondition
	92,  // 102: conversation.UserExportRequest.created:type_name -> conversation.FilterCondition
	92,  // 103: conversation.UserExportRequest.user_id:type_name -> conversation.FilterCondition
	92,  // 104: conversation.UserExportRequest.tag_ids:type_name -> conversation.FilterCondition
	92,  // 105: conversation.UserExportRequest.state:type_name -> conversation.FilterCondition
	92,  // 106: conversation.UserExportRequest.response_time:type_name -> conversation.FilterCondition
	109, // 107: conversation.ReportConversationsRequest.ctx:type_name -> common.Context
	92,  // 108: conversation.ReportConversationsRequest.agent_replied_at:type_name -> conversation.FilterCondition
	92,  // 109: conversation.ReportConversationsRequest.created:type_name -> conversation.FilterCondition
	92,  // 110: conversation.ReportConversationsRequest.user_id:type_name -> conversation.FilterCondition
	92,  // 111: conversation.ReportConversationsRequest.tag_ids:type_name -> conversation.FilterCondition
	92,  // 112: conversation.ReportConversationsRequest.state:type_name -> conversation.FilterCondition
	92,  // 113: conversation.ReportConversationsRequest.response_time:type_name -> conversation.FilterCondition
	105, // 114: conversation.SCondition.conditions:type_name -> conversation.SCondition
	115, // [115:115] is the sub-list for method output_type
	115, // [115:115] is the sub-list for method input_type
	115, // [115:115] is the sub-list for extension type_name
	115, // [115:115] is the sub-list for extension extendee
	0,   // [0:115] is the sub-list for field type_name
}

func init() { file_conversation_proto_init() }
func file_conversation_proto_init() {
	if File_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttributeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimmingCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskInfomationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskInfomation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericElementTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Form); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormSubmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Templates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Postback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResponseTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResponseTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESTickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketAttributeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreementTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelAgreements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResolveTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvgResolveTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailibilityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESConversation_ResponseTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conversation_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conversation_proto_goTypes,
		DependencyIndexes: file_conversation_proto_depIdxs,
		EnumInfos:         file_conversation_proto_enumTypes,
		MessageInfos:      file_conversation_proto_msgTypes,
	}.Build()
	File_conversation_proto = out.File
	file_conversation_proto_rawDesc = nil
	file_conversation_proto_goTypes = nil
	file_conversation_proto_depIdxs = nil
}
