// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package placeholder

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder(in *jlexer.Lexer, out *Resolved) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]string, 0, 4)
					} else {
						out.Errors = []string{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Errors = append(out.Errors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder(out *jwriter.Writer, in Resolved) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if len(in.Errors) != 0 {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Errors {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resolved) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resolved) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resolved) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resolved) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder(l, v)
}
func easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder1(in *jlexer.Lexer, out *ResolveRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "default_value":
			if in.IsNull() {
				in.Skip()
				out.DefaultValue = nil
			} else {
				if out.DefaultValue == nil {
					out.DefaultValue = new(string)
				}
				*out.DefaultValue = string(in.String())
			}
		case "out_topic":
			if in.IsNull() {
				in.Skip()
				out.OutTopic = nil
			} else {
				if out.OutTopic == nil {
					out.OutTopic = new(string)
				}
				*out.OutTopic = string(in.String())
			}
		case "out_key":
			if in.IsNull() {
				in.Skip()
				out.OutKey = nil
			} else {
				if out.OutKey == nil {
					out.OutKey = new(string)
				}
				*out.OutKey = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "agent_id":
			if in.IsNull() {
				in.Skip()
				out.AgentId = nil
			} else {
				if out.AgentId == nil {
					out.AgentId = new(string)
				}
				*out.AgentId = string(in.String())
			}
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "postback_id":
			if in.IsNull() {
				in.Skip()
				out.PostbackId = nil
			} else {
				if out.PostbackId == nil {
					out.PostbackId = new(string)
				}
				*out.PostbackId = string(in.String())
			}
		case "content_id":
			if in.IsNull() {
				in.Skip()
				out.ContentId = nil
			} else {
				if out.ContentId == nil {
					out.ContentId = new(string)
				}
				*out.ContentId = string(in.String())
			}
		case "topic_id":
			if in.IsNull() {
				in.Skip()
				out.TopicId = nil
			} else {
				if out.TopicId == nil {
					out.TopicId = new(string)
				}
				*out.TopicId = string(in.String())
			}
		case "presence_id":
			if in.IsNull() {
				in.Skip()
				out.PresenceId = nil
			} else {
				if out.PresenceId == nil {
					out.PresenceId = new(string)
				}
				*out.PresenceId = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "unread_topic_id":
			if in.IsNull() {
				in.Skip()
				out.UnreadTopicId = nil
			} else {
				if out.UnreadTopicId == nil {
					out.UnreadTopicId = new(string)
				}
				*out.UnreadTopicId = string(in.String())
			}
		case "my_user_id":
			if in.IsNull() {
				in.Skip()
				out.MyUserId = nil
			} else {
				if out.MyUserId == nil {
					out.MyUserId = new(string)
				}
				*out.MyUserId = string(in.String())
			}
		case "notification_id":
			if in.IsNull() {
				in.Skip()
				out.NotificationId = nil
			} else {
				if out.NotificationId == nil {
					out.NotificationId = new(string)
				}
				*out.NotificationId = string(in.String())
			}
		case "notibox_id":
			if in.IsNull() {
				in.Skip()
				out.NotiboxId = nil
			} else {
				if out.NotiboxId == nil {
					out.NotiboxId = new(string)
				}
				*out.NotiboxId = string(in.String())
			}
		case "agent_perm_id":
			if in.IsNull() {
				in.Skip()
				out.AgentPermId = nil
			} else {
				if out.AgentPermId == nil {
					out.AgentPermId = new(string)
				}
				*out.AgentPermId = string(in.String())
			}
		case "group_member_id":
			if in.IsNull() {
				in.Skip()
				out.GroupMemberId = nil
			} else {
				if out.GroupMemberId == nil {
					out.GroupMemberId = new(string)
				}
				*out.GroupMemberId = string(in.String())
			}
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupId = nil
			} else {
				if out.GroupId == nil {
					out.GroupId = new(string)
				}
				*out.GroupId = string(in.String())
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "limit_id":
			if in.IsNull() {
				in.Skip()
				out.LimitId = nil
			} else {
				if out.LimitId == nil {
					out.LimitId = new(string)
				}
				*out.LimitId = string(in.String())
			}
		case "user_attribute_id":
			if in.IsNull() {
				in.Skip()
				out.UserAttributeId = nil
			} else {
				if out.UserAttributeId == nil {
					out.UserAttributeId = new(string)
				}
				*out.UserAttributeId = string(in.String())
			}
		case "alias_id":
			if in.IsNull() {
				in.Skip()
				out.AliasId = nil
			} else {
				if out.AliasId == nil {
					out.AliasId = new(string)
				}
				*out.AliasId = string(in.String())
			}
		case "note_id":
			if in.IsNull() {
				in.Skip()
				out.NoteId = nil
			} else {
				if out.NoteId == nil {
					out.NoteId = new(string)
				}
				*out.NoteId = string(in.String())
			}
		case "ticket_id":
			if in.IsNull() {
				in.Skip()
				out.TicketId = nil
			} else {
				if out.TicketId == nil {
					out.TicketId = new(string)
				}
				*out.TicketId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder1(out *jwriter.Writer, in ResolveRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.DefaultValue != nil {
		const prefix string = ",\"default_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DefaultValue))
	}
	if in.OutTopic != nil {
		const prefix string = ",\"out_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OutTopic))
	}
	if in.OutKey != nil {
		const prefix string = ",\"out_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OutKey))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.AgentId != nil {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentId))
	}
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.PostbackId != nil {
		const prefix string = ",\"postback_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PostbackId))
	}
	if in.ContentId != nil {
		const prefix string = ",\"content_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentId))
	}
	if in.TopicId != nil {
		const prefix string = ",\"topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TopicId))
	}
	if in.PresenceId != nil {
		const prefix string = ",\"presence_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PresenceId))
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.UnreadTopicId != nil {
		const prefix string = ",\"unread_topic_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UnreadTopicId))
	}
	if in.MyUserId != nil {
		const prefix string = ",\"my_user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MyUserId))
	}
	if in.NotificationId != nil {
		const prefix string = ",\"notification_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NotificationId))
	}
	if in.NotiboxId != nil {
		const prefix string = ",\"notibox_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NotiboxId))
	}
	if in.AgentPermId != nil {
		const prefix string = ",\"agent_perm_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AgentPermId))
	}
	if in.GroupMemberId != nil {
		const prefix string = ",\"group_member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupMemberId))
	}
	if in.GroupId != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GroupId))
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.LimitId != nil {
		const prefix string = ",\"limit_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LimitId))
	}
	if in.UserAttributeId != nil {
		const prefix string = ",\"user_attribute_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserAttributeId))
	}
	if in.AliasId != nil {
		const prefix string = ",\"alias_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AliasId))
	}
	if in.NoteId != nil {
		const prefix string = ",\"note_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NoteId))
	}
	if in.TicketId != nil {
		const prefix string = ",\"ticket_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TicketId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResolveRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResolveRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEe4b78b9EncodeGithubComSubizHeaderPlaceholder1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResolveRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResolveRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEe4b78b9DecodeGithubComSubizHeaderPlaceholder1(l, v)
}
