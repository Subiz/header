// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: placeholder.proto

package placeholder

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Text            *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`                                     // text that need to be replaced
	DefaultValue    *string         `protobuf:"bytes,3,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"` // default value for empty replacement
	OutTopic        *string         `protobuf:"bytes,5,opt,name=out_topic,json=outTopic" json:"out_topic,omitempty"`             // kafka topic to publish result to
	OutKey          *string         `protobuf:"bytes,6,opt,name=out_key,json=outKey" json:"out_key,omitempty"`                   // kafka key to publish result to
	AccountId       *string         `protobuf:"bytes,11,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId         *string         `protobuf:"bytes,12,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	MessageId       *string         `protobuf:"bytes,13,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	ConversationId  *string         `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	PostbackId      *string         `protobuf:"bytes,15,opt,name=postback_id,json=postbackId" json:"postback_id,omitempty"`
	ContentId       *string         `protobuf:"bytes,16,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	TopicId         *string         `protobuf:"bytes,17,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	PresenceId      *string         `protobuf:"bytes,18,opt,name=presence_id,json=presenceId" json:"presence_id,omitempty"`
	UserId          *string         `protobuf:"bytes,20,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UnreadTopicId   *string         `protobuf:"bytes,21,opt,name=unread_topic_id,json=unreadTopicId" json:"unread_topic_id,omitempty"`
	MyUserId        *string         `protobuf:"bytes,22,opt,name=my_user_id,json=myUserId" json:"my_user_id,omitempty"`
	NotificationId  *string         `protobuf:"bytes,24,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	NotiboxId       *string         `protobuf:"bytes,25,opt,name=notibox_id,json=notiboxId" json:"notibox_id,omitempty"`
	AgentPermId     *string         `protobuf:"bytes,26,opt,name=agent_perm_id,json=agentPermId" json:"agent_perm_id,omitempty"`
	GroupMemberId   *string         `protobuf:"bytes,27,opt,name=group_member_id,json=groupMemberId" json:"group_member_id,omitempty"`
	GroupId         *string         `protobuf:"bytes,28,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	IntegrationId   *string         `protobuf:"bytes,40,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	LimitId         *string         `protobuf:"bytes,29,opt,name=limit_id,json=limitId" json:"limit_id,omitempty"`
	UserAttributeId *string         `protobuf:"bytes,30,opt,name=user_attribute_id,json=userAttributeId" json:"user_attribute_id,omitempty"`
	AliasId         *string         `protobuf:"bytes,32,opt,name=alias_id,json=aliasId" json:"alias_id,omitempty"`
	NoteId          *string         `protobuf:"bytes,33,opt,name=note_id,json=noteId" json:"note_id,omitempty"`
	TicketId        *string         `protobuf:"bytes,34,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_placeholder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_placeholder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_placeholder_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ResolveRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ResolveRequest) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *ResolveRequest) GetOutTopic() string {
	if x != nil && x.OutTopic != nil {
		return *x.OutTopic
	}
	return ""
}

func (x *ResolveRequest) GetOutKey() string {
	if x != nil && x.OutKey != nil {
		return *x.OutKey
	}
	return ""
}

func (x *ResolveRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ResolveRequest) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ResolveRequest) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *ResolveRequest) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *ResolveRequest) GetPostbackId() string {
	if x != nil && x.PostbackId != nil {
		return *x.PostbackId
	}
	return ""
}

func (x *ResolveRequest) GetContentId() string {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return ""
}

func (x *ResolveRequest) GetTopicId() string {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return ""
}

func (x *ResolveRequest) GetPresenceId() string {
	if x != nil && x.PresenceId != nil {
		return *x.PresenceId
	}
	return ""
}

func (x *ResolveRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ResolveRequest) GetUnreadTopicId() string {
	if x != nil && x.UnreadTopicId != nil {
		return *x.UnreadTopicId
	}
	return ""
}

func (x *ResolveRequest) GetMyUserId() string {
	if x != nil && x.MyUserId != nil {
		return *x.MyUserId
	}
	return ""
}

func (x *ResolveRequest) GetNotificationId() string {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return ""
}

func (x *ResolveRequest) GetNotiboxId() string {
	if x != nil && x.NotiboxId != nil {
		return *x.NotiboxId
	}
	return ""
}

func (x *ResolveRequest) GetAgentPermId() string {
	if x != nil && x.AgentPermId != nil {
		return *x.AgentPermId
	}
	return ""
}

func (x *ResolveRequest) GetGroupMemberId() string {
	if x != nil && x.GroupMemberId != nil {
		return *x.GroupMemberId
	}
	return ""
}

func (x *ResolveRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *ResolveRequest) GetIntegrationId() string {
	if x != nil && x.IntegrationId != nil {
		return *x.IntegrationId
	}
	return ""
}

func (x *ResolveRequest) GetLimitId() string {
	if x != nil && x.LimitId != nil {
		return *x.LimitId
	}
	return ""
}

func (x *ResolveRequest) GetUserAttributeId() string {
	if x != nil && x.UserAttributeId != nil {
		return *x.UserAttributeId
	}
	return ""
}

func (x *ResolveRequest) GetAliasId() string {
	if x != nil && x.AliasId != nil {
		return *x.AliasId
	}
	return ""
}

func (x *ResolveRequest) GetNoteId() string {
	if x != nil && x.NoteId != nil {
		return *x.NoteId
	}
	return ""
}

func (x *ResolveRequest) GetTicketId() string {
	if x != nil && x.TicketId != nil {
		return *x.TicketId
	}
	return ""
}

type Resolved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Text   *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Errors []string        `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (x *Resolved) Reset() {
	*x = Resolved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_placeholder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolved) ProtoMessage() {}

func (x *Resolved) ProtoReflect() protoreflect.Message {
	mi := &file_placeholder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolved.ProtoReflect.Descriptor instead.
func (*Resolved) Descriptor() ([]byte, []int) {
	return file_placeholder_proto_rawDescGZIP(), []int{1}
}

func (x *Resolved) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Resolved) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Resolved) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_placeholder_proto protoreflect.FileDescriptor

var file_placeholder_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed,
	0x06, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
}

var (
	file_placeholder_proto_rawDescOnce sync.Once
	file_placeholder_proto_rawDescData = file_placeholder_proto_rawDesc
)

func file_placeholder_proto_rawDescGZIP() []byte {
	file_placeholder_proto_rawDescOnce.Do(func() {
		file_placeholder_proto_rawDescData = protoimpl.X.CompressGZIP(file_placeholder_proto_rawDescData)
	})
	return file_placeholder_proto_rawDescData
}

var file_placeholder_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_placeholder_proto_goTypes = []interface{}{
	(*ResolveRequest)(nil), // 0: placeholder.ResolveRequest
	(*Resolved)(nil),       // 1: placeholder.Resolved
	(*common.Context)(nil), // 2: common.Context
}
var file_placeholder_proto_depIdxs = []int32{
	2, // 0: placeholder.ResolveRequest.ctx:type_name -> common.Context
	2, // 1: placeholder.Resolved.ctx:type_name -> common.Context
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_placeholder_proto_init() }
func file_placeholder_proto_init() {
	if File_placeholder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_placeholder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_placeholder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_placeholder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_placeholder_proto_goTypes,
		DependencyIndexes: file_placeholder_proto_depIdxs,
		MessageInfos:      file_placeholder_proto_msgTypes,
	}.Build()
	File_placeholder_proto = out.File
	file_placeholder_proto_rawDesc = nil
	file_placeholder_proto_goTypes = nil
	file_placeholder_proto_depIdxs = nil
}
