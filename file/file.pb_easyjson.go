// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package file

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD41e02c8DecodeGithubComSubizHeaderFile(in *jlexer.Lexer, out *myServerClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile(out *jwriter.Writer, in myServerClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v myServerClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v myServerClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *myServerClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *myServerClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile1(in *jlexer.Lexer, out *fileMgrClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile1(out *jwriter.Writer, in fileMgrClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fileMgrClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fileMgrClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fileMgrClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fileMgrClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile1(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile2(in *jlexer.Lexer, out *PresignResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "signed_url":
			out.SignedUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile2(out *jwriter.Writer, in PresignResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.SignedUrl != "" {
		const prefix string = ",\"signed_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SignedUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PresignResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresignResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PresignResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresignResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile2(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile3(in *jlexer.Lexer, out *FileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile3(out *jwriter.Writer, in FileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile3(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile4(in *jlexer.Lexer, out *FileMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "uploaded":
			out.Uploaded = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "full_url":
			out.FullUrl = string(in.String())
		case "mime_type":
			out.MimeType = string(in.String())
		case "downloaded":
			out.Downloaded = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile4(out *jwriter.Writer, in FileMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Uploaded != 0 {
		const prefix string = ",\"uploaded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Uploaded))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.FullUrl != "" {
		const prefix string = ",\"full_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullUrl))
	}
	if in.MimeType != "" {
		const prefix string = ",\"mime_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MimeType))
	}
	if in.Downloaded != 0 {
		const prefix string = ",\"downloaded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Downloaded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile4(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile5(in *jlexer.Lexer, out *FileHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "md5":
			out.Md5 = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile5(out *jwriter.Writer, in FileHeader) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Md5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Md5))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile5(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile6(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "md5":
			out.Md5 = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "url":
			out.Url = string(in.String())
		case "creator":
			out.Creator = string(in.String())
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile6(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Md5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Md5))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile6(l, v)
}
func easyjsonD41e02c8DecodeGithubComSubizHeaderFile7(in *jlexer.Lexer, out *AllType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fh":
			if in.IsNull() {
				in.Skip()
				out.Fh = nil
			} else {
				if out.Fh == nil {
					out.Fh = new(FileHeader)
				}
				(*out.Fh).UnmarshalEasyJSON(in)
			}
		case "ps":
			if in.IsNull() {
				in.Skip()
				out.Ps = nil
			} else {
				if out.Ps == nil {
					out.Ps = new(PresignResult)
				}
				(*out.Ps).UnmarshalEasyJSON(in)
			}
		case "f":
			if in.IsNull() {
				in.Skip()
				out.F = nil
			} else {
				if out.F == nil {
					out.F = new(File)
				}
				(*out.F).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD41e02c8EncodeGithubComSubizHeaderFile7(out *jwriter.Writer, in AllType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Fh != nil {
		const prefix string = ",\"fh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Fh).MarshalEasyJSON(out)
	}
	if in.Ps != nil {
		const prefix string = ",\"ps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ps).MarshalEasyJSON(out)
	}
	if in.F != nil {
		const prefix string = ",\"f\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.F).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD41e02c8EncodeGithubComSubizHeaderFile7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD41e02c8DecodeGithubComSubizHeaderFile7(l, v)
}
