// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file/file.proto

package file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_FilePresignRequested Event = 0
	Event_FileCreated          Event = 3
	Event_FileInfoRequested    Event = 4
	Event_FileUploaded         Event = 6
	Event_FileRequested        Event = 10
)

var Event_name = map[int32]string{
	0:  "FilePresignRequested",
	3:  "FileCreated",
	4:  "FileInfoRequested",
	6:  "FileUploaded",
	10: "FileRequested",
}

var Event_value = map[string]int32{
	"FilePresignRequested": 0,
	"FileCreated":          3,
	"FileInfoRequested":    4,
	"FileUploaded":         6,
	"FileRequested":        10,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{0}
}

type AllType struct {
	Fh                   *FileHeader    `protobuf:"bytes,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Ps                   *PresignResult `protobuf:"bytes,3,opt,name=ps,proto3" json:"ps,omitempty"`
	F                    *File          `protobuf:"bytes,4,opt,name=f,proto3" json:"f,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AllType) Reset()         { *m = AllType{} }
func (m *AllType) String() string { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()    {}
func (*AllType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{0}
}

func (m *AllType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllType.Unmarshal(m, b)
}
func (m *AllType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllType.Marshal(b, m, deterministic)
}
func (m *AllType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllType.Merge(m, src)
}
func (m *AllType) XXX_Size() int {
	return xxx_messageInfo_AllType.Size(m)
}
func (m *AllType) XXX_DiscardUnknown() {
	xxx_messageInfo_AllType.DiscardUnknown(m)
}

var xxx_messageInfo_AllType proto.InternalMessageInfo

func (m *AllType) GetFh() *FileHeader {
	if m != nil {
		return m.Fh
	}
	return nil
}

func (m *AllType) GetPs() *PresignResult {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *AllType) GetF() *File {
	if m != nil {
		return m.F
	}
	return nil
}

type FileHeader struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                 string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Size                 int64           `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Md5                  string          `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Description          string          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FileHeader) Reset()         { *m = FileHeader{} }
func (m *FileHeader) String() string { return proto.CompactTextString(m) }
func (*FileHeader) ProtoMessage()    {}
func (*FileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{1}
}

func (m *FileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHeader.Unmarshal(m, b)
}
func (m *FileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHeader.Marshal(b, m, deterministic)
}
func (m *FileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHeader.Merge(m, src)
}
func (m *FileHeader) XXX_Size() int {
	return xxx_messageInfo_FileHeader.Size(m)
}
func (m *FileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FileHeader proto.InternalMessageInfo

func (m *FileHeader) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *FileHeader) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *FileHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileHeader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FileHeader) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileHeader) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *FileHeader) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type PresignResult struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Url                  string          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Id                   string          `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	SignedUrl            string          `protobuf:"bytes,5,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PresignResult) Reset()         { *m = PresignResult{} }
func (m *PresignResult) String() string { return proto.CompactTextString(m) }
func (*PresignResult) ProtoMessage()    {}
func (*PresignResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{2}
}

func (m *PresignResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PresignResult.Unmarshal(m, b)
}
func (m *PresignResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PresignResult.Marshal(b, m, deterministic)
}
func (m *PresignResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PresignResult.Merge(m, src)
}
func (m *PresignResult) XXX_Size() int {
	return xxx_messageInfo_PresignResult.Size(m)
}
func (m *PresignResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PresignResult.DiscardUnknown(m)
}

var xxx_messageInfo_PresignResult proto.InternalMessageInfo

func (m *PresignResult) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *PresignResult) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *PresignResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PresignResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PresignResult) GetSignedUrl() string {
	if m != nil {
		return m.SignedUrl
	}
	return ""
}

type FileRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                   string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{3}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *FileRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *FileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type File struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                 string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Size                 int64           `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Md5                  string          `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Description          string          `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Created              int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Url                  string          `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	Creator              string          `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                   string          `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{4}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *File) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *File) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *File) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *File) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *File) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *File) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("file.Event", Event_name, Event_value)
	proto.RegisterType((*AllType)(nil), "file.AllType")
	proto.RegisterType((*FileHeader)(nil), "file.FileHeader")
	proto.RegisterType((*PresignResult)(nil), "file.PresignResult")
	proto.RegisterType((*FileRequest)(nil), "file.FileRequest")
	proto.RegisterType((*File)(nil), "file.File")
}

func init() { proto.RegisterFile("file/file.proto", fileDescriptor_ad806f8986a0c3f6) }

var fileDescriptor_ad806f8986a0c3f6 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x7e, 0xfd, 0x91, 0xaf, 0x49, 0xf3, 0xc6, 0x99, 0x82, 0x64, 0x45, 0x42, 0x0a, 0x46, 0x48,
	0x2d, 0x48, 0x09, 0x0a, 0xe2, 0x07, 0xa0, 0x02, 0xa2, 0x87, 0x4a, 0x95, 0xa1, 0x07, 0x4e, 0x91,
	0xe3, 0x1d, 0x27, 0x8b, 0x1c, 0xaf, 0x59, 0xaf, 0xab, 0xa6, 0x3f, 0x82, 0x03, 0xbf, 0x86, 0x13,
	0xbf, 0x0d, 0xed, 0xda, 0x6e, 0x52, 0x8a, 0x04, 0x48, 0x1c, 0xb8, 0xd8, 0x33, 0xcf, 0x3e, 0x3b,
	0x5f, 0x8f, 0xc7, 0x30, 0x4c, 0x78, 0x4a, 0x33, 0xfd, 0x98, 0xe6, 0x52, 0x28, 0x81, 0xae, 0xb6,
	0xc7, 0x4f, 0x57, 0x5c, 0xad, 0xcb, 0xe5, 0x34, 0x16, 0x9b, 0x59, 0x51, 0x2e, 0xf9, 0xf5, 0x6c,
	0x4d, 0x11, 0x23, 0x39, 0x8b, 0xc5, 0x66, 0x23, 0xb2, 0xfa, 0x55, 0x5d, 0x09, 0x3e, 0x42, 0xe7,
	0x65, 0x9a, 0xbe, 0xdf, 0xe6, 0x84, 0x13, 0xb0, 0x93, 0xb5, 0x6f, 0x4f, 0xac, 0xa3, 0xfe, 0xdc,
	0x9b, 0x9a, 0xb0, 0x6f, 0x78, 0x4a, 0x6f, 0xcd, 0xe5, 0xd0, 0x4e, 0xd6, 0xf8, 0x08, 0xec, 0xbc,
	0xf0, 0x1d, 0xc3, 0x38, 0xac, 0x18, 0xe7, 0x92, 0x0a, 0xbe, 0xca, 0x42, 0x2a, 0xca, 0x54, 0x85,
	0x76, 0x5e, 0xa0, 0x0f, 0x56, 0xe2, 0xbb, 0x86, 0x03, 0xbb, 0x28, 0xa1, 0x95, 0x04, 0xdf, 0x2c,
	0x80, 0x5d, 0x44, 0x7c, 0x08, 0x4e, 0xac, 0xae, 0x7c, 0xcb, 0x50, 0x87, 0xd3, 0xba, 0xac, 0x13,
	0x91, 0x29, 0xba, 0x52, 0xa1, 0x3e, 0xc3, 0x07, 0x00, 0x51, 0x1c, 0x8b, 0x32, 0x53, 0x0b, 0xce,
	0x4c, 0x69, 0xbd, 0xb0, 0x57, 0x23, 0xa7, 0x0c, 0x11, 0xdc, 0x2c, 0xda, 0x90, 0xa9, 0xa8, 0x17,
	0x1a, 0x5b, 0x63, 0x6a, 0x9b, 0x93, 0xa9, 0xa0, 0x17, 0x1a, 0x5b, 0x63, 0x05, 0xbf, 0x26, 0xbf,
	0x35, 0xb1, 0x8e, 0x9c, 0xd0, 0xd8, 0xe8, 0x81, 0xb3, 0x61, 0x2f, 0xfc, 0xb6, 0xa1, 0x69, 0x13,
	0x27, 0xd0, 0x67, 0x54, 0xc4, 0x92, 0xe7, 0x8a, 0x8b, 0xcc, 0xef, 0x98, 0x93, 0x7d, 0x28, 0xf8,
	0x62, 0xc1, 0xe0, 0x56, 0xc3, 0x7f, 0xde, 0x83, 0xf3, 0x63, 0x0f, 0x1e, 0x38, 0xa5, 0x4c, 0xeb,
	0x72, 0xb5, 0x89, 0xff, 0x83, 0xcd, 0x59, 0x5d, 0x98, 0xcd, 0x99, 0x0e, 0xa0, 0x33, 0x12, 0x5b,
	0x68, 0x62, 0xab, 0x0a, 0x50, 0x21, 0x17, 0x32, 0x0d, 0x16, 0xd0, 0x37, 0x03, 0xa6, 0x4f, 0x25,
	0x15, 0xea, 0x2f, 0x4c, 0xb5, 0xca, 0xef, 0x34, 0xf9, 0x83, 0xcf, 0x36, 0xb8, 0x3a, 0xc3, 0xbf,
	0x2e, 0x18, 0xdc, 0x11, 0x0c, 0x7d, 0xe8, 0xc4, 0x92, 0x22, 0x45, 0xcc, 0xc8, 0xe9, 0x84, 0x8d,
	0xdb, 0x8c, 0xbd, 0xbb, 0x1b, 0x7b, 0xc3, 0x15, 0xd2, 0xef, 0x19, 0xb4, 0x71, 0xeb, 0x81, 0xf4,
	0x9b, 0x81, 0x3c, 0xc9, 0xa0, 0xf5, 0xfa, 0x92, 0x32, 0x85, 0x3e, 0xdc, 0xd3, 0x83, 0xb9, 0xf9,
	0x24, 0x8c, 0x02, 0xc4, 0xbc, 0xff, 0x70, 0x58, 0x89, 0x72, 0x52, 0x65, 0xf3, 0x1c, 0xbc, 0x0f,
	0x23, 0x0d, 0x9c, 0x66, 0x89, 0xd8, 0xf1, 0x5c, 0xf4, 0xe0, 0x40, 0xc3, 0x17, 0x79, 0x2a, 0x22,
	0x46, 0xcc, 0x6b, 0xe3, 0x08, 0x06, 0x7b, 0x72, 0x12, 0xf3, 0x60, 0xfe, 0x01, 0xba, 0x67, 0xdb,
	0x77, 0x24, 0x2f, 0x49, 0x62, 0x00, 0xf6, 0x2b, 0x81, 0x83, 0x6a, 0xb1, 0xea, 0xcd, 0x1d, 0xdf,
	0x76, 0xf1, 0x18, 0xdc, 0x73, 0x9e, 0xad, 0xf0, 0xb0, 0x91, 0x48, 0x7b, 0x75, 0xc0, 0xf1, 0xc1,
	0x0d, 0x28, 0xb2, 0xd5, 0xfc, 0xab, 0x05, 0x1d, 0x9d, 0xee, 0x6c, 0x25, 0xf1, 0x19, 0x74, 0xea,
	0x4e, 0xf0, 0xce, 0xfa, 0x8f, 0x7f, 0xb6, 0xee, 0xf8, 0x18, 0xdc, 0x90, 0x22, 0x86, 0xa3, 0xbd,
	0x3d, 0xaf, 0xd3, 0xec, 0xad, 0x3e, 0x1e, 0x43, 0xb7, 0x69, 0xf0, 0xd7, 0xd4, 0xdf, 0x2d, 0x7d,
	0xd9, 0x36, 0x3f, 0xb0, 0xe7, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x12, 0x76, 0xe7, 0xc0, 0x06,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyServerClient is the client API for MyServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := c.cc.Invoke(ctx, "/file.MyServer/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServerClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/file.MyServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServerServer is the server API for MyServer service.
type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.MyServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MyServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/file.proto",
}

// FileMgrClient is the client API for FileMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileMgrClient interface {
	Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error)
	Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type fileMgrClient struct {
	cc *grpc.ClientConn
}

func NewFileMgrClient(cc *grpc.ClientConn) FileMgrClient {
	return &fileMgrClient{cc}
}

func (c *fileMgrClient) Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error) {
	out := new(PresignResult)
	err := c.cc.Invoke(ctx, "/file.FileMgr/Presign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileMgr/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileMgr/Uploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/file.FileMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMgrServer is the server API for FileMgr service.
type FileMgrServer interface {
	Presign(context.Context, *FileHeader) (*PresignResult, error)
	Read(context.Context, *FileRequest) (*File, error)
	Uploaded(context.Context, *FileRequest) (*File, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterFileMgrServer(s *grpc.Server, srv FileMgrServer) {
	s.RegisterService(&_FileMgr_serviceDesc, srv)
}

func _FileMgr_Presign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Presign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileMgr/Presign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Presign(ctx, req.(*FileHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Read(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Uploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Uploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileMgr/Uploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Uploaded(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileMgr",
	HandlerType: (*FileMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Presign",
			Handler:    _FileMgr_Presign_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FileMgr_Read_Handler,
		},
		{
			MethodName: "Uploaded",
			Handler:    _FileMgr_Uploaded_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FileMgr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/file.proto",
}
