// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messagetemplate/messagetemplate.proto

package messagetemplate

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	conversation "git.subiz.net/header/conversation"
	email "git.subiz.net/header/email"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageTemplate struct {
	AccountId            string                  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId              string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Type                 string                  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Messages             []*conversation.Message `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	Email                *email.Email            `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Channel              string                  `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	IsPublic             bool                    `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Id                   string                  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Ctx                  *common.Context         `protobuf:"bytes,9,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MessageTemplate) Reset()         { *m = MessageTemplate{} }
func (m *MessageTemplate) String() string { return proto.CompactTextString(m) }
func (*MessageTemplate) ProtoMessage()    {}
func (*MessageTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b157aae586cd5f, []int{0}
}

func (m *MessageTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageTemplate.Unmarshal(m, b)
}
func (m *MessageTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageTemplate.Marshal(b, m, deterministic)
}
func (m *MessageTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageTemplate.Merge(m, src)
}
func (m *MessageTemplate) XXX_Size() int {
	return xxx_messageInfo_MessageTemplate.Size(m)
}
func (m *MessageTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_MessageTemplate proto.InternalMessageInfo

func (m *MessageTemplate) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *MessageTemplate) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *MessageTemplate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MessageTemplate) GetMessages() []*conversation.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *MessageTemplate) GetEmail() *email.Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *MessageTemplate) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MessageTemplate) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *MessageTemplate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageTemplate) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type SearchMessageTemplate struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId              string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Type                 string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Query                string          `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Channel              string          `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	IsPublic             bool            `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchMessageTemplate) Reset()         { *m = SearchMessageTemplate{} }
func (m *SearchMessageTemplate) String() string { return proto.CompactTextString(m) }
func (*SearchMessageTemplate) ProtoMessage()    {}
func (*SearchMessageTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b157aae586cd5f, []int{1}
}

func (m *SearchMessageTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMessageTemplate.Unmarshal(m, b)
}
func (m *SearchMessageTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMessageTemplate.Marshal(b, m, deterministic)
}
func (m *SearchMessageTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMessageTemplate.Merge(m, src)
}
func (m *SearchMessageTemplate) XXX_Size() int {
	return xxx_messageInfo_SearchMessageTemplate.Size(m)
}
func (m *SearchMessageTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMessageTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMessageTemplate proto.InternalMessageInfo

func (m *SearchMessageTemplate) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SearchMessageTemplate) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *SearchMessageTemplate) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *SearchMessageTemplate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchMessageTemplate) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchMessageTemplate) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SearchMessageTemplate) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type MessageTemplates struct {
	Ctx                  *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	MessageTemplates     []*MessageTemplate `protobuf:"bytes,2,rep,name=message_templates,json=messageTemplates,proto3" json:"message_templates,omitempty"`
	Anchor               string             `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MessageTemplates) Reset()         { *m = MessageTemplates{} }
func (m *MessageTemplates) String() string { return proto.CompactTextString(m) }
func (*MessageTemplates) ProtoMessage()    {}
func (*MessageTemplates) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b157aae586cd5f, []int{2}
}

func (m *MessageTemplates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageTemplates.Unmarshal(m, b)
}
func (m *MessageTemplates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageTemplates.Marshal(b, m, deterministic)
}
func (m *MessageTemplates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageTemplates.Merge(m, src)
}
func (m *MessageTemplates) XXX_Size() int {
	return xxx_messageInfo_MessageTemplates.Size(m)
}
func (m *MessageTemplates) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageTemplates.DiscardUnknown(m)
}

var xxx_messageInfo_MessageTemplates proto.InternalMessageInfo

func (m *MessageTemplates) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *MessageTemplates) GetMessageTemplates() []*MessageTemplate {
	if m != nil {
		return m.MessageTemplates
	}
	return nil
}

func (m *MessageTemplates) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *MessageTemplates) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageTemplate)(nil), "messagetemplate.MessageTemplate")
	proto.RegisterType((*SearchMessageTemplate)(nil), "messagetemplate.SearchMessageTemplate")
	proto.RegisterType((*MessageTemplates)(nil), "messagetemplate.MessageTemplates")
}

func init() {
	proto.RegisterFile("messagetemplate/messagetemplate.proto", fileDescriptor_c1b157aae586cd5f)
}

var fileDescriptor_c1b157aae586cd5f = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0xd5, 0x6e, 0xfe, 0xa7, 0xfd, 0xbe, 0x14, 0x43, 0x2a, 0xb3, 0x08, 0x29, 0x8d, 0x44, 0x15,
	0x6e, 0x36, 0x22, 0xf0, 0x04, 0x40, 0x85, 0x72, 0x51, 0xa9, 0xda, 0xc2, 0x15, 0x17, 0x91, 0xe3,
	0x1d, 0x25, 0x96, 0x76, 0xbd, 0xdb, 0xb5, 0x53, 0x35, 0x3c, 0x0d, 0xcf, 0xc0, 0xbb, 0xf0, 0x38,
	0x48, 0x68, 0x6d, 0xa7, 0x80, 0x9b, 0x36, 0x88, 0x1b, 0xc7, 0x67, 0x66, 0x4e, 0xe6, 0xcc, 0xf1,
	0x68, 0xe1, 0x45, 0x8e, 0x4a, 0xb1, 0x25, 0x6a, 0xcc, 0xcb, 0x8c, 0x69, 0x9c, 0x78, 0x38, 0x2e,
	0xab, 0x42, 0x17, 0xa4, 0xef, 0x85, 0xa3, 0xf1, 0x52, 0xe8, 0x58, 0xad, 0x17, 0xe2, 0x4b, 0x2c,
	0x51, 0x4f, 0x56, 0xc8, 0x52, 0xac, 0x26, 0xbc, 0xc8, 0xf3, 0x42, 0xba, 0x1f, 0x4b, 0x8d, 0xde,
	0xdc, 0x53, 0x29, 0xaf, 0xb1, 0x52, 0x4c, 0x0b, 0x53, 0xff, 0x0b, 0x38, 0xd6, 0xe9, 0x4e, 0x16,
	0xe6, 0x4c, 0x64, 0xf6, 0xb4, 0x75, 0xa3, 0xaf, 0x21, 0xf4, 0xcf, 0xad, 0xb6, 0x8f, 0x4e, 0x1b,
	0x79, 0x0e, 0xc0, 0x38, 0x2f, 0xd6, 0x52, 0xcf, 0x45, 0x4a, 0x83, 0x61, 0x30, 0xee, 0x25, 0x3d,
	0x17, 0x99, 0xa5, 0xe4, 0x29, 0x74, 0xd9, 0x12, 0x6d, 0x32, 0x34, 0xc9, 0x8e, 0xc1, 0xb3, 0x94,
	0x10, 0x68, 0xea, 0x4d, 0x89, 0xb4, 0x61, 0xc2, 0xe6, 0x4e, 0x5e, 0x41, 0xd7, 0x0d, 0xaf, 0x68,
	0x73, 0xd8, 0x18, 0x1f, 0x4c, 0x07, 0xf1, 0x1f, 0x82, 0x5d, 0xfb, 0xe4, 0xb6, 0x8c, 0x8c, 0xa0,
	0x65, 0x34, 0xd2, 0xd6, 0x30, 0x18, 0x1f, 0x4c, 0x0f, 0x63, 0xab, 0xf8, 0xac, 0x3e, 0x13, 0x9b,
	0x22, 0x14, 0x3a, 0x7c, 0xc5, 0xa4, 0xc4, 0x8c, 0xb6, 0xad, 0x08, 0x07, 0xc9, 0x33, 0xe8, 0x09,
	0x35, 0x2f, 0xd7, 0x8b, 0x4c, 0x70, 0xda, 0x19, 0x06, 0xe3, 0x6e, 0xd2, 0x15, 0xea, 0xc2, 0x60,
	0xf2, 0x3f, 0x84, 0x22, 0xa5, 0x5d, 0xc3, 0x08, 0x45, 0x4a, 0x4e, 0xa0, 0xc1, 0xf5, 0x0d, 0xed,
	0x99, 0x46, 0xfd, 0xd8, 0x39, 0xff, 0xae, 0x90, 0x1a, 0x6f, 0x74, 0x52, 0xe7, 0x46, 0xdf, 0x03,
	0x18, 0x5c, 0x22, 0xab, 0xf8, 0xca, 0x37, 0xca, 0x91, 0x83, 0xfb, 0xc9, 0x9e, 0x97, 0xe1, 0x43,
	0x5e, 0x36, 0x76, 0x7b, 0xd9, 0xfc, 0xcd, 0xcb, 0x27, 0xd0, 0xba, 0x5a, 0x63, 0xb5, 0x31, 0xc6,
	0xf4, 0x12, 0x0b, 0xfe, 0xd1, 0x8a, 0xd1, 0xb7, 0x00, 0x8e, 0xbc, 0x89, 0xd4, 0xdf, 0x8c, 0x74,
	0x0e, 0x8f, 0xdc, 0x4b, 0xcd, 0xb7, 0xeb, 0xac, 0x68, 0x68, 0x5e, 0x76, 0x18, 0xfb, 0xeb, 0xef,
	0x35, 0x48, 0x8e, 0x72, 0xbf, 0xe3, 0x31, 0xb4, 0x99, 0xe4, 0xab, 0xa2, 0x72, 0x06, 0x38, 0x54,
	0xcf, 0xaa, 0x0b, 0xcd, 0x32, 0x63, 0x40, 0x23, 0xb1, 0x60, 0xfa, 0x23, 0x84, 0xe3, 0x4b, 0xac,
	0xae, 0x05, 0x47, 0xff, 0x35, 0x5e, 0x42, 0xf3, 0x42, 0xc8, 0x25, 0x79, 0xbc, 0x55, 0x5d, 0xa3,
	0x04, 0xaf, 0xd6, 0xa8, 0x74, 0x74, 0x78, 0x1b, 0x2c, 0xe4, 0x92, 0x7c, 0x86, 0xc1, 0xa7, 0x52,
	0x61, 0xa5, 0xfd, 0xff, 0xd8, 0x3b, 0x40, 0xb4, 0xb7, 0x82, 0x4c, 0x61, 0xf0, 0x1e, 0x33, 0xd4,
	0x77, 0x04, 0xc2, 0x56, 0xc3, 0x2c, 0x8d, 0xfe, 0xdb, 0xde, 0xcf, 0xf2, 0x52, 0x6f, 0xc8, 0x5b,
	0x20, 0x1f, 0x50, 0x3f, 0x44, 0xd8, 0xdf, 0x97, 0xd7, 0xce, 0xec, 0x58, 0x53, 0x45, 0x4e, 0xef,
	0x70, 0x77, 0x16, 0x46, 0x27, 0xfb, 0x7a, 0xa8, 0x45, 0xdb, 0x7c, 0x36, 0x5e, 0xff, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0xf4, 0x87, 0x45, 0xf8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceMessageTemplateClient is the client API for ServiceMessageTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceMessageTemplateClient interface {
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	UpsertMessageTemplate(ctx context.Context, in *MessageTemplate, opts ...grpc.CallOption) (*MessageTemplate, error)
	DeleteMessageTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	GetMessageTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*MessageTemplate, error)
	SearchMessageTemplates(ctx context.Context, in *SearchMessageTemplate, opts ...grpc.CallOption) (*MessageTemplates, error)
}

type serviceMessageTemplateClient struct {
	cc *grpc.ClientConn
}

func NewServiceMessageTemplateClient(cc *grpc.ClientConn) ServiceMessageTemplateClient {
	return &serviceMessageTemplateClient{cc}
}

func (c *serviceMessageTemplateClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/messagetemplate.ServiceMessageTemplate/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessageTemplateClient) UpsertMessageTemplate(ctx context.Context, in *MessageTemplate, opts ...grpc.CallOption) (*MessageTemplate, error) {
	out := new(MessageTemplate)
	err := c.cc.Invoke(ctx, "/messagetemplate.ServiceMessageTemplate/UpsertMessageTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessageTemplateClient) DeleteMessageTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/messagetemplate.ServiceMessageTemplate/DeleteMessageTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessageTemplateClient) GetMessageTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*MessageTemplate, error) {
	out := new(MessageTemplate)
	err := c.cc.Invoke(ctx, "/messagetemplate.ServiceMessageTemplate/GetMessageTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessageTemplateClient) SearchMessageTemplates(ctx context.Context, in *SearchMessageTemplate, opts ...grpc.CallOption) (*MessageTemplates, error) {
	out := new(MessageTemplates)
	err := c.cc.Invoke(ctx, "/messagetemplate.ServiceMessageTemplate/SearchMessageTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceMessageTemplateServer is the server API for ServiceMessageTemplate service.
type ServiceMessageTemplateServer interface {
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	UpsertMessageTemplate(context.Context, *MessageTemplate) (*MessageTemplate, error)
	DeleteMessageTemplate(context.Context, *common.Id) (*common.Empty, error)
	GetMessageTemplate(context.Context, *common.Id) (*MessageTemplate, error)
	SearchMessageTemplates(context.Context, *SearchMessageTemplate) (*MessageTemplates, error)
}

func RegisterServiceMessageTemplateServer(s *grpc.Server, srv ServiceMessageTemplateServer) {
	s.RegisterService(&_ServiceMessageTemplate_serviceDesc, srv)
}

func _ServiceMessageTemplate_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessageTemplateServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagetemplate.ServiceMessageTemplate/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessageTemplateServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessageTemplate_UpsertMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessageTemplateServer).UpsertMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagetemplate.ServiceMessageTemplate/UpsertMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessageTemplateServer).UpsertMessageTemplate(ctx, req.(*MessageTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessageTemplate_DeleteMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessageTemplateServer).DeleteMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagetemplate.ServiceMessageTemplate/DeleteMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessageTemplateServer).DeleteMessageTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessageTemplate_GetMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessageTemplateServer).GetMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagetemplate.ServiceMessageTemplate/GetMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessageTemplateServer).GetMessageTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessageTemplate_SearchMessageTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessageTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessageTemplateServer).SearchMessageTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagetemplate.ServiceMessageTemplate/SearchMessageTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessageTemplateServer).SearchMessageTemplates(ctx, req.(*SearchMessageTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceMessageTemplate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messagetemplate.ServiceMessageTemplate",
	HandlerType: (*ServiceMessageTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceMessageTemplate_Ping_Handler,
		},
		{
			MethodName: "UpsertMessageTemplate",
			Handler:    _ServiceMessageTemplate_UpsertMessageTemplate_Handler,
		},
		{
			MethodName: "DeleteMessageTemplate",
			Handler:    _ServiceMessageTemplate_DeleteMessageTemplate_Handler,
		},
		{
			MethodName: "GetMessageTemplate",
			Handler:    _ServiceMessageTemplate_GetMessageTemplate_Handler,
		},
		{
			MethodName: "SearchMessageTemplates",
			Handler:    _ServiceMessageTemplate_SearchMessageTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagetemplate/messagetemplate.proto",
}
