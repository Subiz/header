syntax = "proto2";

package widget;

option go_package = "github.com/subiz/header/widget";

import "account.proto";
import "common.proto";
import "user3.proto";

message Theme {
	optional string account_id = 2;
	optional string custom_css = 8; // for setting only
	optional string widget_position = 3;
	enum ButtonPosition {
		left = 0;
		right = 1;
	}
	optional string window_mode = 5;
	enum WindowMode {
		mini = 0;
		full = 1;
	}
}

message Sound {
	optional string account_id = 1;
	optional bool enabled = 2;
	optional string new_conversation = 3;
	optional string file_create = 4;
	optional string new_message = 5;
	optional string message_send_failed = 6;
}

message UserSetting {
	optional common.Context ctx = 1;
	optional account.Account account = 3;
	optional string account_id = 2; // subiz use only
	optional user.User user = 4;
	optional string user_id = 7; // subiz use only
	optional bool sound_enabled = 5;
	optional string language = 6;
	optional bool send_transcript = 8;
	optional Setting account_setting = 9;
	optional bool desktop_notification = 10;
	optional user.Trace trace = 11;
}

// global setting. eg: widget_4/4234098234
message Global { //used only inside subiz
	optional common.Context ctx = 1;
	optional string name = 2;
	optional string data = 3;
	optional string pk = 4;
}

message SocialLink {
	optional string type = 1; // facebook, viber, subiz, email, ...
	optional string url = 2;
}

message WidgetHeader {
	optional string layout = 2;
	enum HeaderLayout {
		team = 0;
		social = 1;
	}

	// for social layout only
	repeated SocialLink links = 3;

	// agents whose avatar will be display in the header
	repeated string agent_ids = 4;
}

message Setting {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string widget_version = 3;
	optional Sound sound = 4;
	optional string language = 5;
	optional string custom_language = 6; // write-only
	repeated account.Agent agents = 7;
	repeated string agent_ids = 8; // subiz only
	optional string css_url = 9; // old version
	optional string custom_css_url = 10; // deprecated
	optional int32 replytime = 11; // deprecated
	optional string css = 12; // communication client to server
	optional string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	optional bool is_online = 14;

	optional string window_mode = 15;
	enum WindowMode {
		mini = 0;
		full = 1;
	}

	optional WidgetHeader header = 16;
	optional int32 height = 17;
	optional int32 width = 18;
	optional string primary_color = 19;
	optional string secondary_color = 20;
	optional string background = 21;
	optional string text_color = 22;
	optional Form offline_form = 23;
	optional Form prechat_form = 24;
	optional ChatButton desktop_button = 25;
	optional ChatButton mobile_button = 26;
	optional Greeting greeting = 27;
	optional string title = 28;
	optional string introduction = 29;
	optional Theme theme = 30; // deprecated
	optional string custom_language_url = 31;
	optional string language_url = 32;
}

message Field {
	optional string key = 1;
	optional string label = 2;
	optional bool is_required = 3;

	// so front end dont have to download attribute definitions
	optional string type = 5;
}

message Group {
	optional string id = 1;
	optional string name = 2;
}

message Form {
	repeated Field fields = 1;
	optional bool group_required = 2;
	repeated Group groups = 3;
	optional string title = 4;
	optional bool enable = 5;
	optional bool end_conversation_after_submit = 6;
}

message ChatButton {
	optional string background_image_url = 1;
	optional int32 width = 2;
	optional int32 height = 3;
	optional string background = 4;
	optional int32 margin_x = 5;
	optional int32 margin_y = 6;
	optional string position = 7;

	enum ButtonPosition {
		left = 0;
		right = 1;
	}
}

message Greeting {
	optional string message = 2;
	optional bool enabled = 4;
	optional string agent_id = 5;
}
