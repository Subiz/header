syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";

import "common.proto";
import "user3.proto";
import "user.proto";
import "conversation.proto";
import "client.proto";
import "content.proto";
import "deal.proto";
import "file.proto";
import "kv.proto";
import "realtime.proto";
import "payment.proto";
import "notibox.proto";
import "noti5.proto";
import "widget.proto";
import "account.proto";
import "api.proto";
import "search.proto";
import "bqreport.proto";
import "bot.proto";

// api service
service ApiServer {
	rpc Call(api.Request) returns (api.Response);
}

service AccountMgr {
	rpc CreateGroup(account.AgentGroup) returns (account.AgentGroup);
	rpc UpdateGroup(account.AgentGroup) returns (account.AgentGroup);
	rpc GetGroup(common.Id) returns (account.AgentGroup);
	rpc RequestResetPassword(account.ResetPasswordRequest) returns (common.Empty);
	rpc UpdatePassword(account.NewPassword) returns (account.Agent);
	rpc UpdateAgent(account.Agent) returns (account.Agent);
	rpc DeleteAgent(common.Id) returns (account.Agent);
	rpc RequestChangeEmail(account.Agent) returns (common.Empty);// require password
	rpc ConfirmChangeEmail(account.Token) returns (account.Agent);
	rpc AcceptInvitation(account.NewPassword) returns (account.Agent);
	rpc GetInvitation(account.Token) returns (account.Agent);
	rpc InviteAgent(account.Agent) returns (account.Agent); // allow to call multiple time
	rpc GetAgent(common.Id) returns (account.Agent);
	rpc ConfirmAccount(account.Token) returns (account.Account);
	rpc GetAccount(common.Id) returns (account.Account);
	rpc UpdateAccount(account.Account) returns (account.Account);
	rpc CreateAccount(account.CreateAccountRequest) returns (account.Account);
	rpc ListAgents(common.Id) returns (account.Agents);
	rpc CountAccount(account.CountRequest) returns (account.Count);

	rpc DeleteGroup(common.Id) returns (common.Empty);
	rpc ListGroups(common.Id) returns (account.AgentGroups);
	rpc AddAgentToGroup(account.GroupMember) returns (common.Empty);
	rpc RemoveAgentFromGroup(account.GroupMember) returns (common.Empty);
	rpc ChangeEmail(account.Agent) returns (account.Agent);
	rpc IntegrateBot(account.Agent) returns (account.Agent);
	rpc SyncPublicHolidays(account.SyncPublicHolidaysRequest) returns (account.BusinessHours);
	rpc TransferOwner(common.Id) returns (account.Agent);
}

service CurrencyMgr {
	rpc ListCurrencies(common.Empty) returns (account.Currencies);
	rpc GetCurrency(common.Id) returns (account.Currency);
	rpc CreateCurrency(account.Currency) returns (account.Currency);
	rpc UpdateCurrency(account.Currency) returns (account.Currency);
	rpc DeleteCurrency(common.Id) returns (common.Empty);
	rpc ListExchangeRates(account.ExchangeRateRequest) returns (account.ExchangeRates);
	rpc GetExchangeRate(account.ExchangeRateRequest) returns (account.ExchangeRate);
	rpc CreateExchangeRate(account.ExchangeRate) returns (account.ExchangeRate);
	rpc DeleteExchangeRate(account.ExchangeRateRequest) returns (common.Empty);
}

// user services
service UserMgr {
	rpc SearchUsers (user.UserSearchRequest) returns (user.UserSearchResult); // deprecated
	rpc SearchLeads (user.LeadSearchRequest) returns (user.LeadSearchResult);
	rpc ListLeads (user.LeadSearchRequest) returns (user.LeadSearchResult);

	rpc CreateUser (user.User) returns (common.Id);
	rpc UpdateUser (user.User) returns (common.Id);
	rpc ReadUser (common.Id) returns (user.User);

	rpc ReportUsers (user.UserReportRequest) returns (user.UserReportResult);
	rpc CountTotal(user.CountTotalRequest) returns (user.CountTotalResponse);
	rpc Ping(common.PingRequest) returns (common.Pong);

	rpc ExportUsers (user.UserExportRequest) returns (common.Empty); // deprecated

	rpc SearchNote (user.SearchNoteRequest) returns (user.SearchNoteResponse); // deprecated

	rpc MatchUsers(common.Ids) returns (user.Users);
}

service LiveMgr {
	rpc SearchLocations(user.LocationParams) returns (user.Locations);
	rpc FilterActiveUsers(user.UserInfoParams) returns (user.Users);

	rpc TopEvents(user.EventParams) returns (user.Events);
	rpc TopLocations(common.Id) returns (user.LocationMetrics);
	rpc TopPages(common.Id) returns (user.PageMetrics);
	rpc TopSources(common.Id) returns (user.SourceMetrics);
	rpc CountActiveUsers(common.Id) returns (user.UserMetric);
	rpc Presences(user.PresencesRequest) returns (user.PresencesResponse);
}

service UserSyncMgr {
	// sync user
	rpc CreateEvent(user.UserEvent) returns (common.Empty);

	// sync automation
	rpc FireBlockUser(user.AutomationEvent) returns (common.Empty);
	rpc FireUpdateUserAttribute(user.AutomationEvent) returns (common.Empty);
	rpc FireAddUserNote(user.AutomationEvent) returns (common.Empty);

	// sync user job
	rpc CallbackAutomation(user.AutomationCalledback) returns (common.Empty);
	rpc ExportUsers(user.UserExportRequest) returns (common.Empty);
}

service AutomationCreditMgr {
	rpc GetAutomationCredit(common.Id) returns (user.AutomationCredit);
	rpc AddAutomationCredit(user.AutomationCredit) returns (common.Empty);
}

service NoteMgr {
	rpc ListNotes(user.ListNotesRequest) returns (user.Notes);
	rpc AddNote(user.Note) returns (user.Note);
	rpc UpdateNote(user.Note) returns (user.Note);
	rpc DeleteNote(user.DeleteNoteRequest) returns (common.Empty);
	rpc GetNote(user.GetNoteRequest) returns (user.Note);
	rpc SearchNote(user.SearchNoteRequest) returns (user.SearchNoteResponse); // deprecated
}

service AutomationMgr {
	rpc ListAutomations(common.Id) returns (user.Automations);
	rpc UpdateAutomation(user.Automation) returns (user.Automation);
	rpc DeleteAutomation(common.Id) returns (common.Empty);
	rpc ReadAutomation(common.Id) returns (user.Automation);
	rpc CreateAutomation(user.Automation) returns (user.Automation);
}

service AttributeMgr {
	rpc ListAttributeDefinitions(common.Empty) returns (user.AttributeDefinitions);
	rpc CreateAttributeDefinition(user.AttributeDefinition) returns (user.AttributeDefinition);
	rpc UpdateAttributeDefinition(user.AttributeDefinition) returns (user.AttributeDefinition);
	rpc DeleteAttributeDefinition(user.DeleteAttrRequest) returns (common.Empty);
}

// auth services
service Perm {
	rpc Update(common.UpdatePermRequest) returns (common.Empty);
	rpc UpdateState(common.UpdateStateRequest) returns (common.Empty);
	rpc ReadPerm(common.ReadPermRequest) returns (common.Permission);
}

// conversation services
service ConversationReporter {
	rpc CountConversationsByTags(conversation.CountByTagsRequest) returns (conversation.CountByTagsResponse);
	rpc GetAvgResponseTimes(conversation.AvgResponseTimeRequest) returns (conversation.AvgResponseTimeResponse);
	rpc GetTotalConversation(conversation.AvgResponseTimeRequest) returns (conversation.TotalConversationResponse);
	rpc ReportConversations(conversation.CountReportRequest) returns (conversation.ReportResponse);
	rpc ReportConversations2(conversation.ReportConversationsRequest) returns (conversation.ReportResponse);
	rpc ReportAvailibilities(conversation.AvailibilityReportRequest) returns (conversation.ReportResponse);
}

service AgentPresenceMgr {
	rpc ReadPresence (common.Id) returns (account.Presence);
	rpc UpdatePresence (common.Id) returns (account.Presence);
}

service RuleMgr {
	rpc UpdateRule(conversation.Rule) returns (conversation.Rule);
	rpc CreateRule(conversation.Rule) returns (conversation.Rule);
	rpc DeleteRule(common.Id) returns (common.Empty);
	rpc ReadRule(common.Id) returns (conversation.Rule);
	rpc ListRules(common.Id) returns (conversation.Route);
}

service ConversationMgr {
	rpc AssignRule(conversation.AssignRequest) returns (conversation.RouteResult);
	rpc PongMessage(user.Event) returns (user.Event);
	// rpc UpdateConversationState(Conversation) returns (Conversation);
	rpc StartConversation(user.StartRequest) returns (conversation.Conversation);
	rpc EndConversation(common.Id) returns (conversation.Conversation);
	rpc GetConversation(common.Id) returns (conversation.Conversation);
	rpc ListConversations(conversation.ListConversationsRequest) returns (conversation.Conversations);
	rpc MatchConversations(common.Ids) returns (conversation.Conversations);
	rpc TagConversation(conversation.TagRequest) returns (common.Empty);
	rpc UntagConversation(conversation.TagRequest) returns (common.Empty);

	rpc JoinConversation(conversation.Member) returns (common.Empty);
	rpc LeftConversation(conversation.Member) returns (common.Empty);
	rpc Typing(common.Id) returns (common.Empty);
	rpc Ping(common.PingRequest) returns (common.Pong);
	rpc UpdateConversationInfo(conversation.Conversation) returns (conversation.Conversation);

	rpc FilterUser(conversation.FilterUserRequest) returns (conversation.FilterUserResponse);
	rpc SearchConversation(conversation.SearchConversationRequest) returns (conversation.SearchConversationResponse);
	rpc ListConversations2(conversation.ConversationListRequest) returns (conversation.ConversationListResponse);
	rpc ExportUsers(conversation.UserExportRequest) returns (common.Empty);

	rpc UpdateMuteConversation(conversation.Conversation) returns (common.Empty);
	rpc UnwatchConversation(conversation.Conversation) returns (common.Empty);
	rpc MarkReadConversation (conversation.Conversation) returns (common.Empty);

	rpc UpdateEndchatSetting(conversation.EndchatSetting) returns (conversation.EndchatSetting);
	rpc GetEndchatSetting(common.Id) returns (conversation.EndchatSetting);
}

service ConversationSyncMgr {
	// sync automation
	rpc FireConvertTicket(user.AutomationEvent) returns (common.Empty);
	rpc FireSendChatTranscriptEmail(user.AutomationEvent) returns (common.Empty);
	rpc FireUpdateConversationState(user.AutomationEvent) returns (common.Empty);
}

service TemplateMgr {
	rpc CreateTemplate(conversation.Template) returns (conversation.Template);
	rpc UpdateTemplate(conversation.Template) returns (conversation.Template);
	rpc DeleteTemplate(common.Id) returns (common.Empty);
	rpc GetTemplate(common.Id) returns (conversation.Template);
	rpc ListTemplates(conversation.SearchTemplate) returns (conversation.Templates);
	rpc PickTemplate(common.Id) returns (common.Empty);
}

service TagMgr {
	rpc CreateTag(conversation.Tag) returns (conversation.Tag);
	rpc UpdateTag(conversation.Tag) returns (conversation.Tag);
	rpc DeleteTag(common.Id) returns (common.Empty);
	rpc ListTags(common.Id) returns (conversation.Tags);
	rpc GetTag(common.Id) returns (conversation.Tag);
}

service IntegrationMgr {
	rpc Deintegrate(common.Id) returns (common.Empty);
	rpc ListIntegrations(common.Id) returns (conversation.Integrations);
	rpc Integrate(conversation.Integration) returns (conversation.Integration);
	rpc CheckAvailability(user.AvailabilityCheckRequest) returns (user.AvailabilityCheckResult);
}

service TicketMgr {
	rpc CreateTicket(conversation.Ticket) returns (conversation.Ticket);
	rpc UpdateTicket(conversation.Ticket) returns (conversation.Ticket);
	rpc DeleteTicket(conversation.DeleteTicketRequest) returns (common.Empty);
	rpc GetTicket(conversation.GetTicketRequest) returns (conversation.Ticket);
	rpc SearchTicket(conversation.TicketListRequest) returns (conversation.ESTickets); // deprecated
	rpc ListSLAs(common.Empty) returns (conversation.ServiceLevelAgreements);
	rpc GetSLA(common.Id) returns (conversation.ServiceLevelAgreement);
	rpc CreateSLA(conversation.ServiceLevelAgreement) returns (conversation.ServiceLevelAgreement);
	rpc UpdateSLA(conversation.ServiceLevelAgreement) returns (conversation.ServiceLevelAgreement);
	rpc DeleteSLA(common.Id) returns (common.Empty);
	rpc CountTicket(conversation.CountTicketRequest) returns (conversation.CountTicketResponse);
	rpc GetAvgResolveTimes(conversation.AvgResolveTimeRequest) returns (conversation.AvgResolveTimeResponse);
}

// client services
service ClientMgr {
	rpc Create(client.Client) returns (client.Client);
	rpc Update(client.Client) returns (client.Client);
	rpc Read(client.Client) returns (client.Client);
	rpc ListIntegratedClients(common.Id) returns (client.AuthorizedClient); // account id
	rpc ListAuthorizedClients(common.Id) returns (client.AuthorizedClient); // agent id
}

// content services
service ServiceContentManager {
	rpc UpsertContent(content.Content) returns (content.Content);
	rpc DeleteContent(common.Id) returns (common.Empty);
	rpc GetContent(common.Id) returns (content.Content);
	rpc SearchContents(content.SearchContentRequest) returns (content.Contents);
	rpc LookupContentsByUrl(content.LookupRequest) returns (content.Contents);
	rpc LinkContentsToUrl(content.LinkRequest) returns (common.Empty);
}

// deal services
service DealService {
  rpc ListPipelines(common.Empty) returns (deal.Pipelines);
  rpc GetPipeline(common.Id) returns (deal.Pipeline);
  rpc CreatePipeline(deal.Pipeline) returns (deal.Pipeline);
  rpc UpdatePipeline(deal.Pipeline) returns (deal.Pipeline);
  rpc DeletePipeline(common.Id) returns (common.Empty);
}

service EventMgr {
	rpc SearchEvents (user.ListEventsRequest) returns (user.Events);
	rpc CreateEvent (user.UserEvent) returns (user.Event);
}

service ConversationEventReader {
	rpc SendMessage(user.Event) returns (user.Event);
	rpc UpdateMessage(user.Event) returns (user.Event);
	rpc ListEvents(conversation.ListEventsRequest) returns (user.Events);
	rpc SearchEvents(conversation.SearchMessageRequest) returns (user.Events);
}

// file services
service FileMgr {
	rpc Presign(file.FileHeader) returns (file.PresignResult);
	rpc Read(file.FileRequest) returns (file.File);
	rpc Uploaded(file.FileRequest) returns (file.File);
}

// kv services
service KV {
	rpc Set(kv.Value) returns (kv.Value);
	rpc Get(kv.Key) returns (kv.Value);
	rpc Has(kv.Key) returns (kv.Bool);
}

// noti5 services
service Noti5Service {
	rpc ReadNotificationSetting(common.Id) returns (noti5.Setting);
	rpc UpdateNotificationSetting(noti5.Setting) returns (noti5.Setting);

	rpc Noti(noti5.PushNoti) returns (common.Empty);

	rpc AddToken(noti5.Token) returns (common.Empty);
	rpc RemoveToken(noti5.Token) returns (common.Empty);
	rpc CheckTokenExists(noti5.Token) returns (common.Empty);
}

// notibox services
service NotiboxService {
	rpc ReadAllNotis(common.Id) returns (common.Empty);
	rpc ListNotis(notibox.ListRequest) returns (notibox.Notifications);
	rpc GetNotibox(common.Id) returns (notibox.Notibox);
}

// payment services
service SubizInternalPaymentMgr {
	rpc CreateBill(payment.Bill) returns (payment.Bill);
	rpc UpdateExchangeRate(payment.ExchangeRate) returns (payment.ExchangeRate);
}

service PaymentMgr {
	rpc SearchSub(account.SearchSubRequest) returns (account.AccSubs);
	rpc Purchase(payment.Subscription) returns (payment.Invoice);
	rpc UpdateSubscription(payment.Subscription) returns (payment.Subscription);
	rpc GetSubscription(common.Id) returns (payment.Subscription);
	rpc AddPaymentMethod(payment.PaymentMethod) returns (payment.PaymentMethod);
	rpc UpdatePaymentMethod(payment.PaymentMethod) returns (payment.PaymentMethod);
	rpc DeletePaymentMethod(common.Id) returns (common.Empty);
	rpc ListPaymentMethods(common.Id) returns (payment.PaymentMethods);
	rpc Pay(payment.PayRequest) returns (payment.Bill);
	rpc ListInvoices(common.Id) returns (payment.Invoices);
	rpc CreateInvoice(payment.Invoice) returns (payment.Invoice);
	rpc UpdateInvoice(payment.Invoice) returns (payment.Invoice);
	rpc FilterInvoices(payment.ListInvoiceRequest) returns (payment.Invoices);
	rpc DraftInvoice(payment.Subscription) returns (payment.Invoice);
	rpc DiffSubscriptions(payment.DiffSubRequest) returns (payment.Invoice);
	rpc ListComments(payment.ListCommentsRequest) returns (payment.Comments);
	rpc AddComment(payment.Comment) returns (payment.Comment);
	rpc ListPlans(common.Empty) returns (payment.Plans);
	rpc ExportInvoice(common.Id) returns (payment.String);
	rpc ConvertInvoiceToHtml(payment.Invoice) returns (payment.String);
	rpc GetExchangeRate(payment.ExchangeRate) returns (payment.ExchangeRate);
	rpc TransferMoney(payment.PayRequest) returns (payment.Bill);
	rpc ListLogs(payment.ListLogsRequest) returns (payment.Logs);

	rpc CreatePromotionCode(payment.PromotionCode) returns (payment.PromotionCode);
	rpc GetPromotionCode(payment.String) returns (payment.PromotionCode);
	rpc UsePromotionCode(payment.PromotionCodeRequest) returns (common.Empty);
	rpc ValidatePromotionCode(payment.PromotionCodeRequest) returns (payment.PromotionCode);
	rpc ListPromotionCode(payment.ListPromotionCodeRequest) returns (payment.PromotionCodes);
	rpc DeletePromotionCode(common.Id) returns (common.Empty);

	rpc SearchReferral(payment.SearchReferredRequest) returns (payment.Referral);
	rpc GetReferral(common.Id) returns (payment.Referral);
	rpc ListTopReferral(common.Empty) returns (payment.ReferralResponse);
	rpc UpdateReferral(payment.Referral) returns (payment.Referral);
	rpc ListAccountReferred(common.Id) returns (payment.LogAccountReferreds);
	rpc ListBillByAccountReferred(common.Id) returns (payment.LogBillByAccountReferreds);
	rpc ListPaidForAgentReferrer(common.Id) returns (payment.LogPaidForAgentReferrers);
	rpc PaidForAgentReferrer(payment.LogPaidForAgentReferrer) returns (common.Empty);
}

// pubsub services
service Pubsub {
	rpc Publish(realtime.PublishMessage) returns (common.Empty);
}

// widget services
service WidgetService {
	rpc Read(common.Id) returns (widget.Setting);
	rpc Update(widget.Setting) returns (widget.Setting);
	rpc ReadUserSetting(common.Id) returns (widget.UserSetting);

	rpc ReadCampaign(common.Id) returns (widget.Campaign);
	rpc ListCampaigns(common.Id) returns (widget.Campaigns);
	rpc CreateCampaign(widget.Campaign) returns (widget.Campaign);
	rpc UpdateCampaign(widget.Campaign) returns (widget.Campaign);
	rpc DeleteCampaign(widget.Campaign) returns (common.Empty);

	rpc SubmitImpression(widget.Impression) returns (widget.Impression);
	rpc SubmitConversion(widget.Conversion) returns (widget.Conversion);
	rpc SubmitUserCampaignStatus(widget.UserCampaignStatus) returns (widget.UserCampaignStatus);

	rpc ReportCampaign(widget.ReportCampaignRequest) returns (widget.ReportCampaignResponse);
	rpc ListConversions(widget.ConversionRequest) returns (widget.Conversions);
	rpc ExportConversions(widget.ConversionRequest) returns (widget.ConversionsExported);
	rpc UploadImage(widget.UploadedImage) returns (widget.UploadedImage);
	rpc ListUploadedImage(common.Id) returns (widget.UploadedImages);
	rpc DeleteUploadedImage(widget.UploadedImage) returns (common.Empty);
}

// webhook services
service WebhookService {
	rpc Read(common.Id) returns (client.Webhook);
	rpc Delete(common.Id) returns (common.Empty);
	rpc List(common.Id) returns (client.Webhooks);
	rpc Update(client.Webhook) returns (client.Webhook);
	rpc Create(client.Webhook) returns (client.Webhook);
	rpc Test(common.Id) returns (client.WebhookTestResult);
}

// search services
service Search {
	rpc SearchUsers(search.SearchUsersRequest) returns (search.SearchUsersResponse);
	rpc ExportUsers(search.ExportUsersRequest) returns (common.Empty);
	rpc SearchNotes(search.SearchNotesRequest) returns (search.SearchNotesResponse);
	rpc SearchConversations(search.SearchConversationsRequest) returns (search.SearchConversationsResponse);
	rpc SearchTickets(search.SearchTicketsRequest) returns (search.SearchTicketsResponse);
}

// bqreport services
service Bqreport {
	rpc AggregateConversations(bqreport.ConversationFilter) returns (bqreport.ConversationReport);
	rpc AggregateConversationRates(bqreport.DimensionFilter) returns (bqreport.ConversationRateReport);
	rpc AggregateConversationTags(bqreport.DimensionFilter) returns (bqreport.ConversationTagReport);
	rpc AggregateConversationAgents(bqreport.ConversationAgentFilter) returns (bqreport.ConversationAgentReport);
	rpc AggregateMessageOfAgents(bqreport.DimensionFilter) returns (bqreport.MessageOfAgentReport);
	rpc AggregateAgentAvailabilities(bqreport.DimensionFilter) returns (bqreport.AgentAvailabilityReport);
}

// bizbot services
service Bizbot {
	rpc ListBots(common.Id) returns (bot.Bots);
	rpc GetBot(common.Id) returns (bot.Bot);
	rpc UpdateBotRunState(bot.Bot) returns (bot.Bot);
	rpc CreateBot(bot.Bot) returns (bot.Bot);
	rpc UpdateBot(bot.Bot) returns (bot.Bot);
	rpc DeleteBot(common.Id) returns (common.Empty);
	rpc OnEvent(user.RunRequest) returns (common.Empty);
	rpc StartBot(user.RunRequest) returns (common.Empty);
	rpc StopBot(user.RunRequest) returns (common.Empty);
	rpc TryAction(user.RunRequest) returns (common.Empty);
	rpc DoAction(user.RunRequest) returns (bot.Actions);
	rpc ReportBot(bot.ReportBotRequest) returns (bot.ReportBotResponse);
	rpc ListObjects(bot.ListObjectsRequest) returns (bot.ListObjectsResponse);
	rpc CreateBotRevision(bot.Bot) returns (bot.Bot);
	rpc ListBotRevisions(common.Id) returns (bot.Bots);
}
