// Code generated by protoc-gen-go. DO NOT EDIT.
// source: time/time.proto

package time

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Weekday int32

const (
	Weekday_Monday    Weekday = 0
	Weekday_Tuesday   Weekday = 1
	Weekday_Wednesday Weekday = 2
	Weekday_Thursday  Weekday = 3
	Weekday_Friday    Weekday = 4
	Weekday_Saturday  Weekday = 5
	Weekday_Sunday    Weekday = 6
)

var Weekday_name = map[int32]string{
	0: "Monday",
	1: "Tuesday",
	2: "Wednesday",
	3: "Thursday",
	4: "Friday",
	5: "Saturday",
	6: "Sunday",
}

var Weekday_value = map[string]int32{
	"Monday":    0,
	"Tuesday":   1,
	"Wednesday": 2,
	"Thursday":  3,
	"Friday":    4,
	"Saturday":  5,
	"Sunday":    6,
}

func (x Weekday) Enum() *Weekday {
	p := new(Weekday)
	*p = x
	return p
}

func (x Weekday) String() string {
	return proto.EnumName(Weekday_name, int32(x))
}

func (x *Weekday) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Weekday_value, data, "Weekday")
	if err != nil {
		return err
	}
	*x = Weekday(value)
	return nil
}

func (Weekday) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7ed1ef5b20ef4ce, []int{0}
}

type Month int32

const (
	Month_January   Month = 0
	Month_February  Month = 1
	Month_March     Month = 2
	Month_April     Month = 3
	Month_May       Month = 4
	Month_June      Month = 5
	Month_July      Month = 6
	Month_August    Month = 7
	Month_September Month = 8
	Month_October   Month = 9
	Month_November  Month = 10
	Month_December  Month = 11
)

var Month_name = map[int32]string{
	0:  "January",
	1:  "February",
	2:  "March",
	3:  "April",
	4:  "May",
	5:  "June",
	6:  "July",
	7:  "August",
	8:  "September",
	9:  "October",
	10: "November",
	11: "December",
}

var Month_value = map[string]int32{
	"January":   0,
	"February":  1,
	"March":     2,
	"April":     3,
	"May":       4,
	"June":      5,
	"July":      6,
	"August":    7,
	"September": 8,
	"October":   9,
	"November":  10,
	"December":  11,
}

func (x Month) Enum() *Month {
	p := new(Month)
	*p = x
	return p
}

func (x Month) String() string {
	return proto.EnumName(Month_name, int32(x))
}

func (x *Month) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Month_value, data, "Month")
	if err != nil {
		return err
	}
	*x = Month(value)
	return nil
}

func (Month) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7ed1ef5b20ef4ce, []int{1}
}

func init() {
	proto.RegisterEnum("time.Weekday", Weekday_name, Weekday_value)
	proto.RegisterEnum("time.Month", Month_name, Month_value)
}

func init() { proto.RegisterFile("time/time.proto", fileDescriptor_e7ed1ef5b20ef4ce) }

var fileDescriptor_e7ed1ef5b20ef4ce = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x24, 0x8e, 0x4d, 0x6a, 0xc3, 0x30,
	0x10, 0x85, 0xeb, 0xf8, 0x7f, 0x92, 0x52, 0xa1, 0x63, 0x64, 0xd1, 0x9e, 0x21, 0x50, 0xb2, 0x08,
	0xb8, 0x5d, 0x38, 0x90, 0xb5, 0x62, 0x0f, 0xb5, 0x69, 0x22, 0x99, 0x89, 0xa6, 0xe0, 0xa3, 0xf4,
	0xb6, 0xe1, 0xd9, 0x1b, 0xf1, 0x3e, 0x1e, 0x7a, 0xdf, 0xd0, 0x5b, 0x1c, 0xef, 0xfc, 0x81, 0xe7,
	0x7d, 0x92, 0x10, 0x83, 0xcd, 0x90, 0xf7, 0x4c, 0xe5, 0x85, 0xf9, 0xb7, 0x77, 0xb3, 0x25, 0x2a,
	0x9a, 0xe0, 0x7b, 0x37, 0x9b, 0x17, 0xbb, 0xa5, 0xf2, 0xac, 0xfc, 0x00, 0x24, 0xf6, 0x95, 0xea,
	0x0b, 0xf7, 0x7e, 0xc5, 0x8d, 0xdd, 0x51, 0x75, 0x1e, 0x54, 0x16, 0x4a, 0xf1, 0xeb, 0x28, 0x23,
	0x72, 0x86, 0xa6, 0x75, 0x51, 0x05, 0x94, 0xa3, 0x69, 0x75, 0xd9, 0x2b, 0xf6, 0xff, 0x09, 0xe5,
	0x4d, 0xf0, 0x71, 0xc0, 0xf2, 0xc9, 0x79, 0x75, 0x02, 0xcd, 0x8e, 0xaa, 0x23, 0x5f, 0x65, 0xa1,
	0xc4, 0xd6, 0x94, 0x37, 0x4e, 0xba, 0xc1, 0x6c, 0x10, 0x0f, 0x93, 0x8c, 0x37, 0x93, 0xda, 0x92,
	0xd2, 0x66, 0x59, 0xaf, 0x28, 0x3b, 0xa9, 0x67, 0x93, 0xaf, 0xe9, 0x36, 0x9b, 0x02, 0x8e, 0x83,
	0xfe, 0xe8, 0x23, 0x9a, 0x12, 0x67, 0xb6, 0x3c, 0x45, 0xbe, 0x5f, 0x59, 0x4c, 0x05, 0xd1, 0x77,
	0x17, 0x03, 0xa0, 0x86, 0xe8, 0x2b, 0xfc, 0xad, 0x15, 0x81, 0x3e, 0xb9, 0x5b, 0x69, 0xfb, 0x0c,
	0x00, 0x00, 0xff, 0xff, 0xde, 0xb8, 0xb2, 0x23, 0x1a, 0x01, 0x00, 0x00,
}
