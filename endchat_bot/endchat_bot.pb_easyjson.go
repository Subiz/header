// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package endchat_bot

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot(in *jlexer.Lexer, out *Setting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "connector_settings":
			if in.IsNull() {
				in.Skip()
				out.ConnectorSettings = nil
			} else {
				in.Delim('[')
				if out.ConnectorSettings == nil {
					if !in.IsDelim(']') {
						out.ConnectorSettings = make([]*ConnectorSetting, 0, 8)
					} else {
						out.ConnectorSettings = []*ConnectorSetting{}
					}
				} else {
					out.ConnectorSettings = (out.ConnectorSettings)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ConnectorSetting
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ConnectorSetting)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.ConnectorSettings = append(out.ConnectorSettings, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "global_setting":
			if in.IsNull() {
				in.Skip()
				out.GlobalSetting = nil
			} else {
				if out.GlobalSetting == nil {
					out.GlobalSetting = new(ConnectorSetting)
				}
				(*out.GlobalSetting).UnmarshalEasyJSON(in)
			}
		case "updated":
			out.Updated = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot(out *jwriter.Writer, in Setting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.ConnectorSettings) != 0 {
		const prefix string = ",\"connector_settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.ConnectorSettings {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.GlobalSetting != nil {
		const prefix string = ",\"global_setting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GlobalSetting).MarshalEasyJSON(out)
	}
	if in.Updated != 0 {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Setting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Setting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Setting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Setting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot(l, v)
}
func easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot1(in *jlexer.Lexer, out *MidnightCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "midnight_sec":
			out.MidnightSec = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot1(out *jwriter.Writer, in MidnightCallback) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.MidnightSec != 0 {
		const prefix string = ",\"midnight_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MidnightSec))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MidnightCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MidnightCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MidnightCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MidnightCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot1(l, v)
}
func easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot2(in *jlexer.Lexer, out *EndCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "conversation_id":
			out.ConversationId = string(in.String())
		case "connector_id":
			out.ConnectorId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot2(out *jwriter.Writer, in EndCallback) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.ConversationId != "" {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationId))
	}
	if in.ConnectorId != "" {
		const prefix string = ",\"connector_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectorId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EndCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EndCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EndCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EndCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot2(l, v)
}
func easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot3(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "last_message_sent":
			out.LastMessageSent = int64(in.Int64())
		case "last_user_message_sent":
			out.LastUserMessageSent = int64(in.Int64())
		case "last_agent_message_sent":
			out.LastAgentMessageSent = int64(in.Int64())
		case "ended":
			out.Ended = int64(in.Int64())
		case "end_requested":
			out.EndRequested = int64(in.Int64())
		case "state":
			out.State = string(in.String())
		case "integration_id":
			out.IntegrationId = string(in.String())
		case "connector_id":
			out.ConnectorId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot3(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.LastMessageSent != 0 {
		const prefix string = ",\"last_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastMessageSent))
	}
	if in.LastUserMessageSent != 0 {
		const prefix string = ",\"last_user_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastUserMessageSent))
	}
	if in.LastAgentMessageSent != 0 {
		const prefix string = ",\"last_agent_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastAgentMessageSent))
	}
	if in.Ended != 0 {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ended))
	}
	if in.EndRequested != 0 {
		const prefix string = ",\"end_requested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EndRequested))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.IntegrationId != "" {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IntegrationId))
	}
	if in.ConnectorId != "" {
		const prefix string = ",\"connector_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectorId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot3(l, v)
}
func easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot4(in *jlexer.Lexer, out *ConnectorSetting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connector_id":
			out.ConnectorId = string(in.String())
		case "at_midnight":
			out.AtMidnight = bool(in.Bool())
		case "after_agent_message":
			out.AfterAgentMessage = int64(in.Int64())
		case "after_any_message":
			out.AfterAnyMessage = int64(in.Int64())
		case "after_user_message":
			out.AfterUserMessage = int64(in.Int64())
		case "age":
			out.Age = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot4(out *jwriter.Writer, in ConnectorSetting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConnectorId != "" {
		const prefix string = ",\"connector_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectorId))
	}
	if in.AtMidnight {
		const prefix string = ",\"at_midnight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AtMidnight))
	}
	if in.AfterAgentMessage != 0 {
		const prefix string = ",\"after_agent_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterAgentMessage))
	}
	if in.AfterAnyMessage != 0 {
		const prefix string = ",\"after_any_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterAnyMessage))
	}
	if in.AfterUserMessage != 0 {
		const prefix string = ",\"after_user_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterUserMessage))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Age))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConnectorSetting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectorSetting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f72fa59EncodeGithubComSubizHeaderEndchatBot4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConnectorSetting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectorSetting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f72fa59DecodeGithubComSubizHeaderEndchatBot4(l, v)
}
