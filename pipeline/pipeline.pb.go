// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline/pipeline.proto

package pipeline

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StageTypes int32

const (
	StageTypes_won    StageTypes = 0
	StageTypes_lost   StageTypes = 1
	StageTypes_custom StageTypes = 2
)

var StageTypes_name = map[int32]string{
	0: "won",
	1: "lost",
	2: "custom",
}

var StageTypes_value = map[string]int32{
	"won":    0,
	"lost":   1,
	"custom": 2,
}

func (x StageTypes) Enum() *StageTypes {
	p := new(StageTypes)
	*p = x
	return p
}

func (x StageTypes) String() string {
	return proto.EnumName(StageTypes_name, int32(x))
}

func (x *StageTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StageTypes_value, data, "StageTypes")
	if err != nil {
		return err
	}
	*x = StageTypes(value)
	return nil
}

func (StageTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26c1246e548f11df, []int{0}
}

type Stage struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                   *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	PipelineId           *string         `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	Type                 *string         `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Name                 *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Probability          *float32        `protobuf:"fixed32,6,opt,name=probability" json:"probability,omitempty"`
	DisplayOrder         *int32          `protobuf:"varint,7,opt,name=display_order,json=displayOrder" json:"display_order,omitempty"`
	CloseWon             *bool           `protobuf:"varint,8,opt,name=close_won,json=closeWon" json:"close_won,omitempty"`
	CloseLost            *bool           `protobuf:"varint,9,opt,name=close_lost,json=closeLost" json:"close_lost,omitempty"`
	Created              *int64          `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated              *int64          `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Stage) Reset()         { *m = Stage{} }
func (m *Stage) String() string { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()    {}
func (*Stage) Descriptor() ([]byte, []int) {
	return fileDescriptor_26c1246e548f11df, []int{0}
}

func (m *Stage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stage.Unmarshal(m, b)
}
func (m *Stage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stage.Marshal(b, m, deterministic)
}
func (m *Stage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stage.Merge(m, src)
}
func (m *Stage) XXX_Size() int {
	return xxx_messageInfo_Stage.Size(m)
}
func (m *Stage) XXX_DiscardUnknown() {
	xxx_messageInfo_Stage.DiscardUnknown(m)
}

var xxx_messageInfo_Stage proto.InternalMessageInfo

func (m *Stage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Stage) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Stage) GetPipelineId() string {
	if m != nil && m.PipelineId != nil {
		return *m.PipelineId
	}
	return ""
}

func (m *Stage) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Stage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Stage) GetProbability() float32 {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return 0
}

func (m *Stage) GetDisplayOrder() int32 {
	if m != nil && m.DisplayOrder != nil {
		return *m.DisplayOrder
	}
	return 0
}

func (m *Stage) GetCloseWon() bool {
	if m != nil && m.CloseWon != nil {
		return *m.CloseWon
	}
	return false
}

func (m *Stage) GetCloseLost() bool {
	if m != nil && m.CloseLost != nil {
		return *m.CloseLost
	}
	return false
}

func (m *Stage) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Stage) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Pipeline struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                   *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	IsDefault            *bool           `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Stages               []*Stage        `protobuf:"bytes,5,rep,name=stages" json:"stages,omitempty"`
	Created              *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Updated              *int64          `protobuf:"varint,10,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_26c1246e548f11df, []int{1}
}

func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pipeline.Unmarshal(m, b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return xxx_messageInfo_Pipeline.Size(m)
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Pipeline) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Pipeline) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Pipeline) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *Pipeline) GetStages() []*Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Pipeline) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Pipeline) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Pipelines struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Pipelines            []*Pipeline     `protobuf:"bytes,2,rep,name=pipelines" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Pipelines) Reset()         { *m = Pipelines{} }
func (m *Pipelines) String() string { return proto.CompactTextString(m) }
func (*Pipelines) ProtoMessage()    {}
func (*Pipelines) Descriptor() ([]byte, []int) {
	return fileDescriptor_26c1246e548f11df, []int{2}
}

func (m *Pipelines) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pipelines.Unmarshal(m, b)
}
func (m *Pipelines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pipelines.Marshal(b, m, deterministic)
}
func (m *Pipelines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipelines.Merge(m, src)
}
func (m *Pipelines) XXX_Size() int {
	return xxx_messageInfo_Pipelines.Size(m)
}
func (m *Pipelines) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipelines.DiscardUnknown(m)
}

var xxx_messageInfo_Pipelines proto.InternalMessageInfo

func (m *Pipelines) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Pipelines) GetPipelines() []*Pipeline {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

func init() {
	proto.RegisterEnum("pipeline.StageTypes", StageTypes_name, StageTypes_value)
	proto.RegisterType((*Stage)(nil), "pipeline.Stage")
	proto.RegisterType((*Pipeline)(nil), "pipeline.Pipeline")
	proto.RegisterType((*Pipelines)(nil), "pipeline.Pipelines")
}

func init() { proto.RegisterFile("pipeline/pipeline.proto", fileDescriptor_26c1246e548f11df) }

var fileDescriptor_26c1246e548f11df = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xc5, 0x76, 0x1e, 0xf6, 0x35, 0x49, 0xa3, 0x61, 0xc1, 0x28, 0x28, 0xc2, 0x94, 0x05, 0x16,
	0x15, 0x09, 0x2a, 0x1b, 0xf6, 0x2d, 0x42, 0x91, 0x2a, 0x81, 0x5c, 0x10, 0x4b, 0xe3, 0x78, 0x2e,
	0x65, 0x24, 0xdb, 0x63, 0x79, 0xc6, 0xb4, 0xe6, 0x43, 0xf8, 0x18, 0xbe, 0x84, 0xcf, 0x41, 0x1e,
	0x7b, 0x92, 0x54, 0x04, 0xa9, 0x5d, 0xf9, 0xce, 0x39, 0xf7, 0x75, 0xce, 0x35, 0x3c, 0x2e, 0x79,
	0x89, 0x19, 0x2f, 0x70, 0x65, 0x82, 0x65, 0x59, 0x09, 0x25, 0x88, 0x6b, 0xde, 0xf3, 0xf0, 0x8a,
	0xab, 0xa5, 0xac, 0x37, 0xfc, 0xe7, 0xb2, 0x40, 0xb5, 0xfa, 0x8e, 0x09, 0xc3, 0x6a, 0x95, 0x8a,
	0x3c, 0x17, 0x45, 0xff, 0xe9, 0x6a, 0x8e, 0x7f, 0xdb, 0x30, 0xbc, 0x54, 0xc9, 0x15, 0x92, 0x67,
	0xe0, 0xa4, 0xea, 0x86, 0x5a, 0x81, 0x15, 0xfa, 0xa7, 0x47, 0xcb, 0x3e, 0xeb, 0x4c, 0x14, 0x0a,
	0x6f, 0x54, 0xd4, 0x72, 0x64, 0x0a, 0x36, 0x67, 0xd4, 0x0e, 0xac, 0xd0, 0x8b, 0x6c, 0xce, 0xc8,
	0x53, 0xf0, 0xcd, 0xc8, 0x98, 0x33, 0xea, 0x68, 0x02, 0x0c, 0xb4, 0x66, 0x84, 0xc0, 0x40, 0x35,
	0x25, 0xd2, 0x81, 0x66, 0x74, 0xdc, 0x62, 0x45, 0x92, 0x23, 0x1d, 0x76, 0x58, 0x1b, 0x93, 0x00,
	0xfc, 0xb2, 0x12, 0x9b, 0x64, 0xc3, 0x33, 0xae, 0x1a, 0x3a, 0x0a, 0xac, 0xd0, 0x8e, 0xf6, 0x21,
	0xf2, 0x1c, 0x26, 0x8c, 0xcb, 0x32, 0x4b, 0x9a, 0x58, 0x54, 0x0c, 0x2b, 0x3a, 0x0e, 0xac, 0x70,
	0x18, 0x3d, 0xec, 0xc1, 0x0f, 0x2d, 0x46, 0x9e, 0x80, 0x97, 0x66, 0x42, 0x62, 0x7c, 0x2d, 0x0a,
	0xea, 0x06, 0x56, 0xe8, 0x46, 0xae, 0x06, 0xbe, 0x88, 0x82, 0x2c, 0x00, 0x3a, 0x32, 0x13, 0x52,
	0x51, 0x4f, 0xb3, 0x5d, 0xfa, 0x85, 0x90, 0x8a, 0x50, 0x18, 0xa7, 0x15, 0x26, 0x0a, 0x19, 0x85,
	0xc0, 0x0a, 0x9d, 0xc8, 0x3c, 0x5b, 0xa6, 0x2e, 0x99, 0x66, 0xfc, 0x8e, 0xe9, 0x9f, 0xc7, 0x7f,
	0x2c, 0x70, 0x3f, 0xf6, 0x6a, 0xef, 0xe2, 0xdf, 0x02, 0x20, 0x49, 0x53, 0x51, 0x17, 0x2a, 0xde,
	0xfa, 0xe8, 0xf5, 0xc8, 0x9a, 0xf5, 0xf6, 0x3a, 0x5b, 0x7b, 0x17, 0x00, 0x5c, 0xc6, 0x0c, 0xbf,
	0x25, 0x75, 0xa6, 0xb4, 0x87, 0x6e, 0xe4, 0x71, 0x79, 0xde, 0x01, 0xe4, 0x05, 0x8c, 0x64, 0x7b,
	0x39, 0x49, 0x87, 0x81, 0xa3, 0x67, 0x6e, 0xff, 0x07, 0x7d, 0xd1, 0xa8, 0xa7, 0xf7, 0xa5, 0x79,
	0xff, 0x95, 0x06, 0xb7, 0xa5, 0x7d, 0x05, 0xcf, 0x28, 0x93, 0x77, 0x91, 0xf6, 0x1a, 0x3c, 0x33,
	0x5d, 0x52, 0x5b, 0xef, 0x43, 0x76, 0xfb, 0x98, 0x56, 0xd1, 0x2e, 0xe9, 0xe5, 0x09, 0x80, 0x5e,
	0xf3, 0x53, 0x53, 0xa2, 0x24, 0x63, 0x70, 0xae, 0x45, 0x31, 0x7b, 0x40, 0x5c, 0x18, 0xb4, 0x07,
	0x9a, 0x59, 0x04, 0x60, 0x94, 0xd6, 0x52, 0x89, 0x7c, 0x66, 0x9f, 0xfe, 0xb2, 0xe1, 0xc8, 0x34,
	0xb9, 0xc4, 0xea, 0x07, 0x4f, 0x91, 0xbc, 0x85, 0xe9, 0x99, 0xd6, 0xb1, 0x3d, 0xc1, 0x81, 0x89,
	0xf3, 0x03, 0x58, 0x5b, 0xf9, 0x59, 0xeb, 0xbc, 0x77, 0xe5, 0x09, 0x4c, 0xcf, 0x31, 0xc3, 0xbd,
	0x4a, 0x30, 0x76, 0xac, 0xd9, 0x7c, 0x62, 0xe2, 0x77, 0x79, 0xa9, 0x1a, 0xf2, 0x06, 0x26, 0x17,
	0x5c, 0xaa, 0x9d, 0x8f, 0xb7, 0xf9, 0xf9, 0xa3, 0x7f, 0x07, 0x48, 0xf2, 0x0a, 0xfc, 0xf7, 0xa8,
	0x0e, 0xb6, 0x3f, 0xb0, 0xd0, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x4d, 0x80, 0x7e, 0x0d,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineServiceClient interface {
	CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	DeletePipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListPipelines(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Pipelines, error)
	GetPipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Pipeline, error)
}

type pipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineServiceClient(cc *grpc.ClientConn) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/pipeline.PipelineService/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/pipeline.PipelineService/UpdatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeletePipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/pipeline.PipelineService/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListPipelines(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := c.cc.Invoke(ctx, "/pipeline.PipelineService/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/pipeline.PipelineService/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
type PipelineServiceServer interface {
	CreatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	UpdatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	DeletePipeline(context.Context, *common.Id) (*common.Empty, error)
	ListPipelines(context.Context, *common.Empty) (*Pipelines, error)
	GetPipeline(context.Context, *common.Id) (*Pipeline, error)
}

func RegisterPipelineServiceServer(s *grpc.Server, srv PipelineServiceServer) {
	s.RegisterService(&_PipelineService_serviceDesc, srv)
}

func _PipelineService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineService/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineService/UpdatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).UpdatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineService/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeletePipeline(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineService/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListPipelines(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineService/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipeline(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelineService_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _PipelineService_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelineService_DeletePipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelineService_ListPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelineService_GetPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline/pipeline.proto",
}
