// Code generated by protoc-gen-go. DO NOT EDIT.
// source: template/template.proto

package template

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	conversation "git.subiz.net/header/conversation"
	email "git.subiz.net/header/email"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Template struct {
	AccountId            string                  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId              string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Type                 string                  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Messages             []*conversation.Message `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	Email                *email.Email            `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Channel              []string                `protobuf:"bytes,6,rep,name=channel,proto3" json:"channel,omitempty"`
	IsPublic             bool                    `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Id                   string                  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Ctx                  *common.Context         `protobuf:"bytes,9,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Template) Reset()         { *m = Template{} }
func (m *Template) String() string { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()    {}
func (*Template) Descriptor() ([]byte, []int) {
	return fileDescriptor_dca67df6b60706ce, []int{0}
}

func (m *Template) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Template.Unmarshal(m, b)
}
func (m *Template) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Template.Marshal(b, m, deterministic)
}
func (m *Template) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Template.Merge(m, src)
}
func (m *Template) XXX_Size() int {
	return xxx_messageInfo_Template.Size(m)
}
func (m *Template) XXX_DiscardUnknown() {
	xxx_messageInfo_Template.DiscardUnknown(m)
}

var xxx_messageInfo_Template proto.InternalMessageInfo

func (m *Template) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Template) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *Template) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Template) GetMessages() []*conversation.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Template) GetEmail() *email.Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Template) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *Template) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *Template) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Template) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type SearchTemplate struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId              string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Type                 string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Query                string          `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Channel              string          `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	IsPublic             bool            `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchTemplate) Reset()         { *m = SearchTemplate{} }
func (m *SearchTemplate) String() string { return proto.CompactTextString(m) }
func (*SearchTemplate) ProtoMessage()    {}
func (*SearchTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dca67df6b60706ce, []int{1}
}

func (m *SearchTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchTemplate.Unmarshal(m, b)
}
func (m *SearchTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchTemplate.Marshal(b, m, deterministic)
}
func (m *SearchTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTemplate.Merge(m, src)
}
func (m *SearchTemplate) XXX_Size() int {
	return xxx_messageInfo_SearchTemplate.Size(m)
}
func (m *SearchTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTemplate proto.InternalMessageInfo

func (m *SearchTemplate) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SearchTemplate) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *SearchTemplate) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *SearchTemplate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchTemplate) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchTemplate) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SearchTemplate) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type Templates struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Templates            []*Template     `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	Anchor               string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total                int64           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Templates) Reset()         { *m = Templates{} }
func (m *Templates) String() string { return proto.CompactTextString(m) }
func (*Templates) ProtoMessage()    {}
func (*Templates) Descriptor() ([]byte, []int) {
	return fileDescriptor_dca67df6b60706ce, []int{2}
}

func (m *Templates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Templates.Unmarshal(m, b)
}
func (m *Templates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Templates.Marshal(b, m, deterministic)
}
func (m *Templates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Templates.Merge(m, src)
}
func (m *Templates) XXX_Size() int {
	return xxx_messageInfo_Templates.Size(m)
}
func (m *Templates) XXX_DiscardUnknown() {
	xxx_messageInfo_Templates.DiscardUnknown(m)
}

var xxx_messageInfo_Templates proto.InternalMessageInfo

func (m *Templates) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Templates) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

func (m *Templates) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *Templates) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*Template)(nil), "template.Template")
	proto.RegisterType((*SearchTemplate)(nil), "template.SearchTemplate")
	proto.RegisterType((*Templates)(nil), "template.Templates")
}

func init() { proto.RegisterFile("template/template.proto", fileDescriptor_dca67df6b60706ce) }

var fileDescriptor_dca67df6b60706ce = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xed, 0x7c, 0xd8, 0x93, 0x92, 0x4a, 0x5b, 0x3e, 0x16, 0x23, 0x24, 0x93, 0x03, 0x32,
	0x42, 0x38, 0x10, 0x38, 0x70, 0x44, 0x82, 0x0a, 0xe5, 0x80, 0x54, 0xb9, 0x70, 0xae, 0x36, 0xf6,
	0xc8, 0x59, 0xc9, 0x5e, 0xbb, 0xde, 0x75, 0xd5, 0xf0, 0x23, 0x38, 0x71, 0xe1, 0x4f, 0xf1, 0x9b,
	0x90, 0xd7, 0x1f, 0x69, 0xc0, 0x45, 0xbd, 0x6c, 0xf6, 0xcd, 0xbc, 0x99, 0x7d, 0xf3, 0x32, 0x86,
	0x47, 0x0a, 0xb3, 0x22, 0x65, 0x0a, 0x97, 0xdd, 0x25, 0x28, 0xca, 0x5c, 0xe5, 0xc4, 0xee, 0xb0,
	0xeb, 0x27, 0x5c, 0x05, 0xb2, 0xda, 0xf0, 0xef, 0x81, 0x40, 0xb5, 0xdc, 0x22, 0x8b, 0xb1, 0x5c,
	0x46, 0x79, 0x96, 0xe5, 0xa2, 0xfd, 0x69, 0x6a, 0xdc, 0x77, 0xb7, 0x30, 0xc5, 0x15, 0x96, 0x92,
	0x29, 0xae, 0xf9, 0x7b, 0xd0, 0x56, 0x3d, 0x1f, 0xac, 0xc2, 0x8c, 0xf1, 0xb4, 0x39, 0x1b, 0xde,
	0xe2, 0x97, 0x09, 0xf6, 0xd7, 0x56, 0x14, 0x79, 0x0a, 0xc0, 0xa2, 0x28, 0xaf, 0x84, 0xba, 0xe0,
	0x31, 0x35, 0x3c, 0xc3, 0x77, 0x42, 0xa7, 0x8d, 0xac, 0x63, 0xf2, 0x18, 0x6c, 0x96, 0x60, 0x93,
	0x34, 0x75, 0x72, 0xaa, 0xf1, 0x3a, 0x26, 0x04, 0x46, 0x6a, 0x57, 0x20, 0xb5, 0x74, 0x58, 0xdf,
	0xc9, 0x1b, 0xb0, 0x33, 0x94, 0x92, 0x25, 0x28, 0xe9, 0xc8, 0xb3, 0xfc, 0xd9, 0xea, 0x41, 0x70,
	0xa0, 0xf4, 0x4b, 0x93, 0x0d, 0x7b, 0x1a, 0x59, 0xc0, 0x58, 0x8b, 0xa3, 0x63, 0xcf, 0xf0, 0x67,
	0xab, 0xa3, 0xa0, 0x91, 0x7a, 0x5a, 0x9f, 0x61, 0x93, 0x22, 0x14, 0xa6, 0xd1, 0x96, 0x09, 0x81,
	0x29, 0x9d, 0x78, 0x56, 0x2d, 0xa2, 0x85, 0xe4, 0x09, 0x38, 0x5c, 0x5e, 0x14, 0xd5, 0x26, 0xe5,
	0x11, 0x9d, 0x7a, 0x86, 0x6f, 0x87, 0x36, 0x97, 0x67, 0x1a, 0x93, 0x39, 0x98, 0x3c, 0xa6, 0xb6,
	0xd6, 0x67, 0xf2, 0x98, 0x3c, 0x03, 0x2b, 0x52, 0xd7, 0xd4, 0xd1, 0x0f, 0x1d, 0x07, 0xad, 0xe5,
	0x1f, 0x73, 0xa1, 0xf0, 0x5a, 0x85, 0x75, 0x6e, 0xf1, 0xdb, 0x80, 0xf9, 0x39, 0xb2, 0x32, 0xda,
	0xf6, 0x0e, 0xb5, 0x55, 0xc6, 0xed, 0x55, 0x7f, 0x99, 0x68, 0xfe, 0xcf, 0x44, 0x6b, 0xd8, 0xc4,
	0xd1, 0x0d, 0x13, 0xef, 0xc3, 0xf8, 0xb2, 0xc2, 0x72, 0xa7, 0x1d, 0x71, 0xc2, 0x06, 0x1c, 0x7a,
	0x60, 0xdc, 0xd5, 0x83, 0xc5, 0x0f, 0x03, 0x9c, 0x6e, 0x14, 0x79, 0x97, 0x59, 0x5e, 0x83, 0xd3,
	0x6d, 0xac, 0xa4, 0xa6, 0xfe, 0x0f, 0x49, 0xd0, 0xef, 0x74, 0xd7, 0x2a, 0xdc, 0x93, 0xc8, 0x43,
	0x98, 0x30, 0x11, 0x6d, 0xf3, 0xb2, 0x1d, 0xae, 0x45, 0xf5, 0x1c, 0x2a, 0x57, 0x2c, 0xd5, 0xc3,
	0x59, 0x61, 0x03, 0x56, 0x3f, 0x4d, 0x38, 0x3e, 0xc7, 0xf2, 0x8a, 0x47, 0xd8, 0x5b, 0xfc, 0x02,
	0x46, 0x67, 0x5c, 0x24, 0xe4, 0xa4, 0x53, 0x54, 0xa3, 0x10, 0x2f, 0x2b, 0x94, 0xca, 0x3d, 0xea,
	0x83, 0xb9, 0x48, 0xc8, 0x7b, 0x98, 0x7f, 0x2b, 0x24, 0x96, 0xaa, 0x2f, 0x1e, 0x50, 0xe7, 0x0e,
	0xc4, 0xc8, 0x4b, 0x98, 0x7f, 0xc2, 0x14, 0xd5, 0xfe, 0x59, 0xe8, 0x3a, 0xaf, 0x63, 0xf7, 0x5e,
	0x77, 0x3f, 0xcd, 0x0a, 0xb5, 0x23, 0xaf, 0x60, 0xf6, 0x19, 0xd5, 0x20, 0x73, 0xa8, 0xf7, 0x87,
	0x7a, 0xa6, 0x9b, 0x5b, 0x23, 0x09, 0xdd, 0xd3, 0x0e, 0x53, 0xee, 0xc9, 0xbf, 0x0d, 0xe4, 0x66,
	0xa2, 0xbf, 0xcd, 0xb7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x92, 0x3b, 0xfe, 0x48, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceTemplateClient is the client API for ServiceTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceTemplateClient interface {
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	UpsertTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	DeleteTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	GetTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Template, error)
	SearchTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error)
}

type serviceTemplateClient struct {
	cc *grpc.ClientConn
}

func NewServiceTemplateClient(cc *grpc.ClientConn) ServiceTemplateClient {
	return &serviceTemplateClient{cc}
}

func (c *serviceTemplateClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/template.ServiceTemplate/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateClient) UpsertTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template.ServiceTemplate/UpsertTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateClient) DeleteTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/template.ServiceTemplate/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateClient) GetTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template.ServiceTemplate/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateClient) SearchTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error) {
	out := new(Templates)
	err := c.cc.Invoke(ctx, "/template.ServiceTemplate/SearchTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTemplateServer is the server API for ServiceTemplate service.
type ServiceTemplateServer interface {
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	UpsertTemplate(context.Context, *Template) (*Template, error)
	DeleteTemplate(context.Context, *common.Id) (*common.Empty, error)
	GetTemplate(context.Context, *common.Id) (*Template, error)
	SearchTemplates(context.Context, *SearchTemplate) (*Templates, error)
}

func RegisterServiceTemplateServer(s *grpc.Server, srv ServiceTemplateServer) {
	s.RegisterService(&_ServiceTemplate_serviceDesc, srv)
}

func _ServiceTemplate_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.ServiceTemplate/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplate_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.ServiceTemplate/UpsertTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateServer).UpsertTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplate_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.ServiceTemplate/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateServer).DeleteTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplate_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.ServiceTemplate/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateServer).GetTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplate_SearchTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateServer).SearchTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.ServiceTemplate/SearchTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateServer).SearchTemplates(ctx, req.(*SearchTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceTemplate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "template.ServiceTemplate",
	HandlerType: (*ServiceTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceTemplate_Ping_Handler,
		},
		{
			MethodName: "UpsertTemplate",
			Handler:    _ServiceTemplate_UpsertTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _ServiceTemplate_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ServiceTemplate_GetTemplate_Handler,
		},
		{
			MethodName: "SearchTemplates",
			Handler:    _ServiceTemplate_SearchTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template/template.proto",
}
