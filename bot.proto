syntax = "proto3";

package bot;

option go_package = "github.com/subiz/header/bot";

import "common.proto";
import "conversation.proto";

message Trigger {
	string type = 3; // conversation_assigned, conversation_start, area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)
	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;
}

message BotRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;
	string user_id = 5;
	string event_id = 6;
	string type = 7; // start, terminate
	int64 created = 8; // in millisecond
}

message BotCondition {
	string key = 1; // url, browser, location, returning_visitor, device_type, referer, source, user_attribute, timming, integration_id, offline

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}
	repeated string sources = 2;

	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}
	repeated string device_types = 3;

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}
	repeated string browsers = 4;

	repeated string referers = 6; // referer
	repeated string exclude_referers = 9; // referrer

	repeated string urls = 10; // url, url_term, url_medium, ... (or only)
	repeated string exclude_urls = 11; // url (or only)

	repeated string has_visited_url = 12; // url (or only)
	repeated string has_not_visited_urls = 13; // url (or only)

	repeated LocationCondition locations = 14; // or
	repeated LocationCondition exclude_locations = 15; // or

	// timming
	string business_hour = 20; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 21; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minutes_of_day = 22; // pair [0-4] [6-9]

	// user
	UserAttributeCondition user = 23; // user_attribute

	repeated string integration_ids = 24; // optional for subiz and email

	// offline
	bool offline = 25; // only run when there is no online agent
}

message UserAttributeCondition {
	string key = 2;
	string operator = 3;
	string value = 4;
}

message LocationCondition {
	string city_name = 3; // must equal
	string country_code = 4; // must equal
}

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string fullname = 4;
	string job_title = 19;
	string avatar_url = 5;

	string category = 6; // hello, operator, reply

	string state = 7; // active, inactive, deleted

	Action action = 9; // point to root action

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	repeated Trigger triggers = 14;

	Frequently initiative_frequency = 15;

	repeated BotCondition conditions = 16;
	repeated string channels = 17; // default: all channel

	string bot_state = 18; // active, inactive

	int64 last_executed = 20; // ms
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
}

enum ActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	convert_to_ticket = 7;
	send_webhook = 8;
	update_conversation = 11;
	question = 12;
	update_user = 13;
	assign = 14;
	send_http = 15;
	switch_language = 16;
	ask_question = 18;
}

message NextAction {
	Condition condition = 2;
	Action action = 3; // pointed to the next action or used for branching to multiple actions
}

message Action {
	string account_id = 2;
	string bot_id = 3;
	string id = 4;
	string name = 5;

	// first action require trigger
	repeated NextAction nexts = 8;
	string type = 9; // send_message, send_email, tag, convert_to_ticket, condition, sleep, send_webhook

	ActionSendMessage send_message = 11;
	ActionSendMessage send_email = 12;
	ActionSleep sleep = 13; // deprecated

	ActionJump jump = 15;
	ActionSwitchLanguage switch_language = 16;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	conversation.AssignRequest assign = 19;

	int64 delay_sec = 20;
	ActionUpdateConversation update_conversation = 21;
	bytes internal_state = 30;
}

message ActionUpdateConversation {
	repeated string tag_ids = 2;
	repeated string untag_ids = 3;
	bool end_conversation = 4;
}

message ActionJump {
	string action_id = 2;
	bool to_first_action = 3;
}

message ActionSwitchLanguage {
}

message ActionSendHttp {
	string url = 2;
	string payload = 3;
	string method = 4;
	repeated ActionSendHttpHeader header = 5;
}

message ActionSendHttpHeader {
	string key = 2;
	string value = 3;
}

message ActionAskQuestion {
	bool wait_for_user_response = 2;

	repeated conversation.Message messages = 3;
	bool allow_open_response = 4;

	string save_to_attribute = 5;

	string validation = 6; // none, email, phone, date, link, number, regex
	string validation_regex = 7;

	bool skip_if_attribute_already_existed = 11;
	int64 typing_duration = 13; // typing before send, no longer than 5 sec

	bool be_gentle = 14;
}

message ActionSendMessage {
	repeated conversation.Message messages = 3;
	int64 typing_duration = 4; // sec, typing before send, no longer than 5 sec
}

message ActionSleep {
	int64 duration = 4;
}

message Condition {
	enum Group {
		single = 0;
		all = 1;
		any = 2;
	}
	string group = 2;
	repeated Condition conditions = 3; // only availabe if group is all or any

	// only avaiable if group is single
	string key = 5; // unique, path to properties, for example data.conversation.text, global.agent.avaliablitiy...
	string type = 6; // string, number, boolean

	common.NumberParams number = 7;
	common.StringParams string = 8;
	common.BooleanParams boolean = 9;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
		valid = 5;
	}

	string transform_function = 19; // used to transform value of left side before evaluate expression
	string name  = 20; // front end used only
}

message Actions {
	common.Context ctx = 1;
	repeated bot.Action actions = 2;
}

message Metric {
	repeated Metric submetrics = 5;
	int64 date_dim = 2;
	string object_type = 3; // all if empty
	int64 count = 4;
	int64 object_count = 6;
	int64 lead_count = 7;
}

message ReportBotRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ReportBotResponse {
	repeated Metric metrics = 2;
}

message ListObjectId {
	string object_type = 2;
	repeated string object_ids = 5;
}

message ListObjectsRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ListObjectsResponse {
	repeated ListObjectId list = 2;
}

message Frequently {
	bool once_per_user = 2;
	bool once_per_session = 3;
	int64 interval_sec = 4; // dont do twice between those seconds
}