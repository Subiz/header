syntax = "proto3";

package bot;

option go_package = "github.com/subiz/header/bot";

import "common.proto";
import "conversation.proto";

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string name = 4;
	string channel_id = 5;

	string category = 6; // hello, operator, reply

	string status = 7; // active, inactive, deleted

	Action action = 9;

	int64 created = 10;
	int64 updated = 11;
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
}

enum ActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	tag = 6;
	convert_to_ticket = 7;
	send_webhook = 8;
	like_comment = 9;
	hide_comment = 10;
	end_chat = 11;
	question = 12;
	update_user = 13;
	assign_agent = 14;
	send_http = 15;
	switch_language = 16;
	untag = 17;

}

message Action {
	string account_id = 2;
	string bot_id = 3;
	string id = 4;
	string name = 5;

	repeated Action nexts = 8; // pointed to the next action or used for branching to multiple actions

	string type = 9; // send_message, send_email, tag, convert_to_ticket, condition, sleep, send_webhook
	ActionCondition condition = 10;

	ActionSendMessage send_message = 11;
	ActionSendMessage send_email = 12;
	ActionSleep sleep = 13;

	ActionJump jump = 15;
	ActionSendHttp send_http = 17;
	ActionSwitchLanguage switch_language = 16;
}

message ActionJump {
	string action_id = 2;
}

message ActionSwitchLanguage {

}

message ActionSendHttp {
	string url  = 2;
	string payload = 3;
	string method = 4;
	repeated string header
}

message ActionSendHttp {
	string key = 2;
	string value = 3;
}

message ActionSendMessage {
	repeated conversation.Message messages = 3;
	bool allow_open_response = 4;
	string save_to_attribute = 5;
	validation
}

message ActionSleep {
	int64 duration = 4;
}

message ActionCondition {
	enum Group {
		single = 0;
		all = 1;
		any = 2;
	}
	string group = 2;
	repeated ActionCondition conditions = 3; // only availabe if group is all or any

	// only avaiable if group is single
	string key = 5; // unique, path to properties, for example data.conversation.text, global.agent.avaliablitiy...
	string type = 6; // string, number, boolean

	common.NumberParams number = 7;
	common.StringParams string = 8;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
	}
	string function = 19; // used to transform value of left side before evaluate expression
	string name  = 20; // front end used only
}
