syntax = "proto3";

package bot;

option go_package = "github.com/subiz/header/bot";

import "common.proto";
import "conversation.proto";

message Trigger {
	string type = 3; // exit_intent, area_clicked, scrolling_percentage, inactivity_duration, after_pageview, after_js_event
	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;
}

message Segmentation {
	repeated SegmentationCondition conditions = 4;
	repeated SegmentationCondition source_conditions = 6; // source, source_referer (or only)
	repeated SegmentationCondition location_conditions = 7; // city, country_code (or only)

	repeated SegmentationCondition url_conditions = 8; // url, url_term, url_medium, ... (or only)
	repeated SegmentationCondition exclude_url_conditions = 9; // url (or only)

	repeated SegmentationCondition has_visited_url_conditions = 10; // url (or only)
	repeated SegmentationCondition has_not_visited_url_conditions = 11; // url (or only)

	bool disabled = 12;
	repeated SegmentationCondition exclude_location_conditions = 13; // city, country_code (or only)
}

message SegmentationCondition {
	string key = 3; // url, browser, country_code, city, returning_visitor, page_view_count, os, device, device_type, referrer, source, source_referer, /*ip_ranges*/, language, utm_campaign, utm_content, utm_medium, utm_source, utm_term, time_on_page, user_attribute

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}

	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}

	// for rate limiting
	// int64 frequency_times = 11; // number of time display the message
	// int64 frequency_duration = 11; // per duration (1 message per hour || 10 messages per day)


	string user_attribute_key = 34;

	string operator = 40; // eq, ne, con, notCon, in, gt, gte, lt, lte, inRange, notInRange, begin, end
	string value = 41;
}

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string name = 4;

	string category = 6; // hello, operator, reply

	string status = 7; // active, inactive, deleted

	Action action = 9;

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	Trigger web_trigger = 14;
	bool auto_join = 15; // start bot on new conversation

	repeated Segmentation web_condition = 16;

	repeated string channels = 17; // default: all channel
	// for fb comment
	// for messenger
	// for zalo
	repeated string integration_ids = 18; // optional for subiz and email
	conversation.TimmingCondition timming_condition = 19;
	conversation.UserAttributeCondition user_conditions = 20;
	bool when_offline = 21; // only run when there is no online agent
	int64 max_executions = 22;
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
}

enum ActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	tag = 6;
	convert_to_ticket = 7;
	send_webhook = 8;
	like_comment = 9;
	hide_comment = 10;
	end_chat = 11;
	question = 12;
	update_user = 13;
	assign = 14;
	send_http = 15;
	switch_language = 16;
	untag = 17;

	ask_question = 18;
}

message NextAction {
	Condition condition = 2;
	Action action = 3; // pointed to the next action or used for branching to multiple actions
}

message Action {
	string account_id = 2;
	string bot_id = 3;
	string id = 4;
	string name = 5;

	// first action require trigger
	repeated NextAction nexts = 8;
	string type = 9; // send_message, send_email, tag, convert_to_ticket, condition, sleep, send_webhook

	ActionSendMessage send_message = 11;
	ActionSendMessage send_email = 12;
	ActionSleep sleep = 13; // deprecated

	ActionJump jump = 15;
	ActionSwitchLanguage switch_language = 16;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	ActionAssign assign = 19;

	int64 delay_sec = 20;
}

message ActionAssign {
	string strategy = 5;
	repeated string assign_tos = 6;
	bool available_agents_only = 13; // strategy
}

message ActionJump {
	string action_id = 2;
}

message ActionSwitchLanguage {

}

message ActionSendHttp {
	string url  = 2;
	string payload = 3;
	string method = 4;
	repeated ActionSendHttpHeader header = 5;
}

message ActionSendHttpHeader {
	string key = 2;
	string value = 3;
}

message ActionAskQuestion {
	repeated conversation.Message messages = 3;
	bool allow_open_response = 4;
	string save_to_attribute = 5;
	string validation = 6; // none, email, phone, date, link, number, regex
	string validation_regex = 7;
	int32 retry_on_invalid = 10;
	bool skip_if_attribute_already_existed = 11;
	common.I18nText validation_error_message = 12;
	int64 typing_duration = 13; // typing before send, no longer than 5 sec
}

message ActionSendMessage {
	repeated conversation.Message messages = 3;
	int64 typing_duration = 4; // sec, typing before send, no longer than 5 sec
}

message ActionSleep {
	int64 duration = 4;
}

message Condition {
	enum Group {
		single = 0;
		all = 1;
		any = 2;
	}
	string group = 2;
	repeated Condition conditions = 3; // only availabe if group is all or any

	// only avaiable if group is single
	string key = 5; // unique, path to properties, for example data.conversation.text, global.agent.avaliablitiy...
	string type = 6; // string, number, boolean

	common.NumberParams number = 7;
	common.StringParams string = 8;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
	}
	string function = 19; // used to transform value of left side before evaluate expression
	string name  = 20; // front end used only
}
