// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	auth "github.com/subiz/header/auth"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c29e0fcDecodeGithubComSubizHeaderApi(in *jlexer.Lexer, out *WhitelistUrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi(out *jwriter.Writer, in WhitelistUrl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WhitelistUrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WhitelistUrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WhitelistUrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WhitelistUrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in *jlexer.Lexer, out *common.Context) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				out.State = in.Bytes()
			}
		case "node":
			out.Node = string(in.String())
		case "credential":
			if in.IsNull() {
				in.Skip()
				out.Credential = nil
			} else {
				if out.Credential == nil {
					out.Credential = new(auth.Credential)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderAuth(in, &*out.Credential)
			}
		case "tracing":
			if in.IsNull() {
				in.Skip()
				out.Tracing = nil
			} else {
				if out.Tracing == nil {
					out.Tracing = new(common.Tracing)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon1(in, &*out.Tracing)
			}
		case "by_device":
			if in.IsNull() {
				in.Skip()
				out.ByDevice = nil
			} else {
				if out.ByDevice == nil {
					out.ByDevice = new(common.Device)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon2(in, &*out.ByDevice)
			}
		case "sub_topic":
			out.SubTopic = string(in.String())
		case "kafka_partition":
			out.KafkaPartition = int32(in.Int32())
		case "kafka_offset":
			out.KafkaOffset = int64(in.Int64())
		case "kafka_term":
			out.KafkaTerm = uint64(in.Uint64())
		case "idempotency_key":
			out.IdempotencyKey = string(in.String())
		case "env":
			out.Env = string(in.String())
		case "kafka_key":
			out.KafkaKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out *jwriter.Writer, in common.Context) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.State) != 0 {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.State)
	}
	if in.Node != "" {
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Node))
	}
	if in.Credential != nil {
		const prefix string = ",\"credential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderAuth(out, *in.Credential)
	}
	if in.Tracing != nil {
		const prefix string = ",\"tracing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon1(out, *in.Tracing)
	}
	if in.ByDevice != nil {
		const prefix string = ",\"by_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon2(out, *in.ByDevice)
	}
	if in.SubTopic != "" {
		const prefix string = ",\"sub_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubTopic))
	}
	if in.KafkaPartition != 0 {
		const prefix string = ",\"kafka_partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.KafkaPartition))
	}
	if in.KafkaOffset != 0 {
		const prefix string = ",\"kafka_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KafkaOffset))
	}
	if in.KafkaTerm != 0 {
		const prefix string = ",\"kafka_term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.KafkaTerm))
	}
	if in.IdempotencyKey != "" {
		const prefix string = ",\"idempotency_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdempotencyKey))
	}
	if in.Env != "" {
		const prefix string = ",\"env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Env))
	}
	if in.KafkaKey != "" {
		const prefix string = ",\"kafka_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KafkaKey))
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderCommon2(in *jlexer.Lexer, out *common.Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "screen_resolution":
			out.ScreenResolution = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "source_referrer":
			out.SourceReferrer = string(in.String())
		case "ga_tracking_ids":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingIds = nil
			} else {
				in.Delim('[')
				if out.GaTrackingIds == nil {
					if !in.IsDelim(']') {
						out.GaTrackingIds = make([]string, 0, 4)
					} else {
						out.GaTrackingIds = []string{}
					}
				} else {
					out.GaTrackingIds = (out.GaTrackingIds)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.GaTrackingIds = append(out.GaTrackingIds, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderCommon2(out *jwriter.Writer, in common.Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.SourceReferrer != "" {
		const prefix string = ",\"source_referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceReferrer))
	}
	if len(in.GaTrackingIds) != 0 {
		const prefix string = ",\"ga_tracking_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.GaTrackingIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderCommon1(in *jlexer.Lexer, out *common.Tracing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traces":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]*common.Trace, 0, 8)
					} else {
						out.Traces = []*common.Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *common.Trace
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(common.Trace)
						}
						easyjson3c29e0fcDecodeGithubComSubizHeaderCommon3(in, &*v7)
					}
					out.Traces = append(out.Traces, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderCommon1(out *jwriter.Writer, in common.Tracing) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Traces) != 0 {
		const prefix string = ",\"traces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Traces {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjson3c29e0fcEncodeGithubComSubizHeaderCommon3(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderCommon3(in *jlexer.Lexer, out *common.Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviveName":
			out.ServiveName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "duration":
			out.Duration = int64(in.Int64())
		case "started":
			out.Started = int64(in.Int64())
		case "ended":
			out.Ended = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderCommon3(out *jwriter.Writer, in common.Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiveName != "" {
		const prefix string = ",\"serviveName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiveName))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Started != 0 {
		const prefix string = ",\"started\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Started))
	}
	if in.Ended != 0 {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ended))
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderAuth(in *jlexer.Lexer, out *auth.Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "issuer":
			out.Issuer = string(in.String())
		case "type":
			out.Type = auth.Type(in.Int32())
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderAuth1(in, &*out.Perm)
			}
		case "client_id":
			out.ClientId = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderAuth(out *jwriter.Writer, in auth.Credential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderAuth1(out, *in.Perm)
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.AvatarUrl != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarUrl))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderAuth1(in *jlexer.Lexer, out *auth.Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = int32(in.Int32())
		case "agent":
			out.Agent = int32(in.Int32())
		case "agent_password":
			out.AgentPassword = int32(in.Int32())
		case "permission":
			out.Permission = int32(in.Int32())
		case "agent_group":
			out.AgentGroup = int32(in.Int32())
		case "segmentation":
			out.Segmentation = int32(in.Int32())
		case "client":
			out.Client = int32(in.Int32())
		case "rule":
			out.Rule = int32(in.Int32())
		case "conversation":
			out.Conversation = int32(in.Int32())
		case "integration":
			out.Integration = int32(in.Int32())
		case "canned_response":
			out.CannedResponse = int32(in.Int32())
		case "tag":
			out.Tag = int32(in.Int32())
		case "whitelist_ip":
			out.WhitelistIp = int32(in.Int32())
		case "whitelist_user":
			out.WhitelistUser = int32(in.Int32())
		case "whitelist_domain":
			out.WhitelistDomain = int32(in.Int32())
		case "widget":
			out.Widget = int32(in.Int32())
		case "subscription":
			out.Subscription = int32(in.Int32())
		case "invoice":
			out.Invoice = int32(in.Int32())
		case "payment_method":
			out.PaymentMethod = int32(in.Int32())
		case "bill":
			out.Bill = int32(in.Int32())
		case "payment_log":
			out.PaymentLog = int32(in.Int32())
		case "payment_comment":
			out.PaymentComment = int32(in.Int32())
		case "user":
			out.User = int32(in.Int32())
		case "automation":
			out.Automation = int32(in.Int32())
		case "ping":
			out.Ping = int32(in.Int32())
		case "attribute":
			out.Attribute = int32(in.Int32())
		case "agent_notification":
			out.AgentNotification = int32(in.Int32())
		case "conversation_export":
			out.ConversationExport = int32(in.Int32())
		case "conversation_report":
			out.ConversationReport = int32(in.Int32())
		case "content":
			out.Content = int32(in.Int32())
		case "pipeline":
			out.Pipeline = int32(in.Int32())
		case "currency":
			out.Currency = int32(in.Int32())
		case "service_level_agreement":
			out.ServiceLevelAgreement = int32(in.Int32())
		case "message_template":
			out.MessageTemplate = int32(in.Int32())
		case "agent_presence":
			out.AgentPresence = int32(in.Int32())
		case "agent_preference":
			out.AgentPreference = int32(in.Int32())
		case "promotion_code":
			out.PromotionCode = int32(in.Int32())
		case "referral":
			out.Referral = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderAuth1(out *jwriter.Writer, in auth.Permission) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Account))
	}
	if in.Agent != 0 {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Agent))
	}
	if in.AgentPassword != 0 {
		const prefix string = ",\"agent_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPassword))
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Permission))
	}
	if in.AgentGroup != 0 {
		const prefix string = ",\"agent_group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentGroup))
	}
	if in.Segmentation != 0 {
		const prefix string = ",\"segmentation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Segmentation))
	}
	if in.Client != 0 {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Client))
	}
	if in.Rule != 0 {
		const prefix string = ",\"rule\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Rule))
	}
	if in.Conversation != 0 {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Conversation))
	}
	if in.Integration != 0 {
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Integration))
	}
	if in.CannedResponse != 0 {
		const prefix string = ",\"canned_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.CannedResponse))
	}
	if in.Tag != 0 {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Tag))
	}
	if in.WhitelistIp != 0 {
		const prefix string = ",\"whitelist_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistIp))
	}
	if in.WhitelistUser != 0 {
		const prefix string = ",\"whitelist_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistUser))
	}
	if in.WhitelistDomain != 0 {
		const prefix string = ",\"whitelist_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistDomain))
	}
	if in.Widget != 0 {
		const prefix string = ",\"widget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Widget))
	}
	if in.Subscription != 0 {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Subscription))
	}
	if in.Invoice != 0 {
		const prefix string = ",\"invoice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Invoice))
	}
	if in.PaymentMethod != 0 {
		const prefix string = ",\"payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentMethod))
	}
	if in.Bill != 0 {
		const prefix string = ",\"bill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Bill))
	}
	if in.PaymentLog != 0 {
		const prefix string = ",\"payment_log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentLog))
	}
	if in.PaymentComment != 0 {
		const prefix string = ",\"payment_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentComment))
	}
	if in.User != 0 {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.User))
	}
	if in.Automation != 0 {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Automation))
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ping))
	}
	if in.Attribute != 0 {
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Attribute))
	}
	if in.AgentNotification != 0 {
		const prefix string = ",\"agent_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentNotification))
	}
	if in.ConversationExport != 0 {
		const prefix string = ",\"conversation_export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationExport))
	}
	if in.ConversationReport != 0 {
		const prefix string = ",\"conversation_report\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationReport))
	}
	if in.Content != 0 {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Content))
	}
	if in.Pipeline != 0 {
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Pipeline))
	}
	if in.Currency != 0 {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Currency))
	}
	if in.ServiceLevelAgreement != 0 {
		const prefix string = ",\"service_level_agreement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ServiceLevelAgreement))
	}
	if in.MessageTemplate != 0 {
		const prefix string = ",\"message_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MessageTemplate))
	}
	if in.AgentPresence != 0 {
		const prefix string = ",\"agent_presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPresence))
	}
	if in.AgentPreference != 0 {
		const prefix string = ",\"agent_preference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPreference))
	}
	if in.PromotionCode != 0 {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PromotionCode))
	}
	if in.Referral != 0 {
		const prefix string = ",\"referral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Referral))
	}
	out.RawByte('}')
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi1(in *jlexer.Lexer, out *ScryptChallenge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "N":
			out.N = int32(in.Int32())
		case "P":
			out.P = int32(in.Int32())
		case "r":
			out.R = int32(in.Int32())
		case "salt":
			out.Salt = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "domain":
			out.Domain = int32(in.Int32())
		case "dklen":
			out.Dklen = int32(in.Int32())
		case "answer":
			out.Answer = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi1(out *jwriter.Writer, in ScryptChallenge) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.N != 0 {
		const prefix string = ",\"N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.N))
	}
	if in.P != 0 {
		const prefix string = ",\"P\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.P))
	}
	if in.R != 0 {
		const prefix string = ",\"r\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.R))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Salt))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.Domain != 0 {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Domain))
	}
	if in.Dklen != 0 {
		const prefix string = ",\"dklen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Dklen))
	}
	if in.Answer != "" {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Answer))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScryptChallenge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScryptChallenge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScryptChallenge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScryptChallenge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi1(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi2(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(map[string]string)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 string
					v10 = string(in.String())
					(out.Header)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		case "code":
			out.Code = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi2(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Header) != 0 {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Header {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Body)
	}
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi2(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi3(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(map[string]string)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.Header)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		case "method":
			out.Method = string(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi3(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Header) != 0 {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Header {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Body)
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi3(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi4(in *jlexer.Lexer, out *BlacklistIP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi4(out *jwriter.Writer, in BlacklistIP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlacklistIP) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlacklistIP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlacklistIP) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlacklistIP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi4(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi5(in *jlexer.Lexer, out *BlacklistDomain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi5(out *jwriter.Writer, in BlacklistDomain) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlacklistDomain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlacklistDomain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlacklistDomain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlacklistDomain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi5(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi6(in *jlexer.Lexer, out *BatchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "paths":
			if in.IsNull() {
				in.Skip()
				out.Paths = nil
			} else {
				in.Delim('[')
				if out.Paths == nil {
					if !in.IsDelim(']') {
						out.Paths = make([]string, 0, 4)
					} else {
						out.Paths = []string{}
					}
				} else {
					out.Paths = (out.Paths)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Paths = append(out.Paths, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ops":
			if in.IsNull() {
				in.Skip()
				out.Ops = nil
			} else {
				in.Delim('[')
				if out.Ops == nil {
					if !in.IsDelim(']') {
						out.Ops = make([]*BatchOp, 0, 8)
					} else {
						out.Ops = []*BatchOp{}
					}
				} else {
					out.Ops = (out.Ops)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *BatchOp
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(BatchOp)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.Ops = append(out.Ops, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi6(out *jwriter.Writer, in BatchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if len(in.Paths) != 0 {
		const prefix string = ",\"paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Paths {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ops) != 0 {
		const prefix string = ",\"ops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Ops {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					(*v25).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi6(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi7(in *jlexer.Lexer, out *BatchOp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "method":
			out.Method = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi7(out *jwriter.Writer, in BatchOp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchOp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchOp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchOp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchOp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi7(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi8(in *jlexer.Lexer, out *BannedUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjson3c29e0fcDecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi8(out *jwriter.Writer, in BannedUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3c29e0fcEncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BannedUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BannedUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BannedUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BannedUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi8(l, v)
}
func easyjson3c29e0fcDecodeGithubComSubizHeaderApi9(in *jlexer.Lexer, out *Apikey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secret":
			out.Secret = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "client_id":
			out.ClientId = string(in.String())
		case "client_type":
			out.ClientType = string(in.String())
		case "is_internal":
			out.IsInternal = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGithubComSubizHeaderApi9(out *jwriter.Writer, in Apikey) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Secret != "" {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Secret))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.ClientType != "" {
		const prefix string = ",\"client_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientType))
	}
	if in.IsInternal {
		const prefix string = ",\"is_internal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsInternal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Apikey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Apikey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGithubComSubizHeaderApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Apikey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Apikey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGithubComSubizHeaderApi9(l, v)
}
