// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	common "git.subiz.net/header/common"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c29e0fcDecodeGitSubizNetHeaderApi(in *jlexer.Lexer, out *WhitelistUrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi(out *jwriter.Writer, in WhitelistUrl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WhitelistUrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WhitelistUrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WhitelistUrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WhitelistUrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi(l, v)
}
func easyjson3c29e0fcDecodeGitSubizNetHeaderApi1(in *jlexer.Lexer, out *ScryptChallenge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "N":
			out.N = int32(in.Int32())
		case "P":
			out.P = int32(in.Int32())
		case "r":
			out.R = int32(in.Int32())
		case "salt":
			out.Salt = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "domain":
			out.Domain = int32(in.Int32())
		case "dklen":
			out.Dklen = int32(in.Int32())
		case "answer":
			out.Answer = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi1(out *jwriter.Writer, in ScryptChallenge) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.N != 0 {
		const prefix string = ",\"N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.N))
	}
	if in.P != 0 {
		const prefix string = ",\"P\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.P))
	}
	if in.R != 0 {
		const prefix string = ",\"r\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.R))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Salt))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.Domain != 0 {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Domain))
	}
	if in.Dklen != 0 {
		const prefix string = ",\"dklen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Dklen))
	}
	if in.Answer != "" {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Answer))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScryptChallenge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScryptChallenge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScryptChallenge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScryptChallenge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi1(l, v)
}
func easyjson3c29e0fcDecodeGitSubizNetHeaderApi2(in *jlexer.Lexer, out *BlacklistIP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi2(out *jwriter.Writer, in BlacklistIP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlacklistIP) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlacklistIP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlacklistIP) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlacklistIP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi2(l, v)
}
func easyjson3c29e0fcDecodeGitSubizNetHeaderApi3(in *jlexer.Lexer, out *BlacklistDomain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi3(out *jwriter.Writer, in BlacklistDomain) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlacklistDomain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlacklistDomain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlacklistDomain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlacklistDomain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi3(l, v)
}
func easyjson3c29e0fcDecodeGitSubizNetHeaderApi4(in *jlexer.Lexer, out *BannedUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "by":
			out.By = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi4(out *jwriter.Writer, in BannedUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.By != "" {
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BannedUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BannedUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BannedUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BannedUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi4(l, v)
}
func easyjson3c29e0fcDecodeGitSubizNetHeaderApi5(in *jlexer.Lexer, out *Apikey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secret":
			out.Secret = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "client_id":
			out.ClientId = string(in.String())
		case "client_type":
			out.ClientType = string(in.String())
		case "is_internal":
			out.IsInternal = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c29e0fcEncodeGitSubizNetHeaderApi5(out *jwriter.Writer, in Apikey) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Secret != "" {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Secret))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.ClientType != "" {
		const prefix string = ",\"client_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientType))
	}
	if in.IsInternal {
		const prefix string = ",\"is_internal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsInternal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Apikey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Apikey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c29e0fcEncodeGitSubizNetHeaderApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Apikey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Apikey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c29e0fcDecodeGitSubizNetHeaderApi5(l, v)
}
