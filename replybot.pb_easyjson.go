// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package replybot

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	auth "github.com/subiz/header/auth"
	common "github.com/subiz/header/common"
	conversation "github.com/subiz/header/conversation"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB4e27493DecodeGithubComSubizHeader(in *jlexer.Lexer, out *Typing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(conversation.Message)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation(in, &*out.Message)
			}
		case "sleep":
			out.Sleep = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeader(out *jwriter.Writer, in Typing) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation(out, *in.Message)
	}
	if in.Sleep != 0 {
		const prefix string = ",\"sleep\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Sleep))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Typing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB4e27493EncodeGithubComSubizHeader(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Typing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB4e27493EncodeGithubComSubizHeader(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Typing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB4e27493DecodeGithubComSubizHeader(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Typing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB4e27493DecodeGithubComSubizHeader(l, v)
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation(in *jlexer.Lexer, out *conversation.Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderCommon(in, &*out.Ctx)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*conversation.Attachment, 0, 8)
					} else {
						out.Attachments = []*conversation.Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *conversation.Attachment
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(conversation.Attachment)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation1(in, &*v1)
					}
					out.Attachments = append(out.Attachments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*conversation.Reaction, 0, 8)
					} else {
						out.Reactions = []*conversation.Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *conversation.Reaction
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(conversation.Reaction)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation2(in, &*v2)
					}
					out.Reactions = append(out.Reactions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*conversation.Field, 0, 8)
					} else {
						out.Fields = []*conversation.Field{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *conversation.Field
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(conversation.Field)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation3(in, &*v3)
					}
					out.Fields = append(out.Fields, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "computed":
			if in.IsNull() {
				in.Skip()
				out.Computed = nil
			} else {
				if out.Computed == nil {
					out.Computed = new(conversation.Computed)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation4(in, &*out.Computed)
			}
		case "integration_id":
			if in.IsNull() {
				in.Skip()
				out.IntegrationId = nil
			} else {
				if out.IntegrationId == nil {
					out.IntegrationId = new(string)
				}
				*out.IntegrationId = string(in.String())
			}
		case "chain_id":
			if in.IsNull() {
				in.Skip()
				out.ChainId = nil
			} else {
				if out.ChainId == nil {
					out.ChainId = new(string)
				}
				*out.ChainId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation(out *jwriter.Writer, in conversation.Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderCommon(out, *in.Ctx)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Format))
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Attachments {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation1(out, *v5)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Reactions) != 0 {
		const prefix string = ",\"reactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Reactions {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation2(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Fields {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation3(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Computed != nil {
		const prefix string = ",\"computed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation4(out, *in.Computed)
	}
	if in.IntegrationId != nil {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.IntegrationId))
	}
	if in.ChainId != nil {
		const prefix string = ",\"chain_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ChainId))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation4(in *jlexer.Lexer, out *conversation.Computed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seen":
			if in.IsNull() {
				in.Skip()
				out.Seen = nil
			} else {
				in.Delim('[')
				if out.Seen == nil {
					if !in.IsDelim(']') {
						out.Seen = make([]*conversation.Seen, 0, 8)
					} else {
						out.Seen = []*conversation.Seen{}
					}
				} else {
					out.Seen = (out.Seen)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *conversation.Seen
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(conversation.Seen)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation5(in, &*v10)
					}
					out.Seen = append(out.Seen, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ack":
			if in.IsNull() {
				in.Skip()
				out.Ack = nil
			} else {
				in.Delim('[')
				if out.Ack == nil {
					if !in.IsDelim(']') {
						out.Ack = make([]*conversation.Ack, 0, 8)
					} else {
						out.Ack = []*conversation.Ack{}
					}
				} else {
					out.Ack = (out.Ack)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *conversation.Ack
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(conversation.Ack)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation6(in, &*v11)
					}
					out.Ack = append(out.Ack, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "received":
			if in.IsNull() {
				in.Skip()
				out.Received = nil
			} else {
				in.Delim('[')
				if out.Received == nil {
					if !in.IsDelim(']') {
						out.Received = make([]*conversation.Received, 0, 8)
					} else {
						out.Received = []*conversation.Received{}
					}
				} else {
					out.Received = (out.Received)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *conversation.Received
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(conversation.Received)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation7(in, &*v12)
					}
					out.Received = append(out.Received, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation4(out *jwriter.Writer, in conversation.Computed) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Seen) != 0 {
		const prefix string = ",\"seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Seen {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation5(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Ack) != 0 {
		const prefix string = ",\"ack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Ack {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation6(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Received) != 0 {
		const prefix string = ",\"received\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Received {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation7(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation7(in *jlexer.Lexer, out *conversation.Received) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation7(out *jwriter.Writer, in conversation.Received) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation6(in *jlexer.Lexer, out *conversation.Ack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(string)
				}
				*out.Error = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation6(out *jwriter.Writer, in conversation.Ack) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Error))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation5(in *jlexer.Lexer, out *conversation.Seen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "member_id":
			if in.IsNull() {
				in.Skip()
				out.MemberId = nil
			} else {
				if out.MemberId == nil {
					out.MemberId = new(string)
				}
				*out.MemberId = string(in.String())
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(int64)
				}
				*out.At = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation5(out *jwriter.Writer, in conversation.Seen) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemberId != nil {
		const prefix string = ",\"member_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MemberId))
	}
	if in.At != nil {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.At))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation3(in *jlexer.Lexer, out *conversation.Field) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation3(out *jwriter.Writer, in conversation.Field) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation2(in *jlexer.Lexer, out *conversation.Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(int32)
				}
				*out.Count = int32(in.Int32())
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Users = append(out.Users, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation2(out *jwriter.Writer, in conversation.Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Count != nil {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Count))
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Users {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation1(in *jlexer.Lexer, out *conversation.Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "mimetype":
			if in.IsNull() {
				in.Skip()
				out.Mimetype = nil
			} else {
				if out.Mimetype == nil {
					out.Mimetype = new(string)
				}
				*out.Mimetype = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailUrl = nil
			} else {
				if out.ThumbnailUrl == nil {
					out.ThumbnailUrl = new(string)
				}
				*out.ThumbnailUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "length":
			if in.IsNull() {
				in.Skip()
				out.Length = nil
			} else {
				if out.Length == nil {
					out.Length = new(int32)
				}
				*out.Length = int32(in.Int32())
			}
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				if out.Size == nil {
					out.Size = new(int32)
				}
				*out.Size = int32(in.Int32())
			}
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]*conversation.GenericElementTemplate, 0, 8)
					} else {
						out.Elements = []*conversation.GenericElementTemplate{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *conversation.GenericElementTemplate
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(conversation.GenericElementTemplate)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation8(in, &*v22)
					}
					out.Elements = append(out.Elements, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(string)
				}
				*out.Color = string(in.String())
			}
		case "pretext":
			if in.IsNull() {
				in.Skip()
				out.Pretext = nil
			} else {
				if out.Pretext == nil {
					out.Pretext = new(string)
				}
				*out.Pretext = string(in.String())
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(conversation.Button)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in, &*v23)
					}
					out.Buttons = append(out.Buttons, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ask_info":
			if in.IsNull() {
				in.Skip()
				out.AskInfo = nil
			} else {
				if out.AskInfo == nil {
					out.AskInfo = new(conversation.AskInfomation)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation10(in, &*out.AskInfo)
			}
		case "ask_info_answer":
			if in.IsNull() {
				in.Skip()
				out.AskInfoAnswer = nil
			} else {
				if out.AskInfoAnswer == nil {
					out.AskInfoAnswer = new(conversation.AskInfomationAnswer)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation11(in, &*out.AskInfoAnswer)
			}
		case "form":
			if in.IsNull() {
				in.Skip()
				out.Form = nil
			} else {
				if out.Form == nil {
					out.Form = new(conversation.Form)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation12(in, &*out.Form)
			}
		case "form_submit":
			if in.IsNull() {
				in.Skip()
				out.FormSubmit = nil
			} else {
				if out.FormSubmit == nil {
					out.FormSubmit = new(conversation.FormSubmit)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation13(in, &*out.FormSubmit)
			}
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				in.Delim('[')
				if out.Contents == nil {
					if !in.IsDelim(']') {
						out.Contents = make([]*conversation.ContentTemplate, 0, 8)
					} else {
						out.Contents = []*conversation.ContentTemplate{}
					}
				} else {
					out.Contents = (out.Contents)[:0]
				}
				for !in.IsDelim(']') {
					var v24 *conversation.ContentTemplate
					if in.IsNull() {
						in.Skip()
						v24 = nil
					} else {
						if v24 == nil {
							v24 = new(conversation.ContentTemplate)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation14(in, &*v24)
					}
					out.Contents = append(out.Contents, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quick_replies":
			if in.IsNull() {
				in.Skip()
				out.QuickReplies = nil
			} else {
				in.Delim('[')
				if out.QuickReplies == nil {
					if !in.IsDelim(']') {
						out.QuickReplies = make([]*conversation.QuickReply, 0, 8)
					} else {
						out.QuickReplies = []*conversation.QuickReply{}
					}
				} else {
					out.QuickReplies = (out.QuickReplies)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *conversation.QuickReply
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(conversation.QuickReply)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation15(in, &*v25)
					}
					out.QuickReplies = append(out.QuickReplies, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation1(out *jwriter.Writer, in conversation.Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Mimetype != nil {
		const prefix string = ",\"mimetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mimetype))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.ThumbnailUrl != nil {
		const prefix string = ",\"thumbnail_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ThumbnailUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Length != nil {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Length))
	}
	if in.Size != nil {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Size))
	}
	if len(in.Elements) != 0 {
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Elements {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation8(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Color != nil {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Color))
	}
	if in.Pretext != nil {
		const prefix string = ",\"pretext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Pretext))
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Buttons {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out, *v29)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AskInfo != nil {
		const prefix string = ",\"ask_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation10(out, *in.AskInfo)
	}
	if in.AskInfoAnswer != nil {
		const prefix string = ",\"ask_info_answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation11(out, *in.AskInfoAnswer)
	}
	if in.Form != nil {
		const prefix string = ",\"form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation12(out, *in.Form)
	}
	if in.FormSubmit != nil {
		const prefix string = ",\"form_submit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation13(out, *in.FormSubmit)
	}
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Contents {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation14(out, *v31)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.QuickReplies) != 0 {
		const prefix string = ",\"quick_replies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.QuickReplies {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation15(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation15(in *jlexer.Lexer, out *conversation.QuickReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content_type":
			if in.IsNull() {
				in.Skip()
				out.ContentType = nil
			} else {
				if out.ContentType == nil {
					out.ContentType = new(string)
				}
				*out.ContentType = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation15(out *jwriter.Writer, in conversation.QuickReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContentType != nil {
		const prefix string = ",\"content_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentType))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation14(in *jlexer.Lexer, out *conversation.ContentTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Labels = append(out.Labels, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(string)
				}
				*out.Availability = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "sale_price":
			if in.IsNull() {
				in.Skip()
				out.SalePrice = nil
			} else {
				if out.SalePrice == nil {
					out.SalePrice = new(float32)
				}
				*out.SalePrice = float32(in.Float32())
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.Categories = append(out.Categories, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachment_urls":
			if in.IsNull() {
				in.Skip()
				out.AttachmentUrls = nil
			} else {
				in.Delim('[')
				if out.AttachmentUrls == nil {
					if !in.IsDelim(']') {
						out.AttachmentUrls = make([]string, 0, 4)
					} else {
						out.AttachmentUrls = []string{}
					}
				} else {
					out.AttachmentUrls = (out.AttachmentUrls)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.AttachmentUrls = append(out.AttachmentUrls, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "related_ids":
			if in.IsNull() {
				in.Skip()
				out.RelatedIds = nil
			} else {
				in.Delim('[')
				if out.RelatedIds == nil {
					if !in.IsDelim(']') {
						out.RelatedIds = make([]string, 0, 4)
					} else {
						out.RelatedIds = []string{}
					}
				} else {
					out.RelatedIds = (out.RelatedIds)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.RelatedIds = append(out.RelatedIds, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(conversation.Button)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in, &*out.DefaultAction)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(conversation.Button)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in, &*v38)
					}
					out.Buttons = append(out.Buttons, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation14(out *jwriter.Writer, in conversation.ContentTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.Labels {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Availability))
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Price))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Currency))
	}
	if in.SalePrice != nil {
		const prefix string = ",\"sale_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.SalePrice))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Categories {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.AttachmentUrls) != 0 {
		const prefix string = ",\"attachment_urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.AttachmentUrls {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.RelatedIds) != 0 {
		const prefix string = ",\"related_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.RelatedIds {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out, *in.DefaultAction)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Buttons {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out, *v48)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation13(in *jlexer.Lexer, out *conversation.FormSubmit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "form_message_id":
			if in.IsNull() {
				in.Skip()
				out.FormMessageId = nil
			} else {
				if out.FormMessageId == nil {
					out.FormMessageId = new(string)
				}
				*out.FormMessageId = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*conversation.FormField, 0, 8)
					} else {
						out.Fields = []*conversation.FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *conversation.FormField
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(conversation.FormField)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation16(in, &*v49)
					}
					out.Fields = append(out.Fields, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation13(out *jwriter.Writer, in conversation.FormSubmit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FormMessageId != nil {
		const prefix string = ",\"form_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FormMessageId))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Fields {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation16(out, *v51)
				}
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation16(in *jlexer.Lexer, out *conversation.FormField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.Items = append(out.Items, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation16(out *jwriter.Writer, in conversation.FormField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.Items {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation12(in *jlexer.Lexer, out *conversation.Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*conversation.FormField, 0, 8)
					} else {
						out.Fields = []*conversation.FormField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *conversation.FormField
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(conversation.FormField)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation16(in, &*v55)
					}
					out.Fields = append(out.Fields, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "submit_url":
			if in.IsNull() {
				in.Skip()
				out.SubmitUrl = nil
			} else {
				if out.SubmitUrl == nil {
					out.SubmitUrl = new(string)
				}
				*out.SubmitUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation12(out *jwriter.Writer, in conversation.Form) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Fields {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation16(out, *v57)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SubmitUrl != nil {
		const prefix string = ",\"submit_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SubmitUrl))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation11(in *jlexer.Lexer, out *conversation.AskInfomationAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation11(out *jwriter.Writer, in conversation.AskInfomationAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation10(in *jlexer.Lexer, out *conversation.AskInfomation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			if in.IsNull() {
				in.Skip()
				out.Question = nil
			} else {
				if out.Question == nil {
					out.Question = new(string)
				}
				*out.Question = string(in.String())
			}
		case "input_type":
			if in.IsNull() {
				in.Skip()
				out.InputType = nil
			} else {
				if out.InputType == nil {
					out.InputType = new(string)
				}
				*out.InputType = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "answer":
			if in.IsNull() {
				in.Skip()
				out.Answer = nil
			} else {
				if out.Answer == nil {
					out.Answer = new(string)
				}
				*out.Answer = string(in.String())
			}
		case "answered":
			if in.IsNull() {
				in.Skip()
				out.Answered = nil
			} else {
				if out.Answered == nil {
					out.Answered = new(int64)
				}
				*out.Answered = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation10(out *jwriter.Writer, in conversation.AskInfomation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Question != nil {
		const prefix string = ",\"question\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Question))
	}
	if in.InputType != nil {
		const prefix string = ",\"input_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InputType))
	}
	if in.Key != nil {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Key))
	}
	if in.Answer != nil {
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Answer))
	}
	if in.Answered != nil {
		const prefix string = ",\"answered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Answered))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in *jlexer.Lexer, out *conversation.Button) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "content_id":
			if in.IsNull() {
				in.Skip()
				out.ContentId = nil
			} else {
				if out.ContentId == nil {
					out.ContentId = new(string)
				}
				*out.ContentId = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out *jwriter.Writer, in conversation.Button) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Payload))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.ContentId != nil {
		const prefix string = ",\"content_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContentId))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PhoneNumber))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderConversation8(in *jlexer.Lexer, out *conversation.GenericElementTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "subtitle":
			if in.IsNull() {
				in.Skip()
				out.Subtitle = nil
			} else {
				if out.Subtitle == nil {
					out.Subtitle = new(string)
				}
				*out.Subtitle = string(in.String())
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(conversation.Button)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in, &*out.DefaultAction)
			}
		case "buttons":
			if in.IsNull() {
				in.Skip()
				out.Buttons = nil
			} else {
				in.Delim('[')
				if out.Buttons == nil {
					if !in.IsDelim(']') {
						out.Buttons = make([]*conversation.Button, 0, 8)
					} else {
						out.Buttons = []*conversation.Button{}
					}
				} else {
					out.Buttons = (out.Buttons)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *conversation.Button
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(conversation.Button)
						}
						easyjsonB4e27493DecodeGithubComSubizHeaderConversation9(in, &*v58)
					}
					out.Buttons = append(out.Buttons, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderConversation8(out *jwriter.Writer, in conversation.GenericElementTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Subtitle != nil {
		const prefix string = ",\"subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Subtitle))
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out, *in.DefaultAction)
	}
	if len(in.Buttons) != 0 {
		const prefix string = ",\"buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Buttons {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					easyjsonB4e27493EncodeGithubComSubizHeaderConversation9(out, *v60)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderCommon(in *jlexer.Lexer, out *common.Context) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventId = string(in.String())
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				out.State = in.Bytes()
			}
		case "node":
			out.Node = string(in.String())
		case "reply_topic":
			out.ReplyTopic = string(in.String())
		case "credential":
			if in.IsNull() {
				in.Skip()
				out.Credential = nil
			} else {
				if out.Credential == nil {
					out.Credential = new(auth.Credential)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderAuth(in, &*out.Credential)
			}
		case "tracing":
			if in.IsNull() {
				in.Skip()
				out.Tracing = nil
			} else {
				out.Tracing = in.Bytes()
			}
		case "reply_key":
			out.ReplyKey = string(in.String())
		case "by_device":
			if in.IsNull() {
				in.Skip()
				out.ByDevice = nil
			} else {
				if out.ByDevice == nil {
					out.ByDevice = new(common.Device)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderCommon1(in, &*out.ByDevice)
			}
		case "topic":
			out.Topic = string(in.String())
		case "partition":
			out.Partition = int32(in.Int32())
		case "offset":
			out.Offset = int64(in.Int64())
		case "term":
			out.Term = uint64(in.Uint64())
		case "router_topic":
			out.RouterTopic = string(in.String())
		case "idempotency_key":
			out.IdempotencyKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderCommon(out *jwriter.Writer, in common.Context) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EventId != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventId))
	}
	if len(in.State) != 0 {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.State)
	}
	if in.Node != "" {
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Node))
	}
	if in.ReplyTopic != "" {
		const prefix string = ",\"reply_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReplyTopic))
	}
	if in.Credential != nil {
		const prefix string = ",\"credential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderAuth(out, *in.Credential)
	}
	if len(in.Tracing) != 0 {
		const prefix string = ",\"tracing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Tracing)
	}
	if in.ReplyKey != "" {
		const prefix string = ",\"reply_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReplyKey))
	}
	if in.ByDevice != nil {
		const prefix string = ",\"by_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderCommon1(out, *in.ByDevice)
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.Partition != 0 {
		const prefix string = ",\"partition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Partition))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Offset))
	}
	if in.Term != 0 {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Term))
	}
	if in.RouterTopic != "" {
		const prefix string = ",\"router_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RouterTopic))
	}
	if in.IdempotencyKey != "" {
		const prefix string = ",\"idempotency_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdempotencyKey))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderCommon1(in *jlexer.Lexer, out *common.Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "screen_resolution":
			out.ScreenResolution = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "source_referrer":
			out.SourceReferrer = string(in.String())
		case "ga_tracking_ids":
			if in.IsNull() {
				in.Skip()
				out.GaTrackingIds = nil
			} else {
				in.Delim('[')
				if out.GaTrackingIds == nil {
					if !in.IsDelim(']') {
						out.GaTrackingIds = make([]string, 0, 4)
					} else {
						out.GaTrackingIds = []string{}
					}
				} else {
					out.GaTrackingIds = (out.GaTrackingIds)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.GaTrackingIds = append(out.GaTrackingIds, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderCommon1(out *jwriter.Writer, in common.Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screen_resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.SourceReferrer != "" {
		const prefix string = ",\"source_referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceReferrer))
	}
	if len(in.GaTrackingIds) != 0 {
		const prefix string = ",\"ga_tracking_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.GaTrackingIds {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderAuth(in *jlexer.Lexer, out *auth.Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "issuer":
			out.Issuer = string(in.String())
		case "type":
			out.Type = auth.Type(in.Int32())
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(auth.Permission)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderAuth1(in, &*out.Perm)
			}
		case "client_id":
			out.ClientId = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderAuth(out *jwriter.Writer, in auth.Credential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderAuth1(out, *in.Perm)
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.AvatarUrl != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarUrl))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeaderAuth1(in *jlexer.Lexer, out *auth.Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = int32(in.Int32())
		case "agent":
			out.Agent = int32(in.Int32())
		case "agent_password":
			out.AgentPassword = int32(in.Int32())
		case "permission":
			out.Permission = int32(in.Int32())
		case "agent_group":
			out.AgentGroup = int32(in.Int32())
		case "segmentation":
			out.Segmentation = int32(in.Int32())
		case "client":
			out.Client = int32(in.Int32())
		case "rule":
			out.Rule = int32(in.Int32())
		case "conversation":
			out.Conversation = int32(in.Int32())
		case "integration":
			out.Integration = int32(in.Int32())
		case "canned_response":
			out.CannedResponse = int32(in.Int32())
		case "tag":
			out.Tag = int32(in.Int32())
		case "whitelist_ip":
			out.WhitelistIp = int32(in.Int32())
		case "whitelist_user":
			out.WhitelistUser = int32(in.Int32())
		case "whitelist_domain":
			out.WhitelistDomain = int32(in.Int32())
		case "widget":
			out.Widget = int32(in.Int32())
		case "subscription":
			out.Subscription = int32(in.Int32())
		case "invoice":
			out.Invoice = int32(in.Int32())
		case "payment_method":
			out.PaymentMethod = int32(in.Int32())
		case "bill":
			out.Bill = int32(in.Int32())
		case "payment_log":
			out.PaymentLog = int32(in.Int32())
		case "payment_comment":
			out.PaymentComment = int32(in.Int32())
		case "user":
			out.User = int32(in.Int32())
		case "automation":
			out.Automation = int32(in.Int32())
		case "ping":
			out.Ping = int32(in.Int32())
		case "attribute":
			out.Attribute = int32(in.Int32())
		case "agent_notification":
			out.AgentNotification = int32(in.Int32())
		case "conversation_export":
			out.ConversationExport = int32(in.Int32())
		case "conversation_report":
			out.ConversationReport = int32(in.Int32())
		case "content":
			out.Content = int32(in.Int32())
		case "pipeline":
			out.Pipeline = int32(in.Int32())
		case "currency":
			out.Currency = int32(in.Int32())
		case "service_level_agreement":
			out.ServiceLevelAgreement = int32(in.Int32())
		case "message_template":
			out.MessageTemplate = int32(in.Int32())
		case "agent_presence":
			out.AgentPresence = int32(in.Int32())
		case "agent_preference":
			out.AgentPreference = int32(in.Int32())
		case "promotion_code":
			out.PromotionCode = int32(in.Int32())
		case "referral":
			out.Referral = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeaderAuth1(out *jwriter.Writer, in auth.Permission) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Account))
	}
	if in.Agent != 0 {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Agent))
	}
	if in.AgentPassword != 0 {
		const prefix string = ",\"agent_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPassword))
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Permission))
	}
	if in.AgentGroup != 0 {
		const prefix string = ",\"agent_group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentGroup))
	}
	if in.Segmentation != 0 {
		const prefix string = ",\"segmentation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Segmentation))
	}
	if in.Client != 0 {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Client))
	}
	if in.Rule != 0 {
		const prefix string = ",\"rule\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Rule))
	}
	if in.Conversation != 0 {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Conversation))
	}
	if in.Integration != 0 {
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Integration))
	}
	if in.CannedResponse != 0 {
		const prefix string = ",\"canned_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.CannedResponse))
	}
	if in.Tag != 0 {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Tag))
	}
	if in.WhitelistIp != 0 {
		const prefix string = ",\"whitelist_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistIp))
	}
	if in.WhitelistUser != 0 {
		const prefix string = ",\"whitelist_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistUser))
	}
	if in.WhitelistDomain != 0 {
		const prefix string = ",\"whitelist_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistDomain))
	}
	if in.Widget != 0 {
		const prefix string = ",\"widget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Widget))
	}
	if in.Subscription != 0 {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Subscription))
	}
	if in.Invoice != 0 {
		const prefix string = ",\"invoice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Invoice))
	}
	if in.PaymentMethod != 0 {
		const prefix string = ",\"payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentMethod))
	}
	if in.Bill != 0 {
		const prefix string = ",\"bill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Bill))
	}
	if in.PaymentLog != 0 {
		const prefix string = ",\"payment_log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentLog))
	}
	if in.PaymentComment != 0 {
		const prefix string = ",\"payment_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentComment))
	}
	if in.User != 0 {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.User))
	}
	if in.Automation != 0 {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Automation))
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ping))
	}
	if in.Attribute != 0 {
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Attribute))
	}
	if in.AgentNotification != 0 {
		const prefix string = ",\"agent_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentNotification))
	}
	if in.ConversationExport != 0 {
		const prefix string = ",\"conversation_export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationExport))
	}
	if in.ConversationReport != 0 {
		const prefix string = ",\"conversation_report\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationReport))
	}
	if in.Content != 0 {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Content))
	}
	if in.Pipeline != 0 {
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Pipeline))
	}
	if in.Currency != 0 {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Currency))
	}
	if in.ServiceLevelAgreement != 0 {
		const prefix string = ",\"service_level_agreement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ServiceLevelAgreement))
	}
	if in.MessageTemplate != 0 {
		const prefix string = ",\"message_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MessageTemplate))
	}
	if in.AgentPresence != 0 {
		const prefix string = ",\"agent_presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPresence))
	}
	if in.AgentPreference != 0 {
		const prefix string = ",\"agent_preference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPreference))
	}
	if in.PromotionCode != 0 {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PromotionCode))
	}
	if in.Referral != 0 {
		const prefix string = ",\"referral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Referral))
	}
	out.RawByte('}')
}
func easyjsonB4e27493DecodeGithubComSubizHeader1(in *jlexer.Lexer, out *Setting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]*Action, 0, 8)
					} else {
						out.Actions = []*Action{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v70 *Action
					if in.IsNull() {
						in.Skip()
						v70 = nil
					} else {
						if v70 == nil {
							v70 = new(Action)
						}
						(*v70).UnmarshalEasyJSON(in)
					}
					out.Actions = append(out.Actions, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			out.Created = int64(in.Int64())
		case "updated":
			out.Updated = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeader1(out *jwriter.Writer, in Setting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.Actions {
				if v71 > 0 {
					out.RawByte(',')
				}
				if v72 == nil {
					out.RawString("null")
				} else {
					(*v72).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Updated != 0 {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Setting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB4e27493EncodeGithubComSubizHeader1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Setting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB4e27493EncodeGithubComSubizHeader1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Setting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB4e27493DecodeGithubComSubizHeader1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Setting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB4e27493DecodeGithubComSubizHeader1(l, v)
}
func easyjsonB4e27493DecodeGithubComSubizHeader2(in *jlexer.Lexer, out *LogUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeader2(out *jwriter.Writer, in LogUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB4e27493EncodeGithubComSubizHeader2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB4e27493EncodeGithubComSubizHeader2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB4e27493DecodeGithubComSubizHeader2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB4e27493DecodeGithubComSubizHeader2(l, v)
}
func easyjsonB4e27493DecodeGithubComSubizHeader3(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action_type":
			out.ActionType = string(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(conversation.Message)
				}
				easyjsonB4e27493DecodeGithubComSubizHeaderConversation(in, &*out.Message)
			}
		case "typing":
			out.Typing = string(in.String())
		case "sleep":
			out.Sleep = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB4e27493EncodeGithubComSubizHeader3(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ActionType != "" {
		const prefix string = ",\"action_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActionType))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB4e27493EncodeGithubComSubizHeaderConversation(out, *in.Message)
	}
	if in.Typing != "" {
		const prefix string = ",\"typing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Typing))
	}
	if in.Sleep != 0 {
		const prefix string = ",\"sleep\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Sleep))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB4e27493EncodeGithubComSubizHeader3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB4e27493EncodeGithubComSubizHeader3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB4e27493DecodeGithubComSubizHeader3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB4e27493DecodeGithubComSubizHeader3(l, v)
}
