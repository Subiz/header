// Code generated by protoc-gen-go.
// source: notibox/notibox.proto
// DO NOT EDIT!

/*
Package notibox is a generated protocol buffer package.

notibox store all notification in subiz
it DOESN'T take care of pushing notification to user

It is generated from these files:
	notibox/notibox.proto

It has these top-level messages:
	Notification
	Empty
	UserId
	ListRequest
	Notifications
	SeenRequest
	SubscribeRequest
	NumberOfUnseen
	AgentConfiguration
	NotificationConfig
*/
package notibox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotiType int32

const (
	NotiType_ChatUpdate         NotiType = 0
	NotiType_SystemMaintainance NotiType = 2
	NotiType_RuleUpdate         NotiType = 3
	NotiType_AccountUpdate      NotiType = 4
)

var NotiType_name = map[int32]string{
	0: "ChatUpdate",
	2: "SystemMaintainance",
	3: "RuleUpdate",
	4: "AccountUpdate",
}
var NotiType_value = map[string]int32{
	"ChatUpdate":         0,
	"SystemMaintainance": 2,
	"RuleUpdate":         3,
	"AccountUpdate":      4,
}

func (x NotiType) String() string {
	return proto.EnumName(NotiType_name, int32(x))
}
func (NotiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Notification represent an user's notification
type Notification struct {
	// Id of notification
	// string Id = 1;
	Id    string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	Event string `protobuf:"bytes,2,opt,name=Event,json=event" json:"Event"`
	// CreatedTime capture the time notification created (RFC3339 format)
	CreatedTime string `protobuf:"bytes,5,opt,name=CreatedTime,json=createdTime" json:"CreatedTime"`
	Payload     string `protobuf:"bytes,7,opt,name=Payload,json=payload" json:"Payload"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Notification) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *Notification) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserId struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserId) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UserId) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListRequest struct {
	AccountId   string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	Limit       int32  `protobuf:"varint,3,opt,name=Limit,json=limit" json:"Limit"`
	StartNotiId string `protobuf:"bytes,4,opt,name=StartNotiId,json=startNotiId" json:"StartNotiId"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetStartNotiId() string {
	if m != nil {
		return m.StartNotiId
	}
	return ""
}

type Notifications struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=Notifications,json=notifications" json:"Notifications"`
}

func (m *Notifications) Reset()                    { *m = Notifications{} }
func (m *Notifications) String() string            { return proto.CompactTextString(m) }
func (*Notifications) ProtoMessage()               {}
func (*Notifications) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Notifications) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type SeenRequest struct {
	AccountId       string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	NotificationIds []string `protobuf:"bytes,2,rep,name=NotificationIds,json=notificationIds" json:"NotificationIds"`
	UserId          string   `protobuf:"bytes,3,opt,name=UserId,json=userId" json:"UserId"`
}

func (m *SeenRequest) Reset()                    { *m = SeenRequest{} }
func (m *SeenRequest) String() string            { return proto.CompactTextString(m) }
func (*SeenRequest) ProtoMessage()               {}
func (*SeenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SeenRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *SeenRequest) GetNotificationIds() []string {
	if m != nil {
		return m.NotificationIds
	}
	return nil
}

func (m *SeenRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SubscribeRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId"`
	Topic  string `protobuf:"bytes,2,opt,name=Topic,json=topic" json:"Topic"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SubscribeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type NumberOfUnseen struct {
	NumUnseen int64 `protobuf:"varint,1,opt,name=NumUnseen,json=numUnseen" json:"NumUnseen"`
}

func (m *NumberOfUnseen) Reset()                    { *m = NumberOfUnseen{} }
func (m *NumberOfUnseen) String() string            { return proto.CompactTextString(m) }
func (*NumberOfUnseen) ProtoMessage()               {}
func (*NumberOfUnseen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NumberOfUnseen) GetNumUnseen() int64 {
	if m != nil {
		return m.NumUnseen
	}
	return 0
}

// TODO: this should move to noti
type AgentConfiguration struct {
	NotificationSound bool                `protobuf:"varint,1,opt,name=NotificationSound,json=notificationSound" json:"NotificationSound"`
	EmailNoti         *NotificationConfig `protobuf:"bytes,2,opt,name=EmailNoti,json=emailNoti" json:"EmailNoti"`
	DesktopNoti       *NotificationConfig `protobuf:"bytes,3,opt,name=DesktopNoti,json=desktopNoti" json:"DesktopNoti"`
	MobileNoti        *NotificationConfig `protobuf:"bytes,4,opt,name=MobileNoti,json=mobileNoti" json:"MobileNoti"`
}

func (m *AgentConfiguration) Reset()                    { *m = AgentConfiguration{} }
func (m *AgentConfiguration) String() string            { return proto.CompactTextString(m) }
func (*AgentConfiguration) ProtoMessage()               {}
func (*AgentConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AgentConfiguration) GetNotificationSound() bool {
	if m != nil {
		return m.NotificationSound
	}
	return false
}

func (m *AgentConfiguration) GetEmailNoti() *NotificationConfig {
	if m != nil {
		return m.EmailNoti
	}
	return nil
}

func (m *AgentConfiguration) GetDesktopNoti() *NotificationConfig {
	if m != nil {
		return m.DesktopNoti
	}
	return nil
}

func (m *AgentConfiguration) GetMobileNoti() *NotificationConfig {
	if m != nil {
		return m.MobileNoti
	}
	return nil
}

type NotificationConfig struct {
	AllActivity         bool `protobuf:"varint,1,opt,name=AllActivity,json=allActivity" json:"AllActivity"`
	MaintainenceMessage bool `protobuf:"varint,2,opt,name=MaintainenceMessage,json=maintainenceMessage" json:"MaintainenceMessage"`
	DirectMessage       bool `protobuf:"varint,3,opt,name=DirectMessage,json=directMessage" json:"DirectMessage"`
	News                bool `protobuf:"varint,4,opt,name=News,json=news" json:"News"`
	Nothing             bool `protobuf:"varint,5,opt,name=Nothing,json=nothing" json:"Nothing"`
}

func (m *NotificationConfig) Reset()                    { *m = NotificationConfig{} }
func (m *NotificationConfig) String() string            { return proto.CompactTextString(m) }
func (*NotificationConfig) ProtoMessage()               {}
func (*NotificationConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NotificationConfig) GetAllActivity() bool {
	if m != nil {
		return m.AllActivity
	}
	return false
}

func (m *NotificationConfig) GetMaintainenceMessage() bool {
	if m != nil {
		return m.MaintainenceMessage
	}
	return false
}

func (m *NotificationConfig) GetDirectMessage() bool {
	if m != nil {
		return m.DirectMessage
	}
	return false
}

func (m *NotificationConfig) GetNews() bool {
	if m != nil {
		return m.News
	}
	return false
}

func (m *NotificationConfig) GetNothing() bool {
	if m != nil {
		return m.Nothing
	}
	return false
}

func init() {
	proto.RegisterType((*Notification)(nil), "notibox.Notification")
	proto.RegisterType((*Empty)(nil), "notibox.Empty")
	proto.RegisterType((*UserId)(nil), "notibox.UserId")
	proto.RegisterType((*ListRequest)(nil), "notibox.ListRequest")
	proto.RegisterType((*Notifications)(nil), "notibox.Notifications")
	proto.RegisterType((*SeenRequest)(nil), "notibox.SeenRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "notibox.SubscribeRequest")
	proto.RegisterType((*NumberOfUnseen)(nil), "notibox.NumberOfUnseen")
	proto.RegisterType((*AgentConfiguration)(nil), "notibox.AgentConfiguration")
	proto.RegisterType((*NotificationConfig)(nil), "notibox.NotificationConfig")
	proto.RegisterEnum("notibox.NotiType", NotiType_name, NotiType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notifica service

type NotificaClient interface {
	// Create create notifications for multiple users that listen to
	// specific topics
	// only kafka can upsert
	Upsert(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error)
	// List notifications specific user
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error)
	// Seen mark noti as seen, some noti will disappear, some wil stay
	Seen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error)
	CountUnseen(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*NumberOfUnseen, error)
}

type notificaClient struct {
	cc *grpc.ClientConn
}

func NewNotificaClient(cc *grpc.ClientConn) NotificaClient {
	return &notificaClient{cc}
}

func (c *notificaClient) Upsert(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notibox.Notifica/Upsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := grpc.Invoke(ctx, "/notibox.Notifica/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) Seen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notibox.Notifica/Seen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) CountUnseen(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*NumberOfUnseen, error) {
	out := new(NumberOfUnseen)
	err := grpc.Invoke(ctx, "/notibox.Notifica/CountUnseen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifica service

type NotificaServer interface {
	// Create create notifications for multiple users that listen to
	// specific topics
	// only kafka can upsert
	Upsert(context.Context, *Notification) (*Empty, error)
	// List notifications specific user
	List(context.Context, *ListRequest) (*Notifications, error)
	// Seen mark noti as seen, some noti will disappear, some wil stay
	Seen(context.Context, *SeenRequest) (*Empty, error)
	CountUnseen(context.Context, *UserId) (*NumberOfUnseen, error)
}

func RegisterNotificaServer(s *grpc.Server, srv NotificaServer) {
	s.RegisterService(&_Notifica_serviceDesc, srv)
}

func _Notifica_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.Notifica/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Upsert(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.Notifica/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_Seen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Seen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.Notifica/Seen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Seen(ctx, req.(*SeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_CountUnseen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).CountUnseen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.Notifica/CountUnseen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).CountUnseen(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notibox.Notifica",
	HandlerType: (*NotificaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _Notifica_Upsert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Notifica_List_Handler,
		},
		{
			MethodName: "Seen",
			Handler:    _Notifica_Seen_Handler,
		},
		{
			MethodName: "CountUnseen",
			Handler:    _Notifica_CountUnseen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notibox/notibox.proto",
}

func init() { proto.RegisterFile("notibox/notibox.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6a, 0xdb, 0x4a,
	0x10, 0xb6, 0x2c, 0xff, 0x8e, 0x8e, 0x9d, 0x64, 0xf3, 0x73, 0x44, 0xce, 0xb9, 0x30, 0xe2, 0x5c,
	0x98, 0x43, 0x71, 0xdb, 0x14, 0x0a, 0x21, 0xb4, 0xd4, 0x38, 0xb9, 0x30, 0x24, 0x6e, 0x91, 0xe3,
	0x07, 0x58, 0x4b, 0x13, 0x67, 0xa9, 0xb5, 0xab, 0x6a, 0x57, 0x49, 0x4d, 0x5f, 0xad, 0x0f, 0xd3,
	0xd7, 0xe8, 0x5d, 0xd9, 0x95, 0x64, 0x2b, 0x89, 0x21, 0xa5, 0x57, 0xcb, 0x7c, 0xf3, 0xcd, 0xcf,
	0x37, 0xcc, 0x2c, 0x1c, 0x72, 0xa1, 0xd8, 0x5c, 0x7c, 0x7d, 0x99, 0xbf, 0x83, 0x38, 0x11, 0x4a,
	0x90, 0x66, 0x6e, 0x7a, 0x31, 0xfc, 0x35, 0x11, 0x8a, 0xdd, 0xb0, 0x80, 0x2a, 0x26, 0x38, 0xe9,
	0x42, 0x75, 0x1c, 0xba, 0x56, 0xcf, 0xea, 0xb7, 0xfd, 0x2a, 0x0b, 0xc9, 0x01, 0xd4, 0x2f, 0xee,
	0x90, 0x2b, 0xb7, 0x6a, 0xa0, 0x3a, 0x6a, 0x83, 0xf4, 0xc0, 0x19, 0x25, 0x48, 0x15, 0x86, 0xd7,
	0x2c, 0x42, 0xb7, 0x6e, 0x7c, 0x4e, 0xb0, 0x81, 0x88, 0x0b, 0xcd, 0x4f, 0x74, 0xb5, 0x14, 0x34,
	0x74, 0x9b, 0xc6, 0xdb, 0x8c, 0x33, 0xd3, 0x6b, 0x42, 0xfd, 0x22, 0x8a, 0xd5, 0xca, 0x7b, 0x0f,
	0x8d, 0x99, 0xc4, 0x64, 0x1c, 0x92, 0x7f, 0xa1, 0x3d, 0x0c, 0x02, 0x91, 0x72, 0xb5, 0xae, 0xdd,
	0xa6, 0x05, 0x40, 0x8e, 0x0a, 0x5e, 0xde, 0x43, 0x23, 0x35, 0x96, 0xf7, 0x0d, 0x9c, 0x4b, 0x26,
	0x95, 0x8f, 0x5f, 0x52, 0x94, 0xea, 0xcf, 0x92, 0x68, 0x7d, 0x97, 0x2c, 0x62, 0xca, 0xb5, 0x7b,
	0x56, 0xbf, 0xee, 0xd7, 0x97, 0xda, 0xd0, 0xfa, 0xa6, 0x8a, 0x26, 0x4a, 0x8f, 0x66, 0x1c, 0xba,
	0xb5, 0x4c, 0x9f, 0xdc, 0x40, 0xde, 0x25, 0x74, 0xca, 0x73, 0x93, 0xe4, 0xec, 0x11, 0xe0, 0x5a,
	0x3d, 0xbb, 0xef, 0x9c, 0x1c, 0x0e, 0x8a, 0xc1, 0x97, 0xbd, 0x7e, 0x87, 0x97, 0xb9, 0x5e, 0x04,
	0xce, 0x14, 0x91, 0xff, 0x9e, 0x94, 0x3e, 0xec, 0x94, 0x73, 0x8d, 0x43, 0xe9, 0x56, 0x7b, 0x76,
	0xbf, 0xed, 0xef, 0xf0, 0x87, 0x70, 0x49, 0xb4, 0xfd, 0x60, 0x72, 0x1f, 0x60, 0x77, 0x9a, 0xce,
	0x65, 0x90, 0xb0, 0x39, 0x16, 0x35, 0x37, 0x5c, 0xeb, 0xf1, 0x80, 0xae, 0x45, 0xcc, 0x82, 0x62,
	0x01, 0x94, 0x36, 0xbc, 0x01, 0x74, 0x27, 0x69, 0x34, 0xc7, 0xe4, 0xe3, 0xcd, 0x8c, 0x4b, 0x44,
	0xae, 0x7b, 0x9e, 0xa4, 0x51, 0x66, 0x98, 0x14, 0xb6, 0xdf, 0xe6, 0x05, 0xe0, 0xfd, 0xb4, 0x80,
	0x0c, 0x17, 0xc8, 0xd5, 0x48, 0xf0, 0x1b, 0xb6, 0x48, 0x93, 0x6c, 0xdb, 0x5e, 0xc0, 0x5e, 0x59,
	0xca, 0x54, 0xa4, 0x3c, 0xab, 0xdf, 0xf2, 0xf7, 0xf8, 0x63, 0x07, 0x39, 0x85, 0xf6, 0x45, 0x44,
	0xd9, 0x52, 0x87, 0x98, 0x76, 0x9c, 0x93, 0x7f, 0xb6, 0x8e, 0x37, 0x2b, 0xe2, 0xb7, 0xb1, 0x60,
	0x93, 0x77, 0xe0, 0x9c, 0xa3, 0xfc, 0xac, 0x44, 0x6c, 0x82, 0xed, 0xe7, 0x83, 0x9d, 0x70, 0xc3,
	0x27, 0x67, 0x00, 0x57, 0x62, 0xce, 0x96, 0x68, 0xa2, 0x6b, 0xcf, 0x47, 0x43, 0xb4, 0xa6, 0x7b,
	0xdf, 0x2d, 0x20, 0x4f, 0x29, 0x7a, 0xc7, 0x86, 0xcb, 0xe5, 0x30, 0x50, 0xec, 0x8e, 0xa9, 0x55,
	0xae, 0xda, 0xa1, 0x1b, 0x88, 0xbc, 0x82, 0xfd, 0x2b, 0xca, 0xb8, 0xa2, 0x8c, 0x23, 0x0f, 0xf0,
	0x0a, 0xa5, 0xa4, 0x0b, 0x34, 0xca, 0x5b, 0xfe, 0x7e, 0xf4, 0xd4, 0x45, 0xfe, 0x83, 0xce, 0x39,
	0x4b, 0x30, 0x50, 0x05, 0xd7, 0x36, 0xdc, 0x4e, 0x58, 0x06, 0x09, 0x81, 0xda, 0x04, 0xef, 0xa5,
	0xd1, 0xd1, 0xf2, 0x6b, 0x1c, 0xef, 0xa5, 0xbe, 0xd7, 0x89, 0x50, 0xb7, 0x8c, 0x2f, 0xcc, 0x35,
	0xb7, 0x7c, 0xfd, 0x43, 0x68, 0xf3, 0xff, 0x19, 0xb4, 0x74, 0xf7, 0xd7, 0xab, 0x18, 0x49, 0x17,
	0x60, 0x74, 0x4b, 0xd5, 0x2c, 0x0e, 0xa9, 0xc2, 0xdd, 0x0a, 0x39, 0x02, 0x32, 0x5d, 0x49, 0x85,
	0x51, 0xd1, 0x27, 0xe5, 0x01, 0xee, 0x56, 0x35, 0xcf, 0x4f, 0x97, 0x98, 0xf3, 0x6c, 0xb2, 0x07,
	0x9d, 0x7c, 0xa1, 0x73, 0xa8, 0x76, 0xf2, 0xc3, 0xca, 0xf2, 0xea, 0xa9, 0x90, 0xd7, 0xd0, 0x98,
	0xc5, 0x12, 0x13, 0x45, 0xb6, 0xdf, 0xcb, 0x71, 0x77, 0x0d, 0x67, 0x7f, 0x47, 0x85, 0xbc, 0x85,
	0x9a, 0xbe, 0x7e, 0x72, 0xb0, 0xf6, 0x94, 0x3e, 0x83, 0xe3, 0xa3, 0xad, 0x69, 0xa4, 0x57, 0x21,
	0x03, 0xa8, 0xe9, 0x53, 0x2b, 0xc5, 0x95, 0x2e, 0x6f, 0x4b, 0x9d, 0x53, 0x70, 0x46, 0xa6, 0xf1,
	0x6c, 0xcd, 0x77, 0xd6, 0x84, 0xec, 0x5a, 0x8e, 0xff, 0xde, 0x54, 0x7a, 0x70, 0x10, 0x5e, 0x65,
	0xde, 0x30, 0x7f, 0xed, 0x9b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xba, 0x7e, 0xb2, 0x84,
	0x05, 0x00, 0x00,
}
