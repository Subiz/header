// Code generated by protoc-gen-go.
// source: notifica/notifica.proto
// DO NOT EDIT!

/*
Package notifica is a generated protocol buffer package.

It is generated from these files:
	notifica/notifica.proto

It has these top-level messages:
	NotiEvent
	Notification
	Empty
	Id
	ListRequest
	Notifications
	SeenRequest
	SubscribeMessage
	FindRequest
	AppNotification
*/
package notifica

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_OK           ErrorCode = 0
	ErrorCode_FINDNOTFOUND ErrorCode = 1404
)

var ErrorCode_name = map[int32]string{
	0:    "OK",
	1404: "FINDNOTFOUND",
}
var ErrorCode_value = map[string]int32{
	"OK":           0,
	"FINDNOTFOUND": 1404,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NotiEvent struct {
	UserIds []string `protobuf:"bytes,1,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
	Id      string   `protobuf:"bytes,6,opt,name=Id,json=id" json:"Id,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=Type,json=type" json:"Type,omitempty"`
	CTime   string   `protobuf:"bytes,5,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
}

func (m *NotiEvent) Reset()                    { *m = NotiEvent{} }
func (m *NotiEvent) String() string            { return proto.CompactTextString(m) }
func (*NotiEvent) ProtoMessage()               {}
func (*NotiEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NotiEvent) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *NotiEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotiEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotiEvent) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

type Notification struct {
	Id             string   `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Content        string   `protobuf:"bytes,2,opt,name=Content,json=content" json:"Content,omitempty"`
	RequiredTopics []string `protobuf:"bytes,3,rep,name=RequiredTopics,json=requiredTopics" json:"RequiredTopics,omitempty"`
	Type           string   `protobuf:"bytes,4,opt,name=Type,json=type" json:"Type,omitempty"`
	CTime          string   `protobuf:"bytes,5,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Notification) GetRequiredTopics() []string {
	if m != nil {
		return m.RequiredTopics
	}
	return nil
}

func (m *Notification) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Notification) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Limit   int32  `protobuf:"varint,2,opt,name=Limit,json=limit" json:"Limit,omitempty"`
	StartId int32  `protobuf:"varint,3,opt,name=StartId,json=startId" json:"StartId,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetStartId() int32 {
	if m != nil {
		return m.StartId
	}
	return 0
}

type Notifications struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=Notifications,json=notifications" json:"Notifications,omitempty"`
}

func (m *Notifications) Reset()                    { *m = Notifications{} }
func (m *Notifications) String() string            { return proto.CompactTextString(m) }
func (*Notifications) ProtoMessage()               {}
func (*Notifications) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Notifications) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type SeenRequest struct {
	NotificationIds []string `protobuf:"bytes,1,rep,name=NotificationIds,json=notificationIds" json:"NotificationIds,omitempty"`
	UserId          string   `protobuf:"bytes,3,opt,name=UserId,json=userId" json:"UserId,omitempty"`
}

func (m *SeenRequest) Reset()                    { *m = SeenRequest{} }
func (m *SeenRequest) String() string            { return proto.CompactTextString(m) }
func (*SeenRequest) ProtoMessage()               {}
func (*SeenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SeenRequest) GetNotificationIds() []string {
	if m != nil {
		return m.NotificationIds
	}
	return nil
}

func (m *SeenRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SubscribeMessage struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Topic  string `protobuf:"bytes,2,opt,name=Topic,json=topic" json:"Topic,omitempty"`
}

func (m *SubscribeMessage) Reset()                    { *m = SubscribeMessage{} }
func (m *SubscribeMessage) String() string            { return proto.CompactTextString(m) }
func (*SubscribeMessage) ProtoMessage()               {}
func (*SubscribeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SubscribeMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SubscribeMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type FindRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Since  string `protobuf:"bytes,2,opt,name=Since,json=since" json:"Since,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FindRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

type AppNotification struct {
	Title   string `protobuf:"bytes,1,opt,name=Title,json=title" json:"Title,omitempty"`
	Body    string `protobuf:"bytes,2,opt,name=Body,json=body" json:"Body,omitempty"`
	IconUrl string `protobuf:"bytes,3,opt,name=IconUrl,json=iconUrl" json:"IconUrl,omitempty"`
	Payload string `protobuf:"bytes,4,opt,name=Payload,json=payload" json:"Payload,omitempty"`
}

func (m *AppNotification) Reset()                    { *m = AppNotification{} }
func (m *AppNotification) String() string            { return proto.CompactTextString(m) }
func (*AppNotification) ProtoMessage()               {}
func (*AppNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AppNotification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppNotification) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *AppNotification) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *AppNotification) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*NotiEvent)(nil), "notifica.NotiEvent")
	proto.RegisterType((*Notification)(nil), "notifica.Notification")
	proto.RegisterType((*Empty)(nil), "notifica.Empty")
	proto.RegisterType((*Id)(nil), "notifica.Id")
	proto.RegisterType((*ListRequest)(nil), "notifica.ListRequest")
	proto.RegisterType((*Notifications)(nil), "notifica.Notifications")
	proto.RegisterType((*SeenRequest)(nil), "notifica.SeenRequest")
	proto.RegisterType((*SubscribeMessage)(nil), "notifica.SubscribeMessage")
	proto.RegisterType((*FindRequest)(nil), "notifica.FindRequest")
	proto.RegisterType((*AppNotification)(nil), "notifica.AppNotification")
	proto.RegisterEnum("notifica.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notifica service

type NotificaClient interface {
	Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Id, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error)
	FindFirstNotiSince(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Notification, error)
	Seen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error)
	Unseen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*Empty, error)
	Unsubscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*Empty, error)
}

type notificaClient struct {
	cc *grpc.ClientConn
}

func NewNotificaClient(cc *grpc.ClientConn) NotificaClient {
	return &notificaClient{cc}
}

func (c *notificaClient) Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/notifica.Notifica/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := grpc.Invoke(ctx, "/notifica.Notifica/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) FindFirstNotiSince(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := grpc.Invoke(ctx, "/notifica.Notifica/FindFirstNotiSince", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) Seen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notifica.Notifica/Seen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) Unseen(ctx context.Context, in *SeenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notifica.Notifica/Unseen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) Subscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notifica.Notifica/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificaClient) Unsubscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notifica.Notifica/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifica service

type NotificaServer interface {
	Create(context.Context, *Notification) (*Id, error)
	List(context.Context, *ListRequest) (*Notifications, error)
	FindFirstNotiSince(context.Context, *FindRequest) (*Notification, error)
	Seen(context.Context, *SeenRequest) (*Empty, error)
	Unseen(context.Context, *SeenRequest) (*Empty, error)
	Subscribe(context.Context, *SubscribeMessage) (*Empty, error)
	Unsubscribe(context.Context, *SubscribeMessage) (*Empty, error)
}

func RegisterNotificaServer(s *grpc.Server, srv NotificaServer) {
	s.RegisterService(&_Notifica_serviceDesc, srv)
}

func _Notifica_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Create(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_FindFirstNotiSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).FindFirstNotiSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/FindFirstNotiSince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).FindFirstNotiSince(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_Seen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Seen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/Seen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Seen(ctx, req.(*SeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_Unseen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Unseen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/Unseen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Unseen(ctx, req.(*SeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Subscribe(ctx, req.(*SubscribeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifica_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificaServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifica.Notifica/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificaServer).Unsubscribe(ctx, req.(*SubscribeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifica.Notifica",
	HandlerType: (*NotificaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Notifica_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Notifica_List_Handler,
		},
		{
			MethodName: "FindFirstNotiSince",
			Handler:    _Notifica_FindFirstNotiSince_Handler,
		},
		{
			MethodName: "Seen",
			Handler:    _Notifica_Seen_Handler,
		},
		{
			MethodName: "Unseen",
			Handler:    _Notifica_Unseen_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Notifica_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Notifica_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifica/notifica.proto",
}

func init() { proto.RegisterFile("notifica/notifica.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0x1a, 0x3d,
	0x14, 0xe5, 0x67, 0x7e, 0xc2, 0x25, 0x09, 0x7c, 0x56, 0xbe, 0x64, 0xc4, 0x2a, 0xf2, 0x22, 0x42,
	0x5d, 0xa4, 0x11, 0xdd, 0x54, 0x6d, 0x16, 0x6d, 0x09, 0x48, 0xa3, 0x26, 0x50, 0x0d, 0xcc, 0xba,
	0x1a, 0xc6, 0x6e, 0x65, 0x09, 0xec, 0xa9, 0x6d, 0x2a, 0xcd, 0x2b, 0xf4, 0x1d, 0xfa, 0xa6, 0x5d,
	0x54, 0x9e, 0x19, 0xc0, 0xa0, 0xa4, 0x7f, 0x3b, 0xce, 0xb1, 0xef, 0xf5, 0xb9, 0xe7, 0x1e, 0x06,
	0x2e, 0xb8, 0xd0, 0xec, 0x13, 0x4b, 0x93, 0xe7, 0x9b, 0x1f, 0xd7, 0x99, 0x14, 0x5a, 0xa0, 0xa3,
	0x0d, 0xc6, 0x1f, 0xa1, 0x35, 0x11, 0x9a, 0x8d, 0xbe, 0x52, 0xae, 0x51, 0x00, 0x7e, 0xac, 0xa8,
	0x0c, 0x89, 0x0a, 0xea, 0x97, 0xcd, 0x7e, 0x2b, 0xf2, 0xd7, 0x25, 0x44, 0xa7, 0xd0, 0x08, 0x49,
	0xe0, 0x5d, 0xd6, 0xfb, 0xad, 0xa8, 0xc1, 0x08, 0x42, 0xe0, 0xcc, 0xf3, 0x8c, 0x06, 0xcd, 0x82,
	0x71, 0x74, 0x9e, 0x51, 0x74, 0x06, 0xee, 0x70, 0xce, 0x56, 0x34, 0x70, 0x0b, 0xd2, 0x4d, 0x0d,
	0xc0, 0xdf, 0xea, 0x70, 0x3c, 0xa9, 0x5e, 0xd3, 0x4c, 0xf0, 0xaa, 0x55, 0x7d, 0xdb, 0x2a, 0x00,
	0x7f, 0x28, 0xb8, 0xa6, 0x5c, 0x07, 0x8d, 0x82, 0xf4, 0xd3, 0x12, 0xa2, 0x2b, 0x38, 0x8d, 0xe8,
	0x97, 0x35, 0x93, 0x94, 0xcc, 0x45, 0xc6, 0x52, 0x15, 0x34, 0x0b, 0x55, 0xa7, 0x72, 0x8f, 0xdd,
	0x8a, 0x71, 0x7e, 0x2b, 0xc6, 0x07, 0x77, 0xb4, 0xca, 0x74, 0x8e, 0xcf, 0x8c, 0x88, 0x43, 0x29,
	0x38, 0x86, 0xf6, 0x3d, 0x53, 0xda, 0x3c, 0x4a, 0x95, 0x46, 0xe7, 0xe0, 0x95, 0x76, 0x54, 0x57,
	0xbc, 0xd2, 0x0d, 0xd3, 0xfb, 0x9e, 0xad, 0x58, 0xa9, 0xd7, 0x8d, 0xdc, 0xa5, 0x01, 0x66, 0x8e,
	0x99, 0x4e, 0xa4, 0x0e, 0x49, 0xe1, 0x8a, 0x1b, 0xf9, 0xaa, 0x84, 0xf8, 0x01, 0x4e, 0x6c, 0x07,
	0x14, 0xba, 0x3d, 0x20, 0x0a, 0xb7, 0xdb, 0x83, 0xf3, 0xeb, 0xed, 0x9a, 0xec, 0xe3, 0xe8, 0x84,
	0xdb, 0x97, 0xf1, 0x14, 0xda, 0x33, 0x4a, 0xf9, 0x46, 0x65, 0x1f, 0x3a, 0xf6, 0xed, 0xdd, 0xf2,
	0x3a, 0x7c, 0x9f, 0xb6, 0xe6, 0x69, 0xda, 0xf3, 0xe0, 0x37, 0xd0, 0x9d, 0xad, 0x17, 0x2a, 0x95,
	0x6c, 0x41, 0x1f, 0xa8, 0x52, 0xc9, 0x67, 0xfa, 0xab, 0xd9, 0x0b, 0xd7, 0xab, 0x5d, 0xb9, 0xda,
	0x00, 0xfc, 0x1a, 0xda, 0x63, 0xc6, 0xc9, 0x1f, 0x18, 0x37, 0x63, 0x3c, 0xa5, 0x9b, 0x62, 0x65,
	0x00, 0x16, 0xd0, 0x79, 0x9b, 0x65, 0x7b, 0x19, 0x31, 0xaf, 0x30, 0xbd, 0xa4, 0x55, 0xbd, 0xab,
	0x0d, 0x30, 0x7b, 0x7e, 0x27, 0x48, 0x5e, 0x55, 0x3b, 0x0b, 0x41, 0x72, 0xe3, 0x7a, 0x98, 0x0a,
	0x1e, 0xcb, 0x65, 0x35, 0x94, 0xcf, 0x4a, 0x68, 0x4e, 0x3e, 0x24, 0xf9, 0x52, 0x24, 0xa4, 0x0a,
	0x86, 0x9f, 0x95, 0xf0, 0xd9, 0x15, 0xb4, 0x46, 0x52, 0x0a, 0x39, 0x14, 0x84, 0x22, 0x0f, 0x1a,
	0xd3, 0xf7, 0xdd, 0x1a, 0xfa, 0x0f, 0x8e, 0xc7, 0xe1, 0xe4, 0x6e, 0x32, 0x9d, 0x8f, 0xa7, 0xf1,
	0xe4, 0xae, 0xfb, 0x03, 0x06, 0xdf, 0x9b, 0x70, 0xb4, 0x91, 0x85, 0x6e, 0xc0, 0x1b, 0x4a, 0x9a,
	0x68, 0x8a, 0x9e, 0x58, 0x53, 0xef, 0x78, 0xc7, 0x87, 0x04, 0xd7, 0xd0, 0x4b, 0x70, 0x4c, 0x9a,
	0xd0, 0xff, 0x3b, 0xde, 0x4a, 0x57, 0xef, 0xe2, 0xf1, 0x36, 0x0a, 0xd7, 0xd0, 0x08, 0x90, 0xb1,
	0x73, 0xcc, 0xa4, 0xd2, 0xe6, 0xac, 0x30, 0xcd, 0xee, 0x63, 0x99, 0xdd, 0x7b, 0x42, 0x0e, 0xae,
	0xa1, 0x1b, 0x70, 0x4c, 0x50, 0xec, 0x42, 0x2b, 0x38, 0xbd, 0xce, 0x8e, 0x2e, 0xff, 0x14, 0x35,
	0x34, 0x00, 0x2f, 0xe6, 0xea, 0xef, 0x6a, 0x5e, 0x41, 0x6b, 0x9b, 0x1e, 0xd4, 0xb3, 0xca, 0x0e,
	0x22, 0xf5, 0x58, 0xed, 0x2d, 0xb4, 0x63, 0xae, 0xfe, 0xb1, 0x7a, 0xe1, 0x15, 0x1f, 0xb3, 0x17,
	0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x98, 0xfb, 0x28, 0xe6, 0xe7, 0x04, 0x00, 0x00,
}
