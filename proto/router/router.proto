syntax = "proto3";

package router;
import "bitbucket.org/subiz/servicespec/proto/chat/chat.proto";

enum Error {
	OK = 0;
	NoRouteMatch = 1;
	NotFound = 404;
	AccessDeny = 400;
}

service Router {
	rpc Assign(chat.ChatRequest) returns (RouteResult) {}
  rpc Update(Route) returns (Empty) {}
	rpc Create(Route) returns (Id) {}
	rpc Delete(Id) returns (Empty) {}
	// List all routes by account id
	rpc List(Id) returns (Routes) {}
}

enum JoinOperator {
	None = 0;
	And = 1;
	Or = 2;
}

message Id { string Id = 1;}

message Empty {}

message Route {
	string Id = 1;
	string Priority = 2;
	AssignStrategy Strategy = 3;
  repeated string HandlerIds = 4;
	int32 ConcurrentThreshold = 7;
	repeated Condition Conditions = 8;
	bool IsDisabled = 9;
	string CTime = 10;
}

message Condition {
	JoinOperator Join = 1;
	string Key = 2; // unique
	string Operator = 3; // = # regex
	string Value = 4; // JSON
}

message Routes { repeated Route Routes = 1;}

message RouteResult {
	AssignStrategy Strategy = 3;
  repeated string HandlerIds = 4;
	int32 ConcurrentThreshold = 7;
}
	
enum AssignStrategy {
	Unsetted = 0;
	AllAgents = 1;
	AgentGroup = 2;
	SpecificAgent = 3;
	MostRecent = 4;

	RoundRobinAllAgents = 5;
	RoundRobinAgents = 6;

	BalancedAllAgents = 7;
	BalancedAgents = 8;
}

message GroupDeleteEvent {
	string GroupId = 1;
}

message GroupUpdateEvent {	
	string GroupId = 1;
	repeated string MemberIds = 2;
}

message AgentDeletedEvent {
	string AgentId = 1;
}

message AgentUpdateEvent {
	string AgentId = 1;
	bool IsActive = 2;
	bool IsConfirmed = 3;
}
