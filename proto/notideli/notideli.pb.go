// Code generated by protoc-gen-go.
// source: notideli/notideli.proto
// DO NOT EDIT!

/*
Package notideli is a generated protocol buffer package.

It is generated from these files:
	notideli/notideli.proto

It has these top-level messages:
	Empty
	Id
	Token
	TokenRemoveRequest
	Tokens
	NotiConfiguration
*/
package notideli

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_DESKTOP DeviceType = 0
	DeviceType_MOBILE  DeviceType = 1
)

var DeviceType_name = map[int32]string{
	0: "DESKTOP",
	1: "MOBILE",
}
var DeviceType_value = map[string]int32{
	"DESKTOP": 0,
	"MOBILE":  1,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Token struct {
	Token      string     `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
	UserId     string     `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	UserType   string     `protobuf:"bytes,3,opt,name=UserType,json=userType" json:"UserType,omitempty"`
	ExpiredIn  string     `protobuf:"bytes,4,opt,name=ExpiredIn,json=expiredIn" json:"ExpiredIn,omitempty"`
	DeviceType DeviceType `protobuf:"varint,5,opt,name=DeviceType,json=deviceType,enum=notideli.DeviceType" json:"DeviceType,omitempty"`
	JSONData   string     `protobuf:"bytes,6,opt,name=JSONData,json=jSONData" json:"JSONData,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

func (m *Token) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

func (m *Token) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_DESKTOP
}

func (m *Token) GetJSONData() string {
	if m != nil {
		return m.JSONData
	}
	return ""
}

type TokenRemoveRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
}

func (m *TokenRemoveRequest) Reset()                    { *m = TokenRemoveRequest{} }
func (m *TokenRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRemoveRequest) ProtoMessage()               {}
func (*TokenRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TokenRemoveRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Tokens struct {
	Tokens []string `protobuf:"bytes,1,rep,name=Tokens,json=tokens" json:"Tokens,omitempty"`
}

func (m *Tokens) Reset()                    { *m = Tokens{} }
func (m *Tokens) String() string            { return proto.CompactTextString(m) }
func (*Tokens) ProtoMessage()               {}
func (*Tokens) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Tokens) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type NotiConfiguration struct {
	UserId            string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Email             string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	EmailNoti         bool   `protobuf:"varint,3,opt,name=EmailNoti,json=emailNoti" json:"EmailNoti,omitempty"`
	DesktopNoti       bool   `protobuf:"varint,4,opt,name=DesktopNoti,json=desktopNoti" json:"DesktopNoti,omitempty"`
	MobileNoti        bool   `protobuf:"varint,5,opt,name=MobileNoti,json=mobileNoti" json:"MobileNoti,omitempty"`
	MobilePushTimming int32  `protobuf:"varint,6,opt,name=MobilePushTimming,json=mobilePushTimming" json:"MobilePushTimming,omitempty"`
	EmailNotiGroup    int32  `protobuf:"varint,7,opt,name=EmailNotiGroup,json=emailNotiGroup" json:"EmailNotiGroup,omitempty"`
}

func (m *NotiConfiguration) Reset()                    { *m = NotiConfiguration{} }
func (m *NotiConfiguration) String() string            { return proto.CompactTextString(m) }
func (*NotiConfiguration) ProtoMessage()               {}
func (*NotiConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NotiConfiguration) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *NotiConfiguration) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NotiConfiguration) GetEmailNoti() bool {
	if m != nil {
		return m.EmailNoti
	}
	return false
}

func (m *NotiConfiguration) GetDesktopNoti() bool {
	if m != nil {
		return m.DesktopNoti
	}
	return false
}

func (m *NotiConfiguration) GetMobileNoti() bool {
	if m != nil {
		return m.MobileNoti
	}
	return false
}

func (m *NotiConfiguration) GetMobilePushTimming() int32 {
	if m != nil {
		return m.MobilePushTimming
	}
	return 0
}

func (m *NotiConfiguration) GetEmailNotiGroup() int32 {
	if m != nil {
		return m.EmailNotiGroup
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "notideli.Empty")
	proto.RegisterType((*Id)(nil), "notideli.Id")
	proto.RegisterType((*Token)(nil), "notideli.Token")
	proto.RegisterType((*TokenRemoveRequest)(nil), "notideli.TokenRemoveRequest")
	proto.RegisterType((*Tokens)(nil), "notideli.Tokens")
	proto.RegisterType((*NotiConfiguration)(nil), "notideli.NotiConfiguration")
	proto.RegisterEnum("notideli.DeviceType", DeviceType_name, DeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NotiDeli service

type NotiDeliClient interface {
	RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	Config(ctx context.Context, in *NotiConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// pass in userid
	GetConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotiConfiguration, error)
}

type notiDeliClient struct {
	cc *grpc.ClientConn
}

func NewNotiDeliClient(cc *grpc.ClientConn) NotiDeliClient {
	return &notiDeliClient{cc}
}

func (c *notiDeliClient) RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notideli.NotiDeli/RegisterToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notideli.NotiDeli/RemoveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) Config(ctx context.Context, in *NotiConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/notideli.NotiDeli/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) GetConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotiConfiguration, error) {
	out := new(NotiConfiguration)
	err := grpc.Invoke(ctx, "/notideli.NotiDeli/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotiDeli service

type NotiDeliServer interface {
	RegisterToken(context.Context, *Token) (*Empty, error)
	RemoveToken(context.Context, *TokenRemoveRequest) (*Empty, error)
	Config(context.Context, *NotiConfiguration) (*Empty, error)
	// pass in userid
	GetConfig(context.Context, *Id) (*NotiConfiguration, error)
}

func RegisterNotiDeliServer(s *grpc.Server, srv NotiDeliServer) {
	s.RegisterService(&_NotiDeli_serviceDesc, srv)
}

func _NotiDeli_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notideli.NotiDeli/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).RegisterToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notideli.NotiDeli/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).RemoveToken(ctx, req.(*TokenRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notideli.NotiDeli/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).Config(ctx, req.(*NotiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notideli.NotiDeli/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).GetConfig(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotiDeli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notideli.NotiDeli",
	HandlerType: (*NotiDeliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToken",
			Handler:    _NotiDeli_RegisterToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _NotiDeli_RemoveToken_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _NotiDeli_Config_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _NotiDeli_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notideli/notideli.proto",
}

func init() { proto.RegisterFile("notideli/notideli.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xa6, 0xb5, 0x63, 0x4f, 0x20, 0x34, 0xab, 0x08, 0xac, 0x50, 0x21, 0xcb, 0x12, 0xa8,
	0xaa, 0x50, 0x91, 0x5a, 0x0e, 0x9c, 0x38, 0x80, 0xa3, 0xca, 0x40, 0x9b, 0xca, 0x0d, 0x3f, 0x20,
	0xc5, 0x43, 0x58, 0x1a, 0x7b, 0x8d, 0xbd, 0xae, 0xe8, 0xcf, 0xe3, 0x37, 0x71, 0xe0, 0x8a, 0x76,
	0xd6, 0xb1, 0x93, 0x10, 0x71, 0xb1, 0x66, 0xde, 0x9b, 0xb7, 0x1f, 0xef, 0xad, 0xe1, 0x49, 0x26,
	0x95, 0x48, 0x70, 0x29, 0x5e, 0xad, 0x8a, 0x93, 0xbc, 0x90, 0x4a, 0x72, 0x67, 0xd5, 0x07, 0x3d,
	0xb0, 0x26, 0x69, 0xae, 0xee, 0x83, 0x11, 0x74, 0xa3, 0x84, 0x0f, 0xf4, 0xd7, 0x63, 0x3e, 0x3b,
	0x72, 0xe3, 0xae, 0x48, 0x82, 0x5f, 0x0c, 0xac, 0x99, 0xbc, 0xc5, 0x8c, 0x8f, 0xea, 0xa2, 0x26,
	0x2d, 0x45, 0xe8, 0x63, 0xb0, 0x3f, 0x97, 0x58, 0x44, 0x89, 0xd7, 0x25, 0xd8, 0xae, 0xa8, 0xe3,
	0x63, 0x70, 0x34, 0x3e, 0xbb, 0xcf, 0xd1, 0xdb, 0x23, 0xc6, 0xa9, 0xea, 0x9e, 0x1f, 0x82, 0x3b,
	0xf9, 0x99, 0x8b, 0x02, 0x93, 0x28, 0xf3, 0xf6, 0x89, 0x74, 0x71, 0x05, 0xf0, 0xd7, 0x00, 0x21,
	0xde, 0x89, 0x2f, 0x48, 0x5a, 0xcb, 0x67, 0x47, 0x83, 0xd3, 0xd1, 0x49, 0x73, 0xfe, 0x96, 0x8b,
	0x21, 0x69, 0x6a, 0xbd, 0xdf, 0x87, 0xeb, 0xe9, 0x65, 0x38, 0x57, 0x73, 0xcf, 0x36, 0xfb, 0x7d,
	0xaf, 0xfb, 0xe0, 0x18, 0x38, 0x9d, 0x3c, 0xc6, 0x54, 0xde, 0x61, 0x8c, 0x3f, 0x2a, 0x2c, 0xd5,
	0xee, 0xfb, 0x04, 0x3e, 0xd8, 0x84, 0x96, 0xfa, 0x66, 0xa6, 0xf2, 0x98, 0xbf, 0xa7, 0x6f, 0x46,
	0x03, 0x65, 0xf0, 0x87, 0xc1, 0xf0, 0x52, 0x2a, 0xf1, 0x5e, 0x66, 0x5f, 0xc5, 0xa2, 0x2a, 0xe6,
	0x4a, 0xc8, 0x75, 0x1f, 0xd8, 0x86, 0x0f, 0x23, 0x6d, 0xef, 0x5c, 0x2c, 0x6b, 0x7b, 0x2c, 0xd4,
	0x0d, 0x39, 0xa0, 0x0b, 0xbd, 0x0e, 0xd9, 0xe3, 0xc4, 0x2e, 0xae, 0x00, 0xee, 0x43, 0x3f, 0xc4,
	0xf2, 0x56, 0xc9, 0x9c, 0xf8, 0x7d, 0xe2, 0xfb, 0x49, 0x0b, 0xf1, 0x67, 0x00, 0x17, 0xf2, 0x46,
	0x2c, 0x91, 0x06, 0x2c, 0x1a, 0x80, 0xb4, 0x41, 0xf8, 0x4b, 0x18, 0x1a, 0xfe, 0xaa, 0x2a, 0xbf,
	0xcd, 0x44, 0x9a, 0x8a, 0x6c, 0x41, 0xb6, 0x58, 0xf1, 0x30, 0xdd, 0x26, 0xf8, 0x0b, 0x18, 0x34,
	0xa7, 0x39, 0x2f, 0x64, 0x95, 0x7b, 0x3d, 0x1a, 0x1d, 0xe0, 0x06, 0x7a, 0xfc, 0x7c, 0x3d, 0x19,
	0xde, 0x87, 0x5e, 0x38, 0xb9, 0xfe, 0x38, 0x9b, 0x5e, 0x1d, 0x74, 0x38, 0x80, 0x7d, 0x31, 0x7d,
	0x17, 0x7d, 0x9a, 0x1c, 0xb0, 0xd3, 0xdf, 0x0c, 0x1c, 0x2d, 0x0a, 0x71, 0x29, 0xf8, 0x19, 0x3c,
	0x8c, 0x71, 0x21, 0x4a, 0x85, 0x85, 0x79, 0x46, 0x8f, 0xda, 0x28, 0x09, 0x18, 0xaf, 0x01, 0xe6,
	0x21, 0x76, 0xf8, 0x5b, 0xe8, 0x9b, 0xac, 0x8c, 0xe4, 0x70, 0x4b, 0xb2, 0x91, 0xe3, 0x2e, 0xfd,
	0x1b, 0xb0, 0x4d, 0x3a, 0xfc, 0x69, 0x4b, 0xfe, 0x93, 0xd9, 0x6e, 0xa5, 0x7b, 0x8e, 0xaa, 0x16,
	0x3f, 0x68, 0xf9, 0x28, 0x19, 0xff, 0x6f, 0xa9, 0xa0, 0x73, 0x63, 0xd3, 0x8f, 0x75, 0xf6, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xe6, 0x5f, 0x05, 0xc2, 0x73, 0x03, 0x00, 0x00,
}
