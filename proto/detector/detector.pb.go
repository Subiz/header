// Code generated by protoc-gen-go. DO NOT EDIT.
// source: detector/detector.proto

/*
Package detector is a generated protocol buffer package.

It is generated from these files:
	detector/detector.proto

It has these top-level messages:
	UserAgent
	String
	Zipped
	Location
*/
package detector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserAgent struct {
	Id                   int32  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	BrowserVersionFull   string `protobuf:"bytes,2,opt,name=BrowserVersionFull" json:"BrowserVersionFull,omitempty"`
	LayoutEngine         string `protobuf:"bytes,3,opt,name=LayoutEngine" json:"LayoutEngine,omitempty"`
	LayoutEngineVersion  string `protobuf:"bytes,4,opt,name=LayoutEngineVersion" json:"LayoutEngineVersion,omitempty"`
	HardwareArchitecture string `protobuf:"bytes,5,opt,name=HardwareArchitecture" json:"HardwareArchitecture,omitempty"`
	Os                   string `protobuf:"bytes,6,opt,name=Os" json:"Os,omitempty"`
	BrowserVersion       string `protobuf:"bytes,7,opt,name=BrowserVersion" json:"BrowserVersion,omitempty"`
	DeviceType           string `protobuf:"bytes,8,opt,name=DeviceType" json:"DeviceType,omitempty"`
	UserAgent            string `protobuf:"bytes,9,opt,name=UserAgent" json:"UserAgent,omitempty"`
}

func (m *UserAgent) Reset()                    { *m = UserAgent{} }
func (m *UserAgent) String() string            { return proto.CompactTextString(m) }
func (*UserAgent) ProtoMessage()               {}
func (*UserAgent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserAgent) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserAgent) GetBrowserVersionFull() string {
	if m != nil {
		return m.BrowserVersionFull
	}
	return ""
}

func (m *UserAgent) GetLayoutEngine() string {
	if m != nil {
		return m.LayoutEngine
	}
	return ""
}

func (m *UserAgent) GetLayoutEngineVersion() string {
	if m != nil {
		return m.LayoutEngineVersion
	}
	return ""
}

func (m *UserAgent) GetHardwareArchitecture() string {
	if m != nil {
		return m.HardwareArchitecture
	}
	return ""
}

func (m *UserAgent) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *UserAgent) GetBrowserVersion() string {
	if m != nil {
		return m.BrowserVersion
	}
	return ""
}

func (m *UserAgent) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *UserAgent) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

type String struct {
	String_ string `protobuf:"bytes,1,opt,name=String" json:"String,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *String) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

type Zipped struct {
	Id int32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *Zipped) Reset()                    { *m = Zipped{} }
func (m *Zipped) String() string            { return proto.CompactTextString(m) }
func (*Zipped) ProtoMessage()               {}
func (*Zipped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Zipped) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Location struct {
	Id       int32  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Country  string `protobuf:"bytes,2,opt,name=Country" json:"Country,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=City" json:"City,omitempty"`
	TimeZone string `protobuf:"bytes,4,opt,name=TimeZone" json:"TimeZone,omitempty"`
	Language string `protobuf:"bytes,5,opt,name=Language" json:"Language,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Location) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Location) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Location) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *Location) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func init() {
	proto.RegisterType((*UserAgent)(nil), "UserAgent")
	proto.RegisterType((*String)(nil), "String")
	proto.RegisterType((*Zipped)(nil), "Zipped")
	proto.RegisterType((*Location)(nil), "Location")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Detector service

type DetectorClient interface {
	DetectUserAgent(ctx context.Context, in *String, opts ...grpc.CallOption) (*UserAgent, error)
	ZipUserAgent(ctx context.Context, in *String, opts ...grpc.CallOption) (*Zipped, error)
	UnzipUserAgent(ctx context.Context, in *Zipped, opts ...grpc.CallOption) (*UserAgent, error)
	DetectLocation(ctx context.Context, in *String, opts ...grpc.CallOption) (*Location, error)
	ZipLanguage(ctx context.Context, in *String, opts ...grpc.CallOption) (*Zipped, error)
	UnzipLanguage(ctx context.Context, in *Zipped, opts ...grpc.CallOption) (*String, error)
}

type detectorClient struct {
	cc *grpc.ClientConn
}

func NewDetectorClient(cc *grpc.ClientConn) DetectorClient {
	return &detectorClient{cc}
}

func (c *detectorClient) DetectUserAgent(ctx context.Context, in *String, opts ...grpc.CallOption) (*UserAgent, error) {
	out := new(UserAgent)
	err := grpc.Invoke(ctx, "/Detector/DetectUserAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) ZipUserAgent(ctx context.Context, in *String, opts ...grpc.CallOption) (*Zipped, error) {
	out := new(Zipped)
	err := grpc.Invoke(ctx, "/Detector/ZipUserAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) UnzipUserAgent(ctx context.Context, in *Zipped, opts ...grpc.CallOption) (*UserAgent, error) {
	out := new(UserAgent)
	err := grpc.Invoke(ctx, "/Detector/UnzipUserAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) DetectLocation(ctx context.Context, in *String, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/Detector/DetectLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) ZipLanguage(ctx context.Context, in *String, opts ...grpc.CallOption) (*Zipped, error) {
	out := new(Zipped)
	err := grpc.Invoke(ctx, "/Detector/ZipLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) UnzipLanguage(ctx context.Context, in *Zipped, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/Detector/UnzipLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Detector service

type DetectorServer interface {
	DetectUserAgent(context.Context, *String) (*UserAgent, error)
	ZipUserAgent(context.Context, *String) (*Zipped, error)
	UnzipUserAgent(context.Context, *Zipped) (*UserAgent, error)
	DetectLocation(context.Context, *String) (*Location, error)
	ZipLanguage(context.Context, *String) (*Zipped, error)
	UnzipLanguage(context.Context, *Zipped) (*String, error)
}

func RegisterDetectorServer(s *grpc.Server, srv DetectorServer) {
	s.RegisterService(&_Detector_serviceDesc, srv)
}

func _Detector_DetectUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).DetectUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/DetectUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).DetectUserAgent(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_ZipUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).ZipUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/ZipUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).ZipUserAgent(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_UnzipUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zipped)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).UnzipUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/UnzipUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).UnzipUserAgent(ctx, req.(*Zipped))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_DetectLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).DetectLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/DetectLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).DetectLocation(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_ZipLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).ZipLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/ZipLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).ZipLanguage(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_UnzipLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zipped)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).UnzipLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Detector/UnzipLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).UnzipLanguage(ctx, req.(*Zipped))
	}
	return interceptor(ctx, in, info, handler)
}

var _Detector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Detector",
	HandlerType: (*DetectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectUserAgent",
			Handler:    _Detector_DetectUserAgent_Handler,
		},
		{
			MethodName: "ZipUserAgent",
			Handler:    _Detector_ZipUserAgent_Handler,
		},
		{
			MethodName: "UnzipUserAgent",
			Handler:    _Detector_UnzipUserAgent_Handler,
		},
		{
			MethodName: "DetectLocation",
			Handler:    _Detector_DetectLocation_Handler,
		},
		{
			MethodName: "ZipLanguage",
			Handler:    _Detector_ZipLanguage_Handler,
		},
		{
			MethodName: "UnzipLanguage",
			Handler:    _Detector_UnzipLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detector/detector.proto",
}

func init() { proto.RegisterFile("detector/detector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x4d, 0xe2, 0x6e, 0x3e, 0xae, 0x1a, 0xe1, 0x2a, 0x3a, 0x2c, 0x22, 0x75, 0x84, 0xb5, 0x4f,
	0x51, 0xd6, 0x5f, 0xb0, 0xee, 0x2a, 0x16, 0x0a, 0x85, 0xda, 0xfa, 0x90, 0xb7, 0x98, 0x0c, 0x71,
	0xa0, 0xce, 0x84, 0xc9, 0xc4, 0x12, 0x9f, 0xfc, 0x7f, 0xfe, 0x1a, 0xff, 0x81, 0x64, 0xf2, 0xd1,
	0x34, 0xe4, 0xed, 0xde, 0x73, 0x4e, 0xe6, 0xde, 0x73, 0x66, 0x02, 0x2f, 0x32, 0xa6, 0x59, 0xaa,
	0xa5, 0x7a, 0xd7, 0x17, 0x51, 0xa1, 0xa4, 0x96, 0xf4, 0xaf, 0x03, 0xc1, 0xbe, 0x64, 0xea, 0x36,
	0x67, 0x42, 0x63, 0x08, 0xce, 0x2a, 0x23, 0xf6, 0xc2, 0x5e, 0x5e, 0x6e, 0x9d, 0x55, 0x86, 0x11,
	0xe0, 0x47, 0x25, 0x8f, 0x25, 0x53, 0xdf, 0x98, 0x2a, 0xb9, 0x14, 0x9f, 0xab, 0xc3, 0x81, 0x38,
	0x0b, 0x7b, 0x19, 0x6c, 0x67, 0x18, 0xa4, 0xf0, 0x68, 0x9d, 0xd4, 0xb2, 0xd2, 0x9f, 0x44, 0xce,
	0x05, 0x23, 0x0f, 0x8c, 0xf2, 0x0c, 0xc3, 0xf7, 0xf0, 0x74, 0xdc, 0x77, 0x9f, 0x93, 0x0b, 0x23,
	0x9d, 0xa3, 0xf0, 0x06, 0x9e, 0x7d, 0x49, 0x54, 0x76, 0x4c, 0x14, 0xbb, 0x55, 0xe9, 0x0f, 0xde,
	0x18, 0xa8, 0x14, 0x23, 0x97, 0xe6, 0x93, 0x59, 0xae, 0x71, 0xb2, 0x29, 0x89, 0x6b, 0x14, 0xce,
	0xa6, 0xc4, 0x6b, 0x08, 0xcf, 0xf7, 0x25, 0x9e, 0xe1, 0x26, 0x28, 0xbe, 0x02, 0xb8, 0x67, 0xbf,
	0x78, 0xca, 0x76, 0x75, 0xc1, 0x88, 0x6f, 0x34, 0x23, 0x04, 0x5f, 0x8e, 0xe2, 0x22, 0x81, 0xa1,
	0x4f, 0x00, 0x5d, 0x80, 0xfb, 0x55, 0x2b, 0x2e, 0x72, 0x7c, 0xde, 0x57, 0x26, 0xcd, 0x60, 0xdb,
	0x75, 0x94, 0x80, 0x1b, 0xf3, 0xa2, 0x60, 0xd9, 0x34, 0x6b, 0xfa, 0xc7, 0x06, 0x7f, 0x2d, 0xd3,
	0x44, 0x37, 0x6b, 0x4c, 0x2f, 0x82, 0x80, 0x77, 0x27, 0x2b, 0xa1, 0x55, 0xdd, 0xa5, 0xdf, 0xb7,
	0x88, 0x70, 0x71, 0xc7, 0x75, 0xdd, 0x45, 0x6d, 0x6a, 0xbc, 0x02, 0x7f, 0xc7, 0x7f, 0xb2, 0x58,
	0x0a, 0xd6, 0xe5, 0x3a, 0xf4, 0x0d, 0xb7, 0x4e, 0x44, 0x5e, 0x25, 0x79, 0x1f, 0xe0, 0xd0, 0xdf,
	0xfc, 0xb3, 0xc1, 0xbf, 0xef, 0xde, 0x07, 0x2e, 0xe1, 0x49, 0x5b, 0x9f, 0x9e, 0x87, 0x17, 0xb5,
	0x2e, 0xae, 0x20, 0x3a, 0x79, 0xb6, 0x9a, 0x5b, 0x8f, 0x79, 0x31, 0x23, 0xf3, 0xa2, 0xd6, 0x2b,
	0xb5, 0xf0, 0x2d, 0x84, 0x7b, 0xf1, 0xfb, 0x5c, 0xd5, 0x92, 0x93, 0xc3, 0xae, 0x21, 0x6c, 0xc7,
	0x0e, 0x59, 0x0c, 0xc7, 0x05, 0x51, 0x8f, 0x51, 0x0b, 0x5f, 0xc3, 0xc3, 0x98, 0x17, 0xfd, 0xea,
	0xb3, 0x33, 0xdf, 0xc0, 0x63, 0x33, 0x73, 0x24, 0xea, 0x46, 0xf6, 0x6a, 0x6a, 0x7d, 0x77, 0xcd,
	0x7f, 0xf0, 0xe1, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xa3, 0x04, 0xd1, 0x22, 0x03, 0x00,
	0x00,
}
