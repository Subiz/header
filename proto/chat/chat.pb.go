// Code generated by protoc-gen-go.
// source: chat/chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat/chat.proto

It has these top-level messages:
	Ids
	User
	Chat
	Attachment
	ChatEvents
	ChatEvent
	Id
	Empty
	UserInfo
	ChatRequest
	Chats
	ChatStart
	UnassignChat
	Bools
	ListUsersUnreadRequest
	Unread
	UsersUnread
	ListChatEventRequest
	ListChatByUserRequest
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatEventType int32

const (
	ChatEventType_NONE    ChatEventType = 0
	ChatEventType_MESSAGE ChatEventType = 1
	ChatEventType_CLOSED  ChatEventType = 3
	ChatEventType_JOINED  ChatEventType = 4
	ChatEventType_LEAVED  ChatEventType = 5
	ChatEventType_SEEN    ChatEventType = 6
	ChatEventType_RATED   ChatEventType = 7
	ChatEventType_INPUT   ChatEventType = 8
	ChatEventType_TAG     ChatEventType = 9
	ChatEventType_UNTAG   ChatEventType = 10
)

var ChatEventType_name = map[int32]string{
	0:  "NONE",
	1:  "MESSAGE",
	3:  "CLOSED",
	4:  "JOINED",
	5:  "LEAVED",
	6:  "SEEN",
	7:  "RATED",
	8:  "INPUT",
	9:  "TAG",
	10: "UNTAG",
}
var ChatEventType_value = map[string]int32{
	"NONE":    0,
	"MESSAGE": 1,
	"CLOSED":  3,
	"JOINED":  4,
	"LEAVED":  5,
	"SEEN":    6,
	"RATED":   7,
	"INPUT":   8,
	"TAG":     9,
	"UNTAG":   10,
}

func (x ChatEventType) String() string {
	return proto.EnumName(ChatEventType_name, int32(x))
}
func (ChatEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SenderType int32

const (
	SenderType_UNDEFINED SenderType = 0
	SenderType_USER      SenderType = 1
	SenderType_AGENT     SenderType = 2
	SenderType_SYSTEM    SenderType = 3
)

var SenderType_name = map[int32]string{
	0: "UNDEFINED",
	1: "USER",
	2: "AGENT",
	3: "SYSTEM",
}
var SenderType_value = map[string]int32{
	"UNDEFINED": 0,
	"USER":      1,
	"AGENT":     2,
	"SYSTEM":    3,
}

func (x SenderType) String() string {
	return proto.EnumName(SenderType_name, int32(x))
}
func (SenderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeviceType int32

const (
	DeviceType_UNKNOWN DeviceType = 0
	DeviceType_MOBILE  DeviceType = 1
	DeviceType_TABLET  DeviceType = 2
	DeviceType_DESKTOP DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MOBILE",
	2: "TABLET",
	3: "DESKTOP",
}
var DeviceType_value = map[string]int32{
	"UNKNOWN": 0,
	"MOBILE":  1,
	"TABLET":  2,
	"DESKTOP": 3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Ids struct {
	Ids []string `protobuf:"bytes,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type User struct {
	Id         string     `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Type       SenderType `protobuf:"varint,4,opt,name=Type,json=type,enum=chat.SenderType" json:"Type,omitempty"`
	LastSeenId string     `protobuf:"bytes,5,opt,name=LastSeenId,json=lastSeenId" json:"LastSeenId,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetType() SenderType {
	if m != nil {
		return m.Type
	}
	return SenderType_UNDEFINED
}

func (m *User) GetLastSeenId() string {
	if m != nil {
		return m.LastSeenId
	}
	return ""
}

// get number of unread message
type Chat struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	// Creation time
	CTime string `protobuf:"bytes,3,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	// Last active time
	LTime string `protobuf:"bytes,4,opt,name=LTime,json=lTime" json:"LTime,omitempty"`
	// Closed time
	XTime       string  `protobuf:"bytes,5,opt,name=XTime,json=xTime" json:"XTime,omitempty"`
	Users       []*User `protobuf:"bytes,6,rep,name=Users,json=users" json:"Users,omitempty"`
	EventsCount int32   `protobuf:"varint,8,opt,name=EventsCount,json=eventsCount" json:"EventsCount,omitempty"`
	ChannelId   string  `protobuf:"bytes,9,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Chat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chat) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Chat) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Chat) GetLTime() string {
	if m != nil {
		return m.LTime
	}
	return ""
}

func (m *Chat) GetXTime() string {
	if m != nil {
		return m.XTime
	}
	return ""
}

func (m *Chat) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Chat) GetEventsCount() int32 {
	if m != nil {
		return m.EventsCount
	}
	return 0
}

func (m *Chat) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type Attachment struct {
	Type    string `protobuf:"bytes,1,opt,name=Type,json=type" json:"Type,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=Payload,json=payload" json:"Payload,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Attachment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Attachment) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ChatEvents struct {
	Events []*ChatEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events,omitempty"`
}

func (m *ChatEvents) Reset()                    { *m = ChatEvents{} }
func (m *ChatEvents) String() string            { return proto.CompactTextString(m) }
func (*ChatEvents) ProtoMessage()               {}
func (*ChatEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChatEvents) GetEvents() []*ChatEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type ChatEvent struct {
	Id     string        `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Type   ChatEventType `protobuf:"varint,2,opt,name=Type,json=type,enum=chat.ChatEventType" json:"Type,omitempty"`
	ChatId string        `protobuf:"bytes,3,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	// string AccountId = 4;
	CTime      string     `protobuf:"bytes,5,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	SenderId   string     `protobuf:"bytes,6,opt,name=SenderId,json=senderId" json:"SenderId,omitempty"`
	SenderType SenderType `protobuf:"varint,7,opt,name=SenderType,json=senderType,enum=chat.SenderType" json:"SenderType,omitempty"`
	// Text could be raw text, could be JSON data based on type
	Content     string        `protobuf:"bytes,8,opt,name=Content,json=content" json:"Content,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,9,rep,name=Attachments,json=attachments" json:"Attachments,omitempty"`
}

func (m *ChatEvent) Reset()                    { *m = ChatEvent{} }
func (m *ChatEvent) String() string            { return proto.CompactTextString(m) }
func (*ChatEvent) ProtoMessage()               {}
func (*ChatEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChatEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChatEvent) GetType() ChatEventType {
	if m != nil {
		return m.Type
	}
	return ChatEventType_NONE
}

func (m *ChatEvent) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatEvent) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *ChatEvent) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *ChatEvent) GetSenderType() SenderType {
	if m != nil {
		return m.SenderType
	}
	return SenderType_UNDEFINED
}

func (m *ChatEvent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ChatEvent) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UserInfo struct {
	Id          string   `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Emails      []string `protobuf:"bytes,3,rep,name=Emails,json=emails" json:"Emails,omitempty"`
	Phones      []string `protobuf:"bytes,4,rep,name=Phones,json=phones" json:"Phones,omitempty"`
	Country     string   `protobuf:"bytes,5,opt,name=Country,json=country" json:"Country,omitempty"`
	CountryCode string   `protobuf:"bytes,6,opt,name=CountryCode,json=countryCode" json:"CountryCode,omitempty"`
	City        string   `protobuf:"bytes,7,opt,name=City,json=city" json:"City,omitempty"`
	TimeZone    string   `protobuf:"bytes,8,opt,name=TimeZone,json=timeZone" json:"TimeZone,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *UserInfo) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

type ChatRequest struct {
	AccountId       string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChatId          string     `protobuf:"bytes,2,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	ChannelId       string     `protobuf:"bytes,4,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	MessageTo       string     `protobuf:"bytes,5,opt,name=MessageTo,json=messageTo" json:"MessageTo,omitempty"`
	PageUrl         string     `protobuf:"bytes,6,opt,name=PageUrl,json=pageUrl" json:"PageUrl,omitempty"`
	PageTitle       string     `protobuf:"bytes,7,opt,name=PageTitle,json=pageTitle" json:"PageTitle,omitempty"`
	Message         string     `protobuf:"bytes,8,opt,name=Message,json=message" json:"Message,omitempty"`
	BrowserLanguage string     `protobuf:"bytes,9,opt,name=BrowserLanguage,json=browserLanguage" json:"BrowserLanguage,omitempty"`
	Language        string     `protobuf:"bytes,10,opt,name=Language,json=language" json:"Language,omitempty"`
	DeviceType      DeviceType `protobuf:"varint,11,opt,name=DeviceType,json=deviceType,enum=chat.DeviceType" json:"DeviceType,omitempty"`
	UserId          string     `protobuf:"bytes,12,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	CTime           string     `protobuf:"bytes,13,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ChatRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ChatRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChatRequest) GetMessageTo() string {
	if m != nil {
		return m.MessageTo
	}
	return ""
}

func (m *ChatRequest) GetPageUrl() string {
	if m != nil {
		return m.PageUrl
	}
	return ""
}

func (m *ChatRequest) GetPageTitle() string {
	if m != nil {
		return m.PageTitle
	}
	return ""
}

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequest) GetBrowserLanguage() string {
	if m != nil {
		return m.BrowserLanguage
	}
	return ""
}

func (m *ChatRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ChatRequest) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_UNKNOWN
}

func (m *ChatRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ChatRequest) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

type Chats struct {
	Chats []*Chat `protobuf:"bytes,1,rep,name=Chats,json=chats" json:"Chats,omitempty"`
}

func (m *Chats) Reset()                    { *m = Chats{} }
func (m *Chats) String() string            { return proto.CompactTextString(m) }
func (*Chats) ProtoMessage()               {}
func (*Chats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Chats) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

type ChatStart struct {
	AgentId   string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	ChannelId string `protobuf:"bytes,3,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
}

func (m *ChatStart) Reset()                    { *m = ChatStart{} }
func (m *ChatStart) String() string            { return proto.CompactTextString(m) }
func (*ChatStart) ProtoMessage()               {}
func (*ChatStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ChatStart) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *ChatStart) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ChatStart) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type UnassignChat struct {
	AccountId  string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	IsAssigned bool     `protobuf:"varint,2,opt,name=IsAssigned,json=isAssigned" json:"IsAssigned,omitempty"`
	Message    string   `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
	Ip         string   `protobuf:"bytes,4,opt,name=Ip,json=ip" json:"Ip,omitempty"`
	Name       string   `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	Emails     []string `protobuf:"bytes,6,rep,name=Emails,json=emails" json:"Emails,omitempty"`
	Phones     []string `protobuf:"bytes,7,rep,name=Phones,json=phones" json:"Phones,omitempty"`
}

func (m *UnassignChat) Reset()                    { *m = UnassignChat{} }
func (m *UnassignChat) String() string            { return proto.CompactTextString(m) }
func (*UnassignChat) ProtoMessage()               {}
func (*UnassignChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnassignChat) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UnassignChat) GetIsAssigned() bool {
	if m != nil {
		return m.IsAssigned
	}
	return false
}

func (m *UnassignChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UnassignChat) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UnassignChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnassignChat) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *UnassignChat) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

type Bools struct {
	Bools []bool `protobuf:"varint,1,rep,packed,name=Bools,json=bools" json:"Bools,omitempty"`
}

func (m *Bools) Reset()                    { *m = Bools{} }
func (m *Bools) String() string            { return proto.CompactTextString(m) }
func (*Bools) ProtoMessage()               {}
func (*Bools) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Bools) GetBools() []bool {
	if m != nil {
		return m.Bools
	}
	return nil
}

type ListUsersUnreadRequest struct {
	AccountId string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	UserIds   []string `protobuf:"bytes,2,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
}

func (m *ListUsersUnreadRequest) Reset()                    { *m = ListUsersUnreadRequest{} }
func (m *ListUsersUnreadRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersUnreadRequest) ProtoMessage()               {}
func (*ListUsersUnreadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListUsersUnreadRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListUsersUnreadRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type Unread struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Unread int32  `protobuf:"varint,2,opt,name=Unread,json=unread" json:"Unread,omitempty"`
}

func (m *Unread) Reset()                    { *m = Unread{} }
func (m *Unread) String() string            { return proto.CompactTextString(m) }
func (*Unread) ProtoMessage()               {}
func (*Unread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Unread) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Unread) GetUnread() int32 {
	if m != nil {
		return m.Unread
	}
	return 0
}

type UsersUnread struct {
	Unreads []*Unread `protobuf:"bytes,1,rep,name=Unreads,json=unreads" json:"Unreads,omitempty"`
}

func (m *UsersUnread) Reset()                    { *m = UsersUnread{} }
func (m *UsersUnread) String() string            { return proto.CompactTextString(m) }
func (*UsersUnread) ProtoMessage()               {}
func (*UsersUnread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UsersUnread) GetUnreads() []*Unread {
	if m != nil {
		return m.Unreads
	}
	return nil
}

type ListChatEventRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChatId    string `protobuf:"bytes,2,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	StartId   string `protobuf:"bytes,3,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit     int32  `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatEventRequest) Reset()                    { *m = ListChatEventRequest{} }
func (m *ListChatEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatEventRequest) ProtoMessage()               {}
func (*ListChatEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListChatEventRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListChatEventRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ListChatEventRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatEventRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListChatByUserRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	StartId   string `protobuf:"bytes,4,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit     int32  `protobuf:"varint,5,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatByUserRequest) Reset()                    { *m = ListChatByUserRequest{} }
func (m *ListChatByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatByUserRequest) ProtoMessage()               {}
func (*ListChatByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ListChatByUserRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListChatByUserRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ListChatByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListChatByUserRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatByUserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Ids)(nil), "chat.Ids")
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*Chat)(nil), "chat.Chat")
	proto.RegisterType((*Attachment)(nil), "chat.Attachment")
	proto.RegisterType((*ChatEvents)(nil), "chat.ChatEvents")
	proto.RegisterType((*ChatEvent)(nil), "chat.ChatEvent")
	proto.RegisterType((*Id)(nil), "chat.Id")
	proto.RegisterType((*Empty)(nil), "chat.Empty")
	proto.RegisterType((*UserInfo)(nil), "chat.UserInfo")
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*Chats)(nil), "chat.Chats")
	proto.RegisterType((*ChatStart)(nil), "chat.ChatStart")
	proto.RegisterType((*UnassignChat)(nil), "chat.UnassignChat")
	proto.RegisterType((*Bools)(nil), "chat.Bools")
	proto.RegisterType((*ListUsersUnreadRequest)(nil), "chat.ListUsersUnreadRequest")
	proto.RegisterType((*Unread)(nil), "chat.Unread")
	proto.RegisterType((*UsersUnread)(nil), "chat.UsersUnread")
	proto.RegisterType((*ListChatEventRequest)(nil), "chat.ListChatEventRequest")
	proto.RegisterType((*ListChatByUserRequest)(nil), "chat.ListChatByUserRequest")
	proto.RegisterEnum("chat.ChatEventType", ChatEventType_name, ChatEventType_value)
	proto.RegisterEnum("chat.SenderType", SenderType_name, SenderType_value)
	proto.RegisterEnum("chat.DeviceType", DeviceType_name, DeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatMgr service

type ChatMgrClient interface {
	// COLLECTOR for channel
	// Send KeepAlive message to extends live of a chat session
	Ping(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Id, error)
	// initialize chat session
	Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Id, error)
	Start(ctx context.Context, in *ChatStart, opts ...grpc.CallOption) (*Id, error)
	// QUERRIER
	// List chats for specific user
	ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error)
	ListChatsByUser(ctx context.Context, in *ListChatByUserRequest, opts ...grpc.CallOption) (*Chats, error)
	ListChatEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error)
	// Waiting list
	ListUnassignedChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chats, error)
	AcceptUnassignedChat(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CheckUnassignedChat(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Chats, error)
}

type chatMgrClient struct {
	cc *grpc.ClientConn
}

func NewChatMgrClient(cc *grpc.ClientConn) ChatMgrClient {
	return &chatMgrClient{cc}
}

func (c *chatMgrClient) Ping(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Start(ctx context.Context, in *ChatStart, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error) {
	out := new(UsersUnread)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListUsersUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListChatsByUser(ctx context.Context, in *ListChatByUserRequest, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListChatsByUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListChatEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error) {
	out := new(ChatEvents)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListChatEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListUnassignedChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListUnassignedChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) AcceptUnassignedChat(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/AcceptUnassignedChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) CheckUnassignedChat(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/CheckUnassignedChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatMgr service

type ChatMgrServer interface {
	// COLLECTOR for channel
	// Send KeepAlive message to extends live of a chat session
	Ping(context.Context, *Id) (*Empty, error)
	Send(context.Context, *ChatEvent) (*Id, error)
	// initialize chat session
	Request(context.Context, *ChatRequest) (*Id, error)
	Start(context.Context, *ChatStart) (*Id, error)
	// QUERRIER
	// List chats for specific user
	ListUsersUnread(context.Context, *ListUsersUnreadRequest) (*UsersUnread, error)
	ListChatsByUser(context.Context, *ListChatByUserRequest) (*Chats, error)
	ListChatEvents(context.Context, *ListChatEventRequest) (*ChatEvents, error)
	// Waiting list
	ListUnassignedChats(context.Context, *Id) (*Chats, error)
	AcceptUnassignedChat(context.Context, *Id) (*Empty, error)
	CheckUnassignedChat(context.Context, *Ids) (*Chats, error)
}

func RegisterChatMgrServer(s *grpc.Server, srv ChatMgrServer) {
	s.RegisterService(&_ChatMgr_serviceDesc, srv)
}

func _ChatMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Ping(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Send(ctx, req.(*ChatEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Request(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Start(ctx, req.(*ChatStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListUsersUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListUsersUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, req.(*ListUsersUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListChatsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListChatsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, req.(*ListChatByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListChatEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListChatEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListChatEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListChatEvents(ctx, req.(*ListChatEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListUnassignedChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListUnassignedChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListUnassignedChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListUnassignedChats(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_AcceptUnassignedChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).AcceptUnassignedChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/AcceptUnassignedChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).AcceptUnassignedChat(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_CheckUnassignedChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).CheckUnassignedChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/CheckUnassignedChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).CheckUnassignedChat(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatMgr",
	HandlerType: (*ChatMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ChatMgr_Ping_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _ChatMgr_Send_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _ChatMgr_Request_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ChatMgr_Start_Handler,
		},
		{
			MethodName: "ListUsersUnread",
			Handler:    _ChatMgr_ListUsersUnread_Handler,
		},
		{
			MethodName: "ListChatsByUser",
			Handler:    _ChatMgr_ListChatsByUser_Handler,
		},
		{
			MethodName: "ListChatEvents",
			Handler:    _ChatMgr_ListChatEvents_Handler,
		},
		{
			MethodName: "ListUnassignedChats",
			Handler:    _ChatMgr_ListUnassignedChats_Handler,
		},
		{
			MethodName: "AcceptUnassignedChat",
			Handler:    _ChatMgr_AcceptUnassignedChat_Handler,
		},
		{
			MethodName: "CheckUnassignedChat",
			Handler:    _ChatMgr_CheckUnassignedChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}

func init() { proto.RegisterFile("chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x8e, 0xdb, 0xd4,
	0x13, 0x8f, 0xe3, 0xaf, 0x78, 0xdc, 0x76, 0xdd, 0xd3, 0xfd, 0xf7, 0x6f, 0x2d, 0xa5, 0x44, 0xa6,
	0xa2, 0xa1, 0x17, 0x6d, 0xb5, 0xa8, 0x12, 0x42, 0x80, 0xc8, 0x26, 0xa6, 0x32, 0xcd, 0x7a, 0x57,
	0x4e, 0xc2, 0xf7, 0x8d, 0xd7, 0x3e, 0x64, 0x2d, 0x12, 0x3b, 0xe4, 0x38, 0x85, 0x48, 0x88, 0x47,
	0xe0, 0x05, 0x78, 0x13, 0x1e, 0x81, 0x27, 0xe0, 0x4d, 0xe0, 0x12, 0xcd, 0x39, 0x76, 0xfc, 0xb1,
	0x5d, 0x54, 0x89, 0x9b, 0xdd, 0x99, 0xdf, 0x99, 0x33, 0x33, 0xe7, 0x37, 0x1f, 0x0e, 0x1c, 0x44,
	0x97, 0x61, 0xfe, 0x04, 0xff, 0x3c, 0x5e, 0x6f, 0xb2, 0x3c, 0x23, 0x0a, 0xca, 0xce, 0xff, 0x41,
	0xf6, 0x62, 0x46, 0x2c, 0xfe, 0xcf, 0x96, 0xfa, 0xf2, 0xc0, 0x08, 0xe4, 0x24, 0x66, 0xce, 0xb7,
	0xa0, 0xcc, 0x19, 0xdd, 0x90, 0x5b, 0xd0, 0xf5, 0x62, 0x5b, 0xea, 0x4b, 0x03, 0x23, 0xe8, 0x26,
	0x31, 0x79, 0x00, 0xca, 0x6c, 0xb7, 0xa6, 0xb6, 0xd2, 0x97, 0x06, 0xb7, 0x8e, 0xad, 0xc7, 0xdc,
	0xe3, 0x94, 0xa6, 0x31, 0xdd, 0x20, 0x1e, 0x28, 0xf9, 0x6e, 0x4d, 0xc9, 0x7d, 0x80, 0x49, 0xc8,
	0xf2, 0x29, 0xa5, 0xa9, 0x17, 0xdb, 0x2a, 0xbf, 0x0d, 0xcb, 0x3d, 0xe2, 0xfc, 0x29, 0x81, 0x32,
	0xba, 0x0c, 0xf3, 0x2b, 0xee, 0xef, 0x81, 0x31, 0x8c, 0xa2, 0x6c, 0x9b, 0xe6, 0x5e, 0x6c, 0x77,
	0x39, 0x6c, 0x84, 0x25, 0x40, 0x0e, 0x41, 0x1d, 0xcd, 0x92, 0x15, 0xb5, 0x65, 0x7e, 0xa2, 0x46,
	0xa8, 0x20, 0x3a, 0xe1, 0xa8, 0x22, 0xd0, 0x65, 0x89, 0x7e, 0xc9, 0x51, 0x11, 0x5d, 0xfd, 0x89,
	0xa3, 0x7d, 0x50, 0xf1, 0x59, 0xcc, 0xd6, 0xfa, 0xf2, 0xc0, 0x3c, 0x06, 0x91, 0x3f, 0x42, 0x81,
	0xba, 0xc5, 0x03, 0xd2, 0x07, 0xd3, 0x7d, 0x49, 0xd3, 0x9c, 0x8d, 0x30, 0xa8, 0xdd, 0xeb, 0x4b,
	0x03, 0x35, 0x30, 0x69, 0x05, 0x61, 0x8e, 0xa3, 0xcb, 0x30, 0x4d, 0xe9, 0xd2, 0x8b, 0x6d, 0x43,
	0xe4, 0x18, 0x95, 0x80, 0xf3, 0x01, 0xc0, 0x30, 0xcf, 0xc3, 0xe8, 0x72, 0x45, 0xd3, 0x9c, 0x90,
	0x82, 0x2e, 0xf1, 0x42, 0x41, 0x8e, 0x0d, 0xfa, 0x79, 0xb8, 0x5b, 0x66, 0x61, 0xf9, 0x42, 0x7d,
	0x2d, 0x54, 0xe7, 0x19, 0x00, 0xb2, 0x22, 0xe2, 0x93, 0x87, 0xa0, 0x09, 0x89, 0xd7, 0xc5, 0x3c,
	0x3e, 0x10, 0xc9, 0xee, 0x2d, 0x02, 0x4d, 0x64, 0xe5, 0xfc, 0xda, 0xe5, 0x19, 0x09, 0xf4, 0x0a,
	0xa5, 0x0f, 0x8b, 0x14, 0xba, 0xbc, 0x62, 0x77, 0x5a, 0x4e, 0x6a, 0x45, 0xbb, 0x0b, 0x1a, 0xc2,
	0x5e, 0x5c, 0xd0, 0xab, 0x45, 0x5c, 0xab, 0x58, 0x57, 0xeb, 0xac, 0x1f, 0x41, 0x4f, 0x94, 0xdd,
	0x8b, 0x6d, 0x8d, 0x1f, 0xf4, 0x58, 0xa1, 0x93, 0xa7, 0x00, 0x55, 0x4b, 0xd8, 0xfa, 0x35, 0xad,
	0x02, 0x6c, 0x2f, 0x23, 0x27, 0xa3, 0x2c, 0xcd, 0x69, 0xc1, 0xb8, 0x11, 0xe8, 0x91, 0x50, 0xc9,
	0x31, 0x98, 0x15, 0x9f, 0xcc, 0x36, 0x38, 0x15, 0x85, 0xb3, 0xea, 0x20, 0x30, 0xc3, 0xca, 0xc8,
	0x39, 0x44, 0x0a, 0xda, 0x44, 0x38, 0x3a, 0xa8, 0xee, 0x6a, 0x9d, 0xef, 0x9c, 0x3f, 0x24, 0xe8,
	0x61, 0xc9, 0xbd, 0xf4, 0xbb, 0xec, 0x0a, 0x5d, 0x04, 0x14, 0x3f, 0x5c, 0xd1, 0xa2, 0x34, 0x4a,
	0x1a, 0xae, 0x38, 0x33, 0xee, 0x2a, 0x4c, 0x96, 0xcc, 0x96, 0xf9, 0x84, 0x68, 0x94, 0x6b, 0x88,
	0x9f, 0x5f, 0x66, 0x29, 0x65, 0xb6, 0x22, 0xf0, 0x35, 0xd7, 0xc4, 0x6b, 0xb6, 0x69, 0xbe, 0xd9,
	0x15, 0x9c, 0xe9, 0x91, 0x50, 0xb1, 0xbb, 0x8a, 0x93, 0x51, 0x16, 0xd3, 0x82, 0x38, 0x33, 0xaa,
	0x20, 0x8c, 0x3f, 0x4a, 0xf2, 0x1d, 0x67, 0xcd, 0x08, 0x94, 0x28, 0xc9, 0x77, 0xc8, 0x35, 0x72,
	0xfe, 0x75, 0x96, 0xd2, 0x82, 0x9e, 0x5e, 0x5e, 0xe8, 0xce, 0x5f, 0x5d, 0x30, 0xb1, 0x6c, 0x01,
	0xfd, 0x61, 0x4b, 0x59, 0xde, 0x9c, 0x20, 0xa9, 0x3d, 0x41, 0x55, 0x8d, 0xbb, 0x8d, 0x1a, 0x37,
	0x7a, 0x5a, 0x69, 0xf5, 0x34, 0x9e, 0x9e, 0x52, 0xc6, 0xc2, 0x05, 0x9d, 0x65, 0xc5, 0x8b, 0x8c,
	0x55, 0x09, 0x88, 0x7e, 0x5e, 0xd0, 0xf9, 0x66, 0x59, 0xbc, 0x47, 0x5f, 0x0b, 0x15, 0xef, 0xe1,
	0xc9, 0x2c, 0xc9, 0x97, 0xb4, 0x78, 0x90, 0xb1, 0x2e, 0x01, 0xbc, 0x57, 0x78, 0x2d, 0x6b, 0x5e,
	0xf8, 0x24, 0x03, 0x38, 0x38, 0xd9, 0x64, 0x3f, 0x32, 0xba, 0x99, 0x84, 0xe9, 0x62, 0x8b, 0x16,
	0x62, 0xce, 0x0e, 0x2e, 0x9a, 0x30, 0x32, 0xb3, 0x37, 0x01, 0xc1, 0xcc, 0xb2, 0x3c, 0x7b, 0x0a,
	0x30, 0xa6, 0x2f, 0x93, 0x88, 0xf2, 0x2e, 0x34, 0xeb, 0x5d, 0x58, 0xe1, 0x01, 0xc4, 0x7b, 0x19,
	0xd9, 0xe1, 0x7d, 0x11, 0xdb, 0x37, 0x04, 0x3b, 0x5b, 0xae, 0x55, 0x13, 0x70, 0xb3, 0x36, 0x01,
	0xce, 0xbb, 0xa0, 0x22, 0x97, 0xb8, 0x32, 0x84, 0x50, 0xcc, 0x29, 0x54, 0x23, 0x16, 0xa8, 0x28,
	0x32, 0xe7, 0x1b, 0x31, 0xa0, 0xd3, 0x3c, 0xdc, 0xe4, 0xf8, 0xee, 0xe1, 0x82, 0xd6, 0xea, 0xa3,
	0x87, 0x42, 0xad, 0xc5, 0xef, 0x36, 0xe2, 0x37, 0xaa, 0x23, 0xb7, 0x37, 0xce, 0xef, 0x12, 0xdc,
	0x98, 0xa7, 0x21, 0x63, 0xc9, 0x22, 0xe5, 0x4b, 0xf5, 0xdf, 0x5b, 0xe0, 0x3e, 0x80, 0xc7, 0x86,
	0xdc, 0x9a, 0x8a, 0x40, 0xbd, 0x00, 0x92, 0x3d, 0x52, 0x2f, 0x8b, 0xdc, 0x2c, 0x0b, 0x8e, 0xca,
	0xba, 0xe8, 0x8e, 0x6e, 0xb2, 0xde, 0x8f, 0x8a, 0xfa, 0xca, 0x51, 0xd1, 0xae, 0x19, 0x15, 0xbd,
	0x3e, 0x2a, 0xce, 0x9b, 0xa0, 0x9e, 0x64, 0xd9, 0x92, 0x21, 0xc7, 0x5c, 0xe0, 0x24, 0xf6, 0x02,
	0xf5, 0x02, 0x15, 0xe7, 0x1c, 0xee, 0x4e, 0x12, 0x96, 0xf3, 0x9d, 0x3d, 0x4f, 0x37, 0x34, 0x8c,
	0x5f, 0xaf, 0xcf, 0x6d, 0xd0, 0x05, 0x93, 0xcc, 0xee, 0xf2, 0x78, 0xba, 0xa0, 0x92, 0x39, 0xef,
	0x83, 0x26, 0x1c, 0xd5, 0xd8, 0x96, 0x1a, 0x6c, 0xdf, 0x2d, 0x2d, 0x38, 0x39, 0x6a, 0xa0, 0x6d,
	0xb9, 0xe6, 0x3c, 0x03, 0xb3, 0x96, 0x07, 0x79, 0x07, 0x74, 0x21, 0x95, 0x75, 0xbf, 0x51, 0x7c,
	0x4c, 0x44, 0x9a, 0xba, 0xb8, 0xc5, 0x9c, 0x9f, 0xe1, 0x10, 0x9f, 0x50, 0xad, 0xed, 0xff, 0x34,
	0xa8, 0x36, 0xe8, 0xbc, 0x8b, 0xf6, 0x8d, 0xa0, 0x33, 0xa1, 0xf2, 0xcf, 0x60, 0xb2, 0x4a, 0x72,
	0x5e, 0x20, 0x35, 0x50, 0x97, 0xa8, 0x38, 0xbf, 0x49, 0xf0, 0xbf, 0x32, 0xfc, 0xc9, 0x8e, 0x7f,
	0xe8, 0x5e, 0x2b, 0x7e, 0xa3, 0xe5, 0xba, 0xed, 0x85, 0x50, 0x51, 0x27, 0x37, 0xa8, 0xab, 0x65,
	0xa7, 0x5c, 0x93, 0x9d, 0x5a, 0xcb, 0xee, 0xd1, 0x2f, 0x70, 0xb3, 0xf1, 0x25, 0x22, 0x3d, 0x50,
	0xfc, 0x33, 0xdf, 0xb5, 0x3a, 0xc4, 0x04, 0xfd, 0xd4, 0x9d, 0x4e, 0x87, 0xcf, 0x5d, 0x4b, 0x22,
	0x00, 0xda, 0x68, 0x72, 0x36, 0x75, 0xc7, 0x96, 0x8c, 0xf2, 0x67, 0x67, 0x9e, 0xef, 0x8e, 0x2d,
	0x05, 0xe5, 0x89, 0x3b, 0xfc, 0xdc, 0x1d, 0x5b, 0x2a, 0x5e, 0x9d, 0xba, 0xae, 0x6f, 0x69, 0xc4,
	0x00, 0x35, 0x18, 0xce, 0xdc, 0xb1, 0xa5, 0xa3, 0xe8, 0xf9, 0xe7, 0xf3, 0x99, 0xd5, 0x23, 0x3a,
	0xc8, 0xb3, 0xe1, 0x73, 0xcb, 0x40, 0x6c, 0xee, 0xa3, 0x08, 0x8f, 0x3e, 0xac, 0x7f, 0xa8, 0xc8,
	0x4d, 0x30, 0xe6, 0xfe, 0xd8, 0xfd, 0x94, 0x3b, 0xef, 0xa0, 0xc3, 0xf9, 0xd4, 0x0d, 0x2c, 0x09,
	0x6f, 0x0c, 0x9f, 0xbb, 0xfe, 0xcc, 0xea, 0x62, 0xc4, 0xe9, 0x57, 0xd3, 0x99, 0x7b, 0x6a, 0xc9,
	0x8f, 0x3e, 0xae, 0x2f, 0x18, 0x4c, 0x78, 0xee, 0xbf, 0xf0, 0xcf, 0xbe, 0xf0, 0xad, 0x0e, 0x9a,
	0x9d, 0x9e, 0x9d, 0x78, 0x93, 0x22, 0xf9, 0xd9, 0xf0, 0x64, 0xe2, 0xe2, 0x75, 0x13, 0xf4, 0xb1,
	0x3b, 0x7d, 0x31, 0x3b, 0x3b, 0xb7, 0xe4, 0xe3, 0xbf, 0x65, 0xd0, 0xf1, 0xf9, 0xa7, 0x8b, 0x0d,
	0x79, 0x0b, 0x94, 0xf3, 0x24, 0x5d, 0x90, 0x9e, 0x68, 0x22, 0x2f, 0x3e, 0x32, 0x85, 0x24, 0x3e,
	0x59, 0x1d, 0xf2, 0x36, 0x28, 0x98, 0x2a, 0x69, 0xff, 0x0a, 0x38, 0xda, 0xdf, 0x70, 0x3a, 0x64,
	0x00, 0x7a, 0x59, 0xde, 0xdb, 0xb5, 0x2d, 0x24, 0xa0, 0x86, 0xe5, 0x03, 0x50, 0xc5, 0x36, 0xaa,
	0xf9, 0xe3, 0x40, 0xc3, 0x6a, 0x0c, 0x07, 0xad, 0xf1, 0x23, 0xf7, 0xc4, 0xf1, 0xab, 0xa7, 0xf2,
	0xe8, 0x76, 0xf5, 0x83, 0xaa, 0x38, 0x71, 0x3a, 0xe4, 0x23, 0xe1, 0x85, 0xef, 0x48, 0xd1, 0x83,
	0xe4, 0x8d, 0xca, 0xcb, 0x95, 0xce, 0x2c, 0x5f, 0xce, 0xed, 0x9d, 0x0e, 0xf9, 0x04, 0x6e, 0x35,
	0x06, 0x88, 0x91, 0xa3, 0xe6, 0xed, 0xfa, 0x58, 0x1d, 0x59, 0x2d, 0x7e, 0xd0, 0xc3, 0x63, 0xb8,
	0xc3, 0xf3, 0x2d, 0x96, 0x24, 0x8d, 0xc5, 0xde, 0xbe, 0xc2, 0x75, 0x19, 0xf1, 0x09, 0x1c, 0x0e,
	0xa3, 0x88, 0xae, 0x5b, 0x37, 0xae, 0x2f, 0xce, 0x13, 0xb8, 0x33, 0xba, 0xa4, 0xd1, 0xf7, 0x2d,
	0x7b, 0xa3, 0xb4, 0x67, 0xad, 0x08, 0x17, 0x1a, 0xff, 0x11, 0xfe, 0xde, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x7b, 0xdb, 0x56, 0x97, 0x0b, 0x00, 0x00,
}
