// Code generated by protoc-gen-go.
// source: chat/chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat/chat.proto

It has these top-level messages:
	User
	Chat
	Attachment
	ChatEvents
	ChatEvent
	Id
	Empty
	UserInfo
	ChatRequest
	Chats
	ListUsersUnreadRequest
	Unread
	UsersUnread
	ListChatEventRequest
	ListChatByUserRequest
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatEventType int32

const (
	ChatEventType_MESSAGE ChatEventType = 0
	ChatEventType_OPENED  ChatEventType = 1
	ChatEventType_CLOSED  ChatEventType = 2
	ChatEventType_JOINED  ChatEventType = 3
	ChatEventType_LEAVED  ChatEventType = 4
	ChatEventType_SEEN    ChatEventType = 5
	ChatEventType_RATED   ChatEventType = 6
)

var ChatEventType_name = map[int32]string{
	0: "MESSAGE",
	1: "OPENED",
	2: "CLOSED",
	3: "JOINED",
	4: "LEAVED",
	5: "SEEN",
	6: "RATED",
}
var ChatEventType_value = map[string]int32{
	"MESSAGE": 0,
	"OPENED":  1,
	"CLOSED":  2,
	"JOINED":  3,
	"LEAVED":  4,
	"SEEN":    5,
	"RATED":   6,
}

func (x ChatEventType) String() string {
	return proto.EnumName(ChatEventType_name, int32(x))
}
func (ChatEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ActorType int32

const (
	ActorType_UNDEFINED ActorType = 0
	ActorType_USER      ActorType = 1
	ActorType_AGENT     ActorType = 2
	ActorType_SYSTEM    ActorType = 3
)

var ActorType_name = map[int32]string{
	0: "UNDEFINED",
	1: "USER",
	2: "AGENT",
	3: "SYSTEM",
}
var ActorType_value = map[string]int32{
	"UNDEFINED": 0,
	"USER":      1,
	"AGENT":     2,
	"SYSTEM":    3,
}

func (x ActorType) String() string {
	return proto.EnumName(ActorType_name, int32(x))
}
func (ActorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeviceType int32

const (
	DeviceType_UNKNOWN DeviceType = 0
	DeviceType_MOBILE  DeviceType = 1
	DeviceType_TABLET  DeviceType = 2
	DeviceType_DESKTOP DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MOBILE",
	2: "TABLET",
	3: "DESKTOP",
}
var DeviceType_value = map[string]int32{
	"UNKNOWN": 0,
	"MOBILE":  1,
	"TABLET":  2,
	"DESKTOP": 3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type User struct {
	Id         string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	ChannelId  string `protobuf:"bytes,3,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	IsVisitor  bool   `protobuf:"varint,4,opt,name=IsVisitor,json=isVisitor" json:"IsVisitor,omitempty"`
	LastSeenId string `protobuf:"bytes,5,opt,name=LastSeenId,json=lastSeenId" json:"LastSeenId,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *User) GetIsVisitor() bool {
	if m != nil {
		return m.IsVisitor
	}
	return false
}

func (m *User) GetLastSeenId() string {
	if m != nil {
		return m.LastSeenId
	}
	return ""
}

// get number of unread message
type Chat struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	// Creation time
	CTime string `protobuf:"bytes,3,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	// Last active time
	LTime string `protobuf:"bytes,4,opt,name=LTime,json=lTime" json:"LTime,omitempty"`
	// Closed time
	XTime       string  `protobuf:"bytes,5,opt,name=XTime,json=xTime" json:"XTime,omitempty"`
	Users       []*User `protobuf:"bytes,6,rep,name=Users,json=users" json:"Users,omitempty"`
	IsClosed    bool    `protobuf:"varint,7,opt,name=IsClosed,json=isClosed" json:"IsClosed,omitempty"`
	EventsCount int32   `protobuf:"varint,8,opt,name=EventsCount,json=eventsCount" json:"EventsCount,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Chat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chat) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Chat) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Chat) GetLTime() string {
	if m != nil {
		return m.LTime
	}
	return ""
}

func (m *Chat) GetXTime() string {
	if m != nil {
		return m.XTime
	}
	return ""
}

func (m *Chat) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Chat) GetIsClosed() bool {
	if m != nil {
		return m.IsClosed
	}
	return false
}

func (m *Chat) GetEventsCount() int32 {
	if m != nil {
		return m.EventsCount
	}
	return 0
}

type Attachment struct {
	Type    string `protobuf:"bytes,1,opt,name=Type,json=type" json:"Type,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=Payload,json=payload" json:"Payload,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attachment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Attachment) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ChatEvents struct {
	Events []*ChatEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events,omitempty"`
}

func (m *ChatEvents) Reset()                    { *m = ChatEvents{} }
func (m *ChatEvents) String() string            { return proto.CompactTextString(m) }
func (*ChatEvents) ProtoMessage()               {}
func (*ChatEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChatEvents) GetEvents() []*ChatEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type ChatEvent struct {
	Id     string        `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Type   ChatEventType `protobuf:"varint,2,opt,name=Type,json=type,enum=chat.ChatEventType" json:"Type,omitempty"`
	ChatId string        `protobuf:"bytes,3,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	// string AccountId = 4;
	SendTime  string    `protobuf:"bytes,5,opt,name=SendTime,json=sendTime" json:"SendTime,omitempty"`
	ActorId   string    `protobuf:"bytes,6,opt,name=ActorId,json=actorId" json:"ActorId,omitempty"`
	ActorType ActorType `protobuf:"varint,7,opt,name=ActorType,json=actorType,enum=chat.ActorType" json:"ActorType,omitempty"`
	// Text could be raw text, could be JSON data based on type
	Text        string        `protobuf:"bytes,8,opt,name=Text,json=text" json:"Text,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,9,rep,name=Attachments,json=attachments" json:"Attachments,omitempty"`
}

func (m *ChatEvent) Reset()                    { *m = ChatEvent{} }
func (m *ChatEvent) String() string            { return proto.CompactTextString(m) }
func (*ChatEvent) ProtoMessage()               {}
func (*ChatEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChatEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChatEvent) GetType() ChatEventType {
	if m != nil {
		return m.Type
	}
	return ChatEventType_MESSAGE
}

func (m *ChatEvent) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatEvent) GetSendTime() string {
	if m != nil {
		return m.SendTime
	}
	return ""
}

func (m *ChatEvent) GetActorId() string {
	if m != nil {
		return m.ActorId
	}
	return ""
}

func (m *ChatEvent) GetActorType() ActorType {
	if m != nil {
		return m.ActorType
	}
	return ActorType_UNDEFINED
}

func (m *ChatEvent) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChatEvent) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type UserInfo struct {
	UserId        string   `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Email         []string `protobuf:"bytes,3,rep,name=Email,json=email" json:"Email,omitempty"`
	Phone         []string `protobuf:"bytes,4,rep,name=Phone,json=phone" json:"Phone,omitempty"`
	Country       string   `protobuf:"bytes,5,opt,name=Country,json=country" json:"Country,omitempty"`
	CountryCode   string   `protobuf:"bytes,6,opt,name=CountryCode,json=countryCode" json:"CountryCode,omitempty"`
	City          string   `protobuf:"bytes,7,opt,name=City,json=city" json:"City,omitempty"`
	TimeZone      string   `protobuf:"bytes,8,opt,name=TimeZone,json=timeZone" json:"TimeZone,omitempty"`
	Segment       []string `protobuf:"bytes,9,rep,name=Segment,json=segment" json:"Segment,omitempty"`
	Label         []string `protobuf:"bytes,10,rep,name=Label,json=label" json:"Label,omitempty"`
	Unsubscribed  bool     `protobuf:"varint,11,opt,name=Unsubscribed,json=unsubscribed" json:"Unsubscribed,omitempty"`
	MarkedSpam    bool     `protobuf:"varint,12,opt,name=MarkedSpam,json=markedSpam" json:"MarkedSpam,omitempty"`
	HardBounced   bool     `protobuf:"varint,13,opt,name=HardBounced,json=hardBounced" json:"HardBounced,omitempty"`
	TotalSessions int32    `protobuf:"varint,14,opt,name=TotalSessions,json=totalSessions" json:"TotalSessions,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *UserInfo) GetPhone() []string {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *UserInfo) GetSegment() []string {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *UserInfo) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *UserInfo) GetUnsubscribed() bool {
	if m != nil {
		return m.Unsubscribed
	}
	return false
}

func (m *UserInfo) GetMarkedSpam() bool {
	if m != nil {
		return m.MarkedSpam
	}
	return false
}

func (m *UserInfo) GetHardBounced() bool {
	if m != nil {
		return m.HardBounced
	}
	return false
}

func (m *UserInfo) GetTotalSessions() int32 {
	if m != nil {
		return m.TotalSessions
	}
	return 0
}

type ChatRequest struct {
	AccountId       string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChatId          string     `protobuf:"bytes,2,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	ChannelId       string     `protobuf:"bytes,4,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	MessageTo       string     `protobuf:"bytes,5,opt,name=MessageTo,json=messageTo" json:"MessageTo,omitempty"`
	PageUrl         string     `protobuf:"bytes,6,opt,name=PageUrl,json=pageUrl" json:"PageUrl,omitempty"`
	PageTitle       string     `protobuf:"bytes,7,opt,name=PageTitle,json=pageTitle" json:"PageTitle,omitempty"`
	Message         string     `protobuf:"bytes,8,opt,name=Message,json=message" json:"Message,omitempty"`
	BrowserLanguage string     `protobuf:"bytes,9,opt,name=BrowserLanguage,json=browserLanguage" json:"BrowserLanguage,omitempty"`
	Language        string     `protobuf:"bytes,10,opt,name=Language,json=language" json:"Language,omitempty"`
	DeviceType      DeviceType `protobuf:"varint,11,opt,name=DeviceType,json=deviceType,enum=chat.DeviceType" json:"DeviceType,omitempty"`
	User            *UserInfo  `protobuf:"bytes,12,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChatRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ChatRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChatRequest) GetMessageTo() string {
	if m != nil {
		return m.MessageTo
	}
	return ""
}

func (m *ChatRequest) GetPageUrl() string {
	if m != nil {
		return m.PageUrl
	}
	return ""
}

func (m *ChatRequest) GetPageTitle() string {
	if m != nil {
		return m.PageTitle
	}
	return ""
}

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequest) GetBrowserLanguage() string {
	if m != nil {
		return m.BrowserLanguage
	}
	return ""
}

func (m *ChatRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ChatRequest) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_UNKNOWN
}

func (m *ChatRequest) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type Chats struct {
	Chats []*Chat `protobuf:"bytes,1,rep,name=Chats,json=chats" json:"Chats,omitempty"`
}

func (m *Chats) Reset()                    { *m = Chats{} }
func (m *Chats) String() string            { return proto.CompactTextString(m) }
func (*Chats) ProtoMessage()               {}
func (*Chats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Chats) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

type ListUsersUnreadRequest struct {
	AccountId string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	UserIds   []string `protobuf:"bytes,2,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
}

func (m *ListUsersUnreadRequest) Reset()                    { *m = ListUsersUnreadRequest{} }
func (m *ListUsersUnreadRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersUnreadRequest) ProtoMessage()               {}
func (*ListUsersUnreadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListUsersUnreadRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListUsersUnreadRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type Unread struct {
	UserIds string `protobuf:"bytes,1,opt,name=UserIds,json=userIds" json:"UserIds,omitempty"`
	Unread  int32  `protobuf:"varint,2,opt,name=Unread,json=unread" json:"Unread,omitempty"`
}

func (m *Unread) Reset()                    { *m = Unread{} }
func (m *Unread) String() string            { return proto.CompactTextString(m) }
func (*Unread) ProtoMessage()               {}
func (*Unread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Unread) GetUserIds() string {
	if m != nil {
		return m.UserIds
	}
	return ""
}

func (m *Unread) GetUnread() int32 {
	if m != nil {
		return m.Unread
	}
	return 0
}

type UsersUnread struct {
	Unreads []*Unread `protobuf:"bytes,1,rep,name=Unreads,json=unreads" json:"Unreads,omitempty"`
}

func (m *UsersUnread) Reset()                    { *m = UsersUnread{} }
func (m *UsersUnread) String() string            { return proto.CompactTextString(m) }
func (*UsersUnread) ProtoMessage()               {}
func (*UsersUnread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UsersUnread) GetUnreads() []*Unread {
	if m != nil {
		return m.Unreads
	}
	return nil
}

type ListChatEventRequest struct {
	ChatId  string `protobuf:"bytes,1,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	StartId string `protobuf:"bytes,2,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit   int32  `protobuf:"varint,3,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatEventRequest) Reset()                    { *m = ListChatEventRequest{} }
func (m *ListChatEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatEventRequest) ProtoMessage()               {}
func (*ListChatEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListChatEventRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ListChatEventRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatEventRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListChatByUserRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	StartId   string `protobuf:"bytes,4,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit     int32  `protobuf:"varint,5,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatByUserRequest) Reset()                    { *m = ListChatByUserRequest{} }
func (m *ListChatByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatByUserRequest) ProtoMessage()               {}
func (*ListChatByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListChatByUserRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListChatByUserRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ListChatByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListChatByUserRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatByUserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*Chat)(nil), "chat.Chat")
	proto.RegisterType((*Attachment)(nil), "chat.Attachment")
	proto.RegisterType((*ChatEvents)(nil), "chat.ChatEvents")
	proto.RegisterType((*ChatEvent)(nil), "chat.ChatEvent")
	proto.RegisterType((*Id)(nil), "chat.Id")
	proto.RegisterType((*Empty)(nil), "chat.Empty")
	proto.RegisterType((*UserInfo)(nil), "chat.UserInfo")
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*Chats)(nil), "chat.Chats")
	proto.RegisterType((*ListUsersUnreadRequest)(nil), "chat.ListUsersUnreadRequest")
	proto.RegisterType((*Unread)(nil), "chat.Unread")
	proto.RegisterType((*UsersUnread)(nil), "chat.UsersUnread")
	proto.RegisterType((*ListChatEventRequest)(nil), "chat.ListChatEventRequest")
	proto.RegisterType((*ListChatByUserRequest)(nil), "chat.ListChatByUserRequest")
	proto.RegisterEnum("chat.ChatEventType", ChatEventType_name, ChatEventType_value)
	proto.RegisterEnum("chat.ActorType", ActorType_name, ActorType_value)
	proto.RegisterEnum("chat.DeviceType", DeviceType_name, DeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatMgr service

type ChatMgrClient interface {
	// COLLECTOR for channel
	// Send KeepAlive message to extends live of a chat session
	Ping(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Id, error)
	// initialize chat session
	Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Id, error)
	// QUERRIER
	// List chats for specific user
	ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error)
	ListChatsByUser(ctx context.Context, in *ListChatByUserRequest, opts ...grpc.CallOption) (*Chats, error)
	ListEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error)
}

type chatMgrClient struct {
	cc *grpc.ClientConn
}

func NewChatMgrClient(cc *grpc.ClientConn) ChatMgrClient {
	return &chatMgrClient{cc}
}

func (c *chatMgrClient) Ping(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error) {
	out := new(UsersUnread)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListUsersUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListChatsByUser(ctx context.Context, in *ListChatByUserRequest, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListChatsByUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error) {
	out := new(ChatEvents)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatMgr service

type ChatMgrServer interface {
	// COLLECTOR for channel
	// Send KeepAlive message to extends live of a chat session
	Ping(context.Context, *Id) (*Empty, error)
	Send(context.Context, *ChatEvent) (*Id, error)
	// initialize chat session
	Request(context.Context, *ChatRequest) (*Id, error)
	// QUERRIER
	// List chats for specific user
	ListUsersUnread(context.Context, *ListUsersUnreadRequest) (*UsersUnread, error)
	ListChatsByUser(context.Context, *ListChatByUserRequest) (*Chats, error)
	ListEvents(context.Context, *ListChatEventRequest) (*ChatEvents, error)
}

func RegisterChatMgrServer(s *grpc.Server, srv ChatMgrServer) {
	s.RegisterService(&_ChatMgr_serviceDesc, srv)
}

func _ChatMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Ping(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Send(ctx, req.(*ChatEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Request(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListUsersUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListUsersUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, req.(*ListUsersUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListChatsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListChatsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, req.(*ListChatByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListEvents(ctx, req.(*ListChatEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatMgr",
	HandlerType: (*ChatMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ChatMgr_Ping_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _ChatMgr_Send_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _ChatMgr_Request_Handler,
		},
		{
			MethodName: "ListUsersUnread",
			Handler:    _ChatMgr_ListUsersUnread_Handler,
		},
		{
			MethodName: "ListChatsByUser",
			Handler:    _ChatMgr_ListChatsByUser_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ChatMgr_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}

func init() { proto.RegisterFile("chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x56, 0xeb, 0x8e, 0xdb, 0x44,
	0x14, 0x8e, 0x13, 0x5f, 0xe2, 0xe3, 0xbd, 0xa4, 0xc3, 0x52, 0x59, 0x4b, 0x05, 0x91, 0x41, 0x74,
	0xa9, 0x44, 0x41, 0x8b, 0xfa, 0xa7, 0x5c, 0xa4, 0x6c, 0x62, 0x4a, 0x68, 0x36, 0x1b, 0xd9, 0x49,
	0xb9, 0xfc, 0x40, 0xf2, 0xda, 0x43, 0x62, 0xe1, 0xd8, 0xc1, 0x33, 0x29, 0xcd, 0x0b, 0x20, 0xc1,
	0x2b, 0xf0, 0x2a, 0x3c, 0x07, 0x6f, 0xc1, 0x3b, 0xa0, 0x33, 0x33, 0x8e, 0x93, 0x74, 0x91, 0xfa,
	0x27, 0x3a, 0xe7, 0x9b, 0x73, 0x66, 0xce, 0xe5, 0x3b, 0xc7, 0x81, 0xd3, 0x78, 0x11, 0xf1, 0x4f,
	0xf0, 0xe7, 0xf1, 0xaa, 0x2c, 0x78, 0x41, 0x74, 0x94, 0xbd, 0xdf, 0x35, 0xd0, 0x67, 0x8c, 0x96,
	0xe4, 0x04, 0x9a, 0xc3, 0xc4, 0xd5, 0xba, 0xda, 0x85, 0x1d, 0x34, 0xd3, 0x84, 0x10, 0xd0, 0xc7,
	0xd1, 0x92, 0xba, 0x4d, 0x81, 0xe8, 0x79, 0xb4, 0xa4, 0xe4, 0x01, 0xd8, 0xfd, 0x45, 0x94, 0xe7,
	0x34, 0x1b, 0x26, 0x6e, 0x4b, 0x1c, 0xd8, 0x71, 0x05, 0xe0, 0xe9, 0x90, 0xbd, 0x48, 0x59, 0xca,
	0x8b, 0xd2, 0xd5, 0xbb, 0xda, 0x45, 0x3b, 0xb0, 0xd3, 0x0a, 0x20, 0xef, 0x02, 0x8c, 0x22, 0xc6,
	0x43, 0x4a, 0xf3, 0x61, 0xe2, 0x1a, 0xc2, 0x19, 0xb2, 0x2d, 0xe2, 0xfd, 0xa3, 0x81, 0xde, 0x5f,
	0x44, 0xfc, 0xb5, 0x40, 0x1e, 0x80, 0xdd, 0x8b, 0xe3, 0x62, 0x9d, 0xf3, 0x61, 0xa2, 0xa2, 0xb1,
	0xa3, 0x0a, 0x20, 0x67, 0x60, 0xf4, 0xa7, 0xe9, 0x92, 0xaa, 0x70, 0x8c, 0x18, 0x15, 0x44, 0x47,
	0x02, 0xd5, 0x25, 0x9a, 0x55, 0xe8, 0xf7, 0x02, 0x95, 0xaf, 0x1b, 0xaf, 0x04, 0xda, 0x05, 0x03,
	0x0b, 0xc0, 0x5c, 0xb3, 0xdb, 0xba, 0x70, 0x2e, 0xe1, 0xb1, 0xa8, 0x11, 0x42, 0x81, 0xb1, 0xc6,
	0x03, 0x72, 0x0e, 0xed, 0x21, 0xeb, 0x67, 0x05, 0xa3, 0x89, 0x6b, 0x89, 0xbc, 0xda, 0xa9, 0xd2,
	0x49, 0x17, 0x1c, 0xff, 0x25, 0xcd, 0x39, 0xeb, 0x63, 0x40, 0x6e, 0xbb, 0xab, 0x5d, 0x18, 0x81,
	0x43, 0x6b, 0xc8, 0x7b, 0x0a, 0xd0, 0xe3, 0x3c, 0x8a, 0x17, 0x4b, 0x9a, 0x73, 0x2c, 0xeb, 0x74,
	0xb3, 0xa2, 0x2a, 0x3f, 0x9d, 0x6f, 0x56, 0x94, 0xb8, 0x60, 0x4d, 0xa2, 0x4d, 0x56, 0x44, 0x55,
	0x7e, 0xd6, 0x4a, 0xaa, 0xde, 0x13, 0x00, 0xac, 0x89, 0x7c, 0x81, 0x3c, 0x04, 0x53, 0x4a, 0xae,
	0x26, 0x42, 0x3d, 0x95, 0xa1, 0x6e, 0x2d, 0x02, 0x53, 0xbe, 0xeb, 0xfd, 0xd1, 0x14, 0x8d, 0x92,
	0xe8, 0x6b, 0x05, 0x7d, 0xa8, 0x42, 0xc0, 0xb7, 0x4e, 0x2e, 0xdf, 0x3a, 0xb8, 0x04, 0x8f, 0x54,
	0x5c, 0xf7, 0xc1, 0x44, 0x78, 0xdb, 0x6b, 0x33, 0x16, 0x1a, 0xd6, 0x23, 0xa4, 0x79, 0xb2, 0x53,
	0xca, 0x36, 0x53, 0x3a, 0xe6, 0xd2, 0x8b, 0x79, 0x51, 0x0e, 0x13, 0xd7, 0x94, 0xb9, 0x44, 0x52,
	0x25, 0x1f, 0x63, 0x1f, 0x79, 0x51, 0x8a, 0xb7, 0x2d, 0xf1, 0xb6, 0x4a, 0x60, 0x0b, 0x63, 0x63,
	0x95, 0x28, 0x0a, 0x45, 0x5f, 0xc9, 0x8a, 0x62, 0xa1, 0xe8, 0x2b, 0x4e, 0x2e, 0xc1, 0xa9, 0x4b,
	0xc9, 0x5c, 0x5b, 0x54, 0xa1, 0xa3, 0x2e, 0xd9, 0x1e, 0x04, 0x4e, 0x54, 0x1b, 0x79, 0x67, 0x98,
	0xfd, 0x61, 0x0d, 0x3c, 0x0b, 0x0c, 0x7f, 0xb9, 0xe2, 0x1b, 0xef, 0xcf, 0x16, 0xb4, 0xb1, 0xd7,
	0xc3, 0xfc, 0xe7, 0x02, 0x13, 0x16, 0x72, 0x65, 0x69, 0xae, 0x85, 0x76, 0xe7, 0x2c, 0x9c, 0xe1,
	0x0d, 0x51, 0x9a, 0xb9, 0xad, 0x6e, 0x0b, 0xc9, 0x44, 0x51, 0x41, 0x74, 0xb2, 0x28, 0x72, 0x24,
	0x9e, 0x40, 0x57, 0xa8, 0x60, 0x51, 0x04, 0x17, 0xca, 0x8d, 0xaa, 0x97, 0x15, 0x4b, 0x15, 0xe9,
	0xa3, 0x4e, 0xfa, 0x45, 0x42, 0x55, 0xc9, 0x9c, 0xb8, 0x86, 0xf0, 0xed, 0x7e, 0xca, 0x37, 0xa2,
	0x62, 0x76, 0xa0, 0xc7, 0x29, 0xdf, 0x60, 0x03, 0xb0, 0xd8, 0x3f, 0xe2, 0x43, 0xb2, 0x3e, 0x6d,
	0xae, 0x74, 0x7c, 0x2b, 0xa4, 0x73, 0xcc, 0x5d, 0xd4, 0xc7, 0x0e, 0x2c, 0x26, 0x55, 0x31, 0x14,
	0xd1, 0x2d, 0xcd, 0x5c, 0x90, 0xb1, 0x65, 0xa8, 0x10, 0x0f, 0x8e, 0x66, 0x39, 0x5b, 0xdf, 0xb2,
	0xb8, 0x4c, 0x6f, 0x69, 0xe2, 0x3a, 0x82, 0xe0, 0x47, 0xeb, 0x1d, 0x0c, 0x67, 0xf7, 0x3a, 0x2a,
	0x7f, 0xa1, 0x49, 0xb8, 0x8a, 0x96, 0xee, 0x91, 0xb0, 0x80, 0xe5, 0x16, 0xc1, 0x2c, 0xbe, 0x89,
	0xca, 0xe4, 0xaa, 0x58, 0xe7, 0x31, 0x4d, 0xdc, 0x63, 0x61, 0xe0, 0x2c, 0x6a, 0x88, 0x7c, 0x00,
	0xc7, 0xd3, 0x82, 0x47, 0x59, 0x48, 0x19, 0x4b, 0x8b, 0x9c, 0xb9, 0x27, 0x62, 0x50, 0x8e, 0xf9,
	0x2e, 0xe8, 0xfd, 0xdb, 0x04, 0x07, 0x19, 0x17, 0xd0, 0x5f, 0xd7, 0x94, 0xf1, 0xfd, 0xd1, 0xd7,
	0x0e, 0x47, 0xbf, 0xa6, 0x67, 0x73, 0x8f, 0x9e, 0x7b, 0x5b, 0x4a, 0xbf, 0x63, 0x4b, 0x5d, 0x53,
	0xc6, 0xa2, 0x39, 0x9d, 0x16, 0xaa, 0x1b, 0xf6, 0xb2, 0x02, 0xe4, 0x28, 0xce, 0xe9, 0xac, 0xcc,
	0x2a, 0xfa, 0xae, 0xa4, 0x8a, 0x7e, 0x78, 0x32, 0x4d, 0x79, 0x46, 0x55, 0x33, 0xec, 0x55, 0x05,
	0xa0, 0x9f, 0xba, 0x55, 0x35, 0xc4, 0x52, 0x77, 0x92, 0x0b, 0x38, 0xbd, 0x2a, 0x8b, 0xdf, 0x18,
	0x2d, 0x47, 0x51, 0x3e, 0x5f, 0xa3, 0x85, 0x2d, 0x2c, 0x4e, 0x6f, 0xf7, 0x61, 0xec, 0xea, 0xd6,
	0x04, 0x64, 0x57, 0xb3, 0xea, 0xec, 0x53, 0x80, 0x01, 0x7d, 0x99, 0xc6, 0x54, 0x4c, 0x8f, 0x23,
	0xa6, 0x47, 0x11, 0xbf, 0xc6, 0x03, 0x48, 0xb6, 0x32, 0xf1, 0xe4, 0x5e, 0x17, 0xdd, 0x72, 0x2e,
	0x4f, 0xea, 0xad, 0x86, 0x4c, 0x0f, 0x74, 0x64, 0xb6, 0xf7, 0x11, 0x18, 0x58, 0x41, 0x86, 0x3b,
	0x50, 0x08, 0x6a, 0xb1, 0x40, 0xbd, 0x13, 0x02, 0x03, 0x45, 0xe6, 0x4d, 0xe0, 0xfe, 0x28, 0x65,
	0x5c, 0x6c, 0xca, 0x59, 0x5e, 0xd2, 0x28, 0x79, 0xb3, 0x26, 0xb9, 0x60, 0xc9, 0x91, 0x62, 0x6e,
	0x53, 0xd2, 0x51, 0xce, 0x14, 0xf3, 0x9e, 0x82, 0x29, 0x2f, 0xda, 0xb5, 0x91, 0xfe, 0x95, 0x8d,
	0x18, 0x48, 0x61, 0x23, 0x5a, 0x6c, 0x04, 0xe6, 0x5a, 0x68, 0xde, 0x13, 0x70, 0x76, 0x22, 0x21,
	0x1f, 0x82, 0x25, 0xa5, 0x2a, 0x81, 0x23, 0x95, 0xae, 0x0c, 0xd4, 0x92, 0x5e, 0xcc, 0xfb, 0x09,
	0xce, 0x30, 0x89, 0x7a, 0x61, 0xaa, 0x14, 0x6a, 0x26, 0x69, 0x7b, 0x4c, 0xc2, 0x59, 0xe2, 0x51,
	0x59, 0x53, 0xcc, 0x62, 0x52, 0x15, 0xb3, 0x94, 0x2e, 0x53, 0x2e, 0x36, 0xa3, 0x11, 0x18, 0x19,
	0x2a, 0xde, 0x5f, 0x1a, 0xbc, 0x5d, 0x3d, 0x70, 0xb5, 0x11, 0x9f, 0x90, 0x37, 0x2a, 0xd2, 0x1e,
	0x63, 0x9b, 0x87, 0x8c, 0xad, 0xb7, 0x52, 0x6b, 0x6f, 0x2b, 0xed, 0x44, 0xa7, 0xff, 0x4f, 0x74,
	0xc6, 0x4e, 0x74, 0x8f, 0x22, 0x38, 0xde, 0xdb, 0xf2, 0xc4, 0x01, 0xeb, 0xda, 0x0f, 0xc3, 0xde,
	0x33, 0xbf, 0xd3, 0x20, 0x00, 0xe6, 0xcd, 0xc4, 0x1f, 0xfb, 0x83, 0x8e, 0x86, 0x72, 0x7f, 0x74,
	0x13, 0xfa, 0x83, 0x4e, 0x13, 0xe5, 0x6f, 0x6f, 0x86, 0x88, 0xb7, 0x50, 0x1e, 0xf9, 0xbd, 0x17,
	0xfe, 0xa0, 0xa3, 0x93, 0x36, 0xe8, 0xa1, 0xef, 0x8f, 0x3b, 0x06, 0xb1, 0xc1, 0x08, 0x7a, 0x53,
	0x7f, 0xd0, 0x31, 0x1f, 0x7d, 0xbe, 0xb3, 0xe3, 0xc9, 0x31, 0xd8, 0xb3, 0xf1, 0xc0, 0xff, 0x5a,
	0x38, 0x37, 0xd0, 0x61, 0x16, 0xfa, 0x41, 0x47, 0x43, 0x87, 0xde, 0x33, 0x7f, 0x3c, 0x95, 0xb7,
	0x87, 0x3f, 0x84, 0x53, 0xff, 0xba, 0xd3, 0x7a, 0xf4, 0xd5, 0x2e, 0xc7, 0x31, 0xb8, 0xd9, 0xf8,
	0xf9, 0xf8, 0xe6, 0xbb, 0xb1, 0x0c, 0xee, 0xfa, 0xe6, 0x6a, 0x38, 0xf2, 0x65, 0x70, 0xd3, 0xde,
	0xd5, 0xc8, 0x47, 0x77, 0x07, 0xac, 0x81, 0x1f, 0x3e, 0x9f, 0xde, 0x4c, 0x3a, 0xad, 0xcb, 0xbf,
	0x9b, 0x60, 0x61, 0x82, 0xd7, 0xf3, 0x92, 0xbc, 0x07, 0xfa, 0x24, 0xcd, 0xe7, 0xa4, 0x2d, 0x89,
	0x30, 0x4c, 0xce, 0x1d, 0x29, 0xc9, 0xad, 0xdf, 0x20, 0xef, 0x83, 0x8e, 0xdf, 0x30, 0x72, 0xf8,
	0x0d, 0x3d, 0xdf, 0x7a, 0x78, 0x0d, 0x72, 0x01, 0x56, 0xd5, 0xc0, 0x7b, 0x3b, 0x23, 0x21, 0xa1,
	0x3d, 0xcb, 0x01, 0x9c, 0x1e, 0x8c, 0x07, 0x79, 0x20, 0x8f, 0xef, 0x9e, 0x9a, 0xf3, 0x7b, 0xf5,
	0x40, 0xaa, 0x13, 0xaf, 0x41, 0xbe, 0x94, 0xb7, 0x88, 0x51, 0x94, 0xfc, 0x21, 0xef, 0xd4, 0xb7,
	0xbc, 0xc6, 0xaa, 0x2a, 0x27, 0x61, 0xef, 0x35, 0xc8, 0x17, 0x00, 0x68, 0xa7, 0xfe, 0x2d, 0x9c,
	0xef, 0x7b, 0xee, 0x12, 0xfe, 0xbc, 0x73, 0x90, 0x35, 0xf3, 0x1a, 0xb7, 0xa6, 0xf8, 0x5b, 0xf8,
	0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x10, 0x97, 0xa7, 0x05, 0x29, 0x0a, 0x00, 0x00,
}
