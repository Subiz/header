// Code generated by protoc-gen-go.
// source: chat/chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat/chat.proto

It has these top-level messages:
	Id
	Empty
	Rule
	Condition
	Route
	RouteResult
	GroupDeleteEvent
	GroupUpdateEvent
	AgentDeletedEvent
	AgentUpdateEvent
	Ids
	User
	Chat
	ChatsWithEvents
	ChatWithEvents
	Attachment
	ChatEvents
	ChatEvent
	UserInfo
	ChatRequest
	Chats
	ChatStart
	AcceptRequest
	ListUnassignChatsRequest
	UnassignChat
	Bools
	ListUsersUnreadRequest
	Unread
	UsersUnread
	ListChatEventRequest
	ListChatsByUserRequest
	EvChatSent
	EvChatAssigned
	EvChatWaiting
	EvChatStartRequested
	EvChatSendRequested
	EvChatAcceptRequested
	EvChatCreated
	EvChatResult
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error int32

const (
	Error_OK           Error = 0
	Error_NoRouteMatch Error = 1
	Error_NotFound     Error = 404
	Error_AccessDeny   Error = 400
)

var Error_name = map[int32]string{
	0:   "OK",
	1:   "NoRouteMatch",
	404: "NotFound",
	400: "AccessDeny",
}
var Error_value = map[string]int32{
	"OK":           0,
	"NoRouteMatch": 1,
	"NotFound":     404,
	"AccessDeny":   400,
}

func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (Error) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JoinOperator int32

const (
	JoinOperator_None JoinOperator = 0
	JoinOperator_And  JoinOperator = 1
	JoinOperator_Or   JoinOperator = 2
)

var JoinOperator_name = map[int32]string{
	0: "None",
	1: "And",
	2: "Or",
}
var JoinOperator_value = map[string]int32{
	"None": 0,
	"And":  1,
	"Or":   2,
}

func (x JoinOperator) String() string {
	return proto.EnumName(JoinOperator_name, int32(x))
}
func (JoinOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AssignStrategy int32

const (
	AssignStrategy_Unsetted            AssignStrategy = 0
	AssignStrategy_AllAgents           AssignStrategy = 1
	AssignStrategy_AgentGroup          AssignStrategy = 2
	AssignStrategy_SpecificAgent       AssignStrategy = 3
	AssignStrategy_MostRecent          AssignStrategy = 4
	AssignStrategy_RoundRobinAllAgents AssignStrategy = 5
	AssignStrategy_RoundRobinAgents    AssignStrategy = 6
)

var AssignStrategy_name = map[int32]string{
	0: "Unsetted",
	1: "AllAgents",
	2: "AgentGroup",
	3: "SpecificAgent",
	4: "MostRecent",
	5: "RoundRobinAllAgents",
	6: "RoundRobinAgents",
}
var AssignStrategy_value = map[string]int32{
	"Unsetted":            0,
	"AllAgents":           1,
	"AgentGroup":          2,
	"SpecificAgent":       3,
	"MostRecent":          4,
	"RoundRobinAllAgents": 5,
	"RoundRobinAgents":    6,
}

func (x AssignStrategy) String() string {
	return proto.EnumName(AssignStrategy_name, int32(x))
}
func (AssignStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ChatEventType int32

const (
	ChatEventType_NONE    ChatEventType = 0
	ChatEventType_MESSAGE ChatEventType = 1
	ChatEventType_CLOSED  ChatEventType = 3
	ChatEventType_JOINED  ChatEventType = 4
	// 	LEFT = 5; // Content = leaver, attachments = null
	ChatEventType_SEEN     ChatEventType = 6
	ChatEventType_RATED    ChatEventType = 7
	ChatEventType_INPUT    ChatEventType = 8
	ChatEventType_TAG      ChatEventType = 9
	ChatEventType_UNTAG    ChatEventType = 10
	ChatEventType_TRANSFER ChatEventType = 11
)

var ChatEventType_name = map[int32]string{
	0:  "NONE",
	1:  "MESSAGE",
	3:  "CLOSED",
	4:  "JOINED",
	6:  "SEEN",
	7:  "RATED",
	8:  "INPUT",
	9:  "TAG",
	10: "UNTAG",
	11: "TRANSFER",
}
var ChatEventType_value = map[string]int32{
	"NONE":     0,
	"MESSAGE":  1,
	"CLOSED":   3,
	"JOINED":   4,
	"SEEN":     6,
	"RATED":    7,
	"INPUT":    8,
	"TAG":      9,
	"UNTAG":    10,
	"TRANSFER": 11,
}

func (x ChatEventType) String() string {
	return proto.EnumName(ChatEventType_name, int32(x))
}
func (ChatEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UserType int32

const (
	UserType_UndefinedUserType UserType = 0
	UserType_Visitor           UserType = 1
	UserType_Agent             UserType = 2
	UserType_System            UserType = 3
)

var UserType_name = map[int32]string{
	0: "UndefinedUserType",
	1: "Visitor",
	2: "Agent",
	3: "System",
}
var UserType_value = map[string]int32{
	"UndefinedUserType": 0,
	"Visitor":           1,
	"Agent":             2,
	"System":            3,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}
func (UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeviceType int32

const (
	DeviceType_UNKNOWN DeviceType = 0
	DeviceType_MOBILE  DeviceType = 1
	DeviceType_TABLET  DeviceType = 2
	DeviceType_DESKTOP DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MOBILE",
	2: "TABLET",
	3: "DESKTOP",
}
var DeviceType_value = map[string]int32{
	"UNKNOWN": 0,
	"MOBILE":  1,
	"TABLET":  2,
	"DESKTOP": 3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Event int32

const (
	Event_Chat_Error    Event = 0
	Event_Chat_Sent     Event = 1
	Event_Chat_Assigned Event = 2
)

var Event_name = map[int32]string{
	0: "Chat_Error",
	1: "Chat_Sent",
	2: "Chat_Assigned",
}
var Event_value = map[string]int32{
	"Chat_Error":    0,
	"Chat_Sent":     1,
	"Chat_Assigned": 2,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Rule struct {
	Id         string         `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	AccountId  string         `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	Priority   string         `protobuf:"bytes,3,opt,name=Priority,json=priority" json:"Priority,omitempty"`
	Strategy   AssignStrategy `protobuf:"varint,4,opt,name=Strategy,json=strategy,enum=chat.AssignStrategy" json:"Strategy,omitempty"`
	AgentIds   []string       `protobuf:"bytes,5,rep,name=AgentIds,json=agentIds" json:"AgentIds,omitempty"`
	Conditions []*Condition   `protobuf:"bytes,6,rep,name=Conditions,json=conditions" json:"Conditions,omitempty"`
	IsDisabled bool           `protobuf:"varint,7,opt,name=IsDisabled,json=isDisabled" json:"IsDisabled,omitempty"`
	CTime      string         `protobuf:"bytes,8,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Rule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rule) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Rule) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *Rule) GetStrategy() AssignStrategy {
	if m != nil {
		return m.Strategy
	}
	return AssignStrategy_Unsetted
}

func (m *Rule) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *Rule) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Rule) GetIsDisabled() bool {
	if m != nil {
		return m.IsDisabled
	}
	return false
}

func (m *Rule) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

type Condition struct {
	Join     JoinOperator `protobuf:"varint,1,opt,name=Join,json=join,enum=chat.JoinOperator" json:"Join,omitempty"`
	Key      string       `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
	Operator string       `protobuf:"bytes,3,opt,name=Operator,json=operator" json:"Operator,omitempty"`
	Value    []string     `protobuf:"bytes,4,rep,name=Value,json=value" json:"Value,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Condition) GetJoin() JoinOperator {
	if m != nil {
		return m.Join
	}
	return JoinOperator_None
}

func (m *Condition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Condition) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Condition) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Route struct {
	Route []*Rule `protobuf:"bytes,1,rep,name=Route,json=route" json:"Route,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Route) GetRoute() []*Rule {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteResult struct {
	RuleId   string         `protobuf:"bytes,1,opt,name=RuleId,json=ruleId" json:"RuleId,omitempty"`
	Strategy AssignStrategy `protobuf:"varint,3,opt,name=Strategy,json=strategy,enum=chat.AssignStrategy" json:"Strategy,omitempty"`
	AgentIds []string       `protobuf:"bytes,4,rep,name=AgentIds,json=agentIds" json:"AgentIds,omitempty"`
}

func (m *RouteResult) Reset()                    { *m = RouteResult{} }
func (m *RouteResult) String() string            { return proto.CompactTextString(m) }
func (*RouteResult) ProtoMessage()               {}
func (*RouteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RouteResult) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RouteResult) GetStrategy() AssignStrategy {
	if m != nil {
		return m.Strategy
	}
	return AssignStrategy_Unsetted
}

func (m *RouteResult) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

type GroupDeleteEvent struct {
	GroupId string `protobuf:"bytes,1,opt,name=GroupId,json=groupId" json:"GroupId,omitempty"`
}

func (m *GroupDeleteEvent) Reset()                    { *m = GroupDeleteEvent{} }
func (m *GroupDeleteEvent) String() string            { return proto.CompactTextString(m) }
func (*GroupDeleteEvent) ProtoMessage()               {}
func (*GroupDeleteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GroupDeleteEvent) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type GroupUpdateEvent struct {
	GroupId   string   `protobuf:"bytes,1,opt,name=GroupId,json=groupId" json:"GroupId,omitempty"`
	MemberIds []string `protobuf:"bytes,2,rep,name=MemberIds,json=memberIds" json:"MemberIds,omitempty"`
}

func (m *GroupUpdateEvent) Reset()                    { *m = GroupUpdateEvent{} }
func (m *GroupUpdateEvent) String() string            { return proto.CompactTextString(m) }
func (*GroupUpdateEvent) ProtoMessage()               {}
func (*GroupUpdateEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupUpdateEvent) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupUpdateEvent) GetMemberIds() []string {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

type AgentDeletedEvent struct {
	AgentId string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
}

func (m *AgentDeletedEvent) Reset()                    { *m = AgentDeletedEvent{} }
func (m *AgentDeletedEvent) String() string            { return proto.CompactTextString(m) }
func (*AgentDeletedEvent) ProtoMessage()               {}
func (*AgentDeletedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AgentDeletedEvent) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type AgentUpdateEvent struct {
	AgentId     string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	IsActive    bool   `protobuf:"varint,2,opt,name=IsActive,json=isActive" json:"IsActive,omitempty"`
	IsConfirmed bool   `protobuf:"varint,3,opt,name=IsConfirmed,json=isConfirmed" json:"IsConfirmed,omitempty"`
}

func (m *AgentUpdateEvent) Reset()                    { *m = AgentUpdateEvent{} }
func (m *AgentUpdateEvent) String() string            { return proto.CompactTextString(m) }
func (*AgentUpdateEvent) ProtoMessage()               {}
func (*AgentUpdateEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AgentUpdateEvent) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AgentUpdateEvent) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *AgentUpdateEvent) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

type Ids struct {
	Ids []string `protobuf:"bytes,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type User struct {
	Id         string   `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Type       UserType `protobuf:"varint,4,opt,name=Type,json=type,enum=chat.UserType" json:"Type,omitempty"`
	LastSeenId string   `protobuf:"bytes,5,opt,name=LastSeenId,json=lastSeenId" json:"LastSeenId,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return UserType_UndefinedUserType
}

func (m *User) GetLastSeenId() string {
	if m != nil {
		return m.LastSeenId
	}
	return ""
}

// get number of unread message
type Chat struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	// Creation time
	CTime string `protobuf:"bytes,3,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	// Last active time
	LTime string `protobuf:"bytes,4,opt,name=LTime,json=lTime" json:"LTime,omitempty"`
	// Closed time
	XTime        string   `protobuf:"bytes,5,opt,name=XTime,json=xTime" json:"XTime,omitempty"`
	Users        []*User  `protobuf:"bytes,6,rep,name=Users,json=users" json:"Users,omitempty"`
	EventsCount  int32    `protobuf:"varint,8,opt,name=EventsCount,json=eventsCount" json:"EventsCount,omitempty"`
	ChannelId    string   `protobuf:"bytes,9,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	Tags         []string `protobuf:"bytes,10,rep,name=Tags,json=tags" json:"Tags,omitempty"`
	MutedUserIds []*Id    `protobuf:"bytes,11,rep,name=MutedUserIds,json=mutedUserIds" json:"MutedUserIds,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Chat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chat) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Chat) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Chat) GetLTime() string {
	if m != nil {
		return m.LTime
	}
	return ""
}

func (m *Chat) GetXTime() string {
	if m != nil {
		return m.XTime
	}
	return ""
}

func (m *Chat) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Chat) GetEventsCount() int32 {
	if m != nil {
		return m.EventsCount
	}
	return 0
}

func (m *Chat) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Chat) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Chat) GetMutedUserIds() []*Id {
	if m != nil {
		return m.MutedUserIds
	}
	return nil
}

type ChatsWithEvents struct {
	Chats []*ChatWithEvents `protobuf:"bytes,1,rep,name=Chats,json=chats" json:"Chats,omitempty"`
}

func (m *ChatsWithEvents) Reset()                    { *m = ChatsWithEvents{} }
func (m *ChatsWithEvents) String() string            { return proto.CompactTextString(m) }
func (*ChatsWithEvents) ProtoMessage()               {}
func (*ChatsWithEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ChatsWithEvents) GetChats() []*ChatWithEvents {
	if m != nil {
		return m.Chats
	}
	return nil
}

type ChatWithEvents struct {
	Chat   *Chat        `protobuf:"bytes,1,opt,name=Chat,json=chat" json:"Chat,omitempty"`
	Events []*ChatEvent `protobuf:"bytes,2,rep,name=Events,json=events" json:"Events,omitempty"`
}

func (m *ChatWithEvents) Reset()                    { *m = ChatWithEvents{} }
func (m *ChatWithEvents) String() string            { return proto.CompactTextString(m) }
func (*ChatWithEvents) ProtoMessage()               {}
func (*ChatWithEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChatWithEvents) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChatWithEvents) GetEvents() []*ChatEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type Attachment struct {
	// Type show type of attachment
	// Value:
	//   Template
	//     - file
	//       + video
	//       + audio
	//       + image
	//     - preview (preview for link)
	//     - content
	//     - template
	//
	//       + receipt, ticket, ...
	//     - quick_replies
	//       + ask_form
	//       + generic_template
	//       + list_template
	//   Input control
	//     - button           -> send list of event to chat
	//     - url
	//     - postback_button (single button)
	//     - textbox           -> contains value
	//     - ratebox            -> rate the chat (like 5 buttons but have beautiful display)
	Type    string `protobuf:"bytes,1,opt,name=Type,json=type" json:"Type,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=Payload,json=payload" json:"Payload,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Attachment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Attachment) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ChatEvents struct {
	Events []*ChatEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events,omitempty"`
}

func (m *ChatEvents) Reset()                    { *m = ChatEvents{} }
func (m *ChatEvents) String() string            { return proto.CompactTextString(m) }
func (*ChatEvents) ProtoMessage()               {}
func (*ChatEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ChatEvents) GetEvents() []*ChatEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type ChatEvent struct {
	// ID of chat evet
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// Type indicates type of chat event
	Type ChatEventType `protobuf:"varint,2,opt,name=Type,json=type,enum=chat.ChatEventType" json:"Type,omitempty"`
	// ChatId refer to ID of chat which contains this chat event
	ChatId string `protobuf:"bytes,3,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	// CTime is a RFC3339 string, tell when was event sent
	CTime string `protobuf:"bytes,5,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	// SenderId refer to who has sent the event, could be Agent, User or System
	SenderId string `protobuf:"bytes,6,opt,name=SenderId,json=senderId" json:"SenderId,omitempty"`
	// SenderType indicate type of sender
	SenderType UserType `protobuf:"varint,7,opt,name=SenderType,json=senderType,enum=chat.UserType" json:"SenderType,omitempty"`
	// Content could be raw text, could be JSON data based on type
	Text string `protobuf:"bytes,8,opt,name=Text,json=text" json:"Text,omitempty"`
	// Could be "", "raw" or "markdown"
	Format      string        `protobuf:"bytes,9,opt,name=Format,json=format" json:"Format,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,10,rep,name=Attachments,json=attachments" json:"Attachments,omitempty"`
}

func (m *ChatEvent) Reset()                    { *m = ChatEvent{} }
func (m *ChatEvent) String() string            { return proto.CompactTextString(m) }
func (*ChatEvent) ProtoMessage()               {}
func (*ChatEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ChatEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChatEvent) GetType() ChatEventType {
	if m != nil {
		return m.Type
	}
	return ChatEventType_NONE
}

func (m *ChatEvent) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatEvent) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *ChatEvent) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *ChatEvent) GetSenderType() UserType {
	if m != nil {
		return m.SenderType
	}
	return UserType_UndefinedUserType
}

func (m *ChatEvent) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChatEvent) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ChatEvent) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type UserInfo struct {
	Id          string   `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Emails      []string `protobuf:"bytes,3,rep,name=Emails,json=emails" json:"Emails,omitempty"`
	Phones      []string `protobuf:"bytes,4,rep,name=Phones,json=phones" json:"Phones,omitempty"`
	Country     string   `protobuf:"bytes,5,opt,name=Country,json=country" json:"Country,omitempty"`
	CountryCode string   `protobuf:"bytes,6,opt,name=CountryCode,json=countryCode" json:"CountryCode,omitempty"`
	City        string   `protobuf:"bytes,7,opt,name=City,json=city" json:"City,omitempty"`
	TimeZone    string   `protobuf:"bytes,8,opt,name=TimeZone,json=timeZone" json:"TimeZone,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *UserInfo) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

type ChatRequest struct {
	AccountId       string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChannelId       string     `protobuf:"bytes,4,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	MessageTo       string     `protobuf:"bytes,5,opt,name=MessageTo,json=messageTo" json:"MessageTo,omitempty"`
	PageUrl         string     `protobuf:"bytes,6,opt,name=PageUrl,json=pageUrl" json:"PageUrl,omitempty"`
	PageTitle       string     `protobuf:"bytes,7,opt,name=PageTitle,json=pageTitle" json:"PageTitle,omitempty"`
	Message         string     `protobuf:"bytes,8,opt,name=Message,json=message" json:"Message,omitempty"`
	BrowserLanguage string     `protobuf:"bytes,9,opt,name=BrowserLanguage,json=browserLanguage" json:"BrowserLanguage,omitempty"`
	Language        string     `protobuf:"bytes,10,opt,name=Language,json=language" json:"Language,omitempty"`
	DeviceType      DeviceType `protobuf:"varint,11,opt,name=DeviceType,json=deviceType,enum=chat.DeviceType" json:"DeviceType,omitempty"`
	UserId          string     `protobuf:"bytes,12,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	CTime           string     `protobuf:"bytes,13,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ChatRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ChatRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChatRequest) GetMessageTo() string {
	if m != nil {
		return m.MessageTo
	}
	return ""
}

func (m *ChatRequest) GetPageUrl() string {
	if m != nil {
		return m.PageUrl
	}
	return ""
}

func (m *ChatRequest) GetPageTitle() string {
	if m != nil {
		return m.PageTitle
	}
	return ""
}

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequest) GetBrowserLanguage() string {
	if m != nil {
		return m.BrowserLanguage
	}
	return ""
}

func (m *ChatRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ChatRequest) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_UNKNOWN
}

func (m *ChatRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ChatRequest) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

type Chats struct {
	Chats []*Chat `protobuf:"bytes,1,rep,name=Chats,json=chats" json:"Chats,omitempty"`
}

func (m *Chats) Reset()                    { *m = Chats{} }
func (m *Chats) String() string            { return proto.CompactTextString(m) }
func (*Chats) ProtoMessage()               {}
func (*Chats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Chats) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

type ChatStart struct {
	AgentId   string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	ChannelId string `protobuf:"bytes,3,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
}

func (m *ChatStart) Reset()                    { *m = ChatStart{} }
func (m *ChatStart) String() string            { return proto.CompactTextString(m) }
func (*ChatStart) ProtoMessage()               {}
func (*ChatStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ChatStart) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *ChatStart) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ChatStart) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type AcceptRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	AgentId   string `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	ChatId    string `protobuf:"bytes,3,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
}

func (m *AcceptRequest) Reset()                    { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()               {}
func (*AcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AcceptRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AcceptRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AcceptRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type ListUnassignChatsRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	StartId   string `protobuf:"bytes,2,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListUnassignChatsRequest) Reset()                    { *m = ListUnassignChatsRequest{} }
func (m *ListUnassignChatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUnassignChatsRequest) ProtoMessage()               {}
func (*ListUnassignChatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ListUnassignChatsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListUnassignChatsRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListUnassignChatsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UnassignChat struct {
	AccountId  string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	IsAssigned bool     `protobuf:"varint,2,opt,name=IsAssigned,json=isAssigned" json:"IsAssigned,omitempty"`
	Message    string   `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
	Ip         string   `protobuf:"bytes,4,opt,name=Ip,json=ip" json:"Ip,omitempty"`
	Name       string   `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	Emails     []string `protobuf:"bytes,6,rep,name=Emails,json=emails" json:"Emails,omitempty"`
	Phones     []string `protobuf:"bytes,7,rep,name=Phones,json=phones" json:"Phones,omitempty"`
}

func (m *UnassignChat) Reset()                    { *m = UnassignChat{} }
func (m *UnassignChat) String() string            { return proto.CompactTextString(m) }
func (*UnassignChat) ProtoMessage()               {}
func (*UnassignChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UnassignChat) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UnassignChat) GetIsAssigned() bool {
	if m != nil {
		return m.IsAssigned
	}
	return false
}

func (m *UnassignChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UnassignChat) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UnassignChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnassignChat) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *UnassignChat) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

type Bools struct {
	Bools []bool `protobuf:"varint,1,rep,packed,name=Bools,json=bools" json:"Bools,omitempty"`
}

func (m *Bools) Reset()                    { *m = Bools{} }
func (m *Bools) String() string            { return proto.CompactTextString(m) }
func (*Bools) ProtoMessage()               {}
func (*Bools) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Bools) GetBools() []bool {
	if m != nil {
		return m.Bools
	}
	return nil
}

type ListUsersUnreadRequest struct {
	AccountId string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	AgentId   string   `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	UserIds   []string `protobuf:"bytes,3,rep,name=UserIds,json=userIds" json:"UserIds,omitempty"`
}

func (m *ListUsersUnreadRequest) Reset()                    { *m = ListUsersUnreadRequest{} }
func (m *ListUsersUnreadRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersUnreadRequest) ProtoMessage()               {}
func (*ListUsersUnreadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ListUsersUnreadRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListUsersUnreadRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *ListUsersUnreadRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type Unread struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Unread int32  `protobuf:"varint,2,opt,name=Unread,json=unread" json:"Unread,omitempty"`
}

func (m *Unread) Reset()                    { *m = Unread{} }
func (m *Unread) String() string            { return proto.CompactTextString(m) }
func (*Unread) ProtoMessage()               {}
func (*Unread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Unread) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Unread) GetUnread() int32 {
	if m != nil {
		return m.Unread
	}
	return 0
}

type UsersUnread struct {
	Unreads []*Unread `protobuf:"bytes,1,rep,name=Unreads,json=unreads" json:"Unreads,omitempty"`
}

func (m *UsersUnread) Reset()                    { *m = UsersUnread{} }
func (m *UsersUnread) String() string            { return proto.CompactTextString(m) }
func (*UsersUnread) ProtoMessage()               {}
func (*UsersUnread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UsersUnread) GetUnreads() []*Unread {
	if m != nil {
		return m.Unreads
	}
	return nil
}

type ListChatEventRequest struct {
	// string AccountId = 1;
	ChatId  string `protobuf:"bytes,2,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	StartId string `protobuf:"bytes,3,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatEventRequest) Reset()                    { *m = ListChatEventRequest{} }
func (m *ListChatEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatEventRequest) ProtoMessage()               {}
func (*ListChatEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListChatEventRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ListChatEventRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatEventRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListChatsByUserRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	StartId   string `protobuf:"bytes,4,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit     int32  `protobuf:"varint,5,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListChatsByUserRequest) Reset()                    { *m = ListChatsByUserRequest{} }
func (m *ListChatsByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChatsByUserRequest) ProtoMessage()               {}
func (*ListChatsByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListChatsByUserRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListChatsByUserRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ListChatsByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListChatsByUserRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListChatsByUserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Topic Chat.Sent
type EvChatSent struct {
	RequestId string `protobuf:"bytes,1,opt,name=RequestId,json=requestId" json:"RequestId,omitempty"`
	Event     string `protobuf:"bytes,2,opt,name=Event,json=event" json:"Event,omitempty"`
	// ID of chat event, 128-bit, start with EVNT
	EventId string `protobuf:"bytes,3,opt,name=EventId,json=eventId" json:"EventId,omitempty"`
	// Type indicates type of chat event
	Type ChatEventType `protobuf:"varint,4,opt,name=Type,json=type,enum=chat.ChatEventType" json:"Type,omitempty"`
	// ChatId refer to ID of chat which contains this chat event
	ChatId    string `protobuf:"bytes,5,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	AccountId string `protobuf:"bytes,6,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	// CTime is a RFC3339 string, tell when was event sent
	CTime string `protobuf:"bytes,7,opt,name=CTime,json=cTime" json:"CTime,omitempty"`
	// SenderId refer to who has sent the event, could be Agent, User or System
	SenderId string `protobuf:"bytes,8,opt,name=SenderId,json=senderId" json:"SenderId,omitempty"`
	// SenderType indicate type of sender
	SenderType UserType `protobuf:"varint,9,opt,name=SenderType,json=senderType,enum=chat.UserType" json:"SenderType,omitempty"`
	// Content could be raw text, could be JSON data based on type
	Content     string        `protobuf:"bytes,10,opt,name=Content,json=content" json:"Content,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,11,rep,name=Attachments,json=attachments" json:"Attachments,omitempty"`
}

func (m *EvChatSent) Reset()                    { *m = EvChatSent{} }
func (m *EvChatSent) String() string            { return proto.CompactTextString(m) }
func (*EvChatSent) ProtoMessage()               {}
func (*EvChatSent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EvChatSent) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EvChatSent) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EvChatSent) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EvChatSent) GetType() ChatEventType {
	if m != nil {
		return m.Type
	}
	return ChatEventType_NONE
}

func (m *EvChatSent) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *EvChatSent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *EvChatSent) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *EvChatSent) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *EvChatSent) GetSenderType() UserType {
	if m != nil {
		return m.SenderType
	}
	return UserType_UndefinedUserType
}

func (m *EvChatSent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *EvChatSent) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// Topic Chat.Assigned
type EvChatAssigned struct {
	RequestId   string   `protobuf:"bytes,1,opt,name=RequestId,json=requestId" json:"RequestId,omitempty"`
	Event       string   `protobuf:"bytes,2,opt,name=Event,json=event" json:"Event,omitempty"`
	ChatId      string   `protobuf:"bytes,4,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	AccountId   string   `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	CreatedTime string   `protobuf:"bytes,5,opt,name=CreatedTime,json=createdTime" json:"CreatedTime,omitempty"`
	Users       []*User  `protobuf:"bytes,6,rep,name=Users,json=users" json:"Users,omitempty"`
	ChannelId   string   `protobuf:"bytes,7,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	Tags        []string `protobuf:"bytes,8,rep,name=Tags,json=tags" json:"Tags,omitempty"`
}

func (m *EvChatAssigned) Reset()                    { *m = EvChatAssigned{} }
func (m *EvChatAssigned) String() string            { return proto.CompactTextString(m) }
func (*EvChatAssigned) ProtoMessage()               {}
func (*EvChatAssigned) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EvChatAssigned) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EvChatAssigned) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EvChatAssigned) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *EvChatAssigned) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *EvChatAssigned) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *EvChatAssigned) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *EvChatAssigned) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EvChatAssigned) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Topic Chat.Waiting
type EvChatWaiting struct {
	RequestId   string   `protobuf:"bytes,1,opt,name=RequestId,json=requestId" json:"RequestId,omitempty"`
	Event       string   `protobuf:"bytes,2,opt,name=Event,json=event" json:"Event,omitempty"`
	ChatId      string   `protobuf:"bytes,4,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	AccountId   string   `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	CreatedTime string   `protobuf:"bytes,5,opt,name=CreatedTime,json=createdTime" json:"CreatedTime,omitempty"`
	Users       []*User  `protobuf:"bytes,6,rep,name=Users,json=users" json:"Users,omitempty"`
	ChannelId   string   `protobuf:"bytes,7,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	Tags        []string `protobuf:"bytes,8,rep,name=Tags,json=tags" json:"Tags,omitempty"`
}

func (m *EvChatWaiting) Reset()                    { *m = EvChatWaiting{} }
func (m *EvChatWaiting) String() string            { return proto.CompactTextString(m) }
func (*EvChatWaiting) ProtoMessage()               {}
func (*EvChatWaiting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *EvChatWaiting) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EvChatWaiting) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EvChatWaiting) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *EvChatWaiting) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *EvChatWaiting) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *EvChatWaiting) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *EvChatWaiting) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EvChatWaiting) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// lis
type EvChatStartRequested struct {
}

func (m *EvChatStartRequested) Reset()                    { *m = EvChatStartRequested{} }
func (m *EvChatStartRequested) String() string            { return proto.CompactTextString(m) }
func (*EvChatStartRequested) ProtoMessage()               {}
func (*EvChatStartRequested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type EvChatSendRequested struct {
}

func (m *EvChatSendRequested) Reset()                    { *m = EvChatSendRequested{} }
func (m *EvChatSendRequested) String() string            { return proto.CompactTextString(m) }
func (*EvChatSendRequested) ProtoMessage()               {}
func (*EvChatSendRequested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type EvChatAcceptRequested struct {
}

func (m *EvChatAcceptRequested) Reset()                    { *m = EvChatAcceptRequested{} }
func (m *EvChatAcceptRequested) String() string            { return proto.CompactTextString(m) }
func (*EvChatAcceptRequested) ProtoMessage()               {}
func (*EvChatAcceptRequested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type EvChatCreated struct {
	RequestId   string  `protobuf:"bytes,1,opt,name=RequestId,json=requestId" json:"RequestId,omitempty"`
	Event       string  `protobuf:"bytes,2,opt,name=Event,json=event" json:"Event,omitempty"`
	AccountId   string  `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	ChatId      string  `protobuf:"bytes,4,opt,name=ChatId,json=chatId" json:"ChatId,omitempty"`
	Users       []*User `protobuf:"bytes,5,rep,name=Users,json=users" json:"Users,omitempty"`
	ChannelId   string  `protobuf:"bytes,6,opt,name=ChannelId,json=channelId" json:"ChannelId,omitempty"`
	CreatedTime string  `protobuf:"bytes,7,opt,name=CreatedTime,json=createdTime" json:"CreatedTime,omitempty"`
}

func (m *EvChatCreated) Reset()                    { *m = EvChatCreated{} }
func (m *EvChatCreated) String() string            { return proto.CompactTextString(m) }
func (*EvChatCreated) ProtoMessage()               {}
func (*EvChatCreated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *EvChatCreated) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EvChatCreated) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EvChatCreated) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *EvChatCreated) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *EvChatCreated) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *EvChatCreated) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EvChatCreated) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

type EvChatResult struct {
	RequestId   string `protobuf:"bytes,1,opt,name=RequestId,json=requestId" json:"RequestId,omitempty"`
	Code        int32  `protobuf:"varint,2,opt,name=Code,json=code" json:"Code,omitempty"`
	CreatedTime string `protobuf:"bytes,3,opt,name=CreatedTime,json=createdTime" json:"CreatedTime,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,json=description" json:"Description,omitempty"`
}

func (m *EvChatResult) Reset()                    { *m = EvChatResult{} }
func (m *EvChatResult) String() string            { return proto.CompactTextString(m) }
func (*EvChatResult) ProtoMessage()               {}
func (*EvChatResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *EvChatResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *EvChatResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EvChatResult) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *EvChatResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "chat.Id")
	proto.RegisterType((*Empty)(nil), "chat.Empty")
	proto.RegisterType((*Rule)(nil), "chat.Rule")
	proto.RegisterType((*Condition)(nil), "chat.Condition")
	proto.RegisterType((*Route)(nil), "chat.Route")
	proto.RegisterType((*RouteResult)(nil), "chat.RouteResult")
	proto.RegisterType((*GroupDeleteEvent)(nil), "chat.GroupDeleteEvent")
	proto.RegisterType((*GroupUpdateEvent)(nil), "chat.GroupUpdateEvent")
	proto.RegisterType((*AgentDeletedEvent)(nil), "chat.AgentDeletedEvent")
	proto.RegisterType((*AgentUpdateEvent)(nil), "chat.AgentUpdateEvent")
	proto.RegisterType((*Ids)(nil), "chat.Ids")
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*Chat)(nil), "chat.Chat")
	proto.RegisterType((*ChatsWithEvents)(nil), "chat.ChatsWithEvents")
	proto.RegisterType((*ChatWithEvents)(nil), "chat.ChatWithEvents")
	proto.RegisterType((*Attachment)(nil), "chat.Attachment")
	proto.RegisterType((*ChatEvents)(nil), "chat.ChatEvents")
	proto.RegisterType((*ChatEvent)(nil), "chat.ChatEvent")
	proto.RegisterType((*UserInfo)(nil), "chat.UserInfo")
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*Chats)(nil), "chat.Chats")
	proto.RegisterType((*ChatStart)(nil), "chat.ChatStart")
	proto.RegisterType((*AcceptRequest)(nil), "chat.AcceptRequest")
	proto.RegisterType((*ListUnassignChatsRequest)(nil), "chat.ListUnassignChatsRequest")
	proto.RegisterType((*UnassignChat)(nil), "chat.UnassignChat")
	proto.RegisterType((*Bools)(nil), "chat.Bools")
	proto.RegisterType((*ListUsersUnreadRequest)(nil), "chat.ListUsersUnreadRequest")
	proto.RegisterType((*Unread)(nil), "chat.Unread")
	proto.RegisterType((*UsersUnread)(nil), "chat.UsersUnread")
	proto.RegisterType((*ListChatEventRequest)(nil), "chat.ListChatEventRequest")
	proto.RegisterType((*ListChatsByUserRequest)(nil), "chat.ListChatsByUserRequest")
	proto.RegisterType((*EvChatSent)(nil), "chat.EvChatSent")
	proto.RegisterType((*EvChatAssigned)(nil), "chat.EvChatAssigned")
	proto.RegisterType((*EvChatWaiting)(nil), "chat.EvChatWaiting")
	proto.RegisterType((*EvChatStartRequested)(nil), "chat.EvChatStartRequested")
	proto.RegisterType((*EvChatSendRequested)(nil), "chat.EvChatSendRequested")
	proto.RegisterType((*EvChatAcceptRequested)(nil), "chat.EvChatAcceptRequested")
	proto.RegisterType((*EvChatCreated)(nil), "chat.EvChatCreated")
	proto.RegisterType((*EvChatResult)(nil), "chat.EvChatResult")
	proto.RegisterEnum("chat.Error", Error_name, Error_value)
	proto.RegisterEnum("chat.JoinOperator", JoinOperator_name, JoinOperator_value)
	proto.RegisterEnum("chat.AssignStrategy", AssignStrategy_name, AssignStrategy_value)
	proto.RegisterEnum("chat.ChatEventType", ChatEventType_name, ChatEventType_value)
	proto.RegisterEnum("chat.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("chat.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("chat.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatMgr service

type ChatMgrClient interface {
	// COLLECTOR for channel only
	// fire EvChatSent
	Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Empty, error)
	// request chat from user
	// fire EvChatWaiting, EvChatCreated
	Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Empty, error)
	// start chat from agent
	// fire EvChatCreated
	Start(ctx context.Context, in *ChatStart, opts ...grpc.CallOption) (*Empty, error)
	// QUERRIER
	// List chats for specific use
	ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error)
	ListChatsByUser(ctx context.Context, in *ListChatsByUserRequest, opts ...grpc.CallOption) (*ChatsWithEvents, error)
	ListChatEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error)
	// Unassigned list
	ListUnassignedChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chats, error)
	AcceptUnassignedChat(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*Empty, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chat, error)
}

type chatMgrClient struct {
	cc *grpc.ClientConn
}

func NewChatMgrClient(cc *grpc.ClientConn) ChatMgrClient {
	return &chatMgrClient{cc}
}

func (c *chatMgrClient) Send(ctx context.Context, in *ChatEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Request(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Start(ctx context.Context, in *ChatStart, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListUsersUnread(ctx context.Context, in *ListUsersUnreadRequest, opts ...grpc.CallOption) (*UsersUnread, error) {
	out := new(UsersUnread)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListUsersUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListChatsByUser(ctx context.Context, in *ListChatsByUserRequest, opts ...grpc.CallOption) (*ChatsWithEvents, error) {
	out := new(ChatsWithEvents)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListChatsByUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListChatEvents(ctx context.Context, in *ListChatEventRequest, opts ...grpc.CallOption) (*ChatEvents, error) {
	out := new(ChatEvents)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListChatEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) ListUnassignedChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/ListUnassignedChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) AcceptUnassignedChat(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/AcceptUnassignedChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMgrClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := grpc.Invoke(ctx, "/chat.ChatMgr/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatMgr service

type ChatMgrServer interface {
	// COLLECTOR for channel only
	// fire EvChatSent
	Send(context.Context, *ChatEvent) (*Empty, error)
	// request chat from user
	// fire EvChatWaiting, EvChatCreated
	Request(context.Context, *ChatRequest) (*Empty, error)
	// start chat from agent
	// fire EvChatCreated
	Start(context.Context, *ChatStart) (*Empty, error)
	// QUERRIER
	// List chats for specific use
	ListUsersUnread(context.Context, *ListUsersUnreadRequest) (*UsersUnread, error)
	ListChatsByUser(context.Context, *ListChatsByUserRequest) (*ChatsWithEvents, error)
	ListChatEvents(context.Context, *ListChatEventRequest) (*ChatEvents, error)
	// Unassigned list
	ListUnassignedChats(context.Context, *Id) (*Chats, error)
	AcceptUnassignedChat(context.Context, *AcceptRequest) (*Empty, error)
	Read(context.Context, *Id) (*Chat, error)
}

func RegisterChatMgrServer(s *grpc.Server, srv ChatMgrServer) {
	s.RegisterService(&_ChatMgr_serviceDesc, srv)
}

func _ChatMgr_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Send(ctx, req.(*ChatEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Request(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Start(ctx, req.(*ChatStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListUsersUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListUsersUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListUsersUnread(ctx, req.(*ListUsersUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListChatsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListChatsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListChatsByUser(ctx, req.(*ListChatsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListChatEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListChatEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListChatEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListChatEvents(ctx, req.(*ListChatEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_ListUnassignedChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).ListUnassignedChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/ListUnassignedChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).ListUnassignedChats(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_AcceptUnassignedChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).AcceptUnassignedChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/AcceptUnassignedChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).AcceptUnassignedChat(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMgrServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatMgr",
	HandlerType: (*ChatMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatMgr_Send_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _ChatMgr_Request_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ChatMgr_Start_Handler,
		},
		{
			MethodName: "ListUsersUnread",
			Handler:    _ChatMgr_ListUsersUnread_Handler,
		},
		{
			MethodName: "ListChatsByUser",
			Handler:    _ChatMgr_ListChatsByUser_Handler,
		},
		{
			MethodName: "ListChatEvents",
			Handler:    _ChatMgr_ListChatEvents_Handler,
		},
		{
			MethodName: "ListUnassignedChats",
			Handler:    _ChatMgr_ListUnassignedChats_Handler,
		},
		{
			MethodName: "AcceptUnassignedChat",
			Handler:    _ChatMgr_AcceptUnassignedChat_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ChatMgr_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}

// Client API for Router service

type RouterClient interface {
	Assign(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*RouteResult, error)
	Update(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Empty, error)
	Create(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Id, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	// list ALL rules by account
	List(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Assign(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*RouteResult, error) {
	out := new(RouteResult)
	err := grpc.Invoke(ctx, "/chat.Router/Assign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Update(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.Router/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Create(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/chat.Router/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/chat.Router/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) List(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := grpc.Invoke(ctx, "/chat.Router/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	Assign(context.Context, *ChatRequest) (*RouteResult, error)
	Update(context.Context, *Rule) (*Empty, error)
	Create(context.Context, *Rule) (*Id, error)
	Delete(context.Context, *Id) (*Empty, error)
	// list ALL rules by account
	List(context.Context, *Id) (*Route, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Router/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Assign(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Router/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Update(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Router/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Create(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Router/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Router/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).List(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assign",
			Handler:    _Router_Assign_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Router_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Router_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Router_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Router_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}

func init() { proto.RegisterFile("chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x58, 0x4b, 0x73, 0x1b, 0x59,
	0x15, 0x56, 0xab, 0x5f, 0xd2, 0x91, 0x1f, 0x9d, 0x1b, 0x27, 0x51, 0xb9, 0x86, 0x60, 0x9a, 0xaa,
	0x3c, 0xcc, 0x90, 0x49, 0x99, 0x9a, 0x2a, 0x98, 0x2a, 0x28, 0x14, 0x5b, 0x09, 0x4a, 0x6c, 0x39,
	0xd5, 0x92, 0x27, 0x30, 0x54, 0x31, 0xd5, 0xee, 0xbe, 0x91, 0x3b, 0x48, 0xdd, 0xa2, 0xfb, 0x2a,
	0x13, 0xed, 0x58, 0xc0, 0x1a, 0x16, 0xac, 0x28, 0x8a, 0x1f, 0xc2, 0x9e, 0x0d, 0x7f, 0x81, 0x05,
	0x2b, 0x16, 0xac, 0xe0, 0x27, 0x50, 0xe7, 0xdc, 0xdb, 0x2f, 0xf9, 0x11, 0x67, 0xd8, 0xb1, 0xb1,
	0xfb, 0x7c, 0xf7, 0xea, 0x9c, 0x73, 0xbf, 0x7b, 0x5e, 0xdd, 0xb0, 0x19, 0x9c, 0xf9, 0xe2, 0x13,
	0xfc, 0xf3, 0x68, 0x9e, 0x26, 0x22, 0x61, 0x06, 0x3e, 0xbb, 0x5b, 0xd0, 0x1c, 0x84, 0x6c, 0x03,
	0xff, 0x76, 0xb5, 0x1d, 0xed, 0x41, 0xdb, 0x6b, 0x46, 0xa1, 0x6b, 0x83, 0xd9, 0x9f, 0xcd, 0xc5,
	0xd2, 0xfd, 0x6d, 0x13, 0x0c, 0x6f, 0x31, 0xe5, 0xab, 0x3b, 0xd8, 0x47, 0xd0, 0xee, 0x05, 0x41,
	0xb2, 0x88, 0xc5, 0x20, 0xec, 0x36, 0x09, 0x6e, 0xfb, 0x39, 0xc0, 0xb6, 0xa1, 0xf5, 0x32, 0x8d,
	0x92, 0x34, 0x12, 0xcb, 0xae, 0x4e, 0x8b, 0xad, 0xb9, 0x92, 0xd9, 0x63, 0x68, 0x8d, 0x44, 0xea,
	0x0b, 0x3e, 0x59, 0x76, 0x8d, 0x1d, 0xed, 0xc1, 0xc6, 0xde, 0xd6, 0x23, 0x72, 0xab, 0x97, 0x65,
	0xd1, 0x24, 0xce, 0xd7, 0xbc, 0x56, 0xa6, 0x9e, 0x50, 0x5b, 0x6f, 0xc2, 0x51, 0x71, 0xd6, 0x35,
	0x77, 0x74, 0xd4, 0xe6, 0x2b, 0x99, 0x7d, 0x02, 0xb0, 0x9f, 0xc4, 0x61, 0x24, 0xa2, 0x24, 0xce,
	0xba, 0xd6, 0x8e, 0xfe, 0xa0, 0xb3, 0xb7, 0x29, 0xf5, 0x15, 0xb8, 0x07, 0x41, 0xb1, 0x85, 0xdd,
	0x05, 0x18, 0x64, 0x07, 0x51, 0xe6, 0x9f, 0x4e, 0x79, 0xd8, 0xb5, 0x77, 0xb4, 0x07, 0x2d, 0x0f,
	0xa2, 0x02, 0x61, 0x5b, 0x60, 0xee, 0x8f, 0xa3, 0x19, 0xef, 0xb6, 0xc8, 0x6f, 0x33, 0x40, 0xc1,
	0xfd, 0x0a, 0xda, 0x85, 0x3a, 0x76, 0x0f, 0x8c, 0xe7, 0x49, 0x14, 0x13, 0x1b, 0x1b, 0x7b, 0x4c,
	0x5a, 0x43, 0xe4, 0x78, 0xce, 0x53, 0x5f, 0x24, 0xa9, 0x67, 0xbc, 0x49, 0xa2, 0x98, 0x39, 0xa0,
	0xbf, 0xe0, 0x4b, 0xc5, 0x8e, 0xfe, 0x4b, 0x4e, 0x27, 0xc9, 0xf7, 0xe4, 0xbc, 0x24, 0x4a, 0x46,
	0xc3, 0x9f, 0xfb, 0xd3, 0x05, 0xef, 0x1a, 0x74, 0x44, 0xf3, 0x2d, 0x0a, 0xee, 0x43, 0x30, 0xbd,
	0x64, 0x21, 0x38, 0xdb, 0x51, 0x0f, 0x5d, 0x8d, 0xce, 0x08, 0xd2, 0x2a, 0xde, 0x8d, 0x67, 0xa6,
	0xb8, 0xe0, 0x66, 0xd0, 0xa1, 0x1d, 0x1e, 0xcf, 0x16, 0x53, 0xc1, 0x6e, 0x83, 0x85, 0xab, 0xc5,
	0xad, 0x59, 0x29, 0x49, 0x35, 0xfe, 0xf5, 0x0f, 0xe6, 0xdf, 0xa8, 0xf3, 0xef, 0x7e, 0x0c, 0xce,
	0xb3, 0x34, 0x59, 0xcc, 0x0f, 0xf8, 0x94, 0x0b, 0xde, 0x7f, 0xcb, 0x63, 0xc1, 0xba, 0x60, 0x13,
	0x56, 0x98, 0xb6, 0x27, 0x52, 0x74, 0x9f, 0xab, 0xdd, 0x27, 0xf3, 0xd0, 0x7f, 0xef, 0x6e, 0x8c,
	0xb1, 0x23, 0x3e, 0x3b, 0xe5, 0x29, 0x1a, 0x6e, 0x92, 0xe1, 0xf6, 0x2c, 0x07, 0xdc, 0xef, 0xc2,
	0x0d, 0xf2, 0x4a, 0x5a, 0x0e, 0x0b, 0x65, 0xca, 0xd5, 0x5c, 0x99, 0xf2, 0xd4, 0x7d, 0x03, 0x0e,
	0xad, 0xac, 0x98, 0xbe, 0x78, 0x37, 0x1e, 0x79, 0x90, 0xf5, 0x02, 0x11, 0xbd, 0xe5, 0x74, 0x7f,
	0x2d, 0xaf, 0x15, 0x29, 0x99, 0xed, 0x40, 0x67, 0x90, 0xed, 0x27, 0xf1, 0xeb, 0x28, 0x9d, 0xf1,
	0x90, 0x38, 0x6c, 0x79, 0x9d, 0xa8, 0x84, 0xdc, 0x3b, 0xa0, 0x63, 0x6c, 0x3a, 0xf4, 0x8f, 0x2e,
	0xac, 0xed, 0xe9, 0x51, 0x98, 0xb9, 0x5f, 0x80, 0x71, 0x92, 0xf1, 0xf4, 0x5c, 0x36, 0xb9, 0x60,
	0x8c, 0x97, 0x73, 0xae, 0xf2, 0x61, 0x43, 0xde, 0x07, 0xee, 0x44, 0xd4, 0x33, 0xc4, 0x72, 0xce,
	0x31, 0x70, 0x0f, 0xfd, 0x4c, 0x8c, 0x38, 0x8f, 0x07, 0x61, 0xd7, 0xa4, 0xdf, 0xc2, 0xb4, 0x40,
	0xdc, 0x3f, 0x36, 0xc1, 0xd8, 0x3f, 0xf3, 0xc5, 0x07, 0xa6, 0x6a, 0x11, 0xef, 0x7a, 0x25, 0xde,
	0x11, 0x3d, 0x24, 0xd4, 0x90, 0xe8, 0x34, 0x47, 0x7f, 0x4a, 0xa8, 0xb4, 0x6e, 0xbe, 0x23, 0x74,
	0x07, 0x4c, 0x74, 0x35, 0xcf, 0x3e, 0x28, 0xbd, 0xf7, 0xcc, 0x05, 0x2e, 0x20, 0x63, 0x44, 0x78,
	0xb6, 0x8f, 0x46, 0x29, 0xb3, 0x4c, 0xaf, 0xc3, 0x4b, 0x08, 0x7d, 0xdc, 0x3f, 0xf3, 0xe3, 0x98,
	0x4f, 0x07, 0x61, 0xb7, 0x2d, 0x7d, 0x0c, 0x72, 0x80, 0x31, 0x30, 0xc6, 0xfe, 0x24, 0xeb, 0x02,
	0x31, 0x69, 0x08, 0x7f, 0x92, 0xb1, 0x8f, 0x61, 0xed, 0x68, 0x21, 0x78, 0x88, 0x76, 0x90, 0xe5,
	0x0e, 0x19, 0x6f, 0x49, 0xe3, 0x83, 0xd0, 0x5b, 0x9b, 0x55, 0x56, 0xdd, 0x1f, 0xc2, 0x26, 0x72,
	0x93, 0xbd, 0x8a, 0xc4, 0x99, 0x74, 0x85, 0xed, 0x82, 0x49, 0x90, 0x4a, 0x28, 0x95, 0x04, 0x08,
	0x95, 0x9b, 0x3c, 0x13, 0xc1, 0xcc, 0xfd, 0x19, 0x6c, 0xd4, 0x17, 0xd8, 0x5d, 0x49, 0x36, 0xd1,
	0x5c, 0x9c, 0x19, 0x11, 0x8f, 0xea, 0x2a, 0xbb, 0x0f, 0x96, 0xdc, 0x49, 0x81, 0x5b, 0xd6, 0xa4,
	0x33, 0x5f, 0x10, 0xee, 0x59, 0xf2, 0xf8, 0xee, 0x67, 0x00, 0x3d, 0x21, 0xfc, 0xe0, 0x6c, 0x86,
	0x11, 0xc9, 0x54, 0x20, 0xc8, 0xdb, 0x93, 0x17, 0xdf, 0x05, 0xfb, 0xa5, 0xbf, 0x9c, 0x26, 0x7e,
	0x7e, 0x7b, 0xf6, 0x5c, 0x8a, 0xee, 0xa7, 0x00, 0x85, 0xc2, 0xac, 0x62, 0x52, 0xbb, 0xda, 0xe4,
	0x9f, 0x9b, 0xc4, 0xb6, 0x44, 0xcf, 0x85, 0xcb, 0x7d, 0xe5, 0x42, 0x93, 0x62, 0xf1, 0xe6, 0x8a,
	0x92, 0x4a, 0x40, 0xde, 0x06, 0x0b, 0xe1, 0x41, 0xa8, 0x42, 0xc7, 0x0a, 0x48, 0x2a, 0x23, 0xca,
	0xac, 0x46, 0xd4, 0x36, 0xb4, 0x46, 0x3c, 0x0e, 0xf1, 0x3a, 0xba, 0x96, 0x2c, 0x7d, 0x99, 0x92,
	0xd9, 0x23, 0x00, 0xb9, 0x46, 0x86, 0xed, 0x0b, 0x93, 0x00, 0xb2, 0x62, 0x07, 0xb1, 0xc4, 0xdf,
	0x09, 0x55, 0xa2, 0x0d, 0xc1, 0xdf, 0x51, 0xb9, 0x7b, 0x9a, 0xa4, 0x33, 0x5f, 0xa8, 0xf0, 0xb1,
	0x5e, 0x93, 0xc4, 0xf6, 0xa0, 0x53, 0xf2, 0x2b, 0x43, 0xa8, 0xb3, 0xe7, 0xa8, 0x8a, 0x57, 0x2c,
	0x78, 0x1d, 0xbf, 0xdc, 0xe4, 0xfe, 0x4d, 0x83, 0x16, 0x45, 0x4e, 0xfc, 0x3a, 0x39, 0xc7, 0x0f,
	0x03, 0x63, 0xe8, 0xcf, 0xb8, 0xba, 0x0b, 0x23, 0xf6, 0x67, 0x44, 0x45, 0x7f, 0xe6, 0x47, 0xd3,
	0xac, 0xab, 0x53, 0x88, 0x5a, 0x9c, 0x24, 0xc4, 0x5f, 0x9e, 0x25, 0x31, 0xcf, 0xeb, 0xa6, 0x35,
	0x27, 0x09, 0xaf, 0x94, 0xe2, 0x3e, 0x5d, 0x2a, 0x92, 0xec, 0x40, 0x8a, 0x98, 0x2a, 0x6a, 0x65,
	0x3f, 0x09, 0xb9, 0x62, 0xaa, 0x13, 0x94, 0x10, 0xda, 0xdf, 0xc7, 0xbe, 0x6a, 0x4b, 0xfb, 0x01,
	0xf6, 0xd4, 0x6d, 0x68, 0x21, 0xc9, 0x5f, 0x24, 0x71, 0xde, 0xb7, 0x5a, 0x42, 0xc9, 0xee, 0x3f,
	0x9a, 0xd0, 0xa1, 0xc0, 0xe4, 0xbf, 0x5a, 0xf0, 0x4c, 0xd4, 0xcb, 0x81, 0xb6, 0x5a, 0x0e, 0x6a,
	0x89, 0x68, 0xac, 0x26, 0x22, 0x55, 0xe4, 0x2c, 0xf3, 0x27, 0x7c, 0x9c, 0x28, 0xcf, 0xdb, 0xb3,
	0x1c, 0x90, 0x81, 0x3a, 0xe1, 0x27, 0xe9, 0x54, 0xf9, 0x6d, 0xcf, 0xa5, 0x88, 0xbf, 0xc3, 0x95,
	0x71, 0x24, 0xa6, 0x5c, 0x39, 0xde, 0x9e, 0xe7, 0x00, 0xfe, 0x4e, 0x69, 0x55, 0xce, 0xdb, 0x4a,
	0x27, 0x7b, 0x00, 0x9b, 0x4f, 0xd2, 0xe4, 0xab, 0x8c, 0xa7, 0x87, 0x7e, 0x3c, 0x59, 0xe0, 0x0e,
	0x79, 0xbb, 0x9b, 0xa7, 0x75, 0x18, 0x19, 0x28, 0xb6, 0x80, 0x64, 0x60, 0x9a, 0xaf, 0x3d, 0x06,
	0x38, 0xe0, 0x6f, 0xa3, 0x80, 0x53, 0x78, 0x75, 0x28, 0xbc, 0x54, 0x04, 0x94, 0xb8, 0x07, 0x61,
	0xf1, 0x8c, 0xf7, 0x26, 0x2b, 0x47, 0x77, 0x4d, 0x06, 0xd3, 0x82, 0xa4, 0x32, 0xb4, 0xd7, 0xab,
	0xc3, 0xc1, 0x43, 0x55, 0x49, 0xb0, 0x12, 0x56, 0x4b, 0x4a, 0xb5, 0x2a, 0xa8, 0x42, 0xf2, 0x73,
	0x99, 0x79, 0x23, 0xe1, 0xa7, 0x57, 0xb5, 0x9f, 0xd2, 0x7e, 0xb3, 0x66, 0xbf, 0x76, 0x3b, 0xfa,
	0xca, 0xed, 0xb8, 0x5f, 0xc2, 0x7a, 0x2f, 0x08, 0xf8, 0xfc, 0x9a, 0x57, 0x5d, 0x31, 0xdf, 0x3c,
	0x67, 0xfe, 0xa2, 0xcc, 0x76, 0xcf, 0xa0, 0x7b, 0x18, 0x65, 0xe2, 0x24, 0xf6, 0x69, 0x54, 0xa0,
	0xb3, 0x5e, 0xdb, 0x16, 0x9d, 0xb9, 0xb4, 0x95, 0x49, 0x91, 0x3a, 0x4d, 0x34, 0x8b, 0x04, 0x99,
	0x32, 0x3d, 0x73, 0x8a, 0x82, 0xfb, 0x17, 0x0d, 0xd6, 0xaa, 0x66, 0xde, 0xa3, 0x9e, 0x86, 0x3a,
	0x39, 0xbf, 0xf0, 0x50, 0x35, 0x6c, 0x88, 0x0a, 0xa4, 0x1a, 0x61, 0x7a, 0x3d, 0xc2, 0x30, 0xbb,
	0xe7, 0x2a, 0xd0, 0x9b, 0xd1, 0xbc, 0xc8, 0x6e, 0xf3, 0xc2, 0xec, 0xb6, 0x2e, 0xc9, 0x6e, 0xbb,
	0x9a, 0xdd, 0xee, 0x37, 0xc0, 0x7c, 0x92, 0x24, 0xd3, 0x0c, 0xcf, 0x46, 0x0f, 0x14, 0x0f, 0x2d,
	0xcf, 0x3c, 0x45, 0xc1, 0x7d, 0x03, 0xb7, 0x89, 0x45, 0x6c, 0x8d, 0x27, 0x71, 0xca, 0xfd, 0xf0,
	0x7f, 0xbd, 0xaf, 0x2e, 0xd8, 0x79, 0x1b, 0x94, 0xf5, 0xc7, 0x5e, 0xa8, 0xbe, 0xf7, 0x7d, 0xb0,
	0xa4, 0x89, 0x4a, 0x48, 0x69, 0xb5, 0x90, 0xba, 0x9d, 0xef, 0x20, 0xa5, 0xa6, 0x67, 0x2d, 0x48,
	0x72, 0x3f, 0x85, 0x4e, 0xc5, 0x43, 0x76, 0x0f, 0x6c, 0xf9, 0x94, 0x07, 0xf7, 0x9a, 0xaa, 0xcf,
	0xf2, 0x00, 0xb6, 0xfc, 0x55, 0xe6, 0xfe, 0x02, 0xb6, 0xf0, 0x70, 0x65, 0xd3, 0x51, 0x47, 0x2b,
	0x43, 0xaa, 0x59, 0x6b, 0x16, 0x95, 0xc0, 0xd0, 0x2f, 0x09, 0x0c, 0xa3, 0x1a, 0x18, 0x7f, 0xd2,
	0x24, 0x7b, 0x14, 0x7b, 0x4f, 0x96, 0x34, 0x65, 0x7c, 0x78, 0x61, 0x6b, 0xae, 0x16, 0xb6, 0x92,
	0x1d, 0xbd, 0xc6, 0x4e, 0xc5, 0x3d, 0xe3, 0x12, 0xf7, 0xcc, 0xaa, 0x7b, 0xff, 0x6a, 0x02, 0xf4,
	0xdf, 0x52, 0x8a, 0x73, 0x39, 0xd6, 0x28, 0xef, 0x4a, 0x97, 0xd2, 0x1c, 0x40, 0x15, 0xc4, 0x91,
	0x72, 0xc7, 0xe4, 0xf9, 0x50, 0x4a, 0x68, 0xc9, 0x08, 0x97, 0x62, 0xd1, 0x99, 0x8d, 0xeb, 0x77,
	0x66, 0xb3, 0x46, 0x76, 0x8d, 0x21, 0xeb, 0xd2, 0x49, 0xd0, 0xbe, 0xac, 0x6f, 0xb7, 0xae, 0xec,
	0xdb, 0xed, 0xf7, 0xf6, 0x6d, 0x6a, 0x7b, 0xb1, 0xc0, 0x23, 0x43, 0xde, 0xf6, 0x48, 0x5c, 0xed,
	0xd2, 0x9d, 0xeb, 0x74, 0xe9, 0xff, 0x68, 0xb0, 0x21, 0xb9, 0x2e, 0xf2, 0xfc, 0xeb, 0xf0, 0x5d,
	0x92, 0x65, 0x5c, 0x4e, 0x96, 0xbe, 0x4a, 0x16, 0xf6, 0xe9, 0x94, 0xfb, 0x82, 0x87, 0x95, 0x51,
	0xa7, 0x13, 0x94, 0xd0, 0x35, 0xc6, 0xe2, 0x5a, 0x48, 0xda, 0x97, 0x0d, 0xbd, 0xad, 0x72, 0xe8,
	0x75, 0xff, 0xad, 0xc1, 0xba, 0x3c, 0xf2, 0x2b, 0x3f, 0x12, 0x51, 0x3c, 0xf9, 0xbf, 0x3f, 0xf1,
	0x6d, 0xd8, 0x52, 0xf9, 0x84, 0x79, 0xa7, 0x8e, 0xca, 0x43, 0xf7, 0x16, 0xdc, 0x2c, 0xf2, 0x2c,
	0x2c, 0xe1, 0x3b, 0x70, 0x4b, 0x85, 0x44, 0xb5, 0x11, 0xf2, 0xd0, 0xfd, 0x7b, 0xc1, 0x9c, 0x3a,
	0xc4, 0xd7, 0x62, 0xee, 0x6a, 0x86, 0x2e, 0xe3, 0xb5, 0xe0, 0xc5, 0xbc, 0x16, 0x2f, 0xd6, 0x2a,
	0x2f, 0x2b, 0xcc, 0xdb, 0xe7, 0x98, 0x77, 0x7f, 0xa3, 0xc1, 0x9a, 0x3c, 0x9d, 0x7a, 0xf9, 0xbf,
	0xfa, 0x70, 0x38, 0x42, 0xe2, 0x74, 0x29, 0x2b, 0xbe, 0x11, 0xe0, 0x58, 0xb9, 0x62, 0x44, 0xbf,
	0xe8, 0x7a, 0x3b, 0x07, 0x3c, 0x0b, 0xd2, 0x68, 0x2e, 0xa2, 0x24, 0x56, 0x67, 0xec, 0x84, 0x25,
	0xb4, 0xdb, 0x03, 0xb3, 0x9f, 0xa6, 0x49, 0xca, 0x2c, 0x68, 0x1e, 0xbf, 0x70, 0x1a, 0xcc, 0x81,
	0xb5, 0x61, 0x42, 0x1f, 0x25, 0x8e, 0x7c, 0x11, 0x9c, 0x39, 0x1a, 0x5b, 0x87, 0xd6, 0x30, 0x11,
	0x4f, 0x93, 0x45, 0x1c, 0x3a, 0x7f, 0xd0, 0xd9, 0x26, 0x00, 0xde, 0x54, 0x96, 0x1d, 0xf0, 0x78,
	0xe9, 0xfc, 0x5e, 0xdf, 0x7d, 0x08, 0x6b, 0xd5, 0x2f, 0x29, 0xac, 0x05, 0xc6, 0x30, 0x89, 0xb9,
	0xd3, 0x60, 0x36, 0xe8, 0xbd, 0x38, 0x74, 0x34, 0x52, 0x9e, 0x3a, 0xcd, 0xdd, 0xdf, 0x69, 0xb0,
	0x51, 0xff, 0x66, 0xc1, 0xd6, 0xa0, 0x75, 0x12, 0x67, 0x5c, 0x08, 0x1e, 0x3a, 0x0d, 0xb6, 0x0e,
	0xed, 0xde, 0x74, 0x4a, 0x3d, 0x33, 0x73, 0x34, 0xb6, 0x01, 0x40, 0xcf, 0xf4, 0xb5, 0xc1, 0x69,
	0xb2, 0x1b, 0xb0, 0x3e, 0x9a, 0xf3, 0x20, 0x7a, 0x1d, 0x05, 0x84, 0x3b, 0x3a, 0x6e, 0x39, 0x4a,
	0x32, 0xe1, 0xf1, 0x00, 0x65, 0x83, 0xdd, 0x81, 0x9b, 0x1e, 0xba, 0xea, 0x25, 0xa7, 0x51, 0x5c,
	0xea, 0x32, 0xd9, 0x16, 0x38, 0x95, 0x05, 0x89, 0x5a, 0xbb, 0xbf, 0xd6, 0x60, 0xbd, 0x56, 0x8f,
	0xc9, 0xfd, 0xe3, 0x61, 0xdf, 0x69, 0xb0, 0x0e, 0xd8, 0x47, 0xfd, 0xd1, 0xa8, 0xf7, 0xac, 0xef,
	0x68, 0x0c, 0xc0, 0xda, 0x3f, 0x3c, 0x1e, 0xf5, 0x0f, 0x1c, 0x1d, 0x9f, 0x9f, 0x1f, 0x0f, 0x86,
	0xfd, 0x03, 0xc7, 0xc0, 0xed, 0xa3, 0x7e, 0x7f, 0xe8, 0x58, 0xac, 0x0d, 0xa6, 0xd7, 0x1b, 0xf7,
	0x0f, 0x1c, 0x1b, 0x1f, 0x07, 0xc3, 0x97, 0x27, 0x63, 0xa7, 0x85, 0x1c, 0x8c, 0x7b, 0xcf, 0x9c,
	0x36, 0x62, 0x27, 0x43, 0x7c, 0x04, 0x3c, 0xf3, 0xd8, 0xeb, 0x0d, 0x47, 0x4f, 0xfb, 0x9e, 0xd3,
	0xd9, 0xed, 0xcb, 0x37, 0x17, 0x32, 0x7e, 0x0b, 0x6e, 0x9c, 0xc4, 0x21, 0x7f, 0x1d, 0xc5, 0xf2,
	0x45, 0x18, 0x41, 0xe9, 0xc9, 0xe7, 0x51, 0x16, 0x89, 0x24, 0x75, 0x34, 0x54, 0x24, 0x0f, 0xdf,
	0x44, 0x47, 0x46, 0xcb, 0x4c, 0xf0, 0x99, 0xa3, 0xef, 0xfe, 0xa8, 0x3a, 0x32, 0xe3, 0x2f, 0x4e,
	0x86, 0x2f, 0x86, 0xc7, 0xaf, 0x86, 0x4e, 0x03, 0xb7, 0x1d, 0x1d, 0x3f, 0x19, 0x1c, 0xaa, 0x73,
	0x8c, 0x7b, 0x4f, 0x0e, 0xfb, 0x63, 0xa7, 0x89, 0x9b, 0x0e, 0xfa, 0xa3, 0x17, 0xe3, 0xe3, 0x97,
	0x8e, 0xbe, 0xfb, 0x03, 0x95, 0x3e, 0xc8, 0x28, 0x32, 0xf2, 0x25, 0xc5, 0x85, 0xbc, 0x13, 0x92,
	0xb1, 0x3d, 0x3a, 0x1a, 0xde, 0x01, 0x89, 0x79, 0x05, 0x77, 0x9a, 0x7b, 0xff, 0xd4, 0xc1, 0x46,
	0xec, 0x68, 0x92, 0xb2, 0x7b, 0x60, 0x60, 0x7e, 0xb3, 0xd5, 0x57, 0xd9, 0xed, 0x8e, 0x04, 0xe4,
	0x47, 0xca, 0x06, 0xfb, 0x0e, 0xd8, 0xf9, 0x14, 0x70, 0xa3, 0x32, 0x74, 0x4b, 0x68, 0x75, 0xf3,
	0x7d, 0x30, 0xe5, 0xfc, 0x5d, 0xd1, 0x4a, 0xc0, 0xea, 0xc6, 0x03, 0xd8, 0x5c, 0x19, 0xd4, 0xd8,
	0x47, 0x72, 0xc7, 0xc5, 0xf3, 0xdb, 0xf6, 0x8d, 0x32, 0xb3, 0xd5, 0x8a, 0xdb, 0x60, 0x3f, 0x91,
	0x5a, 0x2a, 0x03, 0x4b, 0x55, 0xcb, 0xf9, 0x39, 0x66, 0xfb, 0x56, 0xe9, 0x56, 0xe5, 0x7b, 0x85,
	0xdb, 0x60, 0x3f, 0x86, 0x8d, 0xda, 0x6c, 0x95, 0xb1, 0xed, 0xba, 0xa2, 0xea, 0xc4, 0xb5, 0xed,
	0xac, 0x70, 0x86, 0x1a, 0x1e, 0xc1, 0xcd, 0xea, 0x00, 0xcf, 0x43, 0xf9, 0xde, 0x52, 0x7c, 0x35,
	0xc9, 0x19, 0x20, 0xd8, 0x6d, 0xb0, 0xcf, 0x60, 0x4b, 0x16, 0xd2, 0xfa, 0x2f, 0x98, 0x9a, 0x3d,
	0x6a, 0x45, 0x76, 0x95, 0xbd, 0xbb, 0x60, 0x78, 0x48, 0x59, 0xa9, 0xbc, 0xf2, 0x3e, 0xe4, 0x36,
	0xf6, 0xfe, 0xaa, 0x81, 0x45, 0xa5, 0x21, 0x65, 0x8f, 0xc1, 0x92, 0x01, 0x70, 0xd1, 0xed, 0x29,
	0xa8, 0xf2, 0x69, 0xd3, 0x6d, 0xb0, 0x6f, 0x83, 0x25, 0x3f, 0xe4, 0xb1, 0xca, 0x87, 0xd0, 0x55,
	0x0f, 0x76, 0xc0, 0x92, 0x25, 0xad, 0xb6, 0xa9, 0xf0, 0xc7, 0x6d, 0xb0, 0x6f, 0x81, 0x25, 0x3f,
	0x1f, 0x9e, 0xa7, 0x20, 0x57, 0xf2, 0x4d, 0x30, 0x90, 0xb2, 0xf3, 0x1b, 0xc8, 0x21, 0xb7, 0x71,
	0x6a, 0xd1, 0xe7, 0xf4, 0xef, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x67, 0x5a, 0xd6, 0x61,
	0x17, 0x00, 0x00,
}
