syntax = "proto3";

package chat;

message Ids { repeated string Ids = 1; }

message User {
	string Id = 1;
	SenderType Type = 4;
	string LastSeenId = 5;
}

// get number of unread message
message Chat {
	string Id = 1;
	string AccountId = 2;
	// Creation time
	string CTime = 3;
	// Last active time
	string LTime = 4;
	// Closed time
	string XTime = 5;
	repeated User Users = 6;
	int32 EventsCount = 8;
	string ChannelId = 9;
	repeated string Tags = 10;
}

message ChatsWithEvents {
	repeated ChatWithEvents Chats = 1;
}

message ChatWithEvents {
	Chat Chat = 1;
	repeated ChatEvent Events = 2;
}

enum ChatEventType {
	NONE = 0;
	MESSAGE = 1; // content= content of message, attachments attachment
	CLOSED = 3; // content, attachments = null

	JOINED = 4; // SenderId: senderid || could be null, Content: joinner id, Attachmemts: null

	//	LEFT = 5; // Content = leaver, attachments = null
	SEEN = 6; // Content = event id, attachment = null
	RATED = 7; // content = number of star, attachment = null
	INPUT = 8; // content = refered message id; attachment depended on type of event

	TAG = 9; // Content = tag
	UNTAG = 10; // Content = tag
	TRANSFERCHAT = 11; // Content = joinerid1,joinerid2 (',' delimiter)
}

message Attachment {
	/* Type show type of attachment
	 * Value:
	 *   Template
	 *     - file
	 *       + video
	 *       + audio
	 *       + image
	 *     - preview (preview for link)
	 *     - content
	 *     - template
	 *
	 *       + receipt, ticket, ...
	 *     - quick_replies
	 *       + ask_form
	 *       + generic_template
	 *       + list_template
	 *   Input control
	 *     - button           -> send list of event to chat
   *     - url
	 *     - postback_button (single button)
	 *     - textbox           -> contains value
	 *     - ratebox            -> rate the chat (like 5 buttons but have beautiful display)
	 */
	string Type = 1;
	string Payload = 2; // Custome JSON data
}

message ChatEvents { repeated ChatEvent Events = 1;}

message ChatEvent {
	// ID of chat event, 128-bit, start with EVNT
	string Id = 1;

	// Type indicates type of chat event
	ChatEventType Type = 2;

	// ChatId refer to ID of chat which contains this chat event
	string ChatId = 3;

	//string AccountId = 4;

	// CTime is a RFC3339 string, tell when was event sent
	string CTime = 5;

	// SenderId refer to who has sent the event, could be Agent, User or System
	string SenderId = 6;

	// SenderType indicate type of sender
	SenderType SenderType = 7;

	// Content could be raw text, could be JSON data based on type
	string Content = 8;

	repeated Attachment Attachments = 9;
}

enum SenderType {
	UNDEFINED = 0;
	USER = 1;
	AGENT = 2;
	SYSTEM = 3;
}

message Id { string Id = 1; }

message Empty {}

enum DeviceType {
	UNKNOWN = 0;
	MOBILE = 1;
	TABLET = 2;
	DESKTOP = 3;
}

message UserInfo {
	string Id = 1;
	string Name = 2;
	repeated string Emails = 3;
	repeated string Phones = 4;
	string Country = 5;
	string CountryCode = 6;
	string City = 7;
	string TimeZone = 8;
	//	repeated string Segment = 9;
	// repeated string Label = 10;
	// bool Unsubscribed = 11;
	// bool MarkedSpam = 12;
	//bool HardBounced = 13;
	//int32 TotalSessions = 14;
}

message ChatRequest {
	string AccountId = 1;
	string ChatId = 2;
	string ChannelId = 4;
	string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	string UserId = 12;
	string CTime = 13;
}

message Chats {
	repeated Chat Chats = 1;
}

message ChatStart {
	string AgentId = 1;
	string UserId = 2;
	string ChannelId = 3;
}

service ChatMgr {
	// COLLECTOR for channel only
	// Send KeepAlive message to extends live of a chat session
	rpc Ping(Id) returns (Empty) {}
	rpc Send(ChatEvent) returns (Id) {}

	// initialize chat session
	rpc Request(ChatRequest) returns (Id) {}
	rpc Start(ChatStart) returns (Id) {}

	// QUERRIER
	// List chats for specific user
	rpc ListUsersUnread(ListUsersUnreadRequest) returns (UsersUnread) {}
	rpc ListChatsByUser(ListChatsByUserRequest) returns (ChatsWithEvents) {}
	rpc ListChatEvents(ListChatEventRequest) returns (ChatEvents) {}

	// Unassigned list
	rpc ListUnassignedChats(Id) returns (Chats) {}
	rpc AcceptUnassignedChat(AcceptRequest) returns (Empty) {}
	rpc CheckUnassignedChats(Ids) returns (Chats) {}
}


message AcceptRequest {
	string AccountId = 1;
	string AgentId = 2;
	string ChatId = 3;
}

message ListUnassignChatsRequest {
	string AccountId = 1;
	string StartId = 2;
	int32 Limit = 3;
}

message UnassignChat {
	string AccountId = 1;
	bool IsAssigned = 2;
	string Message = 3;

	string Ip = 4;
	string Name = 5;
	repeated string Emails = 6;
	repeated string Phones = 7;
}

message Bools {
	repeated bool Bools = 1;
}

message ListUsersUnreadRequest {
	string AccountId = 1;
	string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	string UserId = 1;
	int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListChatEventRequest {
	//string AccountId = 1;
	string ChatId = 2;
	string StartId = 3;
	int32 Limit = 4;
}

message ListChatsByUserRequest {
	string AccountId = 1;
	string ChannelId = 2; // if null -> all channel
	string UserId = 3; // must be visitor id
	string StartId = 4;
	int32 Limit = 5;
}
