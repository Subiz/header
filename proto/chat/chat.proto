syntax = "proto3";

package chat;

import "bitbucket.org/subiz/servicespec/proto/auth/auth.proto";
/////////////////////////
/////   SERVICE    //////
/////////////////////////

service ChatMgr {
	// COLLECTOR for channel only
	// fire EvChatSent
	rpc Send(ChatEvent) returns (Id) {}

	// request chat from user
	// fire EvChatWaiting, EvChatCreated
	rpc Request(ChatRequest) returns (Id) {}

	// fire EvAssigned
	rpc AckRequest(ChatRequestAck) returns (Empty) {}

	// start chat from agent
	// fire EvChatCreated
	rpc Start(ChatStart) returns (Id) {}

	// QUERRIER
	// List chats for specific user
	rpc ListChatsByUser(ListChatsByUserRequest) returns (ChatPreviews) {}
	rpc ListChatEvents(ListChatEventRequest) returns (ChatEvents) {}

	// Unassigned list
	rpc ListUnassignedChats(Id) returns (UnassignedChats) {} // limit 300
	rpc AcceptUnassignedChat(AcceptRequest) returns (Bool) {}

	rpc Read(ChatId) returns (Chat) {}
}

service AccountMgr {
	rpc UpsertAccount(Account) returns (Empty) {}
	rpc UpsertAgent(AgentStatus) returns (Empty) {}
	rpc DeleteAgent(AgentId) returns (Empty) {}
	rpc AddAgentToGroup(AgentInGroup) returns (Empty) {}
	rpc RemoveAgentFromGroup(AgentInGroup) returns (Empty) {}
	rpc DeleteGroup(GroupId) returns (Empty) {}
	rpc UpdatePermission(Permission) returns (Empty) {}
}

message UnassignedChat {
	string AccountId = 1;
	string ChatId = 2;
	string ChannelId = 4;
	string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	UserInfo User = 12;
	string CreatedTime = 13;
}

message UnassignedChats {
	repeated UnassignedChat Chats = 1;
}

message ChatId {
	string AccountId = 1;
	string Id = 2;
}

message GroupId {
	string AccountId = 1;
	string GroupId = 2;
}

message Permission {
	string AccountId = 1;
	string AgentId = 2;
	auth.Method Method = 3;
}

message AgentId {
	string AccountId = 1;
	string AgentId = 2;
}

message AgentInGroup {
	string AccountId = 1;
	string AgentId = 2;
	string GroupId = 3;
}

message AgentStatus {
	string AccountId = 1;
	string AgentId = 2;
	bool IsActive = 3;
}

service Router {
	rpc Update(Rule) returns (Empty) {}
	rpc Create(Rule) returns (Id) {}
	rpc Delete(RuleId) returns (Empty) {}
	rpc Read(RuleId) returns (Rule) {}
	// list ALL rules by account, limit 300
	rpc List(Id) returns (Route) {}
}

message Account {
	string Id = 1;
	int32 MaxRules = 2;
}

message Bool {
	bool Bool = 1;
}

enum JoinOperator {
	None = 0;
	And = 1;
	Or = 2;
}

message RuleId {
	string AccountId = 1;
	string Id = 2;
}

message Id {
	string Id = 1;
}

message Empty {}

message Rule {
	string Id = 1;
	string AccountId = 2;
	string Priority = 3;
	AssignStrategy Strategy = 4;
	repeated string AssignTos = 5;
	repeated Condition Conditions = 6;
	bool IsDisabled = 7;
	string CreatedTime = 8;
}

message Condition {
	JoinOperator Join = 1;
	string Key = 2; // unique
	string Operator = 3; // = # regex
	string Value = 4; // JSON
}

message Route {
	repeated Rule Rules = 1;
}

message RouteResult {
	string RuleId = 1;
	AssignStrategy Strategy = 3;
	repeated string AgentIds = 4;
}

enum AssignStrategy {
	ALLAGENTS = 0;
	AGENTGROUP = 2;
	AGENTS = 3;
	MOSTRECENT = 4;
	ROUNDROBINALLAGENTS = 5;
	ROUNDROBINAGENTS = 6;
}

message GroupDeleteEvent {
	string GroupId = 1;
}

message GroupUpdateEvent {
	string GroupId = 1;
	repeated string MemberIds = 2;
}

message AgentDeletedEvent {
	string AgentId = 1;
}

message AgentUpdateEvent {
	string AgentId = 1;
	bool IsActive = 2;
	bool IsConfirmed = 3;
}

////////////////////////////
/////   MESSAGE   //////////
////////////////////////////

message Ids {
	repeated string Ids = 1;
}

message User {
	string Id = 1;
	UserType Type = 2;
}

// get number of unread message
message Chat {
	string Id = 1;
	string AccountId = 2;
	// Creation time
	string CreatedTime = 3;
	// Last active time
	string LastActiveTime = 4;
	// Closed time
	string ClosedTime = 5;
	repeated User Users = 6;

	string ChannelId = 9;
	repeated string Tags = 10;
}

message ChatPreviews {
	repeated ChatPreview Previews = 1;
}

// ChatPreview is a chat header with some events in it
message ChatPreview {
	Chat Chat = 1;
	repeated ChatEvent Events = 2;

	// Unread number of unread event
	int64 Unread = 3;
}

// ChateEventType
enum ChatEventType {
	NONE = 0;
	MESSAGE = 1; // content= content of message, attachments attachment
	CLOSED = 3; // content, attachments = null

	JOINED = 4; // SenderId: senderid || could be null, Content: joinner id, Attachmemts: null
	LEFT = 5; // senderid: senderid || could be null
	//	SEEN = 6; // Content = event id, attachment = null
	RATED = 7; // content = number of star, attachment = null
	INPUT = 8; // content = refered message id; attachment depended on type of event

	TAG = 9; // Content = tag
	UNTAG = 10; // Content = tag
	TRANSFER = 11; // Content = joinerid1,joinerid2 (',' delimiter)
	ACK = 12;
	TYPING = 13;
	STOPTYPING = 14;
}

message Attachment {
	/* Type show type of attachment
	 * Value:
	 *   Template
	 *     - file
	 *       + video
	 *       + audio
	 *       + image
	 *     - preview (preview for link)
	 *     - content
	 *     - template
	 *
	 *       + receipt, ticket, ...
	 *     - quick_replies
	 *       + ask_form
	 *       + generic_template
	 *       + list_template
	 *   Input control
	 *     - button           -> send list of event to chat
	 *     - url
	 *     - postback_button (single button)
	 *     - textbox           -> contains value
	 *     - ratebox            -> rate the chat (like 5 buttons but have beautiful display)
	 */
	string Type = 1;
	string Payload = 2; // Custome JSON data
}

message ChatEvents {
	repeated ChatEvent Events = 1;
}

message ChatEvent {
	// ID of chat evet
	string Id = 1;

	// Type indicates type of chat event
	ChatEventType Type = 2;

	// AccountId refer to ID of account
	string AccountId = 4;

	// ChatId refer to ID of chat which contains this chat event
	string ChatId = 3;

	// CreatedTime is a RFC3339 string, tell when was event sent
	string CreatedTime = 5;

	// SenderId refer to who has sent the event, could be Agent, User or System
	string SenderId = 6;

	// SenderType indicate type of sender
	UserType SenderType = 7;

	// Content could be raw text, could be JSON data based on type
	string Text = 8;

	// Could be "", "raw" or "markdown", "html"
	string Format = 9;

	repeated Attachment Attachments = 10;

	repeated string State = 11;
}

enum UserType {
	// DONOT CHANGE THIS SINCE ITS CONSTANCE
	UndefinedUserType = 0;
	Visitor = 1;
	Agent = 2;
	System = 3;
}

enum DeviceType {
	UNKNOWN = 0;
	MOBILE = 1;
	TABLET = 2;
	DESKTOP = 3;
}

message UserInfo {
	string Id = 1;
	string Name = 2;
	repeated string Emails = 3;
	repeated string Phones = 4;
	string Country = 5;
	string CountryCode = 6;
	string City = 7;
	string TimeZone = 8;
	repeated string Segment = 9;
	repeated string Label = 10;
	bool Unsubscribed = 11;
	bool MarkedSpam = 12;
	bool HardBounced = 13;
	int32 TotalSessions = 14;
}

message ChatRequestAck {
	string RequestId = 15;
	string ChatId = 14;
	string AccountId = 1;
	string ChannelId = 4;
	string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	UserInfo User = 12;
	string CreatedTime = 13;
}

message ChatRequest {
	string AccountId = 1;
	string ChannelId = 4;
	string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	UserInfo User = 12;
	string CreatedTime = 13;
}

message Chats {
	repeated Chat Chats = 1;
}

message ChatStart {
	string AgentId = 1;
	string UserId = 2;
	string ChannelId = 3;
}

message AcceptRequest {
	string AccountId = 1;
	string AgentId = 2;
	string ChatId = 3;
}

message ListUnassignChatsRequest {
	string AccountId = 1;
	string StartId = 2;
	int32 Limit = 3;
}

message UnassignChat {
	string AccountId = 1;
	bool IsAssigned = 2;
	string Message = 3;

	string Ip = 4;
	string Name = 5;
	repeated string Emails = 6;
	repeated string Phones = 7;
}

message Bools {
	repeated bool Bools = 1;
}

message ListUsersUnreadRequest {
	string AccountId = 1;
	string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	string UserId = 1;
	int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListChatEventRequest {
	string AccountId = 1;
	string ChatId = 2;
	string StartId = 3;
	int32 Limit = 4;
}

message ListChatsByUserRequest {
	string AccountId = 1;
	string ChannelId = 2; // if null -> all channel
	string UserId = 3; // must be visitor id
	string StartId = 4;
	int32 Limit = 5;
}

// Topic Chat.Assigned
message OEChatAssigned {
	string ChatId = 4;
	string AccountId = 3;
	string CreatedTime = 5;
	repeated User Users = 6;
	string ChannelId = 7;
	repeated string Tags = 8;
}

// Topic Chat.Waiting
message OEChatWaiting {
	//string RequestId = 1;
	//string Event = 2;
	string ChatId = 4;
	string AccountId = 3;
	//	string CreatedTime = 5;
	UserInfo User = 6;
	string ChannelId = 7;
	repeated string Tags = 8;
}

message EvChatCreated {
	string RequestId = 1; // request ID
	bool Ok = 2;
	string Event = 3;
	string AccountId = 4;
	string ChatId = 5;
	repeated User Users = 6;
	string ChannelId = 7;
	string CreatedTime = 8;
}

message OEChatDropped {
	string AccountId = 1;
	string ChatId = 2;
	string ChannelId = 3;
}

message OEChatAccepted {
	string AccountId = 2;
	string ChatId = 3;
	string AgentId = 4;
}

message OEChatStarted {
	string AccountId = 2;
	string ChatId = 3;
	string ChannelId = 4;
	string CreatedTime = 5;
}

message EvChatResult { // delete after 5mins, so be quick
	string RequestId = 1; //request id
	bool Ok = 2;
	int32 Code = 3;
	string CreatedTime = 4;
	string Description = 5;
}

message EvChatUserInfoRequested {
	string RequestId = 1;
	string ChatId = 2;
	string AccountId = 3;
	string ChannelId = 4;
		string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	string UserId = 12;
	string CreatedTime = 13;
}

message EvChatUserInfoReply {
	string RequestId = 1;
	string ChatId = 2;
	string AccountId = 3;
	string ChannelId = 4;

	string MessageTo = 5;
	string PageUrl = 6;
	string PageTitle = 7;
	string Message = 8;
	string BrowserLanguage = 9;
	string Language = 10;
	DeviceType DeviceType = 11;
	UserInfo User = 12;
	string CreatedTime = 13;
}

enum Event {
	ChatAssigned = 0; // chat is assigned to an agent
	ChatWaiting = 2; // new chat is added to unassigned list
	ChatStarted = 3; // chat started from an agent
	ChatAccepted = 4; // chat from unassigned list is accepted by an agent
	ChatDropped = 5; // chat dropped from unassigned list

	ChatUserInfoRequested = 8;
	ChatUserInfoReply = 9;

}
// ==================

message FileTemplate {
	string Id = 1;
}

message QuickRepliesTemplate {
	string Text = 1;
	string ContentType = 4; // listbutton or location or ...
	repeated Button Replies = 5; // limit to 11
}

message GenericElement { // display
	string Title = 1;
	string ImageUrl = 2;
	string Subtitle = 3; // limited character
	Button DefaultAction = 4;
	repeated Button Buttons = 5; // limit to 10
}

message GenericTemplate {
	repeated GenericElement Elements = 1; // limit to 5
}

message Button {
	string Type = 1;
	///...
}

message UrlButton { // input
	string Type = 1; // UrlButton
	string Title = 2;
	string Url = 3;
}

message PostbackButton {
	string Type = 1; // PostbackButton
	string Title = 2;
	string Payload = 3;
	string ImageUrl = 4;
}

message CallButton {
}

message LoginButton {
}

message EventButton {
	string Type = 1; // EventButton
	string Title = 2;
	string ImageUrl = 4;
	string Event = 3; // this event will sent to chat
}

message SurveyForm {
	string Placeholder = 1;
}

message RateFormTemplate {
	string Type = 1;
}
