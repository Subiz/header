// Code generated by protoc-gen-go. DO NOT EDIT.
// source: push/push.proto

/*
Package push is a generated protocol buffer package.

push pushs (almost) every events to unfocused users

It is generated from these files:
	push/push.proto

It has these top-level messages:
	Empty
	Id
	Token
	TokenRemoveRequest
	UserPushConfiguration
*/
package push

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_DESKTOP DeviceType = 0
	DeviceType_MOBILE  DeviceType = 1
)

var DeviceType_name = map[int32]string{
	0: "DESKTOP",
	1: "MOBILE",
}
var DeviceType_value = map[string]int32{
	"DESKTOP": 0,
	"MOBILE":  1,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Token struct {
	Token      string     `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	UserId     string     `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
	ExpiredIn  string     `protobuf:"bytes,3,opt,name=ExpiredIn" json:"ExpiredIn,omitempty"`
	DeviceType DeviceType `protobuf:"varint,4,opt,name=DeviceType,enum=push.DeviceType" json:"DeviceType,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

func (m *Token) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_DESKTOP
}

type TokenRemoveRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *TokenRemoveRequest) Reset()                    { *m = TokenRemoveRequest{} }
func (m *TokenRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRemoveRequest) ProtoMessage()               {}
func (*TokenRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TokenRemoveRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TokenRemoveRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserPushConfiguration struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId" json:"AccountId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	// EmailNotificationEnabled is true if user want to receive
	// notification emails
	EmailNotificationEnabled bool `protobuf:"varint,4,opt,name=EmailNotificationEnabled" json:"EmailNotificationEnabled,omitempty"`
	// DesktopPushNotificationEnabled is true if user enable desktop
	// (browser) notification
	DesktopPushNotificationEnabled bool `protobuf:"varint,5,opt,name=DesktopPushNotificationEnabled" json:"DesktopPushNotificationEnabled,omitempty"`
	// MobilePushNotificationEnabled is true if user enable mobile
	// push notification
	MobilePushNotificationEnabled bool `protobuf:"varint,6,opt,name=MobilePushNotificationEnabled" json:"MobilePushNotificationEnabled,omitempty"`
	// MobilePushDelayTiming is the seconds subiz delay sending
	// notification to mobile after notifiy user in desktop device.
	// If user sees the notification during this time, the push will
	// be cancelled.
	MobilePushDelayTimming int32 `protobuf:"varint,7,opt,name=MobilePushDelayTimming" json:"MobilePushDelayTimming,omitempty"`
	// EmailThreshold is a duration (in minute) in which no more
	// than 1 email is being sent
	EmailThreshold int32 `protobuf:"varint,8,opt,name=EmailThreshold" json:"EmailThreshold,omitempty"`
}

func (m *UserPushConfiguration) Reset()                    { *m = UserPushConfiguration{} }
func (m *UserPushConfiguration) String() string            { return proto.CompactTextString(m) }
func (*UserPushConfiguration) ProtoMessage()               {}
func (*UserPushConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserPushConfiguration) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UserPushConfiguration) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPushConfiguration) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserPushConfiguration) GetEmailNotificationEnabled() bool {
	if m != nil {
		return m.EmailNotificationEnabled
	}
	return false
}

func (m *UserPushConfiguration) GetDesktopPushNotificationEnabled() bool {
	if m != nil {
		return m.DesktopPushNotificationEnabled
	}
	return false
}

func (m *UserPushConfiguration) GetMobilePushNotificationEnabled() bool {
	if m != nil {
		return m.MobilePushNotificationEnabled
	}
	return false
}

func (m *UserPushConfiguration) GetMobilePushDelayTimming() int32 {
	if m != nil {
		return m.MobilePushDelayTimming
	}
	return 0
}

func (m *UserPushConfiguration) GetEmailThreshold() int32 {
	if m != nil {
		return m.EmailThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "push.Empty")
	proto.RegisterType((*Id)(nil), "push.Id")
	proto.RegisterType((*Token)(nil), "push.Token")
	proto.RegisterType((*TokenRemoveRequest)(nil), "push.TokenRemoveRequest")
	proto.RegisterType((*UserPushConfiguration)(nil), "push.UserPushConfiguration")
	proto.RegisterEnum("push.DeviceType", DeviceType_name, DeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NotiDeli service

type NotiDeliClient interface {
	RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	Config(ctx context.Context, in *UserPushConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// GetConfig get notification config for specific user
	GetConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserPushConfiguration, error)
}

type notiDeliClient struct {
	cc *grpc.ClientConn
}

func NewNotiDeliClient(cc *grpc.ClientConn) NotiDeliClient {
	return &notiDeliClient{cc}
}

func (c *notiDeliClient) RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/push.NotiDeli/RegisterToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/push.NotiDeli/RemoveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) Config(ctx context.Context, in *UserPushConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/push.NotiDeli/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiDeliClient) GetConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserPushConfiguration, error) {
	out := new(UserPushConfiguration)
	err := grpc.Invoke(ctx, "/push.NotiDeli/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotiDeli service

type NotiDeliServer interface {
	RegisterToken(context.Context, *Token) (*Empty, error)
	RemoveToken(context.Context, *TokenRemoveRequest) (*Empty, error)
	Config(context.Context, *UserPushConfiguration) (*Empty, error)
	// GetConfig get notification config for specific user
	GetConfig(context.Context, *Id) (*UserPushConfiguration, error)
}

func RegisterNotiDeliServer(s *grpc.Server, srv NotiDeliServer) {
	s.RegisterService(&_NotiDeli_serviceDesc, srv)
}

func _NotiDeli_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.NotiDeli/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).RegisterToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.NotiDeli/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).RemoveToken(ctx, req.(*TokenRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPushConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.NotiDeli/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).Config(ctx, req.(*UserPushConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiDeli_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiDeliServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.NotiDeli/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiDeliServer).GetConfig(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotiDeli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "push.NotiDeli",
	HandlerType: (*NotiDeliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToken",
			Handler:    _NotiDeli_RegisterToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _NotiDeli_RemoveToken_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _NotiDeli_Config_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _NotiDeli_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push/push.proto",
}

func init() { proto.RegisterFile("push/push.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xed, 0x6e, 0xd3, 0x40,
	0x10, 0xcc, 0xa5, 0x8d, 0x93, 0x6c, 0x44, 0x88, 0x56, 0xa1, 0x3a, 0x95, 0x0f, 0x45, 0x96, 0x40,
	0x11, 0x48, 0x05, 0x15, 0xd4, 0x1f, 0xfc, 0xa3, 0xd8, 0x20, 0x0b, 0x4a, 0x2b, 0x63, 0x1e, 0x20,
	0x89, 0xb7, 0xc9, 0xa9, 0x8e, 0xcf, 0xd8, 0xe7, 0x8a, 0x3c, 0x00, 0x3f, 0x79, 0x42, 0x5e, 0x06,
	0xdd, 0x9d, 0xd5, 0xb8, 0xa5, 0x6e, 0xff, 0x9c, 0x6e, 0x77, 0xe6, 0x66, 0x67, 0xad, 0x31, 0x3c,
	0xcc, 0xca, 0x62, 0xf5, 0x5a, 0x1f, 0x07, 0x59, 0x2e, 0x95, 0xc4, 0x5d, 0x7d, 0x77, 0xbb, 0xd0,
	0xf1, 0xd7, 0x99, 0xda, 0xb8, 0x63, 0x68, 0x07, 0x31, 0x0e, 0xf5, 0xc9, 0xd9, 0x84, 0x4d, 0xfb,
	0x61, 0x3b, 0x88, 0xdd, 0xdf, 0x0c, 0x3a, 0x91, 0xbc, 0xa0, 0x14, 0xc7, 0xd5, 0xa5, 0x02, 0xab,
	0xee, 0x1e, 0x38, 0x3f, 0x0a, 0xca, 0x83, 0x98, 0xb7, 0x4d, 0xbb, 0xaa, 0xf0, 0x09, 0xf4, 0xfd,
	0x5f, 0x99, 0xc8, 0x29, 0x0e, 0x52, 0xbe, 0x63, 0xa0, 0x6d, 0x03, 0xdf, 0x00, 0x78, 0x74, 0x29,
	0x16, 0x14, 0x6d, 0x32, 0xe2, 0xbb, 0x13, 0x36, 0x1d, 0x1e, 0x8e, 0x0e, 0x8c, 0xb7, 0x6d, 0x3f,
	0xac, 0x71, 0xdc, 0x63, 0x40, 0x33, 0x30, 0xa4, 0xb5, 0xbc, 0xa4, 0x90, 0x7e, 0x96, 0x54, 0xa8,
	0xda, 0x74, 0x76, 0x6d, 0xfa, 0x95, 0xd7, 0x76, 0xcd, 0xab, 0xfb, 0x67, 0x07, 0x1e, 0x69, 0xc2,
	0x59, 0x59, 0xac, 0x3e, 0xca, 0xf4, 0x5c, 0x2c, 0xcb, 0x7c, 0xa6, 0x84, 0x4c, 0xb5, 0xdb, 0x0f,
	0x8b, 0x85, 0x2c, 0x53, 0x75, 0x25, 0xb5, 0x6d, 0x34, 0xee, 0x38, 0xd6, 0x9f, 0x6e, 0x26, 0x92,
	0x6a, 0x3f, 0x5b, 0xe0, 0x7b, 0xe0, 0xe6, 0xf2, 0x4d, 0x2a, 0x71, 0x2e, 0x16, 0x66, 0x80, 0x9f,
	0xce, 0xe6, 0x09, 0xc5, 0x66, 0xd3, 0x5e, 0xd8, 0x88, 0xe3, 0x27, 0x78, 0xe6, 0x51, 0x71, 0xa1,
	0x64, 0xa6, 0x3d, 0xde, 0xa6, 0xd0, 0x31, 0x0a, 0xf7, 0xb0, 0xd0, 0x83, 0xa7, 0x27, 0x72, 0x2e,
	0x12, 0x6a, 0x92, 0x71, 0x8c, 0xcc, 0xdd, 0x24, 0x3c, 0x82, 0xbd, 0x2d, 0xc1, 0xa3, 0x64, 0xb6,
	0x89, 0xc4, 0x7a, 0x2d, 0xd2, 0x25, 0xef, 0x4e, 0xd8, 0xb4, 0x13, 0x36, 0xa0, 0xf8, 0x02, 0x86,
	0x66, 0xc3, 0x68, 0x95, 0x53, 0xb1, 0x92, 0x49, 0xcc, 0x7b, 0x86, 0x7f, 0xa3, 0xfb, 0xf2, 0x79,
	0x3d, 0x05, 0x38, 0x80, 0xae, 0xe7, 0x7f, 0xff, 0x12, 0x9d, 0x9e, 0x8d, 0x5a, 0x08, 0xe0, 0x9c,
	0x9c, 0x1e, 0x07, 0x5f, 0xfd, 0x11, 0x3b, 0xfc, 0xcb, 0xa0, 0xa7, 0xed, 0x79, 0x94, 0x08, 0x7c,
	0x05, 0x0f, 0x42, 0x5a, 0x8a, 0x42, 0x51, 0x6e, 0x03, 0x38, 0xb0, 0xb1, 0x31, 0xc5, 0x7e, 0x55,
	0xd8, 0x40, 0xb7, 0xf0, 0x08, 0x06, 0x36, 0x2f, 0x96, 0xca, 0x6b, 0xd4, 0x6b, 0x39, 0xba, 0xf9,
	0xee, 0x1d, 0x38, 0x36, 0x1f, 0xf8, 0xd8, 0x02, 0xb7, 0xa6, 0xe6, 0xff, 0x57, 0xfd, 0xcf, 0xa4,
	0xaa, 0x87, 0x3d, 0x8b, 0x05, 0xf1, 0xfe, 0x5d, 0x12, 0x6e, 0x6b, 0xee, 0x98, 0x9f, 0xf1, 0xed,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xf3, 0x20, 0x76, 0x9f, 0x03, 0x00, 0x00,
}
