// Code generated by protoc-gen-go.
// source: tracking/tracking.proto
// DO NOT EDIT!

/*
Package tracking is a generated protocol buffer package.

It is generated from these files:
	tracking/tracking.proto

It has these top-level messages:
	Empty
	Id
	Ids
	UserFields
	UsersFields
	MergeRequest
	Events
	KeyValue
	Event
	ListEventsByTypeAndUserRequest
	ListEventsByUserRequest
	UserInfo
*/
package tracking

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_NONE        EventType = 0
	EventType_VIEWCONTENT EventType = 1
	EventType_SEARCH      EventType = 2
	EventType_ADDTOCART   EventType = 3
	EventType_CHECKOUT    EventType = 4
	EventType_PURCHASE    EventType = 5
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "VIEWCONTENT",
	2: "SEARCH",
	3: "ADDTOCART",
	4: "CHECKOUT",
	5: "PURCHASE",
}
var EventType_value = map[string]int32{
	"NONE":        0,
	"VIEWCONTENT": 1,
	"SEARCH":      2,
	"ADDTOCART":   3,
	"CHECKOUT":    4,
	"PURCHASE":    5,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	Ids []string `protobuf:"bytes,1,rep,name=Ids,json=ids" json:"Ids"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UserFields struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId"`
	// no accountid
	Fields []*KeyValue `protobuf:"bytes,2,rep,name=Fields,json=fields" json:"Fields"`
}

func (m *UserFields) Reset()                    { *m = UserFields{} }
func (m *UserFields) String() string            { return proto.CompactTextString(m) }
func (*UserFields) ProtoMessage()               {}
func (*UserFields) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserFields) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserFields) GetFields() []*KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UsersFields struct {
	UsersFields []*UserFields `protobuf:"bytes,1,rep,name=UsersFields,json=usersFields" json:"UsersFields"`
}

func (m *UsersFields) Reset()                    { *m = UsersFields{} }
func (m *UsersFields) String() string            { return proto.CompactTextString(m) }
func (*UsersFields) ProtoMessage()               {}
func (*UsersFields) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UsersFields) GetUsersFields() []*UserFields {
	if m != nil {
		return m.UsersFields
	}
	return nil
}

type MergeRequest struct {
	FormerUserId string `protobuf:"bytes,1,opt,name=FormerUserId,json=formerUserId" json:"FormerUserId"`
	RecentUserId string `protobuf:"bytes,2,opt,name=RecentUserId,json=recentUserId" json:"RecentUserId"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MergeRequest) GetFormerUserId() string {
	if m != nil {
		return m.FormerUserId
	}
	return ""
}

func (m *MergeRequest) GetRecentUserId() string {
	if m != nil {
		return m.RecentUserId
	}
	return ""
}

type Events struct {
	Events []string `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events"`
}

func (m *Events) Reset()                    { *m = Events{} }
func (m *Events) String() string            { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()               {}
func (*Events) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Events) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key"`
	Value string `protobuf:"bytes,2,opt,name=Value,json=value" json:"Value"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Event struct {
	AccountId string      `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId    string      `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	Type      EventType   `protobuf:"varint,3,opt,name=Type,json=type,enum=tracking.EventType" json:"Type"`
	Fields    []*KeyValue `protobuf:"bytes,4,rep,name=Fields,json=fields" json:"Fields"`
	CTime     string      `protobuf:"bytes,5,opt,name=CTime,json=cTime" json:"CTime"`
	LTime     string      `protobuf:"bytes,6,opt,name=LTime,json=lTime" json:"LTime"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Event) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Event) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetFields() []*KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Event) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Event) GetLTime() string {
	if m != nil {
		return m.LTime
	}
	return ""
}

type ListEventsByTypeAndUserRequest struct {
	AccountId string    `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	Type      EventType `protobuf:"varint,2,opt,name=Type,json=type,enum=tracking.EventType" json:"Type"`
	StartId   string    `protobuf:"bytes,3,opt,name=StartId,json=startId" json:"StartId"`
	Limit     int32     `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *ListEventsByTypeAndUserRequest) Reset()                    { *m = ListEventsByTypeAndUserRequest{} }
func (m *ListEventsByTypeAndUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEventsByTypeAndUserRequest) ProtoMessage()               {}
func (*ListEventsByTypeAndUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListEventsByTypeAndUserRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListEventsByTypeAndUserRequest) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *ListEventsByTypeAndUserRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListEventsByTypeAndUserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListEventsByUserRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	StartId   string `protobuf:"bytes,3,opt,name=StartId,json=startId" json:"StartId"`
	Limit     int32  `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *ListEventsByUserRequest) Reset()                    { *m = ListEventsByUserRequest{} }
func (m *ListEventsByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEventsByUserRequest) ProtoMessage()               {}
func (*ListEventsByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListEventsByUserRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListEventsByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListEventsByUserRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListEventsByUserRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserInfo struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	Key       string `protobuf:"bytes,3,opt,name=Key,json=key" json:"Key"`
	Value     string `protobuf:"bytes,4,opt,name=Value,json=value" json:"Value"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserInfo) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "tracking.Empty")
	proto.RegisterType((*Id)(nil), "tracking.Id")
	proto.RegisterType((*Ids)(nil), "tracking.Ids")
	proto.RegisterType((*UserFields)(nil), "tracking.UserFields")
	proto.RegisterType((*UsersFields)(nil), "tracking.UsersFields")
	proto.RegisterType((*MergeRequest)(nil), "tracking.MergeRequest")
	proto.RegisterType((*Events)(nil), "tracking.Events")
	proto.RegisterType((*KeyValue)(nil), "tracking.KeyValue")
	proto.RegisterType((*Event)(nil), "tracking.Event")
	proto.RegisterType((*ListEventsByTypeAndUserRequest)(nil), "tracking.ListEventsByTypeAndUserRequest")
	proto.RegisterType((*ListEventsByUserRequest)(nil), "tracking.ListEventsByUserRequest")
	proto.RegisterType((*UserInfo)(nil), "tracking.UserInfo")
	proto.RegisterEnum("tracking.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tracker service

type TrackerClient interface {
	Ban(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Unban(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	// COLLECTOR
	Track(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	// Users will be merge if they have same identity
	Identify(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	// Merge recent UserId to former userId, all action caused from recent
	// UserId are move to formerid, recent User will be deleted after 30 days
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*Empty, error)
	// control number of field to add on a user
	SetField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	AppendToField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	UnsetField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	// QUERIER
	ListEvents(ctx context.Context, in *ListEventsByUserRequest, opts ...grpc.CallOption) (*Events, error)
	ListEventsByType(ctx context.Context, in *ListEventsByTypeAndUserRequest, opts ...grpc.CallOption) (*Events, error)
	ListFields(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*UsersFields, error)
}

type trackerClient struct {
	cc *grpc.ClientConn
}

func NewTrackerClient(cc *grpc.ClientConn) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) Ban(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Ban", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Unban(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Unban", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Track(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Track", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Identify(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/Merge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) SetField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/SetField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) AppendToField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/AppendToField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) UnsetField(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tracking.Tracker/UnsetField", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) ListEvents(ctx context.Context, in *ListEventsByUserRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := grpc.Invoke(ctx, "/tracking.Tracker/ListEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) ListEventsByType(ctx context.Context, in *ListEventsByTypeAndUserRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := grpc.Invoke(ctx, "/tracking.Tracker/ListEventsByType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) ListFields(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*UsersFields, error) {
	out := new(UsersFields)
	err := grpc.Invoke(ctx, "/tracking.Tracker/ListFields", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tracker service

type TrackerServer interface {
	Ban(context.Context, *Id) (*Empty, error)
	Unban(context.Context, *Id) (*Empty, error)
	// COLLECTOR
	Track(context.Context, *Event) (*Empty, error)
	Update(context.Context, *Event) (*Empty, error)
	// Users will be merge if they have same identity
	Identify(context.Context, *UserInfo) (*Empty, error)
	// Merge recent UserId to former userId, all action caused from recent
	// UserId are move to formerid, recent User will be deleted after 30 days
	Merge(context.Context, *MergeRequest) (*Empty, error)
	// control number of field to add on a user
	SetField(context.Context, *UserInfo) (*Empty, error)
	AppendToField(context.Context, *UserInfo) (*Empty, error)
	UnsetField(context.Context, *UserInfo) (*Empty, error)
	// QUERIER
	ListEvents(context.Context, *ListEventsByUserRequest) (*Events, error)
	ListEventsByType(context.Context, *ListEventsByTypeAndUserRequest) (*Events, error)
	ListFields(context.Context, *Ids) (*UsersFields, error)
}

func RegisterTrackerServer(s *grpc.Server, srv TrackerServer) {
	s.RegisterService(&_Tracker_serviceDesc, srv)
}

func _Tracker_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Ban(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Unban(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Track(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Update(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Identify(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_SetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).SetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/SetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).SetField(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_AppendToField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).AppendToField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/AppendToField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).AppendToField(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_UnsetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).UnsetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/UnsetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).UnsetField(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).ListEvents(ctx, req.(*ListEventsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_ListEventsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsByTypeAndUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).ListEventsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/ListEventsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).ListEventsByType(ctx, req.(*ListEventsByTypeAndUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_ListFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).ListFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracker/ListFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).ListFields(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ban",
			Handler:    _Tracker_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Tracker_Unban_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _Tracker_Track_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tracker_Update_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _Tracker_Identify_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _Tracker_Merge_Handler,
		},
		{
			MethodName: "SetField",
			Handler:    _Tracker_SetField_Handler,
		},
		{
			MethodName: "AppendToField",
			Handler:    _Tracker_AppendToField_Handler,
		},
		{
			MethodName: "UnsetField",
			Handler:    _Tracker_UnsetField_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Tracker_ListEvents_Handler,
		},
		{
			MethodName: "ListEventsByType",
			Handler:    _Tracker_ListEventsByType_Handler,
		},
		{
			MethodName: "ListFields",
			Handler:    _Tracker_ListFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracking/tracking.proto",
}

func init() { proto.RegisterFile("tracking/tracking.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0xc6, 0x7f, 0x81, 0x81, 0x24, 0xd6, 0xfe, 0xf2, 0x4b, 0xac, 0xa8, 0xaa, 0xe8, 0x1e, 0x5a,
	0x2b, 0xad, 0x52, 0x95, 0x54, 0xb9, 0x3b, 0x8e, 0xa3, 0xa0, 0xa4, 0x10, 0x19, 0x93, 0x9e, 0x7a,
	0x20, 0x78, 0x49, 0xad, 0x80, 0x71, 0xed, 0x25, 0x92, 0x4f, 0xbd, 0xf7, 0x05, 0xfa, 0x36, 0x7d,
	0xb6, 0x6a, 0xd7, 0x36, 0x36, 0x29, 0x69, 0xa0, 0x17, 0xd8, 0x6f, 0x76, 0xf6, 0x9b, 0x6f, 0x66,
	0x76, 0xc7, 0xb0, 0x4f, 0xa3, 0xe1, 0xe8, 0xde, 0x0f, 0xee, 0xde, 0xe7, 0x8b, 0xa3, 0x30, 0x9a,
	0xd1, 0x19, 0xaa, 0xe5, 0x18, 0x57, 0x41, 0xb1, 0xa7, 0x21, 0x4d, 0xf0, 0x2e, 0x88, 0x1d, 0x0f,
	0x6d, 0xb3, 0x5f, 0x5d, 0x68, 0x09, 0x46, 0xdd, 0x11, 0x7d, 0x0f, 0xef, 0x83, 0xd4, 0xf1, 0x62,
	0xa4, 0xf1, 0x3f, 0x5d, 0x68, 0x49, 0x46, 0xdd, 0x91, 0x7c, 0x2f, 0xc6, 0xd7, 0x00, 0x83, 0x98,
	0x44, 0xe7, 0x3e, 0x99, 0x78, 0x31, 0xda, 0x03, 0x95, 0xa1, 0xc5, 0x51, 0x75, 0xce, 0x11, 0x3a,
	0x04, 0x35, 0xf5, 0xd0, 0xc5, 0x96, 0x64, 0x34, 0xda, 0xe8, 0x68, 0x21, 0xe4, 0x92, 0x24, 0x37,
	0xc3, 0xc9, 0x9c, 0x38, 0xea, 0x98, 0x7b, 0x60, 0x1b, 0x1a, 0x8c, 0x23, 0xce, 0x28, 0x4f, 0x96,
	0x20, 0x0f, 0xdd, 0x68, 0xef, 0x16, 0xe7, 0x8b, 0xe8, 0x4e, 0x63, 0x5e, 0x38, 0xe2, 0x1b, 0x68,
	0x7e, 0x22, 0xd1, 0x1d, 0x71, 0xc8, 0xb7, 0x39, 0x89, 0x29, 0xc2, 0xd0, 0x3c, 0x9f, 0x45, 0x53,
	0x12, 0x2d, 0x09, 0x6c, 0x8e, 0x4b, 0x36, 0xe6, 0xe3, 0x90, 0x11, 0x09, 0x68, 0xe6, 0x23, 0xa6,
	0x3e, 0x51, 0xc9, 0x86, 0x5b, 0xa0, 0xda, 0x0f, 0x24, 0xa0, 0x3c, 0xd9, 0x74, 0x95, 0xd5, 0x43,
	0x25, 0x1c, 0xe1, 0x36, 0xd4, 0xf2, 0xa4, 0x58, 0xc1, 0x2e, 0x49, 0x92, 0x05, 0x93, 0xee, 0x49,
	0x82, 0x76, 0x41, 0xe1, 0x5b, 0x19, 0xb9, 0xf2, 0xc0, 0x00, 0xfe, 0x25, 0x80, 0xc2, 0xc9, 0xd0,
	0x0b, 0xa8, 0x9b, 0xa3, 0xd1, 0x6c, 0x1e, 0xd0, 0x85, 0xc8, 0xfa, 0x30, 0x37, 0x94, 0x0a, 0x2c,
	0x2e, 0x15, 0xf8, 0x0d, 0xc8, 0x6e, 0x12, 0x12, 0x5d, 0x6a, 0x09, 0xc6, 0x76, 0xfb, 0xbf, 0xa2,
	0x3c, 0x9c, 0x94, 0x6d, 0x39, 0x32, 0x4d, 0x42, 0x52, 0xea, 0x84, 0xfc, 0x5c, 0x27, 0x98, 0x54,
	0xcb, 0xf5, 0xa7, 0x44, 0x57, 0x52, 0xa9, 0x23, 0x06, 0x98, 0xf5, 0x8a, 0x5b, 0xd5, 0xd4, 0x3a,
	0x61, 0x00, 0xff, 0x14, 0xe0, 0xe5, 0x95, 0x1f, 0xd3, 0xb4, 0x22, 0xa7, 0x09, 0x0b, 0x69, 0x06,
	0x1e, 0x13, 0x9b, 0x77, 0xe0, 0xef, 0x99, 0xe5, 0x19, 0x88, 0xcf, 0x65, 0xa0, 0x43, 0xb5, 0x4f,
	0x87, 0x11, 0x23, 0x91, 0x38, 0x49, 0x35, 0x4e, 0x21, 0x57, 0xe6, 0x4f, 0x7d, 0xaa, 0xcb, 0x2d,
	0xc1, 0x50, 0x1c, 0x65, 0xc2, 0x00, 0xfe, 0x0e, 0xfb, 0x65, 0x61, 0xeb, 0x2b, 0x7a, 0xaa, 0xd6,
	0x9b, 0x0a, 0xf8, 0x0a, 0x35, 0xce, 0x13, 0x8c, 0x67, 0xff, 0x18, 0x31, 0xbb, 0x45, 0xd2, 0x8a,
	0x5b, 0x24, 0x97, 0x6e, 0xd1, 0xe1, 0x17, 0xa8, 0x2f, 0xaa, 0x85, 0x6a, 0x20, 0x77, 0x7b, 0x5d,
	0x5b, 0xab, 0xa0, 0x1d, 0x68, 0xdc, 0x74, 0xec, 0xcf, 0x56, 0xaf, 0xeb, 0xda, 0x5d, 0x57, 0x13,
	0x10, 0x80, 0xda, 0xb7, 0x4d, 0xc7, 0xba, 0xd0, 0x44, 0xb4, 0x05, 0x75, 0xf3, 0xec, 0xcc, 0xed,
	0x59, 0xa6, 0xe3, 0x6a, 0x12, 0x6a, 0x42, 0xcd, 0xba, 0xb0, 0xad, 0xcb, 0xde, 0xc0, 0xd5, 0x64,
	0x86, 0xae, 0x07, 0x8e, 0x75, 0x61, 0xf6, 0x6d, 0x4d, 0x69, 0xff, 0x50, 0xa0, 0xea, 0xb2, 0xb6,
	0x90, 0x08, 0xbd, 0x06, 0xe9, 0x74, 0x18, 0xa0, 0x66, 0xd1, 0xa7, 0x8e, 0x77, 0xb0, 0x53, 0xea,
	0x1a, 0x1f, 0x26, 0x15, 0x64, 0x80, 0x32, 0x08, 0x6e, 0xd7, 0xf1, 0x7c, 0x0b, 0x0a, 0x27, 0x47,
	0x3b, 0x8f, 0x7a, 0xbf, 0xca, 0xf9, 0x1d, 0xa8, 0x83, 0xd0, 0x1b, 0x52, 0xb2, 0x96, 0xf7, 0x07,
	0xa8, 0x75, 0x3c, 0x12, 0x50, 0x7f, 0x9c, 0x20, 0xb4, 0x3c, 0x3a, 0x58, 0x57, 0x56, 0x1d, 0x69,
	0x83, 0xc2, 0xc7, 0x07, 0xda, 0x2b, 0xf6, 0xca, 0xf3, 0xe4, 0x89, 0x30, 0x7d, 0x42, 0xf9, 0xf3,
	0x5a, 0x37, 0xcc, 0x09, 0x6c, 0x99, 0x61, 0x48, 0x02, 0xcf, 0x9d, 0x6d, 0x74, 0xee, 0x18, 0x60,
	0x10, 0xc4, 0x1b, 0x06, 0xb3, 0x00, 0x8a, 0x97, 0x80, 0x5e, 0x15, 0x0e, 0x4f, 0xbc, 0x8f, 0x03,
	0xed, 0x51, 0x6d, 0x63, 0x5c, 0x41, 0xd7, 0xa0, 0x3d, 0x7e, 0xe7, 0xc8, 0x58, 0x4d, 0xf5, 0xe7,
	0x0c, 0x58, 0xc9, 0xf8, 0x31, 0x95, 0x95, 0xcd, 0xfb, 0xad, 0xf2, 0x3d, 0x89, 0x0f, 0xfe, 0x5f,
	0x4e, 0x2d, 0x9f, 0xee, 0x95, 0x5b, 0x95, 0x7f, 0xc1, 0x8e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xea, 0x61, 0x0b, 0x80, 0xdc, 0x06, 0x00, 0x00,
}
