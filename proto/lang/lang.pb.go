// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lang/lang.proto

/*
Package lang is a generated protocol buffer package.

It is generated from these files:
	lang/lang.proto

It has these top-level messages:
*/
package lang

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type T int32

const (
	T_undefined                        T = 0
	T_user_has_already_in_conversation T = 1
	T_conversation_closed              T = 2
	T_invalid_invite                   T = 3
	T_invalid_agent                    T = 4
	T_user_is_not_in_conversation      T = 5
	T_conversation_not_found           T = 6
	T_invalid_left                     T = 14
	T_internal_error                   T = 30
	T_invalid_input                    T = 22
	T_invalid_form                     T = 20
	T_access_token_expired             T = 21
	T_invalid_credential               T = 13
	T_credential_not_set               T = 7
	T_wrong_account_in_credential      T = 8
	T_wrong_user_in_credential         T = 10
	T_access_deny                      T = 9
	T_unable_to_send_message           T = 11
	T_topic_is_empty                   T = 12
	T_invalid_json                     T = 15
	T_invalid_protobuf                 T = 16
	T_unable_to_lock                   T = 40
	T_empty                            T = 41
	T_wrong_type                       T = 42
	T_invalid_kafka_topic              T = 43
	T_database_error                   T = 44
	T_timeout                          T = 45
	T_websocket_error                  T = 46
	T_kafka_error                      T = 47
	T_invalid_token                    T = 48
	T_account_not_found                T = 49
	T_agent_not_found                  T = 50
	T_invalid_email                    T = 60
	T_plan_not_found                   T = 61
	T_agent_group_not_found            T = 62
	T_empty_client_type                T = 63
	T_empty_url                        T = 64
	T_empty_name                       T = 65
	T_client_not_found                 T = 66
)

var T_name = map[int32]string{
	0:  "undefined",
	1:  "user_has_already_in_conversation",
	2:  "conversation_closed",
	3:  "invalid_invite",
	4:  "invalid_agent",
	5:  "user_is_not_in_conversation",
	6:  "conversation_not_found",
	14: "invalid_left",
	30: "internal_error",
	22: "invalid_input",
	20: "invalid_form",
	21: "access_token_expired",
	13: "invalid_credential",
	7:  "credential_not_set",
	8:  "wrong_account_in_credential",
	10: "wrong_user_in_credential",
	9:  "access_deny",
	11: "unable_to_send_message",
	12: "topic_is_empty",
	15: "invalid_json",
	16: "invalid_protobuf",
	40: "unable_to_lock",
	41: "empty",
	42: "wrong_type",
	43: "invalid_kafka_topic",
	44: "database_error",
	45: "timeout",
	46: "websocket_error",
	47: "kafka_error",
	48: "invalid_token",
	49: "account_not_found",
	50: "agent_not_found",
	60: "invalid_email",
	61: "plan_not_found",
	62: "agent_group_not_found",
	63: "empty_client_type",
	64: "empty_url",
	65: "empty_name",
	66: "client_not_found",
}
var T_value = map[string]int32{
	"undefined":                        0,
	"user_has_already_in_conversation": 1,
	"conversation_closed":              2,
	"invalid_invite":                   3,
	"invalid_agent":                    4,
	"user_is_not_in_conversation":      5,
	"conversation_not_found":           6,
	"invalid_left":                     14,
	"internal_error":                   30,
	"invalid_input":                    22,
	"invalid_form":                     20,
	"access_token_expired":             21,
	"invalid_credential":               13,
	"credential_not_set":               7,
	"wrong_account_in_credential":      8,
	"wrong_user_in_credential":         10,
	"access_deny":                      9,
	"unable_to_send_message":           11,
	"topic_is_empty":                   12,
	"invalid_json":                     15,
	"invalid_protobuf":                 16,
	"unable_to_lock":                   40,
	"empty":                            41,
	"wrong_type":                       42,
	"invalid_kafka_topic":              43,
	"database_error":                   44,
	"timeout":                          45,
	"websocket_error":                  46,
	"kafka_error":                      47,
	"invalid_token":                    48,
	"account_not_found":                49,
	"agent_not_found":                  50,
	"invalid_email":                    60,
	"plan_not_found":                   61,
	"agent_group_not_found":            62,
	"empty_client_type":                63,
	"empty_url":                        64,
	"empty_name":                       65,
	"client_not_found":                 66,
}

func (x T) Enum() *T {
	p := new(T)
	*p = x
	return p
}
func (x T) String() string {
	return proto.EnumName(T_name, int32(x))
}
func (x *T) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(T_value, data, "T")
	if err != nil {
		return err
	}
	*x = T(value)
	return nil
}
func (T) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterEnum("lang.T", T_name, T_value)
}

func init() { proto.RegisterFile("lang/lang.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xdd, 0x72, 0xd3, 0x3c,
	0x10, 0xfd, 0xfa, 0xd1, 0x1f, 0xba, 0x69, 0x92, 0xed, 0x36, 0x09, 0xe5, 0x67, 0x80, 0x0b, 0x2e,
	0xa0, 0x40, 0x0b, 0x5c, 0xf3, 0xff, 0x0c, 0xdc, 0x6b, 0x14, 0x7b, 0x1d, 0x44, 0xe4, 0x95, 0x47,
	0x92, 0x53, 0xf2, 0x92, 0x3c, 0x13, 0x23, 0x2b, 0x9e, 0xb8, 0xc3, 0x4d, 0x26, 0x3a, 0xda, 0x3d,
	0x67, 0xcf, 0x59, 0x19, 0xa6, 0x56, 0xcb, 0xea, 0x26, 0xfd, 0x5c, 0x37, 0xde, 0x45, 0x47, 0x87,
	0xe9, 0xff, 0xd5, 0x9f, 0x63, 0x38, 0xf8, 0x41, 0x63, 0x38, 0x6d, 0xa5, 0xe4, 0xca, 0x08, 0x97,
	0xf8, 0x1f, 0xbd, 0x80, 0xe7, 0x6d, 0x60, 0xaf, 0x7e, 0xea, 0xa0, 0xb4, 0xf5, 0xac, 0xcb, 0xad,
	0x32, 0xa2, 0x0a, 0x27, 0x1b, 0xf6, 0x41, 0x47, 0xe3, 0x04, 0x0f, 0xe8, 0x01, 0x5c, 0x0c, 0x11,
	0x55, 0x58, 0x17, 0xb8, 0xc4, 0xff, 0x89, 0x60, 0x62, 0x64, 0xa3, 0xad, 0x29, 0x95, 0x91, 0x8d,
	0x89, 0x8c, 0xf7, 0xe8, 0x1c, 0xc6, 0x3d, 0xa6, 0x57, 0x2c, 0x11, 0x0f, 0xe9, 0x19, 0x3c, 0xee,
	0x54, 0x4c, 0x50, 0xe2, 0xe2, 0x3f, 0x02, 0x47, 0xf4, 0x08, 0x16, 0x77, 0x04, 0x52, 0x55, 0xe5,
	0x5a, 0x29, 0xf1, 0x98, 0x10, 0xce, 0x7a, 0x3e, 0xcb, 0x55, 0xc4, 0x49, 0x56, 0x8d, 0xec, 0x45,
	0x5b, 0xc5, 0xde, 0x3b, 0x8f, 0x4f, 0x87, 0xaa, 0x46, 0x9a, 0x36, 0xe2, 0x62, 0xd8, 0x58, 0x39,
	0x5f, 0xe3, 0x8c, 0x2e, 0x61, 0xa6, 0x8b, 0x82, 0x43, 0x50, 0xd1, 0xad, 0x59, 0x14, 0xff, 0x6e,
	0x8c, 0xe7, 0x12, 0xe7, 0xb4, 0x00, 0xea, 0x6b, 0x0b, 0xcf, 0x25, 0x4b, 0x34, 0xda, 0xe2, 0x38,
	0xe1, 0xfb, 0x73, 0x37, 0x56, 0xe0, 0x88, 0x27, 0xc9, 0xd1, 0xad, 0x77, 0xb2, 0x52, 0xba, 0x28,
	0x5c, 0x2b, 0xd9, 0xd3, 0xbe, 0xf1, 0x3e, 0x3d, 0x81, 0xcb, 0x5c, 0x90, 0x8d, 0xdf, 0xb9, 0x05,
	0x9a, 0xc2, 0x68, 0x37, 0x48, 0xc9, 0xb2, 0xc5, 0xd3, 0x14, 0x40, 0x2b, 0x7a, 0x69, 0x59, 0x45,
	0xa7, 0x02, 0x4b, 0xa9, 0x6a, 0x0e, 0x41, 0xaf, 0x18, 0x47, 0xc9, 0x6e, 0x74, 0x8d, 0x29, 0x52,
	0x7c, 0x5c, 0x37, 0x71, 0x8b, 0x67, 0x43, 0x6f, 0xbf, 0x82, 0x13, 0x9c, 0xd2, 0x0c, 0xb0, 0x47,
	0xba, 0xad, 0x2f, 0xdb, 0x0a, 0x31, 0xf5, 0xee, 0x79, 0xad, 0x2b, 0xd6, 0xf8, 0x92, 0x4e, 0xe1,
	0x28, 0xd3, 0xbc, 0xa2, 0x09, 0x40, 0x9e, 0x32, 0x6e, 0x1b, 0xc6, 0xab, 0xb4, 0xe8, 0x9e, 0x64,
	0xad, 0xab, 0xb5, 0x56, 0x9d, 0x30, 0xbe, 0x4e, 0x3c, 0xa5, 0x8e, 0x7a, 0xa9, 0x03, 0xef, 0x22,
	0x7f, 0x43, 0x23, 0x38, 0x89, 0xa6, 0x66, 0xd7, 0x46, 0x7c, 0x4b, 0x17, 0x30, 0xbd, 0xe5, 0x65,
	0x70, 0xc5, 0x9a, 0xe3, 0xae, 0xe2, 0x3a, 0xd9, 0xcc, 0x34, 0x19, 0xb8, 0x19, 0x6e, 0xa9, 0xdb,
	0x00, 0xbe, 0xa3, 0x39, 0x9c, 0xf7, 0x19, 0xee, 0xb7, 0xfe, 0x3e, 0xf1, 0x75, 0xaf, 0x67, 0x00,
	0x7e, 0x18, 0xb6, 0x73, 0xad, 0x8d, 0xc5, 0x8f, 0x69, 0xb0, 0xc6, 0xea, 0xe1, 0x8b, 0xf9, 0x44,
	0x0f, 0x61, 0x9e, 0x7b, 0x57, 0xde, 0xb5, 0xcd, 0xe0, 0xea, 0x73, 0x52, 0xeb, 0xbc, 0xab, 0xc2,
	0x9a, 0x54, 0xd1, 0xf9, 0xfe, 0x92, 0xbe, 0x8a, 0x0c, 0xb7, 0xde, 0xe2, 0xd7, 0x14, 0x4b, 0x3e,
	0x8a, 0xae, 0x19, 0xbf, 0xa5, 0x6c, 0x77, 0xf5, 0x7b, 0xae, 0xef, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x51, 0x33, 0x60, 0x5b, 0x68, 0x03, 0x00, 0x00,
}
