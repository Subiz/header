// Code generated by protoc-gen-go.
// source: account/account.proto
// DO NOT EDIT!

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/account.proto

It has these top-level messages:
	Account
	Id
	Ids
	Empty
	UpdatePlanRequest
	AgentGroup
	Agent
	LoginRequest
	Agents
	Email
	ChangePasswordRequest
	LimitsResponse
	Limit
	AccAgentConfiguration
	NotificationConfig
	RegisterTokenExpiredEvent
	AgentGroups
	ListGroupAgentRequest
	UpdateGroupRequest
	InviteAgentRequest
	CancelInvitationRequest
	UpdatePermissionRequest
	AcceptInvitationRequest
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "bitbucket.org/subiz/servicespec/proto/common/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_OK             ErrorCode = 0
	ErrorCode_NOTFOUND       ErrorCode = 404
	ErrorCode_INVALID        ErrorCode = 400
	ErrorCode_UNAUTHORIZED   ErrorCode = 401
	ErrorCode_INTERNAL_ERROR ErrorCode = 500
)

var ErrorCode_name = map[int32]string{
	0:   "OK",
	404: "NOTFOUND",
	400: "INVALID",
	401: "UNAUTHORIZED",
	500: "INTERNAL_ERROR",
}
var ErrorCode_value = map[string]int32{
	"OK":             0,
	"NOTFOUND":       404,
	"INVALID":        400,
	"UNAUTHORIZED":   401,
	"INTERNAL_ERROR": 500,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Gender int32

const (
	Gender_UNSET   Gender = 0
	Gender_MALE    Gender = 1
	Gender_FEMALE  Gender = 2
	Gender_UNKNOWN Gender = 3
)

var Gender_name = map[int32]string{
	0: "UNSET",
	1: "MALE",
	2: "FEMALE",
	3: "UNKNOWN",
}
var Gender_value = map[string]int32{
	"UNSET":   0,
	"MALE":    1,
	"FEMALE":  2,
	"UNKNOWN": 3,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Account struct {
	Id       string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	State    int32  `protobuf:"varint,3,opt,name=State,json=state" json:"State,omitempty"`
	Plan     int32  `protobuf:"varint,4,opt,name=Plan,json=plan" json:"Plan,omitempty"`
	LogoUrl  string `protobuf:"bytes,7,opt,name=LogoUrl,json=logoUrl" json:"LogoUrl,omitempty"`
	OwnerId  string `protobuf:"bytes,5,opt,name=OwnerId,json=ownerId" json:"OwnerId,omitempty"`
	IsClosed bool   `protobuf:"varint,6,opt,name=IsClosed,json=isClosed" json:"IsClosed,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Account) GetPlan() int32 {
	if m != nil {
		return m.Plan
	}
	return 0
}

func (m *Account) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *Account) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Account) GetIsClosed() bool {
	if m != nil {
		return m.IsClosed
	}
	return false
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	Ids []string `protobuf:"bytes,1,rep,name=Ids,json=ids" json:"Ids,omitempty"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdatePlanRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	PlanId    int32  `protobuf:"varint,2,opt,name=PlanId,json=planId" json:"PlanId,omitempty"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdatePlanRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UpdatePlanRequest) GetPlanId() int32 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

type AgentGroup struct {
	Id       string   `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Title    string   `protobuf:"bytes,2,opt,name=Title,json=title" json:"Title,omitempty"`
	AgentIds []string `protobuf:"bytes,3,rep,name=AgentIds,json=agentIds" json:"AgentIds,omitempty"`
	Tag      string   `protobuf:"bytes,4,opt,name=Tag,json=tag" json:"Tag,omitempty"`
}

func (m *AgentGroup) Reset()                    { *m = AgentGroup{} }
func (m *AgentGroup) String() string            { return proto.CompactTextString(m) }
func (*AgentGroup) ProtoMessage()               {}
func (*AgentGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AgentGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgentGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AgentGroup) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *AgentGroup) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type Agent struct {
	Id            string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=FirstName,json=firstName" json:"FirstName,omitempty"`
	LastName      string `protobuf:"bytes,3,opt,name=LastName,json=lastName" json:"LastName,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=Email,json=email" json:"Email,omitempty"`
	IsOwner       bool   `protobuf:"varint,5,opt,name=IsOwner,json=isOwner" json:"IsOwner,omitempty"`
	AccountId     string `protobuf:"bytes,6,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	JobTitle      string `protobuf:"bytes,7,opt,name=JobTitle,json=jobTitle" json:"JobTitle,omitempty"`
	Gender        Gender `protobuf:"varint,8,opt,name=Gender,json=gender,enum=account.Gender" json:"Gender,omitempty"`
	LastLoginTime string `protobuf:"bytes,9,opt,name=LastLoginTime,json=lastLoginTime" json:"LastLoginTime,omitempty"`
	AvatarUrl     string `protobuf:"bytes,11,opt,name=AvatarUrl,json=avatarUrl" json:"AvatarUrl,omitempty"`
	Language      string `protobuf:"bytes,12,opt,name=Language,json=language" json:"Language,omitempty"`
	Timezone      string `protobuf:"bytes,13,opt,name=Timezone,json=timezone" json:"Timezone,omitempty"`
	// bool IsVerified = 8;
	IsConfirmed       bool        `protobuf:"varint,15,opt,name=IsConfirmed,json=isConfirmed" json:"IsConfirmed,omitempty"`
	Scopes            *auth.Scope `protobuf:"bytes,17,opt,name=Scopes,json=scopes" json:"Scopes,omitempty"`
	HashedPassword    string      `protobuf:"bytes,18,opt,name=HashedPassword,json=hashedPassword" json:"HashedPassword,omitempty"`
	JoinDate          string      `protobuf:"bytes,19,opt,name=JoinDate,json=joinDate" json:"JoinDate,omitempty"`
	InviteFromAgentId string      `protobuf:"bytes,20,opt,name=InviteFromAgentId,json=inviteFromAgentId" json:"InviteFromAgentId,omitempty"`
	IsIn              bool        `protobuf:"varint,21,opt,name=IsIn,json=isIn" json:"IsIn,omitempty"`
	// set to true if agent is being invited
	IsInviting bool `protobuf:"varint,22,opt,name=IsInviting,json=isInviting" json:"IsInviting,omitempty"`
	IsDisabled bool `protobuf:"varint,23,opt,name=IsDisabled,json=isDisabled" json:"IsDisabled,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Agent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Agent) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Agent) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Agent) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Agent) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *Agent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Agent) GetJobTitle() string {
	if m != nil {
		return m.JobTitle
	}
	return ""
}

func (m *Agent) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_UNSET
}

func (m *Agent) GetLastLoginTime() string {
	if m != nil {
		return m.LastLoginTime
	}
	return ""
}

func (m *Agent) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Agent) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Agent) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Agent) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func (m *Agent) GetScopes() *auth.Scope {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *Agent) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

func (m *Agent) GetJoinDate() string {
	if m != nil {
		return m.JoinDate
	}
	return ""
}

func (m *Agent) GetInviteFromAgentId() string {
	if m != nil {
		return m.InviteFromAgentId
	}
	return ""
}

func (m *Agent) GetIsIn() bool {
	if m != nil {
		return m.IsIn
	}
	return false
}

func (m *Agent) GetIsInviting() bool {
	if m != nil {
		return m.IsInviting
	}
	return false
}

func (m *Agent) GetIsDisabled() bool {
	if m != nil {
		return m.IsDisabled
	}
	return false
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Agents struct {
	Agents []*Agent `protobuf:"bytes,1,rep,name=Agents,json=agents" json:"Agents,omitempty"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (m *Agents) String() string            { return proto.CompactTextString(m) }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type Email struct {
	Email string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Email) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ChangePasswordRequest struct {
	AgentId  string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *ChangePasswordRequest) Reset()                    { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()               {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ChangePasswordRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *ChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LimitsResponse struct {
	Limits []*Limit `protobuf:"bytes,1,rep,name=Limits,json=limits" json:"Limits,omitempty"`
}

func (m *LimitsResponse) Reset()                    { *m = LimitsResponse{} }
func (m *LimitsResponse) String() string            { return proto.CompactTextString(m) }
func (*LimitsResponse) ProtoMessage()               {}
func (*LimitsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LimitsResponse) GetLimits() []*Limit {
	if m != nil {
		return m.Limits
	}
	return nil
}

type Limit struct {
	ConcurrentChat   int32 `protobuf:"varint,1,opt,name=ConcurrentChat,json=concurrentChat" json:"ConcurrentChat,omitempty"`
	ChatHistory      int32 `protobuf:"varint,2,opt,name=ChatHistory,json=chatHistory" json:"ChatHistory,omitempty"`
	MaxTriggers      int32 `protobuf:"varint,3,opt,name=MaxTriggers,json=maxTriggers" json:"MaxTriggers,omitempty"`
	MaxAgents        int32 `protobuf:"varint,4,opt,name=MaxAgents,json=maxAgents" json:"MaxAgents,omitempty"`
	MaxAgentGroups   int32 `protobuf:"varint,5,opt,name=MaxAgentGroups,json=maxAgentGroups" json:"MaxAgentGroups,omitempty"`
	MaxAgentInGroups int32 `protobuf:"varint,6,opt,name=MaxAgentInGroups,json=maxAgentInGroups" json:"MaxAgentInGroups,omitempty"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Limit) GetConcurrentChat() int32 {
	if m != nil {
		return m.ConcurrentChat
	}
	return 0
}

func (m *Limit) GetChatHistory() int32 {
	if m != nil {
		return m.ChatHistory
	}
	return 0
}

func (m *Limit) GetMaxTriggers() int32 {
	if m != nil {
		return m.MaxTriggers
	}
	return 0
}

func (m *Limit) GetMaxAgents() int32 {
	if m != nil {
		return m.MaxAgents
	}
	return 0
}

func (m *Limit) GetMaxAgentGroups() int32 {
	if m != nil {
		return m.MaxAgentGroups
	}
	return 0
}

func (m *Limit) GetMaxAgentInGroups() int32 {
	if m != nil {
		return m.MaxAgentInGroups
	}
	return 0
}

type AccAgentConfiguration struct {
	NotificationSound bool                `protobuf:"varint,1,opt,name=NotificationSound,json=notificationSound" json:"NotificationSound,omitempty"`
	EmailNoti         *NotificationConfig `protobuf:"bytes,2,opt,name=EmailNoti,json=emailNoti" json:"EmailNoti,omitempty"`
	DesktopNoti       *NotificationConfig `protobuf:"bytes,3,opt,name=DesktopNoti,json=desktopNoti" json:"DesktopNoti,omitempty"`
	MobileNoti        *NotificationConfig `protobuf:"bytes,4,opt,name=MobileNoti,json=mobileNoti" json:"MobileNoti,omitempty"`
}

func (m *AccAgentConfiguration) Reset()                    { *m = AccAgentConfiguration{} }
func (m *AccAgentConfiguration) String() string            { return proto.CompactTextString(m) }
func (*AccAgentConfiguration) ProtoMessage()               {}
func (*AccAgentConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AccAgentConfiguration) GetNotificationSound() bool {
	if m != nil {
		return m.NotificationSound
	}
	return false
}

func (m *AccAgentConfiguration) GetEmailNoti() *NotificationConfig {
	if m != nil {
		return m.EmailNoti
	}
	return nil
}

func (m *AccAgentConfiguration) GetDesktopNoti() *NotificationConfig {
	if m != nil {
		return m.DesktopNoti
	}
	return nil
}

func (m *AccAgentConfiguration) GetMobileNoti() *NotificationConfig {
	if m != nil {
		return m.MobileNoti
	}
	return nil
}

type NotificationConfig struct {
	AllActivity         bool `protobuf:"varint,1,opt,name=AllActivity,json=allActivity" json:"AllActivity,omitempty"`
	MaintainenceMessage bool `protobuf:"varint,2,opt,name=MaintainenceMessage,json=maintainenceMessage" json:"MaintainenceMessage,omitempty"`
	DirectMessage       bool `protobuf:"varint,3,opt,name=DirectMessage,json=directMessage" json:"DirectMessage,omitempty"`
	News                bool `protobuf:"varint,4,opt,name=News,json=news" json:"News,omitempty"`
	Nothing             bool `protobuf:"varint,5,opt,name=Nothing,json=nothing" json:"Nothing,omitempty"`
}

func (m *NotificationConfig) Reset()                    { *m = NotificationConfig{} }
func (m *NotificationConfig) String() string            { return proto.CompactTextString(m) }
func (*NotificationConfig) ProtoMessage()               {}
func (*NotificationConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NotificationConfig) GetAllActivity() bool {
	if m != nil {
		return m.AllActivity
	}
	return false
}

func (m *NotificationConfig) GetMaintainenceMessage() bool {
	if m != nil {
		return m.MaintainenceMessage
	}
	return false
}

func (m *NotificationConfig) GetDirectMessage() bool {
	if m != nil {
		return m.DirectMessage
	}
	return false
}

func (m *NotificationConfig) GetNews() bool {
	if m != nil {
		return m.News
	}
	return false
}

func (m *NotificationConfig) GetNothing() bool {
	if m != nil {
		return m.Nothing
	}
	return false
}

type RegisterTokenExpiredEvent struct {
	Email string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *RegisterTokenExpiredEvent) Reset()                    { *m = RegisterTokenExpiredEvent{} }
func (m *RegisterTokenExpiredEvent) String() string            { return proto.CompactTextString(m) }
func (*RegisterTokenExpiredEvent) ProtoMessage()               {}
func (*RegisterTokenExpiredEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RegisterTokenExpiredEvent) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AgentGroups struct {
	Groups []*AgentGroups `protobuf:"bytes,1,rep,name=Groups,json=groups" json:"Groups,omitempty"`
}

func (m *AgentGroups) Reset()                    { *m = AgentGroups{} }
func (m *AgentGroups) String() string            { return proto.CompactTextString(m) }
func (*AgentGroups) ProtoMessage()               {}
func (*AgentGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AgentGroups) GetGroups() []*AgentGroups {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ListGroupAgentRequest struct {
	Keyword   string `protobuf:"bytes,1,opt,name=Keyword,json=keyword" json:"Keyword,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
}

func (m *ListGroupAgentRequest) Reset()                    { *m = ListGroupAgentRequest{} }
func (m *ListGroupAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupAgentRequest) ProtoMessage()               {}
func (*ListGroupAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListGroupAgentRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ListGroupAgentRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type UpdateGroupRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=GroupId,json=groupId" json:"GroupId,omitempty"`
	AgentId string `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
}

func (m *UpdateGroupRequest) Reset()                    { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()               {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *UpdateGroupRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type InviteAgentRequest struct {
	// id of inviter
	InviterId string `protobuf:"bytes,1,opt,name=InviterId,json=inviterId" json:"InviterId,omitempty"`
	// id of account
	AccountId      string `protobuf:"bytes,4,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	AgentEmail     string `protobuf:"bytes,3,opt,name=AgentEmail,json=agentEmail" json:"AgentEmail,omitempty"`
	AgentFirstName string `protobuf:"bytes,5,opt,name=AgentFirstName,json=agentFirstName" json:"AgentFirstName,omitempty"`
	AgentLastName  string `protobuf:"bytes,6,opt,name=AgentLastName,json=agentLastName" json:"AgentLastName,omitempty"`
}

func (m *InviteAgentRequest) Reset()                    { *m = InviteAgentRequest{} }
func (m *InviteAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*InviteAgentRequest) ProtoMessage()               {}
func (*InviteAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *InviteAgentRequest) GetInviterId() string {
	if m != nil {
		return m.InviterId
	}
	return ""
}

func (m *InviteAgentRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *InviteAgentRequest) GetAgentEmail() string {
	if m != nil {
		return m.AgentEmail
	}
	return ""
}

func (m *InviteAgentRequest) GetAgentFirstName() string {
	if m != nil {
		return m.AgentFirstName
	}
	return ""
}

func (m *InviteAgentRequest) GetAgentLastName() string {
	if m != nil {
		return m.AgentLastName
	}
	return ""
}

type CancelInvitationRequest struct {
	AccountId  string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	AgentEmail string `protobuf:"bytes,2,opt,name=AgentEmail,json=agentEmail" json:"AgentEmail,omitempty"`
}

func (m *CancelInvitationRequest) Reset()                    { *m = CancelInvitationRequest{} }
func (m *CancelInvitationRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelInvitationRequest) ProtoMessage()               {}
func (*CancelInvitationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CancelInvitationRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CancelInvitationRequest) GetAgentEmail() string {
	if m != nil {
		return m.AgentEmail
	}
	return ""
}

type UpdatePermissionRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId,omitempty"`
	AgentId   string `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
	Scope     int32  `protobuf:"varint,3,opt,name=Scope,json=scope" json:"Scope,omitempty"`
}

func (m *UpdatePermissionRequest) Reset()                    { *m = UpdatePermissionRequest{} }
func (m *UpdatePermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePermissionRequest) ProtoMessage()               {}
func (*UpdatePermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpdatePermissionRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UpdatePermissionRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *UpdatePermissionRequest) GetScope() int32 {
	if m != nil {
		return m.Scope
	}
	return 0
}

type AcceptInvitationRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
}

func (m *AcceptInvitationRequest) Reset()                    { *m = AcceptInvitationRequest{} }
func (m *AcceptInvitationRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptInvitationRequest) ProtoMessage()               {}
func (*AcceptInvitationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AcceptInvitationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*Id)(nil), "account.Id")
	proto.RegisterType((*Ids)(nil), "account.Ids")
	proto.RegisterType((*Empty)(nil), "account.Empty")
	proto.RegisterType((*UpdatePlanRequest)(nil), "account.UpdatePlanRequest")
	proto.RegisterType((*AgentGroup)(nil), "account.AgentGroup")
	proto.RegisterType((*Agent)(nil), "account.Agent")
	proto.RegisterType((*LoginRequest)(nil), "account.LoginRequest")
	proto.RegisterType((*Agents)(nil), "account.Agents")
	proto.RegisterType((*Email)(nil), "account.Email")
	proto.RegisterType((*ChangePasswordRequest)(nil), "account.ChangePasswordRequest")
	proto.RegisterType((*LimitsResponse)(nil), "account.LimitsResponse")
	proto.RegisterType((*Limit)(nil), "account.Limit")
	proto.RegisterType((*AccAgentConfiguration)(nil), "account.AccAgentConfiguration")
	proto.RegisterType((*NotificationConfig)(nil), "account.NotificationConfig")
	proto.RegisterType((*RegisterTokenExpiredEvent)(nil), "account.RegisterTokenExpiredEvent")
	proto.RegisterType((*AgentGroups)(nil), "account.AgentGroups")
	proto.RegisterType((*ListGroupAgentRequest)(nil), "account.ListGroupAgentRequest")
	proto.RegisterType((*UpdateGroupRequest)(nil), "account.UpdateGroupRequest")
	proto.RegisterType((*InviteAgentRequest)(nil), "account.InviteAgentRequest")
	proto.RegisterType((*CancelInvitationRequest)(nil), "account.CancelInvitationRequest")
	proto.RegisterType((*UpdatePermissionRequest)(nil), "account.UpdatePermissionRequest")
	proto.RegisterType((*AcceptInvitationRequest)(nil), "account.AcceptInvitationRequest")
	proto.RegisterEnum("account.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("account.Gender", Gender_name, Gender_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountInfoMgr service

type AccountInfoMgrClient interface {
	Create(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Id, error)
	Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error)
	ListLimit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LimitsResponse, error)
}

type accountInfoMgrClient struct {
	cc *grpc.ClientConn
}

func NewAccountInfoMgrClient(cc *grpc.ClientConn) AccountInfoMgrClient {
	return &accountInfoMgrClient{cc}
}

func (c *accountInfoMgrClient) Create(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) Update(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/UpdatePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoMgrClient) ListLimit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LimitsResponse, error) {
	out := new(LimitsResponse)
	err := grpc.Invoke(ctx, "/account.AccountInfoMgr/ListLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountInfoMgr service

type AccountInfoMgrServer interface {
	Create(context.Context, *Account) (*Id, error)
	Close(context.Context, *Id) (*Empty, error)
	Open(context.Context, *Id) (*Empty, error)
	Update(context.Context, *Account) (*Empty, error)
	Read(context.Context, *Id) (*Account, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*Empty, error)
	ListLimit(context.Context, *Empty) (*LimitsResponse, error)
}

func RegisterAccountInfoMgrServer(s *grpc.Server, srv AccountInfoMgrServer) {
	s.RegisterService(&_AccountInfoMgr_serviceDesc, srv)
}

func _AccountInfoMgr_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).Create(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).Close(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).Open(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).Update(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfoMgr_ListLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoMgrServer).ListLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountInfoMgr/ListLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoMgrServer).ListLimit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountInfoMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountInfoMgr",
	HandlerType: (*AccountInfoMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountInfoMgr_Create_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _AccountInfoMgr_Close_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _AccountInfoMgr_Open_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountInfoMgr_Update_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AccountInfoMgr_Read_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _AccountInfoMgr_UpdatePlan_Handler,
		},
		{
			MethodName: "ListLimit",
			Handler:    _AccountInfoMgr_ListLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}

// Client API for AgentMgr service

type AgentMgrClient interface {
	InviteAgent(ctx context.Context, in *InviteAgentRequest, opts ...grpc.CallOption) (*Empty, error)
	// delete invitation invoke by agent
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateProfile(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error)
	Config(ctx context.Context, in *AccAgentConfiguration, opts ...grpc.CallOption) (*Empty, error)
	GrantPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Empty, error)
	RevokePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Empty, error)
	// List by account
	List(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agents, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Id, error)
	RequestResetPw(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Empty, error)
	// Change password, called by subiz agent || when user first login
	ChangePw(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPW(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	Confirm(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error)
	BatchRead(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Agents, error)
	CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error)
	JoinGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	LeaveGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListGroup(ctx context.Context, in *ListGroupAgentRequest, opts ...grpc.CallOption) (*AgentGroups, error)
	ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error)
	ListGroupOfAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroups, error)
}

type agentMgrClient struct {
	cc *grpc.ClientConn
}

func NewAgentMgrClient(cc *grpc.ClientConn) AgentMgrClient {
	return &agentMgrClient{cc}
}

func (c *agentMgrClient) InviteAgent(ctx context.Context, in *InviteAgentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/InviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/AcceptInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) UpdateProfile(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Config(ctx context.Context, in *AccAgentConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) GrantPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/GrantPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) RevokePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/RevokePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) List(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AgentMgr/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) RequestResetPw(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/RequestResetPw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) ChangePw(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/ChangePw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) ResetPW(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/ResetPW", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) Confirm(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AgentMgr/CheckLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) BatchRead(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AgentMgr/BatchRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AgentMgr/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) JoinGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) LeaveGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AgentMgr/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) ListGroup(ctx context.Context, in *ListGroupAgentRequest, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := grpc.Invoke(ctx, "/account.AgentMgr/ListGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AgentMgr/ReadGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMgrClient) ListGroupOfAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := grpc.Invoke(ctx, "/account.AgentMgr/ListGroupOfAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentMgr service

type AgentMgrServer interface {
	InviteAgent(context.Context, *InviteAgentRequest) (*Empty, error)
	// delete invitation invoke by agent
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*Empty, error)
	UpdateProfile(context.Context, *Agent) (*Empty, error)
	Read(context.Context, *Id) (*Agent, error)
	Config(context.Context, *AccAgentConfiguration) (*Empty, error)
	GrantPermission(context.Context, *UpdatePermissionRequest) (*Empty, error)
	RevokePermission(context.Context, *UpdatePermissionRequest) (*Empty, error)
	// List by account
	List(context.Context, *Id) (*Agents, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
	Register(context.Context, *Agent) (*Id, error)
	RequestResetPw(context.Context, *Email) (*Empty, error)
	// Change password, called by subiz agent || when user first login
	ChangePw(context.Context, *ChangePasswordRequest) (*Empty, error)
	ResetPW(context.Context, *ChangePasswordRequest) (*Empty, error)
	Confirm(context.Context, *Id) (*Empty, error)
	CheckLogin(context.Context, *LoginRequest) (*Id, error)
	BatchRead(context.Context, *Ids) (*Agents, error)
	CreateGroup(context.Context, *AgentGroup) (*Id, error)
	JoinGroup(context.Context, *UpdateGroupRequest) (*Empty, error)
	LeaveGroup(context.Context, *UpdateGroupRequest) (*Empty, error)
	DeleteGroup(context.Context, *Id) (*Empty, error)
	ListGroup(context.Context, *ListGroupAgentRequest) (*AgentGroups, error)
	ReadGroup(context.Context, *Id) (*AgentGroup, error)
	ListGroupOfAgent(context.Context, *Id) (*AgentGroups, error)
}

func RegisterAgentMgrServer(s *grpc.Server, srv AgentMgrServer) {
	s.RegisterService(&_AgentMgr_serviceDesc, srv)
}

func _AgentMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).InviteAgent(ctx, req.(*InviteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).UpdateProfile(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccAgentConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Config(ctx, req.(*AccAgentConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_GrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).GrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/GrantPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).GrantPermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/RevokePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).RevokePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).List(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Register(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_RequestResetPw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).RequestResetPw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/RequestResetPw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).RequestResetPw(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_ChangePw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).ChangePw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/ChangePw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).ChangePw(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_ResetPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).ResetPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/ResetPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).ResetPW(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).Confirm(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_BatchRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).BatchRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/BatchRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).BatchRead(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).CreateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).JoinGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).LeaveGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).DeleteGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).ListGroup(ctx, req.(*ListGroupAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_ReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).ReadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/ReadGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).ReadGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMgr_ListGroupOfAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMgrServer).ListGroupOfAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AgentMgr/ListGroupOfAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMgrServer).ListGroupOfAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AgentMgr",
	HandlerType: (*AgentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteAgent",
			Handler:    _AgentMgr_InviteAgent_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AgentMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _AgentMgr_UpdateProfile_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AgentMgr_Read_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _AgentMgr_Config_Handler,
		},
		{
			MethodName: "GrantPermission",
			Handler:    _AgentMgr_GrantPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _AgentMgr_RevokePermission_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AgentMgr_List_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _AgentMgr_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _AgentMgr_Disable_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AgentMgr_Register_Handler,
		},
		{
			MethodName: "RequestResetPw",
			Handler:    _AgentMgr_RequestResetPw_Handler,
		},
		{
			MethodName: "ChangePw",
			Handler:    _AgentMgr_ChangePw_Handler,
		},
		{
			MethodName: "ResetPW",
			Handler:    _AgentMgr_ResetPW_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _AgentMgr_Confirm_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _AgentMgr_CheckLogin_Handler,
		},
		{
			MethodName: "BatchRead",
			Handler:    _AgentMgr_BatchRead_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AgentMgr_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _AgentMgr_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _AgentMgr_LeaveGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AgentMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _AgentMgr_ListGroup_Handler,
		},
		{
			MethodName: "ReadGroup",
			Handler:    _AgentMgr_ReadGroup_Handler,
		},
		{
			MethodName: "ListGroupOfAgent",
			Handler:    _AgentMgr_ListGroupOfAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}

func init() { proto.RegisterFile("account/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xb7, 0xfe, 0x8d, 0x34, 0x4f, 0xb6, 0x22, 0xb7, 0xed, 0xf5, 0xe0, 0x0d, 0x29, 0xd7, 0x00,
	0x59, 0x6f, 0xca, 0x15, 0x6f, 0x4c, 0xd5, 0x02, 0x9b, 0x50, 0x85, 0x90, 0xe5, 0x64, 0x88, 0x2d,
	0xa5, 0x26, 0x32, 0xa1, 0xb8, 0x40, 0x7b, 0xa6, 0x3d, 0x6e, 0x3c, 0xea, 0x11, 0xd3, 0x2d, 0x3b,
	0xd9, 0x4f, 0x01, 0x55, 0xdc, 0x39, 0xf2, 0x25, 0x28, 0xbe, 0x05, 0x1f, 0x81, 0x23, 0x37, 0x8e,
	0x1c, 0xa8, 0xfe, 0x33, 0xd2, 0x8c, 0x34, 0xc1, 0x5b, 0xbb, 0x97, 0x8c, 0xdf, 0xef, 0xbd, 0xee,
	0x7e, 0xff, 0xdf, 0x53, 0x60, 0x07, 0x07, 0x41, 0x32, 0x63, 0xe2, 0xc8, 0x7c, 0x9f, 0x4e, 0xd3,
	0x44, 0x24, 0xa8, 0x69, 0xc8, 0xbd, 0x17, 0x97, 0x54, 0x5c, 0xce, 0x82, 0x1b, 0x22, 0x9e, 0x26,
	0x69, 0x74, 0xc4, 0x67, 0x97, 0xf4, 0xeb, 0x23, 0x4e, 0xd2, 0x5b, 0x1a, 0x10, 0x3e, 0x25, 0xc1,
	0x91, 0x92, 0x3f, 0x0a, 0x92, 0xc9, 0x24, 0x61, 0x47, 0x78, 0x26, 0xae, 0xd5, 0x3f, 0xfa, 0x1a,
	0xf7, 0x6f, 0x15, 0x68, 0xf6, 0xf4, 0x4d, 0xa8, 0x03, 0x55, 0x2f, 0x74, 0x2a, 0xfb, 0x95, 0x03,
	0xdb, 0xaf, 0xd2, 0x10, 0x21, 0xa8, 0x0f, 0xf1, 0x84, 0x38, 0x55, 0x85, 0xd4, 0x19, 0x9e, 0x10,
	0xb4, 0x0d, 0x8d, 0xb7, 0x02, 0x0b, 0xe2, 0xd4, 0xf6, 0x2b, 0x07, 0x0d, 0xbf, 0xc1, 0x25, 0x21,
	0x25, 0xdf, 0xc4, 0x98, 0x39, 0x75, 0x05, 0xd6, 0xa7, 0x31, 0x66, 0xc8, 0x81, 0xe6, 0x59, 0x12,
	0x25, 0x17, 0x69, 0xec, 0x34, 0xd5, 0x05, 0xcd, 0x58, 0x93, 0x92, 0x33, 0xba, 0x63, 0x24, 0xf5,
	0x42, 0xa7, 0xa1, 0x39, 0x89, 0x26, 0xd1, 0x1e, 0xb4, 0x3c, 0xde, 0x8f, 0x13, 0x4e, 0x42, 0xc7,
	0xda, 0xaf, 0x1c, 0xb4, 0xfc, 0x16, 0x35, 0xb4, 0xbb, 0x2d, 0xb5, 0x5b, 0xd6, 0xd1, 0xdd, 0x85,
	0x9a, 0x17, 0x72, 0xd4, 0x55, 0x1f, 0xa7, 0xb2, 0x5f, 0x3b, 0xb0, 0xfd, 0x1a, 0x0d, 0xb9, 0xdb,
	0x84, 0xc6, 0x60, 0x32, 0x15, 0x1f, 0x5c, 0x0f, 0x36, 0x2f, 0xa6, 0x21, 0x16, 0x44, 0x6a, 0xe8,
	0x93, 0x3f, 0xce, 0x08, 0x17, 0xe8, 0x21, 0xd8, 0xc6, 0xea, 0xf9, 0x6d, 0x36, 0xce, 0x00, 0xf4,
	0x09, 0x58, 0x52, 0xd8, 0x0b, 0x95, 0xe9, 0x0d, 0xdf, 0x9a, 0x2a, 0xca, 0xfd, 0x3d, 0x40, 0x2f,
	0x22, 0x4c, 0xbc, 0x4c, 0x93, 0xd9, 0x74, 0xc5, 0x5d, 0xdb, 0xd0, 0x18, 0x53, 0x11, 0x67, 0xfe,
	0x6a, 0x08, 0x49, 0x48, 0x93, 0xd4, 0x19, 0xa9, 0x5e, 0x4d, 0xa9, 0xd7, 0xc2, 0x86, 0x96, 0x5a,
	0x8f, 0x71, 0xa4, 0xbc, 0x66, 0xfb, 0x35, 0x81, 0x23, 0xf7, 0xdf, 0x75, 0x68, 0x28, 0xf1, 0x95,
	0xdb, 0x1f, 0x82, 0x7d, 0x4a, 0x53, 0x2e, 0x72, 0x11, 0xb1, 0xaf, 0x32, 0x40, 0xbe, 0x72, 0x86,
	0x0d, 0xb3, 0xa6, 0x98, 0xad, 0xd8, 0xd0, 0x52, 0xaf, 0xc1, 0x04, 0xd3, 0xd8, 0xbc, 0xd3, 0x20,
	0x92, 0x90, 0x41, 0xf0, 0xb8, 0x0a, 0x83, 0x0a, 0x42, 0xcb, 0x6f, 0x52, 0x4d, 0x16, 0x7d, 0x63,
	0x2d, 0xfb, 0x66, 0x0f, 0x5a, 0xbf, 0x4a, 0x2e, 0xb5, 0xa1, 0x3a, 0xae, 0xad, 0x3f, 0x18, 0x1a,
	0x7d, 0x06, 0xd6, 0x4b, 0xc2, 0x42, 0x92, 0x3a, 0xad, 0xfd, 0xca, 0x41, 0xe7, 0xf8, 0xc1, 0xd3,
	0x2c, 0x67, 0x35, 0xec, 0x5b, 0x91, 0xfa, 0xa2, 0x1f, 0xc2, 0x86, 0x54, 0xf7, 0x2c, 0x89, 0x28,
	0x1b, 0xd3, 0x09, 0x71, 0x6c, 0x75, 0xd3, 0x46, 0x9c, 0x07, 0x95, 0x22, 0xb7, 0x58, 0xe0, 0x54,
	0xe6, 0x50, 0xdb, 0x28, 0x92, 0x01, 0xda, 0x64, 0x16, 0xcd, 0x70, 0x44, 0x9c, 0xf5, 0xcc, 0x64,
	0x4d, 0x4b, 0x9e, 0xbc, 0xe1, 0xeb, 0x84, 0x11, 0x67, 0x43, 0xf3, 0x84, 0xa1, 0xd1, 0x3e, 0xb4,
	0x3d, 0xde, 0x4f, 0xd8, 0x15, 0x4d, 0x27, 0x24, 0x74, 0x1e, 0x28, 0xe3, 0xdb, 0x74, 0x01, 0xa1,
	0x1f, 0x80, 0xf5, 0x36, 0x48, 0xa6, 0x84, 0x3b, 0x9b, 0xfb, 0x95, 0x83, 0xf6, 0x71, 0xfb, 0xa9,
	0x2a, 0x18, 0x85, 0xf9, 0x16, 0x57, 0x2c, 0xf4, 0x18, 0x3a, 0xaf, 0x30, 0xbf, 0x26, 0xe1, 0x1b,
	0xcc, 0xf9, 0x5d, 0x92, 0x86, 0x0e, 0x52, 0x0f, 0x75, 0xae, 0x0b, 0xa8, 0xf6, 0x17, 0x65, 0x27,
	0xb2, 0x66, 0xb6, 0x32, 0x7f, 0x69, 0x1a, 0x1d, 0xc2, 0xa6, 0xc7, 0x6e, 0xa9, 0x20, 0xa7, 0x69,
	0x32, 0x31, 0x59, 0xe2, 0x6c, 0x2b, 0xa1, 0x4d, 0xba, 0xcc, 0x90, 0x45, 0xe6, 0x71, 0x8f, 0x39,
	0x3b, 0x4a, 0xe3, 0x3a, 0xe5, 0x1e, 0x43, 0x8f, 0x00, 0x24, 0x76, 0x4b, 0x05, 0x65, 0x91, 0xf3,
	0x89, 0xe2, 0x00, 0x9d, 0x23, 0x9a, 0x7f, 0x42, 0x39, 0xbe, 0x8c, 0x49, 0xe8, 0xec, 0x66, 0xfc,
	0x0c, 0x71, 0x7f, 0x01, 0xeb, 0xca, 0xdf, 0x59, 0x5d, 0xcc, 0x73, 0xa5, 0x92, 0xcf, 0x95, 0x3d,
	0x68, 0xcd, 0xad, 0xd4, 0xa9, 0xd7, 0x9a, 0x1a, 0xda, 0xfd, 0x02, 0x2c, 0xa5, 0xa0, 0xf4, 0x88,
	0xf9, 0x4b, 0x95, 0x61, 0xfb, 0xb8, 0x33, 0x8f, 0xbe, 0x82, 0x7d, 0x4b, 0xe5, 0x3d, 0x77, 0xbf,
	0x6f, 0xde, 0x28, 0x7f, 0xcc, 0x3d, 0x87, 0x9d, 0xfe, 0x35, 0x66, 0x11, 0xc9, 0x9e, 0xcc, 0x74,
	0x73, 0xa0, 0x99, 0xf9, 0x48, 0x1f, 0x68, 0x9a, 0x42, 0xfa, 0xbf, 0xfa, 0xfd, 0x14, 0x3a, 0x67,
	0x74, 0x42, 0x05, 0xf7, 0x09, 0x9f, 0x26, 0x8c, 0x13, 0xa9, 0xa7, 0x46, 0x56, 0xf4, 0x54, 0xb0,
	0x6f, 0xc5, 0x8a, 0xeb, 0xfe, 0xab, 0x02, 0x0d, 0x85, 0xc8, 0x58, 0xf7, 0x13, 0x16, 0xcc, 0xd2,
	0x94, 0x30, 0xd1, 0xbf, 0xc6, 0x42, 0x29, 0xd0, 0xf0, 0x3b, 0x41, 0x01, 0x95, 0xa9, 0x25, 0xbf,
	0xaf, 0x28, 0x17, 0x49, 0xfa, 0xc1, 0x34, 0x8f, 0x76, 0xb0, 0x80, 0xa4, 0xc4, 0x39, 0x7e, 0x3f,
	0x4e, 0x69, 0x14, 0x91, 0x94, 0x9b, 0x26, 0xda, 0x9e, 0x2c, 0x20, 0x99, 0xf4, 0xe7, 0xf8, 0xbd,
	0x71, 0xa4, 0xee, 0xa7, 0xf6, 0x24, 0x03, 0xa4, 0x26, 0x19, 0x57, 0x35, 0x21, 0xae, 0x8a, 0xb7,
	0xe1, 0x77, 0x26, 0x05, 0x14, 0x3d, 0x81, 0x6e, 0x26, 0xe7, 0x31, 0x23, 0x69, 0x29, 0xc9, 0xee,
	0x64, 0x09, 0x77, 0xff, 0x5b, 0x81, 0x9d, 0x5e, 0x10, 0x28, 0x50, 0x15, 0x41, 0x34, 0x4b, 0xb1,
	0xa0, 0x09, 0x93, 0xf9, 0x39, 0x4c, 0x04, 0xbd, 0xa2, 0x81, 0xa2, 0xdf, 0x26, 0x33, 0xa6, 0x7d,
	0xdf, 0xf2, 0x37, 0xd9, 0x32, 0x03, 0xfd, 0x0c, 0x6c, 0x15, 0x4e, 0x79, 0x44, 0xd9, 0xde, 0x3e,
	0xfe, 0x74, 0xee, 0xda, 0xfc, 0x3d, 0xfa, 0x11, 0xdf, 0x26, 0x99, 0x34, 0xfa, 0x39, 0xb4, 0x4f,
	0x08, 0xbf, 0x11, 0xc9, 0x54, 0x1d, 0xae, 0xdd, 0x7f, 0xb8, 0x1d, 0x2e, 0xe4, 0xd1, 0x73, 0x80,
	0xf3, 0xe4, 0x92, 0xc6, 0x44, 0x9d, 0xae, 0xdf, 0x7f, 0x1a, 0x26, 0x73, 0x71, 0xf7, 0xef, 0x15,
	0x40, 0xab, 0x22, 0x32, 0x52, 0xbd, 0x38, 0xee, 0x05, 0x82, 0xde, 0x52, 0xf1, 0xc1, 0x58, 0xdd,
	0xc6, 0x0b, 0x08, 0x7d, 0x01, 0x5b, 0xe7, 0x98, 0x32, 0x81, 0x29, 0x23, 0x2c, 0x20, 0xe7, 0x84,
	0x73, 0xd9, 0x8b, 0xaa, 0x4a, 0x72, 0x6b, 0xb2, 0xca, 0x92, 0x6d, 0xef, 0x84, 0xa6, 0x24, 0x10,
	0x99, 0x6c, 0x4d, 0xc9, 0x6e, 0x84, 0x79, 0x50, 0x8d, 0x5d, 0x72, 0xa7, 0x83, 0xdf, 0xf2, 0xeb,
	0x8c, 0xdc, 0x71, 0x99, 0xfb, 0xc3, 0x44, 0x5c, 0xcb, 0x22, 0x37, 0xdd, 0x9a, 0x69, 0xd2, 0x7d,
	0x06, 0xdf, 0xf3, 0x49, 0x44, 0xb9, 0x20, 0xe9, 0x38, 0xb9, 0x21, 0x6c, 0xf0, 0x7e, 0x4a, 0x53,
	0x12, 0x0e, 0x6e, 0xe5, 0x10, 0x29, 0xaf, 0xb0, 0xe7, 0xd0, 0xce, 0xe7, 0xca, 0x21, 0x58, 0x26,
	0x43, 0x74, 0x3d, 0x6c, 0x17, 0xeb, 0x56, 0xf3, 0x7c, 0x2b, 0xd2, 0xd9, 0x32, 0x82, 0x9d, 0x33,
	0xca, 0x35, 0xaa, 0xeb, 0x7a, 0x51, 0x9e, 0xaf, 0xc9, 0x07, 0x55, 0x83, 0xa6, 0x3c, 0x6f, 0x34,
	0x59, 0x1c, 0x28, 0xd5, 0xa5, 0x81, 0xe2, 0xbe, 0x02, 0xa4, 0xe7, 0xb3, 0xba, 0x32, 0x77, 0x9b,
	0xa2, 0x17, 0xc5, 0x1e, 0x69, 0x32, 0xdf, 0x06, 0xaa, 0x85, 0x36, 0xe0, 0xfe, 0xa3, 0x02, 0x48,
	0xf7, 0xd3, 0x82, 0x62, 0x0f, 0xc1, 0xd6, 0x68, 0xba, 0x98, 0xf5, 0x34, 0x03, 0x8a, 0xca, 0xd5,
	0x97, 0xa7, 0xdd, 0x23, 0x33, 0xf1, 0xb5, 0x17, 0xf5, 0x64, 0x05, 0x3c, 0x47, 0x64, 0x3d, 0x2a,
	0xfe, 0x62, 0x34, 0xeb, 0x8d, 0xa6, 0x83, 0x0b, 0xa8, 0x8c, 0xbc, 0x92, 0x9b, 0x0f, 0x69, 0x3d,
	0x57, 0x37, 0x70, 0x1e, 0x74, 0xdf, 0xc1, 0x6e, 0x1f, 0xb3, 0x80, 0xc4, 0x4a, 0x5f, 0x95, 0x8d,
	0xdf, 0x6c, 0x61, 0x29, 0xaa, 0x59, 0x5d, 0x56, 0xd3, 0x8d, 0x60, 0xd7, 0xec, 0x40, 0x24, 0x9d,
	0x50, 0xce, 0xbf, 0xf1, 0xc5, 0x1f, 0x75, 0xb6, 0x5a, 0x04, 0xe5, 0x24, 0x9c, 0x2f, 0x82, 0x92,
	0x70, 0x8f, 0x60, 0xb7, 0x17, 0x04, 0x64, 0x2a, 0x56, 0x2d, 0x90, 0xeb, 0x91, 0x4c, 0xd0, 0x2c,
	0x17, 0x85, 0x24, 0x9e, 0xfc, 0x06, 0xec, 0x41, 0x9a, 0x26, 0x69, 0x3f, 0x09, 0x09, 0xb2, 0xa0,
	0x3a, 0x7a, 0xdd, 0x5d, 0x43, 0x1b, 0xd0, 0x1a, 0x8e, 0xc6, 0xa7, 0xa3, 0x8b, 0xe1, 0x49, 0xf7,
	0x2f, 0x35, 0xb4, 0x0e, 0x4d, 0x6f, 0xf8, 0xeb, 0xde, 0x99, 0x77, 0xd2, 0xfd, 0x53, 0x0d, 0x6d,
	0xc2, 0xfa, 0xc5, 0xb0, 0x77, 0x31, 0x7e, 0x35, 0xf2, 0xbd, 0xdf, 0x0e, 0x4e, 0xba, 0x7f, 0xae,
	0xa1, 0x2d, 0xe8, 0x78, 0xc3, 0xf1, 0xc0, 0x1f, 0xf6, 0xce, 0x7e, 0x37, 0xf0, 0xfd, 0x91, 0xdf,
	0xfd, 0x4f, 0xed, 0xc9, 0x97, 0xd9, 0x32, 0x82, 0x6c, 0x68, 0x5c, 0x0c, 0xdf, 0x0e, 0xc6, 0xdd,
	0x35, 0xd4, 0x82, 0xfa, 0x79, 0xef, 0x6c, 0xd0, 0xad, 0x20, 0x00, 0xeb, 0x74, 0xa0, 0xfe, 0xae,
	0xa2, 0x36, 0x34, 0x2f, 0x86, 0xaf, 0x87, 0xa3, 0x77, 0xc3, 0x6e, 0xed, 0xf8, 0x9f, 0x55, 0xe8,
	0x64, 0x1e, 0x61, 0x57, 0xc9, 0x79, 0x94, 0xa2, 0xcf, 0xc1, 0xea, 0xa7, 0x44, 0x4e, 0xec, 0xee,
	0xa2, 0x36, 0xcc, 0xfa, 0xdd, 0x9e, 0x23, 0x5e, 0xe8, 0xae, 0xa1, 0xc7, 0xd0, 0x50, 0xfb, 0x2a,
	0xca, 0xe3, 0x7b, 0x8b, 0x11, 0xa3, 0x77, 0xd2, 0x35, 0xf4, 0x23, 0xa8, 0x8f, 0xa6, 0x84, 0xdd,
	0x27, 0x76, 0x08, 0x96, 0x0e, 0x5c, 0xc9, 0xcb, 0xab, 0xd2, 0x9f, 0x41, 0xdd, 0x27, 0x38, 0x2c,
	0x5e, 0xba, 0x72, 0xd0, 0x5d, 0x43, 0x5f, 0x01, 0x2c, 0x76, 0x62, 0xb4, 0x37, 0x97, 0x58, 0x59,
	0x94, 0x4b, 0x1e, 0xf9, 0x12, 0x6c, 0xd9, 0x00, 0xf4, 0x64, 0x5c, 0x62, 0xef, 0xed, 0x16, 0x67,
	0xe9, 0x7c, 0xe8, 0xba, 0x6b, 0xc7, 0x7f, 0x05, 0xb3, 0x09, 0x4b, 0x8f, 0xbe, 0x80, 0x76, 0xae,
	0x52, 0xd1, 0xa2, 0x59, 0xaf, 0xd6, 0x6f, 0x89, 0x0a, 0xa7, 0xd0, 0x5d, 0xce, 0x32, 0xb4, 0x9f,
	0x37, 0xb3, 0x2c, 0x01, 0x4b, 0xee, 0x79, 0x06, 0x1b, 0xc6, 0xe2, 0x34, 0xb9, 0xa2, 0x31, 0x41,
	0x4b, 0x2b, 0x4b, 0x79, 0xdc, 0x56, 0x5d, 0xbc, 0x74, 0x4c, 0x39, 0xd8, 0x32, 0x73, 0xe4, 0x51,
	0x5e, 0xaf, 0xd5, 0x19, 0x5b, 0xf2, 0xc4, 0x00, 0x1e, 0xbc, 0x4c, 0x31, 0x13, 0x8b, 0x5a, 0xcd,
	0x19, 0xf7, 0x91, 0x32, 0x2e, 0x77, 0x92, 0x4f, 0x6e, 0x93, 0x1b, 0xf2, 0x1d, 0xef, 0x79, 0x0c,
	0x75, 0x19, 0xef, 0xa2, 0xc5, 0x0f, 0x8a, 0x16, 0x73, 0x95, 0x7c, 0xd6, 0x80, 0xc9, 0xad, 0xf2,
	0xbe, 0x9c, 0x3e, 0x80, 0xa6, 0xd9, 0x3f, 0xef, 0x93, 0xfc, 0x1c, 0x5a, 0xd9, 0x6c, 0x5b, 0x09,
	0xcd, 0x52, 0xdd, 0x1d, 0x43, 0xc7, 0x98, 0xe0, 0x13, 0x4e, 0xc4, 0x9b, 0xbb, 0x42, 0x6a, 0x62,
	0x1a, 0x97, 0x5c, 0xff, 0x02, 0x5a, 0x66, 0xd3, 0xbc, 0xcb, 0x85, 0xa9, 0x74, 0xf9, 0x2c, 0x39,
	0xfd, 0x1c, 0x9a, 0xfa, 0xa9, 0x77, 0xdf, 0xe2, 0xf0, 0x01, 0x34, 0xcd, 0xef, 0x8d, 0xfb, 0x7c,
	0x70, 0x0c, 0xd0, 0xbf, 0x26, 0xc1, 0x8d, 0x5a, 0xd3, 0xd1, 0xce, 0xa2, 0xbe, 0x72, 0x6b, 0xfb,
	0xb2, 0x33, 0x0e, 0xc1, 0xfe, 0x25, 0x16, 0xc1, 0xb5, 0xca, 0xd4, 0xf5, 0x1c, 0x8f, 0x97, 0x05,
	0xee, 0x19, 0xb4, 0x75, 0x77, 0xd3, 0x3f, 0x6b, 0xb7, 0x4a, 0xc6, 0xff, 0xf2, 0x03, 0x5f, 0x81,
	0x2d, 0x7f, 0xd4, 0xe8, 0x03, 0x9f, 0x2e, 0x25, 0x55, 0x7e, 0x8e, 0x97, 0xfa, 0x0d, 0xce, 0x08,
	0xbe, 0x25, 0xdf, 0xea, 0xf0, 0xa1, 0x5c, 0x14, 0x63, 0x92, 0xe9, 0x7a, 0x8f, 0xef, 0xfa, 0xba,
	0x55, 0x69, 0xd9, 0x47, 0xb9, 0xd6, 0x54, 0xb2, 0xbf, 0xec, 0x95, 0xae, 0x3d, 0xee, 0x1a, 0x3a,
	0x02, 0x5b, 0xfa, 0xb1, 0xe4, 0xc1, 0x32, 0x4f, 0xb9, 0x6b, 0xe8, 0x27, 0xd0, 0x9d, 0xbf, 0x30,
	0xba, 0xd2, 0x0d, 0xae, 0x70, 0xee, 0x23, 0x2f, 0x5d, 0x5a, 0xea, 0xbf, 0x64, 0x7e, 0xfc, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x7e, 0xa6, 0x6e, 0xf2, 0x11, 0x00, 0x00,
}
