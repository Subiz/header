// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account/account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/account.proto

It has these top-level messages:
	Agent
	Invitation
	AgentGroup
	AgentStateUpdateRequest
	AccountStateUpdateRequest
	ResetPasswordRequest
	UpdatePlanRequest
	AgentPerm
	OELimitUpdated
	Account
	Id
	AgentIds
	Ids
	Empty
	ListAgentRequest
	ListGroupRequest
	GroupMember
	CreateAccountRequest
	LoginRequest
	Agents
	NewPassword
	Limit
	AgentGroups
	Token
	ConfirmEmail
	InviteEmail
	ResetPasswordEmail
	PasswordChangedEmail
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "bitbucket.org/subiz/servicespec/proto/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountState int32

const (
	AccountState_UNCONFIRMED AccountState = 0
	AccountState_ACTIVATED   AccountState = 1
	AccountState_LOCKED      AccountState = 2
)

var AccountState_name = map[int32]string{
	0: "UNCONFIRMED",
	1: "ACTIVATED",
	2: "LOCKED",
}
var AccountState_value = map[string]int32{
	"UNCONFIRMED": 0,
	"ACTIVATED":   1,
	"LOCKED":      2,
}

func (x AccountState) Enum() *AccountState {
	p := new(AccountState)
	*p = x
	return p
}
func (x AccountState) String() string {
	return proto.EnumName(AccountState_name, int32(x))
}
func (x *AccountState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccountState_value, data, "AccountState")
	if err != nil {
		return err
	}
	*x = AccountState(value)
	return nil
}
func (AccountState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Gender int32

const (
	Gender_Unset    Gender = 0
	Gender_Male     Gender = 1
	Gender_Female   Gender = 2
	Gender_Bisexual Gender = 3
	Gender_Asexual  Gender = 4
)

var Gender_name = map[int32]string{
	0: "Unset",
	1: "Male",
	2: "Female",
	3: "Bisexual",
	4: "Asexual",
}
var Gender_value = map[string]int32{
	"Unset":    0,
	"Male":     1,
	"Female":   2,
	"Bisexual": 3,
	"Asexual":  4,
}

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}
func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (x *Gender) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Gender_value, data, "Gender")
	if err != nil {
		return err
	}
	*x = Gender(value)
	return nil
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AgentState int32

const (
	AgentState_Pending  AgentState = 0
	AgentState_Active   AgentState = 1
	AgentState_Inactive AgentState = 2
	AgentState_Deleted  AgentState = 3
)

var AgentState_name = map[int32]string{
	0: "Pending",
	1: "Active",
	2: "Inactive",
	3: "Deleted",
}
var AgentState_value = map[string]int32{
	"Pending":  0,
	"Active":   1,
	"Inactive": 2,
	"Deleted":  3,
}

func (x AgentState) Enum() *AgentState {
	p := new(AgentState)
	*p = x
	return p
}
func (x AgentState) String() string {
	return proto.EnumName(AgentState_name, int32(x))
}
func (x *AgentState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AgentState_value, data, "AgentState")
	if err != nil {
		return err
	}
	*x = AgentState(value)
	return nil
}
func (AgentState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Event int32

const (
	Event_AgentGroupDeleted      Event = 0
	Event_AgentLeftGroup         Event = 1
	Event_AgentJoinedGroup       Event = 2
	Event_AgentGroupUpdated      Event = 3
	Event_AgentGroupCreated      Event = 4
	Event_AgentExpired           Event = 5
	Event_AgentUpdated           Event = 6
	Event_AgentCreated           Event = 7
	Event_AgentStateUpdated      Event = 8
	Event_AgentPermissionUpdated Event = 9
	// out event only
	Event_AgentRejected             Event = 10
	Event_AgentAccepted             Event = 11
	Event_AgentUninvited            Event = 12
	Event_AgentInvited              Event = 13
	Event_AccountUpdated            Event = 14
	Event_AccountCreated            Event = 15
	Event_AccountPlanUpdated        Event = 16
	Event_AccountStateUpdated       Event = 17
	Event_AccountLimitUpdated       Event = 18
	Event_AccountConfirmRequest     Event = 19
	Event_HandleExpiredInvitation   Event = 20
	Event_AccountConfirmEmail       Event = 21
	Event_AccountResetPasswordEmail Event = 33
	// AccountPasswordChangedEmail = 34;
	Event_AccountInviteEmail Event = 22
)

var Event_name = map[int32]string{
	0:  "AgentGroupDeleted",
	1:  "AgentLeftGroup",
	2:  "AgentJoinedGroup",
	3:  "AgentGroupUpdated",
	4:  "AgentGroupCreated",
	5:  "AgentExpired",
	6:  "AgentUpdated",
	7:  "AgentCreated",
	8:  "AgentStateUpdated",
	9:  "AgentPermissionUpdated",
	10: "AgentRejected",
	11: "AgentAccepted",
	12: "AgentUninvited",
	13: "AgentInvited",
	14: "AccountUpdated",
	15: "AccountCreated",
	16: "AccountPlanUpdated",
	17: "AccountStateUpdated",
	18: "AccountLimitUpdated",
	19: "AccountConfirmRequest",
	20: "HandleExpiredInvitation",
	21: "AccountConfirmEmail",
	33: "AccountResetPasswordEmail",
	22: "AccountInviteEmail",
}
var Event_value = map[string]int32{
	"AgentGroupDeleted":         0,
	"AgentLeftGroup":            1,
	"AgentJoinedGroup":          2,
	"AgentGroupUpdated":         3,
	"AgentGroupCreated":         4,
	"AgentExpired":              5,
	"AgentUpdated":              6,
	"AgentCreated":              7,
	"AgentStateUpdated":         8,
	"AgentPermissionUpdated":    9,
	"AgentRejected":             10,
	"AgentAccepted":             11,
	"AgentUninvited":            12,
	"AgentInvited":              13,
	"AccountUpdated":            14,
	"AccountCreated":            15,
	"AccountPlanUpdated":        16,
	"AccountStateUpdated":       17,
	"AccountLimitUpdated":       18,
	"AccountConfirmRequest":     19,
	"HandleExpiredInvitation":   20,
	"AccountConfirmEmail":       21,
	"AccountResetPasswordEmail": 33,
	"AccountInviteEmail":        22,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Agent struct {
	Id        *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Fullname  *string  `protobuf:"bytes,3,opt,name=fullname" json:"fullname,omitempty"`
	Email     *string  `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Emails    []string `protobuf:"bytes,4,rep,name=emails" json:"emails,omitempty"`
	IsOwner   *bool    `protobuf:"varint,6,opt,name=is_owner,json=isOwner" json:"is_owner,omitempty"`
	JobTitle  *string  `protobuf:"bytes,7,opt,name=job_title,json=jobTitle" json:"job_title,omitempty"`
	Gender    *Gender  `protobuf:"varint,8,opt,name=gender,enum=account.Gender" json:"gender,omitempty"`
	AvatarUrl *string  `protobuf:"bytes,9,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Language  *string  `protobuf:"bytes,10,opt,name=language" json:"language,omitempty"`
	Location  *string  `protobuf:"bytes,19,opt,name=location" json:"location,omitempty"`
	Timezone  *string  `protobuf:"bytes,11,opt,name=timezone" json:"timezone,omitempty"`
	// optional string encrypted_password = 12;
	JoinedTime              *string     `protobuf:"bytes,13,opt,name=joined_time,json=joinedTime" json:"joined_time,omitempty"`
	InvitedBy               *string     `protobuf:"bytes,14,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	State                   *AgentState `protobuf:"varint,15,opt,name=state,enum=account.AgentState" json:"state,omitempty"`
	LastPasswordChangedTime *string     `protobuf:"bytes,16,opt,name=last_password_changed_time,json=lastPasswordChangedTime" json:"last_password_changed_time,omitempty"`
	LastSeenTime            *int64      `protobuf:"varint,17,opt,name=last_seen_time,json=lastSeenTime" json:"last_seen_time,omitempty"`
	LastUpdatedTime         *int64      `protobuf:"varint,18,opt,name=last_updated_time,json=lastUpdatedTime" json:"last_updated_time,omitempty"`
	XXX_unrecognized        []byte      `json:"-"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Agent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Agent) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Agent) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *Agent) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Agent) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *Agent) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *Agent) GetJobTitle() string {
	if m != nil && m.JobTitle != nil {
		return *m.JobTitle
	}
	return ""
}

func (m *Agent) GetGender() Gender {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return Gender_Unset
}

func (m *Agent) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *Agent) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Agent) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *Agent) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Agent) GetJoinedTime() string {
	if m != nil && m.JoinedTime != nil {
		return *m.JoinedTime
	}
	return ""
}

func (m *Agent) GetInvitedBy() string {
	if m != nil && m.InvitedBy != nil {
		return *m.InvitedBy
	}
	return ""
}

func (m *Agent) GetState() AgentState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return AgentState_Pending
}

func (m *Agent) GetLastPasswordChangedTime() string {
	if m != nil && m.LastPasswordChangedTime != nil {
		return *m.LastPasswordChangedTime
	}
	return ""
}

func (m *Agent) GetLastSeenTime() int64 {
	if m != nil && m.LastSeenTime != nil {
		return *m.LastSeenTime
	}
	return 0
}

func (m *Agent) GetLastUpdatedTime() int64 {
	if m != nil && m.LastUpdatedTime != nil {
		return *m.LastUpdatedTime
	}
	return 0
}

type Invitation struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FromId           *string `protobuf:"bytes,3,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	Email            *string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	AgentId          *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	SentTime         *string `protobuf:"bytes,7,opt,name=sent_time,json=sentTime" json:"sent_time,omitempty"`
	ReplyTime        *string `protobuf:"bytes,8,opt,name=reply_time,json=replyTime" json:"reply_time,omitempty"`
	AgentFullname    *string `protobuf:"bytes,9,opt,name=agent_fullname,json=agentFullname" json:"agent_fullname,omitempty"`
	AgentJobtitle    *string `protobuf:"bytes,10,opt,name=agent_jobtitle,json=agentJobtitle" json:"agent_jobtitle,omitempty"`
	Token            *string `protobuf:"bytes,11,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Invitation) Reset()                    { *m = Invitation{} }
func (m *Invitation) String() string            { return proto.CompactTextString(m) }
func (*Invitation) ProtoMessage()               {}
func (*Invitation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Invitation) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Invitation) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Invitation) GetFromId() string {
	if m != nil && m.FromId != nil {
		return *m.FromId
	}
	return ""
}

func (m *Invitation) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Invitation) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *Invitation) GetSentTime() string {
	if m != nil && m.SentTime != nil {
		return *m.SentTime
	}
	return ""
}

func (m *Invitation) GetReplyTime() string {
	if m != nil && m.ReplyTime != nil {
		return *m.ReplyTime
	}
	return ""
}

func (m *Invitation) GetAgentFullname() string {
	if m != nil && m.AgentFullname != nil {
		return *m.AgentFullname
	}
	return ""
}

func (m *Invitation) GetAgentJobtitle() string {
	if m != nil && m.AgentJobtitle != nil {
		return *m.AgentJobtitle
	}
	return ""
}

func (m *Invitation) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AgentGroup struct {
	Id        *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	LogoUrl   *string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	// Members is list of 10 agents in group
	// repeated string Members = 5;
	CreatedTime      *int64 `protobuf:"varint,6,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AgentGroup) Reset()                    { *m = AgentGroup{} }
func (m *AgentGroup) String() string            { return proto.CompactTextString(m) }
func (*AgentGroup) ProtoMessage()               {}
func (*AgentGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentGroup) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *AgentGroup) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AgentGroup) GetLogoUrl() string {
	if m != nil && m.LogoUrl != nil {
		return *m.LogoUrl
	}
	return ""
}

func (m *AgentGroup) GetCreatedTime() int64 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

type AgentStateUpdateRequest struct {
	AccountId        *string     `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string     `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	State            *AgentState `protobuf:"varint,3,opt,name=state,enum=account.AgentState" json:"state,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *AgentStateUpdateRequest) Reset()                    { *m = AgentStateUpdateRequest{} }
func (m *AgentStateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentStateUpdateRequest) ProtoMessage()               {}
func (*AgentStateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AgentStateUpdateRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentStateUpdateRequest) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AgentStateUpdateRequest) GetState() AgentState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return AgentState_Pending
}

type AccountStateUpdateRequest struct {
	AccountId        *string       `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	State            *AccountState `protobuf:"varint,2,opt,name=state,enum=account.AccountState" json:"state,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AccountStateUpdateRequest) Reset()                    { *m = AccountStateUpdateRequest{} }
func (m *AccountStateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountStateUpdateRequest) ProtoMessage()               {}
func (*AccountStateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountStateUpdateRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AccountStateUpdateRequest) GetState() AccountState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return AccountState_UNCONFIRMED
}

type ResetPasswordRequest struct {
	Email            *string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResetPasswordRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

type UpdatePlanRequest struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Plan             *int32  `protobuf:"varint,2,opt,name=plan" json:"plan,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdatePlanRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UpdatePlanRequest) GetPlan() int32 {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return 0
}

type AgentPerm struct {
	AccountId        *string      `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string      `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Method           *auth.Method `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AgentPerm) Reset()                    { *m = AgentPerm{} }
func (m *AgentPerm) String() string            { return proto.CompactTextString(m) }
func (*AgentPerm) ProtoMessage()               {}
func (*AgentPerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AgentPerm) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentPerm) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *AgentPerm) GetMethod() *auth.Method {
	if m != nil {
		return m.Method
	}
	return nil
}

type OELimitUpdated struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Limit            *Limit  `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OELimitUpdated) Reset()                    { *m = OELimitUpdated{} }
func (m *OELimitUpdated) String() string            { return proto.CompactTextString(m) }
func (*OELimitUpdated) ProtoMessage()               {}
func (*OELimitUpdated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OELimitUpdated) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *OELimitUpdated) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type Account struct {
	Id               *string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Plan             *int32        `protobuf:"varint,3,opt,name=plan" json:"plan,omitempty"`
	LogoUrl          *string       `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	OwnerId          *string       `protobuf:"bytes,5,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	State            *AccountState `protobuf:"varint,6,opt,name=state,enum=account.AccountState" json:"state,omitempty"`
	CreatedTime      *int64        `protobuf:"varint,7,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	ConfirmedTime    *int64        `protobuf:"varint,8,opt,name=confirmed_time,json=confirmedTime" json:"confirmed_time,omitempty"`
	LastModifiedTime *int64        `protobuf:"varint,9,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Account) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Account) GetPlan() int32 {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return 0
}

func (m *Account) GetLogoUrl() string {
	if m != nil && m.LogoUrl != nil {
		return *m.LogoUrl
	}
	return ""
}

func (m *Account) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *Account) GetState() AccountState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return AccountState_UNCONFIRMED
}

func (m *Account) GetCreatedTime() int64 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *Account) GetConfirmedTime() int64 {
	if m != nil && m.ConfirmedTime != nil {
		return *m.ConfirmedTime
	}
	return 0
}

func (m *Account) GetLastModifiedTime() int64 {
	if m != nil && m.LastModifiedTime != nil {
		return *m.LastModifiedTime
	}
	return 0
}

type Id struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id               *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Id) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Id) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type AgentIds struct {
	AccountId        *string  `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Ids              []string `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AgentIds) Reset()                    { *m = AgentIds{} }
func (m *AgentIds) String() string            { return proto.CompactTextString(m) }
func (*AgentIds) ProtoMessage()               {}
func (*AgentIds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AgentIds) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *AgentIds) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Ids struct {
	Ids              []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Empty struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListAgentRequest struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StartId          *string `protobuf:"bytes,2,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit            *int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	GroupId          *string `protobuf:"bytes,4,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListAgentRequest) Reset()                    { *m = ListAgentRequest{} }
func (m *ListAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAgentRequest) ProtoMessage()               {}
func (*ListAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListAgentRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListAgentRequest) GetStartId() string {
	if m != nil && m.StartId != nil {
		return *m.StartId
	}
	return ""
}

func (m *ListAgentRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *ListAgentRequest) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

type ListGroupRequest struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StartId          *string `protobuf:"bytes,2,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	Limit            *int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListGroupRequest) Reset()                    { *m = ListGroupRequest{} }
func (m *ListGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupRequest) ProtoMessage()               {}
func (*ListGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListGroupRequest) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ListGroupRequest) GetStartId() string {
	if m != nil && m.StartId != nil {
		return *m.StartId
	}
	return ""
}

func (m *ListGroupRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

type GroupMember struct {
	AccountId        *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GroupId          *string `protobuf:"bytes,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	AgentId          *string `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GroupMember) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *GroupMember) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *GroupMember) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type CreateAccountRequest struct {
	Fullname         *string `protobuf:"bytes,1,opt,name=fullname" json:"fullname,omitempty"`
	Email            *string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Language         *string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Password         *string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	AccountName      *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AccountUrl       *string `protobuf:"bytes,7,opt,name=account_url,json=accountUrl" json:"account_url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateAccountRequest) GetFullname() string {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return ""
}

func (m *CreateAccountRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *CreateAccountRequest) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *CreateAccountRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountUrl() string {
	if m != nil && m.AccountUrl != nil {
		return *m.AccountUrl
	}
	return ""
}

type LoginRequest struct {
	Email            *string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LoginRequest) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type Agents struct {
	Agents           []*Agent `protobuf:"bytes,1,rep,name=Agents" json:"Agents,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (m *Agents) String() string            { return proto.CompactTextString(m) }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type NewPassword struct {
	Token            *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	NewPassword      *string `protobuf:"bytes,2,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewPassword) Reset()                    { *m = NewPassword{} }
func (m *NewPassword) String() string            { return proto.CompactTextString(m) }
func (*NewPassword) ProtoMessage()               {}
func (*NewPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NewPassword) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *NewPassword) GetNewPassword() string {
	if m != nil && m.NewPassword != nil {
		return *m.NewPassword
	}
	return ""
}

type Limit struct {
	// int32 ConcurrentChat = 1;
	ChatHistory      *int32 `protobuf:"varint,2,opt,name=chat_history,json=chatHistory" json:"chat_history,omitempty"`
	MaxTriggers      *int32 `protobuf:"varint,3,opt,name=max_triggers,json=maxTriggers" json:"max_triggers,omitempty"`
	MaxAgents        *int32 `protobuf:"varint,4,opt,name=max_agents,json=maxAgents" json:"max_agents,omitempty"`
	MaxAgentGroups   *int32 `protobuf:"varint,5,opt,name=max_agent_groups,json=maxAgentGroups" json:"max_agent_groups,omitempty"`
	MaxAgentInAGroup *int32 `protobuf:"varint,6,opt,name=max_agent_in_a_group,json=maxAgentInAGroup" json:"max_agent_in_a_group,omitempty"`
	MaxRules         *int32 `protobuf:"varint,7,opt,name=max_rules,json=maxRules" json:"max_rules,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Limit) GetChatHistory() int32 {
	if m != nil && m.ChatHistory != nil {
		return *m.ChatHistory
	}
	return 0
}

func (m *Limit) GetMaxTriggers() int32 {
	if m != nil && m.MaxTriggers != nil {
		return *m.MaxTriggers
	}
	return 0
}

func (m *Limit) GetMaxAgents() int32 {
	if m != nil && m.MaxAgents != nil {
		return *m.MaxAgents
	}
	return 0
}

func (m *Limit) GetMaxAgentGroups() int32 {
	if m != nil && m.MaxAgentGroups != nil {
		return *m.MaxAgentGroups
	}
	return 0
}

func (m *Limit) GetMaxAgentInAGroup() int32 {
	if m != nil && m.MaxAgentInAGroup != nil {
		return *m.MaxAgentInAGroup
	}
	return 0
}

func (m *Limit) GetMaxRules() int32 {
	if m != nil && m.MaxRules != nil {
		return *m.MaxRules
	}
	return 0
}

type AgentGroups struct {
	Groups           []*AgentGroup `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AgentGroups) Reset()                    { *m = AgentGroups{} }
func (m *AgentGroups) String() string            { return proto.CompactTextString(m) }
func (*AgentGroups) ProtoMessage()               {}
func (*AgentGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AgentGroups) GetGroups() []*AgentGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Token struct {
	IsSet            *bool   `protobuf:"varint,1,opt,name=is_set,json=isSet" json:"is_set,omitempty"`
	Token            *string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Token) GetIsSet() bool {
	if m != nil && m.IsSet != nil {
		return *m.IsSet
	}
	return false
}

func (m *Token) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type ConfirmEmail struct {
	From      *string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To        *string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OwnerId   *string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Token     *string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn        *string `protobuf:"bytes,6,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfirmEmail) Reset()                    { *m = ConfirmEmail{} }
func (m *ConfirmEmail) String() string            { return proto.CompactTextString(m) }
func (*ConfirmEmail) ProtoMessage()               {}
func (*ConfirmEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ConfirmEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *ConfirmEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *ConfirmEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ConfirmEmail) GetOwnerId() string {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return ""
}

func (m *ConfirmEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *ConfirmEmail) GetExpiredIn() string {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return ""
}

type InviteEmail struct {
	From             *string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To               *string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SenderId         *string `protobuf:"bytes,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ExpiredIn        *string `protobuf:"bytes,5,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token            *string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InviteEmail) Reset()                    { *m = InviteEmail{} }
func (m *InviteEmail) String() string            { return proto.CompactTextString(m) }
func (*InviteEmail) ProtoMessage()               {}
func (*InviteEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *InviteEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *InviteEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *InviteEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *InviteEmail) GetSenderId() string {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return ""
}

func (m *InviteEmail) GetExpiredIn() string {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return ""
}

func (m *InviteEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type ResetPasswordEmail struct {
	From *string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn        *string `protobuf:"bytes,6,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token            *string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountId        *string `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResetPasswordEmail) Reset()                    { *m = ResetPasswordEmail{} }
func (m *ResetPasswordEmail) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordEmail) ProtoMessage()               {}
func (*ResetPasswordEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ResetPasswordEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *ResetPasswordEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *ResetPasswordEmail) GetExpiredIn() string {
	if m != nil && m.ExpiredIn != nil {
		return *m.ExpiredIn
	}
	return ""
}

func (m *ResetPasswordEmail) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *ResetPasswordEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *ResetPasswordEmail) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

type PasswordChangedEmail struct {
	From             *string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To               *string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId        *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId          *string `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PasswordChangedEmail) Reset()                    { *m = PasswordChangedEmail{} }
func (m *PasswordChangedEmail) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangedEmail) ProtoMessage()               {}
func (*PasswordChangedEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PasswordChangedEmail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *PasswordChangedEmail) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *PasswordChangedEmail) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *PasswordChangedEmail) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func init() {
	proto.RegisterType((*Agent)(nil), "account.Agent")
	proto.RegisterType((*Invitation)(nil), "account.Invitation")
	proto.RegisterType((*AgentGroup)(nil), "account.AgentGroup")
	proto.RegisterType((*AgentStateUpdateRequest)(nil), "account.AgentStateUpdateRequest")
	proto.RegisterType((*AccountStateUpdateRequest)(nil), "account.AccountStateUpdateRequest")
	proto.RegisterType((*ResetPasswordRequest)(nil), "account.ResetPasswordRequest")
	proto.RegisterType((*UpdatePlanRequest)(nil), "account.UpdatePlanRequest")
	proto.RegisterType((*AgentPerm)(nil), "account.AgentPerm")
	proto.RegisterType((*OELimitUpdated)(nil), "account.OELimitUpdated")
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*Id)(nil), "account.Id")
	proto.RegisterType((*AgentIds)(nil), "account.AgentIds")
	proto.RegisterType((*Ids)(nil), "account.Ids")
	proto.RegisterType((*Empty)(nil), "account.Empty")
	proto.RegisterType((*ListAgentRequest)(nil), "account.ListAgentRequest")
	proto.RegisterType((*ListGroupRequest)(nil), "account.ListGroupRequest")
	proto.RegisterType((*GroupMember)(nil), "account.GroupMember")
	proto.RegisterType((*CreateAccountRequest)(nil), "account.CreateAccountRequest")
	proto.RegisterType((*LoginRequest)(nil), "account.LoginRequest")
	proto.RegisterType((*Agents)(nil), "account.Agents")
	proto.RegisterType((*NewPassword)(nil), "account.NewPassword")
	proto.RegisterType((*Limit)(nil), "account.Limit")
	proto.RegisterType((*AgentGroups)(nil), "account.AgentGroups")
	proto.RegisterType((*Token)(nil), "account.Token")
	proto.RegisterType((*ConfirmEmail)(nil), "account.ConfirmEmail")
	proto.RegisterType((*InviteEmail)(nil), "account.InviteEmail")
	proto.RegisterType((*ResetPasswordEmail)(nil), "account.ResetPasswordEmail")
	proto.RegisterType((*PasswordChangedEmail)(nil), "account.PasswordChangedEmail")
	proto.RegisterEnum("account.AccountState", AccountState_name, AccountState_value)
	proto.RegisterEnum("account.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("account.AgentState", AgentState_name, AgentState_value)
	proto.RegisterEnum("account.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountMgr service

type AccountMgrClient interface {
	// Account methods
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Id, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error)
	ReadAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error)
	UpdateAccountState(ctx context.Context, in *AccountStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error)
	ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	// Agent methods
	ReadAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error)
	InviteAgent(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Id, error)
	UninviteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	AcceptInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RejectInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgentState(ctx context.Context, in *AgentStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Empty, error)
	RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*Empty, error)
	ReadAgentPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*auth.Method, error)
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error)
	BatchRead(ctx context.Context, in *AgentIds, opts ...grpc.CallOption) (*Agents, error)
	ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*Agents, error)
	// AgentGroup methods
	CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error)
	UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListGroups(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*AgentGroups, error)
	RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
	AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
	ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error)
}

type accountMgrClient struct {
	cc *grpc.ClientConn
}

func NewAccountMgrClient(cc *grpc.ClientConn) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccountState(ctx context.Context, in *AccountStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdatePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ConfirmAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/InviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UninviteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UninviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AcceptInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RejectInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RejectInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentState(ctx context.Context, in *AgentStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgentState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ResetPassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RequestResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAgentPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*auth.Method, error) {
	out := new(auth.Method)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CheckLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) BatchRead(ctx context.Context, in *AgentIds, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AccountMgr/BatchRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RemoveAgentFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AddAgentToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountMgr service

type AccountMgrServer interface {
	// Account methods
	CreateAccount(context.Context, *CreateAccountRequest) (*Id, error)
	UpdateAccount(context.Context, *Account) (*Empty, error)
	ReadAccount(context.Context, *Id) (*Account, error)
	UpdateAccountState(context.Context, *AccountStateUpdateRequest) (*Empty, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*Empty, error)
	ConfirmAccount(context.Context, *Token) (*Empty, error)
	// Agent methods
	ReadAgent(context.Context, *Id) (*Agent, error)
	InviteAgent(context.Context, *Invitation) (*Id, error)
	UninviteAgent(context.Context, *Id) (*Empty, error)
	AcceptInvitation(context.Context, *Token) (*Empty, error)
	RejectInvitation(context.Context, *Token) (*Empty, error)
	UpdateAgent(context.Context, *Agent) (*Empty, error)
	UpdateAgentState(context.Context, *AgentStateUpdateRequest) (*Empty, error)
	ResetPassword(context.Context, *NewPassword) (*Empty, error)
	RequestResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error)
	UpdateAgentPermission(context.Context, *AgentPerm) (*Empty, error)
	ReadAgentPermission(context.Context, *Id) (*auth.Method, error)
	CheckLogin(context.Context, *LoginRequest) (*Id, error)
	BatchRead(context.Context, *AgentIds) (*Agents, error)
	ListAgents(context.Context, *ListAgentRequest) (*Agents, error)
	// AgentGroup methods
	CreateGroup(context.Context, *AgentGroup) (*Id, error)
	UpdateGroup(context.Context, *AgentGroup) (*Empty, error)
	DeleteGroup(context.Context, *Id) (*Empty, error)
	ListGroups(context.Context, *ListGroupRequest) (*AgentGroups, error)
	RemoveAgentFromGroup(context.Context, *GroupMember) (*Empty, error)
	AddAgentToGroup(context.Context, *GroupMember) (*Empty, error)
	ReadGroup(context.Context, *Id) (*AgentGroup, error)
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccountState(ctx, req.(*AccountStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*Invitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UninviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UninviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UninviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UninviteAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RejectInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RejectInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RejectInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RejectInvitation(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentState(ctx, req.(*AgentStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ResetPassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPerm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, req.(*AgentPerm))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAgentPermission(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_BatchRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).BatchRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/BatchRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).BatchRead(ctx, req.(*AgentIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*ListAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RemoveAgentFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RemoveAgentFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AddAgentToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AddAgentToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "ReadAccount",
			Handler:    _AccountMgr_ReadAccount_Handler,
		},
		{
			MethodName: "UpdateAccountState",
			Handler:    _AccountMgr_UpdateAccountState_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _AccountMgr_UpdatePlan_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "ReadAgent",
			Handler:    _AccountMgr_ReadAgent_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "UninviteAgent",
			Handler:    _AccountMgr_UninviteAgent_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "RejectInvitation",
			Handler:    _AccountMgr_RejectInvitation_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "UpdateAgentState",
			Handler:    _AccountMgr_UpdateAgentState_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AccountMgr_ResetPassword_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AccountMgr_RequestResetPassword_Handler,
		},
		{
			MethodName: "UpdateAgentPermission",
			Handler:    _AccountMgr_UpdateAgentPermission_Handler,
		},
		{
			MethodName: "ReadAgentPermission",
			Handler:    _AccountMgr_ReadAgentPermission_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _AccountMgr_CheckLogin_Handler,
		},
		{
			MethodName: "BatchRead",
			Handler:    _AccountMgr_BatchRead_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "RemoveAgentFromGroup",
			Handler:    _AccountMgr_RemoveAgentFromGroup_Handler,
		},
		{
			MethodName: "AddAgentToGroup",
			Handler:    _AccountMgr_AddAgentToGroup_Handler,
		},
		{
			MethodName: "ReadGroup",
			Handler:    _AccountMgr_ReadGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}

func init() { proto.RegisterFile("account/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x52, 0x1b, 0xc9,
	0x15, 0x46, 0xa3, 0xff, 0x33, 0x92, 0x18, 0x1a, 0x30, 0x42, 0x2e, 0xd7, 0xb2, 0x53, 0x4e, 0x42,
	0x58, 0x17, 0xc4, 0xac, 0x53, 0xa9, 0x78, 0x6b, 0x93, 0x95, 0xf9, 0xf1, 0x6a, 0x03, 0xb6, 0x4b,
	0x86, 0xdc, 0xaa, 0x46, 0x9a, 0x46, 0x34, 0x9e, 0x1f, 0x65, 0x66, 0x84, 0x61, 0xab, 0x92, 0x37,
	0xc8, 0x1b, 0xe4, 0x26, 0xa9, 0xda, 0xca, 0x8b, 0xe4, 0x3a, 0x2f, 0x91, 0xd7, 0xc8, 0x45, 0xaa,
	0x4f, 0x77, 0xcf, 0xf4, 0x48, 0x0a, 0x2c, 0x15, 0xe7, 0x06, 0xa6, 0xcf, 0x4f, 0x9f, 0xbf, 0xef,
	0x74, 0x9f, 0x16, 0xac, 0x3b, 0xa3, 0x51, 0x38, 0x0d, 0x92, 0x3d, 0xf9, 0x7f, 0x77, 0x12, 0x85,
	0x49, 0x48, 0xaa, 0x72, 0xd9, 0xf9, 0xe5, 0x90, 0x25, 0xc3, 0xe9, 0xe8, 0x03, 0x4d, 0x76, 0xc3,
	0x68, 0xbc, 0x17, 0x4f, 0x87, 0xec, 0xfb, 0xbd, 0x98, 0x46, 0xd7, 0x6c, 0x44, 0xe3, 0x09, 0x1d,
	0xed, 0xa1, 0xfc, 0x9e, 0x33, 0x4d, 0x2e, 0xf1, 0x8f, 0xd0, 0xb7, 0xff, 0x59, 0x82, 0x72, 0x77,
	0x4c, 0x83, 0x84, 0xb4, 0xc0, 0x60, 0x6e, 0xbb, 0xb0, 0x55, 0xd8, 0xae, 0xf7, 0x0d, 0xe6, 0x92,
	0x27, 0x00, 0x72, 0xef, 0x01, 0x73, 0xdb, 0x06, 0xd2, 0xeb, 0x92, 0xd2, 0x73, 0x49, 0x07, 0x6a,
	0x17, 0x53, 0xcf, 0x0b, 0x1c, 0x9f, 0xb6, 0x8b, 0xc8, 0x4c, 0xd7, 0x64, 0x0d, 0xca, 0xd4, 0x77,
	0x98, 0xd7, 0x2e, 0x23, 0x43, 0x2c, 0xc8, 0x23, 0xa8, 0xe0, 0x47, 0xdc, 0x2e, 0x6d, 0x15, 0xb7,
	0xeb, 0x7d, 0xb9, 0x22, 0x9b, 0x50, 0x63, 0xf1, 0x20, 0xfc, 0x18, 0xd0, 0xa8, 0x5d, 0xd9, 0x2a,
	0x6c, 0xd7, 0xfa, 0x55, 0x16, 0xbf, 0xe5, 0x4b, 0xf2, 0x18, 0xea, 0x57, 0xe1, 0x70, 0x90, 0xb0,
	0xc4, 0xa3, 0xed, 0xaa, 0xb0, 0x72, 0x15, 0x0e, 0xcf, 0xf8, 0x9a, 0xfc, 0x0c, 0x2a, 0x63, 0x1a,
	0xb8, 0x34, 0x6a, 0xd7, 0xb6, 0x0a, 0xdb, 0xad, 0xfd, 0xe5, 0x5d, 0x95, 0x9a, 0xd7, 0x48, 0xee,
	0x4b, 0x36, 0x46, 0x72, 0xed, 0x24, 0x4e, 0x34, 0x98, 0x46, 0x5e, 0xbb, 0x2e, 0x23, 0x41, 0xca,
	0x79, 0xe4, 0xf1, 0x48, 0x3c, 0x27, 0x18, 0x4f, 0x9d, 0x31, 0x6d, 0x83, 0xb0, 0xa1, 0xd6, 0xc8,
	0x0b, 0x47, 0x4e, 0xc2, 0xc2, 0xa0, 0xbd, 0x2a, 0x79, 0x72, 0xcd, 0x79, 0x09, 0xf3, 0xe9, 0xf7,
	0x61, 0x40, 0xdb, 0xa6, 0xe0, 0xa9, 0x35, 0xf9, 0x0c, 0xcc, 0xab, 0x90, 0x05, 0xd4, 0x1d, 0x70,
	0x52, 0xbb, 0x89, 0x6c, 0x10, 0xa4, 0x33, 0xe6, 0x53, 0xee, 0x13, 0x0b, 0xae, 0x59, 0x42, 0xdd,
	0xc1, 0xf0, 0xb6, 0xdd, 0x12, 0x3e, 0x49, 0xca, 0xab, 0x5b, 0xf2, 0x73, 0x28, 0xc7, 0x89, 0x93,
	0xd0, 0xf6, 0x32, 0x86, 0xb6, 0x9a, 0x86, 0x86, 0xb5, 0x7a, 0xcf, 0x59, 0x7d, 0x21, 0x41, 0xbe,
	0x82, 0x8e, 0xe7, 0xc4, 0xc9, 0x60, 0xe2, 0xc4, 0xf1, 0xc7, 0x30, 0x72, 0x07, 0xa3, 0x4b, 0x27,
	0x18, 0x2b, 0xcb, 0x16, 0xee, 0xbc, 0xc1, 0x25, 0xde, 0x49, 0x81, 0x03, 0xc1, 0x47, 0x37, 0x9e,
	0x42, 0x0b, 0x95, 0x63, 0x4a, 0x03, 0xa1, 0xb0, 0xb2, 0x55, 0xd8, 0x2e, 0xf6, 0x1b, 0x9c, 0xfa,
	0x9e, 0xd2, 0x00, 0xa5, 0x76, 0x60, 0x05, 0xa5, 0xa6, 0x13, 0xd7, 0x49, 0xd4, 0xce, 0x04, 0x05,
	0x97, 0x39, 0xe3, 0x5c, 0xd0, 0xb9, 0xac, 0xfd, 0x83, 0x01, 0xd0, 0xe3, 0x71, 0x88, 0x24, 0x3d,
	0x10, 0x55, 0x1b, 0x50, 0xbd, 0x88, 0x42, 0x9f, 0xf3, 0x04, 0xa8, 0x2a, 0x7c, 0xd9, 0x73, 0x33,
	0x48, 0x95, 0x74, 0x48, 0x6d, 0x42, 0xcd, 0xe1, 0x09, 0xe1, 0xf2, 0x02, 0x6b, 0x55, 0x5c, 0xf7,
	0x5c, 0x0e, 0x9d, 0x98, 0x73, 0xd0, 0x57, 0x09, 0x1d, 0x4e, 0x50, 0xd9, 0x8f, 0xe8, 0xc4, 0xbb,
	0x15, 0xdc, 0x9a, 0xf0, 0x02, 0x29, 0xc8, 0xfe, 0x09, 0xb4, 0xc4, 0xb6, 0x29, 0xc2, 0x05, 0x68,
	0x9a, 0x48, 0x3d, 0x56, 0x30, 0x4f, 0xc5, 0xae, 0xc2, 0xa1, 0x80, 0x28, 0x68, 0x62, 0xdf, 0x49,
	0x22, 0x77, 0x3d, 0x09, 0x3f, 0xd0, 0x40, 0x82, 0x44, 0x2c, 0xec, 0x3f, 0x17, 0x00, 0xb0, 0x98,
	0xaf, 0xa3, 0x70, 0x3a, 0x79, 0x68, 0x9e, 0x08, 0x94, 0xb4, 0xce, 0xc3, 0x6f, 0x9e, 0x0c, 0x2f,
	0x1c, 0x87, 0x08, 0x72, 0x91, 0xa5, 0x2a, 0x5f, 0x73, 0x88, 0x7f, 0x0e, 0x8d, 0x51, 0x44, 0xb3,
	0xda, 0x55, 0xb0, 0x76, 0xa6, 0xa4, 0x61, 0xdd, 0xfe, 0x04, 0x1b, 0x19, 0xb6, 0x44, 0x41, 0xfb,
	0xf4, 0x0f, 0x53, 0x1a, 0x27, 0x33, 0xbe, 0x14, 0x66, 0x7d, 0xd1, 0x8b, 0x60, 0xe4, 0x8b, 0x90,
	0xc2, 0xb8, 0x78, 0x1f, 0x8c, 0xed, 0x31, 0x6c, 0x76, 0x05, 0xf3, 0xe1, 0x1e, 0x7c, 0xa1, 0xcc,
	0x18, 0x68, 0x66, 0x3d, 0x33, 0xa3, 0xed, 0xa8, 0x0c, 0x3d, 0x83, 0xb5, 0x3e, 0x8d, 0x69, 0xda,
	0x0e, 0xca, 0x46, 0x8a, 0x30, 0x43, 0x43, 0x98, 0x7d, 0x0c, 0x2b, 0xc2, 0x95, 0x77, 0x9e, 0x13,
	0xfc, 0x48, 0x77, 0x08, 0x94, 0x26, 0x9e, 0x13, 0xe0, 0x46, 0xe5, 0x3e, 0x7e, 0xdb, 0x1f, 0xa0,
	0x8e, 0x31, 0xbf, 0xa3, 0x91, 0xff, 0x3f, 0x24, 0xf4, 0x29, 0x54, 0x7c, 0x9a, 0x5c, 0x86, 0xa2,
	0x3d, 0xcc, 0xfd, 0xc6, 0x2e, 0x9e, 0xe5, 0xa7, 0x48, 0xeb, 0x4b, 0x9e, 0x7d, 0x0e, 0xad, 0xb7,
	0x47, 0x27, 0xcc, 0x67, 0xaa, 0x33, 0xef, 0xb3, 0xf8, 0x14, 0xca, 0x1e, 0x17, 0x47, 0x73, 0xe6,
	0x7e, 0x2b, 0x4d, 0x20, 0x6e, 0xd2, 0x17, 0x4c, 0xfb, 0x2f, 0x06, 0x54, 0x65, 0x46, 0xe7, 0xf0,
	0xaa, 0x00, 0x69, 0x68, 0x80, 0x54, 0x79, 0x28, 0x66, 0x79, 0xb8, 0x0b, 0xa4, 0x9b, 0x50, 0xc3,
	0x4b, 0x40, 0x6b, 0x66, 0x5c, 0xeb, 0x05, 0xae, 0xdc, 0x5f, 0xe0, 0x39, 0xb0, 0x57, 0xe7, 0xc0,
	0xce, 0x3b, 0x77, 0x14, 0x06, 0x17, 0x2c, 0xf2, 0x95, 0x50, 0x0d, 0x85, 0x9a, 0x29, 0x15, 0xc5,
	0x9e, 0x01, 0xc1, 0x73, 0xcf, 0x0f, 0x5d, 0x76, 0xc1, 0x94, 0x68, 0x1d, 0x45, 0x2d, 0xce, 0x39,
	0x95, 0x0c, 0xec, 0xa0, 0x2f, 0xc1, 0xe8, 0xdd, 0x9b, 0x69, 0x91, 0x37, 0x43, 0xe5, 0xcd, 0xfe,
	0x0a, 0x6a, 0x5d, 0x51, 0xdb, 0xf8, 0x3e, 0x55, 0x0b, 0x8a, 0xcc, 0x8d, 0xdb, 0x06, 0x5e, 0x9e,
	0xfc, 0xd3, 0xde, 0x80, 0x22, 0xd7, 0x93, 0x8c, 0x42, 0xc6, 0xa8, 0x42, 0xf9, 0xc8, 0x9f, 0x24,
	0xb7, 0xf6, 0x1f, 0xc1, 0x3a, 0x61, 0x71, 0x82, 0x26, 0x7e, 0x7c, 0x3b, 0xc7, 0x89, 0x13, 0xe9,
	0xe8, 0xc3, 0xb5, 0x38, 0x84, 0x05, 0x4c, 0x44, 0x45, 0xc5, 0x82, 0x2b, 0x8c, 0xf9, 0x19, 0xc6,
	0x15, 0x64, 0x49, 0x71, 0xdd, 0x73, 0xed, 0xa1, 0x30, 0x8f, 0x47, 0xdc, 0xff, 0xc9, 0xbc, 0x3d,
	0x04, 0x13, 0xf7, 0x3f, 0xa5, 0xfe, 0x50, 0x5e, 0xf6, 0x77, 0x6f, 0x9f, 0x3a, 0x6b, 0xe4, 0x9c,
	0xcd, 0xb5, 0x5d, 0x31, 0xd7, 0x76, 0xf6, 0x3f, 0x0a, 0xb0, 0x76, 0x80, 0xf8, 0x91, 0x80, 0x53,
	0xc1, 0xe8, 0x53, 0x50, 0xe1, 0xbf, 0x4d, 0x41, 0x45, 0xfd, 0xca, 0xd2, 0xa7, 0x8d, 0xd2, 0xfc,
	0xb4, 0xa1, 0x6e, 0x71, 0xd9, 0x01, 0xe9, 0x9a, 0xa3, 0x5a, 0xc5, 0x85, 0xd6, 0x2a, 0xc8, 0x37,
	0x25, 0xed, 0x0d, 0x37, 0xf8, 0x19, 0xa8, 0x25, 0xb6, 0x97, 0xb8, 0xf4, 0x54, 0x36, 0xce, 0x23,
	0xcf, 0xfe, 0x06, 0x1a, 0x27, 0xe1, 0x98, 0x05, 0x73, 0x47, 0x5e, 0x61, 0xc6, 0xc3, 0xd4, 0x0b,
	0x23, 0xef, 0x85, 0xfd, 0x0b, 0xa8, 0x20, 0x96, 0x62, 0xf2, 0x53, 0xf5, 0x85, 0xb8, 0xd3, 0xcf,
	0x0c, 0x01, 0x36, 0xc9, 0xb5, 0x8f, 0xc1, 0x7c, 0x43, 0x3f, 0xaa, 0xc3, 0x36, 0xbb, 0x0c, 0x0b,
	0xda, 0x65, 0xc8, 0x83, 0x0b, 0xe8, 0xc7, 0xc1, 0x8c, 0x59, 0x33, 0xc8, 0x14, 0xed, 0x7f, 0x15,
	0xa0, 0x8c, 0xa7, 0x11, 0xf6, 0xf7, 0xa5, 0x93, 0x0c, 0x2e, 0x59, 0x9c, 0x84, 0xd1, 0xad, 0x3c,
	0x66, 0x4d, 0x4e, 0xfb, 0x56, 0x90, 0xb8, 0x88, 0xef, 0xdc, 0x0c, 0x92, 0x88, 0x8d, 0xc7, 0x34,
	0x8a, 0x25, 0x60, 0x4c, 0xdf, 0xb9, 0x39, 0x93, 0x24, 0x8e, 0x13, 0x2e, 0xe2, 0x88, 0x18, 0x4a,
	0x28, 0x50, 0xf7, 0x9d, 0x1b, 0x19, 0xde, 0x36, 0x58, 0x29, 0x7b, 0x80, 0x08, 0x89, 0xb1, 0x24,
	0xe5, 0x7e, 0x4b, 0x09, 0x21, 0xea, 0x62, 0xb2, 0x0b, 0x6b, 0x99, 0x24, 0x0b, 0x06, 0x8e, 0x10,
	0xc7, 0x02, 0x95, 0xfb, 0x96, 0x92, 0xee, 0x05, 0x5d, 0x71, 0xd3, 0x3f, 0x06, 0x6e, 0x66, 0x10,
	0x4d, 0x3d, 0x1a, 0x63, 0x8d, 0xca, 0xfd, 0x9a, 0xef, 0xdc, 0xf4, 0xf9, 0xda, 0x7e, 0x09, 0xa6,
	0xbe, 0xf7, 0x17, 0x50, 0x11, 0x5f, 0x32, 0xc9, 0x33, 0x17, 0xa8, 0xe8, 0x2b, 0x29, 0x62, 0xbf,
	0x80, 0xf2, 0x19, 0x66, 0x73, 0x1d, 0x2a, 0x2c, 0x1e, 0xc4, 0x34, 0xc1, 0x24, 0xd7, 0xfa, 0x65,
	0x16, 0xbf, 0xa7, 0x49, 0x96, 0x7a, 0x43, 0x9f, 0x43, 0xfe, 0x5a, 0x80, 0xc6, 0x81, 0x38, 0xf5,
	0x8e, 0xb0, 0xfc, 0x04, 0x4a, 0x7c, 0xe6, 0x92, 0x05, 0xc2, 0x6f, 0x7e, 0x6a, 0x25, 0xa1, 0x3a,
	0xb5, 0x92, 0x70, 0xa6, 0xc9, 0x8a, 0x0b, 0x9a, 0x2c, 0x3d, 0xc9, 0x4b, 0xf9, 0x93, 0x3c, 0x75,
	0xa2, 0xac, 0xd7, 0xff, 0x09, 0x00, 0xbd, 0x99, 0xb0, 0x88, 0xba, 0x03, 0x16, 0x48, 0x68, 0xd7,
	0x25, 0xa5, 0x17, 0xd8, 0x7f, 0x2b, 0x80, 0x89, 0x33, 0x25, 0xfd, 0x64, 0x2e, 0x8a, 0xf1, 0xd0,
	0xd5, 0x7d, 0xac, 0x09, 0x82, 0x38, 0xc3, 0x35, 0x77, 0xca, 0x33, 0xee, 0x64, 0x31, 0x54, 0xf4,
	0x44, 0xfe, 0xbd, 0x00, 0x24, 0x37, 0x58, 0x3c, 0xc8, 0xd7, 0x3b, 0xc2, 0xcf, 0xec, 0x15, 0x67,
	0x72, 0xa6, 0x05, 0x58, 0xba, 0x6b, 0x88, 0xc8, 0x8f, 0xc6, 0x76, 0x02, 0x6b, 0x33, 0x6f, 0x81,
	0x4f, 0x59, 0xf9, 0xd4, 0x6a, 0x29, 0x67, 0x75, 0xe7, 0x25, 0x34, 0xf4, 0xdb, 0x9a, 0x2c, 0x83,
	0x79, 0xfe, 0xe6, 0xe0, 0xed, 0x9b, 0xe3, 0x5e, 0xff, 0xf4, 0xe8, 0xd0, 0x5a, 0x22, 0x4d, 0xa8,
	0x77, 0x0f, 0xce, 0x7a, 0xbf, 0xef, 0x9e, 0x1d, 0x1d, 0x5a, 0x05, 0x02, 0x50, 0x39, 0x79, 0x7b,
	0xf0, 0xbb, 0xa3, 0x43, 0xcb, 0xd8, 0x39, 0x84, 0x8a, 0x78, 0xd3, 0x91, 0x3a, 0x94, 0xcf, 0x83,
	0x98, 0x26, 0xd6, 0x12, 0xa9, 0x41, 0xe9, 0xd4, 0xf1, 0xa8, 0x10, 0x3d, 0xa6, 0x3e, 0xff, 0x36,
	0x48, 0x03, 0x6a, 0xaf, 0x58, 0x4c, 0x6f, 0xa6, 0x8e, 0x67, 0x15, 0x89, 0x09, 0xd5, 0xae, 0x5c,
	0x94, 0x76, 0xbe, 0x91, 0x13, 0xb7, 0xb0, 0x6f, 0x42, 0xf5, 0x1d, 0x0d, 0x5c, 0x16, 0x8c, 0xad,
	0x25, 0xbe, 0x43, 0x77, 0x94, 0xb0, 0x6b, 0xbe, 0x5b, 0x03, 0x6a, 0xbd, 0xc0, 0x11, 0x2b, 0x83,
	0x8b, 0x1d, 0x52, 0x8f, 0x26, 0xd4, 0xb5, 0x8a, 0x3b, 0x3f, 0x94, 0xa0, 0x7c, 0x74, 0xcd, 0x5f,
	0xcb, 0xeb, 0xb0, 0x92, 0xb5, 0xa0, 0x12, 0x58, 0x22, 0x04, 0x5a, 0x48, 0x3e, 0xa1, 0x17, 0x82,
	0x65, 0x15, 0xc8, 0x1a, 0x58, 0x5d, 0xf1, 0x20, 0xe0, 0xaf, 0x3f, 0x41, 0x35, 0xf2, 0x1b, 0xc8,
	0x31, 0xcd, 0x2a, 0xe6, 0xc9, 0xe2, 0xca, 0x71, 0xad, 0x12, 0xb1, 0xa0, 0x81, 0xe4, 0x23, 0x01,
	0x0a, 0xab, 0x9c, 0x52, 0x94, 0x6a, 0x25, 0xa5, 0x28, 0xad, 0x6a, 0xba, 0x99, 0x36, 0x51, 0xbb,
	0x56, 0x8d, 0x74, 0xe0, 0x51, 0x3a, 0x8b, 0xb2, 0x38, 0x66, 0x61, 0xa0, 0x78, 0x75, 0xb2, 0x02,
	0x4d, 0x39, 0x2c, 0x5c, 0xd1, 0x11, 0x27, 0x41, 0x4a, 0xea, 0x8e, 0x46, 0x74, 0xc2, 0x49, 0x66,
	0x1a, 0xe6, 0x79, 0x20, 0x9f, 0xac, 0x56, 0x23, 0x35, 0xdf, 0x93, 0x94, 0x26, 0x4a, 0xc9, 0xcb,
	0x47, 0xee, 0xdf, 0xd2, 0x68, 0xca, 0xcd, 0x65, 0xf2, 0x08, 0x88, 0xa4, 0xf1, 0x21, 0x5b, 0xc9,
	0x5a, 0x64, 0x03, 0x56, 0xe7, 0x9f, 0x04, 0xae, 0xb5, 0xa2, 0x31, 0xf4, 0x21, 0xd7, 0x22, 0x64,
	0x13, 0xd6, 0xd5, 0xee, 0xe2, 0x48, 0x93, 0x37, 0x9d, 0xb5, 0x4a, 0x1e, 0xc3, 0xc6, 0xb7, 0x4e,
	0xe0, 0x7a, 0xf4, 0x48, 0xf5, 0x95, 0x7a, 0xa3, 0x5a, 0x6b, 0xda, 0x86, 0xfa, 0x51, 0x68, 0xad,
	0x93, 0x27, 0xe9, 0xab, 0x64, 0xbe, 0xb5, 0xad, 0xcf, 0x35, 0xcf, 0xb5, 0xe3, 0xc9, 0x7a, 0xb4,
	0xff, 0x6f, 0x13, 0x40, 0x32, 0x4e, 0xc7, 0x11, 0xf9, 0x1a, 0x9a, 0xb9, 0xe9, 0x81, 0x3c, 0x49,
	0xcf, 0xf1, 0x45, 0x53, 0x45, 0xc7, 0x4c, 0xd9, 0x3d, 0xd7, 0x5e, 0x22, 0x5f, 0x42, 0x53, 0x84,
	0xa8, 0xd4, 0xad, 0xd9, 0xf9, 0xb7, 0x93, 0xdd, 0xbe, 0x62, 0xee, 0x5b, 0x22, 0xbb, 0x60, 0xf6,
	0xa9, 0xe3, 0x2a, 0x15, 0x7d, 0xcb, 0xce, 0x9c, 0xbe, 0xbd, 0x44, 0xbe, 0x03, 0x92, 0x33, 0x22,
	0x9a, 0xc4, 0x5e, 0x38, 0x69, 0xe7, 0x1e, 0x67, 0x0b, 0x6c, 0xbf, 0x04, 0xc8, 0x1e, 0x4d, 0xa4,
	0x93, 0xf2, 0xe7, 0x5e, 0x52, 0x0b, 0x74, 0xf7, 0xa1, 0x25, 0x6b, 0x90, 0x3e, 0x35, 0x52, 0x19,
	0xbc, 0xde, 0x16, 0xe8, 0xec, 0x40, 0x1d, 0x63, 0xc5, 0xdf, 0xb1, 0x72, 0x91, 0xce, 0x4c, 0x25,
	0xf6, 0x12, 0x79, 0xae, 0xae, 0x12, 0x21, 0x9d, 0xdd, 0xa8, 0x19, 0x20, 0x66, 0xf3, 0xbf, 0x0b,
	0x4d, 0x05, 0xf4, 0x3b, 0x4d, 0x28, 0x77, 0x5e, 0x80, 0x25, 0x7a, 0x45, 0xff, 0x1d, 0xe4, 0xde,
	0x20, 0x5e, 0x80, 0x25, 0x9a, 0xee, 0x41, 0x5a, 0x7b, 0x60, 0xca, 0xb2, 0x89, 0x1f, 0xf1, 0xf2,
	0xf1, 0x2e, 0x50, 0x38, 0x06, 0x4b, 0x53, 0x10, 0x55, 0xde, 0x5a, 0xf0, 0x2e, 0xbf, 0xaf, 0xc6,
	0xbf, 0x82, 0x66, 0xae, 0x25, 0xc8, 0x5a, 0x2a, 0xa2, 0xcd, 0x7b, 0x0b, 0x14, 0x5f, 0xf3, 0xf7,
	0x37, 0xee, 0x9a, 0xd7, 0xcf, 0x7a, 0x62, 0xd1, 0xf3, 0x7c, 0xc1, 0x46, 0x5f, 0xc3, 0xba, 0x16,
	0x49, 0x76, 0x98, 0x11, 0x92, 0x0f, 0x87, 0x73, 0x16, 0x02, 0x6d, 0x35, 0x05, 0x8d, 0xa6, 0x9c,
	0xab, 0x6d, 0xee, 0x79, 0x8d, 0x3a, 0x70, 0x70, 0x49, 0x47, 0x1f, 0x70, 0x8a, 0x26, 0xd9, 0x33,
	0x54, 0x9f, 0xaa, 0x67, 0xd1, 0xf3, 0x1c, 0xea, 0xaf, 0x9c, 0x64, 0x74, 0xc9, 0x8d, 0x91, 0x95,
	0xbc, 0x6b, 0x3d, 0x37, 0xee, 0x2c, 0xe7, 0x49, 0xb1, 0xe8, 0x9f, 0xf4, 0xd5, 0x16, 0x93, 0x4d,
	0xed, 0x35, 0x9e, 0x7f, 0xca, 0x2d, 0xd2, 0x7d, 0x0e, 0xa6, 0x38, 0x53, 0xc4, 0xb4, 0xb9, 0x68,
	0x62, 0x9c, 0xf5, 0xf0, 0x85, 0xc2, 0xd0, 0x1d, 0x2a, 0xf3, 0xf9, 0x7b, 0x06, 0xa6, 0xb8, 0xf7,
	0x84, 0xd6, 0x3d, 0x3d, 0xf1, 0x5b, 0x11, 0x92, 0x9c, 0x6b, 0xf3, 0x21, 0xe9, 0xcf, 0xc3, 0xce,
	0xda, 0x02, 0xeb, 0x3c, 0xae, 0xdf, 0x70, 0xd8, 0xf8, 0xe1, 0xb5, 0xa8, 0xf6, 0x71, 0x14, 0xfa,
	0xc2, 0x6e, 0x26, 0xaf, 0xbd, 0x02, 0x17, 0x38, 0xf0, 0x6b, 0x58, 0xee, 0xba, 0xa2, 0xda, 0x67,
	0xe1, 0xc3, 0x54, 0xf7, 0xc4, 0xf1, 0xb2, 0x20, 0xce, 0x45, 0xa9, 0xb2, 0x97, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xb6, 0x7d, 0x17, 0xb8, 0xac, 0x17, 0x00, 0x00,
}
