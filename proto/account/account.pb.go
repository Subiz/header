// Code generated by protoc-gen-go.
// source: account/account.proto
// DO NOT EDIT!

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/account.proto

It has these top-level messages:
	Agent
	Invitation
	AgentGroup
	AgentStateUpdateRequest
	AccountStateUpdateRequest
	ResetPasswordRequest
	UpdatePlanRequest
	AgentPerm
	OELimitUpdated
	Account
	Id
	AgentIds
	Ids
	Empty
	ListAgentRequest
	ListGroupRequest
	GroupMember
	CreateAccountRequest
	LoginRequest
	Agents
	NewPassword
	Limit
	AgentGroups
	Token
	ConfirmEmail
	InviteEmail
	ResetPasswordEmail
	PasswordChangedEmail
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "bitbucket.org/subiz/servicespec/proto/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountState int32

const (
	AccountState_Unconfirmed AccountState = 0
	AccountState_Activated   AccountState = 1
	AccountState_Locked      AccountState = 2
)

var AccountState_name = map[int32]string{
	0: "Unconfirmed",
	1: "Activated",
	2: "Locked",
}
var AccountState_value = map[string]int32{
	"Unconfirmed": 0,
	"Activated":   1,
	"Locked":      2,
}

func (x AccountState) String() string {
	return proto.EnumName(AccountState_name, int32(x))
}
func (AccountState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Gender int32

const (
	Gender_Unset    Gender = 0
	Gender_Male     Gender = 1
	Gender_Female   Gender = 2
	Gender_Bisexual Gender = 3
	Gender_Asexual  Gender = 4
)

var Gender_name = map[int32]string{
	0: "Unset",
	1: "Male",
	2: "Female",
	3: "Bisexual",
	4: "Asexual",
}
var Gender_value = map[string]int32{
	"Unset":    0,
	"Male":     1,
	"Female":   2,
	"Bisexual": 3,
	"Asexual":  4,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AgentState int32

const (
	AgentState_Pending  AgentState = 0
	AgentState_Active   AgentState = 1
	AgentState_Inactive AgentState = 2
	AgentState_Deleted  AgentState = 3
)

var AgentState_name = map[int32]string{
	0: "Pending",
	1: "Active",
	2: "Inactive",
	3: "Deleted",
}
var AgentState_value = map[string]int32{
	"Pending":  0,
	"Active":   1,
	"Inactive": 2,
	"Deleted":  3,
}

func (x AgentState) String() string {
	return proto.EnumName(AgentState_name, int32(x))
}
func (AgentState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Event int32

const (
	Event_AgentGroupDeleted      Event = 0
	Event_AgentLeftGroup         Event = 1
	Event_AgentJoinedGroup       Event = 2
	Event_AgentGroupUpdated      Event = 3
	Event_AgentGroupCreated      Event = 4
	Event_AgentExpired           Event = 5
	Event_AgentUpdated           Event = 6
	Event_AgentCreated           Event = 7
	Event_AgentStateUpdated      Event = 8
	Event_AgentPermissionUpdated Event = 9
	// out event only
	Event_AgentRejected             Event = 10
	Event_AgentAccepted             Event = 11
	Event_AgentUninvited            Event = 12
	Event_AgentInvited              Event = 13
	Event_AccountUpdated            Event = 14
	Event_AccountCreated            Event = 15
	Event_AccountPlanUpdated        Event = 16
	Event_AccountStateUpdated       Event = 17
	Event_AccountLimitUpdated       Event = 18
	Event_AccountConfirmRequest     Event = 19
	Event_HandleExpiredInvitation   Event = 20
	Event_AccountConfirmEmail       Event = 21
	Event_AccountResetPasswordEmail Event = 33
	// AccountPasswordChangedEmail = 34;
	Event_AccountInviteEmail Event = 22
)

var Event_name = map[int32]string{
	0:  "AgentGroupDeleted",
	1:  "AgentLeftGroup",
	2:  "AgentJoinedGroup",
	3:  "AgentGroupUpdated",
	4:  "AgentGroupCreated",
	5:  "AgentExpired",
	6:  "AgentUpdated",
	7:  "AgentCreated",
	8:  "AgentStateUpdated",
	9:  "AgentPermissionUpdated",
	10: "AgentRejected",
	11: "AgentAccepted",
	12: "AgentUninvited",
	13: "AgentInvited",
	14: "AccountUpdated",
	15: "AccountCreated",
	16: "AccountPlanUpdated",
	17: "AccountStateUpdated",
	18: "AccountLimitUpdated",
	19: "AccountConfirmRequest",
	20: "HandleExpiredInvitation",
	21: "AccountConfirmEmail",
	33: "AccountResetPasswordEmail",
	22: "AccountInviteEmail",
}
var Event_value = map[string]int32{
	"AgentGroupDeleted":         0,
	"AgentLeftGroup":            1,
	"AgentJoinedGroup":          2,
	"AgentGroupUpdated":         3,
	"AgentGroupCreated":         4,
	"AgentExpired":              5,
	"AgentUpdated":              6,
	"AgentCreated":              7,
	"AgentStateUpdated":         8,
	"AgentPermissionUpdated":    9,
	"AgentRejected":             10,
	"AgentAccepted":             11,
	"AgentUninvited":            12,
	"AgentInvited":              13,
	"AccountUpdated":            14,
	"AccountCreated":            15,
	"AccountPlanUpdated":        16,
	"AccountStateUpdated":       17,
	"AccountLimitUpdated":       18,
	"AccountConfirmRequest":     19,
	"HandleExpiredInvitation":   20,
	"AccountConfirmEmail":       21,
	"AccountResetPasswordEmail": 33,
	"AccountInviteEmail":        22,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Agent struct {
	Id                      string     `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	AccountId               string     `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId"`
	FullName                string     `protobuf:"bytes,3,opt,name=FullName,json=fullName" json:"FullName"`
	Email                   string     `protobuf:"bytes,5,opt,name=Email,json=email" json:"Email"`
	IsOwner                 bool       `protobuf:"varint,6,opt,name=IsOwner,json=isOwner" json:"IsOwner"`
	JobTitle                string     `protobuf:"bytes,7,opt,name=JobTitle,json=jobTitle" json:"JobTitle"`
	Gender                  Gender     `protobuf:"varint,8,opt,name=Gender,json=gender,enum=account.Gender" json:"Gender"`
	AvatarUrl               string     `protobuf:"bytes,9,opt,name=AvatarUrl,json=avatarUrl" json:"AvatarUrl"`
	Language                string     `protobuf:"bytes,10,opt,name=Language,json=language" json:"Language"`
	Location                string     `protobuf:"bytes,19,opt,name=Location,json=location" json:"Location"`
	Timezone                string     `protobuf:"bytes,11,opt,name=Timezone,json=timezone" json:"Timezone"`
	EncryptedPassword       string     `protobuf:"bytes,12,opt,name=EncryptedPassword,json=encryptedPassword" json:"EncryptedPassword"`
	JoinedTime              string     `protobuf:"bytes,13,opt,name=JoinedTime,json=joinedTime" json:"JoinedTime"`
	InvitedByAgentId        string     `protobuf:"bytes,14,opt,name=InvitedByAgentId,json=invitedByAgentId" json:"InvitedByAgentId"`
	State                   AgentState `protobuf:"varint,15,opt,name=State,json=state,enum=account.AgentState" json:"State"`
	LastPasswordChangedTime string     `protobuf:"bytes,16,opt,name=LastPasswordChangedTime,json=lastPasswordChangedTime" json:"LastPasswordChangedTime"`
	LastSeenTime            string     `protobuf:"bytes,17,opt,name=LastSeenTime,json=lastSeenTime" json:"LastSeenTime"`
	LastUpdatedTime         string     `protobuf:"bytes,18,opt,name=LastUpdatedTime,json=lastUpdatedTime" json:"LastUpdatedTime"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Agent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Agent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Agent) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Agent) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Agent) GetIsOwner() bool {
	if m != nil {
		return m.IsOwner
	}
	return false
}

func (m *Agent) GetJobTitle() string {
	if m != nil {
		return m.JobTitle
	}
	return ""
}

func (m *Agent) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_Unset
}

func (m *Agent) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Agent) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Agent) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Agent) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Agent) GetEncryptedPassword() string {
	if m != nil {
		return m.EncryptedPassword
	}
	return ""
}

func (m *Agent) GetJoinedTime() string {
	if m != nil {
		return m.JoinedTime
	}
	return ""
}

func (m *Agent) GetInvitedByAgentId() string {
	if m != nil {
		return m.InvitedByAgentId
	}
	return ""
}

func (m *Agent) GetState() AgentState {
	if m != nil {
		return m.State
	}
	return AgentState_Pending
}

func (m *Agent) GetLastPasswordChangedTime() string {
	if m != nil {
		return m.LastPasswordChangedTime
	}
	return ""
}

func (m *Agent) GetLastSeenTime() string {
	if m != nil {
		return m.LastSeenTime
	}
	return ""
}

func (m *Agent) GetLastUpdatedTime() string {
	if m != nil {
		return m.LastUpdatedTime
	}
	return ""
}

type Invitation struct {
	Id            string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	AccountId     string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId"`
	FromId        string `protobuf:"bytes,3,opt,name=FromId,json=fromId" json:"FromId"`
	Email         string `protobuf:"bytes,4,opt,name=Email,json=email" json:"Email"`
	AgentId       string `protobuf:"bytes,5,opt,name=AgentId,json=agentId" json:"AgentId"`
	SentTime      string `protobuf:"bytes,7,opt,name=SentTime,json=sentTime" json:"SentTime"`
	ReplyTime     string `protobuf:"bytes,8,opt,name=ReplyTime,json=replyTime" json:"ReplyTime"`
	AgentFullName string `protobuf:"bytes,9,opt,name=AgentFullName,json=agentFullName" json:"AgentFullName"`
	AgentJobTitle string `protobuf:"bytes,10,opt,name=AgentJobTitle,json=agentJobTitle" json:"AgentJobTitle"`
	// Token to very
	Token string `protobuf:"bytes,11,opt,name=Token,json=token" json:"Token"`
}

func (m *Invitation) Reset()                    { *m = Invitation{} }
func (m *Invitation) String() string            { return proto.CompactTextString(m) }
func (*Invitation) ProtoMessage()               {}
func (*Invitation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Invitation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Invitation) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Invitation) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Invitation) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Invitation) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *Invitation) GetSentTime() string {
	if m != nil {
		return m.SentTime
	}
	return ""
}

func (m *Invitation) GetReplyTime() string {
	if m != nil {
		return m.ReplyTime
	}
	return ""
}

func (m *Invitation) GetAgentFullName() string {
	if m != nil {
		return m.AgentFullName
	}
	return ""
}

func (m *Invitation) GetAgentJobTitle() string {
	if m != nil {
		return m.AgentJobTitle
	}
	return ""
}

func (m *Invitation) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AgentGroup struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	AccountId string `protobuf:"bytes,2,opt,name=AccountId,json=accountId" json:"AccountId"`
	Name      string `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name"`
	LogoUrl   string `protobuf:"bytes,4,opt,name=LogoUrl,json=logoUrl" json:"LogoUrl"`
	// Members is list of 10 agents in group
	// repeated string Members = 5;
	CreatedTime string `protobuf:"bytes,6,opt,name=CreatedTime,json=createdTime" json:"CreatedTime"`
}

func (m *AgentGroup) Reset()                    { *m = AgentGroup{} }
func (m *AgentGroup) String() string            { return proto.CompactTextString(m) }
func (*AgentGroup) ProtoMessage()               {}
func (*AgentGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgentGroup) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AgentGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AgentGroup) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *AgentGroup) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

type AgentStateUpdateRequest struct {
	AccountId string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	AgentId   string     `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId"`
	State     AgentState `protobuf:"varint,3,opt,name=State,json=state,enum=account.AgentState" json:"State"`
}

func (m *AgentStateUpdateRequest) Reset()                    { *m = AgentStateUpdateRequest{} }
func (m *AgentStateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentStateUpdateRequest) ProtoMessage()               {}
func (*AgentStateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AgentStateUpdateRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AgentStateUpdateRequest) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AgentStateUpdateRequest) GetState() AgentState {
	if m != nil {
		return m.State
	}
	return AgentState_Pending
}

type AccountStateUpdateRequest struct {
	AccountId string       `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	State     AccountState `protobuf:"varint,2,opt,name=State,json=state,enum=account.AccountState" json:"State"`
}

func (m *AccountStateUpdateRequest) Reset()                    { *m = AccountStateUpdateRequest{} }
func (m *AccountStateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountStateUpdateRequest) ProtoMessage()               {}
func (*AccountStateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountStateUpdateRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AccountStateUpdateRequest) GetState() AccountState {
	if m != nil {
		return m.State
	}
	return AccountState_Unconfirmed
}

type ResetPasswordRequest struct {
	Email string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResetPasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UpdatePlanRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	Plan      int32  `protobuf:"varint,2,opt,name=Plan,json=plan" json:"Plan"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdatePlanRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UpdatePlanRequest) GetPlan() int32 {
	if m != nil {
		return m.Plan
	}
	return 0
}

type AgentPerm struct {
	AccountId string       `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	AgentId   string       `protobuf:"bytes,2,opt,name=AgentId,json=agentId" json:"AgentId"`
	Method    *auth.Method `protobuf:"bytes,3,opt,name=Method,json=method" json:"Method"`
}

func (m *AgentPerm) Reset()                    { *m = AgentPerm{} }
func (m *AgentPerm) String() string            { return proto.CompactTextString(m) }
func (*AgentPerm) ProtoMessage()               {}
func (*AgentPerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AgentPerm) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AgentPerm) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AgentPerm) GetMethod() *auth.Method {
	if m != nil {
		return m.Method
	}
	return nil
}

type OELimitUpdated struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	Limit     *Limit `protobuf:"bytes,2,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *OELimitUpdated) Reset()                    { *m = OELimitUpdated{} }
func (m *OELimitUpdated) String() string            { return proto.CompactTextString(m) }
func (*OELimitUpdated) ProtoMessage()               {}
func (*OELimitUpdated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OELimitUpdated) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *OELimitUpdated) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type Account struct {
	Id               string       `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
	Name             string       `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name"`
	Plan             int32        `protobuf:"varint,3,opt,name=Plan,json=plan" json:"Plan"`
	LogoUrl          string       `protobuf:"bytes,4,opt,name=LogoUrl,json=logoUrl" json:"LogoUrl"`
	OwnerId          string       `protobuf:"bytes,5,opt,name=OwnerId,json=ownerId" json:"OwnerId"`
	State            AccountState `protobuf:"varint,6,opt,name=State,json=state,enum=account.AccountState" json:"State"`
	CreatedTime      string       `protobuf:"bytes,7,opt,name=CreatedTime,json=createdTime" json:"CreatedTime"`
	ConfirmedTime    string       `protobuf:"bytes,8,opt,name=ConfirmedTime,json=confirmedTime" json:"ConfirmedTime"`
	LastModifiedTime string       `protobuf:"bytes,9,opt,name=LastModifiedTime,json=lastModifiedTime" json:"LastModifiedTime"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetPlan() int32 {
	if m != nil {
		return m.Plan
	}
	return 0
}

func (m *Account) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *Account) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Account) GetState() AccountState {
	if m != nil {
		return m.State
	}
	return AccountState_Unconfirmed
}

func (m *Account) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *Account) GetConfirmedTime() string {
	if m != nil {
		return m.ConfirmedTime
	}
	return ""
}

func (m *Account) GetLastModifiedTime() string {
	if m != nil {
		return m.LastModifiedTime
	}
	return ""
}

type Id struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	Id        string `protobuf:"bytes,2,opt,name=Id,json=id" json:"Id"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Id) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AgentIds struct {
	AccountId string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	Ids       []string `protobuf:"bytes,2,rep,name=Ids,json=ids" json:"Ids"`
}

func (m *AgentIds) Reset()                    { *m = AgentIds{} }
func (m *AgentIds) String() string            { return proto.CompactTextString(m) }
func (*AgentIds) ProtoMessage()               {}
func (*AgentIds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AgentIds) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AgentIds) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Ids struct {
	Ids []string `protobuf:"bytes,1,rep,name=Ids,json=ids" json:"Ids"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListAgentRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	StartId   string `protobuf:"bytes,2,opt,name=StartId,json=startId" json:"StartId"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,json=limit" json:"Limit"`
	GroupId   string `protobuf:"bytes,4,opt,name=GroupId,json=groupId" json:"GroupId"`
}

func (m *ListAgentRequest) Reset()                    { *m = ListAgentRequest{} }
func (m *ListAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAgentRequest) ProtoMessage()               {}
func (*ListAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListAgentRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListAgentRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListAgentRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListAgentRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type ListGroupRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	StartId   string `protobuf:"bytes,2,opt,name=StartId,json=startId" json:"StartId"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *ListGroupRequest) Reset()                    { *m = ListGroupRequest{} }
func (m *ListGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupRequest) ProtoMessage()               {}
func (*ListGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListGroupRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ListGroupRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListGroupRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GroupMember struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	GroupId   string `protobuf:"bytes,2,opt,name=GroupId,json=groupId" json:"GroupId"`
	AgentId   string `protobuf:"bytes,3,opt,name=AgentId,json=agentId" json:"AgentId"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GroupMember) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GroupMember) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupMember) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type CreateAccountRequest struct {
	FullName    string `protobuf:"bytes,1,opt,name=FullName,json=fullName" json:"FullName"`
	Email       string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email"`
	Language    string `protobuf:"bytes,4,opt,name=Language,json=language" json:"Language"`
	Password    string `protobuf:"bytes,5,opt,name=Password,json=password" json:"Password"`
	AccountName string `protobuf:"bytes,6,opt,name=AccountName,json=accountName" json:"AccountName"`
	AccountUrl  string `protobuf:"bytes,7,opt,name=AccountUrl,json=accountUrl" json:"AccountUrl"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateAccountRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *CreateAccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateAccountRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *CreateAccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountUrl() string {
	if m != nil {
		return m.AccountUrl
	}
	return ""
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Agents struct {
	Agents []*Agent `protobuf:"bytes,1,rep,name=Agents,json=agents" json:"Agents"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (m *Agents) String() string            { return proto.CompactTextString(m) }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type NewPassword struct {
	Token       string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token"`
	NewPassword string `protobuf:"bytes,2,opt,name=NewPassword,json=newPassword" json:"NewPassword"`
}

func (m *NewPassword) Reset()                    { *m = NewPassword{} }
func (m *NewPassword) String() string            { return proto.CompactTextString(m) }
func (*NewPassword) ProtoMessage()               {}
func (*NewPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NewPassword) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NewPassword) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type Limit struct {
	// int32 ConcurrentChat = 1;
	ChatHistory      int32 `protobuf:"varint,2,opt,name=ChatHistory,json=chatHistory" json:"ChatHistory"`
	MaxTriggers      int32 `protobuf:"varint,3,opt,name=MaxTriggers,json=maxTriggers" json:"MaxTriggers"`
	MaxAgents        int32 `protobuf:"varint,4,opt,name=MaxAgents,json=maxAgents" json:"MaxAgents"`
	MaxAgentGroups   int32 `protobuf:"varint,5,opt,name=MaxAgentGroups,json=maxAgentGroups" json:"MaxAgentGroups"`
	MaxAgentInAGroup int32 `protobuf:"varint,6,opt,name=MaxAgentInAGroup,json=maxAgentInAGroup" json:"MaxAgentInAGroup"`
	MaxRules         int32 `protobuf:"varint,7,opt,name=MaxRules,json=maxRules" json:"MaxRules"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Limit) GetChatHistory() int32 {
	if m != nil {
		return m.ChatHistory
	}
	return 0
}

func (m *Limit) GetMaxTriggers() int32 {
	if m != nil {
		return m.MaxTriggers
	}
	return 0
}

func (m *Limit) GetMaxAgents() int32 {
	if m != nil {
		return m.MaxAgents
	}
	return 0
}

func (m *Limit) GetMaxAgentGroups() int32 {
	if m != nil {
		return m.MaxAgentGroups
	}
	return 0
}

func (m *Limit) GetMaxAgentInAGroup() int32 {
	if m != nil {
		return m.MaxAgentInAGroup
	}
	return 0
}

func (m *Limit) GetMaxRules() int32 {
	if m != nil {
		return m.MaxRules
	}
	return 0
}

type AgentGroups struct {
	Groups []*AgentGroup `protobuf:"bytes,1,rep,name=Groups,json=groups" json:"Groups"`
}

func (m *AgentGroups) Reset()                    { *m = AgentGroups{} }
func (m *AgentGroups) String() string            { return proto.CompactTextString(m) }
func (*AgentGroups) ProtoMessage()               {}
func (*AgentGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AgentGroups) GetGroups() []*AgentGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ConfirmEmail struct {
	From      string `protobuf:"bytes,1,opt,name=From,json=from" json:"From"`
	To        string `protobuf:"bytes,2,opt,name=To,json=to" json:"To"`
	AccountId string `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId"`
	OwnerId   string `protobuf:"bytes,4,opt,name=OwnerId,json=ownerId" json:"OwnerId"`
	Token     string `protobuf:"bytes,5,opt,name=Token,json=token" json:"Token"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn string `protobuf:"bytes,6,opt,name=ExpiredIn,json=expiredIn" json:"ExpiredIn"`
}

func (m *ConfirmEmail) Reset()                    { *m = ConfirmEmail{} }
func (m *ConfirmEmail) String() string            { return proto.CompactTextString(m) }
func (*ConfirmEmail) ProtoMessage()               {}
func (*ConfirmEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ConfirmEmail) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ConfirmEmail) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ConfirmEmail) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ConfirmEmail) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *ConfirmEmail) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ConfirmEmail) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

type InviteEmail struct {
	From      string `protobuf:"bytes,1,opt,name=From,json=from" json:"From"`
	To        string `protobuf:"bytes,2,opt,name=To,json=to" json:"To"`
	AccountId string `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId"`
	SenderId  string `protobuf:"bytes,4,opt,name=SenderId,json=senderId" json:"SenderId"`
	ExpiredIn string `protobuf:"bytes,5,opt,name=ExpiredIn,json=expiredIn" json:"ExpiredIn"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	Token string `protobuf:"bytes,6,opt,name=Token,json=token" json:"Token"`
}

func (m *InviteEmail) Reset()                    { *m = InviteEmail{} }
func (m *InviteEmail) String() string            { return proto.CompactTextString(m) }
func (*InviteEmail) ProtoMessage()               {}
func (*InviteEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *InviteEmail) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *InviteEmail) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *InviteEmail) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *InviteEmail) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *InviteEmail) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

func (m *InviteEmail) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ResetPasswordEmail struct {
	From string `protobuf:"bytes,1,opt,name=From,json=from" json:"From"`
	To   string `protobuf:"bytes,2,opt,name=To,json=to" json:"To"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn string `protobuf:"bytes,6,opt,name=ExpiredIn,json=expiredIn" json:"ExpiredIn"`
	Token     string `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token"`
	AccountId string `protobuf:"bytes,4,opt,name=AccountId,json=accountId" json:"AccountId"`
	AgentId   string `protobuf:"bytes,5,opt,name=AgentId,json=agentId" json:"AgentId"`
}

func (m *ResetPasswordEmail) Reset()                    { *m = ResetPasswordEmail{} }
func (m *ResetPasswordEmail) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordEmail) ProtoMessage()               {}
func (*ResetPasswordEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ResetPasswordEmail) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResetPasswordEmail) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ResetPasswordEmail) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

func (m *ResetPasswordEmail) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ResetPasswordEmail) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ResetPasswordEmail) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type PasswordChangedEmail struct {
	From      string `protobuf:"bytes,1,opt,name=From,json=from" json:"From"`
	To        string `protobuf:"bytes,2,opt,name=To,json=to" json:"To"`
	AccountId string `protobuf:"bytes,3,opt,name=AccountId,json=accountId" json:"AccountId"`
	AgentId   string `protobuf:"bytes,4,opt,name=AgentId,json=agentId" json:"AgentId"`
}

func (m *PasswordChangedEmail) Reset()                    { *m = PasswordChangedEmail{} }
func (m *PasswordChangedEmail) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangedEmail) ProtoMessage()               {}
func (*PasswordChangedEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PasswordChangedEmail) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PasswordChangedEmail) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *PasswordChangedEmail) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *PasswordChangedEmail) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func init() {
	proto.RegisterType((*Agent)(nil), "account.Agent")
	proto.RegisterType((*Invitation)(nil), "account.Invitation")
	proto.RegisterType((*AgentGroup)(nil), "account.AgentGroup")
	proto.RegisterType((*AgentStateUpdateRequest)(nil), "account.AgentStateUpdateRequest")
	proto.RegisterType((*AccountStateUpdateRequest)(nil), "account.AccountStateUpdateRequest")
	proto.RegisterType((*ResetPasswordRequest)(nil), "account.ResetPasswordRequest")
	proto.RegisterType((*UpdatePlanRequest)(nil), "account.UpdatePlanRequest")
	proto.RegisterType((*AgentPerm)(nil), "account.AgentPerm")
	proto.RegisterType((*OELimitUpdated)(nil), "account.OELimitUpdated")
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*Id)(nil), "account.Id")
	proto.RegisterType((*AgentIds)(nil), "account.AgentIds")
	proto.RegisterType((*Ids)(nil), "account.Ids")
	proto.RegisterType((*Empty)(nil), "account.Empty")
	proto.RegisterType((*ListAgentRequest)(nil), "account.ListAgentRequest")
	proto.RegisterType((*ListGroupRequest)(nil), "account.ListGroupRequest")
	proto.RegisterType((*GroupMember)(nil), "account.GroupMember")
	proto.RegisterType((*CreateAccountRequest)(nil), "account.CreateAccountRequest")
	proto.RegisterType((*LoginRequest)(nil), "account.LoginRequest")
	proto.RegisterType((*Agents)(nil), "account.Agents")
	proto.RegisterType((*NewPassword)(nil), "account.NewPassword")
	proto.RegisterType((*Limit)(nil), "account.Limit")
	proto.RegisterType((*AgentGroups)(nil), "account.AgentGroups")
	proto.RegisterType((*Token)(nil), "account.Token")
	proto.RegisterType((*ConfirmEmail)(nil), "account.ConfirmEmail")
	proto.RegisterType((*InviteEmail)(nil), "account.InviteEmail")
	proto.RegisterType((*ResetPasswordEmail)(nil), "account.ResetPasswordEmail")
	proto.RegisterType((*PasswordChangedEmail)(nil), "account.PasswordChangedEmail")
	proto.RegisterEnum("account.AccountState", AccountState_name, AccountState_value)
	proto.RegisterEnum("account.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("account.AgentState", AgentState_name, AgentState_value)
	proto.RegisterEnum("account.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountMgr service

type AccountMgrClient interface {
	// Account methods
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Id, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error)
	ReadAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error)
	UpdateAccountState(ctx context.Context, in *AccountStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error)
	ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	// Agent methods
	ReadAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error)
	InviteAgent(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Id, error)
	UninviteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	AcceptInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RejectInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgentState(ctx context.Context, in *AgentStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Empty, error)
	RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*Empty, error)
	ReadAgentPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*auth.Method, error)
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error)
	BatchRead(ctx context.Context, in *AgentIds, opts ...grpc.CallOption) (*Agents, error)
	ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*Agents, error)
	// AgentGroup methods
	CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error)
	UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListGroups(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*AgentGroups, error)
	RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
	AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error)
	ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error)
}

type accountMgrClient struct {
	cc *grpc.ClientConn
}

func NewAccountMgrClient(cc *grpc.ClientConn) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccountState(ctx context.Context, in *AccountStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdatePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ConfirmAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/InviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UninviteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UninviteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AcceptInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RejectInvitation(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RejectInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentState(ctx context.Context, in *AgentStateUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgentState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ResetPassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RequestResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentPermission(ctx context.Context, in *AgentPerm, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadAgentPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*auth.Method, error) {
	out := new(auth.Method)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadAgentPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CheckLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) BatchRead(ctx context.Context, in *AgentIds, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AccountMgr/BatchRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/account.AccountMgr/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RemoveAgentFromGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/RemoveAgentFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AddAgentToGroup(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/account.AccountMgr/AddAgentToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := grpc.Invoke(ctx, "/account.AccountMgr/ReadGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountMgr service

type AccountMgrServer interface {
	// Account methods
	CreateAccount(context.Context, *CreateAccountRequest) (*Id, error)
	UpdateAccount(context.Context, *Account) (*Empty, error)
	ReadAccount(context.Context, *Id) (*Account, error)
	UpdateAccountState(context.Context, *AccountStateUpdateRequest) (*Empty, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*Empty, error)
	ConfirmAccount(context.Context, *Token) (*Empty, error)
	// Agent methods
	ReadAgent(context.Context, *Id) (*Agent, error)
	InviteAgent(context.Context, *Invitation) (*Id, error)
	UninviteAgent(context.Context, *Id) (*Empty, error)
	AcceptInvitation(context.Context, *Token) (*Empty, error)
	RejectInvitation(context.Context, *Token) (*Empty, error)
	UpdateAgent(context.Context, *Agent) (*Empty, error)
	UpdateAgentState(context.Context, *AgentStateUpdateRequest) (*Empty, error)
	ResetPassword(context.Context, *NewPassword) (*Empty, error)
	RequestResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error)
	UpdateAgentPermission(context.Context, *AgentPerm) (*Empty, error)
	ReadAgentPermission(context.Context, *Id) (*auth.Method, error)
	CheckLogin(context.Context, *LoginRequest) (*Id, error)
	BatchRead(context.Context, *AgentIds) (*Agents, error)
	ListAgents(context.Context, *ListAgentRequest) (*Agents, error)
	// AgentGroup methods
	CreateGroup(context.Context, *AgentGroup) (*Id, error)
	UpdateGroup(context.Context, *AgentGroup) (*Empty, error)
	DeleteGroup(context.Context, *Id) (*Empty, error)
	ListGroups(context.Context, *ListGroupRequest) (*AgentGroups, error)
	RemoveAgentFromGroup(context.Context, *GroupMember) (*Empty, error)
	AddAgentToGroup(context.Context, *GroupMember) (*Empty, error)
	ReadGroup(context.Context, *Id) (*AgentGroup, error)
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccountState(ctx, req.(*AccountStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*Invitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UninviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UninviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UninviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UninviteAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RejectInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RejectInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RejectInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RejectInvitation(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentState(ctx, req.(*AgentStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ResetPassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPerm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentPermission(ctx, req.(*AgentPerm))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadAgentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadAgentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadAgentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadAgentPermission(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_BatchRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).BatchRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/BatchRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).BatchRead(ctx, req.(*AgentIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*ListAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RemoveAgentFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/RemoveAgentFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AddAgentToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/AddAgentToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountMgr/ReadGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "ReadAccount",
			Handler:    _AccountMgr_ReadAccount_Handler,
		},
		{
			MethodName: "UpdateAccountState",
			Handler:    _AccountMgr_UpdateAccountState_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _AccountMgr_UpdatePlan_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "ReadAgent",
			Handler:    _AccountMgr_ReadAgent_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "UninviteAgent",
			Handler:    _AccountMgr_UninviteAgent_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "RejectInvitation",
			Handler:    _AccountMgr_RejectInvitation_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "UpdateAgentState",
			Handler:    _AccountMgr_UpdateAgentState_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AccountMgr_ResetPassword_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AccountMgr_RequestResetPassword_Handler,
		},
		{
			MethodName: "UpdateAgentPermission",
			Handler:    _AccountMgr_UpdateAgentPermission_Handler,
		},
		{
			MethodName: "ReadAgentPermission",
			Handler:    _AccountMgr_ReadAgentPermission_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _AccountMgr_CheckLogin_Handler,
		},
		{
			MethodName: "BatchRead",
			Handler:    _AccountMgr_BatchRead_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "RemoveAgentFromGroup",
			Handler:    _AccountMgr_RemoveAgentFromGroup_Handler,
		},
		{
			MethodName: "AddAgentToGroup",
			Handler:    _AccountMgr_AddAgentToGroup_Handler,
		},
		{
			MethodName: "ReadGroup",
			Handler:    _AccountMgr_ReadGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}

func init() { proto.RegisterFile("account/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xef, 0x72, 0xdb, 0xc6,
	0x11, 0x27, 0x41, 0x02, 0x24, 0x17, 0x24, 0x75, 0x3a, 0x49, 0x16, 0xcc, 0xc6, 0x1d, 0x15, 0xe3,
	0x49, 0x55, 0xc5, 0x23, 0xd5, 0x8a, 0x3b, 0x6d, 0x3d, 0x93, 0x36, 0xb2, 0x23, 0x3b, 0xf4, 0x48,
	0x89, 0x07, 0x96, 0x3e, 0xb7, 0x10, 0x71, 0xa2, 0x60, 0x81, 0x00, 0x0b, 0x80, 0xb2, 0xe4, 0xe9,
	0x13, 0xf4, 0x01, 0xfa, 0x31, 0xfd, 0xd2, 0xbe, 0x48, 0xdf, 0xa2, 0x0f, 0xd0, 0xb7, 0xe8, 0x87,
	0xce, 0xfd, 0xc5, 0x01, 0x44, 0xa4, 0xa8, 0x93, 0x7e, 0x11, 0x74, 0x7b, 0xfb, 0xef, 0x76, 0x7f,
	0x7b, 0xb7, 0x4b, 0xd8, 0xf0, 0x27, 0x93, 0x64, 0x11, 0xe7, 0x7b, 0xe2, 0xbb, 0x3b, 0x4f, 0x93,
	0x3c, 0xc1, 0x1d, 0xb1, 0x1c, 0xfd, 0xea, 0x2c, 0xcc, 0xcf, 0x16, 0x93, 0x4b, 0x92, 0xef, 0x26,
	0xe9, 0x74, 0x2f, 0x5b, 0x9c, 0x85, 0x1f, 0xf7, 0x32, 0x92, 0x5e, 0x85, 0x13, 0x92, 0xcd, 0xc9,
	0x64, 0x8f, 0xf1, 0xef, 0xf9, 0x8b, 0xfc, 0x82, 0xfd, 0xe1, 0xf2, 0xee, 0xbf, 0xdb, 0x60, 0x1e,
	0x4c, 0x49, 0x9c, 0xe3, 0x21, 0x18, 0xe3, 0xc0, 0x69, 0x6e, 0x35, 0xb7, 0x7b, 0x9e, 0x11, 0x06,
	0xf8, 0x13, 0xe8, 0x1d, 0x70, 0xdd, 0xe3, 0xc0, 0x31, 0x18, 0xb9, 0xe7, 0x4b, 0x02, 0x1e, 0x41,
	0xf7, 0xd5, 0x22, 0x8a, 0xbe, 0xf1, 0x67, 0xc4, 0x69, 0xb1, 0xcd, 0xee, 0xb9, 0x58, 0xe3, 0x75,
	0x30, 0x0f, 0x67, 0x7e, 0x18, 0x39, 0x26, 0xdb, 0x30, 0x09, 0x5d, 0x60, 0x07, 0x3a, 0xe3, 0xec,
	0xdb, 0x0f, 0x31, 0x49, 0x1d, 0x6b, 0xab, 0xb9, 0xdd, 0xf5, 0x3a, 0x21, 0x5f, 0x52, 0x5d, 0x6f,
	0x92, 0xb3, 0x93, 0x30, 0x8f, 0x88, 0xd3, 0xe1, 0xba, 0xde, 0x8b, 0x35, 0xfe, 0x39, 0x58, 0xaf,
	0x49, 0x1c, 0x90, 0xd4, 0xe9, 0x6e, 0x35, 0xb7, 0x87, 0xfb, 0x2b, 0xbb, 0xf2, 0xfc, 0x9c, 0xec,
	0x59, 0x53, 0xf6, 0x65, 0xee, 0x5e, 0xf9, 0xb9, 0x9f, 0x9e, 0xa6, 0x91, 0xd3, 0x13, 0xee, 0x4a,
	0x02, 0x35, 0x71, 0xe4, 0xc7, 0xd3, 0x85, 0x3f, 0x25, 0x0e, 0x70, 0x13, 0x91, 0x58, 0xb3, 0xbd,
	0x64, 0xe2, 0xe7, 0x61, 0x12, 0x3b, 0x6b, 0x62, 0x4f, 0xac, 0xe9, 0xde, 0x49, 0x38, 0x23, 0x1f,
	0x93, 0x98, 0x38, 0x36, 0xdf, 0xcb, 0xc5, 0x1a, 0x3f, 0x81, 0xd5, 0xc3, 0x78, 0x92, 0xde, 0xcc,
	0x73, 0x12, 0xbc, 0xf5, 0xb3, 0xec, 0x43, 0x92, 0x06, 0x4e, 0x9f, 0x31, 0xad, 0x92, 0xea, 0x06,
	0xfe, 0x29, 0xc0, 0x9b, 0x24, 0x8c, 0x49, 0x40, 0xf5, 0x39, 0x03, 0xc6, 0x06, 0xef, 0x15, 0x05,
	0xef, 0x00, 0x1a, 0xc7, 0x57, 0x61, 0x4e, 0x82, 0x17, 0x37, 0x2c, 0x21, 0xe3, 0xc0, 0x19, 0x32,
	0x2e, 0x14, 0x56, 0xe8, 0xf8, 0x17, 0x60, 0xbe, 0xcb, 0xfd, 0x9c, 0x38, 0x2b, 0x2c, 0x26, 0x6b,
	0x2a, 0x26, 0x8c, 0x81, 0x6d, 0x79, 0x66, 0x46, 0x3f, 0xf8, 0x37, 0xb0, 0x79, 0xe4, 0x67, 0xb9,
	0x74, 0xe3, 0xe5, 0x85, 0x1f, 0x4f, 0x85, 0x0f, 0x88, 0x69, 0xdf, 0x8c, 0xea, 0xb7, 0xb1, 0x0b,
	0x7d, 0x2a, 0xf9, 0x8e, 0x90, 0x98, 0xb1, 0xaf, 0x32, 0xf6, 0x7e, 0xa4, 0xd1, 0xf0, 0x36, 0xac,
	0x50, 0x9e, 0xd3, 0x79, 0xe0, 0xe7, 0x42, 0x2b, 0x66, 0x6c, 0x2b, 0x51, 0x99, 0xec, 0x7e, 0x67,
	0x00, 0xb0, 0xf3, 0xf1, 0xb8, 0xde, 0x0f, 0x6c, 0x0f, 0xc0, 0x7a, 0x95, 0x26, 0xb3, 0x71, 0x20,
	0xa0, 0x66, 0x9d, 0xb3, 0x55, 0x01, 0xb4, 0x76, 0x05, 0x68, 0x32, 0x80, 0x1c, 0x80, 0x1d, 0x5f,
	0xc4, 0x6d, 0x04, 0xdd, 0x77, 0x24, 0xce, 0x99, 0x9f, 0x02, 0x68, 0x99, 0x58, 0x53, 0x0f, 0x3c,
	0x32, 0x8f, 0x6e, 0xd8, 0x66, 0x97, 0x7b, 0x90, 0x4a, 0x02, 0x7e, 0x0c, 0x03, 0xa6, 0x53, 0x61,
	0x9e, 0x23, 0x6c, 0xe0, 0xeb, 0x44, 0xc5, 0xa5, 0xd0, 0x0c, 0x1a, 0x97, 0x24, 0x52, 0xaf, 0x4f,
	0x92, 0x4b, 0x12, 0x0b, 0x40, 0x99, 0x39, 0x5d, 0xb8, 0x7f, 0x69, 0x02, 0x30, 0xe1, 0xd7, 0x69,
	0xb2, 0x98, 0xdf, 0x33, 0x40, 0x18, 0xda, 0x5a, 0x25, 0xb6, 0x63, 0xea, 0x8c, 0x03, 0x9d, 0xa3,
	0x64, 0x9a, 0xd0, 0x72, 0xe0, 0xe1, 0xe9, 0x44, 0x7c, 0x89, 0xb7, 0xc0, 0x7e, 0x99, 0x12, 0x95,
	0x31, 0x8b, 0xed, 0xda, 0x93, 0x82, 0xe4, 0xfe, 0x19, 0x36, 0x0b, 0x28, 0xf1, 0x34, 0x7a, 0xe4,
	0x4f, 0x0b, 0x92, 0xe5, 0x65, 0x47, 0x9a, 0x55, 0x47, 0xb4, 0xd8, 0x1b, 0xe5, 0xd8, 0x2b, 0xcc,
	0xb6, 0xee, 0xc2, 0xac, 0x7b, 0x0e, 0x0f, 0x85, 0x89, 0x7b, 0xdb, 0xff, 0x4c, 0x5a, 0x31, 0x98,
	0x95, 0x8d, 0xc2, 0x8a, 0xa6, 0x50, 0xda, 0x79, 0x02, 0xeb, 0x1e, 0xc9, 0x88, 0x42, 0xbf, 0x34,
	0xa1, 0x60, 0x65, 0x68, 0xb0, 0x72, 0x0f, 0x61, 0x95, 0x7b, 0xf2, 0x36, 0xf2, 0xe3, 0x1f, 0xe6,
	0x0d, 0x86, 0x36, 0x65, 0x66, 0x7a, 0x4c, 0xaf, 0x3d, 0x8f, 0xfc, 0xd8, 0x0d, 0xa1, 0xc7, 0x4e,
	0xfc, 0x96, 0xa4, 0xb3, 0xff, 0x39, 0x98, 0x8f, 0xc1, 0x3a, 0x26, 0xf9, 0x45, 0xc2, 0x0b, 0xc2,
	0xde, 0xef, 0xef, 0xb2, 0x2b, 0x9d, 0xd3, 0x3c, 0x6b, 0xc6, 0xbe, 0xee, 0x09, 0x0c, 0xbf, 0x3d,
	0x3c, 0x0a, 0x67, 0xa1, 0xac, 0xc4, 0x3b, 0xec, 0x3d, 0x06, 0x93, 0x71, 0x33, 0x6b, 0xf6, 0xfe,
	0x50, 0x05, 0x8f, 0x51, 0x3d, 0x33, 0xa2, 0x1f, 0xf7, 0xaf, 0x06, 0x74, 0x84, 0x92, 0x25, 0x94,
	0x4a, 0x1c, 0x1a, 0x1a, 0x0e, 0x65, 0x10, 0x5a, 0x45, 0x10, 0x6e, 0xc1, 0xa6, 0x03, 0x1d, 0xf6,
	0x28, 0x14, 0xc5, 0x9b, 0xf0, 0x65, 0x91, 0x5a, 0xeb, 0xee, 0xd4, 0x56, 0x21, 0xde, 0x59, 0x82,
	0x38, 0xad, 0xd5, 0x97, 0x49, 0x7c, 0x1e, 0xa6, 0x33, 0xc1, 0xc3, 0x6b, 0x7e, 0x30, 0xd1, 0x89,
	0xf4, 0x56, 0xa6, 0x17, 0xdc, 0x71, 0x12, 0x84, 0xe7, 0xa1, 0x60, 0xe4, 0xa5, 0x8f, 0xa2, 0x0a,
	0xdd, 0xdd, 0xa7, 0xc1, 0xb8, 0x23, 0xc4, 0x3c, 0x60, 0x86, 0x0c, 0x98, 0xfb, 0x1c, 0xba, 0x22,
	0xc5, 0xd9, 0x1d, 0x92, 0x08, 0x5a, 0xe3, 0x20, 0x73, 0x8c, 0xad, 0xd6, 0x76, 0xcf, 0x6b, 0x85,
	0x41, 0xe6, 0x6e, 0x32, 0x8a, 0xdc, 0x68, 0x16, 0x1b, 0x1d, 0x8a, 0xdf, 0x79, 0x7e, 0xe3, 0x7e,
	0x04, 0x74, 0x14, 0x66, 0x39, 0xb3, 0xf0, 0x83, 0xeb, 0xf7, 0x5d, 0xee, 0xa7, 0x1a, 0xe4, 0x32,
	0xbe, 0xa4, 0x45, 0xc1, 0xc1, 0xc1, 0xf3, 0xc8, 0xc1, 0x40, 0xf9, 0xd9, 0x7d, 0x35, 0x0e, 0x64,
	0x22, 0xa7, 0x7c, 0xe9, 0xfe, 0x91, 0xdb, 0x66, 0xbb, 0xff, 0x17, 0xdb, 0xee, 0x1f, 0xc0, 0x66,
	0xda, 0x8f, 0xc9, 0xec, 0x4c, 0x34, 0x00, 0xb7, 0x2a, 0x97, 0x8e, 0x1a, 0x25, 0x47, 0xf5, 0x2a,
	0x6b, 0x95, 0xaa, 0xcc, 0xfd, 0x67, 0x13, 0xd6, 0x39, 0x8a, 0x84, 0x62, 0x79, 0x0e, 0xbd, 0xf9,
	0x69, 0x7e, 0x5f, 0xf3, 0xd3, 0xd2, 0xdf, 0x24, 0xbd, 0xff, 0x68, 0x2f, 0xf7, 0x1f, 0xaa, 0x7d,
	0xe0, 0x98, 0xef, 0xce, 0x65, 0xd7, 0xb0, 0x05, 0xb6, 0xb0, 0xcd, 0x8c, 0x89, 0xab, 0xda, 0x2f,
	0x48, 0xb4, 0xaf, 0x10, 0x1c, 0xb4, 0x9a, 0x38, 0xd0, 0xc1, 0x57, 0x14, 0xf7, 0x4b, 0xe8, 0x1f,
	0x25, 0xd3, 0x30, 0x5e, 0xba, 0xdc, 0x9a, 0x15, 0xff, 0x94, 0x0f, 0x46, 0xd9, 0x07, 0xf7, 0x97,
	0x60, 0xb1, 0x00, 0x65, 0xf8, 0x53, 0xf9, 0x1f, 0x43, 0x9b, 0x7e, 0x43, 0x70, 0x88, 0x59, 0x2c,
	0x72, 0x99, 0x7b, 0x08, 0xf6, 0x37, 0xe4, 0x83, 0x6a, 0x7d, 0xd4, 0x83, 0xd7, 0xd4, 0x1e, 0x3c,
	0x7a, 0x34, 0x8d, 0x49, 0x58, 0xb5, 0xe3, 0x82, 0xe4, 0xfe, 0xab, 0x29, 0xf2, 0xce, 0xca, 0xf9,
	0xc2, 0xcf, 0xbf, 0x0e, 0xb3, 0x3c, 0x49, 0x6f, 0xc4, 0x7d, 0x6a, 0x4f, 0x0a, 0x12, 0xe5, 0x38,
	0xf6, 0xaf, 0x4f, 0xd2, 0x70, 0x3a, 0x25, 0x69, 0x26, 0x80, 0x62, 0xcf, 0x0a, 0x12, 0xc5, 0xc7,
	0xb1, 0x7f, 0x2d, 0xfc, 0x6f, 0xb3, 0xfd, 0xde, 0x4c, 0x12, 0xf0, 0xa7, 0x30, 0x94, 0xbb, 0x0c,
	0x27, 0x19, 0x4b, 0x85, 0xe9, 0x0d, 0x67, 0x25, 0x2a, 0xbd, 0x10, 0x24, 0xdf, 0x38, 0x3e, 0x60,
	0x44, 0x96, 0x15, 0xd3, 0x43, 0xb3, 0x0a, 0x9d, 0x06, 0xf5, 0xd8, 0xbf, 0xf6, 0x16, 0x11, 0xc9,
	0x58, 0x62, 0x4c, 0xaf, 0x3b, 0x13, 0x6b, 0xf7, 0x39, 0xd8, 0xba, 0xda, 0xcf, 0xc0, 0x12, 0x66,
	0x79, 0x64, 0x2b, 0xcf, 0x23, 0xaf, 0x22, 0x8b, 0x41, 0x36, 0x73, 0x1f, 0x89, 0x78, 0xd6, 0x07,
	0xd6, 0xfd, 0xae, 0x09, 0x7d, 0x71, 0xb5, 0xb1, 0x4c, 0xd3, 0x1b, 0x98, 0xb6, 0x4f, 0x82, 0xab,
	0x4d, 0x9b, 0x27, 0x7a, 0x11, 0x9d, 0x24, 0xf2, 0x22, 0xca, 0x93, 0x72, 0xf5, 0xb4, 0x6a, 0xaa,
	0x47, 0xde, 0xca, 0xed, 0xf2, 0xad, 0xac, 0x5c, 0x30, 0xf5, 0xdc, 0x7e, 0x02, 0xbd, 0xc3, 0xeb,
	0x79, 0x98, 0x92, 0x60, 0x1c, 0x0b, 0xd0, 0xf6, 0x88, 0x24, 0xb8, 0x7f, 0x6b, 0x82, 0xcd, 0x7b,
	0xdd, 0x1f, 0xcb, 0x3f, 0xde, 0xd8, 0x05, 0x9a, 0x83, 0xb4, 0xb1, 0x63, 0xeb, 0xb2, 0x2f, 0x66,
	0xc5, 0x97, 0xc2, 0x7f, 0x4b, 0x0f, 0xe1, 0xdf, 0x9b, 0x80, 0x4b, 0xad, 0xc1, 0xbd, 0x1c, 0xfd,
	0xfe, 0xa3, 0x17, 0xe6, 0x5a, 0x95, 0x70, 0x15, 0x87, 0x6b, 0xdf, 0xd2, 0x06, 0x94, 0xfb, 0x59,
	0x37, 0x85, 0xf5, 0x4a, 0xe7, 0xfe, 0x23, 0x26, 0x5c, 0xda, 0x6c, 0x97, 0x6c, 0xee, 0x3c, 0x87,
	0xbe, 0xfe, 0xe0, 0xe2, 0x15, 0xb0, 0x4f, 0x63, 0xf5, 0x68, 0xa2, 0x06, 0x1e, 0x50, 0xc5, 0x79,
	0x78, 0x45, 0x5f, 0x5a, 0xd4, 0xc4, 0x00, 0xd6, 0x51, 0x32, 0xb9, 0x24, 0x01, 0x32, 0x76, 0xbe,
	0x92, 0xc3, 0x1c, 0xee, 0x81, 0x79, 0x1a, 0x67, 0x24, 0x47, 0x0d, 0xdc, 0x85, 0xf6, 0xb1, 0x1f,
	0x11, 0xce, 0xfa, 0x8a, 0xcc, 0xe8, 0xff, 0x06, 0xee, 0x43, 0xf7, 0x45, 0x98, 0x91, 0xeb, 0x85,
	0x1f, 0xa1, 0x16, 0xb6, 0xa1, 0x73, 0x20, 0x16, 0xed, 0x9d, 0x2f, 0x45, 0xa3, 0xcc, 0xed, 0xdb,
	0xd0, 0x79, 0x4b, 0xe2, 0x20, 0x8c, 0xa7, 0xa8, 0x41, 0x35, 0x30, 0xdb, 0x54, 0x5b, 0x1f, 0xba,
	0xe3, 0xd8, 0xe7, 0x2b, 0x83, 0xb2, 0x7d, 0x45, 0x22, 0x42, 0x7d, 0x6a, 0xed, 0xfc, 0xa3, 0x0d,
	0xe6, 0xe1, 0x15, 0x1d, 0x7a, 0x37, 0x60, 0xb5, 0x28, 0x30, 0xc9, 0xd0, 0xc0, 0x18, 0x86, 0x8c,
	0x7c, 0x44, 0xce, 0xf9, 0x16, 0x6a, 0xe2, 0x75, 0x40, 0xa2, 0xb9, 0xa7, 0x33, 0x1b, 0xa7, 0x1a,
	0x65, 0x05, 0xa2, 0xcd, 0x42, 0xad, 0x32, 0x59, 0x74, 0x22, 0xa8, 0x8d, 0x11, 0xf4, 0x19, 0x59,
	0x20, 0x04, 0x99, 0x8a, 0x22, 0x45, 0x2d, 0x45, 0x91, 0x52, 0x1d, 0xa5, 0x4c, 0xeb, 0x86, 0x03,
	0xd4, 0xc5, 0x23, 0x78, 0xa0, 0x3a, 0xc9, 0x30, 0xcb, 0xc2, 0x24, 0x96, 0x7b, 0x3d, 0xbc, 0x2a,
	0x26, 0x11, 0x8f, 0xbc, 0x27, 0x13, 0x4a, 0x02, 0x45, 0x3a, 0x98, 0x4c, 0x08, 0x9d, 0x4c, 0x91,
	0xad, 0x8e, 0x79, 0x1a, 0x8b, 0x11, 0x13, 0xf5, 0x95, 0x79, 0x31, 0x8c, 0xa2, 0x01, 0xe3, 0x12,
	0xef, 0x89, 0xd0, 0x3f, 0xd4, 0x68, 0xd2, 0xcd, 0x15, 0xfc, 0x00, 0xb0, 0xa0, 0xd1, 0x7e, 0x4f,
	0xf2, 0x22, 0xbc, 0x09, 0x6b, 0xcb, 0xed, 0x7c, 0x80, 0x56, 0xb5, 0x0d, 0xbd, 0x49, 0x45, 0x18,
	0x3f, 0x84, 0x0d, 0xa9, 0x9d, 0x03, 0x4b, 0x3c, 0x5e, 0x68, 0x0d, 0xff, 0x04, 0x36, 0xbf, 0xf6,
	0xe3, 0x20, 0x22, 0xaa, 0xc8, 0xe4, 0x4c, 0x89, 0xd6, 0x35, 0x85, 0xfa, 0xfd, 0x87, 0x36, 0xf0,
	0x23, 0x35, 0x51, 0x2c, 0x57, 0x35, 0xfa, 0x99, 0xe6, 0xb9, 0x76, 0x2d, 0xa1, 0x07, 0xfb, 0xff,
	0xb1, 0xd5, 0xe3, 0x7a, 0x3c, 0x4d, 0xf1, 0x17, 0x30, 0x28, 0xb5, 0x03, 0xf8, 0x91, 0xba, 0xa5,
	0xeb, 0xda, 0x84, 0x91, 0xad, 0xb6, 0xc7, 0x81, 0xdb, 0xc0, 0x9f, 0xc3, 0x80, 0x1f, 0x51, 0x8a,
	0xa3, 0x6a, 0x0b, 0x3b, 0x2a, 0x1e, 0x54, 0xde, 0xc0, 0x35, 0xf0, 0x2e, 0xd8, 0x1e, 0xf1, 0x03,
	0x29, 0xa2, 0xab, 0x1c, 0x2d, 0xc9, 0xbb, 0x0d, 0xfc, 0x06, 0x70, 0xc9, 0x08, 0x2f, 0x12, 0xb7,
	0xb6, 0x59, 0x2e, 0x0d, 0x56, 0x35, 0xb6, 0x9f, 0x03, 0x14, 0x13, 0x0f, 0x1e, 0xa9, 0xfd, 0xa5,
	0x31, 0xa8, 0x46, 0x76, 0x1f, 0x86, 0x22, 0x07, 0x6a, 0x56, 0x50, 0x3c, 0xec, 0x06, 0xac, 0x91,
	0xd9, 0xa1, 0x23, 0xb8, 0x1f, 0xf0, 0x9f, 0xa3, 0x4a, 0x27, 0xad, 0x34, 0x1a, 0x6e, 0x03, 0x3f,
	0x95, 0x4f, 0x08, 0xe7, 0x2e, 0xde, 0xcb, 0x02, 0x10, 0xd5, 0xf8, 0xef, 0xc2, 0x40, 0x02, 0xfd,
	0x56, 0x13, 0xd2, 0x9d, 0x67, 0x80, 0x78, 0xad, 0xe8, 0xbf, 0x5b, 0xdc, 0x79, 0x88, 0x67, 0x80,
	0x78, 0xd1, 0xdd, 0x4b, 0x6a, 0x0f, 0x6c, 0x91, 0x36, 0xfe, 0x5b, 0x5c, 0xf9, 0xbc, 0x35, 0x02,
	0xaf, 0x00, 0x69, 0x02, 0x3c, 0xcb, 0x5b, 0x35, 0x33, 0xf5, 0x5d, 0x39, 0xfe, 0x35, 0x0c, 0x4a,
	0x25, 0x81, 0xd7, 0x15, 0x8b, 0xd6, 0x9d, 0xd5, 0x08, 0xbe, 0xa6, 0xc3, 0x33, 0xd3, 0x5a, 0x96,
	0x2f, 0x6a, 0xa2, 0x6e, 0xb6, 0xae, 0x51, 0xf4, 0x05, 0x6c, 0x68, 0x27, 0x29, 0x2e, 0x33, 0x8c,
	0xcb, 0xc7, 0xa1, 0x3b, 0xb5, 0x40, 0x5b, 0x53, 0xa0, 0xd1, 0x84, 0x4b, 0xb9, 0x2d, 0x8d, 0xc7,
	0x4c, 0x06, 0x5e, 0x5e, 0x90, 0xc9, 0x25, 0x6b, 0x8c, 0x71, 0x31, 0x49, 0xea, 0x8d, 0x72, 0x15,
	0x3d, 0x4f, 0xa1, 0xf7, 0xc2, 0xcf, 0x27, 0x17, 0xd4, 0x18, 0x5e, 0x2d, 0xbb, 0x36, 0x0e, 0xb2,
	0xd1, 0x4a, 0x99, 0x94, 0xf1, 0xfa, 0x51, 0xe3, 0x57, 0x86, 0x1f, 0x6a, 0xe3, 0x74, 0x79, 0x26,
	0xab, 0x93, 0x7d, 0x2a, 0x07, 0x58, 0xde, 0x4a, 0xd6, 0xf5, 0x83, 0x55, 0x0f, 0x9f, 0x49, 0x0c,
	0xdd, 0x22, 0xb2, 0x1c, 0xbf, 0x27, 0x60, 0xf3, 0x77, 0x8f, 0x4b, 0xdd, 0x51, 0x13, 0xbf, 0xe7,
	0x47, 0x12, 0x5d, 0x6b, 0xf9, 0x48, 0xfa, 0xa8, 0x37, 0x5a, 0xaf, 0xb1, 0x4e, 0xcf, 0xf5, 0x3b,
	0x0a, 0x9b, 0x59, 0x72, 0xc5, 0xb3, 0x4d, 0xbb, 0x14, 0x6e, 0xb7, 0xe0, 0xd7, 0x66, 0xba, 0x1a,
	0x07, 0x7e, 0x0b, 0x2b, 0x07, 0x01, 0xcf, 0xf6, 0x49, 0x72, 0x3f, 0xd1, 0x3d, 0x7e, 0xbd, 0xd4,
	0x9c, 0xb3, 0x2e, 0x54, 0x6e, 0xe3, 0xcc, 0x62, 0x3f, 0x91, 0x7f, 0xfe, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x3c, 0xab, 0x1e, 0x7b, 0x17, 0x00, 0x00,
}
