syntax = "proto3";

package account;

import "bitbucket.org/subiz/servicespec/proto/auth/auth.proto";

enum AccountState {
	Unconfirmed = 0; // waiting for email confirmation
	Activated = 1;  // normal account
	Locked = 2;  // subiz lock down account
}

service AccountMgr {
	// Account methods
	rpc CreateAccount(CreateAccountRequest) returns (Id) {}
	rpc UpdateAccount(Account) returns (Empty) {}
	rpc ReadAccount(Id) returns (Account) {}
	rpc UpdateAccountState(AccountStateUpdateRequest) returns (Empty) {}
	rpc UpdatePlan(UpdatePlanRequest) returns (Empty) {}
	rpc ConfirmAccount(Token) returns (Empty) {}
	// Agent methods
	rpc ReadAgent(Id) returns (Agent) {}
	rpc InviteAgent(Invitation) returns (Id) {}
	rpc UninviteAgent(Id) returns (Empty) {}
	rpc AcceptInvitation(Token) returns (Empty) {}
	rpc RejectInvitation(Token) returns (Empty) {}
	rpc UpdateAgent(Agent) returns (Empty) {}
	rpc UpdateAgentState(AgentStateUpdateRequest) returns (Empty) {}
	rpc ResetPassword(NewPassword) returns (Empty) {}
	rpc RequestResetPassword(ResetPasswordRequest) returns (Empty) {}
	rpc UpdateAgentPermission(AgentPerm) returns (Empty) {}
	rpc ReadAgentPermission(Id) returns (auth.Method) {}
	rpc CheckLogin(LoginRequest) returns (Id) {}
	rpc BatchRead(AgentIds) returns (Agents) {}
	rpc ListAgents(ListAgentRequest) returns (Agents) {}
	// AgentGroup methods
	rpc CreateGroup(AgentGroup) returns (Id) {}
	rpc UpdateGroup(AgentGroup) returns (Empty) {}
	rpc DeleteGroup(Id) returns (Empty) {}
	rpc ListGroups(ListGroupRequest) returns(AgentGroups) {}
	rpc RemoveAgentFromGroup(GroupMember) returns (Empty) {}
	rpc AddAgentToGroup(GroupMember) returns (Empty) {}
	rpc ReadGroup(Id) returns (AgentGroup) {}
}

message Agent {
	string Id = 1;
	string AccountId = 2;
	string FullName = 3;
	string Email = 5;
	bool IsOwner = 6;
	string JobTitle = 7;
	Gender Gender = 8;
	string AvatarUrl = 9;
	string Language = 10;
	string Location = 19;
	string Timezone = 11;
	string EncryptedPassword = 12;
  string JoinedTime = 13;
	string InvitedByAgentId = 14;
  AgentState State = 15;
	string LastPasswordChangedTime = 16;
	string LastSeenTime = 17;
	string LastUpdatedTime = 18;
}

message Invitation {
	string Id = 1;
	string AccountId = 2;
	string FromId = 3;
	string Email = 4;
	string AgentId = 5;

	string SentTime = 7;
	string ReplyTime = 8;
	string AgentFullName = 9;
	string AgentJobTitle = 10;

	// Token to very
	string Token = 11;
}

message AgentGroup {
	string Id = 1;
	string AccountId = 2;
	string Name = 3;
	string LogoUrl = 4;

	// Members is list of 10 agents in group
	// repeated string Members = 5;
	string CreatedTime = 6;
}

message AgentStateUpdateRequest {
	string AccountId = 1;
	string AgentId = 2;
	AgentState State = 3;
}

message AccountStateUpdateRequest {
	string AccountId = 1;
	AccountState State = 2;
}

message ResetPasswordRequest {
	string Email = 2;
}

message UpdatePlanRequest {
	string AccountId = 1;
	int32 Plan = 2;
}

message AgentPerm {
	string AccountId = 1;
	string AgentId = 2;
	auth.Method Method = 3;
}

message OELimitUpdated {
	string AccountId = 1;
	Limit Limit = 2;
}

message Account {
	string Id = 1;
	string Name = 2;
	int32 Plan = 3;
	string LogoUrl = 4;
	string OwnerId = 5;
	AccountState State = 6;
	string CreatedTime = 7;
	string ConfirmedTime = 8;
	string LastModifiedTime = 9;
}

message Id {
	string AccountId = 1;
	string Id = 2;
}

message AgentIds {
	string AccountId = 1;
	repeated string Ids = 2;
}

message Ids {
	repeated string Ids = 1;
}

message Empty {}

message ListAgentRequest {
	string AccountId = 1;
	string StartId = 2;
	int32 Limit = 3;
	string GroupId = 4; // optional
}

message ListGroupRequest {
	string AccountId = 1;
	string StartId = 2;
	int32 Limit = 3;
}

message GroupMember {
	string AccountId = 1;
	string GroupId = 2;
	string AgentId = 3;
}

message CreateAccountRequest {
	string FullName = 1;
	string Email = 3;
	string Language = 4;
	string Password = 5;
	string AccountName = 6;
	string AccountUrl = 7;
}

enum Gender {
	Unset = 0;
	Male = 1;
	Female = 2;
	Bisexual = 3;
	Asexual = 4;
}

enum AgentState {
	Pending = 0; // waiting for invitation response
  Active = 1;
	Inactive = 2;
	Deleted = 3;
}

message LoginRequest {
	string Email = 1;
	string Password = 2;
}

message Agents {
	repeated Agent Agents = 1;
}

message NewPassword {
	string Token = 1;
	string NewPassword = 2;
}

message Limit {
	//int32 ConcurrentChat = 1;
	int32 ChatHistory = 2;
	int32 MaxTriggers = 3;
	int32 MaxAgents = 4;

	int32 MaxAgentGroups = 5;
	int32 MaxAgentInAGroup = 6;
	int32 MaxRules = 7;
}

message AgentGroups {
	repeated AgentGroup Groups = 1;
}

message Token {
	string Token = 1;
}

enum Event {
	AgentGroupDeleted = 0; // id
	AgentLeftGroup = 1; // groupmember
	AgentJoinedGroup = 2; // groupmember
	AgentGroupUpdated = 3; // agentgroup
	AgentGroupCreated = 4; // agentgroup
	AgentExpired = 5; // oe only, id
	AgentUpdated = 6; // agent
	AgentCreated = 7; // agent
	AgentStateUpdated = 8; // could be deleted
	AgentPermissionUpdated = 9; // AgentPerm

	// out event only
	AgentRejected = 10; // id
	AgentAccepted = 11; // id
	AgentUninvited = 12; // id
	AgentInvited = 13; // invitation

	AccountUpdated = 14; // account
	AccountCreated = 15; // account

	AccountPlanUpdated = 16; // account
	AccountStateUpdated = 17; // AccountStateUpdateRequest
	AccountLimitUpdated = 18; // oelimitupdated
	AccountConfirmRequest = 19; // token
	HandleExpiredInvitation = 20;

	AccountConfirmEmail = 21;
	AccountResetPasswordEmail = 33;
	//AccountPasswordChangedEmail = 34;
	AccountInviteEmail = 22;
}

message ConfirmEmail {
	string From = 1;
	string To = 2;
	string AccountId = 3;
	string OwnerId = 4;
	string Token = 5;

	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	string ExpiredIn = 6;
}

message InviteEmail {
	string From = 1;
	string To = 2;
	string AccountId = 3;
	string SenderId = 4;
	string ExpiredIn = 5;
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	string Token = 6;
}

message ResetPasswordEmail {
	string From = 1;
	string To = 2;
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	string ExpiredIn = 6;
	string Token = 3;
	string AccountId = 4;
	string AgentId = 5;
}

message PasswordChangedEmail {
	string From = 1;
	string To = 2;
	string AccountId = 3;
	string AgentId = 4;
}