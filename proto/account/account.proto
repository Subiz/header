syntax = "proto3";

package account;

import "bitbucket.org/subiz/servicespec/proto/common/auth/auth.proto";

enum ErrorCode {
	OK = 0;
	NOTFOUND = 404;
	INVALID = 400;
	UNAUTHORIZED = 401;
	INTERNAL_ERROR = 500;
}

message Account {
	string Id = 1;
	string Name = 2;
	int32 State = 3;
	int32 Plan = 4;
	string LogoUrl = 7;

	string OwnerId = 5;
	bool IsClosed = 6;
}

message Id {string Id = 1;}

message Ids {repeated string Ids = 1;}

message Empty {}

message UpdatePlanRequest {
	string AccountId = 1;
	int32 PlanId = 2;
}

message AgentGroup {
	string Id = 1;
	string Title = 2;
	repeated string AgentIds = 3;
	string Tag = 4;
}

service AccountInfoMgr {
	rpc Create(Account) returns (Id) {}
	rpc Close(Id) returns (Empty) {}
	rpc Open(Id) returns (Empty) {}
	rpc Update(Account) returns (Empty) {}
	rpc Read(Id) returns (Account) {}
	rpc UpdatePlan(UpdatePlanRequest) returns (Empty) {}
	rpc ListLimit(Empty) returns (LimitsResponse) {}
}

service AgentMgr {
	rpc InviteAgent(InviteAgentRequest) returns (Empty) {}
	// delete invitation invoke by agent
	rpc AcceptInvitation(AcceptInvitationRequest) returns (Empty) {}
	rpc UpdateProfile(Agent) returns (Empty) {}
	rpc Read(Id) returns (Agent) {}

	rpc Config(AccAgentConfiguration) returns (Empty) {}
	rpc GrantPermission(UpdatePermissionRequest) returns (Empty) {}
	rpc RevokePermission(UpdatePermissionRequest) returns (Empty) {}

	// List by account
	rpc List(Id) returns (Agents) {}
	rpc Enable(Id) returns (Empty) {}
	rpc Disable(Id) returns (Empty) {}
	rpc Register(Agent) returns (Id) {}

	rpc RequestResetPw(Email) returns (Empty) {}
	// Change password, called by subiz agent || when user first login
	rpc ChangePw(ChangePasswordRequest) returns (Empty) {}

	rpc ResetPW(ChangePasswordRequest) returns (Empty) {}
	rpc Confirm(Id) returns (Empty) {}
	rpc CheckLogin(LoginRequest) returns (Id) {}

	rpc BatchRead(Ids) returns (Agents) {}

	rpc CreateGroup(AgentGroup) returns (Id) {}
	rpc JoinGroup(UpdateGroupRequest) returns (Empty) {}
	rpc LeaveGroup(UpdateGroupRequest) returns (Empty) {}
	rpc DeleteGroup(Id) returns (Empty) {}
	rpc ListGroup(ListGroupAgentRequest) returns(AgentGroups) {}
	rpc ReadGroup(Id) returns (AgentGroup) {}

	rpc ListGroupOfAgent(Id) returns (AgentGroups) {}
}

enum Gender {
	UNSET = 0;
	MALE = 1;
	FEMALE = 2;
	UNKNOWN = 3;
}

message Agent {
	string Id = 1;
	string FirstName = 2;
	string LastName = 3;
	string Email = 4;
	bool IsOwner = 5;
	string AccountId = 6;
	string JobTitle = 7;
	Gender Gender = 8;
	string LastLoginTime = 9;
	string AvatarUrl = 11;
	string Language = 12;
	string Timezone = 13;
	//bool IsVerified = 8;
	bool IsConfirmed = 15;
	auth.Scope Scopes = 17;
	string HashedPassword = 18;

	string JoinDate = 19;
	string InviteFromAgentId = 20;
	bool IsIn = 21;
	// set to true if agent is being invited
	bool IsInviting = 22;
	bool IsDisabled = 23;
}

message LoginRequest {
	string Email = 1;
	string Password = 2;
}

message Agents {
	repeated Agent Agents = 1;
}

message Email {
	string Email = 1;
}

message ChangePasswordRequest {
	string AgentId = 1;
	string Password = 2;
}

message LimitsResponse {
	repeated Limit Limits = 1;
}

message Limit {
	int32 ConcurrentChat = 1;
	int32 ChatHistory = 2;
	int32 MaxTriggers = 3;
	int32 MaxAgents = 4;

	int32 MaxAgentGroups = 5;
	int32 MaxAgentInGroups = 6;
}

message AccAgentConfiguration {
	bool NotificationSound = 1;
	NotificationConfig EmailNoti = 2;
	NotificationConfig DesktopNoti = 3;
	NotificationConfig MobileNoti = 4;
}

message NotificationConfig {
	bool AllActivity = 1;
	bool MaintainenceMessage = 2;
	bool DirectMessage = 3;
	bool News = 4; /* for mobile only */
	bool Nothing = 5;
}

message RegisterTokenExpiredEvent {
	string Email = 1;
}

message AgentGroups {repeated AgentGroups Groups = 1;}

message ListGroupAgentRequest {
	string Keyword = 1;
	string AccountId = 2;
}

message UpdateGroupRequest {
	string GroupId = 1;
	string AgentId = 2;
}

message InviteAgentRequest {
	// id of inviter
	string InviterId = 1;

	// id of account
	string AccountId = 4;

	string AgentEmail = 3;
	string AgentFirstName = 5;
	string AgentLastName = 6;
}

message CancelInvitationRequest {
	string AccountId = 1;
	string AgentEmail = 2;
}

message UpdatePermissionRequest {
	string AccountId = 1;
	string AgentId = 2;
	int32 Scope = 3;
}

message AcceptInvitationRequest {
	string Token = 1;
}
