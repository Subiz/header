// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway/gateway.proto

/*
Package gateway is a generated protocol buffer package.

It is generated from these files:
	gateway/gateway.proto

It has these top-level messages:
	Empty
	UsersPackage
	ChannelPackage
	SubsPackage
*/
package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientType int32

const (
	ClientType_ForAgent   ClientType = 0
	ClientType_ForVisitor ClientType = 1
	ClientType_ForAccount ClientType = 2
)

var ClientType_name = map[int32]string{
	0: "ForAgent",
	1: "ForVisitor",
	2: "ForAccount",
}
var ClientType_value = map[string]int32{
	"ForAgent":   0,
	"ForVisitor": 1,
	"ForAccount": 2,
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UsersPackage struct {
	UserIds   []string `protobuf:"bytes,2,rep,name=UserIds" json:"UserIds,omitempty"`
	Payload   string   `protobuf:"bytes,3,opt,name=Payload" json:"Payload,omitempty"`
	AccountId string   `protobuf:"bytes,4,opt,name=AccountId" json:"AccountId,omitempty"`
}

func (m *UsersPackage) Reset()                    { *m = UsersPackage{} }
func (m *UsersPackage) String() string            { return proto.CompactTextString(m) }
func (*UsersPackage) ProtoMessage()               {}
func (*UsersPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsersPackage) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *UsersPackage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *UsersPackage) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type ChannelPackage struct {
	ChannelId string `protobuf:"bytes,2,opt,name=ChannelId" json:"ChannelId,omitempty"`
	Payload   string `protobuf:"bytes,3,opt,name=Payload" json:"Payload,omitempty"`
	AccountId string `protobuf:"bytes,4,opt,name=AccountId" json:"AccountId,omitempty"`
}

func (m *ChannelPackage) Reset()                    { *m = ChannelPackage{} }
func (m *ChannelPackage) String() string            { return proto.CompactTextString(m) }
func (*ChannelPackage) ProtoMessage()               {}
func (*ChannelPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChannelPackage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelPackage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *ChannelPackage) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type SubsPackage struct {
	UserIds   []string `protobuf:"bytes,2,rep,name=UserIds" json:"UserIds,omitempty"`
	ConnIds   []string `protobuf:"bytes,3,rep,name=ConnIds" json:"ConnIds,omitempty"`
	Payload   string   `protobuf:"bytes,4,opt,name=Payload" json:"Payload,omitempty"`
	AccountId string   `protobuf:"bytes,5,opt,name=AccountId" json:"AccountId,omitempty"`
}

func (m *SubsPackage) Reset()                    { *m = SubsPackage{} }
func (m *SubsPackage) String() string            { return proto.CompactTextString(m) }
func (*SubsPackage) ProtoMessage()               {}
func (*SubsPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubsPackage) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SubsPackage) GetConnIds() []string {
	if m != nil {
		return m.ConnIds
	}
	return nil
}

func (m *SubsPackage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SubsPackage) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "gateway.Empty")
	proto.RegisterType((*UsersPackage)(nil), "gateway.UsersPackage")
	proto.RegisterType((*ChannelPackage)(nil), "gateway.ChannelPackage")
	proto.RegisterType((*SubsPackage)(nil), "gateway.SubsPackage")
	proto.RegisterEnum("gateway.ClientType", ClientType_name, ClientType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gateway service

type GatewayClient interface {
	SendToUsers(ctx context.Context, in *UsersPackage, opts ...grpc.CallOption) (*Empty, error)
	SendToChannel(ctx context.Context, in *ChannelPackage, opts ...grpc.CallOption) (*Empty, error)
	SendToSubs(ctx context.Context, in *SubsPackage, opts ...grpc.CallOption) (*Empty, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) SendToUsers(ctx context.Context, in *UsersPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gateway.Gateway/SendToUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SendToChannel(ctx context.Context, in *ChannelPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gateway.Gateway/SendToChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SendToSubs(ctx context.Context, in *SubsPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gateway.Gateway/SendToSubs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayServer interface {
	SendToUsers(context.Context, *UsersPackage) (*Empty, error)
	SendToChannel(context.Context, *ChannelPackage) (*Empty, error)
	SendToSubs(context.Context, *SubsPackage) (*Empty, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_SendToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/SendToUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendToUsers(ctx, req.(*UsersPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SendToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/SendToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendToChannel(ctx, req.(*ChannelPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SendToSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendToSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/SendToSubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendToSubs(ctx, req.(*SubsPackage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToUsers",
			Handler:    _Gateway_SendToUsers_Handler,
		},
		{
			MethodName: "SendToChannel",
			Handler:    _Gateway_SendToChannel_Handler,
		},
		{
			MethodName: "SendToSubs",
			Handler:    _Gateway_SendToSubs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/gateway.proto",
}

func init() { proto.RegisterFile("gateway/gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4f, 0x83, 0x40,
	0x14, 0x2c, 0xd0, 0x8a, 0xbc, 0x56, 0x42, 0x5e, 0x6c, 0x24, 0xa6, 0x87, 0x86, 0x93, 0xf1, 0x50,
	0x13, 0x35, 0x1e, 0x7a, 0x6b, 0x88, 0x35, 0xdc, 0x1a, 0x5b, 0x3d, 0xbb, 0x85, 0x15, 0x89, 0xb8,
	0x4b, 0x60, 0x1b, 0xc3, 0xef, 0xf2, 0x0f, 0x1a, 0xd8, 0x05, 0xf1, 0x23, 0xc6, 0x78, 0x22, 0x33,
	0xf3, 0x26, 0x13, 0x66, 0x16, 0xc6, 0x31, 0x11, 0xf4, 0x95, 0x94, 0x67, 0xea, 0x3b, 0xcb, 0x72,
	0x2e, 0x38, 0x9a, 0x0a, 0x7a, 0x26, 0x0c, 0xae, 0x5f, 0x32, 0x51, 0x7a, 0x0f, 0x30, 0xba, 0x2b,
	0x68, 0x5e, 0xac, 0x48, 0xf8, 0x4c, 0x62, 0x8a, 0x2e, 0x98, 0x15, 0x0e, 0xa2, 0xc2, 0xd5, 0xa7,
	0xc6, 0x89, 0x75, 0xdb, 0xc0, 0x4a, 0x59, 0x91, 0x32, 0xe5, 0x24, 0x72, 0x8d, 0xa9, 0x56, 0x29,
	0x0a, 0xe2, 0x04, 0xac, 0x45, 0x18, 0xf2, 0x1d, 0x13, 0x41, 0xe4, 0xf6, 0x6b, 0xed, 0x83, 0xf0,
	0x1e, 0xc1, 0xf6, 0x9f, 0x08, 0x63, 0x34, 0x6d, 0x32, 0x26, 0x60, 0x29, 0x26, 0x88, 0x5c, 0x5d,
	0xde, 0xb7, 0xc4, 0xbf, 0x73, 0x4a, 0x18, 0xae, 0x77, 0xdb, 0xbf, 0xfd, 0x88, 0xcf, 0x19, 0xab,
	0x14, 0x43, 0x2a, 0x0a, 0x76, 0xa3, 0xfb, 0xbf, 0x44, 0x0f, 0xbe, 0x44, 0x9f, 0xce, 0x01, 0xfc,
	0x34, 0xa1, 0x4c, 0x6c, 0xca, 0x8c, 0xe2, 0x08, 0xf6, 0x97, 0x3c, 0x5f, 0xc4, 0x94, 0x09, 0xa7,
	0x87, 0x36, 0xc0, 0x92, 0xe7, 0xf7, 0x49, 0x91, 0x08, 0x9e, 0x3b, 0x9a, 0xc2, 0xca, 0xeb, 0xe8,
	0xe7, 0x6f, 0x1a, 0x98, 0x37, 0x72, 0x15, 0xbc, 0x82, 0xe1, 0x9a, 0xb2, 0x68, 0xc3, 0xeb, 0x49,
	0x70, 0x3c, 0x6b, 0xd6, 0xeb, 0x4e, 0x74, 0x6c, 0xb7, 0xb4, 0x9c, 0xb0, 0x87, 0x73, 0x38, 0x90,
	0x3e, 0xd5, 0x22, 0x1e, 0xb5, 0x27, 0x9f, 0xab, 0xff, 0xc1, 0x7b, 0x09, 0x20, 0xbd, 0x55, 0x79,
	0x78, 0xd8, 0xea, 0x9d, 0x2e, 0xbf, 0xbb, 0xb6, 0x7b, 0xf5, 0x7b, 0xba, 0x78, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x61, 0xa9, 0x38, 0x88, 0x68, 0x02, 0x00, 0x00,
}
