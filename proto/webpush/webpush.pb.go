// Code generated by protoc-gen-go.
// source: webpush/webpush.proto
// DO NOT EDIT!

/*
Package webpush is a generated protocol buffer package.

It is generated from these files:
	webpush/webpush.proto

It has these top-level messages:
	Empty
	Id
	Token
	TokenRemoveRequest
	PushRequest
	Result
*/
package webpush

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_NONE    DeviceType = 0
	DeviceType_BROWSER DeviceType = 1
	DeviceType_MOBILE  DeviceType = 2
)

var DeviceType_name = map[int32]string{
	0: "NONE",
	1: "BROWSER",
	2: "MOBILE",
}
var DeviceType_value = map[string]int32{
	"NONE":    0,
	"BROWSER": 1,
	"MOBILE":  2,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event int32

const (
	Event_WebpushRegisterToken       Event = 0
	Event_WebpushRegisterRemoveToken Event = 2
	Event_WebpushPush                Event = 3
	Event_WebpushPushReturn          Event = 4
)

var Event_name = map[int32]string{
	0: "WebpushRegisterToken",
	2: "WebpushRegisterRemoveToken",
	3: "WebpushPush",
	4: "WebpushPushReturn",
}
var Event_value = map[string]int32{
	"WebpushRegisterToken":       0,
	"WebpushRegisterRemoveToken": 2,
	"WebpushPush":                3,
	"WebpushPushReturn":          4,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Token struct {
	AccountId  string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId     string     `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	Token      string     `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token"`
	ExpiredIn  string     `protobuf:"bytes,4,opt,name=ExpiredIn,json=expiredIn" json:"ExpiredIn"`
	DeviceType DeviceType `protobuf:"varint,5,opt,name=DeviceType,json=deviceType,enum=webpush.DeviceType" json:"DeviceType"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Token) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetExpiredIn() string {
	if m != nil {
		return m.ExpiredIn
	}
	return ""
}

func (m *Token) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_NONE
}

type TokenRemoveRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId"`
	Token     string `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token"`
}

func (m *TokenRemoveRequest) Reset()                    { *m = TokenRemoveRequest{} }
func (m *TokenRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRemoveRequest) ProtoMessage()               {}
func (*TokenRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TokenRemoveRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *TokenRemoveRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TokenRemoveRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PushRequest struct {
	AccountId   string     `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserIds     []string   `protobuf:"bytes,2,rep,name=UserIds,json=userIds" json:"UserIds"`
	DeviceType  DeviceType `protobuf:"varint,3,opt,name=DeviceType,json=deviceType,enum=webpush.DeviceType" json:"DeviceType"`
	Title       string     `protobuf:"bytes,4,opt,name=Title,json=title" json:"Title"`
	Body        string     `protobuf:"bytes,5,opt,name=Body,json=body" json:"Body"`
	Icon        string     `protobuf:"bytes,6,opt,name=Icon,json=icon" json:"Icon"`
	ClickAction string     `protobuf:"bytes,7,opt,name=ClickAction,json=clickAction" json:"ClickAction"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PushRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *PushRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *PushRequest) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DeviceType_NONE
}

func (m *PushRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PushRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *PushRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *PushRequest) GetClickAction() string {
	if m != nil {
		return m.ClickAction
	}
	return ""
}

type Result struct {
	AccountId   string   `protobuf:"bytes,1,opt,name=AccountId,json=accountId" json:"AccountId"`
	UserIds     []string `protobuf:"bytes,2,rep,name=UserIds,json=userIds" json:"UserIds"`
	SendSuccess []bool   `protobuf:"varint,3,rep,packed,name=SendSuccess,json=sendSuccess" json:"SendSuccess"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Result) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Result) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *Result) GetSendSuccess() []bool {
	if m != nil {
		return m.SendSuccess
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "webpush.Empty")
	proto.RegisterType((*Id)(nil), "webpush.Id")
	proto.RegisterType((*Token)(nil), "webpush.Token")
	proto.RegisterType((*TokenRemoveRequest)(nil), "webpush.TokenRemoveRequest")
	proto.RegisterType((*PushRequest)(nil), "webpush.PushRequest")
	proto.RegisterType((*Result)(nil), "webpush.Result")
	proto.RegisterEnum("webpush.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("webpush.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Webpush service

type WebpushClient interface {
	RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	// Push push notification to all token match query
	// return error if none
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Result, error)
}

type webpushClient struct {
	cc *grpc.ClientConn
}

func NewWebpushClient(cc *grpc.ClientConn) WebpushClient {
	return &webpushClient{cc}
}

func (c *webpushClient) RegisterToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/webpush.Webpush/RegisterToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webpushClient) RemoveToken(ctx context.Context, in *TokenRemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/webpush.Webpush/RemoveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webpushClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/webpush.Webpush/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Webpush service

type WebpushServer interface {
	RegisterToken(context.Context, *Token) (*Empty, error)
	RemoveToken(context.Context, *TokenRemoveRequest) (*Empty, error)
	// Push push notification to all token match query
	// return error if none
	Push(context.Context, *PushRequest) (*Result, error)
}

func RegisterWebpushServer(s *grpc.Server, srv WebpushServer) {
	s.RegisterService(&_Webpush_serviceDesc, srv)
}

func _Webpush_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebpushServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpush.Webpush/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebpushServer).RegisterToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webpush_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebpushServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpush.Webpush/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebpushServer).RemoveToken(ctx, req.(*TokenRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webpush_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebpushServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpush.Webpush/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebpushServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Webpush_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webpush.Webpush",
	HandlerType: (*WebpushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToken",
			Handler:    _Webpush_RegisterToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Webpush_RemoveToken_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Webpush_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webpush/webpush.proto",
}

func init() { proto.RegisterFile("webpush/webpush.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xef, 0x66, 0x2c, 0x52, 0x33, 0xa4, 0x68, 0x15, 0x10, 0xb2, 0x7c, 0x8a, 0x7a,
	0x68, 0x44, 0x7b, 0xe5, 0xd2, 0x80, 0x0f, 0x91, 0xa0, 0x41, 0x9b, 0xa2, 0x5e, 0x21, 0xeb, 0x11,
	0xb5, 0x9a, 0x7a, 0x43, 0x76, 0x1d, 0xc8, 0x0b, 0x71, 0xe1, 0x8d, 0x78, 0x1a, 0xe4, 0xb5, 0xe3,
	0x24, 0x15, 0x87, 0x0a, 0x71, 0xb1, 0x3d, 0xbf, 0xbf, 0x77, 0xbe, 0x17, 0x4e, 0xbe, 0xd3, 0x7c,
	0x59, 0xaa, 0xdb, 0x51, 0xf3, 0x3e, 0x5b, 0xae, 0xa4, 0x96, 0x18, 0x34, 0x66, 0x12, 0x80, 0x97,
	0xde, 0x2f, 0xf5, 0x26, 0xe9, 0x83, 0x3d, 0xc9, 0xb0, 0x57, 0x3d, 0x99, 0x15, 0x5b, 0xc3, 0x2e,
	0xb7, 0xf3, 0x2c, 0xf9, 0x69, 0x81, 0x77, 0x2d, 0xef, 0xa8, 0xc0, 0x97, 0xd0, 0xbd, 0x14, 0x42,
	0x96, 0x85, 0x6e, 0x7f, 0xe8, 0x7e, 0xd9, 0x02, 0x7c, 0x0e, 0xfe, 0x27, 0x45, 0xab, 0x49, 0xc6,
	0x6c, 0x23, 0xf9, 0xa5, 0xb1, 0xb0, 0xdf, 0x1c, 0x67, 0x8e, 0xc1, 0x9e, 0xde, 0xfa, 0x4a, 0x7f,
	0x2c, 0xf3, 0x15, 0x65, 0x93, 0x82, 0xb9, 0xb5, 0x2f, 0xda, 0x02, 0xbc, 0x00, 0x78, 0x47, 0xeb,
	0x5c, 0xd0, 0xf5, 0x66, 0x49, 0xcc, 0x8b, 0xad, 0x61, 0xef, 0xfc, 0xd9, 0xd9, 0x36, 0xff, 0x9d,
	0xc4, 0x21, 0x6b, 0xbf, 0x93, 0xcf, 0x80, 0x26, 0x10, 0xa7, 0x7b, 0xb9, 0x26, 0x4e, 0xdf, 0x4a,
	0x52, 0xfa, 0x7f, 0x26, 0x9d, 0xfc, 0xb6, 0x20, 0xfc, 0x58, 0xaa, 0xdb, 0xc7, 0xf9, 0x66, 0x10,
	0xd4, 0xbe, 0x15, 0xb3, 0x63, 0x67, 0xd8, 0xe5, 0x41, 0xed, 0x5c, 0x3d, 0x28, 0xcf, 0x79, 0x54,
	0x79, 0x26, 0xa5, 0x5c, 0x2f, 0xa8, 0xe9, 0x96, 0xa7, 0x2b, 0x03, 0x11, 0xdc, 0xb1, 0xcc, 0x36,
	0xa6, 0x47, 0x5d, 0xee, 0xce, 0x65, 0xb6, 0xa9, 0xd8, 0x44, 0xc8, 0x82, 0xf9, 0x35, 0xcb, 0x85,
	0x2c, 0x30, 0x86, 0xf0, 0xed, 0x22, 0x17, 0x77, 0x97, 0x42, 0xe7, 0xb2, 0x60, 0x81, 0x91, 0x42,
	0xb1, 0x43, 0xc9, 0x1c, 0x7c, 0x4e, 0xaa, 0x5c, 0xfc, 0x7b, 0x59, 0x31, 0x84, 0x33, 0x2a, 0xb2,
	0x59, 0x29, 0x04, 0x29, 0xc5, 0x9c, 0xd8, 0x19, 0x1e, 0xf1, 0x50, 0xed, 0xd0, 0xe9, 0x68, 0xbf,
	0x70, 0x3c, 0x02, 0xf7, 0x6a, 0x7a, 0x95, 0x46, 0x1d, 0x0c, 0x21, 0x18, 0xf3, 0xe9, 0xcd, 0x2c,
	0xe5, 0x91, 0x85, 0x00, 0xfe, 0x87, 0xe9, 0x78, 0xf2, 0x3e, 0x8d, 0xec, 0xd3, 0x1c, 0xbc, 0x74,
	0x4d, 0x85, 0x46, 0x06, 0xfd, 0x9b, 0xba, 0x3f, 0x9c, 0xbe, 0xe6, 0x4a, 0xd3, 0xca, 0xcc, 0x27,
	0xea, 0xe0, 0x2b, 0x18, 0x3c, 0x50, 0xea, 0x05, 0xa8, 0x75, 0x1b, 0x8f, 0x21, 0x6c, 0xf4, 0x6a,
	0x74, 0x91, 0x83, 0x27, 0xf0, 0x74, 0x0f, 0x70, 0xd2, 0xe5, 0xaa, 0x88, 0xdc, 0xf3, 0x5f, 0x16,
	0x04, 0x0d, 0xc7, 0xd7, 0xf0, 0xe4, 0x20, 0x0c, 0xf6, 0xda, 0xe9, 0x18, 0x7b, 0xb0, 0xb3, 0xeb,
	0xab, 0xd3, 0xc1, 0x37, 0x10, 0xee, 0xc5, 0xc5, 0x17, 0x87, 0x07, 0x0e, 0x76, 0xf2, 0x2f, 0xa7,
	0x47, 0xe0, 0x56, 0xc9, 0x60, 0xbf, 0x55, 0xf6, 0xf6, 0x6c, 0x70, 0xdc, 0xd2, 0x7a, 0x42, 0x49,
	0x67, 0xee, 0x9b, 0x4b, 0x7c, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x0c, 0x52, 0x39, 0xdd,
	0x03, 0x00, 0x00,
}
