// Code generated by protoc-gen-go.
// source: client/clientmgr.proto
// DO NOT EDIT!

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	client/clientmgr.proto

It has these top-level messages:
	Empty
	Id
	Client
	Secret
	ListClientsRequest
	Clients
	BoolValueRequest
	Registration
	Registrations
	ClientCreatedEvent
	ClientDeletedEvent
	ClientUpdatedEvent
	ClientPublishedEvent
	ClientVerifiedEvent
	ClientUpdatedSecretEvent
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error int32

const (
	Error_OK              Error = 0
	Error_NOTFOUND        Error = 404
	Error_INVALID_REQUEST Error = 400
	Error_UNAUTHORIZED    Error = 401
	Error_INTERNAL_ERROR  Error = 500
)

var Error_name = map[int32]string{
	0:   "OK",
	404: "NOTFOUND",
	400: "INVALID_REQUEST",
	401: "UNAUTHORIZED",
	500: "INTERNAL_ERROR",
}
var Error_value = map[string]int32{
	"OK":              0,
	"NOTFOUND":        404,
	"INVALID_REQUEST": 400,
	"UNAUTHORIZED":    401,
	"INTERNAL_ERROR":  500,
}

func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (Error) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ClientType int32

const (
	ClientType_APP     ClientType = 0
	ClientType_CHANNEL ClientType = 1
)

var ClientType_name = map[int32]string{
	0: "APP",
	1: "CHANNEL",
}
var ClientType_value = map[string]int32{
	"APP":     0,
	"CHANNEL": 1,
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Event int32

const (
	Event_EVENT_CLIENT_CREATED       Event = 0
	Event_EVENT_CLIENT_DELETED       Event = 1
	Event_EVENT_CLIENT_UPDATED       Event = 2
	Event_EVENT_CLIENT_PUBLISHED     Event = 3
	Event_EVENT_CLIENT_VERIFIED      Event = 4
	Event_EVENT_CLIENT_SECRETUPDATED Event = 5
)

var Event_name = map[int32]string{
	0: "EVENT_CLIENT_CREATED",
	1: "EVENT_CLIENT_DELETED",
	2: "EVENT_CLIENT_UPDATED",
	3: "EVENT_CLIENT_PUBLISHED",
	4: "EVENT_CLIENT_VERIFIED",
	5: "EVENT_CLIENT_SECRETUPDATED",
}
var Event_value = map[string]int32{
	"EVENT_CLIENT_CREATED":       0,
	"EVENT_CLIENT_DELETED":       1,
	"EVENT_CLIENT_UPDATED":       2,
	"EVENT_CLIENT_PUBLISHED":     3,
	"EVENT_CLIENT_VERIFIED":      4,
	"EVENT_CLIENT_SECRETUPDATED": 5,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Client struct {
	// 128 bit string identification of the client.
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// Secret used to authorize client with oauth2 server
	Secret  string `protobuf:"bytes,2,opt,name=Secret,json=secret" json:"Secret,omitempty"`
	LogoUrl string `protobuf:"bytes,3,opt,name=LogoUrl,json=logoUrl" json:"LogoUrl,omitempty"`
	// owner id, could be Account or Agent
	OwnerId          string `protobuf:"bytes,4,opt,name=OwnerId,json=ownerId" json:"OwnerId,omitempty"`
	ContactEmail     string `protobuf:"bytes,5,opt,name=ContactEmail,json=contactEmail" json:"ContactEmail,omitempty"`
	Description      string `protobuf:"bytes,6,opt,name=Description,json=description" json:"Description,omitempty"`
	ShortDescription string `protobuf:"bytes,7,opt,name=ShortDescription,json=shortDescription" json:"ShortDescription,omitempty"`
	IsVerified       bool   `protobuf:"varint,8,opt,name=IsVerified,json=isVerified" json:"IsVerified,omitempty"`
	// List of URLs which client must register to subiz
	RedirectUrls []string   `protobuf:"bytes,9,rep,name=RedirectUrls,json=redirectUrls" json:"RedirectUrls,omitempty"`
	WebhookUrls  []string   `protobuf:"bytes,10,rep,name=WebhookUrls,json=webhookUrls" json:"WebhookUrls,omitempty"`
	Type         ClientType `protobuf:"varint,11,opt,name=Type,json=type,enum=client.ClientType" json:"Type,omitempty"`
	Name         string     `protobuf:"bytes,12,opt,name=Name,json=name" json:"Name,omitempty"`
	// Set if app is created or trusted by subiz,
	// the client will have privilenge to do any action.
	IsInternal bool `protobuf:"varint,13,opt,name=IsInternal,json=isInternal" json:"IsInternal,omitempty"`
	// Version number of the client.
	Version string `protobuf:"bytes,14,opt,name=Version,json=version" json:"Version,omitempty"`
	// If this field setted to true, client is visible to any account, else,
	// only visible in owner account.
	IsPublic bool `protobuf:"varint,15,opt,name=IsPublic,json=isPublic" json:"IsPublic,omitempty"`
	// PublishDate, a RFC3339 date string show when have the client is
	// published.
	PublishDate string `protobuf:"bytes,16,opt,name=PublishDate,json=publishDate" json:"PublishDate,omitempty"`
	// Clients capable of maintaining the confidentiality of their
	// credentials (e.g., client implemented on a secure server with
	// restricted access to the client credentials), or capable of secure
	// client authentication using other means.
	IsConfidential bool `protobuf:"varint,17,opt,name=IsConfidential,json=isConfidential" json:"IsConfidential,omitempty"`
	// conversations on this channel will be close if there
	// are no message pass in last ClosedTimeout seconds
	ClosedTimeout int32 `protobuf:"varint,18,opt,name=ClosedTimeout,json=closedTimeout" json:"ClosedTimeout,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Client) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Client) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *Client) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Client) GetContactEmail() string {
	if m != nil {
		return m.ContactEmail
	}
	return ""
}

func (m *Client) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Client) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Client) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *Client) GetRedirectUrls() []string {
	if m != nil {
		return m.RedirectUrls
	}
	return nil
}

func (m *Client) GetWebhookUrls() []string {
	if m != nil {
		return m.WebhookUrls
	}
	return nil
}

func (m *Client) GetType() ClientType {
	if m != nil {
		return m.Type
	}
	return ClientType_APP
}

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetIsInternal() bool {
	if m != nil {
		return m.IsInternal
	}
	return false
}

func (m *Client) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Client) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *Client) GetPublishDate() string {
	if m != nil {
		return m.PublishDate
	}
	return ""
}

func (m *Client) GetIsConfidential() bool {
	if m != nil {
		return m.IsConfidential
	}
	return false
}

func (m *Client) GetClosedTimeout() int32 {
	if m != nil {
		return m.ClosedTimeout
	}
	return 0
}

type Secret struct {
	Secret string `protobuf:"bytes,1,opt,name=Secret,json=secret" json:"Secret,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Secret) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type ListClientsRequest struct {
	OwnerId string `protobuf:"bytes,1,opt,name=OwnerId,json=ownerId" json:"OwnerId,omitempty"`
	Keyword string `protobuf:"bytes,2,opt,name=Keyword,json=keyword" json:"Keyword,omitempty"`
	StartId string `protobuf:"bytes,3,opt,name=StartId,json=startId" json:"StartId,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ListClientsRequest) Reset()                    { *m = ListClientsRequest{} }
func (m *ListClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRequest) ProtoMessage()               {}
func (*ListClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListClientsRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *ListClientsRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ListClientsRequest) GetStartId() string {
	if m != nil {
		return m.StartId
	}
	return ""
}

func (m *ListClientsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Clients struct {
	Clients []*Client `protobuf:"bytes,3,rep,name=Clients,json=clients" json:"Clients,omitempty"`
}

func (m *Clients) Reset()                    { *m = Clients{} }
func (m *Clients) String() string            { return proto.CompactTextString(m) }
func (*Clients) ProtoMessage()               {}
func (*Clients) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Clients) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type BoolValueRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *BoolValueRequest) Reset()                    { *m = BoolValueRequest{} }
func (m *BoolValueRequest) String() string            { return proto.CompactTextString(m) }
func (*BoolValueRequest) ProtoMessage()               {}
func (*BoolValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BoolValueRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BoolValueRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Registration struct {
	UserId       string  `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	ClientId     string  `protobuf:"bytes,2,opt,name=ClientId,json=clientId" json:"ClientId,omitempty"`
	InvalidScope bool    `protobuf:"varint,3,opt,name=InvalidScope,json=invalidScope" json:"InvalidScope,omitempty"`
	RegisterDate string  `protobuf:"bytes,4,opt,name=RegisterDate,json=registerDate" json:"RegisterDate,omitempty"`
	ScopeIds     []int32 `protobuf:"varint,5,rep,packed,name=ScopeIds,json=scopeIds" json:"ScopeIds,omitempty"`
}

func (m *Registration) Reset()                    { *m = Registration{} }
func (m *Registration) String() string            { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()               {}
func (*Registration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Registration) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Registration) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Registration) GetInvalidScope() bool {
	if m != nil {
		return m.InvalidScope
	}
	return false
}

func (m *Registration) GetRegisterDate() string {
	if m != nil {
		return m.RegisterDate
	}
	return ""
}

func (m *Registration) GetScopeIds() []int32 {
	if m != nil {
		return m.ScopeIds
	}
	return nil
}

type Registrations struct {
	Registraions []*Registration `protobuf:"bytes,1,rep,name=Registraions,json=registraions" json:"Registraions,omitempty"`
}

func (m *Registrations) Reset()                    { *m = Registrations{} }
func (m *Registrations) String() string            { return proto.CompactTextString(m) }
func (*Registrations) ProtoMessage()               {}
func (*Registrations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Registrations) GetRegistraions() []*Registration {
	if m != nil {
		return m.Registraions
	}
	return nil
}

type ClientCreatedEvent struct {
	Client *Client `protobuf:"bytes,1,opt,name=Client,json=client" json:"Client,omitempty"`
}

func (m *ClientCreatedEvent) Reset()                    { *m = ClientCreatedEvent{} }
func (m *ClientCreatedEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientCreatedEvent) ProtoMessage()               {}
func (*ClientCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClientCreatedEvent) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type ClientDeletedEvent struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *ClientDeletedEvent) Reset()                    { *m = ClientDeletedEvent{} }
func (m *ClientDeletedEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientDeletedEvent) ProtoMessage()               {}
func (*ClientDeletedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClientDeletedEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ClientUpdatedEvent struct {
	Client *Client `protobuf:"bytes,1,opt,name=Client,json=client" json:"Client,omitempty"`
}

func (m *ClientUpdatedEvent) Reset()                    { *m = ClientUpdatedEvent{} }
func (m *ClientUpdatedEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientUpdatedEvent) ProtoMessage()               {}
func (*ClientUpdatedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ClientUpdatedEvent) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type ClientPublishedEvent struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Published bool   `protobuf:"varint,2,opt,name=Published,json=published" json:"Published,omitempty"`
}

func (m *ClientPublishedEvent) Reset()                    { *m = ClientPublishedEvent{} }
func (m *ClientPublishedEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientPublishedEvent) ProtoMessage()               {}
func (*ClientPublishedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ClientPublishedEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientPublishedEvent) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type ClientVerifiedEvent struct {
	Id       string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Verified bool   `protobuf:"varint,2,opt,name=Verified,json=verified" json:"Verified,omitempty"`
}

func (m *ClientVerifiedEvent) Reset()                    { *m = ClientVerifiedEvent{} }
func (m *ClientVerifiedEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientVerifiedEvent) ProtoMessage()               {}
func (*ClientVerifiedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClientVerifiedEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientVerifiedEvent) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type ClientUpdatedSecretEvent struct {
	Id     string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=Secret,json=secret" json:"Secret,omitempty"`
}

func (m *ClientUpdatedSecretEvent) Reset()                    { *m = ClientUpdatedSecretEvent{} }
func (m *ClientUpdatedSecretEvent) String() string            { return proto.CompactTextString(m) }
func (*ClientUpdatedSecretEvent) ProtoMessage()               {}
func (*ClientUpdatedSecretEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClientUpdatedSecretEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientUpdatedSecretEvent) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "client.Empty")
	proto.RegisterType((*Id)(nil), "client.Id")
	proto.RegisterType((*Client)(nil), "client.Client")
	proto.RegisterType((*Secret)(nil), "client.Secret")
	proto.RegisterType((*ListClientsRequest)(nil), "client.ListClientsRequest")
	proto.RegisterType((*Clients)(nil), "client.Clients")
	proto.RegisterType((*BoolValueRequest)(nil), "client.BoolValueRequest")
	proto.RegisterType((*Registration)(nil), "client.Registration")
	proto.RegisterType((*Registrations)(nil), "client.Registrations")
	proto.RegisterType((*ClientCreatedEvent)(nil), "client.ClientCreatedEvent")
	proto.RegisterType((*ClientDeletedEvent)(nil), "client.ClientDeletedEvent")
	proto.RegisterType((*ClientUpdatedEvent)(nil), "client.ClientUpdatedEvent")
	proto.RegisterType((*ClientPublishedEvent)(nil), "client.ClientPublishedEvent")
	proto.RegisterType((*ClientVerifiedEvent)(nil), "client.ClientVerifiedEvent")
	proto.RegisterType((*ClientUpdatedSecretEvent)(nil), "client.ClientUpdatedSecretEvent")
	proto.RegisterEnum("client.Error", Error_name, Error_value)
	proto.RegisterEnum("client.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("client.Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientMgt service

type ClientMgtClient interface {
	Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Id, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Client, error)
	List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Empty, error)
	GenerateSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Secret, error)
	Verify(ctx context.Context, in *BoolValueRequest, opts ...grpc.CallOption) (*Empty, error)
	Publish(ctx context.Context, in *BoolValueRequest, opts ...grpc.CallOption) (*Empty, error)
	Authorize(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Empty, error)
	Revoke(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Empty, error)
	ListClientRegistrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Registrations, error)
	ListChannelRegistrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Registrations, error)
}

type clientMgtClient struct {
	cc *grpc.ClientConn
}

func NewClientMgtClient(cc *grpc.ClientConn) ClientMgtClient {
	return &clientMgtClient{cc}
}

func (c *clientMgtClient) Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := grpc.Invoke(ctx, "/client.ClientMgt/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) GenerateSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := grpc.Invoke(ctx, "/client.ClientMgt/GenerateSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Verify(ctx context.Context, in *BoolValueRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Publish(ctx context.Context, in *BoolValueRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Authorize(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Authorize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) Revoke(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/client.ClientMgt/Revoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) ListClientRegistrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Registrations, error) {
	out := new(Registrations)
	err := grpc.Invoke(ctx, "/client.ClientMgt/ListClientRegistrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgtClient) ListChannelRegistrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Registrations, error) {
	out := new(Registrations)
	err := grpc.Invoke(ctx, "/client.ClientMgt/ListChannelRegistrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientMgt service

type ClientMgtServer interface {
	Create(context.Context, *Client) (*Id, error)
	Read(context.Context, *Id) (*Client, error)
	List(context.Context, *ListClientsRequest) (*Clients, error)
	Delete(context.Context, *Id) (*Empty, error)
	Update(context.Context, *Client) (*Empty, error)
	GenerateSecret(context.Context, *Id) (*Secret, error)
	Verify(context.Context, *BoolValueRequest) (*Empty, error)
	Publish(context.Context, *BoolValueRequest) (*Empty, error)
	Authorize(context.Context, *Registration) (*Empty, error)
	Revoke(context.Context, *Registration) (*Empty, error)
	ListClientRegistrations(context.Context, *Id) (*Registrations, error)
	ListChannelRegistrations(context.Context, *Id) (*Registrations, error)
}

func RegisterClientMgtServer(s *grpc.Server, srv ClientMgtServer) {
	s.RegisterService(&_ClientMgt_serviceDesc, srv)
}

func _ClientMgt_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Create(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).List(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Update(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_GenerateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).GenerateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/GenerateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).GenerateSecret(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Verify(ctx, req.(*BoolValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Publish(ctx, req.(*BoolValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Authorize(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).Revoke(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_ListClientRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).ListClientRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/ListClientRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).ListClientRegistrations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgt_ListChannelRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgtServer).ListChannelRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientMgt/ListChannelRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgtServer).ListChannelRegistrations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientMgt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.ClientMgt",
	HandlerType: (*ClientMgtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClientMgt_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ClientMgt_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientMgt_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClientMgt_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClientMgt_Update_Handler,
		},
		{
			MethodName: "GenerateSecret",
			Handler:    _ClientMgt_GenerateSecret_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _ClientMgt_Verify_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ClientMgt_Publish_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _ClientMgt_Authorize_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _ClientMgt_Revoke_Handler,
		},
		{
			MethodName: "ListClientRegistrations",
			Handler:    _ClientMgt_ListClientRegistrations_Handler,
		},
		{
			MethodName: "ListChannelRegistrations",
			Handler:    _ClientMgt_ListChannelRegistrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/clientmgr.proto",
}

func init() { proto.RegisterFile("client/clientmgr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xed, 0x6e, 0xe2, 0x46,
	0x17, 0xc6, 0x01, 0x1b, 0x38, 0x7c, 0xac, 0x77, 0x96, 0xcd, 0x3b, 0x2f, 0xaa, 0x56, 0xc8, 0xda,
	0x46, 0x34, 0x3f, 0xb2, 0x52, 0xd2, 0x4a, 0xfb, 0xa3, 0x6a, 0x45, 0xb0, 0xb7, 0xb1, 0x96, 0x42,
	0x6a, 0x3e, 0x2a, 0x55, 0x95, 0x22, 0x07, 0xcf, 0x26, 0xa3, 0x18, 0x9b, 0x8e, 0x07, 0xd2, 0xf4,
	0x2a, 0x5a, 0xa9, 0xd7, 0xd0, 0x5f, 0xbd, 0x86, 0xde, 0x4c, 0x6f, 0xa1, 0x17, 0x50, 0xcd, 0x0c,
	0x06, 0x03, 0x59, 0xa9, 0xf9, 0xb3, 0xf8, 0x3c, 0xcf, 0xf9, 0x9a, 0x33, 0xcf, 0x9c, 0x0d, 0x1c,
	0x4e, 0x43, 0x4a, 0x22, 0xfe, 0x46, 0xfd, 0xcc, 0x6e, 0xd8, 0xc9, 0x9c, 0xc5, 0x3c, 0x46, 0x86,
	0x02, 0xac, 0x22, 0xe8, 0xce, 0x6c, 0xce, 0x1f, 0xac, 0x06, 0x1c, 0xb8, 0x01, 0xaa, 0x8b, 0x7f,
	0xb1, 0xd6, 0xd2, 0xda, 0x65, 0xef, 0x80, 0x06, 0xd6, 0x5f, 0x05, 0x30, 0xba, 0xd2, 0x73, 0x97,
	0x42, 0x87, 0x60, 0x0c, 0xc9, 0x94, 0x11, 0x8e, 0x0f, 0x24, 0x66, 0x24, 0xd2, 0x42, 0x18, 0x8a,
	0xbd, 0xf8, 0x26, 0x1e, 0xb3, 0x10, 0xe7, 0x25, 0x51, 0x0c, 0x95, 0x29, 0x98, 0xc1, 0x7d, 0x44,
	0x98, 0x1b, 0xe0, 0x82, 0x62, 0x62, 0x65, 0x22, 0x0b, 0xaa, 0xdd, 0x38, 0xe2, 0xfe, 0x94, 0x3b,
	0x33, 0x9f, 0x86, 0x58, 0x97, 0x74, 0x75, 0x9a, 0xc1, 0x50, 0x0b, 0x2a, 0x36, 0x49, 0xa6, 0x8c,
	0xce, 0x39, 0x8d, 0x23, 0x6c, 0x48, 0x97, 0x4a, 0xb0, 0x81, 0xd0, 0x31, 0x98, 0xc3, 0xdb, 0x98,
	0xf1, 0xac, 0x5b, 0x51, 0xba, 0x99, 0xc9, 0x0e, 0x8e, 0x5e, 0x01, 0xb8, 0xc9, 0x84, 0x30, 0xfa,
	0x81, 0x92, 0x00, 0x97, 0x5a, 0x5a, 0xbb, 0xe4, 0x01, 0x5d, 0x23, 0xa2, 0x23, 0x8f, 0x04, 0x94,
	0x91, 0x29, 0x1f, 0xb3, 0x30, 0xc1, 0xe5, 0x56, 0x5e, 0x74, 0xc4, 0x32, 0x98, 0xe8, 0xe8, 0x7b,
	0x72, 0x7d, 0x1b, 0xc7, 0x77, 0xd2, 0x05, 0xa4, 0x4b, 0xe5, 0x7e, 0x03, 0xa1, 0x23, 0x28, 0x8c,
	0x1e, 0xe6, 0x04, 0x57, 0x5a, 0x5a, 0xbb, 0x7e, 0x8a, 0x4e, 0xd4, 0xd0, 0x4f, 0xd4, 0x44, 0x05,
	0xe3, 0x15, 0xf8, 0xc3, 0x9c, 0x20, 0x04, 0x85, 0xbe, 0x3f, 0x23, 0xb8, 0x2a, 0xbb, 0x2d, 0x44,
	0xfe, 0x8c, 0xa8, 0x0e, 0xdd, 0x88, 0x13, 0x16, 0xf9, 0x21, 0xae, 0xa5, 0x1d, 0xa6, 0x88, 0x98,
	0xe6, 0x84, 0xb0, 0x44, 0x1c, 0xb2, 0xae, 0xa6, 0xb9, 0x54, 0x26, 0x6a, 0x42, 0xc9, 0x4d, 0x2e,
	0x17, 0xd7, 0x21, 0x9d, 0xe2, 0x67, 0x32, 0xae, 0x44, 0x57, 0xb6, 0xe8, 0x59, 0x7e, 0x25, 0xb7,
	0xb6, 0xcf, 0x09, 0x36, 0xd5, 0x14, 0xe7, 0x1b, 0x08, 0x1d, 0x41, 0xdd, 0x4d, 0xba, 0x71, 0xf4,
	0x81, 0x06, 0x24, 0xe2, 0xd4, 0x0f, 0xf1, 0x73, 0x99, 0xa3, 0x4e, 0xb7, 0x50, 0xf4, 0x1a, 0x6a,
	0xdd, 0x30, 0x4e, 0x48, 0x30, 0xa2, 0x33, 0x12, 0x2f, 0x38, 0x46, 0x2d, 0xad, 0xad, 0x7b, 0xb5,
	0x69, 0x16, 0xb4, 0x5a, 0xa9, 0x4a, 0x32, 0x7a, 0xd1, 0xb2, 0x7a, 0xb1, 0x7e, 0x06, 0xd4, 0xa3,
	0x09, 0x57, 0x33, 0x49, 0x3c, 0xf2, 0xd3, 0x82, 0x24, 0x3c, 0xab, 0x15, 0x6d, 0x5b, 0x2b, 0x18,
	0x8a, 0xef, 0xc9, 0xc3, 0x7d, 0xcc, 0x82, 0x95, 0xf0, 0x8a, 0x77, 0xca, 0x14, 0xcc, 0x90, 0xfb,
	0x8c, 0xbb, 0x41, 0xaa, 0xbc, 0x44, 0x99, 0xa8, 0x01, 0x7a, 0x8f, 0xce, 0x28, 0x97, 0xba, 0xd3,
	0x3d, 0x3d, 0x14, 0x86, 0x75, 0x06, 0xc5, 0x55, 0x55, 0xd4, 0x5e, 0x7f, 0xe2, 0x7c, 0x2b, 0xdf,
	0xae, 0x9c, 0xd6, 0xb7, 0xef, 0xca, 0x2b, 0x2a, 0x33, 0xb1, 0xde, 0x82, 0x79, 0x1e, 0xc7, 0xe1,
	0xc4, 0x0f, 0x17, 0x24, 0x6d, 0x76, 0xf7, 0x69, 0x34, 0x40, 0x97, 0xbc, 0x6c, 0xb0, 0xe4, 0xe9,
	0x4b, 0x61, 0x58, 0x7f, 0x68, 0x42, 0x53, 0x37, 0x34, 0xe1, 0xcc, 0x97, 0x1a, 0x3c, 0x04, 0x63,
	0x9c, 0x64, 0x8e, 0x68, 0x2c, 0xa4, 0x25, 0xee, 0x4f, 0x55, 0x75, 0xd3, 0x23, 0x96, 0xa6, 0x2b,
	0x5b, 0xe8, 0xd2, 0x8d, 0x96, 0x7e, 0x48, 0x83, 0xe1, 0x34, 0x9e, 0x13, 0x79, 0xd0, 0x92, 0x57,
	0xa5, 0x19, 0x4c, 0x69, 0x57, 0xd4, 0x21, 0x4c, 0x5e, 0xb2, 0x7a, 0x6c, 0x55, 0x96, 0xc1, 0x44,
	0x0d, 0xe9, 0xec, 0x06, 0x09, 0xd6, 0x5b, 0xf9, 0xb6, 0xee, 0x95, 0x92, 0x95, 0x6d, 0xb9, 0x50,
	0xcb, 0xf6, 0x99, 0xa0, 0xb7, 0x9b, 0xc6, 0x85, 0x8d, 0x35, 0x39, 0xa2, 0x46, 0x3a, 0xa2, 0xac,
	0x73, 0x5a, 0x46, 0x79, 0x5a, 0x5f, 0x02, 0x52, 0x47, 0xe9, 0x32, 0xe2, 0x73, 0x12, 0x38, 0x4b,
	0xb1, 0x4a, 0x8e, 0xd2, 0xa5, 0x22, 0x0f, 0xbe, 0x3f, 0xec, 0x74, 0x39, 0xbd, 0x4e, 0xa3, 0x6d,
	0x12, 0x92, 0x75, 0xf4, 0xee, 0x8e, 0x5a, 0xd7, 0x18, 0xcf, 0x83, 0xa7, 0xd7, 0xb0, 0xa1, 0xa1,
	0x90, 0xd5, 0xb3, 0xf8, 0x48, 0x15, 0xf4, 0x09, 0x94, 0xd7, 0x1e, 0xab, 0x7b, 0x2d, 0xcf, 0x53,
	0xc0, 0xea, 0xc0, 0x0b, 0x95, 0x25, 0x5d, 0x20, 0x8f, 0x27, 0x69, 0x42, 0x69, 0xbd, 0x73, 0x54,
	0x8e, 0xd2, 0x72, 0x65, 0x5b, 0xe7, 0x80, 0xb7, 0x8e, 0xa1, 0x1e, 0xcb, 0xe3, 0x79, 0x3e, 0xb2,
	0x7b, 0x8f, 0x7f, 0x04, 0xdd, 0x61, 0x2c, 0x66, 0xc8, 0x80, 0x83, 0xc1, 0x7b, 0x33, 0x87, 0x6a,
	0x50, 0xea, 0x0f, 0x46, 0xef, 0x06, 0xe3, 0xbe, 0x6d, 0xfe, 0x9e, 0x47, 0x0d, 0x78, 0xe6, 0xf6,
	0x27, 0x9d, 0x9e, 0x6b, 0x5f, 0x79, 0xce, 0x77, 0x63, 0x67, 0x38, 0x32, 0x7f, 0xcd, 0xa3, 0xe7,
	0x50, 0x1d, 0xf7, 0x3b, 0xe3, 0xd1, 0xc5, 0xc0, 0x73, 0x7f, 0x70, 0x6c, 0xf3, 0xb7, 0x3c, 0x7a,
	0x01, 0x75, 0xb7, 0x3f, 0x72, 0xbc, 0x7e, 0xa7, 0x77, 0xe5, 0x78, 0xde, 0xc0, 0x33, 0xff, 0xc9,
	0x1f, 0x5b, 0x00, 0x9b, 0xcd, 0x85, 0x8a, 0x90, 0xef, 0x5c, 0x5e, 0x9a, 0x39, 0x54, 0x81, 0x62,
	0xf7, 0xa2, 0xd3, 0xef, 0x3b, 0x3d, 0x53, 0x3b, 0xfe, 0x53, 0x03, 0x5d, 0xf5, 0x8c, 0xa1, 0xe1,
	0x4c, 0x9c, 0xfe, 0xe8, 0xaa, 0xdb, 0x73, 0xe5, 0x8f, 0xe7, 0x74, 0x46, 0x8e, 0x6d, 0xe6, 0xf6,
	0x18, 0xdb, 0xe9, 0x39, 0x82, 0xd1, 0xf6, 0x98, 0xf1, 0xa5, 0x2d, 0x63, 0x0e, 0x50, 0x13, 0x0e,
	0xb7, 0x98, 0xcb, 0xf1, 0x79, 0xcf, 0x1d, 0x5e, 0x38, 0xb6, 0x99, 0x47, 0xff, 0x87, 0x97, 0x5b,
	0xdc, 0xc4, 0xf1, 0xdc, 0x77, 0xae, 0x63, 0x9b, 0x05, 0xf4, 0x0a, 0x9a, 0x5b, 0xd4, 0xd0, 0xe9,
	0x7a, 0xce, 0x28, 0x4d, 0xab, 0x9f, 0xfe, 0x5d, 0x80, 0xb2, 0x3a, 0xd3, 0xb7, 0x37, 0x4a, 0x33,
	0x52, 0xa7, 0x68, 0x47, 0x2d, 0x4d, 0x48, 0x6d, 0x37, 0xb0, 0x72, 0xe8, 0x35, 0x14, 0x3c, 0xe2,
	0x07, 0x28, 0x83, 0x36, 0x77, 0x22, 0xac, 0x1c, 0xfa, 0x02, 0x0a, 0x62, 0xb1, 0xa1, 0x66, 0xca,
	0xec, 0xaf, 0xb9, 0xe6, 0xb3, 0xed, 0xa8, 0xc4, 0xca, 0xa1, 0x4f, 0xc1, 0x50, 0x72, 0xdf, 0x4a,
	0x5f, 0x4b, 0xbf, 0xd5, 0xff, 0xd6, 0x39, 0xf4, 0x19, 0x18, 0x4a, 0x28, 0x7b, 0xbd, 0xee, 0xb9,
	0x9e, 0x40, 0xfd, 0x1b, 0x12, 0x11, 0xe6, 0x73, 0xb2, 0xda, 0xc5, 0x8f, 0x36, 0xae, 0x38, 0x2b,
	0x87, 0xce, 0xc0, 0x90, 0x2a, 0x7d, 0x40, 0x38, 0xe5, 0x76, 0x57, 0xde, 0x7e, 0x91, 0xcf, 0xa1,
	0xb8, 0x7a, 0x1f, 0x4f, 0x89, 0x3a, 0x85, 0x72, 0x67, 0xc1, 0x6f, 0x63, 0x46, 0x7f, 0x21, 0xe8,
	0xd1, 0x85, 0xb2, 0x1f, 0xf3, 0x06, 0x0c, 0x8f, 0x2c, 0xe3, 0xbb, 0xff, 0x1c, 0xf0, 0x15, 0xfc,
	0x6f, 0x33, 0xfa, 0xed, 0xcd, 0x96, 0x1d, 0xc4, 0xcb, 0xc7, 0xb2, 0x89, 0x1b, 0xf9, 0x1a, 0xb0,
	0x8c, 0xbf, 0xf5, 0xa3, 0x88, 0x84, 0x4f, 0x4f, 0x70, 0x6d, 0xc8, 0xbf, 0xb9, 0xce, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xb3, 0xda, 0x1f, 0xe1, 0x8d, 0x09, 0x00, 0x00,
}
