syntax = "proto2";

package conversation;

//import "bitbucket.org/subiz/servicespec/proto/auth/auth.proto";
import "bitbucket.org/subiz/servicespec/proto/event/event.proto";
import "bitbucket.org/subiz/servicespec/proto/common/common.proto";

/*
	service ChatMgr {
	// COLLECTOR for channel only
	// fire EvChatSent
	rpc Send(ChatEvent) returns (Id) {}

	// request chat from user
	// fire EvChatWaiting, EvChatCreated
	rpc Request(ChatRequest) returns (Id) {}

	// fire EvAssigned
	//rpc AckRequest(ChatRequestAck) returns (common.Empty) {}

	// start chat from agent
	// fire EvChatCreated
	rpc Start(ChatStart) returns (Id) {}

	// QUERRIER
	// List chats for specific user
	rpc ListChatsByUser(ListChatsByUserRequest) returns (ChatPreviews) {}
	rpc ListChatEvents(ListChatEventRequest) returns (ChatEvents) {}

	// Unassigned list
	rpc ListUnassignedChats(Id) returns (UnassignedChats) {} // limit 300
	rpc AcceptUnassignedChat(AcceptRequest) returns (Bool) {}

	//rpc Read(Empty) returns (Empty) {}
	}
*/

message Id {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
}

message AgentId {
	optional string AccountId = 1;
	optional string AgentId = 2;
}

message AgentInGroup {
	optional string AccountId = 1;
	optional 	string AgentId = 2;
	optional 	string GroupId = 3;
}

message AgentStatus {
	optional 	string AccountId = 1;
	optional 	string AgentId = 2;
	optional 	bool IsActive = 3;
}

message Account {
	optional common.Context ctx = 1;
	optional string Id = 2;
	optional int32 MaxRules = 3;
}

message Bool {
	optional 	bool Bool = 1;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

message Limit {
	optional common.Context ctx = 1;

	optional string account_id = 3;
	optional int32 max_rules = 7;
}

message Rule {
	optional common.Context ctx = 1;
	// @inject_tag: name:"ip"
	optional string id = 2;
	optional string account_id = 3;
	//optional string priority = 4;
	optional AssignStrategy strategy = 5;
	repeated string assign_tos = 6;
	repeated Condition conditions = 7;
	optional bool enabled = 8;
	optional int64 created_time = 9;
	optional string prev_id = 10;
	optional string next_id = 11;
}

message Condition {
	optional JoinOperator join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
}

message Route {
	repeated Rule Rules = 1;
}

message RouteResult {
	optional string RuleId = 1;
	optional 	AssignStrategy Strategy = 3;
	repeated string AgentIds = 4;
}

enum AssignStrategy {
	ALLAGENTS = 0;
	AGENTGROUP = 2;
	AGENTS = 3;
	MOSTRECENT = 4;
	ROUNDROBINALLAGENTS = 5;
	ROUNDROBINAGENTS = 6;
}

message GroupDeleteEvent {
	optional string GroupId = 1;
}

message GroupUpdateEvent {
	optional 	string GroupId = 1;
	repeated string MemberIds = 2;
}

message AgentDeletedEvent {
	optional string AgentId = 1;
}

message AgentUpdateEvent {
	optional 	string AgentId = 1;
	optional 	bool IsActive = 2;
	optional 	bool IsConfirmed = 3;
}

message Ids {
	repeated string Ids = 1;
}

// get number of unread message
message Conversation {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	// Creation time
	optional int64 created_time = 4;
	// Last active time
	optional int64 last_active_time = 5;
	// Closed time
	optional int64 closed_time = 6;
	repeated event.User users = 7;
	optional string channel_id = 9;
	repeated string tags = 10;

	optional ConversationState state = 11;
	optional string request_id = 13;
}

enum ConversationState {
	conversation_none = 0;
	assigning = 1;
	unassigned = 2;
	opened = 3;
	closed = 4;
}

message Previews {
	repeated Preview previews = 1;
}

// ChatPreview is a chat header with some events in it
message Preview {
	optional Conversation conversation = 1;
	repeated ChatEvent events = 2;

	// Unread number of unread event
	optional int64 Unread = 3;
}

// ChateEventType
enum ChatEventType {
	NONE = 0;
	MESSAGE = 1; // content= content of message, attachments attachment
	CLOSED = 3; // content, attachments = null

	ADD = 4;
	//JOINED = 4; // SenderId: senderid || could be null, Content: joinner id, Attachmemts: null
	LEFT = 5; // senderid: senderid || could be null
	//	SEEN = 6; // Content = event id, attachment = null
	RATED = 7; // content = number of star, attachment = null
	INPUT = 8; // content = refered message id; attachment depended on type of event

	TAG = 9; // Content = tag
	UNTAG = 10; // Content = tag
	TRANSFER = 11; // Content = joinerid1,joinerid2 (',' delimiter)
	ACK = 12;
	TYPING = 13;
	STOPTYPING = 14;
}

message Attachment {
	/* Type show type of attachment
	 * Value:
	 *   Template
	 *     - file
	 *       + video
	 *       + audio
	 *       + image
	 *     - preview (preview for link)
	 *     - content
	 *     - template
	 *
	 *       + receipt, ticket, ...
	 *     - quick_replies
	 *       + ask_form
	 *       + generic_template
	 *       + list_template
	 *   Input control
	 *     - button           -> send list of event to chat
	 *     - url
	 *     - postback_button (single button)
	 *     - textbox           -> contains value
	 *     - ratebox            -> rate the chat (like 5 buttons but have beautiful display)
	 */
	optional string Type = 1;
	optional string Payload = 2; // Custome JSON data
}

message ChatEvents {
	repeated ChatEvent Events = 1;
}

message ChatEvent {
	// ID of chat evet
	optional 	string Id = 1;

	// Type indicates type of chat event
	optional 	ChatEventType Type = 2;

	// AccountId refer to ID of account
	optional string AccountId = 4;

	// ChatId refer to ID of chat which contains this chat event
	optional 	string ChatId = 3;

	// CreatedTime is a RFC3339 string, tell when was event sent
	optional string CreatedTime = 5;

	// SenderId refer to who has sent the event, could be Agent, User or System
	optional 	string SenderId = 6;

	// SenderType indicate type of sender
	optional event.UserType SenderType = 7;

	// Content could be raw text, could be JSON data based on type
	optional string Text = 8;

	// Could be "", "raw" or "markdown", "html"
	optional string Format = 9;

	repeated Attachment Attachments = 10;

	optional string State = 11;
}

enum DeviceType {
	UNKNOWN = 0;
	MOBILE = 1;
	TABLET = 2;
	DESKTOP = 3;
}

message ChatRequest {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string channel_id = 4;
	optional string message_to = 5;
	optional string page_url = 6;
	optional string page_title = 7;
	optional string message = 8;
	optional string browser_language = 9;
	optional string language = 10;
	optional DeviceType device_type = 11;
	optional string user_id = 12;
	optional int64 created_time = 13;
	optional string conversation_id = 14;
	optional string ip = 15;
	optional string country = 16;
	optional string country_code = 17;
	optional string city = 18;
	optional string time_zone = 19;
}

message Conversations {
	repeated Conversation conversations = 1;
}

message ChatStart {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string user_id = 4;
	optional string channel_id = 5;
}

message AcceptRequest {
	optional string AccountId = 1;
	optional string AgentId = 2;
	optional string ChatId = 3;
}

message ListUnassignChatsRequest {
	optional string AccountId = 1;
	optional string StartId = 2;
	optional int32 Limit = 3;
}

message UnassignChat {
	optional string AccountId = 1;
	optional bool IsAssigned = 2;
	optional string Message = 3;
	optional string Ip = 4;
	optional string Name = 5;
	repeated string Emails = 6;
	repeated string Phones = 7;
}

message Bools {
	repeated bool Bools = 1;
}

message ListUsersUnreadRequest {
	optional string AccountId = 1;
	optional string AgentId = 2;
	repeated string UserIds = 3;
}

message Unread {
	optional string UserId = 1;
	optional int32 Unread = 2;
}

message UsersUnread {
	repeated Unread Unreads = 1;
}

message ListChatEventRequest {
	optional string AccountId = 1;
	optional string ChatId = 2;
	optional string StartId = 3;
	optional int32 Limit = 4;
}

message ListChatsByUserRequest {
	optional string AccountId = 1;
	optional string ChannelId = 2; // if null -> all channel
	optional string UserId = 3; // must be visitor id
	optional string StartId = 4;
	optional int32 Limit = 5;
}

message OEChatDropped {
	optional string AccountId = 1;
	optional string ChatId = 2;
	optional string ChannelId = 3;
}

message OEChatAccepted {
	optional string AccountId = 2;
	optional string ChatId = 3;
	optional string AgentId = 4;
}

message OEChatStarted {
	optional string AccountId = 2;
	optional string ChatId = 3;
	optional string ChannelId = 4;
	optional string CreatedTime = 5;
}

message EvChatResult { // delete after 5mins, so be quick
	optional string RequestId = 1; //request id
	optional bool Ok = 2;
	optional int32 Code = 3;
	optional string CreatedTime = 4;
	optional string Description = 5;
}

message EvChatUserInfoRequested {
	optional string RequestId = 1;
	optional string ChatId = 2;
	optional string AccountId = 3;
	optional string ChannelId = 4;
	optional string MessageTo = 5;
	optional string PageUrl = 6;
	optional string PageTitle = 7;
	optional string Message = 8;
	optional string BrowserLanguage = 9;
	optional string Language = 10;
	optional DeviceType DeviceType = 11;
	optional string UserId = 12;
	optional string CreatedTime = 13;
}

enum Event {
	ConversationAssigned = 0; // chat is assigned to an agent
	ConversationWaiting = 2; // new chat is added to unassigned list

	ConversationStartRequested = 3; // chat started from an agent // chatstart

	ConversationAccepted = 4; // chat from unassigned list is accepted by an agent
	ConversationDropped = 5; // chat dropped from unassigned list

	ConversationEventCreated = 6;
	ConversationJoinRequested = 7;
	ConversationMessageRequested = 8;
	ConversationLeaveRequested = 9;
	ConversationCloseRequested = 10;
	ConversationTagRequested = 11;
	ConversationUntagRequested = 12;



	ConversationUpdateRuleRequested = 20; // rule
  ConversationCreateRuleRequested = 21; // rule
	ConversationDeleteRuleRequested = 22; // id
	ConversationReadRuleRequested = 23; // id
	ConversationListRuleRequested = 24; // id accountid, return top N rule

	ChatUserInfoRequested = 18;
	ChatUserInfoReply = 19;


	ConversationRequested = 50; // user request for new conversation
	ConversationUserRequestReply = 51; // user
	ConversationLimitUpdated = 52;
}
// ==================

message FileTemplate {
	optional string Id = 1;
}

message QuickRepliesTemplate {
	optional string Text = 1;
	optional string ContentType = 4; // listbutton or location or ...
	repeated Button Replies = 5; // limit to 11
}

message GenericElement { // display
	optional string Title = 1;
	optional string ImageUrl = 2;
	optional string Subtitle = 3; // limited character
	optional Button DefaultAction = 4;
	repeated Button Buttons = 5; // limit to 10
}

message GenericTemplate {
	repeated GenericElement Elements = 1; // limit to 5
}

message Button {
	optional string Type = 1;
	///...
}

message UrlButton { // input
	optional string Type = 1; // UrlButton
	optional string Title = 2;
	optional string Url = 3;
}

message PostbackButton {
	optional string Type = 1; // PostbackButton
	optional string Title = 2;
	optional string Payload = 3;
	optional string ImageUrl = 4;
}

message CallButton {
}

message LoginButton {
}

message EventButton {
	optional string Type = 1; // EventButton
	optional string Title = 2;
	optional string ImageUrl = 4;
	optional string Event = 3; // this event will sent to chat
}

message SurveyForm {
	optional string Placeholder = 1;
}

message RateFormTemplate {
	optional string Type = 1;
}

message RequestState {
	optional string account_id = 1;
	optional string conversation_id = 2;
	optional string channel_id = 3;


}