syntax = "proto2";

// notibox store all notification in subiz
// it DOESN'T take care of pushing notification to user
import "bitbucket.org/subiz/header/common/common.proto";

package notibox;

// Notification represent an user's notification
message Notification {
	optional common.Context ctx = 1;
	optional string box = 3;
	optional string topic = 10;
	optional string type = 5; // type
	optional string data = 8; //json
	optional int64 created = 6;
	optional int64 read = 9;
	optional bool view = 11;
}

enum Type {
	account_created = 0;
	trial_almost_expired = 2;
	trial_expired = 3;
	system_maintainance_scheduled_1 = 4;
	system_maintainance_scheduled_2 = 5;
	system_maintainance_completed = 6;
	agent_activated = 7;
	conversation_unassigned = 8;
	agent_permission_updated = 9;
}

message AddNotificationRequest {
	optional common.Context ctx = 1;
	repeated string boxs = 2;
	optional Notification notification = 3;
}

message ReadNotification {
	optional common.Context ctx = 1;
	optional string box = 2;
	repeated string topics = 3;
	optional bool read = 4;
}

message ListRequest {
	optional common.Context ctx = 1;
	optional string box = 3;
	optional string anchor = 4;
	optional int32 limit = 5;
}

message NotiboxRequest {
	optional common.Context ctx = 1;
	optional string box = 2;
	optional string topic = 3;
}

message Notifications {
	optional common.Context ctx = 1;
	repeated Notification notifications = 2;
	optional string anchor = 3;
}

message Box {
	optional common.Context ctx = 1;
	optional string box = 2;
	optional int64 new_count = 3;
}

message AllType {
  	optional Notifications nts = 2;
	optional ListRequest listr = 3;
	optional ReadNotification rno = 4;
	optional AddNotificationRequest anorfr = 5;
	optional Notification noti = 6;
	optional Box box = 8;
}

service YourService {
  rpc Do(AllType) returns (AllType) {}
}

service NotiboxService {
	rpc Upsert(Notification) returns (Notification) {}
	rpc ReadTopic(NotiboxRequest) returns (common.Empty) {}
	rpc UnreadTopic(NotiboxRequest) returns (common.Empty) {}
	rpc ListNotis(ListRequest) returns (Notifications) {}
	rpc DecreaseNew(NotiboxRequest) returns (Box) {}
	rpc ReadBox(NotiboxRequest) returns (Box) {}
}

enum Event {
	NotiboxRequested = 0;

	NotiUpsertRequested = 1;
	NotiReadRequested = 2;
	NotiUnreadRequested = 4;
	NotiListRequested = 5;
	NotiDecreaseNewRequested = 6;
	NotiNewReadRequested = 7;

	NotiboxSynced = 101;
}
