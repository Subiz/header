// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notibox/notibox.proto

package notibox

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_account_created                 Type = 0
	Type_trial_almost_expired            Type = 2
	Type_trial_expired                   Type = 3
	Type_system_maintainance_scheduled_1 Type = 4
	Type_system_maintainance_scheduled_2 Type = 5
	Type_system_maintainance_completed   Type = 6
	Type_agent_activated                 Type = 7
	Type_conversation_unassigned         Type = 8
	Type_agent_permission_updated        Type = 9
)

var Type_name = map[int32]string{
	0: "account_created",
	2: "trial_almost_expired",
	3: "trial_expired",
	4: "system_maintainance_scheduled_1",
	5: "system_maintainance_scheduled_2",
	6: "system_maintainance_completed",
	7: "agent_activated",
	8: "conversation_unassigned",
	9: "agent_permission_updated",
}

var Type_value = map[string]int32{
	"account_created":                 0,
	"trial_almost_expired":            2,
	"trial_expired":                   3,
	"system_maintainance_scheduled_1": 4,
	"system_maintainance_scheduled_2": 5,
	"system_maintainance_completed":   6,
	"agent_activated":                 7,
	"conversation_unassigned":         8,
	"agent_permission_updated":        9,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{0}
}

type Event int32

const (
	Event_NotiboxRequested         Event = 0
	Event_NotiUpsertRequested      Event = 1
	Event_NotiReadRequested        Event = 2
	Event_NotiUnreadRequested      Event = 4
	Event_NotiListRequested        Event = 5
	Event_NotiDecreaseNewRequested Event = 6
	Event_NotiNewReadRequested     Event = 7
	Event_NotiboxSynced            Event = 101
)

var Event_name = map[int32]string{
	0:   "NotiboxRequested",
	1:   "NotiUpsertRequested",
	2:   "NotiReadRequested",
	4:   "NotiUnreadRequested",
	5:   "NotiListRequested",
	6:   "NotiDecreaseNewRequested",
	7:   "NotiNewReadRequested",
	101: "NotiboxSynced",
}

var Event_value = map[string]int32{
	"NotiboxRequested":         0,
	"NotiUpsertRequested":      1,
	"NotiReadRequested":        2,
	"NotiUnreadRequested":      4,
	"NotiListRequested":        5,
	"NotiDecreaseNewRequested": 6,
	"NotiNewReadRequested":     7,
	"NotiboxSynced":            101,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{1}
}

// Notification represent an user's notification
type Notification struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Box                  *string         `protobuf:"bytes,3,opt,name=box" json:"box,omitempty"`
	Topic                *string         `protobuf:"bytes,10,opt,name=topic" json:"topic,omitempty"`
	Type                 *string         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Data                 *string         `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	Created              *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Read                 *int64          `protobuf:"varint,9,opt,name=read" json:"read,omitempty"`
	View                 *bool           `protobuf:"varint,11,opt,name=view" json:"view,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{0}
}

func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Notification) GetBox() string {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return ""
}

func (m *Notification) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Notification) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Notification) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Notification) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Notification) GetRead() int64 {
	if m != nil && m.Read != nil {
		return *m.Read
	}
	return 0
}

func (m *Notification) GetView() bool {
	if m != nil && m.View != nil {
		return *m.View
	}
	return false
}

type AddNotificationRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Boxs                 []string        `protobuf:"bytes,2,rep,name=boxs" json:"boxs,omitempty"`
	Notification         *Notification   `protobuf:"bytes,3,opt,name=notification" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddNotificationRequest) Reset()         { *m = AddNotificationRequest{} }
func (m *AddNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*AddNotificationRequest) ProtoMessage()    {}
func (*AddNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{1}
}

func (m *AddNotificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNotificationRequest.Unmarshal(m, b)
}
func (m *AddNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNotificationRequest.Marshal(b, m, deterministic)
}
func (m *AddNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNotificationRequest.Merge(m, src)
}
func (m *AddNotificationRequest) XXX_Size() int {
	return xxx_messageInfo_AddNotificationRequest.Size(m)
}
func (m *AddNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNotificationRequest proto.InternalMessageInfo

func (m *AddNotificationRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AddNotificationRequest) GetBoxs() []string {
	if m != nil {
		return m.Boxs
	}
	return nil
}

func (m *AddNotificationRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type ReadNotification struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Box                  *string         `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	Topics               []string        `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	Read                 *bool           `protobuf:"varint,4,opt,name=read" json:"read,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReadNotification) Reset()         { *m = ReadNotification{} }
func (m *ReadNotification) String() string { return proto.CompactTextString(m) }
func (*ReadNotification) ProtoMessage()    {}
func (*ReadNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{2}
}

func (m *ReadNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadNotification.Unmarshal(m, b)
}
func (m *ReadNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadNotification.Marshal(b, m, deterministic)
}
func (m *ReadNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadNotification.Merge(m, src)
}
func (m *ReadNotification) XXX_Size() int {
	return xxx_messageInfo_ReadNotification.Size(m)
}
func (m *ReadNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ReadNotification proto.InternalMessageInfo

func (m *ReadNotification) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ReadNotification) GetBox() string {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return ""
}

func (m *ReadNotification) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ReadNotification) GetRead() bool {
	if m != nil && m.Read != nil {
		return *m.Read
	}
	return false
}

type ListRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Box                  *string         `protobuf:"bytes,3,opt,name=box" json:"box,omitempty"`
	Anchor               *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit                *int32          `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{3}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ListRequest) GetBox() string {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return ""
}

func (m *ListRequest) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

type NotiboxRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Box                  *string         `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	Topic                *string         `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotiboxRequest) Reset()         { *m = NotiboxRequest{} }
func (m *NotiboxRequest) String() string { return proto.CompactTextString(m) }
func (*NotiboxRequest) ProtoMessage()    {}
func (*NotiboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{4}
}

func (m *NotiboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotiboxRequest.Unmarshal(m, b)
}
func (m *NotiboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotiboxRequest.Marshal(b, m, deterministic)
}
func (m *NotiboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotiboxRequest.Merge(m, src)
}
func (m *NotiboxRequest) XXX_Size() int {
	return xxx_messageInfo_NotiboxRequest.Size(m)
}
func (m *NotiboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotiboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotiboxRequest proto.InternalMessageInfo

func (m *NotiboxRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *NotiboxRequest) GetBox() string {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return ""
}

func (m *NotiboxRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

type Notifications struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Notifications        []*Notification `protobuf:"bytes,2,rep,name=notifications" json:"notifications,omitempty"`
	Anchor               *string         `protobuf:"bytes,3,opt,name=anchor" json:"anchor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Notifications) Reset()         { *m = Notifications{} }
func (m *Notifications) String() string { return proto.CompactTextString(m) }
func (*Notifications) ProtoMessage()    {}
func (*Notifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{5}
}

func (m *Notifications) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notifications.Unmarshal(m, b)
}
func (m *Notifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notifications.Marshal(b, m, deterministic)
}
func (m *Notifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notifications.Merge(m, src)
}
func (m *Notifications) XXX_Size() int {
	return xxx_messageInfo_Notifications.Size(m)
}
func (m *Notifications) XXX_DiscardUnknown() {
	xxx_messageInfo_Notifications.DiscardUnknown(m)
}

var xxx_messageInfo_Notifications proto.InternalMessageInfo

func (m *Notifications) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Notifications) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Notifications) GetAnchor() string {
	if m != nil && m.Anchor != nil {
		return *m.Anchor
	}
	return ""
}

type Box struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Box                  *string         `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	NewCount             *int64          `protobuf:"varint,3,opt,name=new_count,json=newCount" json:"new_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Box) Reset()         { *m = Box{} }
func (m *Box) String() string { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()    {}
func (*Box) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{6}
}

func (m *Box) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Box.Unmarshal(m, b)
}
func (m *Box) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Box.Marshal(b, m, deterministic)
}
func (m *Box) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Box.Merge(m, src)
}
func (m *Box) XXX_Size() int {
	return xxx_messageInfo_Box.Size(m)
}
func (m *Box) XXX_DiscardUnknown() {
	xxx_messageInfo_Box.DiscardUnknown(m)
}

var xxx_messageInfo_Box proto.InternalMessageInfo

func (m *Box) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Box) GetBox() string {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return ""
}

func (m *Box) GetNewCount() int64 {
	if m != nil && m.NewCount != nil {
		return *m.NewCount
	}
	return 0
}

type AllType struct {
	Nts                  *Notifications          `protobuf:"bytes,2,opt,name=nts" json:"nts,omitempty"`
	Listr                *ListRequest            `protobuf:"bytes,3,opt,name=listr" json:"listr,omitempty"`
	Rno                  *ReadNotification       `protobuf:"bytes,4,opt,name=rno" json:"rno,omitempty"`
	Anorfr               *AddNotificationRequest `protobuf:"bytes,5,opt,name=anorfr" json:"anorfr,omitempty"`
	Noti                 *Notification           `protobuf:"bytes,6,opt,name=noti" json:"noti,omitempty"`
	Box                  *Box                    `protobuf:"bytes,8,opt,name=box" json:"box,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AllType) Reset()         { *m = AllType{} }
func (m *AllType) String() string { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()    {}
func (*AllType) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfff48b43247ada2, []int{7}
}

func (m *AllType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllType.Unmarshal(m, b)
}
func (m *AllType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllType.Marshal(b, m, deterministic)
}
func (m *AllType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllType.Merge(m, src)
}
func (m *AllType) XXX_Size() int {
	return xxx_messageInfo_AllType.Size(m)
}
func (m *AllType) XXX_DiscardUnknown() {
	xxx_messageInfo_AllType.DiscardUnknown(m)
}

var xxx_messageInfo_AllType proto.InternalMessageInfo

func (m *AllType) GetNts() *Notifications {
	if m != nil {
		return m.Nts
	}
	return nil
}

func (m *AllType) GetListr() *ListRequest {
	if m != nil {
		return m.Listr
	}
	return nil
}

func (m *AllType) GetRno() *ReadNotification {
	if m != nil {
		return m.Rno
	}
	return nil
}

func (m *AllType) GetAnorfr() *AddNotificationRequest {
	if m != nil {
		return m.Anorfr
	}
	return nil
}

func (m *AllType) GetNoti() *Notification {
	if m != nil {
		return m.Noti
	}
	return nil
}

func (m *AllType) GetBox() *Box {
	if m != nil {
		return m.Box
	}
	return nil
}

func init() {
	proto.RegisterEnum("notibox.Type", Type_name, Type_value)
	proto.RegisterEnum("notibox.Event", Event_name, Event_value)
	proto.RegisterType((*Notification)(nil), "notibox.Notification")
	proto.RegisterType((*AddNotificationRequest)(nil), "notibox.AddNotificationRequest")
	proto.RegisterType((*ReadNotification)(nil), "notibox.ReadNotification")
	proto.RegisterType((*ListRequest)(nil), "notibox.ListRequest")
	proto.RegisterType((*NotiboxRequest)(nil), "notibox.NotiboxRequest")
	proto.RegisterType((*Notifications)(nil), "notibox.Notifications")
	proto.RegisterType((*Box)(nil), "notibox.Box")
	proto.RegisterType((*AllType)(nil), "notibox.AllType")
}

func init() { proto.RegisterFile("notibox/notibox.proto", fileDescriptor_dfff48b43247ada2) }

var fileDescriptor_dfff48b43247ada2 = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4b, 0x8f, 0xe3, 0x44,
	0x10, 0xc6, 0x71, 0x9e, 0xe5, 0x19, 0xd6, 0xdb, 0xf3, 0x32, 0x59, 0x60, 0xb3, 0xe1, 0x12, 0x06,
	0x29, 0x03, 0xe1, 0xa5, 0x15, 0xa7, 0x7d, 0xdd, 0xd0, 0x08, 0x79, 0x17, 0x21, 0xc4, 0xc1, 0x72,
	0xec, 0xda, 0x4c, 0x4b, 0x71, 0xb7, 0xe9, 0xee, 0x64, 0x32, 0x1c, 0x91, 0x10, 0x12, 0x27, 0xfe,
	0x13, 0x17, 0x7e, 0x16, 0xaa, 0xb6, 0xe3, 0x38, 0x6c, 0x46, 0x9b, 0xd9, 0x53, 0xea, 0xf1, 0x75,
	0x77, 0xd5, 0xf7, 0x55, 0x39, 0x70, 0x22, 0xa4, 0xe1, 0x53, 0xb9, 0xba, 0x28, 0x7f, 0xc7, 0xb9,
	0x92, 0x46, 0xb2, 0x4e, 0xe9, 0xf6, 0x47, 0x33, 0x6e, 0xc6, 0x7a, 0x31, 0xe5, 0xbf, 0x8d, 0x05,
	0x9a, 0x8b, 0x2b, 0x8c, 0x53, 0x54, 0x17, 0x89, 0xcc, 0x32, 0x29, 0xca, 0x9f, 0xe2, 0xc8, 0xf0,
	0x1f, 0x07, 0x0e, 0x2e, 0xa5, 0xe1, 0xaf, 0x79, 0x12, 0x1b, 0x2e, 0x05, 0x7b, 0x04, 0x6e, 0x62,
	0x56, 0x81, 0x33, 0x70, 0x46, 0xde, 0xe4, 0xde, 0xb8, 0x04, 0x3f, 0x93, 0xc2, 0xe0, 0xca, 0x84,
	0x94, 0x63, 0x3e, 0xb8, 0x53, 0xb9, 0x0a, 0xdc, 0x81, 0x33, 0xea, 0x85, 0x64, 0xb2, 0x63, 0x68,
	0x19, 0x99, 0xf3, 0x24, 0x00, 0x1b, 0x2b, 0x1c, 0xc6, 0xa0, 0x69, 0x6e, 0x72, 0x0c, 0x5a, 0x36,
	0x68, 0x6d, 0x8a, 0xa5, 0xb1, 0x89, 0x83, 0x6e, 0x11, 0x23, 0x9b, 0x05, 0xd0, 0x49, 0x14, 0xc6,
	0x06, 0xd3, 0xa0, 0x3d, 0x70, 0x46, 0x6e, 0xb8, 0x76, 0x09, 0xad, 0x30, 0x4e, 0x83, 0x9e, 0x0d,
	0x5b, 0x9b, 0x62, 0x4b, 0x8e, 0xd7, 0x81, 0x37, 0x70, 0x46, 0xdd, 0xd0, 0xda, 0xc3, 0xbf, 0x1c,
	0x38, 0x7d, 0x92, 0xa6, 0xf5, 0x46, 0x42, 0xfc, 0x75, 0x81, 0xda, 0xec, 0xd3, 0x0f, 0x83, 0xe6,
	0x54, 0xae, 0x74, 0xd0, 0x18, 0xb8, 0x54, 0x13, 0xd9, 0xec, 0x31, 0x1c, 0x88, 0xda, 0x6d, 0xb6,
	0x59, 0x6f, 0x72, 0x32, 0x5e, 0x13, 0xbe, 0xf5, 0xd4, 0x16, 0x74, 0xa8, 0xc1, 0x0f, 0x31, 0x4e,
	0xdf, 0x91, 0xd5, 0xc6, 0x86, 0xd5, 0x53, 0x68, 0x5b, 0x22, 0x75, 0xe0, 0xda, 0xca, 0x4a, 0xaf,
	0x62, 0xa5, 0x59, 0x30, 0x40, 0xf6, 0x30, 0x07, 0xef, 0x7b, 0xae, 0xcd, 0x1d, 0xba, 0x7e, 0x53,
	0xc5, 0x53, 0x68, 0xc7, 0x22, 0xb9, 0x92, 0xca, 0xde, 0xdc, 0x0b, 0x4b, 0x8f, 0xd4, 0x9d, 0xf3,
	0x8c, 0x1b, 0x2b, 0x64, 0x2b, 0x2c, 0x9c, 0xe1, 0x2f, 0xf0, 0xfe, 0x65, 0x41, 0xc6, 0xdd, 0x1f,
	0x6d, 0xec, 0x18, 0x1d, 0xb7, 0x36, 0x3a, 0xc3, 0x3f, 0x1d, 0x38, 0xac, 0x13, 0xa8, 0xf7, 0xb9,
	0xfc, 0x3b, 0x38, 0xac, 0x0b, 0x51, 0x08, 0x7a, 0xab, 0x68, 0xdb, 0xd8, 0x5a, 0xf3, 0x6e, 0xbd,
	0xf9, 0xe1, 0x4f, 0xe0, 0x3e, 0x95, 0xab, 0x77, 0xeb, 0xed, 0x01, 0xf4, 0x04, 0x5e, 0x47, 0x89,
	0x5c, 0x08, 0x63, 0xaf, 0x75, 0xc3, 0xae, 0xc0, 0xeb, 0x67, 0xe4, 0x0f, 0xff, 0x6e, 0x40, 0xe7,
	0xc9, 0x7c, 0xfe, 0x8a, 0xb6, 0x62, 0x04, 0xae, 0x30, 0xda, 0x1e, 0xf5, 0x26, 0xa7, 0x3b, 0xeb,
	0xd5, 0x21, 0x41, 0xd8, 0x39, 0x69, 0xa1, 0x8d, 0x2a, 0x07, 0xf2, 0xb8, 0xc2, 0xd6, 0xd4, 0x0f,
	0x0b, 0x08, 0xfb, 0x0c, 0x5c, 0x25, 0xa4, 0x15, 0xd3, 0x9b, 0x7c, 0x50, 0x21, 0xff, 0x3f, 0x9c,
	0x21, 0xa1, 0xd8, 0xb7, 0xd4, 0xbf, 0x54, 0xaf, 0x95, 0x55, 0xd9, 0x9b, 0x3c, 0xac, 0xf0, 0xbb,
	0x17, 0x2b, 0x2c, 0xe1, 0xec, 0x53, 0x68, 0x12, 0xd2, 0xae, 0xee, 0xad, 0x64, 0x5b, 0x08, 0xfb,
	0xb8, 0x60, 0xa8, 0x6b, 0x91, 0x07, 0x15, 0xf2, 0xa9, 0x5c, 0x59, 0xbe, 0xce, 0xff, 0x68, 0x40,
	0xd3, 0xf2, 0x71, 0x04, 0xf7, 0xe2, 0xc4, 0xd2, 0x16, 0x95, 0x9f, 0x02, 0xff, 0x3d, 0x16, 0xc0,
	0xb1, 0x51, 0x3c, 0x9e, 0x47, 0xf1, 0x3c, 0x93, 0xda, 0x44, 0xb8, 0xca, 0xb9, 0xc2, 0xd4, 0x6f,
	0xb0, 0xfb, 0x70, 0x58, 0x64, 0xd6, 0x21, 0x97, 0x7d, 0x02, 0x0f, 0xf5, 0x8d, 0x36, 0x98, 0x45,
	0x59, 0xcc, 0x85, 0x89, 0xb9, 0x88, 0x45, 0x82, 0x91, 0x4e, 0xae, 0x30, 0x5d, 0xcc, 0x31, 0x8d,
	0xbe, 0xf0, 0x9b, 0x6f, 0x07, 0x4d, 0xfc, 0x16, 0x7b, 0x04, 0x1f, 0xed, 0x02, 0x25, 0x32, 0xcb,
	0xe7, 0x48, 0x95, 0xb5, 0x6d, 0xb9, 0x33, 0x14, 0x26, 0x8a, 0x13, 0xc3, 0x97, 0xb6, 0xdc, 0x0e,
	0x7b, 0x00, 0x67, 0x89, 0x14, 0x4b, 0x54, 0xda, 0x52, 0x10, 0x2d, 0x44, 0xac, 0x35, 0x9f, 0x09,
	0x4c, 0xfd, 0x2e, 0xfb, 0x10, 0x82, 0xe2, 0x44, 0x8e, 0x2a, 0xe3, 0x5a, 0x5b, 0x40, 0x9e, 0xda,
	0xa3, 0xbd, 0xf3, 0x7f, 0x1d, 0x68, 0xbd, 0x58, 0xa2, 0x30, 0xec, 0x18, 0xfc, 0xed, 0x25, 0xb3,
	0x4c, 0x9c, 0xc1, 0x11, 0x45, 0x7f, 0xcc, 0x35, 0x2a, 0xb3, 0x49, 0x38, 0xec, 0x04, 0xee, 0x53,
	0x82, 0x14, 0xde, 0x84, 0x1b, 0x15, 0x5e, 0xa8, 0xad, 0x44, 0x73, 0x8d, 0xaf, 0xcd, 0x0e, 0xa6,
	0x7e, 0x8b, 0xaa, 0xa3, 0xf0, 0x73, 0x24, 0xf2, 0x35, 0x5e, 0xe2, 0xf5, 0x26, 0xdb, 0x26, 0x1d,
	0x28, 0x6b, 0xa3, 0xf5, 0xeb, 0x3a, 0xa4, 0x43, 0x59, 0xed, 0xcb, 0x1b, 0x91, 0x60, 0xea, 0xe3,
	0x64, 0x0a, 0xde, 0xcf, 0x72, 0xa1, 0x5e, 0xa2, 0x5a, 0xf2, 0x84, 0x06, 0xbd, 0xf1, 0x5c, 0x32,
	0x7f, 0x33, 0x5b, 0xc5, 0x02, 0xf4, 0xdf, 0x88, 0xd0, 0x58, 0xfd, 0xc0, 0xc5, 0x8c, 0x1d, 0xad,
	0x77, 0x8d, 0xbc, 0xf2, 0xb1, 0xfe, 0x41, 0x15, 0x94, 0x62, 0x36, 0xf9, 0xdd, 0xad, 0x3e, 0x45,
	0xeb, 0x77, 0xbe, 0x81, 0x76, 0xc1, 0x0e, 0xdb, 0x3d, 0x90, 0xfd, 0xdd, 0x61, 0xf6, 0x25, 0xf4,
	0xa8, 0xa9, 0x57, 0xf6, 0xff, 0xeb, 0x6c, 0x0b, 0xb3, 0xd1, 0xa0, 0x7f, 0xb8, 0x7e, 0xfe, 0x45,
	0x96, 0x9b, 0x1b, 0xf6, 0x35, 0x78, 0x05, 0xb5, 0x77, 0x3b, 0xf6, 0x18, 0x7a, 0x44, 0x3c, 0x81,
	0x34, 0xdb, 0xb9, 0xc8, 0xfd, 0x5b, 0x3e, 0x05, 0xec, 0x2b, 0xf0, 0x6a, 0xe2, 0xdc, 0xfe, 0xe2,
	0xd6, 0x8e, 0xb1, 0xcf, 0xa1, 0x43, 0xcd, 0x91, 0xb9, 0xe7, 0x89, 0xfd, 0x45, 0xf8, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0xc6, 0x5b, 0xca, 0xe8, 0x93, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YourServiceClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type yourServiceClient struct {
	cc *grpc.ClientConn
}

func NewYourServiceClient(cc *grpc.ClientConn) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := c.cc.Invoke(ctx, "/notibox.YourService/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/notibox.YourService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YourServiceServer is the server API for YourService service.
type YourServiceServer interface {
	Do(context.Context, *AllType) (*AllType, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterYourServiceServer(s *grpc.Server, srv YourServiceServer) {
	s.RegisterService(&_YourService_serviceDesc, srv)
}

func _YourService_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.YourService/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.YourService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YourService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notibox.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _YourService_Do_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _YourService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notibox/notibox.proto",
}

// NotiboxServiceClient is the client API for NotiboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotiboxServiceClient interface {
	Upsert(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error)
	ReadTopic(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UnreadTopic(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ListNotis(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error)
	DecreaseNew(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*Box, error)
	ReadBox(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*Box, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type notiboxServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotiboxServiceClient(cc *grpc.ClientConn) NotiboxServiceClient {
	return &notiboxServiceClient{cc}
}

func (c *notiboxServiceClient) Upsert(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) ReadTopic(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/ReadTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) UnreadTopic(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/UnreadTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) ListNotis(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/ListNotis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) DecreaseNew(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/DecreaseNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) ReadBox(ctx context.Context, in *NotiboxRequest, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/ReadBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/notibox.NotiboxService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiboxServiceServer is the server API for NotiboxService service.
type NotiboxServiceServer interface {
	Upsert(context.Context, *Notification) (*Notification, error)
	ReadTopic(context.Context, *NotiboxRequest) (*common.Empty, error)
	UnreadTopic(context.Context, *NotiboxRequest) (*common.Empty, error)
	ListNotis(context.Context, *ListRequest) (*Notifications, error)
	DecreaseNew(context.Context, *NotiboxRequest) (*Box, error)
	ReadBox(context.Context, *NotiboxRequest) (*Box, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterNotiboxServiceServer(s *grpc.Server, srv NotiboxServiceServer) {
	s.RegisterService(&_NotiboxService_serviceDesc, srv)
}

func _NotiboxService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).Upsert(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_ReadTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).ReadTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/ReadTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).ReadTopic(ctx, req.(*NotiboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_UnreadTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).UnreadTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/UnreadTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).UnreadTopic(ctx, req.(*NotiboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_ListNotis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).ListNotis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/ListNotis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).ListNotis(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_DecreaseNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).DecreaseNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/DecreaseNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).DecreaseNew(ctx, req.(*NotiboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_ReadBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).ReadBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/ReadBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).ReadBox(ctx, req.(*NotiboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notibox.NotiboxService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotiboxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notibox.NotiboxService",
	HandlerType: (*NotiboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _NotiboxService_Upsert_Handler,
		},
		{
			MethodName: "ReadTopic",
			Handler:    _NotiboxService_ReadTopic_Handler,
		},
		{
			MethodName: "UnreadTopic",
			Handler:    _NotiboxService_UnreadTopic_Handler,
		},
		{
			MethodName: "ListNotis",
			Handler:    _NotiboxService_ListNotis_Handler,
		},
		{
			MethodName: "DecreaseNew",
			Handler:    _NotiboxService_DecreaseNew_Handler,
		},
		{
			MethodName: "ReadBox",
			Handler:    _NotiboxService_ReadBox_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NotiboxService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notibox/notibox.proto",
}
