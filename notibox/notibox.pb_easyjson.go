// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package notibox

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(in *jlexer.Lexer, out *TopicRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "topics":
			out.Topics = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(out *jwriter.Writer, in TopicRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.Topics != "" {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topics))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopicRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopicRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopicRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopicRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "trial_expired":
			out.TrialExpired = bool(in.Bool())
		case "system_maintainance_scheduled_1":
			out.SystemMaintainanceScheduled_1 = bool(in.Bool())
		case "system_maintainance_scheduled_2":
			out.SystemMaintainanceScheduled_2 = bool(in.Bool())
		case "system_maintainance_completed":
			out.SystemMaintainanceCompleted = bool(in.Bool())
		case "agent_activated":
			out.AgentActivated = bool(in.Bool())
		case "conversation_unassigned":
			out.ConversationUnassigned = bool(in.Bool())
		case "agent_permission_updated":
			out.AgentPermissionUpdated = bool(in.Bool())
		case "account_created":
			out.AccountCreated = bool(in.Bool())
		case "trial_almost_expired":
			out.TrialAlmostExpired = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.TrialExpired {
		const prefix string = ",\"trial_expired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TrialExpired))
	}
	if in.SystemMaintainanceScheduled_1 {
		const prefix string = ",\"system_maintainance_scheduled_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SystemMaintainanceScheduled_1))
	}
	if in.SystemMaintainanceScheduled_2 {
		const prefix string = ",\"system_maintainance_scheduled_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SystemMaintainanceScheduled_2))
	}
	if in.SystemMaintainanceCompleted {
		const prefix string = ",\"system_maintainance_completed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SystemMaintainanceCompleted))
	}
	if in.AgentActivated {
		const prefix string = ",\"agent_activated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AgentActivated))
	}
	if in.ConversationUnassigned {
		const prefix string = ",\"conversation_unassigned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ConversationUnassigned))
	}
	if in.AgentPermissionUpdated {
		const prefix string = ",\"agent_permission_updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AgentPermissionUpdated))
	}
	if in.AccountCreated {
		const prefix string = ",\"account_created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AccountCreated))
	}
	if in.TrialAlmostExpired {
		const prefix string = ",\"trial_almost_expired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TrialAlmostExpired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(in *jlexer.Lexer, out *Notifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				if out.Notifications == nil {
					out.Notifications = new(Notification)
				}
				(*out.Notifications).UnmarshalEasyJSON(in)
			}
		case "anchor":
			out.Anchor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(out *jwriter.Writer, in Notifications) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Notifications != nil {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Notifications).MarshalEasyJSON(out)
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "read":
			out.Read = int64(in.Int64())
		case "seen":
			out.Seen = int64(in.Int64())
		case "view":
			out.View = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	if in.Read != 0 {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Read))
	}
	if in.Seen != 0 {
		const prefix string = ",\"seen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Seen))
	}
	if in.View {
		const prefix string = ",\"view\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.View))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(in *jlexer.Lexer, out *ListRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "agent_id":
			out.AgentId = string(in.String())
		case "anchor":
			out.Anchor = string(in.String())
		case "limit":
			out.Limit = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(out *jwriter.Writer, in ListRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	if in.Anchor != "" {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Anchor))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(in *jlexer.Lexer, out *Box) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			out.AccountId = string(in.String())
		case "new_count":
			out.NewCount = int64(in.Int64())
		case "agent_id":
			out.AgentId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(out *jwriter.Writer, in Box) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.NewCount != 0 {
		const prefix string = ",\"new_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NewCount))
	}
	if in.AgentId != "" {
		const prefix string = ",\"agent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Box) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Box) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Box) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Box) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(in *jlexer.Lexer, out *AddNotificationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_ids":
			if in.IsNull() {
				in.Skip()
				out.AccountIds = nil
			} else {
				in.Delim('[')
				if out.AccountIds == nil {
					if !in.IsDelim(']') {
						out.AccountIds = make([]string, 0, 4)
					} else {
						out.AccountIds = []string{}
					}
				} else {
					out.AccountIds = (out.AccountIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AccountIds = append(out.AccountIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.AgentIds = append(out.AgentIds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(Notification)
				}
				(*out.Notification).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(out *jwriter.Writer, in AddNotificationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.AccountIds) != 0 {
		const prefix string = ",\"account_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.AccountIds {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.AgentIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Notification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddNotificationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddNotificationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddNotificationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddNotificationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(l, v)
}
