// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package notibox

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/subiz/header/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(in *jlexer.Lexer, out *ReadNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Topics = append(out.Topics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				if out.Read == nil {
					out.Read = new(bool)
				}
				*out.Read = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(out *jwriter.Writer, in ReadNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Topics {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.Read != nil {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(in *jlexer.Lexer, out *Notifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]*Notification, 0, 8)
					} else {
						out.Notifications = []*Notification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Notification
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Notification)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Notifications = append(out.Notifications, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(out *jwriter.Writer, in Notifications) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Notifications {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox1(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(string)
				}
				*out.Data = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				if out.Read == nil {
					out.Read = new(int64)
				}
				*out.Read = int64(in.Int64())
			}
		case "view":
			if in.IsNull() {
				in.Skip()
				out.View = nil
			} else {
				if out.View == nil {
					out.View = new(bool)
				}
				*out.View = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Data))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Read != nil {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Read))
	}
	if in.View != nil {
		const prefix string = ",\"view\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.View))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox2(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(in *jlexer.Lexer, out *NotiboxRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				if out.Topic == nil {
					out.Topic = new(string)
				}
				*out.Topic = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(out *jwriter.Writer, in NotiboxRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.Topic != nil {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Topic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotiboxRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotiboxRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotiboxRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotiboxRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox3(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(in *jlexer.Lexer, out *ListRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "anchor":
			if in.IsNull() {
				in.Skip()
				out.Anchor = nil
			} else {
				if out.Anchor == nil {
					out.Anchor = new(string)
				}
				*out.Anchor = string(in.String())
			}
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(int32)
				}
				*out.Limit = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(out *jwriter.Writer, in ListRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.Anchor != nil {
		const prefix string = ",\"anchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Anchor))
	}
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox4(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(in *jlexer.Lexer, out *Box) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(string)
				}
				*out.Box = string(in.String())
			}
		case "new_count":
			if in.IsNull() {
				in.Skip()
				out.NewCount = nil
			} else {
				if out.NewCount == nil {
					out.NewCount = new(int64)
				}
				*out.NewCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(out *jwriter.Writer, in Box) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Box))
	}
	if in.NewCount != nil {
		const prefix string = ",\"new_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.NewCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Box) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Box) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Box) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Box) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox5(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(in *jlexer.Lexer, out *AllType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nts":
			if in.IsNull() {
				in.Skip()
				out.Nts = nil
			} else {
				if out.Nts == nil {
					out.Nts = new(Notifications)
				}
				(*out.Nts).UnmarshalEasyJSON(in)
			}
		case "listr":
			if in.IsNull() {
				in.Skip()
				out.Listr = nil
			} else {
				if out.Listr == nil {
					out.Listr = new(ListRequest)
				}
				(*out.Listr).UnmarshalEasyJSON(in)
			}
		case "rno":
			if in.IsNull() {
				in.Skip()
				out.Rno = nil
			} else {
				if out.Rno == nil {
					out.Rno = new(ReadNotification)
				}
				(*out.Rno).UnmarshalEasyJSON(in)
			}
		case "anorfr":
			if in.IsNull() {
				in.Skip()
				out.Anorfr = nil
			} else {
				if out.Anorfr == nil {
					out.Anorfr = new(AddNotificationRequest)
				}
				(*out.Anorfr).UnmarshalEasyJSON(in)
			}
		case "noti":
			if in.IsNull() {
				in.Skip()
				out.Noti = nil
			} else {
				if out.Noti == nil {
					out.Noti = new(Notification)
				}
				(*out.Noti).UnmarshalEasyJSON(in)
			}
		case "box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(Box)
				}
				(*out.Box).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(out *jwriter.Writer, in AllType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Nts != nil {
		const prefix string = ",\"nts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Nts).MarshalEasyJSON(out)
	}
	if in.Listr != nil {
		const prefix string = ",\"listr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Listr).MarshalEasyJSON(out)
	}
	if in.Rno != nil {
		const prefix string = ",\"rno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Rno).MarshalEasyJSON(out)
	}
	if in.Anorfr != nil {
		const prefix string = ",\"anorfr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Anorfr).MarshalEasyJSON(out)
	}
	if in.Noti != nil {
		const prefix string = ",\"noti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Noti).MarshalEasyJSON(out)
	}
	if in.Box != nil {
		const prefix string = ",\"box\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Box).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox6(l, v)
}
func easyjsonD06bf781DecodeGithubComSubizHeaderNotibox7(in *jlexer.Lexer, out *AddNotificationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "boxs":
			if in.IsNull() {
				in.Skip()
				out.Boxs = nil
			} else {
				in.Delim('[')
				if out.Boxs == nil {
					if !in.IsDelim(']') {
						out.Boxs = make([]string, 0, 4)
					} else {
						out.Boxs = []string{}
					}
				} else {
					out.Boxs = (out.Boxs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Boxs = append(out.Boxs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(Notification)
				}
				(*out.Notification).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD06bf781EncodeGithubComSubizHeaderNotibox7(out *jwriter.Writer, in AddNotificationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if len(in.Boxs) != 0 {
		const prefix string = ",\"boxs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Boxs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Notification).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddNotificationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddNotificationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD06bf781EncodeGithubComSubizHeaderNotibox7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddNotificationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddNotificationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD06bf781DecodeGithubComSubizHeaderNotibox7(l, v)
}
