// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fabikon

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon(in *jlexer.Lexer, out *UserAvail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "fbuser_id":
			if in.IsNull() {
				in.Skip()
				out.FbuserId = nil
			} else {
				if out.FbuserId == nil {
					out.FbuserId = new(string)
				}
				*out.FbuserId = string(in.String())
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				if out.Availability == nil {
					out.Availability = new(bool)
				}
				*out.Availability = bool(in.Bool())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon(out *jwriter.Writer, in UserAvail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.FbuserId != nil {
		const prefix string = ",\"fbuser_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FbuserId))
	}
	if in.Availability != nil {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Availability))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAvail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAvail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAvail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAvail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon1(in *jlexer.Lexer, out *SubscribeRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			if in.IsNull() {
				in.Skip()
				out.Success = nil
			} else {
				if out.Success == nil {
					out.Success = new(bool)
				}
				*out.Success = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon1(out *jwriter.Writer, in SubscribeRet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Success != nil {
		const prefix string = ",\"success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon1(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon2(in *jlexer.Lexer, out *LongLivedAccessToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			if in.IsNull() {
				in.Skip()
				out.AccessToken = nil
			} else {
				if out.AccessToken == nil {
					out.AccessToken = new(string)
				}
				*out.AccessToken = string(in.String())
			}
		case "token_type":
			if in.IsNull() {
				in.Skip()
				out.TokenType = nil
			} else {
				if out.TokenType == nil {
					out.TokenType = new(string)
				}
				*out.TokenType = string(in.String())
			}
		case "expires_in":
			if in.IsNull() {
				in.Skip()
				out.ExpiresIn = nil
			} else {
				if out.ExpiresIn == nil {
					out.ExpiresIn = new(int32)
				}
				*out.ExpiresIn = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon2(out *jwriter.Writer, in LongLivedAccessToken) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccessToken != nil {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccessToken))
	}
	if in.TokenType != nil {
		const prefix string = ",\"token_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TokenType))
	}
	if in.ExpiresIn != nil {
		const prefix string = ",\"expires_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ExpiresIn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LongLivedAccessToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LongLivedAccessToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LongLivedAccessToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LongLivedAccessToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon2(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon3(in *jlexer.Lexer, out *GenericElement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "item_url":
			if in.IsNull() {
				in.Skip()
				out.ItemUrl = nil
			} else {
				if out.ItemUrl == nil {
					out.ItemUrl = new(string)
				}
				*out.ItemUrl = string(in.String())
			}
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageUrl = nil
			} else {
				if out.ImageUrl == nil {
					out.ImageUrl = new(string)
				}
				*out.ImageUrl = string(in.String())
			}
		case "subtitle":
			if in.IsNull() {
				in.Skip()
				out.Subtitle = nil
			} else {
				if out.Subtitle == nil {
					out.Subtitle = new(string)
				}
				*out.Subtitle = string(in.String())
			}
		case "default_action":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(FbAction)
				}
				(*out.DefaultAction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon3(out *jwriter.Writer, in GenericElement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.ItemUrl != nil {
		const prefix string = ",\"item_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ItemUrl))
	}
	if in.ImageUrl != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ImageUrl))
	}
	if in.Subtitle != nil {
		const prefix string = ",\"subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Subtitle))
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"default_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DefaultAction).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericElement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericElement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericElement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericElement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon3(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon4(in *jlexer.Lexer, out *FbWebhookEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			if in.IsNull() {
				in.Skip()
				out.Object = nil
			} else {
				if out.Object == nil {
					out.Object = new(string)
				}
				*out.Object = string(in.String())
			}
		case "entry":
			if in.IsNull() {
				in.Skip()
				out.Entry = nil
			} else {
				in.Delim('[')
				if out.Entry == nil {
					if !in.IsDelim(']') {
						out.Entry = make([]*FbEntry, 0, 8)
					} else {
						out.Entry = []*FbEntry{}
					}
				} else {
					out.Entry = (out.Entry)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *FbEntry
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(FbEntry)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Entry = append(out.Entry, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon4(out *jwriter.Writer, in FbWebhookEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Object != nil {
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Object))
	}
	if len(in.Entry) != 0 {
		const prefix string = ",\"entry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Entry {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbWebhookEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbWebhookEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbWebhookEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbWebhookEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon4(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon5(in *jlexer.Lexer, out *FbSender) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon5(out *jwriter.Writer, in FbSender) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbSender) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbSender) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbSender) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbSender) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon5(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon6(in *jlexer.Lexer, out *FbSendResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recipient_id":
			if in.IsNull() {
				in.Skip()
				out.RecipientId = nil
			} else {
				if out.RecipientId == nil {
					out.RecipientId = new(string)
				}
				*out.RecipientId = string(in.String())
			}
		case "message_id":
			if in.IsNull() {
				in.Skip()
				out.MessageId = nil
			} else {
				if out.MessageId == nil {
					out.MessageId = new(string)
				}
				*out.MessageId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon6(out *jwriter.Writer, in FbSendResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RecipientId != nil {
		const prefix string = ",\"recipient_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RecipientId))
	}
	if in.MessageId != nil {
		const prefix string = ",\"message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbSendResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbSendResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbSendResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbSendResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon6(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon7(in *jlexer.Lexer, out *FbResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon7(out *jwriter.Writer, in FbResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon7(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon8(in *jlexer.Lexer, out *FbRecipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon8(out *jwriter.Writer, in FbRecipient) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbRecipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbRecipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbRecipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbRecipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon8(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon9(in *jlexer.Lexer, out *FbRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "watermark":
			if in.IsNull() {
				in.Skip()
				out.Watermark = nil
			} else {
				if out.Watermark == nil {
					out.Watermark = new(int64)
				}
				*out.Watermark = int64(in.Int64())
			}
		case "seq":
			if in.IsNull() {
				in.Skip()
				out.Seq = nil
			} else {
				if out.Seq == nil {
					out.Seq = new(int32)
				}
				*out.Seq = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon9(out *jwriter.Writer, in FbRead) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Watermark != nil {
		const prefix string = ",\"watermark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Watermark))
	}
	if in.Seq != nil {
		const prefix string = ",\"seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon9(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon10(in *jlexer.Lexer, out *FbPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "is_reuseable":
			if in.IsNull() {
				in.Skip()
				out.IsReuseable = nil
			} else {
				if out.IsReuseable == nil {
					out.IsReuseable = new(bool)
				}
				*out.IsReuseable = bool(in.Bool())
			}
		case "template_type":
			if in.IsNull() {
				in.Skip()
				out.TemplateType = nil
			} else {
				if out.TemplateType == nil {
					out.TemplateType = new(string)
				}
				*out.TemplateType = string(in.String())
			}
		case "sharable":
			if in.IsNull() {
				in.Skip()
				out.Sharable = nil
			} else {
				if out.Sharable == nil {
					out.Sharable = new(bool)
				}
				*out.Sharable = bool(in.Bool())
			}
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]*GenericElement, 0, 8)
					} else {
						out.Elements = []*GenericElement{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *GenericElement
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(GenericElement)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Elements = append(out.Elements, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon10(out *jwriter.Writer, in FbPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	if in.IsReuseable != nil {
		const prefix string = ",\"is_reuseable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsReuseable))
	}
	if in.TemplateType != nil {
		const prefix string = ",\"template_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TemplateType))
	}
	if in.Sharable != nil {
		const prefix string = ",\"sharable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Sharable))
	}
	if len(in.Elements) != 0 {
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Elements {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon10(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon11(in *jlexer.Lexer, out *FbPageRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*FbPageEntry, 0, 8)
					} else {
						out.Data = []*FbPageEntry{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *FbPageEntry
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(FbPageEntry)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon11(out *jwriter.Writer, in FbPageRet) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbPageRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbPageRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbPageRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbPageRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon11(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon12(in *jlexer.Lexer, out *FbPagePictureData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon12(out *jwriter.Writer, in FbPagePictureData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbPagePictureData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbPagePictureData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbPagePictureData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbPagePictureData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon12(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon13(in *jlexer.Lexer, out *FbPagePicture) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(FbPagePictureData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon13(out *jwriter.Writer, in FbPagePicture) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbPagePicture) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbPagePicture) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbPagePicture) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbPagePicture) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon13(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon14(in *jlexer.Lexer, out *FbPageEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "picture":
			if in.IsNull() {
				in.Skip()
				out.Picture = nil
			} else {
				if out.Picture == nil {
					out.Picture = new(FbPagePicture)
				}
				(*out.Picture).UnmarshalEasyJSON(in)
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "access_token":
			if in.IsNull() {
				in.Skip()
				out.AccessToken = nil
			} else {
				if out.AccessToken == nil {
					out.AccessToken = new(string)
				}
				*out.AccessToken = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon14(out *jwriter.Writer, in FbPageEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Picture != nil {
		const prefix string = ",\"picture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Picture).MarshalEasyJSON(out)
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.AccessToken != nil {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccessToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbPageEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbPageEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbPageEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbPageEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon14(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon15(in *jlexer.Lexer, out *FbMessaging) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender":
			if in.IsNull() {
				in.Skip()
				out.Sender = nil
			} else {
				if out.Sender == nil {
					out.Sender = new(FbSender)
				}
				(*out.Sender).UnmarshalEasyJSON(in)
			}
		case "recipient":
			if in.IsNull() {
				in.Skip()
				out.Recipient = nil
			} else {
				if out.Recipient == nil {
					out.Recipient = new(FbRecipient)
				}
				(*out.Recipient).UnmarshalEasyJSON(in)
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(int64)
				}
				*out.Timestamp = int64(in.Int64())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(FbMessage)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				if out.Delivery == nil {
					out.Delivery = new(FbDelivery)
				}
				(*out.Delivery).UnmarshalEasyJSON(in)
			}
		case "message_type":
			if in.IsNull() {
				in.Skip()
				out.MessageType = nil
			} else {
				if out.MessageType == nil {
					out.MessageType = new(string)
				}
				*out.MessageType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon15(out *jwriter.Writer, in FbMessaging) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sender != nil {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sender).MarshalEasyJSON(out)
	}
	if in.Recipient != nil {
		const prefix string = ",\"recipient\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Recipient).MarshalEasyJSON(out)
	}
	if in.Timestamp != nil {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Timestamp))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Delivery != nil {
		const prefix string = ",\"delivery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Delivery).MarshalEasyJSON(out)
	}
	if in.MessageType != nil {
		const prefix string = ",\"message_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbMessaging) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbMessaging) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbMessaging) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbMessaging) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon15(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon16(in *jlexer.Lexer, out *FbMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mid":
			if in.IsNull() {
				in.Skip()
				out.Mid = nil
			} else {
				if out.Mid == nil {
					out.Mid = new(string)
				}
				*out.Mid = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*FbAttachment, 0, 8)
					} else {
						out.Attachments = []*FbAttachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *FbAttachment
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(FbAttachment)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				if out.Read == nil {
					out.Read = new(FbRead)
				}
				(*out.Read).UnmarshalEasyJSON(in)
			}
		case "attachment":
			if in.IsNull() {
				in.Skip()
				out.Attachment = nil
			} else {
				if out.Attachment == nil {
					out.Attachment = new(FbAttachment)
				}
				(*out.Attachment).UnmarshalEasyJSON(in)
			}
		case "is_echo":
			if in.IsNull() {
				in.Skip()
				out.IsEcho = nil
			} else {
				if out.IsEcho == nil {
					out.IsEcho = new(bool)
				}
				*out.IsEcho = bool(in.Bool())
			}
		case "app_id":
			if in.IsNull() {
				in.Skip()
				out.AppId = nil
			} else {
				if out.AppId == nil {
					out.AppId = new(int64)
				}
				*out.AppId = int64(in.Int64())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(string)
				}
				*out.Metadata = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon16(out *jwriter.Writer, in FbMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Mid != nil {
		const prefix string = ",\"mid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mid))
	}
	if in.Text != nil {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Text))
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Attachments {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Read != nil {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Read).MarshalEasyJSON(out)
	}
	if in.Attachment != nil {
		const prefix string = ",\"attachment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Attachment).MarshalEasyJSON(out)
	}
	if in.IsEcho != nil {
		const prefix string = ",\"is_echo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsEcho))
	}
	if in.AppId != nil {
		const prefix string = ",\"app_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.AppId))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Metadata))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon16(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon17(in *jlexer.Lexer, out *FbEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(int64)
				}
				*out.Time = int64(in.Int64())
			}
		case "messaging":
			if in.IsNull() {
				in.Skip()
				out.Messaging = nil
			} else {
				in.Delim('[')
				if out.Messaging == nil {
					if !in.IsDelim(']') {
						out.Messaging = make([]*FbMessaging, 0, 8)
					} else {
						out.Messaging = []*FbMessaging{}
					}
				} else {
					out.Messaging = (out.Messaging)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *FbMessaging
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(FbMessaging)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Messaging = append(out.Messaging, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon17(out *jwriter.Writer, in FbEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Time))
	}
	if len(in.Messaging) != 0 {
		const prefix string = ",\"messaging\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Messaging {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon17(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon18(in *jlexer.Lexer, out *FbDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mids":
			if in.IsNull() {
				in.Skip()
				out.Mids = nil
			} else {
				in.Delim('[')
				if out.Mids == nil {
					if !in.IsDelim(']') {
						out.Mids = make([]string, 0, 4)
					} else {
						out.Mids = []string{}
					}
				} else {
					out.Mids = (out.Mids)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Mids = append(out.Mids, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "watermark":
			if in.IsNull() {
				in.Skip()
				out.Watermark = nil
			} else {
				if out.Watermark == nil {
					out.Watermark = new(int64)
				}
				*out.Watermark = int64(in.Int64())
			}
		case "seq":
			if in.IsNull() {
				in.Skip()
				out.Seq = nil
			} else {
				if out.Seq == nil {
					out.Seq = new(int32)
				}
				*out.Seq = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon18(out *jwriter.Writer, in FbDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Mids) != 0 {
		const prefix string = ",\"mids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Mids {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Watermark != nil {
		const prefix string = ",\"watermark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Watermark))
	}
	if in.Seq != nil {
		const prefix string = ",\"seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon18(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon19(in *jlexer.Lexer, out *FbAttachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(FbPayload)
				}
				(*out.Payload).UnmarshalEasyJSON(in)
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "URL":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon19(out *jwriter.Writer, in FbAttachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Payload).MarshalEasyJSON(out)
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.URL != nil {
		const prefix string = ",\"URL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbAttachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbAttachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbAttachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbAttachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon19(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon20(in *jlexer.Lexer, out *FbAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon20(out *jwriter.Writer, in FbAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon20(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon21(in *jlexer.Lexer, out *Fb2SbEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fbmid":
			if in.IsNull() {
				in.Skip()
				out.Fbmid = nil
			} else {
				if out.Fbmid == nil {
					out.Fbmid = new(string)
				}
				*out.Fbmid = string(in.String())
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "conversation_id":
			if in.IsNull() {
				in.Skip()
				out.ConversationId = nil
			} else {
				if out.ConversationId == nil {
					out.ConversationId = new(string)
				}
				*out.ConversationId = string(in.String())
			}
		case "sbmid":
			if in.IsNull() {
				in.Skip()
				out.Sbmid = nil
			} else {
				if out.Sbmid == nil {
					out.Sbmid = new(string)
				}
				*out.Sbmid = string(in.String())
			}
		case "page_id":
			if in.IsNull() {
				in.Skip()
				out.PageId = nil
			} else {
				if out.PageId == nil {
					out.PageId = new(string)
				}
				*out.PageId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon21(out *jwriter.Writer, in Fb2SbEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Fbmid != nil {
		const prefix string = ",\"fbmid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fbmid))
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConversationId != nil {
		const prefix string = ",\"conversation_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConversationId))
	}
	if in.Sbmid != nil {
		const prefix string = ",\"sbmid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Sbmid))
	}
	if in.PageId != nil {
		const prefix string = ",\"page_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fb2SbEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fb2SbEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fb2SbEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fb2SbEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon21(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon22(in *jlexer.Lexer, out *FacebookUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			if in.IsNull() {
				in.Skip()
				out.LastName = nil
			} else {
				if out.LastName == nil {
					out.LastName = new(string)
				}
				*out.LastName = string(in.String())
			}
		case "profile_pic":
			if in.IsNull() {
				in.Skip()
				out.ProfilePic = nil
			} else {
				if out.ProfilePic == nil {
					out.ProfilePic = new(string)
				}
				*out.ProfilePic = string(in.String())
			}
		case "locale":
			if in.IsNull() {
				in.Skip()
				out.Locale = nil
			} else {
				if out.Locale == nil {
					out.Locale = new(string)
				}
				*out.Locale = string(in.String())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(float32)
				}
				*out.Timezone = float32(in.Float32())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(string)
				}
				*out.Gender = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon22(out *jwriter.Writer, in FacebookUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != nil {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FirstName))
	}
	if in.LastName != nil {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LastName))
	}
	if in.ProfilePic != nil {
		const prefix string = ",\"profile_pic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ProfilePic))
	}
	if in.Locale != nil {
		const prefix string = ",\"locale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Locale))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(*in.Timezone))
	}
	if in.Gender != nil {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Gender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FacebookUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FacebookUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FacebookUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FacebookUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon22(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon23(in *jlexer.Lexer, out *FacebookPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "picture_url":
			if in.IsNull() {
				in.Skip()
				out.PictureUrl = nil
			} else {
				if out.PictureUrl == nil {
					out.PictureUrl = new(string)
				}
				*out.PictureUrl = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "access_token":
			if in.IsNull() {
				in.Skip()
				out.AccessToken = nil
			} else {
				if out.AccessToken == nil {
					out.AccessToken = new(string)
				}
				*out.AccessToken = string(in.String())
			}
		case "updated":
			if in.IsNull() {
				in.Skip()
				out.Updated = nil
			} else {
				if out.Updated == nil {
					out.Updated = new(int64)
				}
				*out.Updated = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon23(out *jwriter.Writer, in FacebookPage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.PictureUrl != nil {
		const prefix string = ",\"picture_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PictureUrl))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.AccessToken != nil {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccessToken))
	}
	if in.Updated != nil {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FacebookPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FacebookPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FacebookPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FacebookPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon23(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon24(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(int32)
				}
				*out.Code = int32(in.Int32())
			}
		case "error_subcode":
			if in.IsNull() {
				in.Skip()
				out.ErrorSubcode = nil
			} else {
				if out.ErrorSubcode == nil {
					out.ErrorSubcode = new(int32)
				}
				*out.ErrorSubcode = int32(in.Int32())
			}
		case "fbtrace_id":
			if in.IsNull() {
				in.Skip()
				out.FbtraceId = nil
			} else {
				if out.FbtraceId == nil {
					out.FbtraceId = new(string)
				}
				*out.FbtraceId = string(in.String())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon24(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Code))
	}
	if in.ErrorSubcode != nil {
		const prefix string = ",\"error_subcode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ErrorSubcode))
	}
	if in.FbtraceId != nil {
		const prefix string = ",\"fbtrace_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FbtraceId))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Message))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon24(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon25(in *jlexer.Lexer, out *CurrentConvo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "convo_id":
			if in.IsNull() {
				in.Skip()
				out.ConvoId = nil
			} else {
				if out.ConvoId == nil {
					out.ConvoId = new(string)
				}
				*out.ConvoId = string(in.String())
			}
		case "page_id":
			if in.IsNull() {
				in.Skip()
				out.PageId = nil
			} else {
				if out.PageId == nil {
					out.PageId = new(string)
				}
				*out.PageId = string(in.String())
			}
		case "fbuser_id":
			if in.IsNull() {
				in.Skip()
				out.FbuserId = nil
			} else {
				if out.FbuserId == nil {
					out.FbuserId = new(string)
				}
				*out.FbuserId = string(in.String())
			}
		case "sbuser_id":
			if in.IsNull() {
				in.Skip()
				out.SbuserId = nil
			} else {
				if out.SbuserId == nil {
					out.SbuserId = new(string)
				}
				*out.SbuserId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon25(out *jwriter.Writer, in CurrentConvo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.ConvoId != nil {
		const prefix string = ",\"convo_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ConvoId))
	}
	if in.PageId != nil {
		const prefix string = ",\"page_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PageId))
	}
	if in.FbuserId != nil {
		const prefix string = ",\"fbuser_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FbuserId))
	}
	if in.SbuserId != nil {
		const prefix string = ",\"sbuser_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SbuserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrentConvo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrentConvo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrentConvo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrentConvo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon25(l, v)
}
func easyjson6cc3c244DecodeGitSubizNetHeaderFabikon26(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(string)
				}
				*out.Id = string(in.String())
			}
		case "page_id":
			if in.IsNull() {
				in.Skip()
				out.PageId = nil
			} else {
				if out.PageId == nil {
					out.PageId = new(string)
				}
				*out.PageId = string(in.String())
			}
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(int64)
				}
				*out.Created = int64(in.Int64())
			}
		case "fbuserid":
			if in.IsNull() {
				in.Skip()
				out.Fbuserid = nil
			} else {
				if out.Fbuserid == nil {
					out.Fbuserid = new(string)
				}
				*out.Fbuserid = string(in.String())
			}
		case "sbuserid":
			if in.IsNull() {
				in.Skip()
				out.Sbuserid = nil
			} else {
				if out.Sbuserid == nil {
					out.Sbuserid = new(string)
				}
				*out.Sbuserid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6cc3c244EncodeGitSubizNetHeaderFabikon26(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Id != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Id))
	}
	if in.PageId != nil {
		const prefix string = ",\"page_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PageId))
	}
	if in.Created != nil {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Created))
	}
	if in.Fbuserid != nil {
		const prefix string = ",\"fbuserid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Fbuserid))
	}
	if in.Sbuserid != nil {
		const prefix string = ",\"sbuserid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Sbuserid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6cc3c244EncodeGitSubizNetHeaderFabikon26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6cc3c244DecodeGitSubizNetHeaderFabikon26(l, v)
}
