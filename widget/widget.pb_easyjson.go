// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package widget

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	user "github.com/subiz/header/user"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget(in *jlexer.Lexer, out *widgetServiceClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget(out *jwriter.Writer, in widgetServiceClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v widgetServiceClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v widgetServiceClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *widgetServiceClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *widgetServiceClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget(l, v)
}
func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget1(in *jlexer.Lexer, out *UserSetting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(account.Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(user.User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserId = nil
			} else {
				if out.UserId == nil {
					out.UserId = new(string)
				}
				*out.UserId = string(in.String())
			}
		case "sound_enabled":
			if in.IsNull() {
				in.Skip()
				out.SoundEnabled = nil
			} else {
				if out.SoundEnabled == nil {
					out.SoundEnabled = new(bool)
				}
				*out.SoundEnabled = bool(in.Bool())
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(string)
				}
				*out.Language = string(in.String())
			}
		case "send_transcript":
			if in.IsNull() {
				in.Skip()
				out.SendTranscript = nil
			} else {
				if out.SendTranscript == nil {
					out.SendTranscript = new(bool)
				}
				*out.SendTranscript = bool(in.Bool())
			}
		case "account_setting":
			if in.IsNull() {
				in.Skip()
				out.AccountSetting = nil
			} else {
				if out.AccountSetting == nil {
					out.AccountSetting = new(Setting)
				}
				(*out.AccountSetting).UnmarshalEasyJSON(in)
			}
		case "desktop_notification":
			if in.IsNull() {
				in.Skip()
				out.DesktopNotification = nil
			} else {
				if out.DesktopNotification == nil {
					out.DesktopNotification = new(bool)
				}
				*out.DesktopNotification = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget1(out *jwriter.Writer, in UserSetting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Account != nil {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Account).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UserId != nil {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserId))
	}
	if in.SoundEnabled != nil {
		const prefix string = ",\"sound_enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SoundEnabled))
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Language))
	}
	if in.SendTranscript != nil {
		const prefix string = ",\"send_transcript\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendTranscript))
	}
	if in.AccountSetting != nil {
		const prefix string = ",\"account_setting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AccountSetting).MarshalEasyJSON(out)
	}
	if in.DesktopNotification != nil {
		const prefix string = ",\"desktop_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DesktopNotification))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSetting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSetting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSetting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSetting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget1(l, v)
}
func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget2(in *jlexer.Lexer, out *Theme) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "custom_css":
			if in.IsNull() {
				in.Skip()
				out.CustomCss = nil
			} else {
				if out.CustomCss == nil {
					out.CustomCss = new(string)
				}
				*out.CustomCss = string(in.String())
			}
		case "widget_position":
			if in.IsNull() {
				in.Skip()
				out.WidgetPosition = nil
			} else {
				if out.WidgetPosition == nil {
					out.WidgetPosition = new(string)
				}
				*out.WidgetPosition = string(in.String())
			}
		case "window_mode":
			if in.IsNull() {
				in.Skip()
				out.WindowMode = nil
			} else {
				if out.WindowMode == nil {
					out.WindowMode = new(string)
				}
				*out.WindowMode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget2(out *jwriter.Writer, in Theme) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.CustomCss != nil {
		const prefix string = ",\"custom_css\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CustomCss))
	}
	if in.WidgetPosition != nil {
		const prefix string = ",\"widget_position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WidgetPosition))
	}
	if in.WindowMode != nil {
		const prefix string = ",\"window_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WindowMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Theme) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Theme) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Theme) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Theme) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget2(l, v)
}
func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget3(in *jlexer.Lexer, out *Sound) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "new_conversation":
			if in.IsNull() {
				in.Skip()
				out.NewConversation = nil
			} else {
				if out.NewConversation == nil {
					out.NewConversation = new(string)
				}
				*out.NewConversation = string(in.String())
			}
		case "file_create":
			if in.IsNull() {
				in.Skip()
				out.FileCreate = nil
			} else {
				if out.FileCreate == nil {
					out.FileCreate = new(string)
				}
				*out.FileCreate = string(in.String())
			}
		case "new_message":
			if in.IsNull() {
				in.Skip()
				out.NewMessage = nil
			} else {
				if out.NewMessage == nil {
					out.NewMessage = new(string)
				}
				*out.NewMessage = string(in.String())
			}
		case "message_send_failed":
			if in.IsNull() {
				in.Skip()
				out.MessageSendFailed = nil
			} else {
				if out.MessageSendFailed == nil {
					out.MessageSendFailed = new(string)
				}
				*out.MessageSendFailed = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget3(out *jwriter.Writer, in Sound) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if in.NewConversation != nil {
		const prefix string = ",\"new_conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NewConversation))
	}
	if in.FileCreate != nil {
		const prefix string = ",\"file_create\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.FileCreate))
	}
	if in.NewMessage != nil {
		const prefix string = ",\"new_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.NewMessage))
	}
	if in.MessageSendFailed != nil {
		const prefix string = ",\"message_send_failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MessageSendFailed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sound) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sound) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sound) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sound) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget3(l, v)
}
func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget4(in *jlexer.Lexer, out *Setting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "account_id":
			if in.IsNull() {
				in.Skip()
				out.AccountId = nil
			} else {
				if out.AccountId == nil {
					out.AccountId = new(string)
				}
				*out.AccountId = string(in.String())
			}
		case "widget_version":
			if in.IsNull() {
				in.Skip()
				out.WidgetVersion = nil
			} else {
				if out.WidgetVersion == nil {
					out.WidgetVersion = new(string)
				}
				*out.WidgetVersion = string(in.String())
			}
		case "sound":
			if in.IsNull() {
				in.Skip()
				out.Sound = nil
			} else {
				if out.Sound == nil {
					out.Sound = new(Sound)
				}
				(*out.Sound).UnmarshalEasyJSON(in)
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(string)
				}
				*out.Language = string(in.String())
			}
		case "theme":
			if in.IsNull() {
				in.Skip()
				out.Theme = nil
			} else {
				if out.Theme == nil {
					out.Theme = new(Theme)
				}
				(*out.Theme).UnmarshalEasyJSON(in)
			}
		case "replytime":
			if in.IsNull() {
				in.Skip()
				out.Replytime = nil
			} else {
				if out.Replytime == nil {
					out.Replytime = new(int32)
				}
				*out.Replytime = int32(in.Int32())
			}
		case "agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]*account.Agent, 0, 8)
					} else {
						out.Agents = []*account.Agent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *account.Agent
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(account.Agent)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Agents = append(out.Agents, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "agent_ids":
			if in.IsNull() {
				in.Skip()
				out.AgentIds = nil
			} else {
				in.Delim('[')
				if out.AgentIds == nil {
					if !in.IsDelim(']') {
						out.AgentIds = make([]string, 0, 4)
					} else {
						out.AgentIds = []string{}
					}
				} else {
					out.AgentIds = (out.AgentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.AgentIds = append(out.AgentIds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "language_url":
			if in.IsNull() {
				in.Skip()
				out.LanguageUrl = nil
			} else {
				if out.LanguageUrl == nil {
					out.LanguageUrl = new(string)
				}
				*out.LanguageUrl = string(in.String())
			}
		case "custom_language_url":
			if in.IsNull() {
				in.Skip()
				out.CustomLanguageUrl = nil
			} else {
				if out.CustomLanguageUrl == nil {
					out.CustomLanguageUrl = new(string)
				}
				*out.CustomLanguageUrl = string(in.String())
			}
		case "css_url":
			if in.IsNull() {
				in.Skip()
				out.CssUrl = nil
			} else {
				if out.CssUrl == nil {
					out.CssUrl = new(string)
				}
				*out.CssUrl = string(in.String())
			}
		case "custom_css_url":
			if in.IsNull() {
				in.Skip()
				out.CustomCssUrl = nil
			} else {
				if out.CustomCssUrl == nil {
					out.CustomCssUrl = new(string)
				}
				*out.CustomCssUrl = string(in.String())
			}
		case "custom_language":
			if in.IsNull() {
				in.Skip()
				out.CustomLanguage = nil
			} else {
				if out.CustomLanguage == nil {
					out.CustomLanguage = new(string)
				}
				*out.CustomLanguage = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget4(out *jwriter.Writer, in Setting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.AccountId != nil {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AccountId))
	}
	if in.WidgetVersion != nil {
		const prefix string = ",\"widget_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WidgetVersion))
	}
	if in.Sound != nil {
		const prefix string = ",\"sound\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sound).MarshalEasyJSON(out)
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Language))
	}
	if in.Theme != nil {
		const prefix string = ",\"theme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Theme).MarshalEasyJSON(out)
	}
	if in.Replytime != nil {
		const prefix string = ",\"replytime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Replytime))
	}
	if len(in.Agents) != 0 {
		const prefix string = ",\"agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Agents {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.AgentIds) != 0 {
		const prefix string = ",\"agent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.AgentIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.LanguageUrl != nil {
		const prefix string = ",\"language_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LanguageUrl))
	}
	if in.CustomLanguageUrl != nil {
		const prefix string = ",\"custom_language_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CustomLanguageUrl))
	}
	if in.CssUrl != nil {
		const prefix string = ",\"css_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CssUrl))
	}
	if in.CustomCssUrl != nil {
		const prefix string = ",\"custom_css_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CustomCssUrl))
	}
	if in.CustomLanguage != nil {
		const prefix string = ",\"custom_language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CustomLanguage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Setting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Setting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Setting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Setting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget4(l, v)
}
func easyjson3eb0a0baDecodeGithubComSubizHeaderWidget5(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ctx":
			if in.IsNull() {
				in.Skip()
				out.Ctx = nil
			} else {
				if out.Ctx == nil {
					out.Ctx = new(common.Context)
				}
				(*out.Ctx).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(string)
				}
				*out.Data = string(in.String())
			}
		case "pk":
			if in.IsNull() {
				in.Skip()
				out.Pk = nil
			} else {
				if out.Pk == nil {
					out.Pk = new(string)
				}
				*out.Pk = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eb0a0baEncodeGithubComSubizHeaderWidget5(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ctx != nil {
		const prefix string = ",\"ctx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ctx).MarshalEasyJSON(out)
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Data))
	}
	if in.Pk != nil {
		const prefix string = ",\"pk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Pk))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eb0a0baEncodeGithubComSubizHeaderWidget5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eb0a0baDecodeGithubComSubizHeaderWidget5(l, v)
}
