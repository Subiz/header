// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: widget.proto

package widget

import (
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	bot "github.com/subiz/header/bot"
	common "github.com/subiz/header/common"
	conversation "github.com/subiz/header/conversation"
	user "github.com/subiz/header/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WidgetHeader_HeaderLayout int32

const (
	WidgetHeader_team   WidgetHeader_HeaderLayout = 0
	WidgetHeader_social WidgetHeader_HeaderLayout = 1
)

// Enum value maps for WidgetHeader_HeaderLayout.
var (
	WidgetHeader_HeaderLayout_name = map[int32]string{
		0: "team",
		1: "social",
	}
	WidgetHeader_HeaderLayout_value = map[string]int32{
		"team":   0,
		"social": 1,
	}
)

func (x WidgetHeader_HeaderLayout) Enum() *WidgetHeader_HeaderLayout {
	p := new(WidgetHeader_HeaderLayout)
	*p = x
	return p
}

func (x WidgetHeader_HeaderLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetHeader_HeaderLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[0].Descriptor()
}

func (WidgetHeader_HeaderLayout) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[0]
}

func (x WidgetHeader_HeaderLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WidgetHeader_HeaderLayout) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WidgetHeader_HeaderLayout(num)
	return nil
}

// Deprecated: Use WidgetHeader_HeaderLayout.Descriptor instead.
func (WidgetHeader_HeaderLayout) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{2, 0}
}

type Setting_WindowMode int32

const (
	Setting_mini Setting_WindowMode = 0
	Setting_full Setting_WindowMode = 1
)

// Enum value maps for Setting_WindowMode.
var (
	Setting_WindowMode_name = map[int32]string{
		0: "mini",
		1: "full",
	}
	Setting_WindowMode_value = map[string]int32{
		"mini": 0,
		"full": 1,
	}
)

func (x Setting_WindowMode) Enum() *Setting_WindowMode {
	p := new(Setting_WindowMode)
	*p = x
	return p
}

func (x Setting_WindowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Setting_WindowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[1].Descriptor()
}

func (Setting_WindowMode) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[1]
}

func (x Setting_WindowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Setting_WindowMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Setting_WindowMode(num)
	return nil
}

// Deprecated: Use Setting_WindowMode.Descriptor instead.
func (Setting_WindowMode) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{3, 0}
}

type Form_When int32

const (
	Form_all_agents_offline    Form_When = 0
	Form_out_of_bussiness_hour Form_When = 1
)

// Enum value maps for Form_When.
var (
	Form_When_name = map[int32]string{
		0: "all_agents_offline",
		1: "out_of_bussiness_hour",
	}
	Form_When_value = map[string]int32{
		"all_agents_offline":    0,
		"out_of_bussiness_hour": 1,
	}
)

func (x Form_When) Enum() *Form_When {
	p := new(Form_When)
	*p = x
	return p
}

func (x Form_When) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Form_When) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[2].Descriptor()
}

func (Form_When) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[2]
}

func (x Form_When) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Form_When) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Form_When(num)
	return nil
}

// Deprecated: Use Form_When.Descriptor instead.
func (Form_When) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{6, 0}
}

type ChatButton_ButtonPosition int32

const (
	ChatButton_left  ChatButton_ButtonPosition = 0
	ChatButton_right ChatButton_ButtonPosition = 1
)

// Enum value maps for ChatButton_ButtonPosition.
var (
	ChatButton_ButtonPosition_name = map[int32]string{
		0: "left",
		1: "right",
	}
	ChatButton_ButtonPosition_value = map[string]int32{
		"left":  0,
		"right": 1,
	}
)

func (x ChatButton_ButtonPosition) Enum() *ChatButton_ButtonPosition {
	p := new(ChatButton_ButtonPosition)
	*p = x
	return p
}

func (x ChatButton_ButtonPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatButton_ButtonPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[3].Descriptor()
}

func (ChatButton_ButtonPosition) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[3]
}

func (x ChatButton_ButtonPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatButton_ButtonPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatButton_ButtonPosition(num)
	return nil
}

// Deprecated: Use ChatButton_ButtonPosition.Descriptor instead.
func (ChatButton_ButtonPosition) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{7, 0}
}

type Condition_Source int32

const (
	Condition_direct     Condition_Source = 0
	Condition_google_ads Condition_Source = 1
	Condition_organic    Condition_Source = 2
)

// Enum value maps for Condition_Source.
var (
	Condition_Source_name = map[int32]string{
		0: "direct",
		1: "google_ads",
		2: "organic",
	}
	Condition_Source_value = map[string]int32{
		"direct":     0,
		"google_ads": 1,
		"organic":    2,
	}
)

func (x Condition_Source) Enum() *Condition_Source {
	p := new(Condition_Source)
	*p = x
	return p
}

func (x Condition_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[4].Descriptor()
}

func (Condition_Source) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[4]
}

func (x Condition_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Condition_Source) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Condition_Source(num)
	return nil
}

// Deprecated: Use Condition_Source.Descriptor instead.
func (Condition_Source) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{11, 0}
}

type Condition_DeviveType int32

const (
	Condition_desktop Condition_DeviveType = 0
	Condition_mobile  Condition_DeviveType = 1
	Condition_tablet  Condition_DeviveType = 2
)

// Enum value maps for Condition_DeviveType.
var (
	Condition_DeviveType_name = map[int32]string{
		0: "desktop",
		1: "mobile",
		2: "tablet",
	}
	Condition_DeviveType_value = map[string]int32{
		"desktop": 0,
		"mobile":  1,
		"tablet":  2,
	}
)

func (x Condition_DeviveType) Enum() *Condition_DeviveType {
	p := new(Condition_DeviveType)
	*p = x
	return p
}

func (x Condition_DeviveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_DeviveType) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[5].Descriptor()
}

func (Condition_DeviveType) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[5]
}

func (x Condition_DeviveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Condition_DeviveType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Condition_DeviveType(num)
	return nil
}

// Deprecated: Use Condition_DeviveType.Descriptor instead.
func (Condition_DeviveType) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{11, 1}
}

type Condition_Browser int32

const (
	Condition_all     Condition_Browser = 0
	Condition_chrome  Condition_Browser = 1
	Condition_firefox Condition_Browser = 2
	Condition_edge    Condition_Browser = 3
	Condition_ie      Condition_Browser = 4
	Condition_safari  Condition_Browser = 5
	Condition_other   Condition_Browser = 6
)

// Enum value maps for Condition_Browser.
var (
	Condition_Browser_name = map[int32]string{
		0: "all",
		1: "chrome",
		2: "firefox",
		3: "edge",
		4: "ie",
		5: "safari",
		6: "other",
	}
	Condition_Browser_value = map[string]int32{
		"all":     0,
		"chrome":  1,
		"firefox": 2,
		"edge":    3,
		"ie":      4,
		"safari":  5,
		"other":   6,
	}
)

func (x Condition_Browser) Enum() *Condition_Browser {
	p := new(Condition_Browser)
	*p = x
	return p
}

func (x Condition_Browser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Browser) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[6].Descriptor()
}

func (Condition_Browser) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[6]
}

func (x Condition_Browser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Condition_Browser) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Condition_Browser(num)
	return nil
}

// Deprecated: Use Condition_Browser.Descriptor instead.
func (Condition_Browser) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{11, 2}
}

type UserCampaignStatus_Status int32

const (
	UserCampaignStatus_goal_reached UserCampaignStatus_Status = 0
	UserCampaignStatus_failed       UserCampaignStatus_Status = 1
)

// Enum value maps for UserCampaignStatus_Status.
var (
	UserCampaignStatus_Status_name = map[int32]string{
		0: "goal_reached",
		1: "failed",
	}
	UserCampaignStatus_Status_value = map[string]int32{
		"goal_reached": 0,
		"failed":       1,
	}
)

func (x UserCampaignStatus_Status) Enum() *UserCampaignStatus_Status {
	p := new(UserCampaignStatus_Status)
	*p = x
	return p
}

func (x UserCampaignStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserCampaignStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[7].Descriptor()
}

func (UserCampaignStatus_Status) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[7]
}

func (x UserCampaignStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserCampaignStatus_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserCampaignStatus_Status(num)
	return nil
}

// Deprecated: Use UserCampaignStatus_Status.Descriptor instead.
func (UserCampaignStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{20, 0}
}

type ReportCampaignRequest_Range int32

const (
	ReportCampaignRequest_hour ReportCampaignRequest_Range = 0 // default
	ReportCampaignRequest_day  ReportCampaignRequest_Range = 1
)

// Enum value maps for ReportCampaignRequest_Range.
var (
	ReportCampaignRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	ReportCampaignRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x ReportCampaignRequest_Range) Enum() *ReportCampaignRequest_Range {
	p := new(ReportCampaignRequest_Range)
	*p = x
	return p
}

func (x ReportCampaignRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportCampaignRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_proto_enumTypes[8].Descriptor()
}

func (ReportCampaignRequest_Range) Type() protoreflect.EnumType {
	return &file_widget_proto_enumTypes[8]
}

func (x ReportCampaignRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReportCampaignRequest_Range) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReportCampaignRequest_Range(num)
	return nil
}

// Deprecated: Use ReportCampaignRequest_Range.Descriptor instead.
func (ReportCampaignRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{30, 0}
}

type UserSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Account             *account.Account `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	AccountId           *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"` // subiz use only
	User                *user.User       `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	UserId              *string          `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id,omitempty"` // subiz use only
	SoundEnabled        *bool            `protobuf:"varint,5,opt,name=sound_enabled,json=soundEnabled" json:"sound_enabled,omitempty"`
	Language            *string          `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	SendTranscript      *bool            `protobuf:"varint,8,opt,name=send_transcript,json=sendTranscript" json:"send_transcript,omitempty"`
	AccountSetting      *Setting         `protobuf:"bytes,9,opt,name=account_setting,json=accountSetting" json:"account_setting,omitempty"`
	DesktopNotification *bool            `protobuf:"varint,10,opt,name=desktop_notification,json=desktopNotification" json:"desktop_notification,omitempty"`
	Campaigns           []*Campaign      `protobuf:"bytes,13,rep,name=campaigns" json:"campaigns,omitempty"`
	Bots                []*bot.Bot       `protobuf:"bytes,14,rep,name=bots" json:"bots,omitempty"` // remove action
}

func (x *UserSetting) Reset() {
	*x = UserSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetting) ProtoMessage() {}

func (x *UserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetting.ProtoReflect.Descriptor instead.
func (*UserSetting) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{0}
}

func (x *UserSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserSetting) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *UserSetting) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UserSetting) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserSetting) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserSetting) GetSoundEnabled() bool {
	if x != nil && x.SoundEnabled != nil {
		return *x.SoundEnabled
	}
	return false
}

func (x *UserSetting) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *UserSetting) GetSendTranscript() bool {
	if x != nil && x.SendTranscript != nil {
		return *x.SendTranscript
	}
	return false
}

func (x *UserSetting) GetAccountSetting() *Setting {
	if x != nil {
		return x.AccountSetting
	}
	return nil
}

func (x *UserSetting) GetDesktopNotification() bool {
	if x != nil && x.DesktopNotification != nil {
		return *x.DesktopNotification
	}
	return false
}

func (x *UserSetting) GetCampaigns() []*Campaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

func (x *UserSetting) GetBots() []*bot.Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

type SocialLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"` // facebook, viber, subiz, email, ...
	Url  *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *SocialLink) Reset() {
	*x = SocialLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialLink) ProtoMessage() {}

func (x *SocialLink) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialLink.ProtoReflect.Descriptor instead.
func (*SocialLink) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{1}
}

func (x *SocialLink) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SocialLink) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type WidgetHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout *string `protobuf:"bytes,2,opt,name=layout" json:"layout,omitempty"`
	// for social layout only
	Links []*SocialLink `protobuf:"bytes,3,rep,name=links" json:"links,omitempty"`
	// agents whose avatar will be display in the header
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
}

func (x *WidgetHeader) Reset() {
	*x = WidgetHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetHeader) ProtoMessage() {}

func (x *WidgetHeader) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetHeader.ProtoReflect.Descriptor instead.
func (*WidgetHeader) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{2}
}

func (x *WidgetHeader) GetLayout() string {
	if x != nil && x.Layout != nil {
		return *x.Layout
	}
	return ""
}

func (x *WidgetHeader) GetLinks() []*SocialLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *WidgetHeader) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId      *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WidgetVersion  *string          `protobuf:"bytes,3,opt,name=widget_version,json=widgetVersion" json:"widget_version,omitempty"`
	Language       *string          `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	CustomLanguage *string          `protobuf:"bytes,6,opt,name=custom_language,json=customLanguage" json:"custom_language,omitempty"` // write-only
	Agents         []*account.Agent `protobuf:"bytes,7,rep,name=agents" json:"agents,omitempty"`
	AgentIds       []string         `protobuf:"bytes,8,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"` // subiz only
	// optional string css_url = 9; // old version
	// optional string custom_css_url = 10; // deprecated
	Replytime *int32 `protobuf:"varint,11,opt,name=replytime" json:"replytime,omitempty"` // deprecated
	// koptional string css = 12; // communication client to server
	// optional string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	IsOnline          *bool         `protobuf:"varint,14,opt,name=is_online,json=isOnline" json:"is_online,omitempty"`
	IsInBusinessHour  *bool         `protobuf:"varint,34,opt,name=is_in_business_hour,json=isInBusinessHour" json:"is_in_business_hour,omitempty"`
	WindowMode        *string       `protobuf:"bytes,15,opt,name=window_mode,json=windowMode" json:"window_mode,omitempty"`
	Header            *WidgetHeader `protobuf:"bytes,16,opt,name=header" json:"header,omitempty"`
	Height            *int32        `protobuf:"varint,17,opt,name=height" json:"height,omitempty"`
	Width             *int32        `protobuf:"varint,18,opt,name=width" json:"width,omitempty"`
	PrimaryColor      *string       `protobuf:"bytes,19,opt,name=primary_color,json=primaryColor" json:"primary_color,omitempty"`
	SecondaryColor    *string       `protobuf:"bytes,20,opt,name=secondary_color,json=secondaryColor" json:"secondary_color,omitempty"`
	Background        *string       `protobuf:"bytes,21,opt,name=background" json:"background,omitempty"`
	TextColor         *string       `protobuf:"bytes,22,opt,name=text_color,json=textColor" json:"text_color,omitempty"`
	OfflineForm       *Form         `protobuf:"bytes,23,opt,name=offline_form,json=offlineForm" json:"offline_form,omitempty"`
	PrechatForm       *Form         `protobuf:"bytes,24,opt,name=prechat_form,json=prechatForm" json:"prechat_form,omitempty"`
	DesktopButton     *ChatButton   `protobuf:"bytes,25,opt,name=desktop_button,json=desktopButton" json:"desktop_button,omitempty"`
	MobileButton      *ChatButton   `protobuf:"bytes,26,opt,name=mobile_button,json=mobileButton" json:"mobile_button,omitempty"`
	Greeting          *Greeting     `protobuf:"bytes,27,opt,name=greeting" json:"greeting,omitempty"`
	Title             *string       `protobuf:"bytes,28,opt,name=title" json:"title,omitempty"`
	Introduction      *string       `protobuf:"bytes,29,opt,name=introduction" json:"introduction,omitempty"`
	CustomLanguageUrl *string       `protobuf:"bytes,31,opt,name=custom_language_url,json=customLanguageUrl" json:"custom_language_url,omitempty"`
	LanguageUrl       *string       `protobuf:"bytes,32,opt,name=language_url,json=languageUrl" json:"language_url,omitempty"`
	AutoRequestRating *bool         `protobuf:"varint,33,opt,name=auto_request_rating,json=autoRequestRating" json:"auto_request_rating,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{3}
}

func (x *Setting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Setting) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Setting) GetWidgetVersion() string {
	if x != nil && x.WidgetVersion != nil {
		return *x.WidgetVersion
	}
	return ""
}

func (x *Setting) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Setting) GetCustomLanguage() string {
	if x != nil && x.CustomLanguage != nil {
		return *x.CustomLanguage
	}
	return ""
}

func (x *Setting) GetAgents() []*account.Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Setting) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *Setting) GetReplytime() int32 {
	if x != nil && x.Replytime != nil {
		return *x.Replytime
	}
	return 0
}

func (x *Setting) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *Setting) GetIsInBusinessHour() bool {
	if x != nil && x.IsInBusinessHour != nil {
		return *x.IsInBusinessHour
	}
	return false
}

func (x *Setting) GetWindowMode() string {
	if x != nil && x.WindowMode != nil {
		return *x.WindowMode
	}
	return ""
}

func (x *Setting) GetHeader() *WidgetHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Setting) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Setting) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Setting) GetPrimaryColor() string {
	if x != nil && x.PrimaryColor != nil {
		return *x.PrimaryColor
	}
	return ""
}

func (x *Setting) GetSecondaryColor() string {
	if x != nil && x.SecondaryColor != nil {
		return *x.SecondaryColor
	}
	return ""
}

func (x *Setting) GetBackground() string {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return ""
}

func (x *Setting) GetTextColor() string {
	if x != nil && x.TextColor != nil {
		return *x.TextColor
	}
	return ""
}

func (x *Setting) GetOfflineForm() *Form {
	if x != nil {
		return x.OfflineForm
	}
	return nil
}

func (x *Setting) GetPrechatForm() *Form {
	if x != nil {
		return x.PrechatForm
	}
	return nil
}

func (x *Setting) GetDesktopButton() *ChatButton {
	if x != nil {
		return x.DesktopButton
	}
	return nil
}

func (x *Setting) GetMobileButton() *ChatButton {
	if x != nil {
		return x.MobileButton
	}
	return nil
}

func (x *Setting) GetGreeting() *Greeting {
	if x != nil {
		return x.Greeting
	}
	return nil
}

func (x *Setting) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Setting) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *Setting) GetCustomLanguageUrl() string {
	if x != nil && x.CustomLanguageUrl != nil {
		return *x.CustomLanguageUrl
	}
	return ""
}

func (x *Setting) GetLanguageUrl() string {
	if x != nil && x.LanguageUrl != nil {
		return *x.LanguageUrl
	}
	return ""
}

func (x *Setting) GetAutoRequestRating() bool {
	if x != nil && x.AutoRequestRating != nil {
		return *x.AutoRequestRating
	}
	return false
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Label      *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	IsRequired *bool   `protobuf:"varint,3,opt,name=is_required,json=isRequired" json:"is_required,omitempty"`
	// so front end dont have to download attribute definitions
	Type            *string  `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	List            []string `protobuf:"bytes,6,rep,name=list" json:"list,omitempty"`       // available option for field
	Subtype         *string  `protobuf:"bytes,8,opt,name=subtype" json:"subtype,omitempty"` // phone, email, rating
	MultipleChoice  *bool    `protobuf:"varint,9,opt,name=multiple_choice,json=multipleChoice" json:"multiple_choice,omitempty"`
	MultilineText   *bool    `protobuf:"varint,10,opt,name=multiline_text,json=multilineText" json:"multiline_text,omitempty"`
	Placeholder     *string  `protobuf:"bytes,11,opt,name=placeholder" json:"placeholder,omitempty"`
	IsUserAttribute *bool    `protobuf:"varint,12,opt,name=is_user_attribute,json=isUserAttribute" json:"is_user_attribute,omitempty"`
	Value           *string  `protobuf:"bytes,13,opt,name=value" json:"value,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{4}
}

func (x *Field) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Field) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Field) GetIsRequired() bool {
	if x != nil && x.IsRequired != nil {
		return *x.IsRequired
	}
	return false
}

func (x *Field) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Field) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Field) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *Field) GetMultipleChoice() bool {
	if x != nil && x.MultipleChoice != nil {
		return *x.MultipleChoice
	}
	return false
}

func (x *Field) GetMultilineText() bool {
	if x != nil && x.MultilineText != nil {
		return *x.MultilineText
	}
	return false
}

func (x *Field) GetPlaceholder() string {
	if x != nil && x.Placeholder != nil {
		return *x.Placeholder
	}
	return ""
}

func (x *Field) GetIsUserAttribute() bool {
	if x != nil && x.IsUserAttribute != nil {
		return *x.IsUserAttribute
	}
	return false
}

func (x *Field) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{5}
}

func (x *Group) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Form struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields                     []*Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	GroupRequired              *bool    `protobuf:"varint,2,opt,name=group_required,json=groupRequired" json:"group_required,omitempty"`
	Groups                     []*Group `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	GroupLabel                 *string  `protobuf:"bytes,4,opt,name=group_label,json=groupLabel" json:"group_label,omitempty"`
	Title                      *string  `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Enabled                    *bool    `protobuf:"varint,6,opt,name=enabled" json:"enabled,omitempty"`
	EndConversationAfterSubmit *bool    `protobuf:"varint,7,opt,name=end_conversation_after_submit,json=endConversationAfterSubmit" json:"end_conversation_after_submit,omitempty"`
	EnableWhen                 *string  `protobuf:"bytes,8,opt,name=enable_when,json=enableWhen" json:"enable_when,omitempty"`
	QuestionRequired           *bool    `protobuf:"varint,10,opt,name=question_required,json=questionRequired" json:"question_required,omitempty"`
	QuestionLabel              *string  `protobuf:"bytes,11,opt,name=question_label,json=questionLabel" json:"question_label,omitempty"`
}

func (x *Form) Reset() {
	*x = Form{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Form) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Form) ProtoMessage() {}

func (x *Form) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Form.ProtoReflect.Descriptor instead.
func (*Form) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{6}
}

func (x *Form) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Form) GetGroupRequired() bool {
	if x != nil && x.GroupRequired != nil {
		return *x.GroupRequired
	}
	return false
}

func (x *Form) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Form) GetGroupLabel() string {
	if x != nil && x.GroupLabel != nil {
		return *x.GroupLabel
	}
	return ""
}

func (x *Form) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Form) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Form) GetEndConversationAfterSubmit() bool {
	if x != nil && x.EndConversationAfterSubmit != nil {
		return *x.EndConversationAfterSubmit
	}
	return false
}

func (x *Form) GetEnableWhen() string {
	if x != nil && x.EnableWhen != nil {
		return *x.EnableWhen
	}
	return ""
}

func (x *Form) GetQuestionRequired() bool {
	if x != nil && x.QuestionRequired != nil {
		return *x.QuestionRequired
	}
	return false
}

func (x *Form) GetQuestionLabel() string {
	if x != nil && x.QuestionLabel != nil {
		return *x.QuestionLabel
	}
	return ""
}

type ChatButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundImageUrl     *string `protobuf:"bytes,1,opt,name=background_image_url,json=backgroundImageUrl" json:"background_image_url,omitempty"`
	BackgroundMaskUrl      *string `protobuf:"bytes,11,opt,name=background_mask_url,json=backgroundMaskUrl" json:"background_mask_url,omitempty"`
	Width                  *int32  `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height                 *int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Background             *string `protobuf:"bytes,4,opt,name=background" json:"background,omitempty"`
	MarginX                *int32  `protobuf:"varint,5,opt,name=margin_x,json=marginX" json:"margin_x,omitempty"`
	MarginY                *int32  `protobuf:"varint,6,opt,name=margin_y,json=marginY" json:"margin_y,omitempty"`
	Position               *string `protobuf:"bytes,7,opt,name=position" json:"position,omitempty"`
	DefaultStyle           *bool   `protobuf:"varint,8,opt,name=default_style,json=defaultStyle" json:"default_style,omitempty"`
	BackgroundBorderRadius *string `protobuf:"bytes,9,opt,name=background_border_radius,json=backgroundBorderRadius" json:"background_border_radius,omitempty"`
	Hidden                 *bool   `protobuf:"varint,10,opt,name=hidden" json:"hidden,omitempty"`
}

func (x *ChatButton) Reset() {
	*x = ChatButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatButton) ProtoMessage() {}

func (x *ChatButton) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatButton.ProtoReflect.Descriptor instead.
func (*ChatButton) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{7}
}

func (x *ChatButton) GetBackgroundImageUrl() string {
	if x != nil && x.BackgroundImageUrl != nil {
		return *x.BackgroundImageUrl
	}
	return ""
}

func (x *ChatButton) GetBackgroundMaskUrl() string {
	if x != nil && x.BackgroundMaskUrl != nil {
		return *x.BackgroundMaskUrl
	}
	return ""
}

func (x *ChatButton) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *ChatButton) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ChatButton) GetBackground() string {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return ""
}

func (x *ChatButton) GetMarginX() int32 {
	if x != nil && x.MarginX != nil {
		return *x.MarginX
	}
	return 0
}

func (x *ChatButton) GetMarginY() int32 {
	if x != nil && x.MarginY != nil {
		return *x.MarginY
	}
	return 0
}

func (x *ChatButton) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *ChatButton) GetDefaultStyle() bool {
	if x != nil && x.DefaultStyle != nil {
		return *x.DefaultStyle
	}
	return false
}

func (x *ChatButton) GetBackgroundBorderRadius() string {
	if x != nil && x.BackgroundBorderRadius != nil {
		return *x.BackgroundBorderRadius
	}
	return ""
}

func (x *ChatButton) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

type Greeting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Enabled *bool   `protobuf:"varint,4,opt,name=enabled" json:"enabled,omitempty"`
	AgentId *string `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *Greeting) Reset() {
	*x = Greeting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Greeting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Greeting) ProtoMessage() {}

func (x *Greeting) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Greeting.ProtoReflect.Descriptor instead.
func (*Greeting) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{8}
}

func (x *Greeting) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Greeting) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Greeting) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

////////////// CAMPAIGN //////////////
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   *string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`                                                                       // exit_intent, area_clicked, scrolling_percentage, inactivity_duration, after_pageview, after_js_event
	AreaClickedCssSelector *string  `protobuf:"bytes,4,opt,name=area_clicked_css_selector,json=areaClickedCssSelector" json:"area_clicked_css_selector,omitempty"` // .user_name #user
	ScrollingPercentage    *float32 `protobuf:"fixed32,6,opt,name=scrolling_percentage,json=scrollingPercentage" json:"scrolling_percentage,omitempty"`            // 0.55
	InactivitySec          *int64   `protobuf:"varint,8,opt,name=inactivity_sec,json=inactivitySec" json:"inactivity_sec,omitempty"`                               // 50s
	AfterPageviewSec       *int64   `protobuf:"varint,9,opt,name=after_pageview_sec,json=afterPageviewSec" json:"after_pageview_sec,omitempty"`                    // 50s
	Disabled               *bool    `protobuf:"varint,10,opt,name=disabled" json:"disabled,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{9}
}

func (x *Trigger) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Trigger) GetAreaClickedCssSelector() string {
	if x != nil && x.AreaClickedCssSelector != nil {
		return *x.AreaClickedCssSelector
	}
	return ""
}

func (x *Trigger) GetScrollingPercentage() float32 {
	if x != nil && x.ScrollingPercentage != nil {
		return *x.ScrollingPercentage
	}
	return 0
}

func (x *Trigger) GetInactivitySec() int64 {
	if x != nil && x.InactivitySec != nil {
		return *x.InactivitySec
	}
	return 0
}

func (x *Trigger) GetAfterPageviewSec() int64 {
	if x != nil && x.AfterPageviewSec != nil {
		return *x.AfterPageviewSec
	}
	return 0
}

func (x *Trigger) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type SchedulerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      *int64   `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime        *int64   `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	DaysOfWeek     []string `protobuf:"bytes,6,rep,name=days_of_week,json=daysOfWeek" json:"days_of_week,omitempty"`              // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	StartMinuteDay *int64   `protobuf:"varint,7,opt,name=start_minute_day,json=startMinuteDay" json:"start_minute_day,omitempty"` // minute of day
	EndMinuteDay   *int64   `protobuf:"varint,8,opt,name=end_minute_day,json=endMinuteDay" json:"end_minute_day,omitempty"`       // minute of day
	TimezoneOffset *string  `protobuf:"bytes,9,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`    // if empty, take current timezone
}

func (x *SchedulerCondition) Reset() {
	*x = SchedulerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerCondition) ProtoMessage() {}

func (x *SchedulerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerCondition.ProtoReflect.Descriptor instead.
func (*SchedulerCondition) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{10}
}

func (x *SchedulerCondition) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *SchedulerCondition) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *SchedulerCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *SchedulerCondition) GetStartMinuteDay() int64 {
	if x != nil && x.StartMinuteDay != nil {
		return *x.StartMinuteDay
	}
	return 0
}

func (x *SchedulerCondition) GetEndMinuteDay() int64 {
	if x != nil && x.EndMinuteDay != nil {
		return *x.EndMinuteDay
	}
	return 0
}

func (x *SchedulerCondition) GetTimezoneOffset() string {
	if x != nil && x.TimezoneOffset != nil {
		return *x.TimezoneOffset
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"` // url, browser, country_code, city, returning_visitor, page_view_count, os, device, device_type, referrer, source, source_referer, /*ip_ranges*/, language, utm_campaign, utm_content, utm_medium, utm_source, utm_term, time_on_page, user_attribute
	UserAttributeKey *string `protobuf:"bytes,34,opt,name=user_attribute_key,json=userAttributeKey" json:"user_attribute_key,omitempty"`
	Operator         *string `protobuf:"bytes,40,opt,name=operator" json:"operator,omitempty"` // eq, ne, con, notCon, in, gt, gte, lt, lte, inRange, notInRange, begin, end
	Value            *string `protobuf:"bytes,41,opt,name=value" json:"value,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{11}
}

func (x *Condition) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Condition) GetUserAttributeKey() string {
	if x != nil && x.UserAttributeKey != nil {
		return *x.UserAttributeKey
	}
	return ""
}

func (x *Condition) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *Condition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Segmentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions                 []*Condition `protobuf:"bytes,4,rep,name=conditions" json:"conditions,omitempty"`
	SourceConditions           []*Condition `protobuf:"bytes,6,rep,name=source_conditions,json=sourceConditions" json:"source_conditions,omitempty"`                                      // source, source_referer (or only)
	LocationConditions         []*Condition `protobuf:"bytes,7,rep,name=location_conditions,json=locationConditions" json:"location_conditions,omitempty"`                                // city, country_code (or only)
	UrlConditions              []*Condition `protobuf:"bytes,8,rep,name=url_conditions,json=urlConditions" json:"url_conditions,omitempty"`                                               // url, url_term, url_medium, ... (or only)
	ExcludeUrlConditions       []*Condition `protobuf:"bytes,9,rep,name=exclude_url_conditions,json=excludeUrlConditions" json:"exclude_url_conditions,omitempty"`                        // url (or only)
	HasVisitedUrlConditions    []*Condition `protobuf:"bytes,10,rep,name=has_visited_url_conditions,json=hasVisitedUrlConditions" json:"has_visited_url_conditions,omitempty"`            // url (or only)
	HasNotVisitedUrlConditions []*Condition `protobuf:"bytes,11,rep,name=has_not_visited_url_conditions,json=hasNotVisitedUrlConditions" json:"has_not_visited_url_conditions,omitempty"` // url (or only)
	Join                       *string      `protobuf:"bytes,5,opt,name=join" json:"join,omitempty"`                                                                                      // and | or
	Disabled                   *bool        `protobuf:"varint,12,opt,name=disabled" json:"disabled,omitempty"`
	ExcludeLocationConditions  []*Condition `protobuf:"bytes,13,rep,name=exclude_location_conditions,json=excludeLocationConditions" json:"exclude_location_conditions,omitempty"` // city, country_code (or only)
}

func (x *Segmentation) Reset() {
	*x = Segmentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segmentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segmentation) ProtoMessage() {}

func (x *Segmentation) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segmentation.ProtoReflect.Descriptor instead.
func (*Segmentation) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{12}
}

func (x *Segmentation) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Segmentation) GetSourceConditions() []*Condition {
	if x != nil {
		return x.SourceConditions
	}
	return nil
}

func (x *Segmentation) GetLocationConditions() []*Condition {
	if x != nil {
		return x.LocationConditions
	}
	return nil
}

func (x *Segmentation) GetUrlConditions() []*Condition {
	if x != nil {
		return x.UrlConditions
	}
	return nil
}

func (x *Segmentation) GetExcludeUrlConditions() []*Condition {
	if x != nil {
		return x.ExcludeUrlConditions
	}
	return nil
}

func (x *Segmentation) GetHasVisitedUrlConditions() []*Condition {
	if x != nil {
		return x.HasVisitedUrlConditions
	}
	return nil
}

func (x *Segmentation) GetHasNotVisitedUrlConditions() []*Condition {
	if x != nil {
		return x.HasNotVisitedUrlConditions
	}
	return nil
}

func (x *Segmentation) GetJoin() string {
	if x != nil && x.Join != nil {
		return *x.Join
	}
	return ""
}

func (x *Segmentation) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *Segmentation) GetExcludeLocationConditions() []*Condition {
	if x != nil {
		return x.ExcludeLocationConditions
	}
	return nil
}

type Campaigns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Campaigns []*Campaign `protobuf:"bytes,3,rep,name=campaigns" json:"campaigns,omitempty"`
}

func (x *Campaigns) Reset() {
	*x = Campaigns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaigns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaigns) ProtoMessage() {}

func (x *Campaigns) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaigns.ProtoReflect.Descriptor instead.
func (*Campaigns) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{13}
}

func (x *Campaigns) GetCampaigns() []*Campaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional email.Email email = 1;
	Enabled   *bool                 `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	SenderId  *string               `protobuf:"bytes,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	From      *string               `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To        []string              `protobuf:"bytes,7,rep,name=to" json:"to,omitempty"`
	Subject   *string               `protobuf:"bytes,9,opt,name=subject" json:"subject,omitempty"`
	Body      *string               `protobuf:"bytes,10,opt,name=body" json:"body,omitempty"`
	Agents    []string              `protobuf:"bytes,12,rep,name=agents" json:"agents,omitempty"`
	AllAgents *bool                 `protobuf:"varint,13,opt,name=all_agents,json=allAgents" json:"all_agents,omitempty"`
	UserEmail *conversation.Message `protobuf:"bytes,14,opt,name=user_email,json=userEmail" json:"user_email,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{14}
}

func (x *Notification) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Notification) GetSenderId() string {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return ""
}

func (x *Notification) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *Notification) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Notification) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Notification) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Notification) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Notification) GetAllAgents() bool {
	if x != nil && x.AllAgents != nil {
		return *x.AllAgents
	}
	return false
}

func (x *Notification) GetUserEmail() *conversation.Message {
	if x != nil {
		return x.UserEmail
	}
	return nil
}

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                    *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId             *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UrlExpressions        []string        `protobuf:"bytes,4,rep,name=url_expressions,json=urlExpressions" json:"url_expressions,omitempty"`
	ExcludeUrlExpressions []string        `protobuf:"bytes,6,rep,name=exclude_url_expressions,json=excludeUrlExpressions" json:"exclude_url_expressions,omitempty"`
	Triggers              []*Trigger      `protobuf:"bytes,10,rep,name=triggers" json:"triggers,omitempty"`                                         // any
	SegmentationJoin      *string         `protobuf:"bytes,11,opt,name=segmentation_join,json=segmentationJoin" json:"segmentation_join,omitempty"` // and | or
	Segmentations         []*Segmentation `protobuf:"bytes,12,rep,name=segmentations" json:"segmentations,omitempty"`
	TemplateId            *string         `protobuf:"bytes,14,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	PageType              *string         `protobuf:"bytes,15,opt,name=page_type,json=pageType" json:"page_type,omitempty"` // modal, slide_in, bar, panel, fullscreen
	Pages                 []*Page         `protobuf:"bytes,17,rep,name=pages" json:"pages,omitempty"`
	Created               *int64          `protobuf:"varint,18,opt,name=created" json:"created,omitempty"`
	Name                  *string         `protobuf:"bytes,19,opt,name=name" json:"name,omitempty"`
	ThumbnailUrl          *string         `protobuf:"bytes,20,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Enabled               *bool           `protobuf:"varint,21,opt,name=enabled" json:"enabled,omitempty"`
	// stop showing pop up after showing x times
	ImpressionLimit *int64                `protobuf:"varint,23,opt,name=impression_limit,json=impressionLimit" json:"impression_limit,omitempty"`
	Schedulers      []*SchedulerCondition `protobuf:"bytes,24,rep,name=schedulers" json:"schedulers,omitempty"`
	SchedulerJoin   *string               `protobuf:"bytes,25,opt,name=scheduler_join,json=schedulerJoin" json:"scheduler_join,omitempty"`
	Notification    *Notification         `protobuf:"bytes,26,opt,name=notification" json:"notification,omitempty"`
	Updated         *int64                `protobuf:"varint,27,opt,name=updated" json:"updated,omitempty"`
	NumImpression   *int64                `protobuf:"varint,30,opt,name=num_impression,json=numImpression" json:"num_impression,omitempty"`
	NumConversion   *int64                `protobuf:"varint,31,opt,name=num_conversion,json=numConversion" json:"num_conversion,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{15}
}

func (x *Campaign) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Campaign) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Campaign) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Campaign) GetUrlExpressions() []string {
	if x != nil {
		return x.UrlExpressions
	}
	return nil
}

func (x *Campaign) GetExcludeUrlExpressions() []string {
	if x != nil {
		return x.ExcludeUrlExpressions
	}
	return nil
}

func (x *Campaign) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Campaign) GetSegmentationJoin() string {
	if x != nil && x.SegmentationJoin != nil {
		return *x.SegmentationJoin
	}
	return ""
}

func (x *Campaign) GetSegmentations() []*Segmentation {
	if x != nil {
		return x.Segmentations
	}
	return nil
}

func (x *Campaign) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *Campaign) GetPageType() string {
	if x != nil && x.PageType != nil {
		return *x.PageType
	}
	return ""
}

func (x *Campaign) GetPages() []*Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *Campaign) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Campaign) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Campaign) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *Campaign) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Campaign) GetImpressionLimit() int64 {
	if x != nil && x.ImpressionLimit != nil {
		return *x.ImpressionLimit
	}
	return 0
}

func (x *Campaign) GetSchedulers() []*SchedulerCondition {
	if x != nil {
		return x.Schedulers
	}
	return nil
}

func (x *Campaign) GetSchedulerJoin() string {
	if x != nil && x.SchedulerJoin != nil {
		return *x.SchedulerJoin
	}
	return ""
}

func (x *Campaign) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *Campaign) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *Campaign) GetNumImpression() int64 {
	if x != nil && x.NumImpression != nil {
		return *x.NumImpression
	}
	return 0
}

func (x *Campaign) GetNumConversion() int64 {
	if x != nil && x.NumConversion != nil {
		return *x.NumConversion
	}
	return 0
}

type Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId      *string         `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Id              *string         `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	UserId          *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url             *string         `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Device          *common.Device  `protobuf:"bytes,8,opt,name=device" json:"device,omitempty"`
	Created         *int64          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	ByTrigger       *string         `protobuf:"bytes,10,opt,name=by_trigger,json=byTrigger" json:"by_trigger,omitempty"`
	ImpressionToken *string         `protobuf:"bytes,11,opt,name=impression_token,json=impressionToken" json:"impression_token,omitempty"` // for request submit only
}

func (x *Impression) Reset() {
	*x = Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impression) ProtoMessage() {}

func (x *Impression) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impression.ProtoReflect.Descriptor instead.
func (*Impression) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{16}
}

func (x *Impression) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Impression) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Impression) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *Impression) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Impression) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Impression) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Impression) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Impression) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Impression) GetByTrigger() string {
	if x != nil && x.ByTrigger != nil {
		return *x.ByTrigger
	}
	return ""
}

func (x *Impression) GetImpressionToken() string {
	if x != nil && x.ImpressionToken != nil {
		return *x.ImpressionToken
	}
	return ""
}

type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string         `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Anchor     *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
	Limit      *int32          `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	FromHour   *int32          `protobuf:"varint,7,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour     *int32          `protobuf:"varint,8,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{17}
}

func (x *ConversionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversionRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversionRequest) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *ConversionRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *ConversionRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ConversionRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *ConversionRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

type Conversions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Conversions []*Conversion   `protobuf:"bytes,2,rep,name=conversions" json:"conversions,omitempty"`
	Anchor      *string         `protobuf:"bytes,4,opt,name=anchor" json:"anchor,omitempty"`
}

func (x *Conversions) Reset() {
	*x = Conversions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversions) ProtoMessage() {}

func (x *Conversions) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversions.ProtoReflect.Descriptor instead.
func (*Conversions) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{18}
}

func (x *Conversions) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversions) GetConversions() []*Conversion {
	if x != nil {
		return x.Conversions
	}
	return nil
}

func (x *Conversions) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

type Conversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId      *string         `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	ImpressionId    *string         `protobuf:"bytes,4,opt,name=impression_id,json=impressionId" json:"impression_id,omitempty"`
	UserId          *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url             *string         `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
	Device          *common.Device  `protobuf:"bytes,8,opt,name=device" json:"device,omitempty"`
	ByTrigger       *string         `protobuf:"bytes,10,opt,name=by_trigger,json=byTrigger" json:"by_trigger,omitempty"`
	Submission      *Submission     `protobuf:"bytes,12,opt,name=submission" json:"submission,omitempty"`
	Created         *int64          `protobuf:"varint,13,opt,name=created" json:"created,omitempty"`
	Week            *int64          `protobuf:"varint,14,opt,name=week" json:"week,omitempty"`                                             // internal use only
	ImpressionToken *string         `protobuf:"bytes,15,opt,name=impression_token,json=impressionToken" json:"impression_token,omitempty"` // for request submit only
}

func (x *Conversion) Reset() {
	*x = Conversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversion) ProtoMessage() {}

func (x *Conversion) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversion.ProtoReflect.Descriptor instead.
func (*Conversion) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{19}
}

func (x *Conversion) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversion) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Conversion) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *Conversion) GetImpressionId() string {
	if x != nil && x.ImpressionId != nil {
		return *x.ImpressionId
	}
	return ""
}

func (x *Conversion) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Conversion) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Conversion) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Conversion) GetByTrigger() string {
	if x != nil && x.ByTrigger != nil {
		return *x.ByTrigger
	}
	return ""
}

func (x *Conversion) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *Conversion) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Conversion) GetWeek() int64 {
	if x != nil && x.Week != nil {
		return *x.Week
	}
	return 0
}

func (x *Conversion) GetImpressionToken() string {
	if x != nil && x.ImpressionToken != nil {
		return *x.ImpressionToken
	}
	return ""
}

type UserCampaignStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string         `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	UserId     *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Status     *string         `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"` // goal_reached || failed || nothing
	Created    *int64          `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
}

func (x *UserCampaignStatus) Reset() {
	*x = UserCampaignStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCampaignStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCampaignStatus) ProtoMessage() {}

func (x *UserCampaignStatus) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCampaignStatus.ProtoReflect.Descriptor instead.
func (*UserCampaignStatus) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{20}
}

func (x *UserCampaignStatus) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserCampaignStatus) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UserCampaignStatus) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *UserCampaignStatus) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserCampaignStatus) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UserCampaignStatus) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             *string     `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Subtitle          *string     `protobuf:"bytes,9,opt,name=subtitle" json:"subtitle,omitempty"`
	Description       *string     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Form              *Form       `protobuf:"bytes,6,opt,name=form" json:"form,omitempty"`
	PrimaryButton     *Button     `protobuf:"bytes,7,opt,name=primary_button,json=primaryButton" json:"primary_button,omitempty"`
	SecondaryButton   *Button     `protobuf:"bytes,8,opt,name=secondary_button,json=secondaryButton" json:"secondary_button,omitempty"`
	BackgroundClick   *Button     `protobuf:"bytes,10,opt,name=background_click,json=backgroundClick" json:"background_click,omitempty"`
	Countdown         *Countdown  `protobuf:"bytes,11,opt,name=countdown" json:"countdown,omitempty"`
	Video             *Video      `protobuf:"bytes,12,opt,name=video" json:"video,omitempty"`
	Animation         *string     `protobuf:"bytes,20,opt,name=animation" json:"animation,omitempty"`
	DesktopAppearance *Appearance `protobuf:"bytes,24,opt,name=desktop_appearance,json=desktopAppearance" json:"desktop_appearance,omitempty"`
	MobileAppearance  *Appearance `protobuf:"bytes,25,opt,name=mobile_appearance,json=mobileAppearance" json:"mobile_appearance,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{21}
}

func (x *Page) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Page) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *Page) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Page) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Page) GetPrimaryButton() *Button {
	if x != nil {
		return x.PrimaryButton
	}
	return nil
}

func (x *Page) GetSecondaryButton() *Button {
	if x != nil {
		return x.SecondaryButton
	}
	return nil
}

func (x *Page) GetBackgroundClick() *Button {
	if x != nil {
		return x.BackgroundClick
	}
	return nil
}

func (x *Page) GetCountdown() *Countdown {
	if x != nil {
		return x.Countdown
	}
	return nil
}

func (x *Page) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Page) GetAnimation() string {
	if x != nil && x.Animation != nil {
		return *x.Animation
	}
	return ""
}

func (x *Page) GetDesktopAppearance() *Appearance {
	if x != nil {
		return x.DesktopAppearance
	}
	return nil
}

func (x *Page) GetMobileAppearance() *Appearance {
	if x != nil {
		return x.MobileAppearance
	}
	return nil
}

type Appearance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleColor                *string `protobuf:"bytes,2,opt,name=title_color,json=titleColor" json:"title_color,omitempty"`
	DescriptionColor          *string `protobuf:"bytes,3,opt,name=description_color,json=descriptionColor" json:"description_color,omitempty"`
	Background                *string `protobuf:"bytes,4,opt,name=background" json:"background,omitempty"` // color or gradient
	BackgroundImage           *string `protobuf:"bytes,5,opt,name=background_image,json=backgroundImage" json:"background_image,omitempty"`
	PrimaryButtonBackground   *string `protobuf:"bytes,7,opt,name=primary_button_background,json=primaryButtonBackground" json:"primary_button_background,omitempty"`
	PrimaryButtonColor        *string `protobuf:"bytes,8,opt,name=primary_button_color,json=primaryButtonColor" json:"primary_button_color,omitempty"`
	SecondaryButtonBackground *string `protobuf:"bytes,9,opt,name=secondary_button_background,json=secondaryButtonBackground" json:"secondary_button_background,omitempty"`
	SecondaryButtonColor      *string `protobuf:"bytes,10,opt,name=secondary_button_color,json=secondaryButtonColor" json:"secondary_button_color,omitempty"`
	// not supported yet
	InputColor      *string `protobuf:"bytes,11,opt,name=input_color,json=inputColor" json:"input_color,omitempty"`
	InputBackground *string `protobuf:"bytes,12,opt,name=input_background,json=inputBackground" json:"input_background,omitempty"`
	Overlay         *string `protobuf:"bytes,13,opt,name=overlay" json:"overlay,omitempty"`
	// sizing, not supported yet
	Width                    *string `protobuf:"bytes,20,opt,name=width" json:"width,omitempty"`
	MinHeight                *string `protobuf:"bytes,21,opt,name=min_height,json=minHeight" json:"min_height,omitempty"`
	PaddingLeft              *string `protobuf:"bytes,22,opt,name=padding_left,json=paddingLeft" json:"padding_left,omitempty"`
	PaddingRight             *string `protobuf:"bytes,23,opt,name=padding_right,json=paddingRight" json:"padding_right,omitempty"`
	PaddingTop               *string `protobuf:"bytes,24,opt,name=padding_top,json=paddingTop" json:"padding_top,omitempty"`
	PaddingBottom            *string `protobuf:"bytes,25,opt,name=padding_bottom,json=paddingBottom" json:"padding_bottom,omitempty"`
	TitleFontFamily          *string `protobuf:"bytes,30,opt,name=title_font_family,json=titleFontFamily" json:"title_font_family,omitempty"`
	TitleFontSize            *string `protobuf:"bytes,31,opt,name=title_font_size,json=titleFontSize" json:"title_font_size,omitempty"`
	TitleFontStyle           *string `protobuf:"bytes,32,opt,name=title_font_style,json=titleFontStyle" json:"title_font_style,omitempty"`
	TitleFontWeight          *string `protobuf:"bytes,33,opt,name=title_font_weight,json=titleFontWeight" json:"title_font_weight,omitempty"`
	TitleTextTransform       *string `protobuf:"bytes,34,opt,name=title_text_transform,json=titleTextTransform" json:"title_text_transform,omitempty"`
	DescriptionFontFamily    *string `protobuf:"bytes,35,opt,name=description_font_family,json=descriptionFontFamily" json:"description_font_family,omitempty"`
	DescriptionFontSize      *string `protobuf:"bytes,36,opt,name=description_font_size,json=descriptionFontSize" json:"description_font_size,omitempty"`
	DescriptionFontStyle     *string `protobuf:"bytes,37,opt,name=description_font_style,json=descriptionFontStyle" json:"description_font_style,omitempty"`
	DescriptionFontWeight    *string `protobuf:"bytes,38,opt,name=description_font_weight,json=descriptionFontWeight" json:"description_font_weight,omitempty"`
	DescriptionTextTransform *string `protobuf:"bytes,39,opt,name=description_text_transform,json=descriptionTextTransform" json:"description_text_transform,omitempty"`
	InputLabelColor          *string `protobuf:"bytes,40,opt,name=input_label_color,json=inputLabelColor" json:"input_label_color,omitempty"`
	InputBorderColor         *string `protobuf:"bytes,41,opt,name=input_border_color,json=inputBorderColor" json:"input_border_color,omitempty"`
}

func (x *Appearance) Reset() {
	*x = Appearance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance) ProtoMessage() {}

func (x *Appearance) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance.ProtoReflect.Descriptor instead.
func (*Appearance) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{22}
}

func (x *Appearance) GetTitleColor() string {
	if x != nil && x.TitleColor != nil {
		return *x.TitleColor
	}
	return ""
}

func (x *Appearance) GetDescriptionColor() string {
	if x != nil && x.DescriptionColor != nil {
		return *x.DescriptionColor
	}
	return ""
}

func (x *Appearance) GetBackground() string {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return ""
}

func (x *Appearance) GetBackgroundImage() string {
	if x != nil && x.BackgroundImage != nil {
		return *x.BackgroundImage
	}
	return ""
}

func (x *Appearance) GetPrimaryButtonBackground() string {
	if x != nil && x.PrimaryButtonBackground != nil {
		return *x.PrimaryButtonBackground
	}
	return ""
}

func (x *Appearance) GetPrimaryButtonColor() string {
	if x != nil && x.PrimaryButtonColor != nil {
		return *x.PrimaryButtonColor
	}
	return ""
}

func (x *Appearance) GetSecondaryButtonBackground() string {
	if x != nil && x.SecondaryButtonBackground != nil {
		return *x.SecondaryButtonBackground
	}
	return ""
}

func (x *Appearance) GetSecondaryButtonColor() string {
	if x != nil && x.SecondaryButtonColor != nil {
		return *x.SecondaryButtonColor
	}
	return ""
}

func (x *Appearance) GetInputColor() string {
	if x != nil && x.InputColor != nil {
		return *x.InputColor
	}
	return ""
}

func (x *Appearance) GetInputBackground() string {
	if x != nil && x.InputBackground != nil {
		return *x.InputBackground
	}
	return ""
}

func (x *Appearance) GetOverlay() string {
	if x != nil && x.Overlay != nil {
		return *x.Overlay
	}
	return ""
}

func (x *Appearance) GetWidth() string {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return ""
}

func (x *Appearance) GetMinHeight() string {
	if x != nil && x.MinHeight != nil {
		return *x.MinHeight
	}
	return ""
}

func (x *Appearance) GetPaddingLeft() string {
	if x != nil && x.PaddingLeft != nil {
		return *x.PaddingLeft
	}
	return ""
}

func (x *Appearance) GetPaddingRight() string {
	if x != nil && x.PaddingRight != nil {
		return *x.PaddingRight
	}
	return ""
}

func (x *Appearance) GetPaddingTop() string {
	if x != nil && x.PaddingTop != nil {
		return *x.PaddingTop
	}
	return ""
}

func (x *Appearance) GetPaddingBottom() string {
	if x != nil && x.PaddingBottom != nil {
		return *x.PaddingBottom
	}
	return ""
}

func (x *Appearance) GetTitleFontFamily() string {
	if x != nil && x.TitleFontFamily != nil {
		return *x.TitleFontFamily
	}
	return ""
}

func (x *Appearance) GetTitleFontSize() string {
	if x != nil && x.TitleFontSize != nil {
		return *x.TitleFontSize
	}
	return ""
}

func (x *Appearance) GetTitleFontStyle() string {
	if x != nil && x.TitleFontStyle != nil {
		return *x.TitleFontStyle
	}
	return ""
}

func (x *Appearance) GetTitleFontWeight() string {
	if x != nil && x.TitleFontWeight != nil {
		return *x.TitleFontWeight
	}
	return ""
}

func (x *Appearance) GetTitleTextTransform() string {
	if x != nil && x.TitleTextTransform != nil {
		return *x.TitleTextTransform
	}
	return ""
}

func (x *Appearance) GetDescriptionFontFamily() string {
	if x != nil && x.DescriptionFontFamily != nil {
		return *x.DescriptionFontFamily
	}
	return ""
}

func (x *Appearance) GetDescriptionFontSize() string {
	if x != nil && x.DescriptionFontSize != nil {
		return *x.DescriptionFontSize
	}
	return ""
}

func (x *Appearance) GetDescriptionFontStyle() string {
	if x != nil && x.DescriptionFontStyle != nil {
		return *x.DescriptionFontStyle
	}
	return ""
}

func (x *Appearance) GetDescriptionFontWeight() string {
	if x != nil && x.DescriptionFontWeight != nil {
		return *x.DescriptionFontWeight
	}
	return ""
}

func (x *Appearance) GetDescriptionTextTransform() string {
	if x != nil && x.DescriptionTextTransform != nil {
		return *x.DescriptionTextTransform
	}
	return ""
}

func (x *Appearance) GetInputLabelColor() string {
	if x != nil && x.InputLabelColor != nil {
		return *x.InputLabelColor
	}
	return ""
}

func (x *Appearance) GetInputBorderColor() string {
	if x != nil && x.InputBorderColor != nil {
		return *x.InputBorderColor
	}
	return ""
}

type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string         `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	UserId     *string         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Fields     []*Field        `protobuf:"bytes,6,rep,name=fields" json:"fields,omitempty"`
}

func (x *Submission) Reset() {
	*x = Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{23}
}

func (x *Submission) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Submission) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Submission) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *Submission) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Submission) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ButtonAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`                // open_url, close, open_widget, submit, next, goal_reach
	Url    *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`                      // url to open
	NewTab *bool   `protobuf:"varint,6,opt,name=new_tab,json=newTab" json:"new_tab,omitempty"` // open new url on new tab
}

func (x *ButtonAction) Reset() {
	*x = ButtonAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonAction) ProtoMessage() {}

func (x *ButtonAction) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonAction.ProtoReflect.Descriptor instead.
func (*ButtonAction) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{24}
}

func (x *ButtonAction) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *ButtonAction) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ButtonAction) GetNewTab() bool {
	if x != nil && x.NewTab != nil {
		return *x.NewTab
	}
	return false
}

type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool           `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Actions []*ButtonAction `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
	Text    *string         `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{25}
}

func (x *Button) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Button) GetActions() []*ButtonAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Button) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Countdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      *bool   `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	EndTime      *int64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`                 // unix sec
	DailyEndTime *string `protobuf:"bytes,5,opt,name=daily_end_time,json=dailyEndTime" json:"daily_end_time,omitempty"` // 8:40:30 reset every day
}

func (x *Countdown) Reset() {
	*x = Countdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Countdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Countdown) ProtoMessage() {}

func (x *Countdown) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Countdown.ProtoReflect.Descriptor instead.
func (*Countdown) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{26}
}

func (x *Countdown) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Countdown) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *Countdown) GetDailyEndTime() string {
	if x != nil && x.DailyEndTime != nil {
		return *x.DailyEndTime
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool   `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Url     *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// optional string width = 4; // alway full
	MaxHeight     *string `protobuf:"bytes,5,opt,name=max_height,json=maxHeight" json:"max_height,omitempty"`
	PaddingLeft   *string `protobuf:"bytes,7,opt,name=padding_left,json=paddingLeft" json:"padding_left,omitempty"`
	PaddingRight  *string `protobuf:"bytes,8,opt,name=padding_right,json=paddingRight" json:"padding_right,omitempty"`
	PaddingTop    *string `protobuf:"bytes,9,opt,name=padding_top,json=paddingTop" json:"padding_top,omitempty"`
	PaddingBottom *string `protobuf:"bytes,10,opt,name=padding_bottom,json=paddingBottom" json:"padding_bottom,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{27}
}

func (x *Video) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Video) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Video) GetMaxHeight() string {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return ""
}

func (x *Video) GetPaddingLeft() string {
	if x != nil && x.PaddingLeft != nil {
		return *x.PaddingLeft
	}
	return ""
}

func (x *Video) GetPaddingRight() string {
	if x != nil && x.PaddingRight != nil {
		return *x.PaddingRight
	}
	return ""
}

func (x *Video) GetPaddingTop() string {
	if x != nil && x.PaddingTop != nil {
		return *x.PaddingTop
	}
	return ""
}

func (x *Video) GetPaddingBottom() string {
	if x != nil && x.PaddingBottom != nil {
		return *x.PaddingBottom
	}
	return ""
}

type ImpressionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Count      *int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Hour       *int32  `protobuf:"varint,6,opt,name=hour" json:"hour,omitempty"`
	Month      *int32  `protobuf:"varint,7,opt,name=month" json:"month,omitempty"`
}

func (x *ImpressionCount) Reset() {
	*x = ImpressionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionCount) ProtoMessage() {}

func (x *ImpressionCount) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionCount.ProtoReflect.Descriptor instead.
func (*ImpressionCount) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{28}
}

func (x *ImpressionCount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ImpressionCount) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *ImpressionCount) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ImpressionCount) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ImpressionCount) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

type ConversionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Count      *int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Hour       *int32  `protobuf:"varint,6,opt,name=hour" json:"hour,omitempty"`
	Month      *int32  `protobuf:"varint,7,opt,name=month" json:"month,omitempty"`
}

func (x *ConversionCount) Reset() {
	*x = ConversionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionCount) ProtoMessage() {}

func (x *ConversionCount) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionCount.ProtoReflect.Descriptor instead.
func (*ConversionCount) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{29}
}

func (x *ConversionCount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ConversionCount) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *ConversionCount) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ConversionCount) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ConversionCount) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

type ReportCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CampaignId *string         `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	FromHour   *int32          `protobuf:"varint,5,opt,name=from_hour,json=fromHour" json:"from_hour,omitempty"`
	ToHour     *int32          `protobuf:"varint,6,opt,name=to_hour,json=toHour" json:"to_hour,omitempty"`
	Range      *string         `protobuf:"bytes,7,opt,name=range" json:"range,omitempty"`
}

func (x *ReportCampaignRequest) Reset() {
	*x = ReportCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCampaignRequest) ProtoMessage() {}

func (x *ReportCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCampaignRequest.ProtoReflect.Descriptor instead.
func (*ReportCampaignRequest) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{30}
}

func (x *ReportCampaignRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportCampaignRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ReportCampaignRequest) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *ReportCampaignRequest) GetFromHour() int32 {
	if x != nil && x.FromHour != nil {
		return *x.FromHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetToHour() int32 {
	if x != nil && x.ToHour != nil {
		return *x.ToHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

type ReportCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	ImpressionsCount []int32         `protobuf:"varint,3,rep,name=impressions_count,json=impressionsCount" json:"impressions_count,omitempty"`
	ConversionsCount []int32         `protobuf:"varint,4,rep,name=conversions_count,json=conversionsCount" json:"conversions_count,omitempty"`
}

func (x *ReportCampaignResponse) Reset() {
	*x = ReportCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCampaignResponse) ProtoMessage() {}

func (x *ReportCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCampaignResponse.ProtoReflect.Descriptor instead.
func (*ReportCampaignResponse) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{31}
}

func (x *ReportCampaignResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportCampaignResponse) GetImpressionsCount() []int32 {
	if x != nil {
		return x.ImpressionsCount
	}
	return nil
}

func (x *ReportCampaignResponse) GetConversionsCount() []int32 {
	if x != nil {
		return x.ConversionsCount
	}
	return nil
}

type ConversionsExported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
}

func (x *ConversionsExported) Reset() {
	*x = ConversionsExported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionsExported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionsExported) ProtoMessage() {}

func (x *ConversionsExported) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionsExported.ProtoReflect.Descriptor instead.
func (*ConversionsExported) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{32}
}

func (x *ConversionsExported) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type SearchLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Query *string         `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Limit *int64          `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (x *SearchLocationsRequest) Reset() {
	*x = SearchLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsRequest) ProtoMessage() {}

func (x *SearchLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsRequest.ProtoReflect.Descriptor instead.
func (*SearchLocationsRequest) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{33}
}

func (x *SearchLocationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchLocationsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SearchLocationsRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type UploadedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId    *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Url          *string         `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	ThumbnailUrl *string         `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Width        *int64          `protobuf:"varint,10,opt,name=width" json:"width,omitempty"`
	Height       *int64          `protobuf:"varint,11,opt,name=height" json:"height,omitempty"`
	Created      *int64          `protobuf:"varint,12,opt,name=created" json:"created,omitempty"`
}

func (x *UploadedImage) Reset() {
	*x = UploadedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedImage) ProtoMessage() {}

func (x *UploadedImage) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedImage.ProtoReflect.Descriptor instead.
func (*UploadedImage) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{34}
}

func (x *UploadedImage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UploadedImage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UploadedImage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UploadedImage) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *UploadedImage) GetWidth() int64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *UploadedImage) GetHeight() int64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *UploadedImage) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

type UploadedImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Images []*UploadedImage `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
}

func (x *UploadedImages) Reset() {
	*x = UploadedImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedImages) ProtoMessage() {}

func (x *UploadedImages) ProtoReflect() protoreflect.Message {
	mi := &file_widget_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedImages.ProtoReflect.Descriptor instead.
func (*UploadedImages) Descriptor() ([]byte, []int) {
	return file_widget_proto_rawDescGZIP(), []int{35}
}

func (x *UploadedImages) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UploadedImages) GetImages() []*UploadedImage {
	if x != nil {
		return x.Images
	}
	return nil
}

var File_widget_proto protoreflect.FileDescriptor

var file_widget_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd9, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x38, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x62, 0x6f,
	0x74, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x93, 0x01, 0x0a, 0x0c, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x24, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x08, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x10, 0x01, 0x22, 0xd3, 0x08, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x49, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0b, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x20, 0x0a, 0x0a, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xbf, 0x03, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x1d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x57, 0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x10, 0x01, 0x22, 0xac, 0x03, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x58, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x01, 0x22, 0x59, 0x0a, 0x08, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfc, 0x01,
	0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x73, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe9, 0x01, 0x0a,
	0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02, 0x22, 0x31, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x22, 0x54,
	0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x66, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x65,
	0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x73, 0x61, 0x66, 0x61, 0x72, 0x69, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x06, 0x22, 0xf2, 0x04, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0e,
	0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x68, 0x61, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x1e, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x4e,
	0x6f, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xd2, 0x06,
	0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x72, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x72, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55,
	0x72, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x7e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x93, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xea,
	0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0xa1, 0x04, 0x0a, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x35, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x82, 0x0a, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x1a,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x0c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x22, 0x66, 0x0a, 0x06, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x66, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x16,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2d, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x20, 0x5a, 0x1e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
}

var (
	file_widget_proto_rawDescOnce sync.Once
	file_widget_proto_rawDescData = file_widget_proto_rawDesc
)

func file_widget_proto_rawDescGZIP() []byte {
	file_widget_proto_rawDescOnce.Do(func() {
		file_widget_proto_rawDescData = protoimpl.X.CompressGZIP(file_widget_proto_rawDescData)
	})
	return file_widget_proto_rawDescData
}

var file_widget_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_widget_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_widget_proto_goTypes = []interface{}{
	(WidgetHeader_HeaderLayout)(0),   // 0: widget.WidgetHeader.HeaderLayout
	(Setting_WindowMode)(0),          // 1: widget.Setting.WindowMode
	(Form_When)(0),                   // 2: widget.Form.When
	(ChatButton_ButtonPosition)(0),   // 3: widget.ChatButton.ButtonPosition
	(Condition_Source)(0),            // 4: widget.Condition.Source
	(Condition_DeviveType)(0),        // 5: widget.Condition.DeviveType
	(Condition_Browser)(0),           // 6: widget.Condition.Browser
	(UserCampaignStatus_Status)(0),   // 7: widget.UserCampaignStatus.Status
	(ReportCampaignRequest_Range)(0), // 8: widget.ReportCampaignRequest.Range
	(*UserSetting)(nil),              // 9: widget.UserSetting
	(*SocialLink)(nil),               // 10: widget.SocialLink
	(*WidgetHeader)(nil),             // 11: widget.WidgetHeader
	(*Setting)(nil),                  // 12: widget.Setting
	(*Field)(nil),                    // 13: widget.Field
	(*Group)(nil),                    // 14: widget.Group
	(*Form)(nil),                     // 15: widget.Form
	(*ChatButton)(nil),               // 16: widget.ChatButton
	(*Greeting)(nil),                 // 17: widget.Greeting
	(*Trigger)(nil),                  // 18: widget.Trigger
	(*SchedulerCondition)(nil),       // 19: widget.SchedulerCondition
	(*Condition)(nil),                // 20: widget.Condition
	(*Segmentation)(nil),             // 21: widget.Segmentation
	(*Campaigns)(nil),                // 22: widget.Campaigns
	(*Notification)(nil),             // 23: widget.Notification
	(*Campaign)(nil),                 // 24: widget.Campaign
	(*Impression)(nil),               // 25: widget.Impression
	(*ConversionRequest)(nil),        // 26: widget.ConversionRequest
	(*Conversions)(nil),              // 27: widget.Conversions
	(*Conversion)(nil),               // 28: widget.Conversion
	(*UserCampaignStatus)(nil),       // 29: widget.UserCampaignStatus
	(*Page)(nil),                     // 30: widget.Page
	(*Appearance)(nil),               // 31: widget.Appearance
	(*Submission)(nil),               // 32: widget.Submission
	(*ButtonAction)(nil),             // 33: widget.ButtonAction
	(*Button)(nil),                   // 34: widget.Button
	(*Countdown)(nil),                // 35: widget.Countdown
	(*Video)(nil),                    // 36: widget.Video
	(*ImpressionCount)(nil),          // 37: widget.ImpressionCount
	(*ConversionCount)(nil),          // 38: widget.ConversionCount
	(*ReportCampaignRequest)(nil),    // 39: widget.ReportCampaignRequest
	(*ReportCampaignResponse)(nil),   // 40: widget.ReportCampaignResponse
	(*ConversionsExported)(nil),      // 41: widget.ConversionsExported
	(*SearchLocationsRequest)(nil),   // 42: widget.SearchLocationsRequest
	(*UploadedImage)(nil),            // 43: widget.UploadedImage
	(*UploadedImages)(nil),           // 44: widget.UploadedImages
	(*common.Context)(nil),           // 45: common.Context
	(*account.Account)(nil),          // 46: account.Account
	(*user.User)(nil),                // 47: user.User
	(*bot.Bot)(nil),                  // 48: bot.Bot
	(*account.Agent)(nil),            // 49: account.Agent
	(*conversation.Message)(nil),     // 50: conversation.Message
	(*common.Device)(nil),            // 51: common.Device
}
var file_widget_proto_depIdxs = []int32{
	45, // 0: widget.UserSetting.ctx:type_name -> common.Context
	46, // 1: widget.UserSetting.account:type_name -> account.Account
	47, // 2: widget.UserSetting.user:type_name -> user.User
	12, // 3: widget.UserSetting.account_setting:type_name -> widget.Setting
	24, // 4: widget.UserSetting.campaigns:type_name -> widget.Campaign
	48, // 5: widget.UserSetting.bots:type_name -> bot.Bot
	10, // 6: widget.WidgetHeader.links:type_name -> widget.SocialLink
	45, // 7: widget.Setting.ctx:type_name -> common.Context
	49, // 8: widget.Setting.agents:type_name -> account.Agent
	11, // 9: widget.Setting.header:type_name -> widget.WidgetHeader
	15, // 10: widget.Setting.offline_form:type_name -> widget.Form
	15, // 11: widget.Setting.prechat_form:type_name -> widget.Form
	16, // 12: widget.Setting.desktop_button:type_name -> widget.ChatButton
	16, // 13: widget.Setting.mobile_button:type_name -> widget.ChatButton
	17, // 14: widget.Setting.greeting:type_name -> widget.Greeting
	13, // 15: widget.Form.fields:type_name -> widget.Field
	14, // 16: widget.Form.groups:type_name -> widget.Group
	20, // 17: widget.Segmentation.conditions:type_name -> widget.Condition
	20, // 18: widget.Segmentation.source_conditions:type_name -> widget.Condition
	20, // 19: widget.Segmentation.location_conditions:type_name -> widget.Condition
	20, // 20: widget.Segmentation.url_conditions:type_name -> widget.Condition
	20, // 21: widget.Segmentation.exclude_url_conditions:type_name -> widget.Condition
	20, // 22: widget.Segmentation.has_visited_url_conditions:type_name -> widget.Condition
	20, // 23: widget.Segmentation.has_not_visited_url_conditions:type_name -> widget.Condition
	20, // 24: widget.Segmentation.exclude_location_conditions:type_name -> widget.Condition
	24, // 25: widget.Campaigns.campaigns:type_name -> widget.Campaign
	50, // 26: widget.Notification.user_email:type_name -> conversation.Message
	45, // 27: widget.Campaign.ctx:type_name -> common.Context
	18, // 28: widget.Campaign.triggers:type_name -> widget.Trigger
	21, // 29: widget.Campaign.segmentations:type_name -> widget.Segmentation
	30, // 30: widget.Campaign.pages:type_name -> widget.Page
	19, // 31: widget.Campaign.schedulers:type_name -> widget.SchedulerCondition
	23, // 32: widget.Campaign.notification:type_name -> widget.Notification
	45, // 33: widget.Impression.ctx:type_name -> common.Context
	51, // 34: widget.Impression.device:type_name -> common.Device
	45, // 35: widget.ConversionRequest.ctx:type_name -> common.Context
	45, // 36: widget.Conversions.ctx:type_name -> common.Context
	28, // 37: widget.Conversions.conversions:type_name -> widget.Conversion
	45, // 38: widget.Conversion.ctx:type_name -> common.Context
	51, // 39: widget.Conversion.device:type_name -> common.Device
	32, // 40: widget.Conversion.submission:type_name -> widget.Submission
	45, // 41: widget.UserCampaignStatus.ctx:type_name -> common.Context
	15, // 42: widget.Page.form:type_name -> widget.Form
	34, // 43: widget.Page.primary_button:type_name -> widget.Button
	34, // 44: widget.Page.secondary_button:type_name -> widget.Button
	34, // 45: widget.Page.background_click:type_name -> widget.Button
	35, // 46: widget.Page.countdown:type_name -> widget.Countdown
	36, // 47: widget.Page.video:type_name -> widget.Video
	31, // 48: widget.Page.desktop_appearance:type_name -> widget.Appearance
	31, // 49: widget.Page.mobile_appearance:type_name -> widget.Appearance
	45, // 50: widget.Submission.ctx:type_name -> common.Context
	13, // 51: widget.Submission.fields:type_name -> widget.Field
	33, // 52: widget.Button.actions:type_name -> widget.ButtonAction
	45, // 53: widget.ReportCampaignRequest.ctx:type_name -> common.Context
	45, // 54: widget.ReportCampaignResponse.ctx:type_name -> common.Context
	45, // 55: widget.SearchLocationsRequest.ctx:type_name -> common.Context
	45, // 56: widget.UploadedImage.ctx:type_name -> common.Context
	45, // 57: widget.UploadedImages.ctx:type_name -> common.Context
	43, // 58: widget.UploadedImages.images:type_name -> widget.UploadedImage
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_widget_proto_init() }
func file_widget_proto_init() {
	if File_widget_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_widget_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Form); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Greeting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segmentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaigns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCampaignStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appearance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Countdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionsExported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_widget_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_widget_proto_goTypes,
		DependencyIndexes: file_widget_proto_depIdxs,
		EnumInfos:         file_widget_proto_enumTypes,
		MessageInfos:      file_widget_proto_msgTypes,
	}.Build()
	File_widget_proto = out.File
	file_widget_proto_rawDesc = nil
	file_widget_proto_goTypes = nil
	file_widget_proto_depIdxs = nil
}
