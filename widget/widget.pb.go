// Code generated by protoc-gen-go. DO NOT EDIT.
// source: widget/widget.proto

/*
Package widget is a generated protocol buffer package.

It is generated from these files:
	widget/widget.proto

It has these top-level messages:
	AllType
	Theme
	Sound
	Setting
	UserSetting
	Global
*/
package widget

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import account "bitbucket.org/subiz/header/account"
import common "bitbucket.org/subiz/header/common"
import user "bitbucket.org/subiz/header/user"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_WidgetUserSettingReadRequested         Event = 0
	Event_WidgetUserSettingUpdateRequested       Event = 1
	Event_WidgetSettingReadRequested             Event = 2
	Event_WidgetSettingUpdateRequested           Event = 3
	Event_WidgetSettingCssVersionUpdated         Event = 4
	Event_WidgetSettingLanguageUpdated           Event = 5
	Event_WidgetSettingCssVersionUpdateRequested Event = 6
	Event_WidgetSettingLanguageUpdateRequested   Event = 7
	Event_WidgetRequested                        Event = 8
	Event_WidgetSettingUpserted                  Event = 10
	Event_WidgetSynced                           Event = 100
)

var Event_name = map[int32]string{
	0:   "WidgetUserSettingReadRequested",
	1:   "WidgetUserSettingUpdateRequested",
	2:   "WidgetSettingReadRequested",
	3:   "WidgetSettingUpdateRequested",
	4:   "WidgetSettingCssVersionUpdated",
	5:   "WidgetSettingLanguageUpdated",
	6:   "WidgetSettingCssVersionUpdateRequested",
	7:   "WidgetSettingLanguageUpdateRequested",
	8:   "WidgetRequested",
	10:  "WidgetSettingUpserted",
	100: "WidgetSynced",
}
var Event_value = map[string]int32{
	"WidgetUserSettingReadRequested":         0,
	"WidgetUserSettingUpdateRequested":       1,
	"WidgetSettingReadRequested":             2,
	"WidgetSettingUpdateRequested":           3,
	"WidgetSettingCssVersionUpdated":         4,
	"WidgetSettingLanguageUpdated":           5,
	"WidgetSettingCssVersionUpdateRequested": 6,
	"WidgetSettingLanguageUpdateRequested":   7,
	"WidgetRequested":                        8,
	"WidgetSettingUpserted":                  10,
	"WidgetSynced":                           100,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Theme_ButtonPosition int32

const (
	Theme_left  Theme_ButtonPosition = 0
	Theme_right Theme_ButtonPosition = 1
)

var Theme_ButtonPosition_name = map[int32]string{
	0: "left",
	1: "right",
}
var Theme_ButtonPosition_value = map[string]int32{
	"left":  0,
	"right": 1,
}

func (x Theme_ButtonPosition) Enum() *Theme_ButtonPosition {
	p := new(Theme_ButtonPosition)
	*p = x
	return p
}
func (x Theme_ButtonPosition) String() string {
	return proto.EnumName(Theme_ButtonPosition_name, int32(x))
}
func (x *Theme_ButtonPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Theme_ButtonPosition_value, data, "Theme_ButtonPosition")
	if err != nil {
		return err
	}
	*x = Theme_ButtonPosition(value)
	return nil
}
func (Theme_ButtonPosition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Theme_WindowMode int32

const (
	Theme_mini Theme_WindowMode = 0
	Theme_full Theme_WindowMode = 1
)

var Theme_WindowMode_name = map[int32]string{
	0: "mini",
	1: "full",
}
var Theme_WindowMode_value = map[string]int32{
	"mini": 0,
	"full": 1,
}

func (x Theme_WindowMode) Enum() *Theme_WindowMode {
	p := new(Theme_WindowMode)
	*p = x
	return p
}
func (x Theme_WindowMode) String() string {
	return proto.EnumName(Theme_WindowMode_name, int32(x))
}
func (x *Theme_WindowMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Theme_WindowMode_value, data, "Theme_WindowMode")
	if err != nil {
		return err
	}
	*x = Theme_WindowMode(value)
	return nil
}
func (Theme_WindowMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type AllType struct {
	Theme            *Theme       `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	Sound            *Sound       `protobuf:"bytes,3,opt,name=sound" json:"sound,omitempty"`
	Setting          *Setting     `protobuf:"bytes,4,opt,name=setting" json:"setting,omitempty"`
	Us               *UserSetting `protobuf:"bytes,5,opt,name=us" json:"us,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AllType) Reset()                    { *m = AllType{} }
func (m *AllType) String() string            { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()               {}
func (*AllType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllType) GetTheme() *Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *AllType) GetSound() *Sound {
	if m != nil {
		return m.Sound
	}
	return nil
}

func (m *AllType) GetSetting() *Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *AllType) GetUs() *UserSetting {
	if m != nil {
		return m.Us
	}
	return nil
}

type Theme struct {
	AccountId        *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CustomCss        *string `protobuf:"bytes,8,opt,name=custom_css,json=customCss" json:"custom_css,omitempty"`
	WidgetPosition   *string `protobuf:"bytes,3,opt,name=widget_position,json=widgetPosition" json:"widget_position,omitempty"`
	WindowMode       *string `protobuf:"bytes,5,opt,name=window_mode,json=windowMode" json:"window_mode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Theme) Reset()                    { *m = Theme{} }
func (m *Theme) String() string            { return proto.CompactTextString(m) }
func (*Theme) ProtoMessage()               {}
func (*Theme) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Theme) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Theme) GetCustomCss() string {
	if m != nil && m.CustomCss != nil {
		return *m.CustomCss
	}
	return ""
}

func (m *Theme) GetWidgetPosition() string {
	if m != nil && m.WidgetPosition != nil {
		return *m.WidgetPosition
	}
	return ""
}

func (m *Theme) GetWindowMode() string {
	if m != nil && m.WindowMode != nil {
		return *m.WindowMode
	}
	return ""
}

type Sound struct {
	AccountId         *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Enabled           *bool   `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	NewConversation   *string `protobuf:"bytes,3,opt,name=new_conversation,json=newConversation" json:"new_conversation,omitempty"`
	FileCreate        *string `protobuf:"bytes,4,opt,name=file_create,json=fileCreate" json:"file_create,omitempty"`
	NewMessage        *string `protobuf:"bytes,5,opt,name=new_message,json=newMessage" json:"new_message,omitempty"`
	MessageSendFailed *string `protobuf:"bytes,6,opt,name=message_send_failed,json=messageSendFailed" json:"message_send_failed,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *Sound) Reset()                    { *m = Sound{} }
func (m *Sound) String() string            { return proto.CompactTextString(m) }
func (*Sound) ProtoMessage()               {}
func (*Sound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Sound) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Sound) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *Sound) GetNewConversation() string {
	if m != nil && m.NewConversation != nil {
		return *m.NewConversation
	}
	return ""
}

func (m *Sound) GetFileCreate() string {
	if m != nil && m.FileCreate != nil {
		return *m.FileCreate
	}
	return ""
}

func (m *Sound) GetNewMessage() string {
	if m != nil && m.NewMessage != nil {
		return *m.NewMessage
	}
	return ""
}

func (m *Sound) GetMessageSendFailed() string {
	if m != nil && m.MessageSendFailed != nil {
		return *m.MessageSendFailed
	}
	return ""
}

type Setting struct {
	Ctx               *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId         *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WidgetVersion     *string          `protobuf:"bytes,3,opt,name=widget_version,json=widgetVersion" json:"widget_version,omitempty"`
	Sound             *Sound           `protobuf:"bytes,4,opt,name=sound" json:"sound,omitempty"`
	Language          *string          `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	Theme             *Theme           `protobuf:"bytes,7,opt,name=theme" json:"theme,omitempty"`
	Replytime         *int32           `protobuf:"varint,9,opt,name=replytime" json:"replytime,omitempty"`
	Agents            []*account.Agent `protobuf:"bytes,10,rep,name=agents" json:"agents,omitempty"`
	AgentIds          []string         `protobuf:"bytes,11,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	LanguageUrl       *string          `protobuf:"bytes,13,opt,name=language_url,json=languageUrl" json:"language_url,omitempty"`
	CustomLanguageUrl *string          `protobuf:"bytes,14,opt,name=custom_language_url,json=customLanguageUrl" json:"custom_language_url,omitempty"`
	CssUrl            *string          `protobuf:"bytes,12,opt,name=css_url,json=cssUrl" json:"css_url,omitempty"`
	CustomCssUrl      *string          `protobuf:"bytes,15,opt,name=custom_css_url,json=customCssUrl" json:"custom_css_url,omitempty"`
	CustomLanguage    *string          `protobuf:"bytes,16,opt,name=custom_language,json=customLanguage" json:"custom_language,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Setting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Setting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Setting) GetWidgetVersion() string {
	if m != nil && m.WidgetVersion != nil {
		return *m.WidgetVersion
	}
	return ""
}

func (m *Setting) GetSound() *Sound {
	if m != nil {
		return m.Sound
	}
	return nil
}

func (m *Setting) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Setting) GetTheme() *Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *Setting) GetReplytime() int32 {
	if m != nil && m.Replytime != nil {
		return *m.Replytime
	}
	return 0
}

func (m *Setting) GetAgents() []*account.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *Setting) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *Setting) GetLanguageUrl() string {
	if m != nil && m.LanguageUrl != nil {
		return *m.LanguageUrl
	}
	return ""
}

func (m *Setting) GetCustomLanguageUrl() string {
	if m != nil && m.CustomLanguageUrl != nil {
		return *m.CustomLanguageUrl
	}
	return ""
}

func (m *Setting) GetCssUrl() string {
	if m != nil && m.CssUrl != nil {
		return *m.CssUrl
	}
	return ""
}

func (m *Setting) GetCustomCssUrl() string {
	if m != nil && m.CustomCssUrl != nil {
		return *m.CustomCssUrl
	}
	return ""
}

func (m *Setting) GetCustomLanguage() string {
	if m != nil && m.CustomLanguage != nil {
		return *m.CustomLanguage
	}
	return ""
}

type UserSetting struct {
	Ctx                 *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Account             *account.Account `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	AccountId           *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User                *user.User       `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	UserId              *string          `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SoundEnabled        *bool            `protobuf:"varint,5,opt,name=sound_enabled,json=soundEnabled" json:"sound_enabled,omitempty"`
	Language            *string          `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	SendTranscript      *bool            `protobuf:"varint,8,opt,name=send_transcript,json=sendTranscript" json:"send_transcript,omitempty"`
	AccountSetting      *Setting         `protobuf:"bytes,9,opt,name=account_setting,json=accountSetting" json:"account_setting,omitempty"`
	DesktopNotification *bool            `protobuf:"varint,10,opt,name=desktop_notification,json=desktopNotification" json:"desktop_notification,omitempty"`
	XXX_unrecognized    []byte           `json:"-"`
}

func (m *UserSetting) Reset()                    { *m = UserSetting{} }
func (m *UserSetting) String() string            { return proto.CompactTextString(m) }
func (*UserSetting) ProtoMessage()               {}
func (*UserSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserSetting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSetting) GetAccount() *account.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *UserSetting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSetting) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserSetting) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserSetting) GetSoundEnabled() bool {
	if m != nil && m.SoundEnabled != nil {
		return *m.SoundEnabled
	}
	return false
}

func (m *UserSetting) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *UserSetting) GetSendTranscript() bool {
	if m != nil && m.SendTranscript != nil {
		return *m.SendTranscript
	}
	return false
}

func (m *UserSetting) GetAccountSetting() *Setting {
	if m != nil {
		return m.AccountSetting
	}
	return nil
}

func (m *UserSetting) GetDesktopNotification() bool {
	if m != nil && m.DesktopNotification != nil {
		return *m.DesktopNotification
	}
	return false
}

// global setting. eg: widget_4/4234098234
type Global struct {
	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Name             *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Data             *string         `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Pk               *string         `protobuf:"bytes,4,opt,name=pk" json:"pk,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Global) Reset()                    { *m = Global{} }
func (m *Global) String() string            { return proto.CompactTextString(m) }
func (*Global) ProtoMessage()               {}
func (*Global) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Global) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Global) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Global) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Global) GetPk() string {
	if m != nil && m.Pk != nil {
		return *m.Pk
	}
	return ""
}

func init() {
	proto.RegisterType((*AllType)(nil), "widget.AllType")
	proto.RegisterType((*Theme)(nil), "widget.Theme")
	proto.RegisterType((*Sound)(nil), "widget.Sound")
	proto.RegisterType((*Setting)(nil), "widget.Setting")
	proto.RegisterType((*UserSetting)(nil), "widget.UserSetting")
	proto.RegisterType((*Global)(nil), "widget.Global")
	proto.RegisterEnum("widget.Event", Event_name, Event_value)
	proto.RegisterEnum("widget.Theme_ButtonPosition", Theme_ButtonPosition_name, Theme_ButtonPosition_value)
	proto.RegisterEnum("widget.Theme_WindowMode", Theme_WindowMode_name, Theme_WindowMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyServer service

type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := grpc.Invoke(ctx, "/widget.MyServer/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyServer service

type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "widget.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "widget/widget.proto",
}

// Client API for WidgetService service

type WidgetServiceClient interface {
	ReadSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error)
	UpdateSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
	ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserSetting, error)
	UpdateUserSetting(ctx context.Context, in *UserSetting, opts ...grpc.CallOption) (*UserSetting, error)
}

type widgetServiceClient struct {
	cc *grpc.ClientConn
}

func NewWidgetServiceClient(cc *grpc.ClientConn) WidgetServiceClient {
	return &widgetServiceClient{cc}
}

func (c *widgetServiceClient) ReadSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := grpc.Invoke(ctx, "/widget.WidgetService/ReadSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := grpc.Invoke(ctx, "/widget.WidgetService/UpdateSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserSetting, error) {
	out := new(UserSetting)
	err := grpc.Invoke(ctx, "/widget.WidgetService/ReadUserSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateUserSetting(ctx context.Context, in *UserSetting, opts ...grpc.CallOption) (*UserSetting, error) {
	out := new(UserSetting)
	err := grpc.Invoke(ctx, "/widget.WidgetService/UpdateUserSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WidgetService service

type WidgetServiceServer interface {
	ReadSetting(context.Context, *common.Id) (*Setting, error)
	UpdateSetting(context.Context, *Setting) (*Setting, error)
	ReadUserSetting(context.Context, *common.Id) (*UserSetting, error)
	UpdateUserSetting(context.Context, *UserSetting) (*UserSetting, error)
}

func RegisterWidgetServiceServer(s *grpc.Server, srv WidgetServiceServer) {
	s.RegisterService(&_WidgetService_serviceDesc, srv)
}

func _WidgetService_ReadSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/ReadSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/ReadUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/UpdateUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateUserSetting(ctx, req.(*UserSetting))
	}
	return interceptor(ctx, in, info, handler)
}

var _WidgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "widget.WidgetService",
	HandlerType: (*WidgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadSetting",
			Handler:    _WidgetService_ReadSetting_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _WidgetService_UpdateSetting_Handler,
		},
		{
			MethodName: "ReadUserSetting",
			Handler:    _WidgetService_ReadUserSetting_Handler,
		},
		{
			MethodName: "UpdateUserSetting",
			Handler:    _WidgetService_UpdateUserSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "widget/widget.proto",
}

func init() { proto.RegisterFile("widget/widget.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xf6, 0xbf, 0xad, 0xe3, 0xd8, 0x56, 0x37, 0x30, 0x08, 0x53, 0x82, 0xab, 0xa4, 0x4d, 0x9a,
	0x61, 0x1c, 0x08, 0xbd, 0xe0, 0x8e, 0x29, 0xa1, 0x30, 0x99, 0x21, 0x0c, 0xa3, 0x24, 0xf4, 0x52,
	0xa3, 0x68, 0x4f, 0x1c, 0x4d, 0xe4, 0x5d, 0xa3, 0x5d, 0xc5, 0x0d, 0xaf, 0xc0, 0x63, 0xf0, 0x52,
	0xdc, 0xf0, 0x00, 0x5c, 0x72, 0xc3, 0x35, 0xb3, 0x3f, 0xb2, 0x1c, 0xd7, 0xb8, 0xbd, 0xf1, 0x6a,
	0xbf, 0xef, 0xdb, 0x3d, 0xe7, 0xec, 0xf9, 0x31, 0x6c, 0xcf, 0x13, 0x3a, 0x41, 0x79, 0x64, 0x96,
	0xf1, 0x2c, 0xe3, 0x92, 0x93, 0x96, 0xd9, 0x0d, 0xbf, 0xb8, 0x4a, 0xe4, 0x55, 0x1e, 0xdf, 0xa2,
	0x1c, 0xf3, 0x6c, 0x72, 0x24, 0xf2, 0xab, 0xe4, 0xb7, 0xa3, 0x1b, 0x8c, 0x28, 0x66, 0x47, 0x51,
	0x1c, 0xf3, 0x9c, 0xc9, 0x62, 0x35, 0x27, 0x87, 0xe3, 0x0d, 0x27, 0x62, 0x3e, 0x9d, 0x72, 0x66,
	0x17, 0xab, 0x3f, 0xdc, 0xa0, 0xcf, 0x85, 0xfd, 0x31, 0x5a, 0xff, 0x8f, 0x2a, 0xb4, 0x5f, 0xa6,
	0xe9, 0xc5, 0xfd, 0x0c, 0xc9, 0x2e, 0x34, 0xe5, 0x0d, 0x4e, 0xd1, 0xab, 0x8d, 0xaa, 0x07, 0xdd,
	0xe3, 0xde, 0xd8, 0xfa, 0x7f, 0xa1, 0xc0, 0xc0, 0x70, 0x4a, 0x24, 0x78, 0xce, 0xa8, 0x57, 0x7f,
	0x28, 0x3a, 0x57, 0x60, 0x60, 0x38, 0xf2, 0x1c, 0xda, 0x02, 0xa5, 0x4c, 0xd8, 0xc4, 0x6b, 0x68,
	0xd9, 0x60, 0x21, 0x33, 0x70, 0x50, 0xf0, 0x64, 0x17, 0x6a, 0xb9, 0xf0, 0x9a, 0x5a, 0xb5, 0x5d,
	0xa8, 0x2e, 0x05, 0x66, 0x85, 0xb2, 0x96, 0x0b, 0xff, 0xcf, 0x2a, 0x34, 0xb5, 0x17, 0xe4, 0x53,
	0x00, 0xfb, 0x38, 0x61, 0x42, 0xb5, 0xa3, 0x4e, 0xe0, 0x58, 0xe4, 0x94, 0x2a, 0x3a, 0xce, 0x85,
	0xe4, 0xd3, 0x30, 0x16, 0xc2, 0xeb, 0x18, 0xda, 0x20, 0x27, 0x42, 0x90, 0x7d, 0x18, 0x18, 0x0b,
	0xe1, 0x8c, 0x8b, 0x44, 0x26, 0x9c, 0xe9, 0x30, 0x9c, 0xa0, 0x6f, 0xe0, 0x9f, 0x2d, 0x4a, 0x3e,
	0x83, 0xee, 0x3c, 0x61, 0x94, 0xcf, 0xc3, 0x29, 0xa7, 0xa8, 0xdd, 0x73, 0x02, 0x30, 0xd0, 0x19,
	0xa7, 0xe8, 0x3f, 0x85, 0xfe, 0xb7, 0xb9, 0x94, 0x9c, 0x2d, 0x8e, 0x74, 0xa0, 0x91, 0xe2, 0xb5,
	0x74, 0x2b, 0xc4, 0x81, 0x66, 0x96, 0x4c, 0x6e, 0xa4, 0x5b, 0xf5, 0x47, 0x00, 0xaf, 0x17, 0x87,
	0x94, 0x64, 0x9a, 0xb0, 0xc4, 0xad, 0xa8, 0xaf, 0xeb, 0x3c, 0x4d, 0xdd, 0xaa, 0xff, 0x57, 0x15,
	0x9a, 0xfa, 0xed, 0x56, 0x42, 0xab, 0xae, 0x86, 0xe6, 0x41, 0x1b, 0x59, 0x74, 0x95, 0xa2, 0x09,
	0xbb, 0x13, 0x14, 0x5b, 0xf2, 0x1c, 0x5c, 0x86, 0xf3, 0x30, 0xe6, 0xec, 0x0e, 0x33, 0x11, 0x2d,
	0x85, 0x35, 0x60, 0x38, 0x3f, 0x59, 0x82, 0x55, 0x5c, 0xd7, 0x49, 0x8a, 0x61, 0x9c, 0x61, 0x24,
	0x51, 0x27, 0xc7, 0x09, 0x40, 0x41, 0x27, 0x1a, 0x51, 0x02, 0x75, 0xd7, 0x14, 0x85, 0x88, 0x26,
	0x8b, 0xc0, 0x19, 0xce, 0xcf, 0x0c, 0x42, 0xc6, 0xb0, 0x6d, 0xc9, 0x50, 0x20, 0xa3, 0xe1, 0x75,
	0x94, 0x28, 0x97, 0x5a, 0x5a, 0xf8, 0xc8, 0x52, 0xe7, 0xc8, 0xe8, 0xf7, 0x9a, 0xf0, 0xff, 0xad,
	0x43, 0xdb, 0xa6, 0x92, 0x3c, 0x81, 0x7a, 0x2c, 0xdf, 0xe8, 0xd0, 0x54, 0x49, 0xd8, 0xa2, 0x3d,
	0xe1, 0x4c, 0xe2, 0x1b, 0x19, 0x28, 0xee, 0x5d, 0xf9, 0x7d, 0x0a, 0x36, 0x53, 0xa1, 0x8a, 0xa9,
	0x0c, 0xb4, 0x67, 0xd0, 0x5f, 0x0c, 0x58, 0x16, 0x69, 0x63, 0x43, 0x91, 0x0e, 0xa1, 0x93, 0x46,
	0x6c, 0x92, 0x97, 0x71, 0x2e, 0xf6, 0x65, 0x2b, 0xb4, 0x37, 0xb4, 0xc2, 0x63, 0x70, 0x32, 0x9c,
	0xa5, 0xf7, 0x32, 0x99, 0xa2, 0xe7, 0x8c, 0xaa, 0x07, 0xcd, 0xa0, 0x04, 0xc8, 0x33, 0x68, 0x45,
	0x13, 0x64, 0x52, 0x78, 0x30, 0xaa, 0x1f, 0x74, 0x8f, 0xfb, 0xe3, 0xa2, 0xab, 0x5f, 0x2a, 0x38,
	0xb0, 0x2c, 0xf9, 0x04, 0x1c, 0xfd, 0x15, 0x26, 0x54, 0x78, 0xdd, 0x51, 0x5d, 0xf9, 0xa1, 0x81,
	0x53, 0x2a, 0xc8, 0x13, 0xd8, 0x2a, 0x7c, 0x0a, 0xf3, 0x2c, 0xf5, 0x7a, 0xda, 0xcf, 0x6e, 0x81,
	0x5d, 0x66, 0xa9, 0x4a, 0x88, 0x2d, 0xf9, 0x07, 0xca, 0xbe, 0x49, 0x88, 0xa1, 0x7e, 0x5c, 0xd2,
	0x7f, 0x04, 0xed, 0x58, 0x08, 0xad, 0xd9, 0xd2, 0x9a, 0x56, 0x2c, 0x84, 0x22, 0xf6, 0xa0, 0x5f,
	0xf6, 0x8e, 0xe6, 0x07, 0x9a, 0xdf, 0x5a, 0xf4, 0x8f, 0x52, 0xed, 0xc3, 0x60, 0xc5, 0x9c, 0xe7,
	0x9a, 0x16, 0x7a, 0x68, 0xca, 0xff, 0xbd, 0x0e, 0xdd, 0xa5, 0x3e, 0x7e, 0x9f, 0xe4, 0x1f, 0x42,
	0xdb, 0xbe, 0x91, 0x9d, 0x2e, 0x6e, 0xf9, 0x66, 0x66, 0x0d, 0x0a, 0xc1, 0xbb, 0x0a, 0x65, 0x07,
	0x1a, 0x6a, 0xca, 0xd9, 0x02, 0x80, 0xb1, 0x1e, 0x79, 0xca, 0x9d, 0x40, 0xe3, 0xea, 0x15, 0xd4,
	0xaa, 0xce, 0xb6, 0xcd, 0x2b, 0xa8, 0xed, 0x29, 0x25, 0xbb, 0xd0, 0xd3, 0xe5, 0x11, 0x16, 0xcd,
	0xd6, 0xd4, 0xcd, 0xb6, 0xa5, 0xc1, 0x57, 0xb6, 0xe3, 0x96, 0x4b, 0xa7, 0xb5, 0x52, 0x3a, 0xfb,
	0x30, 0xd0, 0x8d, 0x21, 0xb3, 0x88, 0x89, 0x38, 0x4b, 0x66, 0x52, 0xcf, 0xa1, 0x4e, 0xd0, 0x57,
	0xf0, 0xc5, 0x02, 0x25, 0x5f, 0xc3, 0xa0, 0x88, 0xa0, 0x18, 0x96, 0xce, 0xfa, 0x61, 0xd9, 0xb7,
	0xba, 0xe2, 0x29, 0xbf, 0x84, 0x0f, 0x28, 0x8a, 0x5b, 0xc9, 0x67, 0x21, 0xe3, 0x32, 0xb9, 0x4e,
	0x62, 0xd3, 0xf4, 0xa0, 0xed, 0x6c, 0x5b, 0xee, 0xa7, 0x25, 0xca, 0x8f, 0xa1, 0xf5, 0x43, 0xca,
	0xaf, 0xa2, 0xf4, 0x7d, 0xf2, 0x40, 0xa0, 0xc1, 0x22, 0xfb, 0x3f, 0xe0, 0x04, 0xfa, 0x5b, 0x61,
	0x34, 0x92, 0x91, 0xed, 0x37, 0xfd, 0x4d, 0xfa, 0x50, 0x9b, 0xdd, 0xda, 0x21, 0x52, 0x9b, 0xdd,
	0x1e, 0xfe, 0x53, 0x83, 0xe6, 0xab, 0x3b, 0x64, 0x92, 0xf8, 0xb0, 0xf3, 0x5a, 0xc7, 0xb0, 0x3c,
	0xc9, 0x31, 0xa2, 0x01, 0xfe, 0x9a, 0xa3, 0x90, 0x48, 0xdd, 0x0a, 0xd9, 0x83, 0xd1, 0x5b, 0x9a,
	0xcb, 0x19, 0x8d, 0x24, 0x96, 0xaa, 0x2a, 0xd9, 0x81, 0xa1, 0x51, 0xad, 0xbd, 0xa5, 0x46, 0x46,
	0xf0, 0xf8, 0x01, 0xbf, 0x7a, 0x43, 0xbd, 0xf4, 0xc5, 0x2a, 0x4e, 0x84, 0xb0, 0x73, 0xc2, 0x68,
	0xa9, 0xdb, 0x78, 0xeb, 0x96, 0x45, 0xc3, 0x58, 0x45, 0x93, 0x1c, 0xc2, 0xb3, 0x8d, 0xb7, 0x94,
	0x16, 0x5b, 0xe4, 0x00, 0xf6, 0x36, 0xdc, 0x56, 0x2a, 0xdb, 0x64, 0x1b, 0x06, 0x46, 0x59, 0x82,
	0x1d, 0xf2, 0x31, 0x7c, 0xb8, 0x12, 0x92, 0xc0, 0x4c, 0x51, 0x40, 0x5c, 0xd8, 0xb2, 0xd4, 0x3d,
	0x8b, 0x91, 0xba, 0xf4, 0xf8, 0x05, 0x74, 0xce, 0xee, 0xcf, 0x31, 0xbb, 0xc3, 0x8c, 0x1c, 0x40,
	0xed, 0x3b, 0x4e, 0x16, 0xe5, 0x63, 0xff, 0xd7, 0x87, 0xab, 0x80, 0x5f, 0x39, 0xfe, 0xbb, 0x0a,
	0xbd, 0xc2, 0x46, 0x76, 0x97, 0xc4, 0x48, 0x3e, 0x87, 0xae, 0x7a, 0xda, 0xa2, 0xc4, 0xa0, 0x28,
	0x8c, 0x53, 0x3a, 0x5c, 0xad, 0x47, 0xbf, 0x42, 0xbe, 0x82, 0x9e, 0x09, 0xa6, 0xd0, 0xaf, 0x6a,
	0xd6, 0x1d, 0x7a, 0x01, 0x03, 0x65, 0x62, 0x79, 0x28, 0x2c, 0x9b, 0x59, 0xf7, 0xef, 0xef, 0x57,
	0xc8, 0x37, 0xf0, 0xc8, 0x98, 0x5a, 0x3e, 0xb7, 0x4e, 0xfb, 0x3f, 0x17, 0xfc, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x31, 0x8c, 0x4a, 0x1c, 0x8e, 0x09, 0x00, 0x00,
}
