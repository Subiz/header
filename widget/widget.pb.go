// Code generated by protoc-gen-go. DO NOT EDIT.
// source: widget/widget.proto

package widget

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	user "github.com/subiz/header/user"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_WidgetUserSettingReadRequested         Event = 0
	Event_WidgetUserSettingUpdateRequested       Event = 1
	Event_WidgetSettingReadRequested             Event = 2
	Event_WidgetSettingUpdateRequested           Event = 3
	Event_WidgetSettingCssVersionUpdated         Event = 4
	Event_WidgetSettingLanguageUpdated           Event = 5
	Event_WidgetSettingCssVersionUpdateRequested Event = 6
	Event_WidgetSettingLanguageUpdateRequested   Event = 7
	Event_WidgetRequested                        Event = 8
	Event_WidgetSettingUpserted                  Event = 10
	Event_WidgetSynced                           Event = 100
	Event_WidgetV3Synced                         Event = 103
)

var Event_name = map[int32]string{
	0:   "WidgetUserSettingReadRequested",
	1:   "WidgetUserSettingUpdateRequested",
	2:   "WidgetSettingReadRequested",
	3:   "WidgetSettingUpdateRequested",
	4:   "WidgetSettingCssVersionUpdated",
	5:   "WidgetSettingLanguageUpdated",
	6:   "WidgetSettingCssVersionUpdateRequested",
	7:   "WidgetSettingLanguageUpdateRequested",
	8:   "WidgetRequested",
	10:  "WidgetSettingUpserted",
	100: "WidgetSynced",
	103: "WidgetV3Synced",
}

var Event_value = map[string]int32{
	"WidgetUserSettingReadRequested":         0,
	"WidgetUserSettingUpdateRequested":       1,
	"WidgetSettingReadRequested":             2,
	"WidgetSettingUpdateRequested":           3,
	"WidgetSettingCssVersionUpdated":         4,
	"WidgetSettingLanguageUpdated":           5,
	"WidgetSettingCssVersionUpdateRequested": 6,
	"WidgetSettingLanguageUpdateRequested":   7,
	"WidgetRequested":                        8,
	"WidgetSettingUpserted":                  10,
	"WidgetSynced":                           100,
	"WidgetV3Synced":                         103,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}

func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}

func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{0}
}

type Theme_ButtonPosition int32

const (
	Theme_left  Theme_ButtonPosition = 0
	Theme_right Theme_ButtonPosition = 1
)

var Theme_ButtonPosition_name = map[int32]string{
	0: "left",
	1: "right",
}

var Theme_ButtonPosition_value = map[string]int32{
	"left":  0,
	"right": 1,
}

func (x Theme_ButtonPosition) Enum() *Theme_ButtonPosition {
	p := new(Theme_ButtonPosition)
	*p = x
	return p
}

func (x Theme_ButtonPosition) String() string {
	return proto.EnumName(Theme_ButtonPosition_name, int32(x))
}

func (x *Theme_ButtonPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Theme_ButtonPosition_value, data, "Theme_ButtonPosition")
	if err != nil {
		return err
	}
	*x = Theme_ButtonPosition(value)
	return nil
}

func (Theme_ButtonPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{1, 0}
}

type Theme_WindowMode int32

const (
	Theme_mini Theme_WindowMode = 0
	Theme_full Theme_WindowMode = 1
)

var Theme_WindowMode_name = map[int32]string{
	0: "mini",
	1: "full",
}

var Theme_WindowMode_value = map[string]int32{
	"mini": 0,
	"full": 1,
}

func (x Theme_WindowMode) Enum() *Theme_WindowMode {
	p := new(Theme_WindowMode)
	*p = x
	return p
}

func (x Theme_WindowMode) String() string {
	return proto.EnumName(Theme_WindowMode_name, int32(x))
}

func (x *Theme_WindowMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Theme_WindowMode_value, data, "Theme_WindowMode")
	if err != nil {
		return err
	}
	*x = Theme_WindowMode(value)
	return nil
}

func (Theme_WindowMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{1, 1}
}

type AllType struct {
	Theme                *Theme       `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	Sound                *Sound       `protobuf:"bytes,3,opt,name=sound" json:"sound,omitempty"`
	Setting              *Setting     `protobuf:"bytes,4,opt,name=setting" json:"setting,omitempty"`
	Us                   *UserSetting `protobuf:"bytes,5,opt,name=us" json:"us,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AllType) Reset()         { *m = AllType{} }
func (m *AllType) String() string { return proto.CompactTextString(m) }
func (*AllType) ProtoMessage()    {}
func (*AllType) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{0}
}

func (m *AllType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllType.Unmarshal(m, b)
}
func (m *AllType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllType.Marshal(b, m, deterministic)
}
func (m *AllType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllType.Merge(m, src)
}
func (m *AllType) XXX_Size() int {
	return xxx_messageInfo_AllType.Size(m)
}
func (m *AllType) XXX_DiscardUnknown() {
	xxx_messageInfo_AllType.DiscardUnknown(m)
}

var xxx_messageInfo_AllType proto.InternalMessageInfo

func (m *AllType) GetTheme() *Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *AllType) GetSound() *Sound {
	if m != nil {
		return m.Sound
	}
	return nil
}

func (m *AllType) GetSetting() *Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *AllType) GetUs() *UserSetting {
	if m != nil {
		return m.Us
	}
	return nil
}

type Theme struct {
	AccountId            *string  `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CustomCss            *string  `protobuf:"bytes,8,opt,name=custom_css,json=customCss" json:"custom_css,omitempty"`
	WidgetPosition       *string  `protobuf:"bytes,3,opt,name=widget_position,json=widgetPosition" json:"widget_position,omitempty"`
	WindowMode           *string  `protobuf:"bytes,5,opt,name=window_mode,json=windowMode" json:"window_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Theme) Reset()         { *m = Theme{} }
func (m *Theme) String() string { return proto.CompactTextString(m) }
func (*Theme) ProtoMessage()    {}
func (*Theme) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{1}
}

func (m *Theme) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Theme.Unmarshal(m, b)
}
func (m *Theme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Theme.Marshal(b, m, deterministic)
}
func (m *Theme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Theme.Merge(m, src)
}
func (m *Theme) XXX_Size() int {
	return xxx_messageInfo_Theme.Size(m)
}
func (m *Theme) XXX_DiscardUnknown() {
	xxx_messageInfo_Theme.DiscardUnknown(m)
}

var xxx_messageInfo_Theme proto.InternalMessageInfo

func (m *Theme) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Theme) GetCustomCss() string {
	if m != nil && m.CustomCss != nil {
		return *m.CustomCss
	}
	return ""
}

func (m *Theme) GetWidgetPosition() string {
	if m != nil && m.WidgetPosition != nil {
		return *m.WidgetPosition
	}
	return ""
}

func (m *Theme) GetWindowMode() string {
	if m != nil && m.WindowMode != nil {
		return *m.WindowMode
	}
	return ""
}

type Sound struct {
	AccountId            *string  `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Enabled              *bool    `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	NewConversation      *string  `protobuf:"bytes,3,opt,name=new_conversation,json=newConversation" json:"new_conversation,omitempty"`
	FileCreate           *string  `protobuf:"bytes,4,opt,name=file_create,json=fileCreate" json:"file_create,omitempty"`
	NewMessage           *string  `protobuf:"bytes,5,opt,name=new_message,json=newMessage" json:"new_message,omitempty"`
	MessageSendFailed    *string  `protobuf:"bytes,6,opt,name=message_send_failed,json=messageSendFailed" json:"message_send_failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sound) Reset()         { *m = Sound{} }
func (m *Sound) String() string { return proto.CompactTextString(m) }
func (*Sound) ProtoMessage()    {}
func (*Sound) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{2}
}

func (m *Sound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sound.Unmarshal(m, b)
}
func (m *Sound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sound.Marshal(b, m, deterministic)
}
func (m *Sound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sound.Merge(m, src)
}
func (m *Sound) XXX_Size() int {
	return xxx_messageInfo_Sound.Size(m)
}
func (m *Sound) XXX_DiscardUnknown() {
	xxx_messageInfo_Sound.DiscardUnknown(m)
}

var xxx_messageInfo_Sound proto.InternalMessageInfo

func (m *Sound) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Sound) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *Sound) GetNewConversation() string {
	if m != nil && m.NewConversation != nil {
		return *m.NewConversation
	}
	return ""
}

func (m *Sound) GetFileCreate() string {
	if m != nil && m.FileCreate != nil {
		return *m.FileCreate
	}
	return ""
}

func (m *Sound) GetNewMessage() string {
	if m != nil && m.NewMessage != nil {
		return *m.NewMessage
	}
	return ""
}

func (m *Sound) GetMessageSendFailed() string {
	if m != nil && m.MessageSendFailed != nil {
		return *m.MessageSendFailed
	}
	return ""
}

type Setting struct {
	Ctx                  *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WidgetVersion        *string          `protobuf:"bytes,3,opt,name=widget_version,json=widgetVersion" json:"widget_version,omitempty"`
	Sound                *Sound           `protobuf:"bytes,4,opt,name=sound" json:"sound,omitempty"`
	Language             *string          `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	Theme                *Theme           `protobuf:"bytes,7,opt,name=theme" json:"theme,omitempty"`
	Replytime            *int32           `protobuf:"varint,9,opt,name=replytime" json:"replytime,omitempty"`
	Agents               []*account.Agent `protobuf:"bytes,10,rep,name=agents" json:"agents,omitempty"`
	AgentIds             []string         `protobuf:"bytes,11,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	LanguageUrl          *string          `protobuf:"bytes,13,opt,name=language_url,json=languageUrl" json:"language_url,omitempty"`
	CustomLanguageUrl    *string          `protobuf:"bytes,14,opt,name=custom_language_url,json=customLanguageUrl" json:"custom_language_url,omitempty"`
	CssUrl               *string          `protobuf:"bytes,12,opt,name=css_url,json=cssUrl" json:"css_url,omitempty"`
	CustomCssUrl         *string          `protobuf:"bytes,15,opt,name=custom_css_url,json=customCssUrl" json:"custom_css_url,omitempty"`
	CustomLanguage       *string          `protobuf:"bytes,16,opt,name=custom_language,json=customLanguage" json:"custom_language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{3}
}

func (m *Setting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Setting.Unmarshal(m, b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return xxx_messageInfo_Setting.Size(m)
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Setting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Setting) GetWidgetVersion() string {
	if m != nil && m.WidgetVersion != nil {
		return *m.WidgetVersion
	}
	return ""
}

func (m *Setting) GetSound() *Sound {
	if m != nil {
		return m.Sound
	}
	return nil
}

func (m *Setting) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Setting) GetTheme() *Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *Setting) GetReplytime() int32 {
	if m != nil && m.Replytime != nil {
		return *m.Replytime
	}
	return 0
}

func (m *Setting) GetAgents() []*account.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *Setting) GetAgentIds() []string {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

func (m *Setting) GetLanguageUrl() string {
	if m != nil && m.LanguageUrl != nil {
		return *m.LanguageUrl
	}
	return ""
}

func (m *Setting) GetCustomLanguageUrl() string {
	if m != nil && m.CustomLanguageUrl != nil {
		return *m.CustomLanguageUrl
	}
	return ""
}

func (m *Setting) GetCssUrl() string {
	if m != nil && m.CssUrl != nil {
		return *m.CssUrl
	}
	return ""
}

func (m *Setting) GetCustomCssUrl() string {
	if m != nil && m.CustomCssUrl != nil {
		return *m.CustomCssUrl
	}
	return ""
}

func (m *Setting) GetCustomLanguage() string {
	if m != nil && m.CustomLanguage != nil {
		return *m.CustomLanguage
	}
	return ""
}

type UserSetting struct {
	Ctx                  *common.Context  `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Account              *account.Account `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	AccountId            *string          `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	User                 *user.User       `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	UserId               *string          `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SoundEnabled         *bool            `protobuf:"varint,5,opt,name=sound_enabled,json=soundEnabled" json:"sound_enabled,omitempty"`
	Language             *string          `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	SendTranscript       *bool            `protobuf:"varint,8,opt,name=send_transcript,json=sendTranscript" json:"send_transcript,omitempty"`
	AccountSetting       *Setting         `protobuf:"bytes,9,opt,name=account_setting,json=accountSetting" json:"account_setting,omitempty"`
	DesktopNotification  *bool            `protobuf:"varint,10,opt,name=desktop_notification,json=desktopNotification" json:"desktop_notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserSetting) Reset()         { *m = UserSetting{} }
func (m *UserSetting) String() string { return proto.CompactTextString(m) }
func (*UserSetting) ProtoMessage()    {}
func (*UserSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{4}
}

func (m *UserSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSetting.Unmarshal(m, b)
}
func (m *UserSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSetting.Marshal(b, m, deterministic)
}
func (m *UserSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetting.Merge(m, src)
}
func (m *UserSetting) XXX_Size() int {
	return xxx_messageInfo_UserSetting.Size(m)
}
func (m *UserSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetting.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetting proto.InternalMessageInfo

func (m *UserSetting) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *UserSetting) GetAccount() *account.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *UserSetting) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *UserSetting) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserSetting) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserSetting) GetSoundEnabled() bool {
	if m != nil && m.SoundEnabled != nil {
		return *m.SoundEnabled
	}
	return false
}

func (m *UserSetting) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *UserSetting) GetSendTranscript() bool {
	if m != nil && m.SendTranscript != nil {
		return *m.SendTranscript
	}
	return false
}

func (m *UserSetting) GetAccountSetting() *Setting {
	if m != nil {
		return m.AccountSetting
	}
	return nil
}

func (m *UserSetting) GetDesktopNotification() bool {
	if m != nil && m.DesktopNotification != nil {
		return *m.DesktopNotification
	}
	return false
}

// global setting. eg: widget_4/4234098234
type Global struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Data                 *string         `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Pk                   *string         `protobuf:"bytes,4,opt,name=pk" json:"pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Global) Reset()         { *m = Global{} }
func (m *Global) String() string { return proto.CompactTextString(m) }
func (*Global) ProtoMessage()    {}
func (*Global) Descriptor() ([]byte, []int) {
	return fileDescriptor_87dc5a041960b936, []int{5}
}

func (m *Global) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Global.Unmarshal(m, b)
}
func (m *Global) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Global.Marshal(b, m, deterministic)
}
func (m *Global) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Global.Merge(m, src)
}
func (m *Global) XXX_Size() int {
	return xxx_messageInfo_Global.Size(m)
}
func (m *Global) XXX_DiscardUnknown() {
	xxx_messageInfo_Global.DiscardUnknown(m)
}

var xxx_messageInfo_Global proto.InternalMessageInfo

func (m *Global) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Global) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Global) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Global) GetPk() string {
	if m != nil && m.Pk != nil {
		return *m.Pk
	}
	return ""
}

func init() {
	proto.RegisterEnum("widget.Event", Event_name, Event_value)
	proto.RegisterEnum("widget.Theme_ButtonPosition", Theme_ButtonPosition_name, Theme_ButtonPosition_value)
	proto.RegisterEnum("widget.Theme_WindowMode", Theme_WindowMode_name, Theme_WindowMode_value)
	proto.RegisterType((*AllType)(nil), "widget.AllType")
	proto.RegisterType((*Theme)(nil), "widget.Theme")
	proto.RegisterType((*Sound)(nil), "widget.Sound")
	proto.RegisterType((*Setting)(nil), "widget.Setting")
	proto.RegisterType((*UserSetting)(nil), "widget.UserSetting")
	proto.RegisterType((*Global)(nil), "widget.Global")
}

func init() { proto.RegisterFile("widget/widget.proto", fileDescriptor_87dc5a041960b936) }

var fileDescriptor_87dc5a041960b936 = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcb, 0x72, 0xe3, 0x44,
	0x1b, 0x8d, 0x7c, 0xd7, 0x67, 0xc7, 0xd6, 0xb4, 0xff, 0xbf, 0x10, 0x66, 0x08, 0x1e, 0x27, 0x93,
	0x1b, 0x85, 0x53, 0x64, 0x36, 0x6c, 0x58, 0x0c, 0x66, 0xa0, 0x52, 0x45, 0xa8, 0x94, 0x92, 0xcc,
	0xac, 0x28, 0x95, 0xa2, 0x6e, 0x3b, 0xaa, 0xc8, 0xdd, 0x46, 0xdd, 0x8a, 0x27, 0xec, 0x59, 0xf1,
	0x18, 0xbc, 0x14, 0x1b, 0x5e, 0x83, 0x25, 0x45, 0xf5, 0x45, 0x97, 0x38, 0x9e, 0x4c, 0x36, 0x69,
	0xf5, 0x39, 0xa7, 0xbb, 0xbf, 0xbb, 0x03, 0xfd, 0x65, 0x84, 0x67, 0x44, 0x1c, 0xe9, 0x65, 0xbc,
	0x48, 0x98, 0x60, 0xa8, 0xa1, 0x77, 0x83, 0xaf, 0x66, 0x91, 0xb8, 0x4e, 0xaf, 0xc6, 0x21, 0x9b,
	0x1f, 0xf1, 0xf4, 0x2a, 0xfa, 0xed, 0xe8, 0x9a, 0x04, 0x98, 0x24, 0x47, 0x41, 0x18, 0xb2, 0x94,
	0x8a, 0x6c, 0xd5, 0xc7, 0x06, 0x5f, 0x7e, 0x48, 0x1e, 0xb2, 0xf9, 0x9c, 0x51, 0xb3, 0x18, 0xf1,
	0xfe, 0x87, 0xc4, 0x29, 0x37, 0x7f, 0x5e, 0x69, 0xe5, 0xe8, 0x4f, 0x0b, 0x9a, 0xaf, 0xe3, 0xf8,
	0xe2, 0x6e, 0x41, 0xd0, 0x36, 0xd4, 0xc5, 0x35, 0x99, 0x13, 0xb7, 0x32, 0xb4, 0xf6, 0xdb, 0xc7,
	0x9b, 0x63, 0x63, 0xf7, 0x85, 0x04, 0x3d, 0xcd, 0x49, 0x11, 0x67, 0x29, 0xc5, 0x6e, 0xf5, 0xbe,
	0xe8, 0x5c, 0x82, 0x9e, 0xe6, 0xd0, 0x01, 0x34, 0x39, 0x11, 0x22, 0xa2, 0x33, 0xb7, 0xa6, 0x64,
	0xbd, 0x5c, 0xa6, 0x61, 0x2f, 0xe3, 0xd1, 0x36, 0x54, 0x52, 0xee, 0xd6, 0x95, 0xaa, 0x9f, 0xa9,
	0x2e, 0x39, 0x49, 0x32, 0x65, 0x25, 0xe5, 0xa3, 0xbf, 0x2c, 0xa8, 0x2b, 0x2b, 0xd0, 0xe7, 0x00,
	0x26, 0x2e, 0x7e, 0x84, 0x95, 0xa1, 0xb6, 0x67, 0x1b, 0xe4, 0x04, 0x4b, 0x3a, 0x4c, 0xb9, 0x60,
	0x73, 0x3f, 0xe4, 0xdc, 0x6d, 0x69, 0x5a, 0x23, 0x13, 0xce, 0xd1, 0x1e, 0xf4, 0xf4, 0x0b, 0xfe,
	0x82, 0xf1, 0x48, 0x44, 0x8c, 0x2a, 0x37, 0x6c, 0xaf, 0xab, 0xe1, 0x33, 0x83, 0xa2, 0x2f, 0xa0,
	0xbd, 0x8c, 0x28, 0x66, 0x4b, 0x7f, 0xce, 0x30, 0x51, 0xe6, 0xd9, 0x1e, 0x68, 0xe8, 0x94, 0x61,
	0x32, 0x7a, 0x09, 0xdd, 0xef, 0x52, 0x21, 0x18, 0xcd, 0x8f, 0xb4, 0xa0, 0x16, 0x93, 0xa9, 0x70,
	0x36, 0x90, 0x0d, 0xf5, 0x24, 0x9a, 0x5d, 0x0b, 0xc7, 0x1a, 0x0d, 0x01, 0xde, 0xe5, 0x87, 0xa4,
	0x64, 0x1e, 0xd1, 0xc8, 0xd9, 0x90, 0x5f, 0xd3, 0x34, 0x8e, 0x1d, 0x6b, 0xf4, 0xb7, 0x05, 0x75,
	0x15, 0xbb, 0x15, 0xd7, 0xac, 0x55, 0xd7, 0x5c, 0x68, 0x12, 0x1a, 0x5c, 0xc5, 0x44, 0xbb, 0xdd,
	0xf2, 0xb2, 0x2d, 0x3a, 0x00, 0x87, 0x92, 0xa5, 0x1f, 0x32, 0x7a, 0x4b, 0x12, 0x1e, 0x94, 0xdc,
	0xea, 0x51, 0xb2, 0x9c, 0x94, 0x60, 0xe9, 0xd7, 0x34, 0x8a, 0x89, 0x1f, 0x26, 0x24, 0x10, 0x44,
	0x25, 0xc7, 0xf6, 0x40, 0x42, 0x13, 0x85, 0x48, 0x81, 0xbc, 0x6b, 0x4e, 0x38, 0x0f, 0x66, 0xb9,
	0xe3, 0x94, 0x2c, 0x4f, 0x35, 0x82, 0xc6, 0xd0, 0x37, 0xa4, 0xcf, 0x09, 0xc5, 0xfe, 0x34, 0x88,
	0xa4, 0x49, 0x0d, 0x25, 0x7c, 0x66, 0xa8, 0x73, 0x42, 0xf1, 0x0f, 0x8a, 0x18, 0xfd, 0x53, 0x85,
	0xa6, 0x49, 0x25, 0x7a, 0x01, 0xd5, 0x50, 0xbc, 0x57, 0xae, 0xc9, 0x92, 0x30, 0x25, 0x3b, 0x61,
	0x54, 0x90, 0xf7, 0xc2, 0x93, 0xdc, 0xc7, 0xf2, 0xfb, 0x12, 0x4c, 0xa6, 0x7c, 0xe9, 0x53, 0xe1,
	0xe8, 0xa6, 0x46, 0xdf, 0x6a, 0xb0, 0x28, 0xd2, 0xda, 0x23, 0x45, 0x3a, 0x80, 0x56, 0x1c, 0xd0,
	0x59, 0x5a, 0xf8, 0x99, 0xef, 0x8b, 0x56, 0x68, 0x3e, 0xd2, 0x0a, 0xcf, 0xc1, 0x4e, 0xc8, 0x22,
	0xbe, 0x13, 0xd1, 0x9c, 0xb8, 0xf6, 0xd0, 0xda, 0xaf, 0x7b, 0x05, 0x80, 0x76, 0xa1, 0x11, 0xcc,
	0x08, 0x15, 0xdc, 0x85, 0x61, 0x75, 0xbf, 0x7d, 0xdc, 0x1d, 0x67, 0x0d, 0xfd, 0x5a, 0xc2, 0x9e,
	0x61, 0xd1, 0x67, 0x60, 0xab, 0x2f, 0x3f, 0xc2, 0xdc, 0x6d, 0x0f, 0xab, 0xd2, 0x0e, 0x05, 0x9c,
	0x60, 0x8e, 0x5e, 0x40, 0x27, 0xb3, 0xc9, 0x4f, 0x93, 0xd8, 0xdd, 0x54, 0x76, 0xb6, 0x33, 0xec,
	0x32, 0x89, 0x65, 0x42, 0x4c, 0xc9, 0xdf, 0x53, 0x76, 0x75, 0x42, 0x34, 0xf5, 0x53, 0x49, 0xff,
	0x09, 0x34, 0x43, 0xce, 0x95, 0xa6, 0xa3, 0x34, 0x8d, 0x90, 0x73, 0x49, 0xec, 0x40, 0xb7, 0xe8,
	0x1d, 0xc5, 0xf7, 0x14, 0xdf, 0xc9, 0xfb, 0x47, 0xaa, 0xf6, 0xa0, 0xb7, 0xf2, 0x9c, 0xeb, 0xe8,
	0x16, 0xba, 0xff, 0xd4, 0xe8, 0x8f, 0x2a, 0xb4, 0x4b, 0x7d, 0xfc, 0x94, 0xe4, 0x1f, 0x42, 0xd3,
	0xc4, 0xc8, 0x4c, 0x17, 0xa7, 0x88, 0x99, 0x5e, 0xbd, 0x4c, 0xf0, 0xb1, 0x42, 0xd9, 0x82, 0x9a,
	0x1c, 0x73, 0xa6, 0x00, 0x60, 0x2c, 0x37, 0x6a, 0xac, 0x78, 0x0a, 0x97, 0x51, 0x90, 0xab, 0x3c,
	0xdb, 0xd4, 0x51, 0x90, 0xdb, 0x13, 0x8c, 0xb6, 0x61, 0x53, 0x95, 0x87, 0x9f, 0x35, 0x5b, 0x5d,
	0x35, 0x5b, 0x47, 0x81, 0x6f, 0x4c, 0xc7, 0x95, 0x4b, 0xa7, 0xb1, 0x52, 0x3a, 0x7b, 0xd0, 0x53,
	0x8d, 0x21, 0x92, 0x80, 0xf2, 0x30, 0x89, 0x16, 0x42, 0xcd, 0xa1, 0x96, 0xd7, 0x95, 0xf0, 0x45,
	0x8e, 0xa2, 0x6f, 0xa0, 0x97, 0x79, 0x90, 0x0d, 0x4b, 0x7b, 0xfd, 0xb0, 0xec, 0x1a, 0x5d, 0x16,
	0xca, 0xaf, 0xe1, 0x7f, 0x98, 0xf0, 0x1b, 0xc1, 0x16, 0x3e, 0x65, 0x22, 0x9a, 0x46, 0xa1, 0x6e,
	0x7a, 0x50, 0xef, 0xf4, 0x0d, 0xf7, 0x73, 0x89, 0x1a, 0x85, 0xd0, 0xf8, 0x31, 0x66, 0x57, 0x41,
	0xfc, 0x94, 0x3c, 0x20, 0xa8, 0xd1, 0xc0, 0xfc, 0x0e, 0xd8, 0x9e, 0xfa, 0x96, 0x18, 0x0e, 0x44,
	0x60, 0xfa, 0x4d, 0x7d, 0xa3, 0x2e, 0x54, 0x16, 0x37, 0x66, 0x88, 0x54, 0x16, 0x37, 0x87, 0xbf,
	0x57, 0xa1, 0xfe, 0xe6, 0x96, 0x50, 0x81, 0x46, 0xb0, 0xf5, 0x4e, 0xf9, 0x50, 0x9e, 0xe4, 0x24,
	0xc0, 0x1e, 0xf9, 0x35, 0x25, 0x5c, 0x10, 0xec, 0x6c, 0xa0, 0x1d, 0x18, 0x3e, 0xd0, 0x5c, 0x2e,
	0x70, 0x20, 0x48, 0xa1, 0xb2, 0xd0, 0x16, 0x0c, 0xb4, 0x6a, 0xed, 0x2d, 0x15, 0x34, 0x84, 0xe7,
	0xf7, 0xf8, 0xd5, 0x1b, 0xaa, 0x85, 0x2d, 0x46, 0x31, 0xe1, 0xdc, 0xcc, 0x09, 0xad, 0xc5, 0x4e,
	0xed, 0xc1, 0x2d, 0x79, 0xc3, 0x18, 0x45, 0x1d, 0x1d, 0xc2, 0xee, 0xa3, 0xb7, 0x14, 0x2f, 0x36,
	0xd0, 0x3e, 0xec, 0x3c, 0x72, 0x5b, 0xa1, 0x6c, 0xa2, 0x3e, 0xf4, 0xb4, 0xb2, 0x00, 0x5b, 0xe8,
	0x53, 0xf8, 0xff, 0x8a, 0x4b, 0x9c, 0x24, 0x92, 0x02, 0xe4, 0x40, 0xc7, 0x50, 0x77, 0x34, 0x24,
	0xd8, 0xc1, 0x08, 0x41, 0x57, 0x23, 0x6f, 0x5f, 0x19, 0x6c, 0x76, 0xfc, 0x0b, 0xb4, 0x4e, 0xef,
	0xce, 0x49, 0x72, 0x4b, 0x12, 0xb4, 0x0b, 0x95, 0xef, 0x19, 0xca, 0x4b, 0xca, 0xfc, 0xd6, 0x0f,
	0x56, 0x01, 0x74, 0x00, 0xb5, 0x33, 0x59, 0x5b, 0xfd, 0xac, 0x22, 0xce, 0x54, 0xb0, 0x95, 0x55,
	0x83, 0x4e, 0x0e, 0x32, 0x3a, 0x3b, 0xfe, 0xd7, 0x82, 0xcd, 0xcc, 0xc0, 0xe4, 0x36, 0x0a, 0xe5,
	0xb8, 0xac, 0xc9, 0xbc, 0x20, 0xc8, 0x74, 0x27, 0x78, 0xb0, 0x5a, 0xc5, 0xe8, 0x10, 0x1a, 0x3a,
	0x00, 0x68, 0x95, 0x7a, 0xa8, 0x3d, 0x86, 0x9e, 0xbc, 0xb0, 0x3c, 0x3f, 0xca, 0x77, 0xaf, 0xfb,
	0x47, 0x01, 0x7d, 0x0b, 0xcf, 0xf4, 0xfd, 0x65, 0x70, 0x9d, 0x72, 0xfd, 0xf1, 0xa7, 0x07, 0xe0,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x96, 0x82, 0xd1, 0xd8, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyServerClient is the client API for MyServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyServerClient interface {
	Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Do(ctx context.Context, in *AllType, opts ...grpc.CallOption) (*AllType, error) {
	out := new(AllType)
	err := c.cc.Invoke(ctx, "/widget.MyServer/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServerClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/widget.MyServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServerServer is the server API for MyServer service.
type MyServerServer interface {
	Do(context.Context, *AllType) (*AllType, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.MyServer/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Do(ctx, req.(*AllType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.MyServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "widget.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MyServer_Do_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MyServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "widget/widget.proto",
}

// WidgetServiceClient is the client API for WidgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WidgetServiceClient interface {
	Read(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error)
	Update(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
	ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserSetting, error)
	UpdateUserSetting(ctx context.Context, in *UserSetting, opts ...grpc.CallOption) (*UserSetting, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
}

type widgetServiceClient struct {
	cc *grpc.ClientConn
}

func NewWidgetServiceClient(cc *grpc.ClientConn) WidgetServiceClient {
	return &widgetServiceClient{cc}
}

func (c *widgetServiceClient) Read(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/widget.WidgetService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) Update(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/widget.WidgetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserSetting, error) {
	out := new(UserSetting)
	err := c.cc.Invoke(ctx, "/widget.WidgetService/ReadUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateUserSetting(ctx context.Context, in *UserSetting, opts ...grpc.CallOption) (*UserSetting, error) {
	out := new(UserSetting)
	err := c.cc.Invoke(ctx, "/widget.WidgetService/UpdateUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/widget.WidgetService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WidgetServiceServer is the server API for WidgetService service.
type WidgetServiceServer interface {
	Read(context.Context, *common.Id) (*Setting, error)
	Update(context.Context, *Setting) (*Setting, error)
	ReadUserSetting(context.Context, *common.Id) (*UserSetting, error)
	UpdateUserSetting(context.Context, *UserSetting) (*UserSetting, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
}

func RegisterWidgetServiceServer(s *grpc.Server, srv WidgetServiceServer) {
	s.RegisterService(&_WidgetService_serviceDesc, srv)
}

func _WidgetService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Read(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Update(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/ReadUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/UpdateUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateUserSetting(ctx, req.(*UserSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/widget.WidgetService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WidgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "widget.WidgetService",
	HandlerType: (*WidgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _WidgetService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WidgetService_Update_Handler,
		},
		{
			MethodName: "ReadUserSetting",
			Handler:    _WidgetService_ReadUserSetting_Handler,
		},
		{
			MethodName: "UpdateUserSetting",
			Handler:    _WidgetService_UpdateUserSetting_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _WidgetService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "widget/widget.proto",
}
