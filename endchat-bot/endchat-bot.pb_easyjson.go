// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package endchat_bot

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot(in *jlexer.Lexer, out *Setting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]*ChannelSetting, 0, 8)
					} else {
						out.Channels = []*ChannelSetting{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ChannelSetting
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ChannelSetting)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Channels = append(out.Channels, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "global":
			if in.IsNull() {
				in.Skip()
				out.Global = nil
			} else {
				if out.Global == nil {
					out.Global = new(ChannelSetting)
				}
				(*out.Global).UnmarshalEasyJSON(in)
			}
		case "updated":
			out.Updated = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot(out *jwriter.Writer, in Setting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if len(in.Channels) != 0 {
		const prefix string = ",\"channels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Channels {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Global != nil {
		const prefix string = ",\"global\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Global).MarshalEasyJSON(out)
	}
	if in.Updated != 0 {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Setting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Setting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Setting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Setting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot(l, v)
}
func easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot1(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "created":
			out.Created = string(in.String())
		case "last_message_sent":
			out.LastMessageSent = int64(in.Int64())
		case "last_user_message_sent":
			out.LastUserMessageSent = int64(in.Int64())
		case "last_agent_message_sent":
			out.LastAgentMessageSent = int64(in.Int64())
		case "ended":
			out.Ended = int64(in.Int64())
		case "end_requested":
			out.EndRequested = int64(in.Int64())
		case "state":
			out.State = string(in.String())
		case "integration_id":
			out.IntegrationId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot1(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Created != "" {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Created))
	}
	if in.LastMessageSent != 0 {
		const prefix string = ",\"last_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastMessageSent))
	}
	if in.LastUserMessageSent != 0 {
		const prefix string = ",\"last_user_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastUserMessageSent))
	}
	if in.LastAgentMessageSent != 0 {
		const prefix string = ",\"last_agent_message_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastAgentMessageSent))
	}
	if in.Ended != 0 {
		const prefix string = ",\"ended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ended))
	}
	if in.EndRequested != 0 {
		const prefix string = ",\"end_requested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EndRequested))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.IntegrationId != "" {
		const prefix string = ",\"integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IntegrationId))
	}
	if in.ChannelId != "" {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot1(l, v)
}
func easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot2(in *jlexer.Lexer, out *ChannelSetting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = string(in.String())
		case "at_midnight":
			out.AtMidnight = bool(in.Bool())
		case "after_agent_message":
			out.AfterAgentMessage = int64(in.Int64())
		case "after_any_message":
			out.AfterAnyMessage = int64(in.Int64())
		case "after_user_message":
			out.AfterUserMessage = int64(in.Int64())
		case "age":
			out.Age = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot2(out *jwriter.Writer, in ChannelSetting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChannelId != "" {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelId))
	}
	if in.AtMidnight {
		const prefix string = ",\"at_midnight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AtMidnight))
	}
	if in.AfterAgentMessage != 0 {
		const prefix string = ",\"after_agent_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterAgentMessage))
	}
	if in.AfterAnyMessage != 0 {
		const prefix string = ",\"after_any_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterAnyMessage))
	}
	if in.AfterUserMessage != 0 {
		const prefix string = ",\"after_user_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AfterUserMessage))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Age))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelSetting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelSetting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e0e117EncodeGithubComSubizHeaderEndchatBot2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelSetting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelSetting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e0e117DecodeGithubComSubizHeaderEndchatBot2(l, v)
}
