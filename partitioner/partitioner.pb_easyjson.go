// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package partitioner

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner(in *jlexer.Lexer, out *workerClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner(out *jwriter.Writer, in workerClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v workerClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v workerClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *workerClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *workerClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner(l, v)
}
func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner1(in *jlexer.Lexer, out *coordinatorClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner1(out *jwriter.Writer, in coordinatorClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v coordinatorClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v coordinatorClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *coordinatorClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *coordinatorClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner1(l, v)
}
func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner2(in *jlexer.Lexer, out *WorkerConfiguration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "partitions":
			if in.IsNull() {
				in.Skip()
				out.Partitions = nil
			} else {
				in.Delim('[')
				if out.Partitions == nil {
					if !in.IsDelim(']') {
						out.Partitions = make([]int32, 0, 16)
					} else {
						out.Partitions = []int32{}
					}
				} else {
					out.Partitions = (out.Partitions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.Partitions = append(out.Partitions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner2(out *jwriter.Writer, in WorkerConfiguration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	if len(in.Partitions) != 0 {
		const prefix string = ",\"partitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Partitions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkerConfiguration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkerConfiguration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkerConfiguration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkerConfiguration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner2(l, v)
}
func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner3(in *jlexer.Lexer, out *JoinRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "term":
			out.Term = int32(in.Int32())
		case "cluster":
			out.Cluster = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "host":
			out.Host = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner3(out *jwriter.Writer, in JoinRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Term != 0 {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Term))
	}
	if in.Cluster != "" {
		const prefix string = ",\"cluster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cluster))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JoinRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JoinRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JoinRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JoinRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner3(l, v)
}
func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner4(in *jlexer.Lexer, out *Empty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "cluster":
			out.Cluster = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner4(out *jwriter.Writer, in Empty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Cluster != "" {
		const prefix string = ",\"cluster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cluster))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Empty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Empty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Empty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Empty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner4(l, v)
}
func easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner5(in *jlexer.Lexer, out *Configuration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "term":
			out.Term = int32(in.Int32())
		case "cluster":
			out.Cluster = string(in.String())
		case "state":
			out.State = string(in.String())
		case "workers":
			if in.IsNull() {
				in.Skip()
				out.Workers = nil
			} else {
				in.Delim('[')
				if out.Workers == nil {
					if !in.IsDelim(']') {
						out.Workers = make([]*WorkerConfiguration, 0, 8)
					} else {
						out.Workers = []*WorkerConfiguration{}
					}
				} else {
					out.Workers = (out.Workers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *WorkerConfiguration
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(WorkerConfiguration)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Workers = append(out.Workers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_partitions":
			out.TotalPartitions = int32(in.Int32())
		case "next_term":
			out.NextTerm = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner5(out *jwriter.Writer, in Configuration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Term != 0 {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Term))
	}
	if in.Cluster != "" {
		const prefix string = ",\"cluster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cluster))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if len(in.Workers) != 0 {
		const prefix string = ",\"workers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Workers {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.TotalPartitions != 0 {
		const prefix string = ",\"total_partitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TotalPartitions))
	}
	if in.NextTerm != 0 {
		const prefix string = ",\"next_term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.NextTerm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Configuration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Configuration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeb4d5ddEncodeGithubComSubizHeaderPartitioner5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Configuration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Configuration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeb4d5ddDecodeGithubComSubizHeaderPartitioner5(l, v)
}
