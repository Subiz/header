// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package
// compilable during generation.

package  partitioner

import (
  "github.com/mailru/easyjson/jwriter"
  "github.com/mailru/easyjson/jlexer"
)

func ( Cluster ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Cluster ) UnmarshalJSON([]byte) error { return nil }
func ( Cluster ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Cluster ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Cluster *Cluster

func ( Configuration ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Configuration ) UnmarshalJSON([]byte) error { return nil }
func ( Configuration ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Configuration ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Configuration *Configuration

func ( Empty ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Empty ) UnmarshalJSON([]byte) error { return nil }
func ( Empty ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Empty ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Empty *Empty

func ( WorkerHost ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* WorkerHost ) UnmarshalJSON([]byte) error { return nil }
func ( WorkerHost ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* WorkerHost ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_WorkerHost *WorkerHost

func ( WorkerPartitions ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* WorkerPartitions ) UnmarshalJSON([]byte) error { return nil }
func ( WorkerPartitions ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* WorkerPartitions ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_WorkerPartitions *WorkerPartitions

func ( coordinatorClient ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* coordinatorClient ) UnmarshalJSON([]byte) error { return nil }
func ( coordinatorClient ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* coordinatorClient ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_coordinatorClient *coordinatorClient

func ( coordinatorRebalanceClient ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* coordinatorRebalanceClient ) UnmarshalJSON([]byte) error { return nil }
func ( coordinatorRebalanceClient ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* coordinatorRebalanceClient ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_coordinatorRebalanceClient *coordinatorRebalanceClient

func ( coordinatorRebalanceServer ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* coordinatorRebalanceServer ) UnmarshalJSON([]byte) error { return nil }
func ( coordinatorRebalanceServer ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* coordinatorRebalanceServer ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_coordinatorRebalanceServer *coordinatorRebalanceServer

func ( goodbyeClient ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* goodbyeClient ) UnmarshalJSON([]byte) error { return nil }
func ( goodbyeClient ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* goodbyeClient ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_goodbyeClient *goodbyeClient

func ( helloClient ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* helloClient ) UnmarshalJSON([]byte) error { return nil }
func ( helloClient ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* helloClient ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_helloClient *helloClient

func ( workerClient ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* workerClient ) UnmarshalJSON([]byte) error { return nil }
func ( workerClient ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* workerClient ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_workerClient *workerClient
