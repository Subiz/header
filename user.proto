syntax = "proto2";

package user;

option go_package = "github.com/subiz/header/user";

import "common.proto";

message AggregateSegmentAttrCount {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional int64 min = 3;
	optional int64 count = 5;
	optional int64 created = 6;
	optional string segmentation_id = 7;
	optional string attribute = 8;
	optional int64 hour = 9;
}

message Segmentations {
	optional common.Context ctx = 1;
	repeated Segmentation segmentations = 3;
}

message Segmentation {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 5;
	optional string name = 3;
	optional string description = 11;
	optional int64 user_count = 4;

	optional int64 started_from = 7;

	optional int64 created = 9;
	optional int64 modified = 10;
	optional string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	repeated SCondition conditions = 19;
	optional string creator = 20;
	optional string scope = 21;
	enum Scope {
		agent = 0;
		account = 1;
	}
	optional bool is_system = 22;
}

message Condition {
	enum JoinOperator {
		none = 0;
		and = 1;
		or = 2;
	}
	optional string join = 1;
	optional string key = 2; // unique
	optional string operator = 3; // = # regex
	optional string value = 4; // JSON
	optional string id = 6;
}

enum JoinOperator {
	none = 0;
	and = 1;
	or = 2;
}

enum ConditionType {
	attribute = 0;
	event = 1;
}

message SegmentIndex {
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional int32 year = 4;
	optional int32 day = 5;
	optional int32 hour = 6;
}

message SegmentUser {
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional int32 day = 4;
	optional int32 hour = 5;
	optional string user_id = 6;
	optional int64 activated = 7;
	optional string picked_by = 8; // agent id or system
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
message SCondition {
	optional string id = 3;

	optional string key = 4; // unique
	optional string operator = 5; // = # regex
	optional string value = 6; // JSON

	enum EventTime {
		none = 0; // not an event
		current = 1;
		latest = 2;
		past = 3; // exists
	}

	enum JoinOperator {
		and = 0;
		or = 1;
	}
	optional string join = 7;
	optional string event_type_time = 8; //
	optional string event_type = 10;
	repeated SCondition conditions = 9;

	optional int32 priority = 12;
	optional bool event_existed = 13;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
	}
	optional string function = 14; // used to transform value of left side before evaluate expression
}

message UserExportRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional string query = 4;
	optional SCondition condition = 10;
	optional string agent_id = 11;
	repeated string emails = 12; // send to this emails
	repeated string attribute_keys = 13; // export selected attributes only
	optional string email_subject = 14;
	optional string language_code = 15;
	repeated string ids = 16; // export selected users only
}

message UserSearchRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string segmentation_id = 3;
	optional string query = 4;
	optional string anchor = 5;
	optional int32 limit = 6;
	optional string agent_id = 8; // search my user of agent
	optional bool unread = 9; // search my user of agent
	optional SCondition condition = 10;
}

message ESNote {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional string creator_id = 5;
	optional string text = 6;
	optional int64 created = 7;
	optional string target_id = 9;
	optional string target_type = 10;
	optional string format = 13;
}

message SearchNoteRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string keyword = 4;
	optional int64 from_sec = 5; // unix seconds
	optional int64 to_sec = 6; // unix seconds
	optional int64 limit = 7;
	optional string anchor = 8;
}

message SearchNoteResponse {
	optional int64 total = 2;
	repeated ESNote result = 3;
	optional string anchor = 4;
}
