syntax = "proto3";

package user;

option go_package = "github.com/subiz/header/user";

import "common.proto";
import "account.proto";
import "user.proto";
import "conversation.proto";
import "content.proto";
import "notibox.proto";
import "noti5.proto";
import "payment.proto";
import "email.proto";

message TotalConvoUpdateRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	int32 total = 4;
}

message TotalOpenTicket {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	int32 total = 4;
}

message AttributeData {
	string account_id = 2;
	string user_id = 3;
	string key = 4;

	// int64 created = 7;
	// int64 modified = 8;

	string text = 10;
	double number = 11;
	bool boolean = 12;
	string datetime = 13;
	repeated string list = 14;

	//string setter = 16;
	//string setter_type = 17;

	// to update
	enum Ops {
		upsert = 0; // override
		insert = 1; // only write if not existed
		update = 4; // only write if existed
		append = 6; // append to bottom
		remove = 7; // not used yet
		delete = 8; // not used yet
	}
	string action = 18;
}

message User {
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;
	repeated Trace traces = 11; // TODO: remove

	repeated AttributeData attributes = 18;

	repeated string segments = 19;
	string subiz_id = 25;

	repeated string aliases = 30;

	int32 par = 34;

	repeated Identification identifications = 39;
	UserSession session = 40;
}

message Users {
	repeated User users = 1;
	repeated common.Error errors = 2;
	string signature = 3;
}

message Campaign {
	string name = 2;
	string source = 3;
	string medium = 4;
	string term = 5;
	string content = 6;
}

message CountTotalRequest {
	common.Context ctx = 1;
	string account_id = 2;
}

message CountTotalResponse {
	double total_user = 2;
}

message CountResponse {
	repeated int32 data = 3;
}

message MergeRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string destination_user_id = 5;
	string source_user_id = 4;
}

message CreateRequest {
	string challenge_id = 3;
	string answer = 4;
}

// TODO: remove
message Traces {
	repeated Trace traces = 3;
}

// TODO: replace this with user session
message Trace {
	string event_id = 3;
	string ip = 4;
	int32 location_id = 5; // remove

	string city_name = 8;            // filled
	string country_name = 9;         // filled
	string continent_code = 10;      // filled
	float latitude = 12;             // filled
	float longitude = 13;            // filled
	string postal_code = 14;         // filled

	string timezone = 16;

	string isp = 17;                 // filled
	string continent_name = 18;      // filled
	string country_code = 19;        // filled

	string platform = 20;

	string device_type = 21;         // filled
	enum DeviceType {
		unknown = 0;
		mobile = 1;
		tablet = 2;
		desktop = 3;
	}

	string browser_name = 22;        // filled
	string language = 23;
	string user_agent = 24;
	string screen_resolution = 25;

	string ga_client_id = 26;
	repeated string ga_tracking_ids = 27;
	enum AdsNetwork {
		google_adwords = 0;
	}
	string ads_network = 28;

	repeated Campaign campaigns = 29;
	int64 created = 30;
	int64 tracked = 31;

	string referrer = 32;
	enum Source {
		direct = 0;
		referring = 1;
		organic = 2;
		social = 3;
		advertising = 4;
	}
	string source = 33;
}

message UserSearchResult {
	common.Context ctx = 1;
	string account_id = 2;
	int64 total = 3;
	repeated User users = 4;
	string anchor = 5;
	repeated int32 unreads = 6; // only used when search my users
	map<string, int32> unread_counts = 7;
}

message UnpickRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string segmentation_id = 5;
}

message PickRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string agent_id = 4;
	string segmentation_id = 5;
	int64 added = 7;
	int64 updated = 8;
}

message CountSegmentationUserByAttributeRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string attribute_key = 3;
	string segmentation_id = 4;
	int32 from = 5; // deprecated
	int32 to = 6; // deprecated
	string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
	int32 from_hour = 9;
	int32 to_hour = 10;
}

message Visitor {
	common.Context ctx = 1;
	string account_id = 3;
	User user = 4;
	int64 pinged = 5;
	string page_url = 6;
	int64 page_viewed = 7;
	string page_title = 8;
}

message Visitors {
	common.Context ctx = 1;
	repeated Visitor visitors = 2;
}

message LastView {
	string account_id = 3;
	string user_id = 4;
	string url = 5;
	string ua = 6;
	string ip = 7;
	int64 created = 8;
	string event_id = 9;
	string title = 10;
}

message SubscribeTopic {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string topics = 4;
}

message MuteRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string user_id = 4;
	string topic = 5;
	bool mute = 6; // true, false
}

message SubscribeUser {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string user_ids = 4;
}

message ReadTopicRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string topic = 3;
	string user_id = 4;
	string agent_id = 5;
	int64 read = 6; // read time in milisecond
}

message SubscribeRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	repeated string topics = 4;
}

message AddToMyRequest {
	common.Context ctx = 1;
	string user_id = 3;
	repeated string agent_ids = 5;
	string account_id = 2; // used within user service only
}

message DeleteAttrRequest {
	common.Context ctx = 1;
	string key = 2;
}

enum AttributeType {
	text = 0;
	number = 1;
	boolean = 2;
	datetime = 3;
	list = 4;
}

enum AttributeKind {
	system = 0;
	default = 1;
	custom = 2;
}

message AttributeDefinition {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string description = 4;
	string type = 5;
	repeated string list_items = 6;
	string key = 7;
	string kind = 8;
	int64 updated = 9;
}

message AttributeDefinitions {
	common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

message AddToMyList {
	common.Context ctx = 1;
	string agent_id = 2;
	string user_id = 3;
	string account_id = 5;
}

message UserCreateResult {
	string id = 3;
	string mask = 5;
}

message Identification {
	common.Context ctx = 1;
	string user_id = 3;
	string account_id = 4;
	string alias = 5;
	string value = 6;

	string channel = 9;
	string integration_id = 10;
	string source = 11;

	bool trusted = 12;
	int64 created = 13;

	repeated string user_ids = 14;
}

message Note {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string creator_id = 5;
	string text = 6;
	int64 created = 7;
	int64 updated = 8;

	string target_id = 9; // deprecated
	string target_type = 10; // deprecated

	repeated NoteLink links = 14; // generated by our service
}

message NoteLink {
	string id = 1;
	enum Type {
		conversation = 0; // link
		ticket = 1;
		deal = 2;
		user = 3; // target
	}
	string type = 2;
}

message Notes {
	common.Context ctx = 1;
	repeated Note notes = 3;
	string anchor = 4;
}

message ListNotesRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string target_id = 4;
	int32 limit = 5;
	string anchor = 6;
	string keyword = 7;

	repeated NoteLink links = 8;
}

message DeleteNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

message GetNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

// TODO move params to common
message IntParams {
	int64 eq = 2;
	int64 neq = 3;
	int64 gt = 4;
	int64 gte = 5;
	int64 lt = 6;
	int64 lte = 7;
}

message IdParams {
	string id = 2;
	repeated string ids = 3;
}

message Params {
	repeated string args = 2;
}

message Location {
	string isp = 3;                 // filled
	string continent_name = 4;      // filled
	string country_code = 5;        // filled

	string city_name = 6;            // filled
	string country_name = 7;         // filled
	string continent_code = 8;      // filled
	float latitude = 9;             // filled
	float longitude = 10;            // filled
	string postal_code = 11;         // filled
}

message Page {
	string id = 2;
	string name = 3;
	string url = 4;
}

message UserAction {
	string id = 2;
	string user_id = 3;
	int64 created = 4;
	string type = 5;
	string source = 6; // from user session
	Location location = 7; // from user session
	Page page = 8; // from event
	string content = 9;
}

message UserInfo {
	string id = 2;
	int64 updated = 3;
	User user = 4;
	Page viewing = 5;
	string source = 6;
	Location location = 7;
	int64 view_count = 8; // deprecated
	int64 duration = 9;
	int64 latest_event_created = 10;
	string user_session_id = 11;
	repeated Page view_pages = 12;
}

message UserInfoParams {
	string signature = 2;

	int32 limit = 3;
	int32 offset = 4;
	string order_by = 5;

	IdParams source = 6;
	IdParams page_id = 8;
	IdParams location_id = 7;

	IntParams view_count = 9;
	IntParams duration = 10;
}

message UserInfoData {
	repeated UserInfo data = 2;
}

message UserMetric {
	string account_id = 2;
	int64 active_user_num = 3;
}

message SourceMetric {
	string account_id = 2;
	string source = 3; // direct, referring, organic,social, advertising
	int64 active_user_num = 4;
}

message LocationMetric {
	string account_id = 2;
	Location location = 3;
	int64 active_user_num = 4;
}

message PageMetric {
	string account_id = 2;
	Page page = 3;
	int64 active_user_num = 4;
}

message UserReport {
	string account_id = 2;
	UserMetric total_user = 3;
	repeated SourceMetric top_source = 4;
	repeated LocationMetric top_location = 5;
	repeated PageMetric top_page = 6;
}

message SourceMetrics {
	repeated SourceMetric source_metrics = 2;
}

message LocationMetrics {
	repeated LocationMetric location_metrics = 2;
}

message PageMetrics {
	repeated PageMetric page_metrics = 2;
}

///////////////////////
message RawEventCreatedPayload {
	common.Context ctx = 1;
	repeated string subs = 3;
	string target_topic = 4;
	string payload = 5; //json format
	string target_key = 6;
	repeated string payloads = 7; // payload for each sub, payload must be empty
	string topic = 9;
	string router_topic = 10;
	string sub = 11;
	int64 created = 12; // in ms
	bytes data = 13; // payload in bytes format
}

message Events {
	common.Context ctx = 1;
	repeated Event events = 4;
	int64 total = 2;
	string anchor = 3;
}

message Event {
	common.Context ctx = 1;
	string user_id = 2; // TODO: remove
	string id = 3;
	string account_id = 4; // TODO: remove
	int64 created = 8;
	string type = 9; // eventtype
	repeated string topics = 11; // TODO: remove
	string session_id = 12;
	common.By by = 50;
	message Data {
		account.Account account = 1;
		account.Agent agent = 2;
		conversation.Message message = 3;
		conversation.Conversation conversation = 4;
		conversation.Postback postback = 5;
		content.Content content = 6;
		Topic topic = 7;
		account.Presence presence = 8;
		user.User user = 10;
		UnreadTopic unread_topic = 11; // todo: remove
		// user.MyUser my_user = 12;
		notibox.Notification notification = 14;
		account.AgentPerm agent_perm = 16;
		account.GroupMember group_member = 17;
		account.AgentGroup group = 18;
		payment.Limit limit = 19;
		user.Identification alias = 22;
		user.Note note = 23;
		conversation.Ticket ticket = 24;
		Automation automation = 25;
		Event event = 26;
		AutomationEvent automation_event = 30;
		notibox.Notibox notibox = 32;
		noti5.Setting notification_setting = 34;
		user.Identification identification = 35;
		conversation.Rule rule = 36;
		user.AttributeDefinition user_attribute = 37;
		conversation.Tag tag = 38;
		user.UserMetric total_user = 39;
	}
	Data data = 20;
}

message EventParams {
	string type = 2;
}

message Subscription { // raweventcreatedpayload
	common.Context ctx = 1;
	string topic = 3;

	string sub_id = 7;

	string target_topic = 10;
	string target_key = 11;
	int64 ttls = 12;
	string router_topic = 13;
	int32 target_partition = 14;
}

enum SubPrefix {
	Webhook = 0;
	Websocket = 1;
}

message ListEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	string category = 9;
}

message UserEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Event event = 5;
	user.User user = 6;
}

message SubscriptionResponse {
	common.Context ctx = 1;
	bool status = 2;
}

message AutomationCalledback {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	string automation_id = 5;
	Event event = 9;
	AutomationAction action = 10;
}

message AutomationEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Automation automation = 5;
	user.User user = 7;
	Event event = 9;
	AutomationAction action = 10;
}

message Automation {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string channel = 4; // deprecated
	string name = 5;
	string description = 6;
	repeated user.Condition conditions = 7; // deprecated
	user.SCondition condition = 8;

	int64 created = 9;
	int64 modified = 10;

	string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	string action_type = 13; // deprecated
	enum ActionType {
		conversation_message = 0;
		agent_notification = 1;
		//user_notification = 2;
		// automation_invite_message = 4;

		block_user = 5;
		merge_users = 7;
		user_notification = 8;
		user_webhook = 9;
		user_note = 10;

		conversation_message2 = 12;
		conversation_webhook = 13;
		add_agent_to_conversation = 14;
		create_ticket = 15;
		conversation_tag = 16;

		// agent_notification = 17;
		add_user_to_segmentation = 18;

	}

	string action_data = 14; // deprecated
	string scope = 15; // deprecated
	enum AutomationScope {
		conversation = 0;
		user = 3;
	}

	bool cross_channel = 16; // deprecated
	string metadata = 17;

	repeated AutomationAction actions = 18;
	uint32 delay_sec = 19;
	string action_id = 20; // deprecated, prepare for migrate
}

message AutomationAction {
	enum ActionType {
		update_user_attribute = 0; // type user
		block_user = 1; // prop user
		merge_users = 3; // not yet defined
		notify_user = 4; // not yet defined
		send_email = 5; // prop email
		add_user_note = 6; // note
		create_conversation = 7; // events, integration_id
		send_message = 8; // event
		assign_agent_to_conversation = 9; // prop agent_ids
		convert_conversation_to_ticket = 10; // no prop
		tag_conversation = 11; // tag_ids
		send_webhook = 12; // not yet defined
		open_widget_screen = 14; // not yet defined
		add_user_to_segmentation = 15; // segmentation_id
		remove_user_from_segmentation = 16; // segmentation_id
		send_chat_transcript_email = 17; // prop email
		update_conversation_state = 18; // prop conversation_state
		send_facebook_direct_message = 19; // prop event and facebook_page_id
	}
	string type = 2;

	user.User user = 4;
	email.Email email = 5;
	user.Note user_note = 6;
	Event event = 7;
	string agent_id = 8; // deprecated
	string tag_id = 9; // deprecated
	repeated Event events = 10;
	conversation.Ticket ticket = 11;
	string integration_id = 12;
	string segmentation_id = 13;
	repeated string agent_ids = 14;
	repeated string tag_ids = 15;
	string scope = 16;
	string conversation_state = 17;
	string id = 18; // required, generated by subiz to check whether an action is performed or not
	string webhook_id = 19;
	AutomationWebhookSetting webhook_setting = 20;
	uint32 delay_sec = 21;
	string facebook_page_id = 22;
}

message AutomationWebhookSetting {
	bool account = 1;
	bool agent = 2;
	bool message = 3;
	bool conversation = 4;
	bool postback = 5;
	bool content = 6;
	bool user = 10;
	bool group = 18;
	bool limit = 19;
	bool user_attribute = 20;
	bool note = 23;
	bool ticket = 24;
	bool automation = 25;
	bool event = 26;
}

message Automations {
	common.Context ctx = 1;
	repeated Automation automations = 2;
}

message AutomationCheck {
	string account_id = 2;
	string automation_id = 3;
	string user_id = 4;
	string event_id = 5;
	string scope = 6;
}

message AutomationCreditsAggregate {
	common.Context ctx = 1;
	string account_id = 2;
	int64 webhook_fired = 3;
	int64 message_fired = 4;
	int64 email_fired = 5;
	int64 min = 6;
}

message AutomationCredit {
	common.Context ctx = 1;
	string account_id = 2;

	int64 webhook_fired = 3;
	int64 message_fired = 4;
	int64 email_fired = 5;

	int64 webhook_addon = 8;
	int64 message_addon = 9;
	int64 email_addon = 10;

	int64 webhook_credits = 14;
	int64 message_credits = 15;
	int64 email_credits = 16;

	int64 month = 20;

	enum Type {
		email = 0;
		webhook = 1;
		message = 2;
	}
}

message Topic {
	common.Context ctx = 1;
	string account_id = 2;
	string topic = 3;

	string type = 5;
	int64 updated = 8;
	int32 unread = 9; // deprecated by is_read
	string user_id = 10;
	string agent_id = 11;

	Event by_event = 14;
	bool is_muted = 15;
	bool is_read = 16;
}

message UnreadTopic { // todo: delete this, unread is just topic_updated with is_read=false
	common.Context ctx = 1;
	string topic = 3;
	string agent_id = 4;
	string user_id = 5;
	string type = 6;
	int64 updated = 8;
	int32 unread = 9;
	Event by_event = 10;
}

message ListTopicsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string agent_id = 5;
	string anchor = 4;
	int32 limit = 7;
	bool unread = 8;
}

message ListTopicsResult {
	common.Context ctx = 1;
	repeated Topic topics = 3;
	string anchor = 5;
}

message UserSession {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string id = 4;

	Event start_event = 5;
	Event latest_event = 6;

	string ip = 7;
	string city_name = 8;            // derived from ip
	string country_name = 9;         // derived from ip
	string continent_code = 10;      // derived from ip
	float latitude = 12;             // derived from ip
	float longitude = 13;            // derived from ip
	string postal_code = 14;         // derived from ip

	string timezone = 16;

	string isp = 17;                 // derived from ip
	string continent_name = 18;      // derived from ip
	string country_code = 19;        // derived from ip

	string platform = 20;

	string device_type = 21;         // filled
	enum DeviceType {
		unknown = 0;
		mobile = 1;
		tablet = 2;
		desktop = 3;
	}

	string browser_name = 22;        // filled
	string language = 23;
	string user_agent = 24;
	string screen_resolution = 25;

	string ga_client_id = 26;
	repeated string ga_tracking_ids = 27;
	enum AdsNetwork {
		google_adwords = 0;
	}
	string ads_network = 28;

	repeated Campaign campaigns = 29;

	string referrer = 32;
	enum Source {
		direct = 0;
		referring = 1;
		organic = 2;
		social = 3;
		advertising = 4;
	}
	string source = 33;

	Event latest_content_view = 34; // read only, do not persist
	int64 total_content_views = 35; // read only, do not persist

	float lead_score = 36;
}

message AvailabilityCheckRequest {
	common.Context ctx = 1;
	string integration_id = 3;
	user.User user = 4;
	string account_id = 5;
	string user_id = 6;
}

message AvailabilityCheckResult {
	common.Context ctx = 1;
	bool availability = 2;
	string reason = 3;
	string payload = 5;
	string integration_id = 6;
	string account_id = 7;
}

message StartRequest {
	common.Context ctx = 1;

	string account_id = 3;
	int64 created = 13;
	string conversation_id = 14;

	User user = 25;
	string integration_id = 26;
	string chain_id = 27;
	string message = 30;
	repeated conversation.Member members = 31;
	string group_id = 32;
}