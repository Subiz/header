// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: bot.proto

package bot

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	conversation "github.com/subiz/header/conversation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BotCategory int32

const (
	BotCategory_users         BotCategory = 0
	BotCategory_systems       BotCategory = 1
	BotCategory_conversations BotCategory = 2
)

// Enum value maps for BotCategory.
var (
	BotCategory_name = map[int32]string{
		0: "users",
		1: "systems",
		2: "conversations",
	}
	BotCategory_value = map[string]int32{
		"users":         0,
		"systems":       1,
		"conversations": 2,
	}
)

func (x BotCategory) Enum() *BotCategory {
	p := new(BotCategory)
	*p = x
	return p
}

func (x BotCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[0].Descriptor()
}

func (BotCategory) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[0]
}

func (x BotCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotCategory.Descriptor instead.
func (BotCategory) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{0}
}

type ActionType int32

const (
	ActionType_nil               ActionType = 0
	ActionType_condition         ActionType = 1
	ActionType_sleep             ActionType = 2
	ActionType_send_message      ActionType = 3
	ActionType_jump              ActionType = 4
	ActionType_send_email        ActionType = 5
	ActionType_tag               ActionType = 6
	ActionType_convert_to_ticket ActionType = 7
	ActionType_send_webhook      ActionType = 8
	ActionType_like_comment      ActionType = 9
	ActionType_hide_comment      ActionType = 10
	ActionType_end_chat          ActionType = 11
	ActionType_question          ActionType = 12
	ActionType_update_user       ActionType = 13
	ActionType_assign            ActionType = 14
	ActionType_send_http         ActionType = 15
	ActionType_switch_language   ActionType = 16
	ActionType_untag             ActionType = 17
	ActionType_ask_question      ActionType = 18
	ActionType_goal              ActionType = 19
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "nil",
		1:  "condition",
		2:  "sleep",
		3:  "send_message",
		4:  "jump",
		5:  "send_email",
		6:  "tag",
		7:  "convert_to_ticket",
		8:  "send_webhook",
		9:  "like_comment",
		10: "hide_comment",
		11: "end_chat",
		12: "question",
		13: "update_user",
		14: "assign",
		15: "send_http",
		16: "switch_language",
		17: "untag",
		18: "ask_question",
		19: "goal",
	}
	ActionType_value = map[string]int32{
		"nil":               0,
		"condition":         1,
		"sleep":             2,
		"send_message":      3,
		"jump":              4,
		"send_email":        5,
		"tag":               6,
		"convert_to_ticket": 7,
		"send_webhook":      8,
		"like_comment":      9,
		"hide_comment":      10,
		"end_chat":          11,
		"question":          12,
		"update_user":       13,
		"assign":            14,
		"send_http":         15,
		"switch_language":   16,
		"untag":             17,
		"ask_question":      18,
		"goal":              19,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{1}
}

type SegmentationCondition_Source int32

const (
	SegmentationCondition_direct     SegmentationCondition_Source = 0
	SegmentationCondition_google_ads SegmentationCondition_Source = 1
	SegmentationCondition_organic    SegmentationCondition_Source = 2
)

// Enum value maps for SegmentationCondition_Source.
var (
	SegmentationCondition_Source_name = map[int32]string{
		0: "direct",
		1: "google_ads",
		2: "organic",
	}
	SegmentationCondition_Source_value = map[string]int32{
		"direct":     0,
		"google_ads": 1,
		"organic":    2,
	}
)

func (x SegmentationCondition_Source) Enum() *SegmentationCondition_Source {
	p := new(SegmentationCondition_Source)
	*p = x
	return p
}

func (x SegmentationCondition_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentationCondition_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[2].Descriptor()
}

func (SegmentationCondition_Source) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[2]
}

func (x SegmentationCondition_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentationCondition_Source.Descriptor instead.
func (SegmentationCondition_Source) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{2, 0}
}

type SegmentationCondition_DeviveType int32

const (
	SegmentationCondition_desktop SegmentationCondition_DeviveType = 0
	SegmentationCondition_mobile  SegmentationCondition_DeviveType = 1
	SegmentationCondition_tablet  SegmentationCondition_DeviveType = 2
)

// Enum value maps for SegmentationCondition_DeviveType.
var (
	SegmentationCondition_DeviveType_name = map[int32]string{
		0: "desktop",
		1: "mobile",
		2: "tablet",
	}
	SegmentationCondition_DeviveType_value = map[string]int32{
		"desktop": 0,
		"mobile":  1,
		"tablet":  2,
	}
)

func (x SegmentationCondition_DeviveType) Enum() *SegmentationCondition_DeviveType {
	p := new(SegmentationCondition_DeviveType)
	*p = x
	return p
}

func (x SegmentationCondition_DeviveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentationCondition_DeviveType) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[3].Descriptor()
}

func (SegmentationCondition_DeviveType) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[3]
}

func (x SegmentationCondition_DeviveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentationCondition_DeviveType.Descriptor instead.
func (SegmentationCondition_DeviveType) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{2, 1}
}

type SegmentationCondition_Browser int32

const (
	SegmentationCondition_all     SegmentationCondition_Browser = 0
	SegmentationCondition_chrome  SegmentationCondition_Browser = 1
	SegmentationCondition_firefox SegmentationCondition_Browser = 2
	SegmentationCondition_edge    SegmentationCondition_Browser = 3
	SegmentationCondition_ie      SegmentationCondition_Browser = 4
	SegmentationCondition_safari  SegmentationCondition_Browser = 5
	SegmentationCondition_other   SegmentationCondition_Browser = 6
)

// Enum value maps for SegmentationCondition_Browser.
var (
	SegmentationCondition_Browser_name = map[int32]string{
		0: "all",
		1: "chrome",
		2: "firefox",
		3: "edge",
		4: "ie",
		5: "safari",
		6: "other",
	}
	SegmentationCondition_Browser_value = map[string]int32{
		"all":     0,
		"chrome":  1,
		"firefox": 2,
		"edge":    3,
		"ie":      4,
		"safari":  5,
		"other":   6,
	}
)

func (x SegmentationCondition_Browser) Enum() *SegmentationCondition_Browser {
	p := new(SegmentationCondition_Browser)
	*p = x
	return p
}

func (x SegmentationCondition_Browser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentationCondition_Browser) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[4].Descriptor()
}

func (SegmentationCondition_Browser) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[4]
}

func (x SegmentationCondition_Browser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentationCondition_Browser.Descriptor instead.
func (SegmentationCondition_Browser) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{2, 2}
}

type Condition_Group int32

const (
	Condition_single Condition_Group = 0
	Condition_all    Condition_Group = 1
	Condition_any    Condition_Group = 2
)

// Enum value maps for Condition_Group.
var (
	Condition_Group_name = map[int32]string{
		0: "single",
		1: "all",
		2: "any",
	}
	Condition_Group_value = map[string]int32{
		"single": 0,
		"all":    1,
		"any":    2,
	}
)

func (x Condition_Group) Enum() *Condition_Group {
	p := new(Condition_Group)
	*p = x
	return p
}

func (x Condition_Group) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Group) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[5].Descriptor()
}

func (Condition_Group) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[5]
}

func (x Condition_Group) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Group.Descriptor instead.
func (Condition_Group) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{15, 0}
}

type Condition_Function int32

const (
	Condition_minute_of_day Condition_Function = 0
	Condition_hour_of_day   Condition_Function = 1
	Condition_day_of_week   Condition_Function = 2
	Condition_day_ago       Condition_Function = 3
)

// Enum value maps for Condition_Function.
var (
	Condition_Function_name = map[int32]string{
		0: "minute_of_day",
		1: "hour_of_day",
		2: "day_of_week",
		3: "day_ago",
	}
	Condition_Function_value = map[string]int32{
		"minute_of_day": 0,
		"hour_of_day":   1,
		"day_of_week":   2,
		"day_ago":       3,
	}
)

func (x Condition_Function) Enum() *Condition_Function {
	p := new(Condition_Function)
	*p = x
	return p
}

func (x Condition_Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Function) Descriptor() protoreflect.EnumDescriptor {
	return file_bot_proto_enumTypes[6].Descriptor()
}

func (Condition_Function) Type() protoreflect.EnumType {
	return &file_bot_proto_enumTypes[6]
}

func (x Condition_Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Function.Descriptor instead.
func (Condition_Function) EnumDescriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{15, 1}
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                       // conversation_start, exit_intent (web only), area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)
	AreaClickedCssSelector string  `protobuf:"bytes,4,opt,name=area_clicked_css_selector,json=areaClickedCssSelector,proto3" json:"area_clicked_css_selector,omitempty"` // .user_name #user
	ScrollingPercentage    float32 `protobuf:"fixed32,6,opt,name=scrolling_percentage,json=scrollingPercentage,proto3" json:"scrolling_percentage,omitempty"`            // 0.55
	InactivitySec          int64   `protobuf:"varint,8,opt,name=inactivity_sec,json=inactivitySec,proto3" json:"inactivity_sec,omitempty"`                               // 50s
	AfterPageviewSec       int64   `protobuf:"varint,9,opt,name=after_pageview_sec,json=afterPageviewSec,proto3" json:"after_pageview_sec,omitempty"`                    // 50s
	Disabled               bool    `protobuf:"varint,10,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{0}
}

func (x *Trigger) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Trigger) GetAreaClickedCssSelector() string {
	if x != nil {
		return x.AreaClickedCssSelector
	}
	return ""
}

func (x *Trigger) GetScrollingPercentage() float32 {
	if x != nil {
		return x.ScrollingPercentage
	}
	return 0
}

func (x *Trigger) GetInactivitySec() int64 {
	if x != nil {
		return x.InactivitySec
	}
	return 0
}

func (x *Trigger) GetAfterPageviewSec() int64 {
	if x != nil {
		return x.AfterPageviewSec
	}
	return 0
}

func (x *Trigger) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type Segmentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions                 []*SegmentationCondition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	SourceConditions           []*SegmentationCondition `protobuf:"bytes,6,rep,name=source_conditions,json=sourceConditions,proto3" json:"source_conditions,omitempty"`                                      // source, source_referer (or only)
	LocationConditions         []*SegmentationCondition `protobuf:"bytes,7,rep,name=location_conditions,json=locationConditions,proto3" json:"location_conditions,omitempty"`                                // city, country_code (or only)
	UrlConditions              []*SegmentationCondition `protobuf:"bytes,8,rep,name=url_conditions,json=urlConditions,proto3" json:"url_conditions,omitempty"`                                               // url, url_term, url_medium, ... (or only)
	ExcludeUrlConditions       []*SegmentationCondition `protobuf:"bytes,9,rep,name=exclude_url_conditions,json=excludeUrlConditions,proto3" json:"exclude_url_conditions,omitempty"`                        // url (or only)
	HasVisitedUrlConditions    []*SegmentationCondition `protobuf:"bytes,10,rep,name=has_visited_url_conditions,json=hasVisitedUrlConditions,proto3" json:"has_visited_url_conditions,omitempty"`            // url (or only)
	HasNotVisitedUrlConditions []*SegmentationCondition `protobuf:"bytes,11,rep,name=has_not_visited_url_conditions,json=hasNotVisitedUrlConditions,proto3" json:"has_not_visited_url_conditions,omitempty"` // url (or only)
	Disabled                   bool                     `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	ExcludeLocationConditions  []*SegmentationCondition `protobuf:"bytes,13,rep,name=exclude_location_conditions,json=excludeLocationConditions,proto3" json:"exclude_location_conditions,omitempty"` // city, country_code (or only)
}

func (x *Segmentation) Reset() {
	*x = Segmentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segmentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segmentation) ProtoMessage() {}

func (x *Segmentation) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segmentation.ProtoReflect.Descriptor instead.
func (*Segmentation) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{1}
}

func (x *Segmentation) GetConditions() []*SegmentationCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Segmentation) GetSourceConditions() []*SegmentationCondition {
	if x != nil {
		return x.SourceConditions
	}
	return nil
}

func (x *Segmentation) GetLocationConditions() []*SegmentationCondition {
	if x != nil {
		return x.LocationConditions
	}
	return nil
}

func (x *Segmentation) GetUrlConditions() []*SegmentationCondition {
	if x != nil {
		return x.UrlConditions
	}
	return nil
}

func (x *Segmentation) GetExcludeUrlConditions() []*SegmentationCondition {
	if x != nil {
		return x.ExcludeUrlConditions
	}
	return nil
}

func (x *Segmentation) GetHasVisitedUrlConditions() []*SegmentationCondition {
	if x != nil {
		return x.HasVisitedUrlConditions
	}
	return nil
}

func (x *Segmentation) GetHasNotVisitedUrlConditions() []*SegmentationCondition {
	if x != nil {
		return x.HasNotVisitedUrlConditions
	}
	return nil
}

func (x *Segmentation) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Segmentation) GetExcludeLocationConditions() []*SegmentationCondition {
	if x != nil {
		return x.ExcludeLocationConditions
	}
	return nil
}

type SegmentationCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"` // url, browser, country_code, city, returning_visitor, page_view_count, os, device, device_type, referrer, source, source_referer, /*ip_ranges*/, language, utm_campaign, utm_content, utm_medium, utm_source, utm_term, time_on_page, user_attribute
	UserAttributeKey string `protobuf:"bytes,34,opt,name=user_attribute_key,json=userAttributeKey,proto3" json:"user_attribute_key,omitempty"`
	Operator         string `protobuf:"bytes,40,opt,name=operator,proto3" json:"operator,omitempty"` // eq, ne, con, notCon, in, gt, gte, lt, lte, inRange, notInRange, begin, end
	Value            string `protobuf:"bytes,41,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SegmentationCondition) Reset() {
	*x = SegmentationCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentationCondition) ProtoMessage() {}

func (x *SegmentationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentationCondition.ProtoReflect.Descriptor instead.
func (*SegmentationCondition) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentationCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SegmentationCondition) GetUserAttributeKey() string {
	if x != nil {
		return x.UserAttributeKey
	}
	return ""
}

func (x *SegmentationCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SegmentationCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id           string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name         string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Category     string          `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"` // hello, operator, reply
	Status       string          `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`     // active, inactive, deleted
	Action       *Action         `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
	Created      int64           `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy    string          `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated      int64           `protobuf:"varint,12,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy    string          `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Triggers     []*Trigger      `protobuf:"bytes,14,rep,name=triggers,proto3" json:"triggers,omitempty"`
	WebCondition []*Segmentation `protobuf:"bytes,16,rep,name=web_condition,json=webCondition,proto3" json:"web_condition,omitempty"`
	Channels     []string        `protobuf:"bytes,17,rep,name=channels,proto3" json:"channels,omitempty"` // default: all channel
	// for fb comment
	// for messenger
	// for zalo
	IntegrationIds   []string                             `protobuf:"bytes,18,rep,name=integration_ids,json=integrationIds,proto3" json:"integration_ids,omitempty"` // optional for subiz and email
	TimmingCondition *conversation.TimmingCondition       `protobuf:"bytes,19,opt,name=timming_condition,json=timmingCondition,proto3" json:"timming_condition,omitempty"`
	UserConditions   *conversation.UserAttributeCondition `protobuf:"bytes,20,opt,name=user_conditions,json=userConditions,proto3" json:"user_conditions,omitempty"`
	WhenOffline      bool                                 `protobuf:"varint,21,opt,name=when_offline,json=whenOffline,proto3" json:"when_offline,omitempty"` // only run when there is no online agent
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{3}
}

func (x *Bot) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Bot) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Bot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bot) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Bot) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Bot) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Bot) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Bot) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Bot) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Bot) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Bot) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Bot) GetWebCondition() []*Segmentation {
	if x != nil {
		return x.WebCondition
	}
	return nil
}

func (x *Bot) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Bot) GetIntegrationIds() []string {
	if x != nil {
		return x.IntegrationIds
	}
	return nil
}

func (x *Bot) GetTimmingCondition() *conversation.TimmingCondition {
	if x != nil {
		return x.TimmingCondition
	}
	return nil
}

func (x *Bot) GetUserConditions() *conversation.UserAttributeCondition {
	if x != nil {
		return x.UserConditions
	}
	return nil
}

func (x *Bot) GetWhenOffline() bool {
	if x != nil {
		return x.WhenOffline
	}
	return false
}

type Bots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Bots []*Bot          `protobuf:"bytes,2,rep,name=bots,proto3" json:"bots,omitempty"`
}

func (x *Bots) Reset() {
	*x = Bots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bots) ProtoMessage() {}

func (x *Bots) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bots.ProtoReflect.Descriptor instead.
func (*Bots) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{4}
}

func (x *Bots) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Bots) GetBots() []*Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

type NextAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	Action    *Action    `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"` // pointed to the next action or used for branching to multiple actions
}

func (x *NextAction) Reset() {
	*x = NextAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextAction) ProtoMessage() {}

func (x *NextAction) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextAction.ProtoReflect.Descriptor instead.
func (*NextAction) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{5}
}

func (x *NextAction) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *NextAction) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId     string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// first action require trigger
	Nexts          []*NextAction         `protobuf:"bytes,8,rep,name=nexts,proto3" json:"nexts,omitempty"`
	Type           string                `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"` // send_message, send_email, tag, convert_to_ticket, condition, sleep, send_webhook
	SendMessage    *ActionSendMessage    `protobuf:"bytes,11,opt,name=send_message,json=sendMessage,proto3" json:"send_message,omitempty"`
	SendEmail      *ActionSendMessage    `protobuf:"bytes,12,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
	Sleep          *ActionSleep          `protobuf:"bytes,13,opt,name=sleep,proto3" json:"sleep,omitempty"` // deprecated
	Jump           *ActionJump           `protobuf:"bytes,15,opt,name=jump,proto3" json:"jump,omitempty"`
	SwitchLanguage *ActionSwitchLanguage `protobuf:"bytes,16,opt,name=switch_language,json=switchLanguage,proto3" json:"switch_language,omitempty"`
	SendHttp       *ActionSendHttp       `protobuf:"bytes,17,opt,name=send_http,json=sendHttp,proto3" json:"send_http,omitempty"`
	AskQuestion    *ActionAskQuestion    `protobuf:"bytes,18,opt,name=ask_question,json=askQuestion,proto3" json:"ask_question,omitempty"`
	Assign         *ActionAssign         `protobuf:"bytes,19,opt,name=assign,proto3" json:"assign,omitempty"`
	DelaySec       int64                 `protobuf:"varint,20,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{6}
}

func (x *Action) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Action) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *Action) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetNexts() []*NextAction {
	if x != nil {
		return x.Nexts
	}
	return nil
}

func (x *Action) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Action) GetSendMessage() *ActionSendMessage {
	if x != nil {
		return x.SendMessage
	}
	return nil
}

func (x *Action) GetSendEmail() *ActionSendMessage {
	if x != nil {
		return x.SendEmail
	}
	return nil
}

func (x *Action) GetSleep() *ActionSleep {
	if x != nil {
		return x.Sleep
	}
	return nil
}

func (x *Action) GetJump() *ActionJump {
	if x != nil {
		return x.Jump
	}
	return nil
}

func (x *Action) GetSwitchLanguage() *ActionSwitchLanguage {
	if x != nil {
		return x.SwitchLanguage
	}
	return nil
}

func (x *Action) GetSendHttp() *ActionSendHttp {
	if x != nil {
		return x.SendHttp
	}
	return nil
}

func (x *Action) GetAskQuestion() *ActionAskQuestion {
	if x != nil {
		return x.AskQuestion
	}
	return nil
}

func (x *Action) GetAssign() *ActionAssign {
	if x != nil {
		return x.Assign
	}
	return nil
}

func (x *Action) GetDelaySec() int64 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

type ActionAssign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy            string   `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	AssignTos           []string `protobuf:"bytes,6,rep,name=assign_tos,json=assignTos,proto3" json:"assign_tos,omitempty"`
	AvailableAgentsOnly bool     `protobuf:"varint,13,opt,name=available_agents_only,json=availableAgentsOnly,proto3" json:"available_agents_only,omitempty"` // strategy
}

func (x *ActionAssign) Reset() {
	*x = ActionAssign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAssign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAssign) ProtoMessage() {}

func (x *ActionAssign) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAssign.ProtoReflect.Descriptor instead.
func (*ActionAssign) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{7}
}

func (x *ActionAssign) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *ActionAssign) GetAssignTos() []string {
	if x != nil {
		return x.AssignTos
	}
	return nil
}

func (x *ActionAssign) GetAvailableAgentsOnly() bool {
	if x != nil {
		return x.AvailableAgentsOnly
	}
	return false
}

type ActionJump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *ActionJump) Reset() {
	*x = ActionJump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionJump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionJump) ProtoMessage() {}

func (x *ActionJump) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionJump.ProtoReflect.Descriptor instead.
func (*ActionJump) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{8}
}

func (x *ActionJump) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type ActionSwitchLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSwitchLanguage) Reset() {
	*x = ActionSwitchLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSwitchLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSwitchLanguage) ProtoMessage() {}

func (x *ActionSwitchLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSwitchLanguage.ProtoReflect.Descriptor instead.
func (*ActionSwitchLanguage) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{9}
}

type ActionSendHttp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Payload string                  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Method  string                  `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Header  []*ActionSendHttpHeader `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty"`
}

func (x *ActionSendHttp) Reset() {
	*x = ActionSendHttp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendHttp) ProtoMessage() {}

func (x *ActionSendHttp) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendHttp.ProtoReflect.Descriptor instead.
func (*ActionSendHttp) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{10}
}

func (x *ActionSendHttp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ActionSendHttp) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *ActionSendHttp) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ActionSendHttp) GetHeader() []*ActionSendHttpHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type ActionSendHttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ActionSendHttpHeader) Reset() {
	*x = ActionSendHttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendHttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendHttpHeader) ProtoMessage() {}

func (x *ActionSendHttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendHttpHeader.ProtoReflect.Descriptor instead.
func (*ActionSendHttpHeader) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{11}
}

func (x *ActionSendHttpHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ActionSendHttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ActionAskQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages                      []*conversation.Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	AllowOpenResponse             bool                    `protobuf:"varint,4,opt,name=allow_open_response,json=allowOpenResponse,proto3" json:"allow_open_response,omitempty"`
	SaveToAttribute               string                  `protobuf:"bytes,5,opt,name=save_to_attribute,json=saveToAttribute,proto3" json:"save_to_attribute,omitempty"`
	Validation                    string                  `protobuf:"bytes,6,opt,name=validation,proto3" json:"validation,omitempty"` // none, email, phone, date, link, number, regex
	ValidationRegex               string                  `protobuf:"bytes,7,opt,name=validation_regex,json=validationRegex,proto3" json:"validation_regex,omitempty"`
	RetryOnInvalid                int32                   `protobuf:"varint,10,opt,name=retry_on_invalid,json=retryOnInvalid,proto3" json:"retry_on_invalid,omitempty"`
	SkipIfAttributeAlreadyExisted bool                    `protobuf:"varint,11,opt,name=skip_if_attribute_already_existed,json=skipIfAttributeAlreadyExisted,proto3" json:"skip_if_attribute_already_existed,omitempty"`
	ValidationErrorMessage        *common.I18NText        `protobuf:"bytes,12,opt,name=validation_error_message,json=validationErrorMessage,proto3" json:"validation_error_message,omitempty"`
	TypingDuration                int64                   `protobuf:"varint,13,opt,name=typing_duration,json=typingDuration,proto3" json:"typing_duration,omitempty"` // typing before send, no longer than 5 sec
}

func (x *ActionAskQuestion) Reset() {
	*x = ActionAskQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAskQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAskQuestion) ProtoMessage() {}

func (x *ActionAskQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAskQuestion.ProtoReflect.Descriptor instead.
func (*ActionAskQuestion) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{12}
}

func (x *ActionAskQuestion) GetMessages() []*conversation.Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ActionAskQuestion) GetAllowOpenResponse() bool {
	if x != nil {
		return x.AllowOpenResponse
	}
	return false
}

func (x *ActionAskQuestion) GetSaveToAttribute() string {
	if x != nil {
		return x.SaveToAttribute
	}
	return ""
}

func (x *ActionAskQuestion) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *ActionAskQuestion) GetValidationRegex() string {
	if x != nil {
		return x.ValidationRegex
	}
	return ""
}

func (x *ActionAskQuestion) GetRetryOnInvalid() int32 {
	if x != nil {
		return x.RetryOnInvalid
	}
	return 0
}

func (x *ActionAskQuestion) GetSkipIfAttributeAlreadyExisted() bool {
	if x != nil {
		return x.SkipIfAttributeAlreadyExisted
	}
	return false
}

func (x *ActionAskQuestion) GetValidationErrorMessage() *common.I18NText {
	if x != nil {
		return x.ValidationErrorMessage
	}
	return nil
}

func (x *ActionAskQuestion) GetTypingDuration() int64 {
	if x != nil {
		return x.TypingDuration
	}
	return 0
}

type ActionSendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages       []*conversation.Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	TypingDuration int64                   `protobuf:"varint,4,opt,name=typing_duration,json=typingDuration,proto3" json:"typing_duration,omitempty"` // sec, typing before send, no longer than 5 sec
}

func (x *ActionSendMessage) Reset() {
	*x = ActionSendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendMessage) ProtoMessage() {}

func (x *ActionSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendMessage.ProtoReflect.Descriptor instead.
func (*ActionSendMessage) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{13}
}

func (x *ActionSendMessage) GetMessages() []*conversation.Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ActionSendMessage) GetTypingDuration() int64 {
	if x != nil {
		return x.TypingDuration
	}
	return 0
}

type ActionSleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ActionSleep) Reset() {
	*x = ActionSleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSleep) ProtoMessage() {}

func (x *ActionSleep) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSleep.ProtoReflect.Descriptor instead.
func (*ActionSleep) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{14}
}

func (x *ActionSleep) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      string       `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Conditions []*Condition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"` // only availabe if group is all or any
	// only avaiable if group is single
	Key      string               `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`   // unique, path to properties, for example data.conversation.text, global.agent.avaliablitiy...
	Type     string               `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"` // string, number, boolean
	Number   *common.NumberParams `protobuf:"bytes,7,opt,name=number,proto3" json:"number,omitempty"`
	String_  *common.StringParams `protobuf:"bytes,8,opt,name=string,proto3" json:"string,omitempty"`
	Function string               `protobuf:"bytes,19,opt,name=function,proto3" json:"function,omitempty"` // used to transform value of left side before evaluate expression
	Name     string               `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`         // front end used only
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{15}
}

func (x *Condition) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Condition) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Condition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetNumber() *common.NumberParams {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Condition) GetString_() *common.StringParams {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *Condition) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Condition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_bot_proto protoreflect.FileDescriptor

var file_bot_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x6f, 0x74,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x43, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x14, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xa6, 0x05, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x72, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x68, 0x61, 0x73,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x68, 0x61, 0x73, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1e, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a,
	0x0a, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02, 0x22, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x22, 0x54, 0x0a, 0x07,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x66, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x64, 0x67,
	0x65, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x73,
	0x61, 0x66, 0x61, 0x72, 0x69, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x06, 0x22, 0x9c, 0x05, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x62, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x77, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x47, 0x0a, 0x04, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1c, 0x0a, 0x04,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x62, 0x6f, 0x74,
	0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0a, 0x4e, 0x65,
	0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x04, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x05,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x75, 0x6d, 0x70, 0x52, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0e,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70,
	0x12, 0x39, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f,
	0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x63, 0x22, 0x7d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x29, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x3e, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd6, 0x03, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x4f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x66, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x31, 0x38, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x10,
	0x02, 0x22, 0x4c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x6f, 0x10, 0x03, 0x2a,
	0x38, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x09,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x2a, 0xb5, 0x02, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x6a, 0x75, 0x6d, 0x70, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x61, 0x67, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x10,
	0x13, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x62, 0x6f, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bot_proto_rawDescOnce sync.Once
	file_bot_proto_rawDescData = file_bot_proto_rawDesc
)

func file_bot_proto_rawDescGZIP() []byte {
	file_bot_proto_rawDescOnce.Do(func() {
		file_bot_proto_rawDescData = protoimpl.X.CompressGZIP(file_bot_proto_rawDescData)
	})
	return file_bot_proto_rawDescData
}

var file_bot_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bot_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bot_proto_goTypes = []interface{}{
	(BotCategory)(0),                            // 0: bot.BotCategory
	(ActionType)(0),                             // 1: bot.ActionType
	(SegmentationCondition_Source)(0),           // 2: bot.SegmentationCondition.Source
	(SegmentationCondition_DeviveType)(0),       // 3: bot.SegmentationCondition.DeviveType
	(SegmentationCondition_Browser)(0),          // 4: bot.SegmentationCondition.Browser
	(Condition_Group)(0),                        // 5: bot.Condition.Group
	(Condition_Function)(0),                     // 6: bot.Condition.Function
	(*Trigger)(nil),                             // 7: bot.Trigger
	(*Segmentation)(nil),                        // 8: bot.Segmentation
	(*SegmentationCondition)(nil),               // 9: bot.SegmentationCondition
	(*Bot)(nil),                                 // 10: bot.Bot
	(*Bots)(nil),                                // 11: bot.Bots
	(*NextAction)(nil),                          // 12: bot.NextAction
	(*Action)(nil),                              // 13: bot.Action
	(*ActionAssign)(nil),                        // 14: bot.ActionAssign
	(*ActionJump)(nil),                          // 15: bot.ActionJump
	(*ActionSwitchLanguage)(nil),                // 16: bot.ActionSwitchLanguage
	(*ActionSendHttp)(nil),                      // 17: bot.ActionSendHttp
	(*ActionSendHttpHeader)(nil),                // 18: bot.ActionSendHttpHeader
	(*ActionAskQuestion)(nil),                   // 19: bot.ActionAskQuestion
	(*ActionSendMessage)(nil),                   // 20: bot.ActionSendMessage
	(*ActionSleep)(nil),                         // 21: bot.ActionSleep
	(*Condition)(nil),                           // 22: bot.Condition
	(*common.Context)(nil),                      // 23: common.Context
	(*conversation.TimmingCondition)(nil),       // 24: conversation.TimmingCondition
	(*conversation.UserAttributeCondition)(nil), // 25: conversation.UserAttributeCondition
	(*conversation.Message)(nil),                // 26: conversation.Message
	(*common.I18NText)(nil),                     // 27: common.I18nText
	(*common.NumberParams)(nil),                 // 28: common.NumberParams
	(*common.StringParams)(nil),                 // 29: common.StringParams
}
var file_bot_proto_depIdxs = []int32{
	9,  // 0: bot.Segmentation.conditions:type_name -> bot.SegmentationCondition
	9,  // 1: bot.Segmentation.source_conditions:type_name -> bot.SegmentationCondition
	9,  // 2: bot.Segmentation.location_conditions:type_name -> bot.SegmentationCondition
	9,  // 3: bot.Segmentation.url_conditions:type_name -> bot.SegmentationCondition
	9,  // 4: bot.Segmentation.exclude_url_conditions:type_name -> bot.SegmentationCondition
	9,  // 5: bot.Segmentation.has_visited_url_conditions:type_name -> bot.SegmentationCondition
	9,  // 6: bot.Segmentation.has_not_visited_url_conditions:type_name -> bot.SegmentationCondition
	9,  // 7: bot.Segmentation.exclude_location_conditions:type_name -> bot.SegmentationCondition
	23, // 8: bot.Bot.ctx:type_name -> common.Context
	13, // 9: bot.Bot.action:type_name -> bot.Action
	7,  // 10: bot.Bot.triggers:type_name -> bot.Trigger
	8,  // 11: bot.Bot.web_condition:type_name -> bot.Segmentation
	24, // 12: bot.Bot.timming_condition:type_name -> conversation.TimmingCondition
	25, // 13: bot.Bot.user_conditions:type_name -> conversation.UserAttributeCondition
	23, // 14: bot.Bots.ctx:type_name -> common.Context
	10, // 15: bot.Bots.bots:type_name -> bot.Bot
	22, // 16: bot.NextAction.condition:type_name -> bot.Condition
	13, // 17: bot.NextAction.action:type_name -> bot.Action
	12, // 18: bot.Action.nexts:type_name -> bot.NextAction
	20, // 19: bot.Action.send_message:type_name -> bot.ActionSendMessage
	20, // 20: bot.Action.send_email:type_name -> bot.ActionSendMessage
	21, // 21: bot.Action.sleep:type_name -> bot.ActionSleep
	15, // 22: bot.Action.jump:type_name -> bot.ActionJump
	16, // 23: bot.Action.switch_language:type_name -> bot.ActionSwitchLanguage
	17, // 24: bot.Action.send_http:type_name -> bot.ActionSendHttp
	19, // 25: bot.Action.ask_question:type_name -> bot.ActionAskQuestion
	14, // 26: bot.Action.assign:type_name -> bot.ActionAssign
	18, // 27: bot.ActionSendHttp.header:type_name -> bot.ActionSendHttpHeader
	26, // 28: bot.ActionAskQuestion.messages:type_name -> conversation.Message
	27, // 29: bot.ActionAskQuestion.validation_error_message:type_name -> common.I18nText
	26, // 30: bot.ActionSendMessage.messages:type_name -> conversation.Message
	22, // 31: bot.Condition.conditions:type_name -> bot.Condition
	28, // 32: bot.Condition.number:type_name -> common.NumberParams
	29, // 33: bot.Condition.string:type_name -> common.StringParams
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_bot_proto_init() }
func file_bot_proto_init() {
	if File_bot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segmentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentationCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAssign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionJump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSwitchLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendHttp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendHttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAskQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bot_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bot_proto_goTypes,
		DependencyIndexes: file_bot_proto_depIdxs,
		EnumInfos:         file_bot_proto_enumTypes,
		MessageInfos:      file_bot_proto_msgTypes,
	}.Build()
	File_bot_proto = out.File
	file_bot_proto_rawDesc = nil
	file_bot_proto_goTypes = nil
	file_bot_proto_depIdxs = nil
}
