// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package client

@SerialVersionUID(0L)
final case class Authorization(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    issuer: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[auth.Type] = None,
    method: scala.Option[auth.Method] = None,
    clientId: scala.Option[_root_.scala.Predef.String] = None,
    clientType: scala.Option[auth.Type] = None,
    clientAccountId: scala.Option[_root_.scala.Predef.String] = None,
    scopes: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    integrationId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Authorization] with scalapb.lenses.Updatable[Authorization] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (issuer.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, issuer.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, `type`.get.value) }
      if (method.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(method.get.serializedSize) + method.get.serializedSize }
      if (clientId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, clientId.get) }
      if (clientType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, clientType.get.value) }
      if (clientAccountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, clientAccountId.get) }
      scopes.foreach(scopes => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, scopes))
      if (integrationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, integrationId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      issuer.foreach { __v =>
        _output__.writeString(3, __v)
      };
      `type`.foreach { __v =>
        _output__.writeEnum(4, __v.value)
      };
      method.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      clientId.foreach { __v =>
        _output__.writeString(7, __v)
      };
      clientType.foreach { __v =>
        _output__.writeEnum(8, __v.value)
      };
      scopes.foreach { __v =>
        _output__.writeString(9, __v)
      };
      clientAccountId.foreach { __v =>
        _output__.writeString(10, __v)
      };
      integrationId.foreach { __v =>
        _output__.writeString(11, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): client.Authorization = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __issuer = this.issuer
      var __type = this.`type`
      var __method = this.method
      var __clientId = this.clientId
      var __clientType = this.clientType
      var __clientAccountId = this.clientAccountId
      val __scopes = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.scopes)
      var __integrationId = this.integrationId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __issuer = Option(_input__.readString())
          case 32 =>
            __type = Option(auth.Type.fromValue(_input__.readEnum()))
          case 42 =>
            __method = Option(_root_.scalapb.LiteParser.readMessage(_input__, __method.getOrElse(auth.Method.defaultInstance)))
          case 58 =>
            __clientId = Option(_input__.readString())
          case 64 =>
            __clientType = Option(auth.Type.fromValue(_input__.readEnum()))
          case 82 =>
            __clientAccountId = Option(_input__.readString())
          case 74 =>
            __scopes += _input__.readString()
          case 90 =>
            __integrationId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      client.Authorization(
          ctx = __ctx,
          accountId = __accountId,
          issuer = __issuer,
          `type` = __type,
          method = __method,
          clientId = __clientId,
          clientType = __clientType,
          clientAccountId = __clientAccountId,
          scopes = __scopes.result(),
          integrationId = __integrationId
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Authorization = copy(ctx = None)
    def withCtx(__v: common.Context): Authorization = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Authorization = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Authorization = copy(accountId = Option(__v))
    def getIssuer: _root_.scala.Predef.String = issuer.getOrElse("")
    def clearIssuer: Authorization = copy(issuer = None)
    def withIssuer(__v: _root_.scala.Predef.String): Authorization = copy(issuer = Option(__v))
    def getType: auth.Type = `type`.getOrElse(auth.Type.unknown)
    def clearType: Authorization = copy(`type` = None)
    def withType(__v: auth.Type): Authorization = copy(`type` = Option(__v))
    def getMethod: auth.Method = method.getOrElse(auth.Method.defaultInstance)
    def clearMethod: Authorization = copy(method = None)
    def withMethod(__v: auth.Method): Authorization = copy(method = Option(__v))
    def getClientId: _root_.scala.Predef.String = clientId.getOrElse("")
    def clearClientId: Authorization = copy(clientId = None)
    def withClientId(__v: _root_.scala.Predef.String): Authorization = copy(clientId = Option(__v))
    def getClientType: auth.Type = clientType.getOrElse(auth.Type.unknown)
    def clearClientType: Authorization = copy(clientType = None)
    def withClientType(__v: auth.Type): Authorization = copy(clientType = Option(__v))
    def getClientAccountId: _root_.scala.Predef.String = clientAccountId.getOrElse("")
    def clearClientAccountId: Authorization = copy(clientAccountId = None)
    def withClientAccountId(__v: _root_.scala.Predef.String): Authorization = copy(clientAccountId = Option(__v))
    def clearScopes = copy(scopes = _root_.scala.collection.Seq.empty)
    def addScopes(__vs: _root_.scala.Predef.String*): Authorization = addAllScopes(__vs)
    def addAllScopes(__vs: TraversableOnce[_root_.scala.Predef.String]): Authorization = copy(scopes = scopes ++ __vs)
    def withScopes(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Authorization = copy(scopes = __v)
    def getIntegrationId: _root_.scala.Predef.String = integrationId.getOrElse("")
    def clearIntegrationId: Authorization = copy(integrationId = None)
    def withIntegrationId(__v: _root_.scala.Predef.String): Authorization = copy(integrationId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => issuer.orNull
        case 4 => `type`.map(_.javaValueDescriptor).orNull
        case 5 => method.orNull
        case 7 => clientId.orNull
        case 8 => clientType.map(_.javaValueDescriptor).orNull
        case 10 => clientAccountId.orNull
        case 9 => scopes
        case 11 => integrationId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => issuer.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => method.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => clientId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => clientType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => clientAccountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(scopes.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 11 => integrationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = client.Authorization
}

object Authorization extends scalapb.GeneratedMessageCompanion[client.Authorization] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[client.Authorization] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): client.Authorization = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    client.Authorization(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => auth.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[auth.Method]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => auth.Type.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[client.Authorization] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      client.Authorization(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => auth.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[auth.Method]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => auth.Type.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ClientProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ClientProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 5 => __out = auth.Method
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => auth.Type
      case 8 => auth.Type
    }
  }
  lazy val defaultInstance = client.Authorization(
  )
  implicit class AuthorizationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, client.Authorization]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, client.Authorization](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def issuer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIssuer)((c_, f_) => c_.copy(issuer = Option(f_)))
    def optionalIssuer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.issuer)((c_, f_) => c_.copy(issuer = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, auth.Type] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Type]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def method: _root_.scalapb.lenses.Lens[UpperPB, auth.Method] = field(_.getMethod)((c_, f_) => c_.copy(method = Option(f_)))
    def optionalMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Method]] = field(_.method)((c_, f_) => c_.copy(method = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClientId)((c_, f_) => c_.copy(clientId = Option(f_)))
    def optionalClientId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def clientType: _root_.scalapb.lenses.Lens[UpperPB, auth.Type] = field(_.getClientType)((c_, f_) => c_.copy(clientType = Option(f_)))
    def optionalClientType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Type]] = field(_.clientType)((c_, f_) => c_.copy(clientType = f_))
    def clientAccountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClientAccountId)((c_, f_) => c_.copy(clientAccountId = Option(f_)))
    def optionalClientAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.clientAccountId)((c_, f_) => c_.copy(clientAccountId = f_))
    def scopes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.scopes)((c_, f_) => c_.copy(scopes = f_))
    def integrationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIntegrationId)((c_, f_) => c_.copy(integrationId = Option(f_)))
    def optionalIntegrationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.integrationId)((c_, f_) => c_.copy(integrationId = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val ISSUER_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val METHOD_FIELD_NUMBER = 5
  final val CLIENT_ID_FIELD_NUMBER = 7
  final val CLIENT_TYPE_FIELD_NUMBER = 8
  final val CLIENT_ACCOUNT_ID_FIELD_NUMBER = 10
  final val SCOPES_FIELD_NUMBER = 9
  final val INTEGRATION_ID_FIELD_NUMBER = 11
}
