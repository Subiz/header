// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package client

/** @param secret
  *   secre used to authorize client with oauth2 server
  * @param logoUrl
  *   LogoUrl is url to logo of the client, should be 256x256 and lessthan 256KB
  * @param isVerified
  *   IsVerified will be true if client is verified by the authority
  * @param redirectUrl
  *   List of URLs which client must register for oauth redirection
  * @param version
  *   Version number of the client.
  * @param events
  *   subscribed event
  * @param channelType
  *   for connector only
  */
@SerialVersionUID(0L)
final case class Client(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    secret: scala.Option[_root_.scala.Predef.String] = None,
    logoUrl: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    isVerified: scala.Option[_root_.scala.Boolean] = None,
    verified: scala.Option[_root_.scala.Long] = None,
    redirectUrl: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    version: scala.Option[_root_.scala.Predef.String] = None,
    isEnabled: scala.Option[_root_.scala.Boolean] = None,
    created: scala.Option[_root_.scala.Long] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    webhookUrl: scala.Option[_root_.scala.Predef.String] = None,
    events: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    channelType: scala.Option[_root_.scala.Predef.String] = None,
    availabilityUrl: scala.Option[_root_.scala.Predef.String] = None,
    pingUrl: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Client] with scalapb.lenses.Updatable[Client] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (secret.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, secret.get) }
      if (logoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, logoUrl.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, accountId.get) }
      if (isVerified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, isVerified.get) }
      if (verified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, verified.get) }
      if (redirectUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, redirectUrl.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, `type`.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, name.get) }
      if (version.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, version.get) }
      if (isEnabled.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(15, isEnabled.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(17, created.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(18, modified.get) }
      if (webhookUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(20, webhookUrl.get) }
      events.foreach(events => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, events))
      if (channelType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, channelType.get) }
      if (availabilityUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(22, availabilityUrl.get) }
      if (pingUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(23, pingUrl.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      secret.foreach { __v =>
        _output__.writeString(4, __v)
      };
      logoUrl.foreach { __v =>
        _output__.writeString(5, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      isVerified.foreach { __v =>
        _output__.writeBool(8, __v)
      };
      verified.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      redirectUrl.foreach { __v =>
        _output__.writeString(10, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(11, __v)
      };
      name.foreach { __v =>
        _output__.writeString(12, __v)
      };
      version.foreach { __v =>
        _output__.writeString(14, __v)
      };
      isEnabled.foreach { __v =>
        _output__.writeBool(15, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(17, __v)
      };
      modified.foreach { __v =>
        _output__.writeInt64(18, __v)
      };
      events.foreach { __v =>
        _output__.writeString(19, __v)
      };
      webhookUrl.foreach { __v =>
        _output__.writeString(20, __v)
      };
      channelType.foreach { __v =>
        _output__.writeString(21, __v)
      };
      availabilityUrl.foreach { __v =>
        _output__.writeString(22, __v)
      };
      pingUrl.foreach { __v =>
        _output__.writeString(23, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): client.Client = {
      var __ctx = this.ctx
      var __id = this.id
      var __secret = this.secret
      var __logoUrl = this.logoUrl
      var __accountId = this.accountId
      var __isVerified = this.isVerified
      var __verified = this.verified
      var __redirectUrl = this.redirectUrl
      var __type = this.`type`
      var __name = this.name
      var __version = this.version
      var __isEnabled = this.isEnabled
      var __created = this.created
      var __modified = this.modified
      var __webhookUrl = this.webhookUrl
      val __events = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.events)
      var __channelType = this.channelType
      var __availabilityUrl = this.availabilityUrl
      var __pingUrl = this.pingUrl
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __secret = Option(_input__.readString())
          case 42 =>
            __logoUrl = Option(_input__.readString())
          case 50 =>
            __accountId = Option(_input__.readString())
          case 64 =>
            __isVerified = Option(_input__.readBool())
          case 72 =>
            __verified = Option(_input__.readInt64())
          case 82 =>
            __redirectUrl = Option(_input__.readString())
          case 90 =>
            __type = Option(_input__.readString())
          case 98 =>
            __name = Option(_input__.readString())
          case 114 =>
            __version = Option(_input__.readString())
          case 120 =>
            __isEnabled = Option(_input__.readBool())
          case 136 =>
            __created = Option(_input__.readInt64())
          case 144 =>
            __modified = Option(_input__.readInt64())
          case 162 =>
            __webhookUrl = Option(_input__.readString())
          case 154 =>
            __events += _input__.readString()
          case 170 =>
            __channelType = Option(_input__.readString())
          case 178 =>
            __availabilityUrl = Option(_input__.readString())
          case 186 =>
            __pingUrl = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      client.Client(
          ctx = __ctx,
          id = __id,
          secret = __secret,
          logoUrl = __logoUrl,
          accountId = __accountId,
          isVerified = __isVerified,
          verified = __verified,
          redirectUrl = __redirectUrl,
          `type` = __type,
          name = __name,
          version = __version,
          isEnabled = __isEnabled,
          created = __created,
          modified = __modified,
          webhookUrl = __webhookUrl,
          events = __events.result(),
          channelType = __channelType,
          availabilityUrl = __availabilityUrl,
          pingUrl = __pingUrl
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Client = copy(ctx = None)
    def withCtx(__v: common.Context): Client = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Client = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Client = copy(id = Option(__v))
    def getSecret: _root_.scala.Predef.String = secret.getOrElse("")
    def clearSecret: Client = copy(secret = None)
    def withSecret(__v: _root_.scala.Predef.String): Client = copy(secret = Option(__v))
    def getLogoUrl: _root_.scala.Predef.String = logoUrl.getOrElse("")
    def clearLogoUrl: Client = copy(logoUrl = None)
    def withLogoUrl(__v: _root_.scala.Predef.String): Client = copy(logoUrl = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Client = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Client = copy(accountId = Option(__v))
    def getIsVerified: _root_.scala.Boolean = isVerified.getOrElse(false)
    def clearIsVerified: Client = copy(isVerified = None)
    def withIsVerified(__v: _root_.scala.Boolean): Client = copy(isVerified = Option(__v))
    def getVerified: _root_.scala.Long = verified.getOrElse(0L)
    def clearVerified: Client = copy(verified = None)
    def withVerified(__v: _root_.scala.Long): Client = copy(verified = Option(__v))
    def getRedirectUrl: _root_.scala.Predef.String = redirectUrl.getOrElse("")
    def clearRedirectUrl: Client = copy(redirectUrl = None)
    def withRedirectUrl(__v: _root_.scala.Predef.String): Client = copy(redirectUrl = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Client = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Client = copy(`type` = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Client = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Client = copy(name = Option(__v))
    def getVersion: _root_.scala.Predef.String = version.getOrElse("")
    def clearVersion: Client = copy(version = None)
    def withVersion(__v: _root_.scala.Predef.String): Client = copy(version = Option(__v))
    def getIsEnabled: _root_.scala.Boolean = isEnabled.getOrElse(false)
    def clearIsEnabled: Client = copy(isEnabled = None)
    def withIsEnabled(__v: _root_.scala.Boolean): Client = copy(isEnabled = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Client = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Client = copy(created = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: Client = copy(modified = None)
    def withModified(__v: _root_.scala.Long): Client = copy(modified = Option(__v))
    def getWebhookUrl: _root_.scala.Predef.String = webhookUrl.getOrElse("")
    def clearWebhookUrl: Client = copy(webhookUrl = None)
    def withWebhookUrl(__v: _root_.scala.Predef.String): Client = copy(webhookUrl = Option(__v))
    def clearEvents = copy(events = _root_.scala.collection.Seq.empty)
    def addEvents(__vs: _root_.scala.Predef.String*): Client = addAllEvents(__vs)
    def addAllEvents(__vs: TraversableOnce[_root_.scala.Predef.String]): Client = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Client = copy(events = __v)
    def getChannelType: _root_.scala.Predef.String = channelType.getOrElse("")
    def clearChannelType: Client = copy(channelType = None)
    def withChannelType(__v: _root_.scala.Predef.String): Client = copy(channelType = Option(__v))
    def getAvailabilityUrl: _root_.scala.Predef.String = availabilityUrl.getOrElse("")
    def clearAvailabilityUrl: Client = copy(availabilityUrl = None)
    def withAvailabilityUrl(__v: _root_.scala.Predef.String): Client = copy(availabilityUrl = Option(__v))
    def getPingUrl: _root_.scala.Predef.String = pingUrl.getOrElse("")
    def clearPingUrl: Client = copy(pingUrl = None)
    def withPingUrl(__v: _root_.scala.Predef.String): Client = copy(pingUrl = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => id.orNull
        case 4 => secret.orNull
        case 5 => logoUrl.orNull
        case 6 => accountId.orNull
        case 8 => isVerified.orNull
        case 9 => verified.orNull
        case 10 => redirectUrl.orNull
        case 11 => `type`.orNull
        case 12 => name.orNull
        case 14 => version.orNull
        case 15 => isEnabled.orNull
        case 17 => created.orNull
        case 18 => modified.orNull
        case 20 => webhookUrl.orNull
        case 19 => events
        case 21 => channelType.orNull
        case 22 => availabilityUrl.orNull
        case 23 => pingUrl.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => secret.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => logoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => isVerified.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => verified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => redirectUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => version.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => isEnabled.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => webhookUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => _root_.scalapb.descriptors.PRepeated(events.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 21 => channelType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => availabilityUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => pingUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = client.Client
}

object Client extends scalapb.GeneratedMessageCompanion[client.Client] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[client.Client] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): client.Client = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    client.Client(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(15), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[client.Client] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      client.Client(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ClientProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ClientProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = client.Client(
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def isapp: _root_.scala.Boolean = false
    def isconnector: _root_.scala.Boolean = false
    def isbot: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = client.Client.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object app extends Type {
      val value = 0
      val index = 0
      val name = "app"
      override def isapp: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object connector extends Type {
      val value = 1
      val index = 1
      val name = "connector"
      override def isconnector: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object bot extends Type {
      val value = 3
      val index = 2
      val name = "bot"
      override def isbot: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(app, connector, bot)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => app
      case 1 => connector
      case 3 => bot
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = client.Client.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = client.Client.scalaDescriptor.enums(0)
  }
  sealed trait ChannelType extends _root_.scalapb.GeneratedEnum {
    type EnumType = ChannelType
    def issubiz: _root_.scala.Boolean = false
    def isemail: _root_.scala.Boolean = false
    def isfacebook: _root_.scala.Boolean = false
    def isviber: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[ChannelType] = client.Client.ChannelType
  }
  
  object ChannelType extends _root_.scalapb.GeneratedEnumCompanion[ChannelType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ChannelType] = this
    @SerialVersionUID(0L)
    case object subiz extends ChannelType {
      val value = 0
      val index = 0
      val name = "subiz"
      override def issubiz: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object email extends ChannelType {
      val value = 1
      val index = 1
      val name = "email"
      override def isemail: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object facebook extends ChannelType {
      val value = 2
      val index = 2
      val name = "facebook"
      override def isfacebook: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object viber extends ChannelType {
      val value = 3
      val index = 3
      val name = "viber"
      override def isviber: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends ChannelType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(subiz, email, facebook, viber)
    def fromValue(value: _root_.scala.Int): ChannelType = value match {
      case 0 => subiz
      case 1 => email
      case 2 => facebook
      case 3 => viber
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = client.Client.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = client.Client.scalaDescriptor.enums(1)
  }
  implicit class ClientLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, client.Client]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, client.Client](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def secret: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSecret)((c_, f_) => c_.copy(secret = Option(f_)))
    def optionalSecret: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.secret)((c_, f_) => c_.copy(secret = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLogoUrl)((c_, f_) => c_.copy(logoUrl = Option(f_)))
    def optionalLogoUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def isVerified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsVerified)((c_, f_) => c_.copy(isVerified = Option(f_)))
    def optionalIsVerified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.isVerified)((c_, f_) => c_.copy(isVerified = f_))
    def verified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getVerified)((c_, f_) => c_.copy(verified = Option(f_)))
    def optionalVerified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.verified)((c_, f_) => c_.copy(verified = f_))
    def redirectUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRedirectUrl)((c_, f_) => c_.copy(redirectUrl = Option(f_)))
    def optionalRedirectUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.redirectUrl)((c_, f_) => c_.copy(redirectUrl = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getVersion)((c_, f_) => c_.copy(version = Option(f_)))
    def optionalVersion: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def isEnabled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsEnabled)((c_, f_) => c_.copy(isEnabled = Option(f_)))
    def optionalIsEnabled: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.isEnabled)((c_, f_) => c_.copy(isEnabled = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def webhookUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getWebhookUrl)((c_, f_) => c_.copy(webhookUrl = Option(f_)))
    def optionalWebhookUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.webhookUrl)((c_, f_) => c_.copy(webhookUrl = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.events)((c_, f_) => c_.copy(events = f_))
    def channelType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getChannelType)((c_, f_) => c_.copy(channelType = Option(f_)))
    def optionalChannelType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.channelType)((c_, f_) => c_.copy(channelType = f_))
    def availabilityUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvailabilityUrl)((c_, f_) => c_.copy(availabilityUrl = Option(f_)))
    def optionalAvailabilityUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.availabilityUrl)((c_, f_) => c_.copy(availabilityUrl = f_))
    def pingUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPingUrl)((c_, f_) => c_.copy(pingUrl = Option(f_)))
    def optionalPingUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.pingUrl)((c_, f_) => c_.copy(pingUrl = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 3
  final val SECRET_FIELD_NUMBER = 4
  final val LOGO_URL_FIELD_NUMBER = 5
  final val ACCOUNT_ID_FIELD_NUMBER = 6
  final val IS_VERIFIED_FIELD_NUMBER = 8
  final val VERIFIED_FIELD_NUMBER = 9
  final val REDIRECT_URL_FIELD_NUMBER = 10
  final val TYPE_FIELD_NUMBER = 11
  final val NAME_FIELD_NUMBER = 12
  final val VERSION_FIELD_NUMBER = 14
  final val IS_ENABLED_FIELD_NUMBER = 15
  final val CREATED_FIELD_NUMBER = 17
  final val MODIFIED_FIELD_NUMBER = 18
  final val WEBHOOK_URL_FIELD_NUMBER = 20
  final val EVENTS_FIELD_NUMBER = 19
  final val CHANNEL_TYPE_FIELD_NUMBER = 21
  final val AVAILABILITY_URL_FIELD_NUMBER = 22
  final val PING_URL_FIELD_NUMBER = 23
}
