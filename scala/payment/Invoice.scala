// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Invoice(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    amountDue: scala.Option[_root_.scala.Float] = None,
    promotionCode: scala.Option[_root_.scala.Predef.String] = None,
    description: scala.Option[_root_.scala.Predef.String] = None,
    billingInfo: scala.Option[payment.BillingInfo] = None,
    dueDate: scala.Option[_root_.scala.Long] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    items: _root_.scala.collection.Seq[payment.InvoiceItem] = _root_.scala.collection.Seq.empty,
    subtotal: scala.Option[_root_.scala.Float] = None,
    taxPercent: scala.Option[_root_.scala.Float] = None,
    tax: scala.Option[_root_.scala.Float] = None,
    total: scala.Option[_root_.scala.Float] = None,
    updated: scala.Option[_root_.scala.Long] = None,
    year: scala.Option[_root_.scala.Int] = None,
    notes: _root_.scala.collection.Seq[payment.Note] = _root_.scala.collection.Seq.empty,
    bills: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    paymentMade: scala.Option[_root_.scala.Float] = None,
    currentSub: scala.Option[payment.Subscription] = None,
    currentPlan: scala.Option[payment.Plan] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Invoice] with scalapb.lenses.Updatable[Invoice] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (amountDue.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, amountDue.get) }
      if (promotionCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, promotionCode.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, description.get) }
      if (billingInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(billingInfo.get.serializedSize) + billingInfo.get.serializedSize }
      if (dueDate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, dueDate.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, state.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, created.get) }
      items.foreach(items => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(items.serializedSize) + items.serializedSize)
      if (subtotal.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(14, subtotal.get) }
      if (taxPercent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(15, taxPercent.get) }
      if (tax.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(16, tax.get) }
      if (total.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(17, total.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(18, updated.get) }
      if (year.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(19, year.get) }
      notes.foreach(notes => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(notes.serializedSize) + notes.serializedSize)
      bills.foreach(bills => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(23, bills))
      if (paymentMade.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(24, paymentMade.get) }
      if (currentSub.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(currentSub.get.serializedSize) + currentSub.get.serializedSize }
      if (currentPlan.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(currentPlan.get.serializedSize) + currentPlan.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      amountDue.foreach { __v =>
        _output__.writeFloat(4, __v)
      };
      promotionCode.foreach { __v =>
        _output__.writeString(5, __v)
      };
      description.foreach { __v =>
        _output__.writeString(6, __v)
      };
      billingInfo.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      dueDate.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      state.foreach { __v =>
        _output__.writeString(10, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      items.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      subtotal.foreach { __v =>
        _output__.writeFloat(14, __v)
      };
      taxPercent.foreach { __v =>
        _output__.writeFloat(15, __v)
      };
      tax.foreach { __v =>
        _output__.writeFloat(16, __v)
      };
      total.foreach { __v =>
        _output__.writeFloat(17, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(18, __v)
      };
      year.foreach { __v =>
        _output__.writeInt32(19, __v)
      };
      notes.foreach { __v =>
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      bills.foreach { __v =>
        _output__.writeString(23, __v)
      };
      paymentMade.foreach { __v =>
        _output__.writeFloat(24, __v)
      };
      currentSub.foreach { __v =>
        _output__.writeTag(25, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      currentPlan.foreach { __v =>
        _output__.writeTag(26, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Invoice = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __id = this.id
      var __amountDue = this.amountDue
      var __promotionCode = this.promotionCode
      var __description = this.description
      var __billingInfo = this.billingInfo
      var __dueDate = this.dueDate
      var __state = this.state
      var __created = this.created
      val __items = (_root_.scala.collection.immutable.Vector.newBuilder[payment.InvoiceItem] ++= this.items)
      var __subtotal = this.subtotal
      var __taxPercent = this.taxPercent
      var __tax = this.tax
      var __total = this.total
      var __updated = this.updated
      var __year = this.year
      val __notes = (_root_.scala.collection.immutable.Vector.newBuilder[payment.Note] ++= this.notes)
      val __bills = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.bills)
      var __paymentMade = this.paymentMade
      var __currentSub = this.currentSub
      var __currentPlan = this.currentPlan
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __id = Option(_input__.readString())
          case 37 =>
            __amountDue = Option(_input__.readFloat())
          case 42 =>
            __promotionCode = Option(_input__.readString())
          case 50 =>
            __description = Option(_input__.readString())
          case 66 =>
            __billingInfo = Option(_root_.scalapb.LiteParser.readMessage(_input__, __billingInfo.getOrElse(payment.BillingInfo.defaultInstance)))
          case 72 =>
            __dueDate = Option(_input__.readInt64())
          case 82 =>
            __state = Option(_input__.readString())
          case 88 =>
            __created = Option(_input__.readInt64())
          case 98 =>
            __items += _root_.scalapb.LiteParser.readMessage(_input__, payment.InvoiceItem.defaultInstance)
          case 117 =>
            __subtotal = Option(_input__.readFloat())
          case 125 =>
            __taxPercent = Option(_input__.readFloat())
          case 133 =>
            __tax = Option(_input__.readFloat())
          case 141 =>
            __total = Option(_input__.readFloat())
          case 144 =>
            __updated = Option(_input__.readInt64())
          case 152 =>
            __year = Option(_input__.readInt32())
          case 178 =>
            __notes += _root_.scalapb.LiteParser.readMessage(_input__, payment.Note.defaultInstance)
          case 186 =>
            __bills += _input__.readString()
          case 197 =>
            __paymentMade = Option(_input__.readFloat())
          case 202 =>
            __currentSub = Option(_root_.scalapb.LiteParser.readMessage(_input__, __currentSub.getOrElse(payment.Subscription.defaultInstance)))
          case 210 =>
            __currentPlan = Option(_root_.scalapb.LiteParser.readMessage(_input__, __currentPlan.getOrElse(payment.Plan.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      payment.Invoice(
          ctx = __ctx,
          accountId = __accountId,
          id = __id,
          amountDue = __amountDue,
          promotionCode = __promotionCode,
          description = __description,
          billingInfo = __billingInfo,
          dueDate = __dueDate,
          state = __state,
          created = __created,
          items = __items.result(),
          subtotal = __subtotal,
          taxPercent = __taxPercent,
          tax = __tax,
          total = __total,
          updated = __updated,
          year = __year,
          notes = __notes.result(),
          bills = __bills.result(),
          paymentMade = __paymentMade,
          currentSub = __currentSub,
          currentPlan = __currentPlan
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Invoice = copy(ctx = None)
    def withCtx(__v: common.Context): Invoice = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Invoice = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Invoice = copy(accountId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Invoice = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Invoice = copy(id = Option(__v))
    def getAmountDue: _root_.scala.Float = amountDue.getOrElse(0.0f)
    def clearAmountDue: Invoice = copy(amountDue = None)
    def withAmountDue(__v: _root_.scala.Float): Invoice = copy(amountDue = Option(__v))
    def getPromotionCode: _root_.scala.Predef.String = promotionCode.getOrElse("")
    def clearPromotionCode: Invoice = copy(promotionCode = None)
    def withPromotionCode(__v: _root_.scala.Predef.String): Invoice = copy(promotionCode = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: Invoice = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): Invoice = copy(description = Option(__v))
    def getBillingInfo: payment.BillingInfo = billingInfo.getOrElse(payment.BillingInfo.defaultInstance)
    def clearBillingInfo: Invoice = copy(billingInfo = None)
    def withBillingInfo(__v: payment.BillingInfo): Invoice = copy(billingInfo = Option(__v))
    def getDueDate: _root_.scala.Long = dueDate.getOrElse(0L)
    def clearDueDate: Invoice = copy(dueDate = None)
    def withDueDate(__v: _root_.scala.Long): Invoice = copy(dueDate = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Invoice = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Invoice = copy(state = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Invoice = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Invoice = copy(created = Option(__v))
    def clearItems = copy(items = _root_.scala.collection.Seq.empty)
    def addItems(__vs: payment.InvoiceItem*): Invoice = addAllItems(__vs)
    def addAllItems(__vs: TraversableOnce[payment.InvoiceItem]): Invoice = copy(items = items ++ __vs)
    def withItems(__v: _root_.scala.collection.Seq[payment.InvoiceItem]): Invoice = copy(items = __v)
    def getSubtotal: _root_.scala.Float = subtotal.getOrElse(0.0f)
    def clearSubtotal: Invoice = copy(subtotal = None)
    def withSubtotal(__v: _root_.scala.Float): Invoice = copy(subtotal = Option(__v))
    def getTaxPercent: _root_.scala.Float = taxPercent.getOrElse(0.0f)
    def clearTaxPercent: Invoice = copy(taxPercent = None)
    def withTaxPercent(__v: _root_.scala.Float): Invoice = copy(taxPercent = Option(__v))
    def getTax: _root_.scala.Float = tax.getOrElse(0.0f)
    def clearTax: Invoice = copy(tax = None)
    def withTax(__v: _root_.scala.Float): Invoice = copy(tax = Option(__v))
    def getTotal: _root_.scala.Float = total.getOrElse(0.0f)
    def clearTotal: Invoice = copy(total = None)
    def withTotal(__v: _root_.scala.Float): Invoice = copy(total = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: Invoice = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): Invoice = copy(updated = Option(__v))
    def getYear: _root_.scala.Int = year.getOrElse(0)
    def clearYear: Invoice = copy(year = None)
    def withYear(__v: _root_.scala.Int): Invoice = copy(year = Option(__v))
    def clearNotes = copy(notes = _root_.scala.collection.Seq.empty)
    def addNotes(__vs: payment.Note*): Invoice = addAllNotes(__vs)
    def addAllNotes(__vs: TraversableOnce[payment.Note]): Invoice = copy(notes = notes ++ __vs)
    def withNotes(__v: _root_.scala.collection.Seq[payment.Note]): Invoice = copy(notes = __v)
    def clearBills = copy(bills = _root_.scala.collection.Seq.empty)
    def addBills(__vs: _root_.scala.Predef.String*): Invoice = addAllBills(__vs)
    def addAllBills(__vs: TraversableOnce[_root_.scala.Predef.String]): Invoice = copy(bills = bills ++ __vs)
    def withBills(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Invoice = copy(bills = __v)
    def getPaymentMade: _root_.scala.Float = paymentMade.getOrElse(0.0f)
    def clearPaymentMade: Invoice = copy(paymentMade = None)
    def withPaymentMade(__v: _root_.scala.Float): Invoice = copy(paymentMade = Option(__v))
    def getCurrentSub: payment.Subscription = currentSub.getOrElse(payment.Subscription.defaultInstance)
    def clearCurrentSub: Invoice = copy(currentSub = None)
    def withCurrentSub(__v: payment.Subscription): Invoice = copy(currentSub = Option(__v))
    def getCurrentPlan: payment.Plan = currentPlan.getOrElse(payment.Plan.defaultInstance)
    def clearCurrentPlan: Invoice = copy(currentPlan = None)
    def withCurrentPlan(__v: payment.Plan): Invoice = copy(currentPlan = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => id.orNull
        case 4 => amountDue.orNull
        case 5 => promotionCode.orNull
        case 6 => description.orNull
        case 8 => billingInfo.orNull
        case 9 => dueDate.orNull
        case 10 => state.orNull
        case 11 => created.orNull
        case 12 => items
        case 14 => subtotal.orNull
        case 15 => taxPercent.orNull
        case 16 => tax.orNull
        case 17 => total.orNull
        case 18 => updated.orNull
        case 19 => year.orNull
        case 22 => notes
        case 23 => bills
        case 24 => paymentMade.orNull
        case 25 => currentSub.orNull
        case 26 => currentPlan.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => amountDue.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => promotionCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => billingInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => dueDate.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PRepeated(items.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 14 => subtotal.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => taxPercent.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => tax.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => total.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => year.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => _root_.scalapb.descriptors.PRepeated(notes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 23 => _root_.scalapb.descriptors.PRepeated(bills.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 24 => paymentMade.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => currentSub.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => currentPlan.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Invoice
}

object Invoice extends scalapb.GeneratedMessageCompanion[payment.Invoice] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Invoice] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Invoice = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Invoice(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[payment.BillingInfo]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.getOrElse(__fields.get(10), Nil).asInstanceOf[_root_.scala.collection.Seq[payment.InvoiceItem]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.getOrElse(__fields.get(17), Nil).asInstanceOf[_root_.scala.collection.Seq[payment.Note]],
      __fieldsMap.getOrElse(__fields.get(18), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[payment.Subscription]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[payment.Plan]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Invoice] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Invoice(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[payment.BillingInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.collection.Seq[payment.InvoiceItem]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).map(_.as[_root_.scala.collection.Seq[payment.Note]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[payment.Subscription]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[payment.Plan]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 8 => __out = payment.BillingInfo
      case 12 => __out = payment.InvoiceItem
      case 22 => __out = payment.Note
      case 25 => __out = payment.Subscription
      case 26 => __out = payment.Plan
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Invoice(
  )
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def isdraft: _root_.scala.Boolean = false
    def isopen: _root_.scala.Boolean = false
    def isoverdue: _root_.scala.Boolean = false
    def ispaid: _root_.scala.Boolean = false
    def isvoided: _root_.scala.Boolean = false
    def isqueueing: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = payment.Invoice.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object draft extends State {
      val value = 0
      val index = 0
      val name = "draft"
      override def isdraft: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object open extends State {
      val value = 1
      val index = 1
      val name = "open"
      override def isopen: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object overdue extends State {
      val value = 2
      val index = 2
      val name = "overdue"
      override def isoverdue: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object paid extends State {
      val value = 3
      val index = 3
      val name = "paid"
      override def ispaid: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object voided extends State {
      val value = 4
      val index = 4
      val name = "voided"
      override def isvoided: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object queueing extends State {
      val value = 5
      val index = 5
      val name = "queueing"
      override def isqueueing: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(draft, open, overdue, paid, voided, queueing)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => draft
      case 1 => open
      case 2 => overdue
      case 3 => paid
      case 4 => voided
      case 5 => queueing
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Invoice.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Invoice.scalaDescriptor.enums(0)
  }
  implicit class InvoiceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Invoice]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Invoice](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def amountDue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getAmountDue)((c_, f_) => c_.copy(amountDue = Option(f_)))
    def optionalAmountDue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.amountDue)((c_, f_) => c_.copy(amountDue = f_))
    def promotionCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPromotionCode)((c_, f_) => c_.copy(promotionCode = Option(f_)))
    def optionalPromotionCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.promotionCode)((c_, f_) => c_.copy(promotionCode = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def billingInfo: _root_.scalapb.lenses.Lens[UpperPB, payment.BillingInfo] = field(_.getBillingInfo)((c_, f_) => c_.copy(billingInfo = Option(f_)))
    def optionalBillingInfo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.BillingInfo]] = field(_.billingInfo)((c_, f_) => c_.copy(billingInfo = f_))
    def dueDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getDueDate)((c_, f_) => c_.copy(dueDate = Option(f_)))
    def optionalDueDate: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.dueDate)((c_, f_) => c_.copy(dueDate = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def items: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[payment.InvoiceItem]] = field(_.items)((c_, f_) => c_.copy(items = f_))
    def subtotal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSubtotal)((c_, f_) => c_.copy(subtotal = Option(f_)))
    def optionalSubtotal: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.subtotal)((c_, f_) => c_.copy(subtotal = f_))
    def taxPercent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getTaxPercent)((c_, f_) => c_.copy(taxPercent = Option(f_)))
    def optionalTaxPercent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.taxPercent)((c_, f_) => c_.copy(taxPercent = f_))
    def tax: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getTax)((c_, f_) => c_.copy(tax = Option(f_)))
    def optionalTax: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.tax)((c_, f_) => c_.copy(tax = f_))
    def total: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getTotal)((c_, f_) => c_.copy(total = Option(f_)))
    def optionalTotal: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
    def year: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getYear)((c_, f_) => c_.copy(year = Option(f_)))
    def optionalYear: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.year)((c_, f_) => c_.copy(year = f_))
    def notes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[payment.Note]] = field(_.notes)((c_, f_) => c_.copy(notes = f_))
    def bills: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.bills)((c_, f_) => c_.copy(bills = f_))
    def paymentMade: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPaymentMade)((c_, f_) => c_.copy(paymentMade = Option(f_)))
    def optionalPaymentMade: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.paymentMade)((c_, f_) => c_.copy(paymentMade = f_))
    def currentSub: _root_.scalapb.lenses.Lens[UpperPB, payment.Subscription] = field(_.getCurrentSub)((c_, f_) => c_.copy(currentSub = Option(f_)))
    def optionalCurrentSub: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Subscription]] = field(_.currentSub)((c_, f_) => c_.copy(currentSub = f_))
    def currentPlan: _root_.scalapb.lenses.Lens[UpperPB, payment.Plan] = field(_.getCurrentPlan)((c_, f_) => c_.copy(currentPlan = Option(f_)))
    def optionalCurrentPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Plan]] = field(_.currentPlan)((c_, f_) => c_.copy(currentPlan = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val AMOUNT_DUE_FIELD_NUMBER = 4
  final val PROMOTION_CODE_FIELD_NUMBER = 5
  final val DESCRIPTION_FIELD_NUMBER = 6
  final val BILLING_INFO_FIELD_NUMBER = 8
  final val DUE_DATE_FIELD_NUMBER = 9
  final val STATE_FIELD_NUMBER = 10
  final val CREATED_FIELD_NUMBER = 11
  final val ITEMS_FIELD_NUMBER = 12
  final val SUBTOTAL_FIELD_NUMBER = 14
  final val TAX_PERCENT_FIELD_NUMBER = 15
  final val TAX_FIELD_NUMBER = 16
  final val TOTAL_FIELD_NUMBER = 17
  final val UPDATED_FIELD_NUMBER = 18
  final val YEAR_FIELD_NUMBER = 19
  final val NOTES_FIELD_NUMBER = 22
  final val BILLS_FIELD_NUMBER = 23
  final val PAYMENT_MADE_FIELD_NUMBER = 24
  final val CURRENT_SUB_FIELD_NUMBER = 25
  final val CURRENT_PLAN_FIELD_NUMBER = 26
}
