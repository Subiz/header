// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** invoice with error
  */
@SerialVersionUID(0L)
final case class EInvoice(
    inv: scala.Option[payment.Invoice] = None,
    err: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[EInvoice] with scalapb.lenses.Updatable[EInvoice] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (inv.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(inv.get.serializedSize) + inv.get.serializedSize }
      if (err.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, err.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      inv.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      err.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.EInvoice = {
      var __inv = this.inv
      var __err = this.err
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __inv = Option(_root_.scalapb.LiteParser.readMessage(_input__, __inv.getOrElse(payment.Invoice.defaultInstance)))
          case 34 =>
            __err = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      payment.EInvoice(
          inv = __inv,
          err = __err
      )
    }
    def getInv: payment.Invoice = inv.getOrElse(payment.Invoice.defaultInstance)
    def clearInv: EInvoice = copy(inv = None)
    def withInv(__v: payment.Invoice): EInvoice = copy(inv = Option(__v))
    def getErr: _root_.scala.Predef.String = err.getOrElse("")
    def clearErr: EInvoice = copy(err = None)
    def withErr(__v: _root_.scala.Predef.String): EInvoice = copy(err = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => inv.orNull
        case 4 => err.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => inv.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => err.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.EInvoice
}

object EInvoice extends scalapb.GeneratedMessageCompanion[payment.EInvoice] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.EInvoice] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.EInvoice = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.EInvoice(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[payment.Invoice]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.EInvoice] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.EInvoice(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[payment.Invoice]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(30)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(30)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = payment.Invoice
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.EInvoice(
  )
  implicit class EInvoiceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.EInvoice]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.EInvoice](_l) {
    def inv: _root_.scalapb.lenses.Lens[UpperPB, payment.Invoice] = field(_.getInv)((c_, f_) => c_.copy(inv = Option(f_)))
    def optionalInv: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Invoice]] = field(_.inv)((c_, f_) => c_.copy(inv = f_))
    def err: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getErr)((c_, f_) => c_.copy(err = Option(f_)))
    def optionalErr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.err)((c_, f_) => c_.copy(err = f_))
  }
  final val INV_FIELD_NUMBER = 3
  final val ERR_FIELD_NUMBER = 4
}
