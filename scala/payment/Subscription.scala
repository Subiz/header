// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** @param dueDate
  *   read-only
  * @param referralBy
  *   account_id
  */
@SerialVersionUID(0L)
final case class Subscription(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    promotionCode: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    started: scala.Option[_root_.scala.Long] = None,
    dueDate: scala.Option[_root_.scala.Long] = None,
    autoRenew: scala.Option[_root_.scala.Boolean] = None,
    billingCycleMonth: scala.Option[_root_.scala.Int] = None,
    nextBillingCycleMonth: scala.Option[_root_.scala.Int] = None,
    plan: scala.Option[_root_.scala.Predef.String] = None,
    addons: _root_.scala.collection.Seq[payment.Addon] = _root_.scala.collection.Seq.empty,
    credit: scala.Option[_root_.scala.Float] = None,
    notes: _root_.scala.collection.Seq[payment.Note] = _root_.scala.collection.Seq.empty,
    referralBy: scala.Option[_root_.scala.Predef.String] = None,
    customer: scala.Option[payment.Customer] = None,
    primaryPaymentMethod: scala.Option[_root_.scala.Predef.String] = None,
    limit: scala.Option[payment.Limit] = None,
    v3State: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Subscription] with scalapb.lenses.Updatable[Subscription] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, created.get) }
      if (promotionCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, promotionCode.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, name.get) }
      if (started.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, started.get) }
      if (dueDate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, dueDate.get) }
      if (autoRenew.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(9, autoRenew.get) }
      if (billingCycleMonth.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(15, billingCycleMonth.get) }
      if (nextBillingCycleMonth.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(16, nextBillingCycleMonth.get) }
      if (plan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, plan.get) }
      addons.foreach(addons => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(addons.serializedSize) + addons.serializedSize)
      if (credit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(27, credit.get) }
      notes.foreach(notes => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(notes.serializedSize) + notes.serializedSize)
      if (referralBy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(29, referralBy.get) }
      if (customer.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(customer.get.serializedSize) + customer.get.serializedSize }
      if (primaryPaymentMethod.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(32, primaryPaymentMethod.get) }
      if (limit.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(limit.get.serializedSize) + limit.get.serializedSize }
      if (v3State.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(43, v3State.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      promotionCode.foreach { __v =>
        _output__.writeString(4, __v)
      };
      started.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      dueDate.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      name.foreach { __v =>
        _output__.writeString(7, __v)
      };
      autoRenew.foreach { __v =>
        _output__.writeBool(9, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      billingCycleMonth.foreach { __v =>
        _output__.writeUInt32(15, __v)
      };
      nextBillingCycleMonth.foreach { __v =>
        _output__.writeUInt32(16, __v)
      };
      plan.foreach { __v =>
        _output__.writeString(17, __v)
      };
      addons.foreach { __v =>
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      credit.foreach { __v =>
        _output__.writeFloat(27, __v)
      };
      notes.foreach { __v =>
        _output__.writeTag(28, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      referralBy.foreach { __v =>
        _output__.writeString(29, __v)
      };
      customer.foreach { __v =>
        _output__.writeTag(31, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      primaryPaymentMethod.foreach { __v =>
        _output__.writeString(32, __v)
      };
      limit.foreach { __v =>
        _output__.writeTag(42, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      v3State.foreach { __v =>
        _output__.writeInt32(43, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Subscription = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __created = this.created
      var __promotionCode = this.promotionCode
      var __name = this.name
      var __started = this.started
      var __dueDate = this.dueDate
      var __autoRenew = this.autoRenew
      var __billingCycleMonth = this.billingCycleMonth
      var __nextBillingCycleMonth = this.nextBillingCycleMonth
      var __plan = this.plan
      val __addons = (_root_.scala.collection.immutable.Vector.newBuilder[payment.Addon] ++= this.addons)
      var __credit = this.credit
      val __notes = (_root_.scala.collection.immutable.Vector.newBuilder[payment.Note] ++= this.notes)
      var __referralBy = this.referralBy
      var __customer = this.customer
      var __primaryPaymentMethod = this.primaryPaymentMethod
      var __limit = this.limit
      var __v3State = this.v3State
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __accountId = Option(_input__.readString())
          case 88 =>
            __created = Option(_input__.readInt64())
          case 34 =>
            __promotionCode = Option(_input__.readString())
          case 58 =>
            __name = Option(_input__.readString())
          case 40 =>
            __started = Option(_input__.readInt64())
          case 48 =>
            __dueDate = Option(_input__.readInt64())
          case 72 =>
            __autoRenew = Option(_input__.readBool())
          case 120 =>
            __billingCycleMonth = Option(_input__.readUInt32())
          case 128 =>
            __nextBillingCycleMonth = Option(_input__.readUInt32())
          case 138 =>
            __plan = Option(_input__.readString())
          case 170 =>
            __addons += _root_.scalapb.LiteParser.readMessage(_input__, payment.Addon.defaultInstance)
          case 221 =>
            __credit = Option(_input__.readFloat())
          case 226 =>
            __notes += _root_.scalapb.LiteParser.readMessage(_input__, payment.Note.defaultInstance)
          case 234 =>
            __referralBy = Option(_input__.readString())
          case 250 =>
            __customer = Option(_root_.scalapb.LiteParser.readMessage(_input__, __customer.getOrElse(payment.Customer.defaultInstance)))
          case 258 =>
            __primaryPaymentMethod = Option(_input__.readString())
          case 338 =>
            __limit = Option(_root_.scalapb.LiteParser.readMessage(_input__, __limit.getOrElse(payment.Limit.defaultInstance)))
          case 344 =>
            __v3State = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Subscription(
          ctx = __ctx,
          accountId = __accountId,
          created = __created,
          promotionCode = __promotionCode,
          name = __name,
          started = __started,
          dueDate = __dueDate,
          autoRenew = __autoRenew,
          billingCycleMonth = __billingCycleMonth,
          nextBillingCycleMonth = __nextBillingCycleMonth,
          plan = __plan,
          addons = __addons.result(),
          credit = __credit,
          notes = __notes.result(),
          referralBy = __referralBy,
          customer = __customer,
          primaryPaymentMethod = __primaryPaymentMethod,
          limit = __limit,
          v3State = __v3State
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Subscription = copy(ctx = None)
    def withCtx(__v: common.Context): Subscription = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Subscription = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Subscription = copy(accountId = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Subscription = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Subscription = copy(created = Option(__v))
    def getPromotionCode: _root_.scala.Predef.String = promotionCode.getOrElse("")
    def clearPromotionCode: Subscription = copy(promotionCode = None)
    def withPromotionCode(__v: _root_.scala.Predef.String): Subscription = copy(promotionCode = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Subscription = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Subscription = copy(name = Option(__v))
    def getStarted: _root_.scala.Long = started.getOrElse(0L)
    def clearStarted: Subscription = copy(started = None)
    def withStarted(__v: _root_.scala.Long): Subscription = copy(started = Option(__v))
    def getDueDate: _root_.scala.Long = dueDate.getOrElse(0L)
    def clearDueDate: Subscription = copy(dueDate = None)
    def withDueDate(__v: _root_.scala.Long): Subscription = copy(dueDate = Option(__v))
    def getAutoRenew: _root_.scala.Boolean = autoRenew.getOrElse(false)
    def clearAutoRenew: Subscription = copy(autoRenew = None)
    def withAutoRenew(__v: _root_.scala.Boolean): Subscription = copy(autoRenew = Option(__v))
    def getBillingCycleMonth: _root_.scala.Int = billingCycleMonth.getOrElse(0)
    def clearBillingCycleMonth: Subscription = copy(billingCycleMonth = None)
    def withBillingCycleMonth(__v: _root_.scala.Int): Subscription = copy(billingCycleMonth = Option(__v))
    def getNextBillingCycleMonth: _root_.scala.Int = nextBillingCycleMonth.getOrElse(0)
    def clearNextBillingCycleMonth: Subscription = copy(nextBillingCycleMonth = None)
    def withNextBillingCycleMonth(__v: _root_.scala.Int): Subscription = copy(nextBillingCycleMonth = Option(__v))
    def getPlan: _root_.scala.Predef.String = plan.getOrElse("")
    def clearPlan: Subscription = copy(plan = None)
    def withPlan(__v: _root_.scala.Predef.String): Subscription = copy(plan = Option(__v))
    def clearAddons = copy(addons = _root_.scala.collection.Seq.empty)
    def addAddons(__vs: payment.Addon*): Subscription = addAllAddons(__vs)
    def addAllAddons(__vs: TraversableOnce[payment.Addon]): Subscription = copy(addons = addons ++ __vs)
    def withAddons(__v: _root_.scala.collection.Seq[payment.Addon]): Subscription = copy(addons = __v)
    def getCredit: _root_.scala.Float = credit.getOrElse(0.0f)
    def clearCredit: Subscription = copy(credit = None)
    def withCredit(__v: _root_.scala.Float): Subscription = copy(credit = Option(__v))
    def clearNotes = copy(notes = _root_.scala.collection.Seq.empty)
    def addNotes(__vs: payment.Note*): Subscription = addAllNotes(__vs)
    def addAllNotes(__vs: TraversableOnce[payment.Note]): Subscription = copy(notes = notes ++ __vs)
    def withNotes(__v: _root_.scala.collection.Seq[payment.Note]): Subscription = copy(notes = __v)
    def getReferralBy: _root_.scala.Predef.String = referralBy.getOrElse("")
    def clearReferralBy: Subscription = copy(referralBy = None)
    def withReferralBy(__v: _root_.scala.Predef.String): Subscription = copy(referralBy = Option(__v))
    def getCustomer: payment.Customer = customer.getOrElse(payment.Customer.defaultInstance)
    def clearCustomer: Subscription = copy(customer = None)
    def withCustomer(__v: payment.Customer): Subscription = copy(customer = Option(__v))
    def getPrimaryPaymentMethod: _root_.scala.Predef.String = primaryPaymentMethod.getOrElse("")
    def clearPrimaryPaymentMethod: Subscription = copy(primaryPaymentMethod = None)
    def withPrimaryPaymentMethod(__v: _root_.scala.Predef.String): Subscription = copy(primaryPaymentMethod = Option(__v))
    def getLimit: payment.Limit = limit.getOrElse(payment.Limit.defaultInstance)
    def clearLimit: Subscription = copy(limit = None)
    def withLimit(__v: payment.Limit): Subscription = copy(limit = Option(__v))
    def getV3State: _root_.scala.Int = v3State.getOrElse(0)
    def clearV3State: Subscription = copy(v3State = None)
    def withV3State(__v: _root_.scala.Int): Subscription = copy(v3State = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => accountId.orNull
        case 11 => created.orNull
        case 4 => promotionCode.orNull
        case 7 => name.orNull
        case 5 => started.orNull
        case 6 => dueDate.orNull
        case 9 => autoRenew.orNull
        case 15 => billingCycleMonth.orNull
        case 16 => nextBillingCycleMonth.orNull
        case 17 => plan.orNull
        case 21 => addons
        case 27 => credit.orNull
        case 28 => notes
        case 29 => referralBy.orNull
        case 31 => customer.orNull
        case 32 => primaryPaymentMethod.orNull
        case 42 => limit.orNull
        case 43 => v3State.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => promotionCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => started.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => dueDate.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => autoRenew.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => billingCycleMonth.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => nextBillingCycleMonth.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => plan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => _root_.scalapb.descriptors.PRepeated(addons.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 27 => credit.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => _root_.scalapb.descriptors.PRepeated(notes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 29 => referralBy.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 31 => customer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 32 => primaryPaymentMethod.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 42 => limit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 43 => v3State.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Subscription
}

object Subscription extends scalapb.GeneratedMessageCompanion[payment.Subscription] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Subscription] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Subscription = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Subscription(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(11), Nil).asInstanceOf[_root_.scala.collection.Seq[payment.Addon]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.getOrElse(__fields.get(13), Nil).asInstanceOf[_root_.scala.collection.Seq[payment.Note]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[payment.Customer]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[payment.Limit]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Subscription] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Subscription(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).map(_.as[_root_.scala.collection.Seq[payment.Addon]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).map(_.as[_root_.scala.collection.Seq[payment.Note]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[payment.Customer]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[scala.Option[payment.Limit]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 21 => __out = payment.Addon
      case 28 => __out = payment.Note
      case 31 => __out = payment.Customer
      case 42 => __out = payment.Limit
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Subscription(
  )
  implicit class SubscriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Subscription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Subscription](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def promotionCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPromotionCode)((c_, f_) => c_.copy(promotionCode = Option(f_)))
    def optionalPromotionCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.promotionCode)((c_, f_) => c_.copy(promotionCode = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def started: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStarted)((c_, f_) => c_.copy(started = Option(f_)))
    def optionalStarted: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.started)((c_, f_) => c_.copy(started = f_))
    def dueDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getDueDate)((c_, f_) => c_.copy(dueDate = Option(f_)))
    def optionalDueDate: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.dueDate)((c_, f_) => c_.copy(dueDate = f_))
    def autoRenew: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getAutoRenew)((c_, f_) => c_.copy(autoRenew = Option(f_)))
    def optionalAutoRenew: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.autoRenew)((c_, f_) => c_.copy(autoRenew = f_))
    def billingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getBillingCycleMonth)((c_, f_) => c_.copy(billingCycleMonth = Option(f_)))
    def optionalBillingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.billingCycleMonth)((c_, f_) => c_.copy(billingCycleMonth = f_))
    def nextBillingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getNextBillingCycleMonth)((c_, f_) => c_.copy(nextBillingCycleMonth = Option(f_)))
    def optionalNextBillingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.nextBillingCycleMonth)((c_, f_) => c_.copy(nextBillingCycleMonth = f_))
    def plan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPlan)((c_, f_) => c_.copy(plan = Option(f_)))
    def optionalPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.plan)((c_, f_) => c_.copy(plan = f_))
    def addons: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[payment.Addon]] = field(_.addons)((c_, f_) => c_.copy(addons = f_))
    def credit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getCredit)((c_, f_) => c_.copy(credit = Option(f_)))
    def optionalCredit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.credit)((c_, f_) => c_.copy(credit = f_))
    def notes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[payment.Note]] = field(_.notes)((c_, f_) => c_.copy(notes = f_))
    def referralBy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getReferralBy)((c_, f_) => c_.copy(referralBy = Option(f_)))
    def optionalReferralBy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.referralBy)((c_, f_) => c_.copy(referralBy = f_))
    def customer: _root_.scalapb.lenses.Lens[UpperPB, payment.Customer] = field(_.getCustomer)((c_, f_) => c_.copy(customer = Option(f_)))
    def optionalCustomer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Customer]] = field(_.customer)((c_, f_) => c_.copy(customer = f_))
    def primaryPaymentMethod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPrimaryPaymentMethod)((c_, f_) => c_.copy(primaryPaymentMethod = Option(f_)))
    def optionalPrimaryPaymentMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.primaryPaymentMethod)((c_, f_) => c_.copy(primaryPaymentMethod = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, payment.Limit] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Limit]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def v3State: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getV3State)((c_, f_) => c_.copy(v3State = Option(f_)))
    def optionalV3State: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.v3State)((c_, f_) => c_.copy(v3State = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CREATED_FIELD_NUMBER = 11
  final val PROMOTION_CODE_FIELD_NUMBER = 4
  final val NAME_FIELD_NUMBER = 7
  final val STARTED_FIELD_NUMBER = 5
  final val DUE_DATE_FIELD_NUMBER = 6
  final val AUTO_RENEW_FIELD_NUMBER = 9
  final val BILLING_CYCLE_MONTH_FIELD_NUMBER = 15
  final val NEXT_BILLING_CYCLE_MONTH_FIELD_NUMBER = 16
  final val PLAN_FIELD_NUMBER = 17
  final val ADDONS_FIELD_NUMBER = 21
  final val CREDIT_FIELD_NUMBER = 27
  final val NOTES_FIELD_NUMBER = 28
  final val REFERRAL_BY_FIELD_NUMBER = 29
  final val CUSTOMER_FIELD_NUMBER = 31
  final val PRIMARY_PAYMENT_METHOD_FIELD_NUMBER = 32
  final val LIMIT_FIELD_NUMBER = 42
  final val V3_STATE_FIELD_NUMBER = 43
}
