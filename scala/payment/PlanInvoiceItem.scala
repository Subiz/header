// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class PlanInvoiceItem(
    agentCount: scala.Option[_root_.scala.Int] = None,
    billingCycleMonth: scala.Option[_root_.scala.Int] = None,
    oldPlan: scala.Option[_root_.scala.Predef.String] = None,
    newPlan: scala.Option[_root_.scala.Predef.String] = None,
    savePercentage: scala.Option[_root_.scala.Float] = None,
    started: scala.Option[_root_.scala.Long] = None,
    dayLeft: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PlanInvoiceItem] with scalapb.lenses.Updatable[PlanInvoiceItem] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (agentCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, agentCount.get) }
      if (billingCycleMonth.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, billingCycleMonth.get) }
      if (oldPlan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, oldPlan.get) }
      if (newPlan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, newPlan.get) }
      if (savePercentage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(9, savePercentage.get) }
      if (started.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, started.get) }
      if (dayLeft.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, dayLeft.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      agentCount.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      newPlan.foreach { __v =>
        _output__.writeString(3, __v)
      };
      dayLeft.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      billingCycleMonth.foreach { __v =>
        _output__.writeUInt32(5, __v)
      };
      oldPlan.foreach { __v =>
        _output__.writeString(6, __v)
      };
      started.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      savePercentage.foreach { __v =>
        _output__.writeFloat(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.PlanInvoiceItem = {
      var __agentCount = this.agentCount
      var __billingCycleMonth = this.billingCycleMonth
      var __oldPlan = this.oldPlan
      var __newPlan = this.newPlan
      var __savePercentage = this.savePercentage
      var __started = this.started
      var __dayLeft = this.dayLeft
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 16 =>
            __agentCount = Option(_input__.readUInt32())
          case 40 =>
            __billingCycleMonth = Option(_input__.readUInt32())
          case 50 =>
            __oldPlan = Option(_input__.readString())
          case 26 =>
            __newPlan = Option(_input__.readString())
          case 77 =>
            __savePercentage = Option(_input__.readFloat())
          case 64 =>
            __started = Option(_input__.readInt64())
          case 32 =>
            __dayLeft = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      payment.PlanInvoiceItem(
          agentCount = __agentCount,
          billingCycleMonth = __billingCycleMonth,
          oldPlan = __oldPlan,
          newPlan = __newPlan,
          savePercentage = __savePercentage,
          started = __started,
          dayLeft = __dayLeft
      )
    }
    def getAgentCount: _root_.scala.Int = agentCount.getOrElse(0)
    def clearAgentCount: PlanInvoiceItem = copy(agentCount = None)
    def withAgentCount(__v: _root_.scala.Int): PlanInvoiceItem = copy(agentCount = Option(__v))
    def getBillingCycleMonth: _root_.scala.Int = billingCycleMonth.getOrElse(0)
    def clearBillingCycleMonth: PlanInvoiceItem = copy(billingCycleMonth = None)
    def withBillingCycleMonth(__v: _root_.scala.Int): PlanInvoiceItem = copy(billingCycleMonth = Option(__v))
    def getOldPlan: _root_.scala.Predef.String = oldPlan.getOrElse("")
    def clearOldPlan: PlanInvoiceItem = copy(oldPlan = None)
    def withOldPlan(__v: _root_.scala.Predef.String): PlanInvoiceItem = copy(oldPlan = Option(__v))
    def getNewPlan: _root_.scala.Predef.String = newPlan.getOrElse("")
    def clearNewPlan: PlanInvoiceItem = copy(newPlan = None)
    def withNewPlan(__v: _root_.scala.Predef.String): PlanInvoiceItem = copy(newPlan = Option(__v))
    def getSavePercentage: _root_.scala.Float = savePercentage.getOrElse(0.0f)
    def clearSavePercentage: PlanInvoiceItem = copy(savePercentage = None)
    def withSavePercentage(__v: _root_.scala.Float): PlanInvoiceItem = copy(savePercentage = Option(__v))
    def getStarted: _root_.scala.Long = started.getOrElse(0L)
    def clearStarted: PlanInvoiceItem = copy(started = None)
    def withStarted(__v: _root_.scala.Long): PlanInvoiceItem = copy(started = Option(__v))
    def getDayLeft: _root_.scala.Int = dayLeft.getOrElse(0)
    def clearDayLeft: PlanInvoiceItem = copy(dayLeft = None)
    def withDayLeft(__v: _root_.scala.Int): PlanInvoiceItem = copy(dayLeft = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => agentCount.orNull
        case 5 => billingCycleMonth.orNull
        case 6 => oldPlan.orNull
        case 3 => newPlan.orNull
        case 9 => savePercentage.orNull
        case 8 => started.orNull
        case 4 => dayLeft.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => agentCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => billingCycleMonth.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => oldPlan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => newPlan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => savePercentage.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => started.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => dayLeft.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.PlanInvoiceItem
}

object PlanInvoiceItem extends scalapb.GeneratedMessageCompanion[payment.PlanInvoiceItem] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.PlanInvoiceItem] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.PlanInvoiceItem = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.PlanInvoiceItem(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.PlanInvoiceItem] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.PlanInvoiceItem(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.PlanInvoiceItem(
  )
  implicit class PlanInvoiceItemLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.PlanInvoiceItem]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.PlanInvoiceItem](_l) {
    def agentCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAgentCount)((c_, f_) => c_.copy(agentCount = Option(f_)))
    def optionalAgentCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.agentCount)((c_, f_) => c_.copy(agentCount = f_))
    def billingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getBillingCycleMonth)((c_, f_) => c_.copy(billingCycleMonth = Option(f_)))
    def optionalBillingCycleMonth: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.billingCycleMonth)((c_, f_) => c_.copy(billingCycleMonth = f_))
    def oldPlan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getOldPlan)((c_, f_) => c_.copy(oldPlan = Option(f_)))
    def optionalOldPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.oldPlan)((c_, f_) => c_.copy(oldPlan = f_))
    def newPlan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getNewPlan)((c_, f_) => c_.copy(newPlan = Option(f_)))
    def optionalNewPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.newPlan)((c_, f_) => c_.copy(newPlan = f_))
    def savePercentage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSavePercentage)((c_, f_) => c_.copy(savePercentage = Option(f_)))
    def optionalSavePercentage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.savePercentage)((c_, f_) => c_.copy(savePercentage = f_))
    def started: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStarted)((c_, f_) => c_.copy(started = Option(f_)))
    def optionalStarted: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.started)((c_, f_) => c_.copy(started = f_))
    def dayLeft: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDayLeft)((c_, f_) => c_.copy(dayLeft = Option(f_)))
    def optionalDayLeft: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.dayLeft)((c_, f_) => c_.copy(dayLeft = f_))
  }
  final val AGENT_COUNT_FIELD_NUMBER = 2
  final val BILLING_CYCLE_MONTH_FIELD_NUMBER = 5
  final val OLD_PLAN_FIELD_NUMBER = 6
  final val NEW_PLAN_FIELD_NUMBER = 3
  final val SAVE_PERCENTAGE_FIELD_NUMBER = 9
  final val STARTED_FIELD_NUMBER = 8
  final val DAY_LEFT_FIELD_NUMBER = 4
}
