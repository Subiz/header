// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Log(
    ctx: scala.Option[common.Context] = None,
    user: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    action: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    description: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    month: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Log] with scalapb.lenses.Updatable[Log] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (user.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, user.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, id.get) }
      if (action.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, action.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, created.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, description.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, accountId.get) }
      if (month.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, month.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      user.foreach { __v =>
        _output__.writeString(2, __v)
      };
      action.foreach { __v =>
        _output__.writeString(3, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      description.foreach { __v =>
        _output__.writeString(5, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      month.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      id.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Log = {
      var __ctx = this.ctx
      var __user = this.user
      var __id = this.id
      var __action = this.action
      var __created = this.created
      var __description = this.description
      var __accountId = this.accountId
      var __month = this.month
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __user = Option(_input__.readString())
          case 66 =>
            __id = Option(_input__.readString())
          case 26 =>
            __action = Option(_input__.readString())
          case 32 =>
            __created = Option(_input__.readInt64())
          case 42 =>
            __description = Option(_input__.readString())
          case 50 =>
            __accountId = Option(_input__.readString())
          case 56 =>
            __month = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Log(
          ctx = __ctx,
          user = __user,
          id = __id,
          action = __action,
          created = __created,
          description = __description,
          accountId = __accountId,
          month = __month
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Log = copy(ctx = None)
    def withCtx(__v: common.Context): Log = copy(ctx = Option(__v))
    def getUser: _root_.scala.Predef.String = user.getOrElse("")
    def clearUser: Log = copy(user = None)
    def withUser(__v: _root_.scala.Predef.String): Log = copy(user = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Log = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Log = copy(id = Option(__v))
    def getAction: _root_.scala.Predef.String = action.getOrElse("")
    def clearAction: Log = copy(action = None)
    def withAction(__v: _root_.scala.Predef.String): Log = copy(action = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Log = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Log = copy(created = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: Log = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): Log = copy(description = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Log = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Log = copy(accountId = Option(__v))
    def getMonth: _root_.scala.Int = month.getOrElse(0)
    def clearMonth: Log = copy(month = None)
    def withMonth(__v: _root_.scala.Int): Log = copy(month = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => user.orNull
        case 8 => id.orNull
        case 3 => action.orNull
        case 4 => created.orNull
        case 5 => description.orNull
        case 6 => accountId.orNull
        case 7 => month.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => user.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => action.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => month.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Log
}

object Log extends scalapb.GeneratedMessageCompanion[payment.Log] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Log] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Log = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Log(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Log] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Log(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Log(
  )
  sealed trait Action extends _root_.scalapb.GeneratedEnum {
    type EnumType = Action
    def iscreateinvoice: _root_.scala.Boolean = false
    def ischangeinvoicestatus: _root_.scala.Boolean = false
    def iscreatediscount: _root_.scala.Boolean = false
    def isdeletediscount: _root_.scala.Boolean = false
    def isredeemdiscount: _root_.scala.Boolean = false
    def isaddcredit: _root_.scala.Boolean = false
    def isredeemcredit: _root_.scala.Boolean = false
    def isdeleteaccount: _root_.scala.Boolean = false
    def ischangeplan: _root_.scala.Boolean = false
    def isrenewsubscription: _root_.scala.Boolean = false
    def isclicksubscribebutton: _root_.scala.Boolean = false
    def ispayforreferrer: _root_.scala.Boolean = false
    def isaddmoneyforreferrer: _root_.scala.Boolean = false
    def ispayinvoice: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Action] = payment.Log.Action
  }
  
  object Action extends _root_.scalapb.GeneratedEnumCompanion[Action] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Action] = this
    @SerialVersionUID(0L)
    case object create_invoice extends Action {
      val value = 0
      val index = 0
      val name = "create_invoice"
      override def iscreateinvoice: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object change_invoice_status extends Action {
      val value = 1
      val index = 1
      val name = "change_invoice_status"
      override def ischangeinvoicestatus: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object create_discount extends Action {
      val value = 2
      val index = 2
      val name = "create_discount"
      override def iscreatediscount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object delete_discount extends Action {
      val value = 3
      val index = 3
      val name = "delete_discount"
      override def isdeletediscount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object redeem_discount extends Action {
      val value = 4
      val index = 4
      val name = "redeem_discount"
      override def isredeemdiscount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object add_credit extends Action {
      val value = 5
      val index = 5
      val name = "add_credit"
      override def isaddcredit: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object redeem_credit extends Action {
      val value = 6
      val index = 6
      val name = "redeem_credit"
      override def isredeemcredit: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object delete_account extends Action {
      val value = 7
      val index = 7
      val name = "delete_account"
      override def isdeleteaccount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object change_plan extends Action {
      val value = 8
      val index = 8
      val name = "change_plan"
      override def ischangeplan: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object renew_subscription extends Action {
      val value = 10
      val index = 9
      val name = "renew_subscription"
      override def isrenewsubscription: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object click_subscribe_button extends Action {
      val value = 11
      val index = 10
      val name = "click_subscribe_button"
      override def isclicksubscribebutton: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object pay_for_referrer extends Action {
      val value = 12
      val index = 11
      val name = "pay_for_referrer"
      override def ispayforreferrer: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object add_money_for_referrer extends Action {
      val value = 13
      val index = 12
      val name = "add_money_for_referrer"
      override def isaddmoneyforreferrer: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object pay_invoice extends Action {
      val value = 14
      val index = 13
      val name = "pay_invoice"
      override def ispayinvoice: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Action with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(create_invoice, change_invoice_status, create_discount, delete_discount, redeem_discount, add_credit, redeem_credit, delete_account, change_plan, renew_subscription, click_subscribe_button, pay_for_referrer, add_money_for_referrer, pay_invoice)
    def fromValue(value: _root_.scala.Int): Action = value match {
      case 0 => create_invoice
      case 1 => change_invoice_status
      case 2 => create_discount
      case 3 => delete_discount
      case 4 => redeem_discount
      case 5 => add_credit
      case 6 => redeem_credit
      case 7 => delete_account
      case 8 => change_plan
      case 10 => renew_subscription
      case 11 => click_subscribe_button
      case 12 => pay_for_referrer
      case 13 => add_money_for_referrer
      case 14 => pay_invoice
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Log.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Log.scalaDescriptor.enums(0)
  }
  implicit class LogLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Log]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Log](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def action: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAction)((c_, f_) => c_.copy(action = Option(f_)))
    def optionalAction: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.action)((c_, f_) => c_.copy(action = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def month: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMonth)((c_, f_) => c_.copy(month = Option(f_)))
    def optionalMonth: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.month)((c_, f_) => c_.copy(month = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val USER_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 8
  final val ACTION_FIELD_NUMBER = 3
  final val CREATED_FIELD_NUMBER = 4
  final val DESCRIPTION_FIELD_NUMBER = 5
  final val ACCOUNT_ID_FIELD_NUMBER = 6
  final val MONTH_FIELD_NUMBER = 7
}
