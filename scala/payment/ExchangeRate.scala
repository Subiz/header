// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** @param exchangeTime
  *   nanosec
  */
@SerialVersionUID(0L)
final case class ExchangeRate(
    fromCurrency: scala.Option[_root_.scala.Predef.String] = None,
    toCurrency: scala.Option[_root_.scala.Predef.String] = None,
    exchangeRate: scala.Option[_root_.scala.Float] = None,
    exchangeTime: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExchangeRate] with scalapb.lenses.Updatable[ExchangeRate] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (fromCurrency.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, fromCurrency.get) }
      if (toCurrency.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, toCurrency.get) }
      if (exchangeRate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, exchangeRate.get) }
      if (exchangeTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, exchangeTime.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      fromCurrency.foreach { __v =>
        _output__.writeString(2, __v)
      };
      toCurrency.foreach { __v =>
        _output__.writeString(3, __v)
      };
      exchangeRate.foreach { __v =>
        _output__.writeFloat(4, __v)
      };
      exchangeTime.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.ExchangeRate = {
      var __fromCurrency = this.fromCurrency
      var __toCurrency = this.toCurrency
      var __exchangeRate = this.exchangeRate
      var __exchangeTime = this.exchangeTime
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __fromCurrency = Option(_input__.readString())
          case 26 =>
            __toCurrency = Option(_input__.readString())
          case 37 =>
            __exchangeRate = Option(_input__.readFloat())
          case 40 =>
            __exchangeTime = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      payment.ExchangeRate(
          fromCurrency = __fromCurrency,
          toCurrency = __toCurrency,
          exchangeRate = __exchangeRate,
          exchangeTime = __exchangeTime
      )
    }
    def getFromCurrency: _root_.scala.Predef.String = fromCurrency.getOrElse("")
    def clearFromCurrency: ExchangeRate = copy(fromCurrency = None)
    def withFromCurrency(__v: _root_.scala.Predef.String): ExchangeRate = copy(fromCurrency = Option(__v))
    def getToCurrency: _root_.scala.Predef.String = toCurrency.getOrElse("")
    def clearToCurrency: ExchangeRate = copy(toCurrency = None)
    def withToCurrency(__v: _root_.scala.Predef.String): ExchangeRate = copy(toCurrency = Option(__v))
    def getExchangeRate: _root_.scala.Float = exchangeRate.getOrElse(0.0f)
    def clearExchangeRate: ExchangeRate = copy(exchangeRate = None)
    def withExchangeRate(__v: _root_.scala.Float): ExchangeRate = copy(exchangeRate = Option(__v))
    def getExchangeTime: _root_.scala.Long = exchangeTime.getOrElse(0L)
    def clearExchangeTime: ExchangeRate = copy(exchangeTime = None)
    def withExchangeTime(__v: _root_.scala.Long): ExchangeRate = copy(exchangeTime = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => fromCurrency.orNull
        case 3 => toCurrency.orNull
        case 4 => exchangeRate.orNull
        case 5 => exchangeTime.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => fromCurrency.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => toCurrency.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => exchangeRate.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => exchangeTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.ExchangeRate
}

object ExchangeRate extends scalapb.GeneratedMessageCompanion[payment.ExchangeRate] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.ExchangeRate] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.ExchangeRate = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.ExchangeRate(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.ExchangeRate] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.ExchangeRate(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.ExchangeRate(
  )
  implicit class ExchangeRateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.ExchangeRate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.ExchangeRate](_l) {
    def fromCurrency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFromCurrency)((c_, f_) => c_.copy(fromCurrency = Option(f_)))
    def optionalFromCurrency: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fromCurrency)((c_, f_) => c_.copy(fromCurrency = f_))
    def toCurrency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getToCurrency)((c_, f_) => c_.copy(toCurrency = Option(f_)))
    def optionalToCurrency: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.toCurrency)((c_, f_) => c_.copy(toCurrency = f_))
    def exchangeRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getExchangeRate)((c_, f_) => c_.copy(exchangeRate = Option(f_)))
    def optionalExchangeRate: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.exchangeRate)((c_, f_) => c_.copy(exchangeRate = f_))
    def exchangeTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getExchangeTime)((c_, f_) => c_.copy(exchangeTime = Option(f_)))
    def optionalExchangeTime: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.exchangeTime)((c_, f_) => c_.copy(exchangeTime = f_))
  }
  final val FROM_CURRENCY_FIELD_NUMBER = 2
  final val TO_CURRENCY_FIELD_NUMBER = 3
  final val EXCHANGE_RATE_FIELD_NUMBER = 4
  final val EXCHANGE_TIME_FIELD_NUMBER = 5
}
