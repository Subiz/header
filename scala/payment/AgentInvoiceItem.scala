// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class AgentInvoiceItem(
    plan: scala.Option[_root_.scala.Predef.String] = None,
    dayLeft: scala.Option[_root_.scala.Int] = None,
    agentCount: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AgentInvoiceItem] with scalapb.lenses.Updatable[AgentInvoiceItem] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (plan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, plan.get) }
      if (dayLeft.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, dayLeft.get) }
      if (agentCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, agentCount.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      plan.foreach { __v =>
        _output__.writeString(3, __v)
      };
      dayLeft.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      agentCount.foreach { __v =>
        _output__.writeInt32(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.AgentInvoiceItem = {
      var __plan = this.plan
      var __dayLeft = this.dayLeft
      var __agentCount = this.agentCount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __plan = Option(_input__.readString())
          case 32 =>
            __dayLeft = Option(_input__.readInt32())
          case 64 =>
            __agentCount = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      payment.AgentInvoiceItem(
          plan = __plan,
          dayLeft = __dayLeft,
          agentCount = __agentCount
      )
    }
    def getPlan: _root_.scala.Predef.String = plan.getOrElse("")
    def clearPlan: AgentInvoiceItem = copy(plan = None)
    def withPlan(__v: _root_.scala.Predef.String): AgentInvoiceItem = copy(plan = Option(__v))
    def getDayLeft: _root_.scala.Int = dayLeft.getOrElse(0)
    def clearDayLeft: AgentInvoiceItem = copy(dayLeft = None)
    def withDayLeft(__v: _root_.scala.Int): AgentInvoiceItem = copy(dayLeft = Option(__v))
    def getAgentCount: _root_.scala.Int = agentCount.getOrElse(0)
    def clearAgentCount: AgentInvoiceItem = copy(agentCount = None)
    def withAgentCount(__v: _root_.scala.Int): AgentInvoiceItem = copy(agentCount = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => plan.orNull
        case 4 => dayLeft.orNull
        case 8 => agentCount.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => plan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => dayLeft.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => agentCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.AgentInvoiceItem
}

object AgentInvoiceItem extends scalapb.GeneratedMessageCompanion[payment.AgentInvoiceItem] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.AgentInvoiceItem] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.AgentInvoiceItem = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.AgentInvoiceItem(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.AgentInvoiceItem] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.AgentInvoiceItem(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.AgentInvoiceItem(
  )
  implicit class AgentInvoiceItemLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.AgentInvoiceItem]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.AgentInvoiceItem](_l) {
    def plan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPlan)((c_, f_) => c_.copy(plan = Option(f_)))
    def optionalPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.plan)((c_, f_) => c_.copy(plan = f_))
    def dayLeft: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDayLeft)((c_, f_) => c_.copy(dayLeft = Option(f_)))
    def optionalDayLeft: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.dayLeft)((c_, f_) => c_.copy(dayLeft = f_))
    def agentCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAgentCount)((c_, f_) => c_.copy(agentCount = Option(f_)))
    def optionalAgentCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.agentCount)((c_, f_) => c_.copy(agentCount = f_))
  }
  final val PLAN_FIELD_NUMBER = 3
  final val DAY_LEFT_FIELD_NUMBER = 4
  final val AGENT_COUNT_FIELD_NUMBER = 8
}
