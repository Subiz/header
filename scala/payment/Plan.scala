// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** @param price
  *   usd
  */
@SerialVersionUID(0L)
final case class Plan(
    name: scala.Option[_root_.scala.Predef.String] = None,
    limit: scala.Option[payment.Limit] = None,
    price: scala.Option[_root_.scala.Float] = None,
    level: scala.Option[_root_.scala.Int] = None,
    canBuyAgent: scala.Option[_root_.scala.Boolean] = None,
    canBuy: scala.Option[_root_.scala.Boolean] = None,
    hasStartTime: scala.Option[_root_.scala.Boolean] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Plan] with scalapb.lenses.Updatable[Plan] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (limit.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(limit.get.serializedSize) + limit.get.serializedSize }
      if (price.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, price.get) }
      if (level.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(14, level.get) }
      if (canBuyAgent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(15, canBuyAgent.get) }
      if (canBuy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(16, canBuy.get) }
      if (hasStartTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(17, hasStartTime.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      limit.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      price.foreach { __v =>
        _output__.writeFloat(4, __v)
      };
      level.foreach { __v =>
        _output__.writeUInt32(14, __v)
      };
      canBuyAgent.foreach { __v =>
        _output__.writeBool(15, __v)
      };
      canBuy.foreach { __v =>
        _output__.writeBool(16, __v)
      };
      hasStartTime.foreach { __v =>
        _output__.writeBool(17, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Plan = {
      var __name = this.name
      var __limit = this.limit
      var __price = this.price
      var __level = this.level
      var __canBuyAgent = this.canBuyAgent
      var __canBuy = this.canBuy
      var __hasStartTime = this.hasStartTime
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __name = Option(_input__.readString())
          case 26 =>
            __limit = Option(_root_.scalapb.LiteParser.readMessage(_input__, __limit.getOrElse(payment.Limit.defaultInstance)))
          case 37 =>
            __price = Option(_input__.readFloat())
          case 112 =>
            __level = Option(_input__.readUInt32())
          case 120 =>
            __canBuyAgent = Option(_input__.readBool())
          case 128 =>
            __canBuy = Option(_input__.readBool())
          case 136 =>
            __hasStartTime = Option(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Plan(
          name = __name,
          limit = __limit,
          price = __price,
          level = __level,
          canBuyAgent = __canBuyAgent,
          canBuy = __canBuy,
          hasStartTime = __hasStartTime
      )
    }
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Plan = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Plan = copy(name = Option(__v))
    def getLimit: payment.Limit = limit.getOrElse(payment.Limit.defaultInstance)
    def clearLimit: Plan = copy(limit = None)
    def withLimit(__v: payment.Limit): Plan = copy(limit = Option(__v))
    def getPrice: _root_.scala.Float = price.getOrElse(0.0f)
    def clearPrice: Plan = copy(price = None)
    def withPrice(__v: _root_.scala.Float): Plan = copy(price = Option(__v))
    def getLevel: _root_.scala.Int = level.getOrElse(0)
    def clearLevel: Plan = copy(level = None)
    def withLevel(__v: _root_.scala.Int): Plan = copy(level = Option(__v))
    def getCanBuyAgent: _root_.scala.Boolean = canBuyAgent.getOrElse(false)
    def clearCanBuyAgent: Plan = copy(canBuyAgent = None)
    def withCanBuyAgent(__v: _root_.scala.Boolean): Plan = copy(canBuyAgent = Option(__v))
    def getCanBuy: _root_.scala.Boolean = canBuy.getOrElse(false)
    def clearCanBuy: Plan = copy(canBuy = None)
    def withCanBuy(__v: _root_.scala.Boolean): Plan = copy(canBuy = Option(__v))
    def getHasStartTime: _root_.scala.Boolean = hasStartTime.getOrElse(false)
    def clearHasStartTime: Plan = copy(hasStartTime = None)
    def withHasStartTime(__v: _root_.scala.Boolean): Plan = copy(hasStartTime = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => name.orNull
        case 3 => limit.orNull
        case 4 => price.orNull
        case 14 => level.orNull
        case 15 => canBuyAgent.orNull
        case 16 => canBuy.orNull
        case 17 => hasStartTime.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => limit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => price.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => level.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => canBuyAgent.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => canBuy.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => hasStartTime.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Plan
}

object Plan extends scalapb.GeneratedMessageCompanion[payment.Plan] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Plan] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Plan = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Plan(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[payment.Limit]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Plan] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Plan(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[payment.Limit]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = payment.Limit
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Plan(
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def istrial: _root_.scala.Boolean = false
    def isfree: _root_.scala.Boolean = false
    def isstandard: _root_.scala.Boolean = false
    def isadvanced: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = payment.Plan.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object trial extends Type {
      val value = 0
      val index = 0
      val name = "trial"
      override def istrial: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object free extends Type {
      val value = 1
      val index = 1
      val name = "free"
      override def isfree: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object standard extends Type {
      val value = 2
      val index = 2
      val name = "standard"
      override def isstandard: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object advanced extends Type {
      val value = 3
      val index = 3
      val name = "advanced"
      override def isadvanced: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(trial, free, standard, advanced)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => trial
      case 1 => free
      case 2 => standard
      case 3 => advanced
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Plan.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Plan.scalaDescriptor.enums(0)
  }
  implicit class PlanLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Plan]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Plan](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, payment.Limit] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Limit]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPrice)((c_, f_) => c_.copy(price = Option(f_)))
    def optionalPrice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def level: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLevel)((c_, f_) => c_.copy(level = Option(f_)))
    def optionalLevel: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.level)((c_, f_) => c_.copy(level = f_))
    def canBuyAgent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getCanBuyAgent)((c_, f_) => c_.copy(canBuyAgent = Option(f_)))
    def optionalCanBuyAgent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.canBuyAgent)((c_, f_) => c_.copy(canBuyAgent = f_))
    def canBuy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getCanBuy)((c_, f_) => c_.copy(canBuy = Option(f_)))
    def optionalCanBuy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.canBuy)((c_, f_) => c_.copy(canBuy = f_))
    def hasStartTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getHasStartTime)((c_, f_) => c_.copy(hasStartTime = Option(f_)))
    def optionalHasStartTime: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.hasStartTime)((c_, f_) => c_.copy(hasStartTime = f_))
  }
  final val NAME_FIELD_NUMBER = 2
  final val LIMIT_FIELD_NUMBER = 3
  final val PRICE_FIELD_NUMBER = 4
  final val LEVEL_FIELD_NUMBER = 14
  final val CAN_BUY_AGENT_FIELD_NUMBER = 15
  final val CAN_BUY_FIELD_NUMBER = 16
  final val HAS_START_TIME_FIELD_NUMBER = 17
}
