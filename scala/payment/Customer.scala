// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Customer(
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    contacts: _root_.scala.collection.Seq[payment.Contact] = _root_.scala.collection.Seq.empty,
    created: scala.Option[_root_.scala.Long] = None,
    billingInfo: scala.Option[payment.BillingInfo] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Customer] with scalapb.lenses.Updatable[Customer] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      contacts.foreach(contacts => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(contacts.serializedSize) + contacts.serializedSize)
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, created.get) }
      if (billingInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(billingInfo.get.serializedSize) + billingInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      contacts.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      created.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      billingInfo.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Customer = {
      var __id = this.id
      var __accountId = this.accountId
      val __contacts = (_root_.scala.collection.immutable.Vector.newBuilder[payment.Contact] ++= this.contacts)
      var __created = this.created
      var __billingInfo = this.billingInfo
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __contacts += _root_.scalapb.LiteParser.readMessage(_input__, payment.Contact.defaultInstance)
          case 40 =>
            __created = Option(_input__.readInt64())
          case 50 =>
            __billingInfo = Option(_root_.scalapb.LiteParser.readMessage(_input__, __billingInfo.getOrElse(payment.BillingInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      payment.Customer(
          id = __id,
          accountId = __accountId,
          contacts = __contacts.result(),
          created = __created,
          billingInfo = __billingInfo
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Customer = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Customer = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Customer = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Customer = copy(accountId = Option(__v))
    def clearContacts = copy(contacts = _root_.scala.collection.Seq.empty)
    def addContacts(__vs: payment.Contact*): Customer = addAllContacts(__vs)
    def addAllContacts(__vs: TraversableOnce[payment.Contact]): Customer = copy(contacts = contacts ++ __vs)
    def withContacts(__v: _root_.scala.collection.Seq[payment.Contact]): Customer = copy(contacts = __v)
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Customer = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Customer = copy(created = Option(__v))
    def getBillingInfo: payment.BillingInfo = billingInfo.getOrElse(payment.BillingInfo.defaultInstance)
    def clearBillingInfo: Customer = copy(billingInfo = None)
    def withBillingInfo(__v: payment.BillingInfo): Customer = copy(billingInfo = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => contacts
        case 5 => created.orNull
        case 6 => billingInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(contacts.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => billingInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Customer
}

object Customer extends scalapb.GeneratedMessageCompanion[payment.Customer] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Customer] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Customer = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Customer(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[payment.Contact]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[payment.BillingInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Customer] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Customer(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[payment.Contact]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[payment.BillingInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = payment.Contact
      case 6 => __out = payment.BillingInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Customer(
  )
  implicit class CustomerLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Customer]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Customer](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def contacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[payment.Contact]] = field(_.contacts)((c_, f_) => c_.copy(contacts = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def billingInfo: _root_.scalapb.lenses.Lens[UpperPB, payment.BillingInfo] = field(_.getBillingInfo)((c_, f_) => c_.copy(billingInfo = Option(f_)))
    def optionalBillingInfo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.BillingInfo]] = field(_.billingInfo)((c_, f_) => c_.copy(billingInfo = f_))
  }
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CONTACTS_FIELD_NUMBER = 4
  final val CREATED_FIELD_NUMBER = 5
  final val BILLING_INFO_FIELD_NUMBER = 6
}
