// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

object PaymentProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    common.CommonProto,
    lang.LangProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    payment.Stripe,
    payment.PaymentMethods,
    payment.PaymentMethod,
    payment.Limit,
    payment.Plans,
    payment.Plan,
    payment.Subscription,
    payment.Bill,
    payment.Note,
    payment.Invoices,
    payment.Invoice,
    payment.AgentInvoiceItem,
    payment.RenewInvoiceItem,
    payment.PlanInvoiceItem,
    payment.InvoiceItem,
    payment.BillingInfo,
    payment.Contact,
    payment.Customer,
    payment.FixedAmountPromotionCode,
    payment.PercentPromotionCode,
    payment.CreditCode,
    payment.ReferralCreditCode,
    payment.PromotionCode,
    payment.ExchangeRate,
    payment.Log,
    payment.Addon,
    payment.PaymentRenewCycleRequested,
    payment.String,
    payment.PayRequest,
    payment.ESubscription,
    payment.EInvoice,
    payment.InvoiceCreatedEmail
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjBiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci9wYXltZW50L3BheW1lbnQucHJvdG8SB3BheW1lbnQaLmJpdGJ1Y2tldC5vc
  mcvc3ViaXovaGVhZGVyL2NvbW1vbi9jb21tb24ucHJvdG8aKmJpdGJ1Y2tldC5vcmcvc3ViaXovaGVhZGVyL2xhbmcvbGFuZy5wc
  m90byJeCgZTdHJpcGUSHQoKY2FyZF9sYXN0NBgCIAEoCVIJY2FyZExhc3Q0Eh8KC2N1c3RvbWVyX2lkGAMgASgJUgpjdXN0b21lc
  klkEhQKBXRva2VuGAQgASgJUgV0b2tlbiJRCg5QYXltZW50TWV0aG9kcxI/Cg9wYXltZW50X21ldGhvZHMYAiADKAsyFi5wYXltZ
  W50LlBheW1lbnRNZXRob2RSDnBheW1lbnRNZXRob2RzItwCCg1QYXltZW50TWV0aG9kEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db
  250ZXh0UgNjdHgSEgoEdHlwZRgCIAEoCVIEdHlwZRIOCgJpZBgDIAEoCVICaWQSHQoKYWNjb3VudF9pZBgEIAEoCVIJYWNjb3Vud
  ElkEhQKBXN0YXRlGAUgASgJUgVzdGF0ZRIYCgdjcmVhdGVkGAggASgDUgdjcmVhdGVkEicKBnN0cmlwZRgJIAEoCzIPLnBheW1lb
  nQuU3RyaXBlUgZzdHJpcGUSJQoOZmFpbGVkX21lc3NhZ2UYCiABKAlSDWZhaWxlZE1lc3NhZ2USGAoHY2hhcmdlZBgLIAEoA1IHY
  2hhcmdlZCIqCgRUeXBlEhEKDWJhbmtfdHJhbnNmZXIQABIPCgtjcmVkaXRfY2FyZBABIh8KBVN0YXRlEgoKBmFjdGl2ZRAAEgoKB
  mZhaWxlZBABIp8DCgVMaW1pdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAyABKAlSC
  WFjY291bnRJZBInCg9tYXhfYXV0b21hdGlvbnMYBCABKA1SDm1heEF1dG9tYXRpb25zEiEKDG1heF9zZWdtZW50cxgHIAEoDVILb
  WF4U2VnbWVudHMSHQoKbWF4X2FnZW50cxgIIAEoDVIJbWF4QWdlbnRzEiIKDWNhbl9idXlfYWdlbnQYCiABKAhSC2NhbkJ1eUFnZ
  W50EjgKGGF1dG9tYXRpb25fd2ViaG9va19xdW90YRgMIAEoDVIWYXV0b21hdGlvbldlYmhvb2tRdW90YRI0ChZhdXRvbWF0aW9uX
  2VtYWlsX3F1b3RhGA0gASgNUhRhdXRvbWF0aW9uRW1haWxRdW90YRI4ChhhdXRvbWF0aW9uX21lc3NhZ2VfcXVvdGEYDiABKA1SF
  mF1dG9tYXRpb25NZXNzYWdlUXVvdGESGwoJbWF4X3J1bGVzGBAgASgNUghtYXhSdWxlcyIsCgVQbGFucxIjCgVwbGFucxgCIAMoC
  zINLnBheW1lbnQuUGxhblIFcGxhbnMiiAIKBFBsYW4SEgoEbmFtZRgCIAEoCVIEbmFtZRIkCgVsaW1pdBgDIAEoCzIOLnBheW1lb
  nQuTGltaXRSBWxpbWl0EhQKBXByaWNlGAQgASgCUgVwcmljZRIUCgVsZXZlbBgOIAEoDVIFbGV2ZWwSIgoNY2FuX2J1eV9hZ2Vud
  BgPIAEoCFILY2FuQnV5QWdlbnQSFwoHY2FuX2J1eRgQIAEoCFIGY2FuQnV5EiQKDmhhc19zdGFydF90aW1lGBEgASgIUgxoYXNTd
  GFydFRpbWUiNwoEVHlwZRIJCgV0cmlhbBAAEggKBGZyZWUQARIMCghzdGFuZGFyZBACEgwKCGFkdmFuY2VkEAMiogUKDFN1YnNjc
  mlwdGlvbhIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIYC
  gdjcmVhdGVkGAsgASgDUgdjcmVhdGVkEiUKDnByb21vdGlvbl9jb2RlGAQgASgJUg1wcm9tb3Rpb25Db2RlEhIKBG5hbWUYByABK
  AlSBG5hbWUSGAoHc3RhcnRlZBgFIAEoA1IHc3RhcnRlZBIZCghkdWVfZGF0ZRgGIAEoA1IHZHVlRGF0ZRIdCgphdXRvX3JlbmV3G
  AkgASgIUglhdXRvUmVuZXcSLgoTYmlsbGluZ19jeWNsZV9tb250aBgPIAEoDVIRYmlsbGluZ0N5Y2xlTW9udGgSNwoYbmV4dF9ia
  WxsaW5nX2N5Y2xlX21vbnRoGBAgASgNUhVuZXh0QmlsbGluZ0N5Y2xlTW9udGgSEgoEcGxhbhgRIAEoCVIEcGxhbhImCgZhZGRvb
  nMYFSADKAsyDi5wYXltZW50LkFkZG9uUgZhZGRvbnMSFgoGY3JlZGl0GBsgASgCUgZjcmVkaXQSIwoFbm90ZXMYHCADKAsyDS5wY
  XltZW50Lk5vdGVSBW5vdGVzEh8KC3JlZmVycmFsX2J5GB0gASgJUgpyZWZlcnJhbEJ5Ei0KCGN1c3RvbWVyGB8gASgLMhEucGF5b
  WVudC5DdXN0b21lclIIY3VzdG9tZXISNAoWcHJpbWFyeV9wYXltZW50X21ldGhvZBggIAEoCVIUcHJpbWFyeVBheW1lbnRNZXRob
  2QSJAoFbGltaXQYKiABKAsyDi5wYXltZW50LkxpbWl0UgVsaW1pdBIZCgh2M19zdGF0ZRgrIAEoBVIHdjNTdGF0ZSK/AgoEQmlsb
  BIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAMgASgJUgJpZBIdCgphY2NvdW50X2lkGAQgASgJUglhY
  2NvdW50SWQSFgoGYW1vdW50GAUgASgCUgZhbW91bnQSHwoLaW52b2ljZV9pZHMYBiADKAlSCmludm9pY2VJZHMSGAoHY3JlYXRlZ
  BgHIAEoA1IHY3JlYXRlZBI1Cg1jdXN0b21lcl9pbmZvGAggASgLMhAucGF5bWVudC5Db250YWN0UgxjdXN0b21lckluZm8SJQoOc
  GF5bWVudF9tZXRob2QYCiABKAlSDXBheW1lbnRNZXRob2QSEgoEeWVhchgLIAEoBVIEeWVhchIgCgtkZXNjcmlwdGlvbhgMIAEoC
  VILZGVzY3JpcHRpb24iVAoETm90ZRIYCgdtZXNzYWdlGAQgASgJUgdtZXNzYWdlEhgKB2NyZWF0b3IYBSABKAlSB2NyZWF0b3ISG
  AoHY3JlYXRlZBgGIAEoA1IHY3JlYXRlZCI4CghJbnZvaWNlcxIsCghpbnZvaWNlcxgCIAMoCzIQLnBheW1lbnQuSW52b2ljZVIIa
  W52b2ljZXMinQYKB0ludm9pY2USIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAIgASgJU
  glhY2NvdW50SWQSDgoCaWQYAyABKAlSAmlkEh0KCmFtb3VudF9kdWUYBCABKAJSCWFtb3VudER1ZRIlCg5wcm9tb3Rpb25fY29kZ
  RgFIAEoCVINcHJvbW90aW9uQ29kZRIgCgtkZXNjcmlwdGlvbhgGIAEoCVILZGVzY3JpcHRpb24SNwoMYmlsbGluZ19pbmZvGAggA
  SgLMhQucGF5bWVudC5CaWxsaW5nSW5mb1ILYmlsbGluZ0luZm8SGQoIZHVlX2RhdGUYCSABKANSB2R1ZURhdGUSFAoFc3RhdGUYC
  iABKAlSBXN0YXRlEhgKB2NyZWF0ZWQYCyABKANSB2NyZWF0ZWQSKgoFaXRlbXMYDCADKAsyFC5wYXltZW50Lkludm9pY2VJdGVtU
  gVpdGVtcxIaCghzdWJ0b3RhbBgOIAEoAlIIc3VidG90YWwSHwoLdGF4X3BlcmNlbnQYDyABKAJSCnRheFBlcmNlbnQSEAoDdGF4G
  BAgASgCUgN0YXgSFAoFdG90YWwYESABKAJSBXRvdGFsEhgKB3VwZGF0ZWQYEiABKANSB3VwZGF0ZWQSEgoEeWVhchgTIAEoBVIEe
  WVhchIjCgVub3RlcxgWIAMoCzINLnBheW1lbnQuTm90ZVIFbm90ZXMSFAoFYmlsbHMYFyADKAlSBWJpbGxzEiEKDHBheW1lbnRfb
  WFkZRgYIAEoAlILcGF5bWVudE1hZGUSNgoLY3VycmVudF9zdWIYGSABKAsyFS5wYXltZW50LlN1YnNjcmlwdGlvblIKY3VycmVud
  FN1YhIwCgxjdXJyZW50X3BsYW4YGiABKAsyDS5wYXltZW50LlBsYW5SC2N1cnJlbnRQbGFuIk0KBVN0YXRlEgkKBWRyYWZ0EAASC
  AoEb3BlbhABEgsKB292ZXJkdWUQAhIICgRwYWlkEAMSCgoGdm9pZGVkEAQSDAoIcXVldWVpbmcQBSJiChBBZ2VudEludm9pY2VJd
  GVtEhIKBHBsYW4YAyABKAlSBHBsYW4SGQoIZGF5X2xlZnQYBCABKAVSB2RheUxlZnQSHwoLYWdlbnRfY291bnQYCCABKAVSCmFnZ
  W50Q291bnQilAEKEFJlbmV3SW52b2ljZUl0ZW0SEgoEcGxhbhgDIAEoCVIEcGxhbhIuChNiaWxsaW5nX2N5Y2xlX21vbnRoGAQgA
  SgNUhFiaWxsaW5nQ3ljbGVNb250aBIfCgthZ2VudF9jb3VudBgFIAEoDVIKYWdlbnRDb3VudBIbCglmcm9tX3RpbWUYBiABKANSC
  GZyb21UaW1lIvYBCg9QbGFuSW52b2ljZUl0ZW0SHwoLYWdlbnRfY291bnQYAiABKA1SCmFnZW50Q291bnQSLgoTYmlsbGluZ19je
  WNsZV9tb250aBgFIAEoDVIRYmlsbGluZ0N5Y2xlTW9udGgSGQoIb2xkX3BsYW4YBiABKAlSB29sZFBsYW4SGQoIbmV3X3BsYW4YA
  yABKAlSB25ld1BsYW4SJwoPc2F2ZV9wZXJjZW50YWdlGAkgASgCUg5zYXZlUGVyY2VudGFnZRIYCgdzdGFydGVkGAggASgDUgdzd
  GFydGVkEhkKCGRheV9sZWZ0GAQgASgFUgdkYXlMZWZ0IsgCCgtJbnZvaWNlSXRlbRIgCgtkZXNjcmlwdGlvbhgFIAEoCVILZGVzY
  3JpcHRpb24SHQoKaW52b2ljZV9pZBgGIAEoCVIJaW52b2ljZUlkEhoKCHF1YW50aXR5GAcgASgFUghxdWFudGl0eRIUCgVwcmljZ
  RgIIAEoAlIFcHJpY2USLQoEZGF0YRgJIAEoCzIZLnBheW1lbnQuSW52b2ljZUl0ZW0uRGF0YVIEZGF0YRqWAQoERGF0YRIvCgVyZ
  W5ldxgCIAEoCzIZLnBheW1lbnQuUmVuZXdJbnZvaWNlSXRlbVIFcmVuZXcSLwoFYWdlbnQYAyABKAsyGS5wYXltZW50LkFnZW50S
  W52b2ljZUl0ZW1SBWFnZW50EiwKBHBsYW4YBSABKAsyGC5wYXltZW50LlBsYW5JbnZvaWNlSXRlbVIEcGxhbiJwCgtCaWxsaW5nS
  W5mbxISCgRuYW1lGAIgASgJUgRuYW1lEhgKB2FkZHJlc3MYAyABKAlSB2FkZHJlc3MSEAoDdmF0GAQgASgJUgN2YXQSIQoMY291b
  nRyeV9jb2RlGAUgASgJUgtjb3VudHJ5Q29kZSLjAQoHQ29udGFjdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4E
  hIKBG5hbWUYAiABKAlSBG5hbWUSFAoFZW1haWwYAyABKAlSBWVtYWlsEhQKBXBob25lGAQgASgJUgVwaG9uZRIbCglqb2JfdGl0b
  GUYBSABKAlSCGpvYlRpdGxlEhQKBXRpdGxlGAYgASgJUgV0aXRsZRIYCgdwcmltYXJ5GAcgASgIUgdwcmltYXJ5IigKBVRpdGxlE
  gYKAm1yEAASBgoCbXMQARIHCgNtcnMQAhIGCgJkchADIroBCghDdXN0b21lchIOCgJpZBgCIAEoCVICaWQSHQoKYWNjb3VudF9pZ
  BgDIAEoCVIJYWNjb3VudElkEiwKCGNvbnRhY3RzGAQgAygLMhAucGF5bWVudC5Db250YWN0Ughjb250YWN0cxIYCgdjcmVhdGVkG
  AUgASgDUgdjcmVhdGVkEjcKDGJpbGxpbmdfaW5mbxgGIAEoCzIULnBheW1lbnQuQmlsbGluZ0luZm9SC2JpbGxpbmdJbmZvIjIKG
  EZpeGVkQW1vdW50UHJvbW90aW9uQ29kZRIWCgZhbW91bnQYAiABKAJSBmFtb3VudCIwChRQZXJjZW50UHJvbW90aW9uQ29kZRIYC
  gdwZXJjZW50GAIgASgCUgdwZXJjZW50IiQKCkNyZWRpdENvZGUSFgoGY3JlZGl0GAIgASgCUgZjcmVkaXQiTQoSUmVmZXJyYWxDc
  mVkaXRDb2RlEh8KC3JlZmVycmVyX2lkGAIgASgJUgpyZWZlcnJlcklkEhYKBmNyZWRpdBgDIAEoAlIGY3JlZGl0IuUGCg1Qcm9tb
  3Rpb25Db2RlEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSIAoLZGVzY3JpcHRpb24YAyABKAlSC2Rlc2NyaXB0a
  W9uEhIKBHR5cGUYBiABKAlSBHR5cGUSIQoMcmVkZWVtX2NvdW50GAUgASgFUgtyZWRlZW1Db3VudBIYCgdjcmVhdG9yGAkgASgJU
  gdjcmVhdG9yEhgKB2NyZWF0ZWQYCiABKANSB2NyZWF0ZWQSEgoEY29kZRgLIAEoCVIEY29kZRIvCgRkYXRhGA4gASgLMhsucGF5b
  WVudC5Qcm9tb3Rpb25Db2RlLkRhdGFSBGRhdGESFAoFc3RhcnQYECABKANSBXN0YXJ0EhAKA2VuZBgRIAEoA1IDZW5kEhkKCGZvc
  l9wbGFuGBIgASgJUgdmb3JQbGFuEiQKDmZvcl9hY2NvdW50X2lkGBMgASgJUgxmb3JBY2NvdW50SWQSJwoPbWF4X3JlZGVtcHRpb
  25zGBQgASgFUg5tYXhSZWRlbXB0aW9ucxIUCgVhZGRvbhgVIAEoCVIFYWRkb24SGwoJZm9yX2l0ZW1zGBcgAygJUghmb3JJdGVtc
  xIdCgptaW5fYW1vdW50GBggASgCUgltaW5BbW91bnQSHQoKbWF4X2Ftb3VudBgZIAEoAlIJbWF4QW1vdW50GusBCgREYXRhEkQKD
  GZpeGVkX2Ftb3VudBgBIAEoCzIhLnBheW1lbnQuRml4ZWRBbW91bnRQcm9tb3Rpb25Db2RlUgtmaXhlZEFtb3VudBI3CgdwZXJjZ
  W50GAIgASgLMh0ucGF5bWVudC5QZXJjZW50UHJvbW90aW9uQ29kZVIHcGVyY2VudBIrCgZjcmVkaXQYAyABKAsyEy5wYXltZW50L
  kNyZWRpdENvZGVSBmNyZWRpdBI3CghyZWZlcnJhbBgEIAEoCzIbLnBheW1lbnQuUmVmZXJyYWxDcmVkaXRDb2RlUghyZWZlcnJhb
  CJuCgRUeXBlEh8KG2ZpeGVkX2Ftb3VudF9wcm9tb3Rpb25fY29kZRAAEhoKFnBlcmNlbnRfcHJvbW90aW9uX2NvZGUQARIPCgtjc
  mVkaXRfY29kZRACEhgKFHJlZmVycmFsX2NyZWRpdF9jb2RlEAMingEKDEV4Y2hhbmdlUmF0ZRIjCg1mcm9tX2N1cnJlbmN5GAIgA
  SgJUgxmcm9tQ3VycmVuY3kSHwoLdG9fY3VycmVuY3kYAyABKAlSCnRvQ3VycmVuY3kSIwoNZXhjaGFuZ2VfcmF0ZRgEIAEoAlIMZ
  XhjaGFuZ2VSYXRlEiMKDWV4Y2hhbmdlX3RpbWUYBSABKANSDGV4Y2hhbmdlVGltZSKNBAoDTG9nEiEKA2N0eBgBIAEoCzIPLmNvb
  W1vbi5Db250ZXh0UgNjdHgSEgoEdXNlchgCIAEoCVIEdXNlchIOCgJpZBgIIAEoCVICaWQSFgoGYWN0aW9uGAMgASgJUgZhY3Rpb
  24SGAoHY3JlYXRlZBgEIAEoA1IHY3JlYXRlZBIgCgtkZXNjcmlwdGlvbhgFIAEoCVILZGVzY3JpcHRpb24SHQoKYWNjb3VudF9pZ
  BgGIAEoCVIJYWNjb3VudElkEhQKBW1vbnRoGAcgASgFUgVtb250aCK1AgoGQWN0aW9uEhIKDmNyZWF0ZV9pbnZvaWNlEAASGQoVY
  2hhbmdlX2ludm9pY2Vfc3RhdHVzEAESEwoPY3JlYXRlX2Rpc2NvdW50EAISEwoPZGVsZXRlX2Rpc2NvdW50EAMSEwoPcmVkZWVtX
  2Rpc2NvdW50EAQSDgoKYWRkX2NyZWRpdBAFEhEKDXJlZGVlbV9jcmVkaXQQBhISCg5kZWxldGVfYWNjb3VudBAHEg8KC2NoYW5nZ
  V9wbGFuEAgSFgoScmVuZXdfc3Vic2NyaXB0aW9uEAoSGgoWY2xpY2tfc3Vic2NyaWJlX2J1dHRvbhALEhQKEHBheV9mb3JfcmVmZ
  XJyZXIQDBIaChZhZGRfbW9uZXlfZm9yX3JlZmVycmVyEA0SDwoLcGF5X2ludm9pY2UQDiKEAwoFQWRkb24SEgoEdHlwZRgCIAEoC
  VIEdHlwZRISCgRuYW1lGAMgASgJUgRuYW1lEhQKBXByaWNlGAQgASgCUgVwcmljZRItCghjdXJyZW5jeRgFIAEoDjIRLnBheW1lb
  nQuQ3VycmVuY3lSCGN1cnJlbmN5Eh8KC2NoYXJnZV90eXBlGAYgASgJUgpjaGFyZ2VUeXBlEhYKBnBlcmlvZBgHIAEoBVIGcGVya
  W9kEh8KC3BlcmlvZF91bml0GAggASgJUgpwZXJpb2RVbml0EhoKCHF1YW50aXR5GAkgASgFUghxdWFudGl0eRIYCgdjcmVhdGVkG
  AogASgDUgdjcmVhdGVkIh0KBFR5cGUSCgoGY3JlZGl0EAASCQoFYWdlbnQQASIpCgpDaGFyZ2VUeXBlEgwKCG9uZV90aW1lEAASD
  QoJcmVjdXJyaW5nEAEiNAoKUGVyaW9kVW5pdBIHCgNkYXkQABIICgR3ZWVrEAESCQoFbW9udGgQAhIICgR5ZWFyEAMiogEKGlBhe
  W1lbnRSZW5ld0N5Y2xlUmVxdWVzdGVkEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCI
  AEoCVIJYWNjb3VudElkEicKA3N1YhgDIAEoCzIVLnBheW1lbnQuU3Vic2NyaXB0aW9uUgNzdWISGQoIY3ljbGVfaWQYBCABKAlSB
  2N5Y2xlSWQiGgoGU3RyaW5nEhAKA3N0chgCIAEoCVIDc3RyIrwBCgpQYXlSZXF1ZXN0Eh0KCmFjY291bnRfaWQYCCABKAlSCWFjY
  291bnRJZBIfCgtpbnZvaWNlX2lkcxgGIAMoCVIKaW52b2ljZUlkcxIgCgtkZXNjcmlwdGlvbhgHIAEoCVILZGVzY3JpcHRpb24SN
  AoMQ3VzdG9tZXJJbmZvGAkgASgLMhAucGF5bWVudC5Db250YWN0UgxDdXN0b21lckluZm8SFgoGYW1vdW50GAogASgCUgZhbW91b
  nQiSgoNRVN1YnNjcmlwdGlvbhInCgNzdWIYAiABKAsyFS5wYXltZW50LlN1YnNjcmlwdGlvblIDc3ViEhAKA2VychgDIAEoCVIDZ
  XJyIkAKCEVJbnZvaWNlEiIKA2ludhgDIAEoCzIQLnBheW1lbnQuSW52b2ljZVIDaW52EhAKA2VychgEIAEoCVIDZXJyIvQBChNJb
  nZvaWNlQ3JlYXRlZEVtYWlsEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCdG8YAiABKAlSAnRvEh0KCmFjY
  291bnRfaWQYAyABKAlSCWFjY291bnRJZBIhCgxiaWxsaW5nX25hbWUYBCABKAlSC2JpbGxpbmdOYW1lEh0KCmludm9pY2VfaWQYB
  SABKAlSCWludm9pY2VJZBIYCgdjcmVhdGVkGAYgASgDUgdjcmVhdGVkEhsKBGxhbmcYCCABKA4yBy5sYW5nLkxSBGxhbmcSEgoEZ
  nJvbRgKIAEoCVIEZnJvbSolCghDdXJyZW5jeRIHCgN1c2QQABIHCgN2bmQQARIHCgNicmwQAiqQAgoFRXZlbnQSEQoNUGF5bWVud
  FN5bmNlZBAAEhAKDExpbWl0VXBkYXRlZBABEhQKEFBheW1lbnRSZXF1ZXN0ZWQQBBIVChFQYXltZW50UmVuZXdDeWNsZRAFEhsKF
  0ludm9pY2VDcmVhdGVkRW1haWxTZW5kEAYSEwoPUGF5bWVudFYzU3luY2VkEAgSFwoTU3Vic2NyaXB0aW9uVXBkYXRlZBAOEhIKD
  kludm9pY2VVcGRhdGVkEAoSGAoUUGF5bWVudE1ldGhvZFVwZGF0ZWQQCxISCg5CaWxsaW5nVXBkYXRlZBAMEg4KCkxvZ1VwZGF0Z
  WQQDRIYChRQcm9tb3Rpb25Db2RlVXBkYXRlZBAPMokBChdTdWJpekludGVybmFsUGF5bWVudE1nchIqCgpDcmVhdGVCaWxsEg0uc
  GF5bWVudC5CaWxsGg0ucGF5bWVudC5CaWxsEkIKElVwZGF0ZUV4Y2hhbmdlUmF0ZRIVLnBheW1lbnQuRXhjaGFuZ2VSYXRlGhUuc
  GF5bWVudC5FeGNoYW5nZVJhdGUy2gYKClBheW1lbnRNZ3ISOAoIUHVyY2hhc2USFS5wYXltZW50LlN1YnNjcmlwdGlvbhoVLnBhe
  W1lbnQuU3Vic2NyaXB0aW9uEkIKElVwZGF0ZVN1YnNjcmlwdGlvbhIVLnBheW1lbnQuU3Vic2NyaXB0aW9uGhUucGF5bWVudC5Td
  WJzY3JpcHRpb24SNwoPR2V0U3Vic2NyaXB0aW9uEg0uY29tbW9uLkVtcHR5GhUucGF5bWVudC5TdWJzY3JpcHRpb24SOwoQR2V0U
  HJvbW90aW9uQ29kZRIPLnBheW1lbnQuU3RyaW5nGhYucGF5bWVudC5Qcm9tb3Rpb25Db2RlEkIKEEFkZFBheW1lbnRNZXRob2QSF
  i5wYXltZW50LlBheW1lbnRNZXRob2QaFi5wYXltZW50LlBheW1lbnRNZXRob2QSRQoTVXBkYXRlUGF5bWVudE1ldGhvZBIWLnBhe
  W1lbnQuUGF5bWVudE1ldGhvZBoWLnBheW1lbnQuUGF5bWVudE1ldGhvZBIwChNEZWxldGVQYXltZW50TWV0aG9kEgouY29tbW9uL
  klkGg0uY29tbW9uLkVtcHR5EjwKEkxpc3RQYXltZW50TWV0aG9kcxINLmNvbW1vbi5FbXB0eRoXLnBheW1lbnQuUGF5bWVudE1ld
  GhvZHMSKQoDUGF5EhMucGF5bWVudC5QYXlSZXF1ZXN0Gg0ucGF5bWVudC5CaWxsEi0KDExpc3RJbnZvaWNlcxIKLmNvbW1vbi5JZ
  BoRLnBheW1lbnQuSW52b2ljZXMSMwoNQ3JlYXRlSW52b2ljZRIQLnBheW1lbnQuSW52b2ljZRoQLnBheW1lbnQuSW52b2ljZRIqC
  glMaXN0UGxhbnMSDS5jb21tb24uRW1wdHkaDi5wYXltZW50LlBsYW5zEiwKDUV4cG9ydEludm9pY2USCi5jb21tb24uSWQaDy5wY
  XltZW50LlN0cmluZxI/Cg9HZXRFeGNoYW5nZVJhdGUSFS5wYXltZW50LkV4Y2hhbmdlUmF0ZRoVLnBheW1lbnQuRXhjaGFuZ2VSY
  XRlEjMKDVRyYW5zZmVyTW9uZXkSEy5wYXltZW50LlBheVJlcXVlc3QaDS5wYXltZW50LkJpbGw="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      common.CommonProto.javaDescriptor,
      lang.LangProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}