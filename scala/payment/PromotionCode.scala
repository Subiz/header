// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class PromotionCode(
    ctx: scala.Option[common.Context] = None,
    description: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    redeemCount: scala.Option[_root_.scala.Int] = None,
    creator: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    code: scala.Option[_root_.scala.Predef.String] = None,
    data: scala.Option[payment.PromotionCode.Data] = None,
    start: scala.Option[_root_.scala.Long] = None,
    end: scala.Option[_root_.scala.Long] = None,
    forPlan: scala.Option[_root_.scala.Predef.String] = None,
    forAccountId: scala.Option[_root_.scala.Predef.String] = None,
    maxRedemptions: scala.Option[_root_.scala.Int] = None,
    addon: scala.Option[_root_.scala.Predef.String] = None,
    forItems: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    minAmount: scala.Option[_root_.scala.Float] = None,
    maxAmount: scala.Option[_root_.scala.Float] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PromotionCode] with scalapb.lenses.Updatable[PromotionCode] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, description.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, `type`.get) }
      if (redeemCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, redeemCount.get) }
      if (creator.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, creator.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, created.get) }
      if (code.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, code.get) }
      if (data.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(data.get.serializedSize) + data.get.serializedSize }
      if (start.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, start.get) }
      if (end.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(17, end.get) }
      if (forPlan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(18, forPlan.get) }
      if (forAccountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, forAccountId.get) }
      if (maxRedemptions.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(20, maxRedemptions.get) }
      if (addon.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, addon.get) }
      forItems.foreach(forItems => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(23, forItems))
      if (minAmount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(24, minAmount.get) }
      if (maxAmount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(25, maxAmount.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      description.foreach { __v =>
        _output__.writeString(3, __v)
      };
      redeemCount.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(6, __v)
      };
      creator.foreach { __v =>
        _output__.writeString(9, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      code.foreach { __v =>
        _output__.writeString(11, __v)
      };
      data.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      start.foreach { __v =>
        _output__.writeInt64(16, __v)
      };
      end.foreach { __v =>
        _output__.writeInt64(17, __v)
      };
      forPlan.foreach { __v =>
        _output__.writeString(18, __v)
      };
      forAccountId.foreach { __v =>
        _output__.writeString(19, __v)
      };
      maxRedemptions.foreach { __v =>
        _output__.writeInt32(20, __v)
      };
      addon.foreach { __v =>
        _output__.writeString(21, __v)
      };
      forItems.foreach { __v =>
        _output__.writeString(23, __v)
      };
      minAmount.foreach { __v =>
        _output__.writeFloat(24, __v)
      };
      maxAmount.foreach { __v =>
        _output__.writeFloat(25, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.PromotionCode = {
      var __ctx = this.ctx
      var __description = this.description
      var __type = this.`type`
      var __redeemCount = this.redeemCount
      var __creator = this.creator
      var __created = this.created
      var __code = this.code
      var __data = this.data
      var __start = this.start
      var __end = this.end
      var __forPlan = this.forPlan
      var __forAccountId = this.forAccountId
      var __maxRedemptions = this.maxRedemptions
      var __addon = this.addon
      val __forItems = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.forItems)
      var __minAmount = this.minAmount
      var __maxAmount = this.maxAmount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __description = Option(_input__.readString())
          case 50 =>
            __type = Option(_input__.readString())
          case 40 =>
            __redeemCount = Option(_input__.readInt32())
          case 74 =>
            __creator = Option(_input__.readString())
          case 80 =>
            __created = Option(_input__.readInt64())
          case 90 =>
            __code = Option(_input__.readString())
          case 114 =>
            __data = Option(_root_.scalapb.LiteParser.readMessage(_input__, __data.getOrElse(payment.PromotionCode.Data.defaultInstance)))
          case 128 =>
            __start = Option(_input__.readInt64())
          case 136 =>
            __end = Option(_input__.readInt64())
          case 146 =>
            __forPlan = Option(_input__.readString())
          case 154 =>
            __forAccountId = Option(_input__.readString())
          case 160 =>
            __maxRedemptions = Option(_input__.readInt32())
          case 170 =>
            __addon = Option(_input__.readString())
          case 186 =>
            __forItems += _input__.readString()
          case 197 =>
            __minAmount = Option(_input__.readFloat())
          case 205 =>
            __maxAmount = Option(_input__.readFloat())
          case tag => _input__.skipField(tag)
        }
      }
      payment.PromotionCode(
          ctx = __ctx,
          description = __description,
          `type` = __type,
          redeemCount = __redeemCount,
          creator = __creator,
          created = __created,
          code = __code,
          data = __data,
          start = __start,
          end = __end,
          forPlan = __forPlan,
          forAccountId = __forAccountId,
          maxRedemptions = __maxRedemptions,
          addon = __addon,
          forItems = __forItems.result(),
          minAmount = __minAmount,
          maxAmount = __maxAmount
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: PromotionCode = copy(ctx = None)
    def withCtx(__v: common.Context): PromotionCode = copy(ctx = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: PromotionCode = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): PromotionCode = copy(description = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: PromotionCode = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): PromotionCode = copy(`type` = Option(__v))
    def getRedeemCount: _root_.scala.Int = redeemCount.getOrElse(0)
    def clearRedeemCount: PromotionCode = copy(redeemCount = None)
    def withRedeemCount(__v: _root_.scala.Int): PromotionCode = copy(redeemCount = Option(__v))
    def getCreator: _root_.scala.Predef.String = creator.getOrElse("")
    def clearCreator: PromotionCode = copy(creator = None)
    def withCreator(__v: _root_.scala.Predef.String): PromotionCode = copy(creator = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: PromotionCode = copy(created = None)
    def withCreated(__v: _root_.scala.Long): PromotionCode = copy(created = Option(__v))
    def getCode: _root_.scala.Predef.String = code.getOrElse("")
    def clearCode: PromotionCode = copy(code = None)
    def withCode(__v: _root_.scala.Predef.String): PromotionCode = copy(code = Option(__v))
    def getData: payment.PromotionCode.Data = data.getOrElse(payment.PromotionCode.Data.defaultInstance)
    def clearData: PromotionCode = copy(data = None)
    def withData(__v: payment.PromotionCode.Data): PromotionCode = copy(data = Option(__v))
    def getStart: _root_.scala.Long = start.getOrElse(0L)
    def clearStart: PromotionCode = copy(start = None)
    def withStart(__v: _root_.scala.Long): PromotionCode = copy(start = Option(__v))
    def getEnd: _root_.scala.Long = end.getOrElse(0L)
    def clearEnd: PromotionCode = copy(end = None)
    def withEnd(__v: _root_.scala.Long): PromotionCode = copy(end = Option(__v))
    def getForPlan: _root_.scala.Predef.String = forPlan.getOrElse("")
    def clearForPlan: PromotionCode = copy(forPlan = None)
    def withForPlan(__v: _root_.scala.Predef.String): PromotionCode = copy(forPlan = Option(__v))
    def getForAccountId: _root_.scala.Predef.String = forAccountId.getOrElse("")
    def clearForAccountId: PromotionCode = copy(forAccountId = None)
    def withForAccountId(__v: _root_.scala.Predef.String): PromotionCode = copy(forAccountId = Option(__v))
    def getMaxRedemptions: _root_.scala.Int = maxRedemptions.getOrElse(0)
    def clearMaxRedemptions: PromotionCode = copy(maxRedemptions = None)
    def withMaxRedemptions(__v: _root_.scala.Int): PromotionCode = copy(maxRedemptions = Option(__v))
    def getAddon: _root_.scala.Predef.String = addon.getOrElse("")
    def clearAddon: PromotionCode = copy(addon = None)
    def withAddon(__v: _root_.scala.Predef.String): PromotionCode = copy(addon = Option(__v))
    def clearForItems = copy(forItems = _root_.scala.collection.Seq.empty)
    def addForItems(__vs: _root_.scala.Predef.String*): PromotionCode = addAllForItems(__vs)
    def addAllForItems(__vs: TraversableOnce[_root_.scala.Predef.String]): PromotionCode = copy(forItems = forItems ++ __vs)
    def withForItems(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): PromotionCode = copy(forItems = __v)
    def getMinAmount: _root_.scala.Float = minAmount.getOrElse(0.0f)
    def clearMinAmount: PromotionCode = copy(minAmount = None)
    def withMinAmount(__v: _root_.scala.Float): PromotionCode = copy(minAmount = Option(__v))
    def getMaxAmount: _root_.scala.Float = maxAmount.getOrElse(0.0f)
    def clearMaxAmount: PromotionCode = copy(maxAmount = None)
    def withMaxAmount(__v: _root_.scala.Float): PromotionCode = copy(maxAmount = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => description.orNull
        case 6 => `type`.orNull
        case 5 => redeemCount.orNull
        case 9 => creator.orNull
        case 10 => created.orNull
        case 11 => code.orNull
        case 14 => data.orNull
        case 16 => start.orNull
        case 17 => end.orNull
        case 18 => forPlan.orNull
        case 19 => forAccountId.orNull
        case 20 => maxRedemptions.orNull
        case 21 => addon.orNull
        case 23 => forItems
        case 24 => minAmount.orNull
        case 25 => maxAmount.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => redeemCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => creator.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => code.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => start.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => end.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => forPlan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => forAccountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => maxRedemptions.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => addon.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => _root_.scalapb.descriptors.PRepeated(forItems.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 24 => minAmount.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => maxAmount.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.PromotionCode
}

object PromotionCode extends scalapb.GeneratedMessageCompanion[payment.PromotionCode] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.PromotionCode] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.PromotionCode = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.PromotionCode(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[payment.PromotionCode.Data]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(14), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Float]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.PromotionCode] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.PromotionCode(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[payment.PromotionCode.Data]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[_root_.scala.Float]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 14 => __out = payment.PromotionCode.Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.payment.PromotionCode.Data
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.PromotionCode(
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def isfixedamountpromotioncode: _root_.scala.Boolean = false
    def ispercentpromotioncode: _root_.scala.Boolean = false
    def iscreditcode: _root_.scala.Boolean = false
    def isreferralcreditcode: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = payment.PromotionCode.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object fixed_amount_promotion_code extends Type {
      val value = 0
      val index = 0
      val name = "fixed_amount_promotion_code"
      override def isfixedamountpromotioncode: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object percent_promotion_code extends Type {
      val value = 1
      val index = 1
      val name = "percent_promotion_code"
      override def ispercentpromotioncode: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object credit_code extends Type {
      val value = 2
      val index = 2
      val name = "credit_code"
      override def iscreditcode: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object referral_credit_code extends Type {
      val value = 3
      val index = 3
      val name = "referral_credit_code"
      override def isreferralcreditcode: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(fixed_amount_promotion_code, percent_promotion_code, credit_code, referral_credit_code)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => fixed_amount_promotion_code
      case 1 => percent_promotion_code
      case 2 => credit_code
      case 3 => referral_credit_code
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.PromotionCode.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.PromotionCode.scalaDescriptor.enums(0)
  }
  @SerialVersionUID(0L)
  final case class Data(
      fixedAmount: scala.Option[payment.FixedAmountPromotionCode] = None,
      percent: scala.Option[payment.PercentPromotionCode] = None,
      credit: scala.Option[payment.CreditCode] = None,
      referral: scala.Option[payment.ReferralCreditCode] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[Data] with scalapb.lenses.Updatable[Data] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (fixedAmount.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fixedAmount.get.serializedSize) + fixedAmount.get.serializedSize }
        if (percent.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(percent.get.serializedSize) + percent.get.serializedSize }
        if (credit.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(credit.get.serializedSize) + credit.get.serializedSize }
        if (referral.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(referral.get.serializedSize) + referral.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        fixedAmount.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        percent.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        credit.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        referral.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.PromotionCode.Data = {
        var __fixedAmount = this.fixedAmount
        var __percent = this.percent
        var __credit = this.credit
        var __referral = this.referral
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __fixedAmount = Option(_root_.scalapb.LiteParser.readMessage(_input__, __fixedAmount.getOrElse(payment.FixedAmountPromotionCode.defaultInstance)))
            case 18 =>
              __percent = Option(_root_.scalapb.LiteParser.readMessage(_input__, __percent.getOrElse(payment.PercentPromotionCode.defaultInstance)))
            case 26 =>
              __credit = Option(_root_.scalapb.LiteParser.readMessage(_input__, __credit.getOrElse(payment.CreditCode.defaultInstance)))
            case 34 =>
              __referral = Option(_root_.scalapb.LiteParser.readMessage(_input__, __referral.getOrElse(payment.ReferralCreditCode.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        payment.PromotionCode.Data(
            fixedAmount = __fixedAmount,
            percent = __percent,
            credit = __credit,
            referral = __referral
        )
      }
      def getFixedAmount: payment.FixedAmountPromotionCode = fixedAmount.getOrElse(payment.FixedAmountPromotionCode.defaultInstance)
      def clearFixedAmount: Data = copy(fixedAmount = None)
      def withFixedAmount(__v: payment.FixedAmountPromotionCode): Data = copy(fixedAmount = Option(__v))
      def getPercent: payment.PercentPromotionCode = percent.getOrElse(payment.PercentPromotionCode.defaultInstance)
      def clearPercent: Data = copy(percent = None)
      def withPercent(__v: payment.PercentPromotionCode): Data = copy(percent = Option(__v))
      def getCredit: payment.CreditCode = credit.getOrElse(payment.CreditCode.defaultInstance)
      def clearCredit: Data = copy(credit = None)
      def withCredit(__v: payment.CreditCode): Data = copy(credit = Option(__v))
      def getReferral: payment.ReferralCreditCode = referral.getOrElse(payment.ReferralCreditCode.defaultInstance)
      def clearReferral: Data = copy(referral = None)
      def withReferral(__v: payment.ReferralCreditCode): Data = copy(referral = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => fixedAmount.orNull
          case 2 => percent.orNull
          case 3 => credit.orNull
          case 4 => referral.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => fixedAmount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => percent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => credit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => referral.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = payment.PromotionCode.Data
  }
  
  object Data extends scalapb.GeneratedMessageCompanion[payment.PromotionCode.Data] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.PromotionCode.Data] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.PromotionCode.Data = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      payment.PromotionCode.Data(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[payment.FixedAmountPromotionCode]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[payment.PercentPromotionCode]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[payment.CreditCode]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[payment.ReferralCreditCode]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.PromotionCode.Data] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        payment.PromotionCode.Data(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[payment.FixedAmountPromotionCode]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[payment.PercentPromotionCode]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[payment.CreditCode]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[payment.ReferralCreditCode]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = payment.PromotionCode.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = payment.PromotionCode.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = payment.FixedAmountPromotionCode
        case 2 => __out = payment.PercentPromotionCode
        case 3 => __out = payment.CreditCode
        case 4 => __out = payment.ReferralCreditCode
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = payment.PromotionCode.Data(
    )
    implicit class DataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.PromotionCode.Data]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.PromotionCode.Data](_l) {
      def fixedAmount: _root_.scalapb.lenses.Lens[UpperPB, payment.FixedAmountPromotionCode] = field(_.getFixedAmount)((c_, f_) => c_.copy(fixedAmount = Option(f_)))
      def optionalFixedAmount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.FixedAmountPromotionCode]] = field(_.fixedAmount)((c_, f_) => c_.copy(fixedAmount = f_))
      def percent: _root_.scalapb.lenses.Lens[UpperPB, payment.PercentPromotionCode] = field(_.getPercent)((c_, f_) => c_.copy(percent = Option(f_)))
      def optionalPercent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.PercentPromotionCode]] = field(_.percent)((c_, f_) => c_.copy(percent = f_))
      def credit: _root_.scalapb.lenses.Lens[UpperPB, payment.CreditCode] = field(_.getCredit)((c_, f_) => c_.copy(credit = Option(f_)))
      def optionalCredit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.CreditCode]] = field(_.credit)((c_, f_) => c_.copy(credit = f_))
      def referral: _root_.scalapb.lenses.Lens[UpperPB, payment.ReferralCreditCode] = field(_.getReferral)((c_, f_) => c_.copy(referral = Option(f_)))
      def optionalReferral: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.ReferralCreditCode]] = field(_.referral)((c_, f_) => c_.copy(referral = f_))
    }
    final val FIXED_AMOUNT_FIELD_NUMBER = 1
    final val PERCENT_FIELD_NUMBER = 2
    final val CREDIT_FIELD_NUMBER = 3
    final val REFERRAL_FIELD_NUMBER = 4
  }
  
  implicit class PromotionCodeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.PromotionCode]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.PromotionCode](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def redeemCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getRedeemCount)((c_, f_) => c_.copy(redeemCount = Option(f_)))
    def optionalRedeemCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.redeemCount)((c_, f_) => c_.copy(redeemCount = f_))
    def creator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCreator)((c_, f_) => c_.copy(creator = Option(f_)))
    def optionalCreator: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.creator)((c_, f_) => c_.copy(creator = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCode)((c_, f_) => c_.copy(code = Option(f_)))
    def optionalCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, payment.PromotionCode.Data] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.PromotionCode.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def start: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStart)((c_, f_) => c_.copy(start = Option(f_)))
    def optionalStart: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.start)((c_, f_) => c_.copy(start = f_))
    def end: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getEnd)((c_, f_) => c_.copy(end = Option(f_)))
    def optionalEnd: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.end)((c_, f_) => c_.copy(end = f_))
    def forPlan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getForPlan)((c_, f_) => c_.copy(forPlan = Option(f_)))
    def optionalForPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.forPlan)((c_, f_) => c_.copy(forPlan = f_))
    def forAccountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getForAccountId)((c_, f_) => c_.copy(forAccountId = Option(f_)))
    def optionalForAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.forAccountId)((c_, f_) => c_.copy(forAccountId = f_))
    def maxRedemptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMaxRedemptions)((c_, f_) => c_.copy(maxRedemptions = Option(f_)))
    def optionalMaxRedemptions: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.maxRedemptions)((c_, f_) => c_.copy(maxRedemptions = f_))
    def addon: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAddon)((c_, f_) => c_.copy(addon = Option(f_)))
    def optionalAddon: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.addon)((c_, f_) => c_.copy(addon = f_))
    def forItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.forItems)((c_, f_) => c_.copy(forItems = f_))
    def minAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getMinAmount)((c_, f_) => c_.copy(minAmount = Option(f_)))
    def optionalMinAmount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.minAmount)((c_, f_) => c_.copy(minAmount = f_))
    def maxAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getMaxAmount)((c_, f_) => c_.copy(maxAmount = Option(f_)))
    def optionalMaxAmount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.maxAmount)((c_, f_) => c_.copy(maxAmount = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val DESCRIPTION_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 6
  final val REDEEM_COUNT_FIELD_NUMBER = 5
  final val CREATOR_FIELD_NUMBER = 9
  final val CREATED_FIELD_NUMBER = 10
  final val CODE_FIELD_NUMBER = 11
  final val DATA_FIELD_NUMBER = 14
  final val START_FIELD_NUMBER = 16
  final val END_FIELD_NUMBER = 17
  final val FOR_PLAN_FIELD_NUMBER = 18
  final val FOR_ACCOUNT_ID_FIELD_NUMBER = 19
  final val MAX_REDEMPTIONS_FIELD_NUMBER = 20
  final val ADDON_FIELD_NUMBER = 21
  final val FOR_ITEMS_FIELD_NUMBER = 23
  final val MIN_AMOUNT_FIELD_NUMBER = 24
  final val MAX_AMOUNT_FIELD_NUMBER = 25
}
