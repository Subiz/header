// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Addon(
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    price: scala.Option[_root_.scala.Float] = None,
    currency: scala.Option[payment.Currency] = None,
    chargeType: scala.Option[_root_.scala.Predef.String] = None,
    period: scala.Option[_root_.scala.Int] = None,
    periodUnit: scala.Option[_root_.scala.Predef.String] = None,
    quantity: scala.Option[_root_.scala.Int] = None,
    created: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Addon] with scalapb.lenses.Updatable[Addon] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, `type`.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name.get) }
      if (price.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, price.get) }
      if (currency.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, currency.get.value) }
      if (chargeType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, chargeType.get) }
      if (period.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, period.get) }
      if (periodUnit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, periodUnit.get) }
      if (quantity.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, quantity.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, created.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.foreach { __v =>
        _output__.writeString(2, __v)
      };
      name.foreach { __v =>
        _output__.writeString(3, __v)
      };
      price.foreach { __v =>
        _output__.writeFloat(4, __v)
      };
      currency.foreach { __v =>
        _output__.writeEnum(5, __v.value)
      };
      chargeType.foreach { __v =>
        _output__.writeString(6, __v)
      };
      period.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      periodUnit.foreach { __v =>
        _output__.writeString(8, __v)
      };
      quantity.foreach { __v =>
        _output__.writeInt32(9, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Addon = {
      var __type = this.`type`
      var __name = this.name
      var __price = this.price
      var __currency = this.currency
      var __chargeType = this.chargeType
      var __period = this.period
      var __periodUnit = this.periodUnit
      var __quantity = this.quantity
      var __created = this.created
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __type = Option(_input__.readString())
          case 26 =>
            __name = Option(_input__.readString())
          case 37 =>
            __price = Option(_input__.readFloat())
          case 40 =>
            __currency = Option(payment.Currency.fromValue(_input__.readEnum()))
          case 50 =>
            __chargeType = Option(_input__.readString())
          case 56 =>
            __period = Option(_input__.readInt32())
          case 66 =>
            __periodUnit = Option(_input__.readString())
          case 72 =>
            __quantity = Option(_input__.readInt32())
          case 80 =>
            __created = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Addon(
          `type` = __type,
          name = __name,
          price = __price,
          currency = __currency,
          chargeType = __chargeType,
          period = __period,
          periodUnit = __periodUnit,
          quantity = __quantity,
          created = __created
      )
    }
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Addon = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Addon = copy(`type` = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Addon = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Addon = copy(name = Option(__v))
    def getPrice: _root_.scala.Float = price.getOrElse(0.0f)
    def clearPrice: Addon = copy(price = None)
    def withPrice(__v: _root_.scala.Float): Addon = copy(price = Option(__v))
    def getCurrency: payment.Currency = currency.getOrElse(payment.Currency.usd)
    def clearCurrency: Addon = copy(currency = None)
    def withCurrency(__v: payment.Currency): Addon = copy(currency = Option(__v))
    def getChargeType: _root_.scala.Predef.String = chargeType.getOrElse("")
    def clearChargeType: Addon = copy(chargeType = None)
    def withChargeType(__v: _root_.scala.Predef.String): Addon = copy(chargeType = Option(__v))
    def getPeriod: _root_.scala.Int = period.getOrElse(0)
    def clearPeriod: Addon = copy(period = None)
    def withPeriod(__v: _root_.scala.Int): Addon = copy(period = Option(__v))
    def getPeriodUnit: _root_.scala.Predef.String = periodUnit.getOrElse("")
    def clearPeriodUnit: Addon = copy(periodUnit = None)
    def withPeriodUnit(__v: _root_.scala.Predef.String): Addon = copy(periodUnit = Option(__v))
    def getQuantity: _root_.scala.Int = quantity.getOrElse(0)
    def clearQuantity: Addon = copy(quantity = None)
    def withQuantity(__v: _root_.scala.Int): Addon = copy(quantity = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Addon = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Addon = copy(created = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => `type`.orNull
        case 3 => name.orNull
        case 4 => price.orNull
        case 5 => currency.map(_.javaValueDescriptor).orNull
        case 6 => chargeType.orNull
        case 7 => period.orNull
        case 8 => periodUnit.orNull
        case 9 => quantity.orNull
        case 10 => created.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => price.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => currency.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => chargeType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => period.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => periodUnit.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => quantity.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Addon
}

object Addon extends scalapb.GeneratedMessageCompanion[payment.Addon] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Addon] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Addon = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Addon(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => payment.Currency.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Addon] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Addon(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => payment.Currency.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => payment.Currency
    }
  }
  lazy val defaultInstance = payment.Addon(
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def iscredit: _root_.scala.Boolean = false
    def isagent: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = payment.Addon.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object credit extends Type {
      val value = 0
      val index = 0
      val name = "credit"
      override def iscredit: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object agent extends Type {
      val value = 1
      val index = 1
      val name = "agent"
      override def isagent: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(credit, agent)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => credit
      case 1 => agent
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Addon.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Addon.scalaDescriptor.enums(0)
  }
  sealed trait ChargeType extends _root_.scalapb.GeneratedEnum {
    type EnumType = ChargeType
    def isonetime: _root_.scala.Boolean = false
    def isrecurring: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[ChargeType] = payment.Addon.ChargeType
  }
  
  object ChargeType extends _root_.scalapb.GeneratedEnumCompanion[ChargeType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ChargeType] = this
    @SerialVersionUID(0L)
    case object one_time extends ChargeType {
      val value = 0
      val index = 0
      val name = "one_time"
      override def isonetime: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object recurring extends ChargeType {
      val value = 1
      val index = 1
      val name = "recurring"
      override def isrecurring: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends ChargeType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(one_time, recurring)
    def fromValue(value: _root_.scala.Int): ChargeType = value match {
      case 0 => one_time
      case 1 => recurring
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Addon.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Addon.scalaDescriptor.enums(1)
  }
  sealed trait PeriodUnit extends _root_.scalapb.GeneratedEnum {
    type EnumType = PeriodUnit
    def isday: _root_.scala.Boolean = false
    def isweek: _root_.scala.Boolean = false
    def ismonth: _root_.scala.Boolean = false
    def isyear: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PeriodUnit] = payment.Addon.PeriodUnit
  }
  
  object PeriodUnit extends _root_.scalapb.GeneratedEnumCompanion[PeriodUnit] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PeriodUnit] = this
    @SerialVersionUID(0L)
    case object day extends PeriodUnit {
      val value = 0
      val index = 0
      val name = "day"
      override def isday: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object week extends PeriodUnit {
      val value = 1
      val index = 1
      val name = "week"
      override def isweek: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object month extends PeriodUnit {
      val value = 2
      val index = 2
      val name = "month"
      override def ismonth: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object year extends PeriodUnit {
      val value = 3
      val index = 3
      val name = "year"
      override def isyear: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends PeriodUnit with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(day, week, month, year)
    def fromValue(value: _root_.scala.Int): PeriodUnit = value match {
      case 0 => day
      case 1 => week
      case 2 => month
      case 3 => year
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Addon.javaDescriptor.getEnumTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Addon.scalaDescriptor.enums(2)
  }
  implicit class AddonLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Addon]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Addon](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPrice)((c_, f_) => c_.copy(price = Option(f_)))
    def optionalPrice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def currency: _root_.scalapb.lenses.Lens[UpperPB, payment.Currency] = field(_.getCurrency)((c_, f_) => c_.copy(currency = Option(f_)))
    def optionalCurrency: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Currency]] = field(_.currency)((c_, f_) => c_.copy(currency = f_))
    def chargeType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getChargeType)((c_, f_) => c_.copy(chargeType = Option(f_)))
    def optionalChargeType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.chargeType)((c_, f_) => c_.copy(chargeType = f_))
    def period: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPeriod)((c_, f_) => c_.copy(period = Option(f_)))
    def optionalPeriod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.period)((c_, f_) => c_.copy(period = f_))
    def periodUnit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPeriodUnit)((c_, f_) => c_.copy(periodUnit = Option(f_)))
    def optionalPeriodUnit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.periodUnit)((c_, f_) => c_.copy(periodUnit = f_))
    def quantity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getQuantity)((c_, f_) => c_.copy(quantity = Option(f_)))
    def optionalQuantity: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.quantity)((c_, f_) => c_.copy(quantity = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
  }
  final val TYPE_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val PRICE_FIELD_NUMBER = 4
  final val CURRENCY_FIELD_NUMBER = 5
  final val CHARGE_TYPE_FIELD_NUMBER = 6
  final val PERIOD_FIELD_NUMBER = 7
  final val PERIOD_UNIT_FIELD_NUMBER = 8
  final val QUANTITY_FIELD_NUMBER = 9
  final val CREATED_FIELD_NUMBER = 10
}
