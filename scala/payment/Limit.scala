// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** @param maxSegments
  *   optional uint32 max_conversations = 6;
  */
@SerialVersionUID(0L)
final case class Limit(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    maxAutomations: scala.Option[_root_.scala.Int] = None,
    maxSegments: scala.Option[_root_.scala.Int] = None,
    maxAgents: scala.Option[_root_.scala.Int] = None,
    canBuyAgent: scala.Option[_root_.scala.Boolean] = None,
    automationWebhookQuota: scala.Option[_root_.scala.Int] = None,
    automationEmailQuota: scala.Option[_root_.scala.Int] = None,
    automationMessageQuota: scala.Option[_root_.scala.Int] = None,
    maxRules: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Limit] with scalapb.lenses.Updatable[Limit] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (maxAutomations.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, maxAutomations.get) }
      if (maxSegments.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, maxSegments.get) }
      if (maxAgents.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, maxAgents.get) }
      if (canBuyAgent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, canBuyAgent.get) }
      if (automationWebhookQuota.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, automationWebhookQuota.get) }
      if (automationEmailQuota.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(13, automationEmailQuota.get) }
      if (automationMessageQuota.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(14, automationMessageQuota.get) }
      if (maxRules.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(16, maxRules.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      maxAutomations.foreach { __v =>
        _output__.writeUInt32(4, __v)
      };
      maxSegments.foreach { __v =>
        _output__.writeUInt32(7, __v)
      };
      maxAgents.foreach { __v =>
        _output__.writeUInt32(8, __v)
      };
      canBuyAgent.foreach { __v =>
        _output__.writeBool(10, __v)
      };
      automationWebhookQuota.foreach { __v =>
        _output__.writeUInt32(12, __v)
      };
      automationEmailQuota.foreach { __v =>
        _output__.writeUInt32(13, __v)
      };
      automationMessageQuota.foreach { __v =>
        _output__.writeUInt32(14, __v)
      };
      maxRules.foreach { __v =>
        _output__.writeUInt32(16, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Limit = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __maxAutomations = this.maxAutomations
      var __maxSegments = this.maxSegments
      var __maxAgents = this.maxAgents
      var __canBuyAgent = this.canBuyAgent
      var __automationWebhookQuota = this.automationWebhookQuota
      var __automationEmailQuota = this.automationEmailQuota
      var __automationMessageQuota = this.automationMessageQuota
      var __maxRules = this.maxRules
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __accountId = Option(_input__.readString())
          case 32 =>
            __maxAutomations = Option(_input__.readUInt32())
          case 56 =>
            __maxSegments = Option(_input__.readUInt32())
          case 64 =>
            __maxAgents = Option(_input__.readUInt32())
          case 80 =>
            __canBuyAgent = Option(_input__.readBool())
          case 96 =>
            __automationWebhookQuota = Option(_input__.readUInt32())
          case 104 =>
            __automationEmailQuota = Option(_input__.readUInt32())
          case 112 =>
            __automationMessageQuota = Option(_input__.readUInt32())
          case 128 =>
            __maxRules = Option(_input__.readUInt32())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Limit(
          ctx = __ctx,
          accountId = __accountId,
          maxAutomations = __maxAutomations,
          maxSegments = __maxSegments,
          maxAgents = __maxAgents,
          canBuyAgent = __canBuyAgent,
          automationWebhookQuota = __automationWebhookQuota,
          automationEmailQuota = __automationEmailQuota,
          automationMessageQuota = __automationMessageQuota,
          maxRules = __maxRules
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Limit = copy(ctx = None)
    def withCtx(__v: common.Context): Limit = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Limit = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Limit = copy(accountId = Option(__v))
    def getMaxAutomations: _root_.scala.Int = maxAutomations.getOrElse(0)
    def clearMaxAutomations: Limit = copy(maxAutomations = None)
    def withMaxAutomations(__v: _root_.scala.Int): Limit = copy(maxAutomations = Option(__v))
    def getMaxSegments: _root_.scala.Int = maxSegments.getOrElse(0)
    def clearMaxSegments: Limit = copy(maxSegments = None)
    def withMaxSegments(__v: _root_.scala.Int): Limit = copy(maxSegments = Option(__v))
    def getMaxAgents: _root_.scala.Int = maxAgents.getOrElse(0)
    def clearMaxAgents: Limit = copy(maxAgents = None)
    def withMaxAgents(__v: _root_.scala.Int): Limit = copy(maxAgents = Option(__v))
    def getCanBuyAgent: _root_.scala.Boolean = canBuyAgent.getOrElse(false)
    def clearCanBuyAgent: Limit = copy(canBuyAgent = None)
    def withCanBuyAgent(__v: _root_.scala.Boolean): Limit = copy(canBuyAgent = Option(__v))
    def getAutomationWebhookQuota: _root_.scala.Int = automationWebhookQuota.getOrElse(0)
    def clearAutomationWebhookQuota: Limit = copy(automationWebhookQuota = None)
    def withAutomationWebhookQuota(__v: _root_.scala.Int): Limit = copy(automationWebhookQuota = Option(__v))
    def getAutomationEmailQuota: _root_.scala.Int = automationEmailQuota.getOrElse(0)
    def clearAutomationEmailQuota: Limit = copy(automationEmailQuota = None)
    def withAutomationEmailQuota(__v: _root_.scala.Int): Limit = copy(automationEmailQuota = Option(__v))
    def getAutomationMessageQuota: _root_.scala.Int = automationMessageQuota.getOrElse(0)
    def clearAutomationMessageQuota: Limit = copy(automationMessageQuota = None)
    def withAutomationMessageQuota(__v: _root_.scala.Int): Limit = copy(automationMessageQuota = Option(__v))
    def getMaxRules: _root_.scala.Int = maxRules.getOrElse(0)
    def clearMaxRules: Limit = copy(maxRules = None)
    def withMaxRules(__v: _root_.scala.Int): Limit = copy(maxRules = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => accountId.orNull
        case 4 => maxAutomations.orNull
        case 7 => maxSegments.orNull
        case 8 => maxAgents.orNull
        case 10 => canBuyAgent.orNull
        case 12 => automationWebhookQuota.orNull
        case 13 => automationEmailQuota.orNull
        case 14 => automationMessageQuota.orNull
        case 16 => maxRules.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => maxAutomations.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => maxSegments.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => maxAgents.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => canBuyAgent.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => automationWebhookQuota.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => automationEmailQuota.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => automationMessageQuota.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => maxRules.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Limit
}

object Limit extends scalapb.GeneratedMessageCompanion[payment.Limit] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Limit] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Limit = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Limit(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Limit] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Limit(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Limit(
  )
  implicit class LimitLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Limit]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Limit](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def maxAutomations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMaxAutomations)((c_, f_) => c_.copy(maxAutomations = Option(f_)))
    def optionalMaxAutomations: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.maxAutomations)((c_, f_) => c_.copy(maxAutomations = f_))
    def maxSegments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMaxSegments)((c_, f_) => c_.copy(maxSegments = Option(f_)))
    def optionalMaxSegments: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.maxSegments)((c_, f_) => c_.copy(maxSegments = f_))
    def maxAgents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMaxAgents)((c_, f_) => c_.copy(maxAgents = Option(f_)))
    def optionalMaxAgents: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.maxAgents)((c_, f_) => c_.copy(maxAgents = f_))
    def canBuyAgent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getCanBuyAgent)((c_, f_) => c_.copy(canBuyAgent = Option(f_)))
    def optionalCanBuyAgent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.canBuyAgent)((c_, f_) => c_.copy(canBuyAgent = f_))
    def automationWebhookQuota: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAutomationWebhookQuota)((c_, f_) => c_.copy(automationWebhookQuota = Option(f_)))
    def optionalAutomationWebhookQuota: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.automationWebhookQuota)((c_, f_) => c_.copy(automationWebhookQuota = f_))
    def automationEmailQuota: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAutomationEmailQuota)((c_, f_) => c_.copy(automationEmailQuota = Option(f_)))
    def optionalAutomationEmailQuota: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.automationEmailQuota)((c_, f_) => c_.copy(automationEmailQuota = f_))
    def automationMessageQuota: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAutomationMessageQuota)((c_, f_) => c_.copy(automationMessageQuota = Option(f_)))
    def optionalAutomationMessageQuota: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.automationMessageQuota)((c_, f_) => c_.copy(automationMessageQuota = f_))
    def maxRules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMaxRules)((c_, f_) => c_.copy(maxRules = Option(f_)))
    def optionalMaxRules: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.maxRules)((c_, f_) => c_.copy(maxRules = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val MAX_AUTOMATIONS_FIELD_NUMBER = 4
  final val MAX_SEGMENTS_FIELD_NUMBER = 7
  final val MAX_AGENTS_FIELD_NUMBER = 8
  final val CAN_BUY_AGENT_FIELD_NUMBER = 10
  final val AUTOMATION_WEBHOOK_QUOTA_FIELD_NUMBER = 12
  final val AUTOMATION_EMAIL_QUOTA_FIELD_NUMBER = 13
  final val AUTOMATION_MESSAGE_QUOTA_FIELD_NUMBER = 14
  final val MAX_RULES_FIELD_NUMBER = 16
}
