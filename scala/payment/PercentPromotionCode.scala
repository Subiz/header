// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class PercentPromotionCode(
    percent: scala.Option[_root_.scala.Float] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PercentPromotionCode] with scalapb.lenses.Updatable[PercentPromotionCode] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (percent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, percent.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      percent.foreach { __v =>
        _output__.writeFloat(2, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.PercentPromotionCode = {
      var __percent = this.percent
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 21 =>
            __percent = Option(_input__.readFloat())
          case tag => _input__.skipField(tag)
        }
      }
      payment.PercentPromotionCode(
          percent = __percent
      )
    }
    def getPercent: _root_.scala.Float = percent.getOrElse(0.0f)
    def clearPercent: PercentPromotionCode = copy(percent = None)
    def withPercent(__v: _root_.scala.Float): PercentPromotionCode = copy(percent = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => percent.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => percent.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.PercentPromotionCode
}

object PercentPromotionCode extends scalapb.GeneratedMessageCompanion[payment.PercentPromotionCode] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.PercentPromotionCode] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.PercentPromotionCode = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.PercentPromotionCode(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Float]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.PercentPromotionCode] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.PercentPromotionCode(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Float]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.PercentPromotionCode(
  )
  implicit class PercentPromotionCodeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.PercentPromotionCode]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.PercentPromotionCode](_l) {
    def percent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPercent)((c_, f_) => c_.copy(percent = Option(f_)))
    def optionalPercent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.percent)((c_, f_) => c_.copy(percent = f_))
  }
  final val PERCENT_FIELD_NUMBER = 2
}
