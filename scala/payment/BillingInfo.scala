// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class BillingInfo(
    name: scala.Option[_root_.scala.Predef.String] = None,
    address: scala.Option[_root_.scala.Predef.String] = None,
    vat: scala.Option[_root_.scala.Predef.String] = None,
    countryCode: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[BillingInfo] with scalapb.lenses.Updatable[BillingInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (address.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, address.get) }
      if (vat.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, vat.get) }
      if (countryCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, countryCode.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      address.foreach { __v =>
        _output__.writeString(3, __v)
      };
      vat.foreach { __v =>
        _output__.writeString(4, __v)
      };
      countryCode.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.BillingInfo = {
      var __name = this.name
      var __address = this.address
      var __vat = this.vat
      var __countryCode = this.countryCode
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __name = Option(_input__.readString())
          case 26 =>
            __address = Option(_input__.readString())
          case 34 =>
            __vat = Option(_input__.readString())
          case 42 =>
            __countryCode = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      payment.BillingInfo(
          name = __name,
          address = __address,
          vat = __vat,
          countryCode = __countryCode
      )
    }
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: BillingInfo = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): BillingInfo = copy(name = Option(__v))
    def getAddress: _root_.scala.Predef.String = address.getOrElse("")
    def clearAddress: BillingInfo = copy(address = None)
    def withAddress(__v: _root_.scala.Predef.String): BillingInfo = copy(address = Option(__v))
    def getVat: _root_.scala.Predef.String = vat.getOrElse("")
    def clearVat: BillingInfo = copy(vat = None)
    def withVat(__v: _root_.scala.Predef.String): BillingInfo = copy(vat = Option(__v))
    def getCountryCode: _root_.scala.Predef.String = countryCode.getOrElse("")
    def clearCountryCode: BillingInfo = copy(countryCode = None)
    def withCountryCode(__v: _root_.scala.Predef.String): BillingInfo = copy(countryCode = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => name.orNull
        case 3 => address.orNull
        case 4 => vat.orNull
        case 5 => countryCode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => address.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => vat.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => countryCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.BillingInfo
}

object BillingInfo extends scalapb.GeneratedMessageCompanion[payment.BillingInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.BillingInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.BillingInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.BillingInfo(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.BillingInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.BillingInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.BillingInfo(
  )
  implicit class BillingInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.BillingInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.BillingInfo](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAddress)((c_, f_) => c_.copy(address = Option(f_)))
    def optionalAddress: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def vat: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getVat)((c_, f_) => c_.copy(vat = Option(f_)))
    def optionalVat: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.vat)((c_, f_) => c_.copy(vat = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryCode)((c_, f_) => c_.copy(countryCode = Option(f_)))
    def optionalCountryCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
  }
  final val NAME_FIELD_NUMBER = 2
  final val ADDRESS_FIELD_NUMBER = 3
  final val VAT_FIELD_NUMBER = 4
  final val COUNTRY_CODE_FIELD_NUMBER = 5
}
