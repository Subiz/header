// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Bill(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    amount: scala.Option[_root_.scala.Float] = None,
    invoiceIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    created: scala.Option[_root_.scala.Long] = None,
    customerInfo: scala.Option[payment.Contact] = None,
    paymentMethod: scala.Option[_root_.scala.Predef.String] = None,
    year: scala.Option[_root_.scala.Int] = None,
    description: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Bill] with scalapb.lenses.Updatable[Bill] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (amount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, amount.get) }
      invoiceIds.foreach(invoiceIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, invoiceIds))
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, created.get) }
      if (customerInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(customerInfo.get.serializedSize) + customerInfo.get.serializedSize }
      if (paymentMethod.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, paymentMethod.get) }
      if (year.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, year.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, description.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      amount.foreach { __v =>
        _output__.writeFloat(5, __v)
      };
      invoiceIds.foreach { __v =>
        _output__.writeString(6, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      customerInfo.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      paymentMethod.foreach { __v =>
        _output__.writeString(10, __v)
      };
      year.foreach { __v =>
        _output__.writeInt32(11, __v)
      };
      description.foreach { __v =>
        _output__.writeString(12, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Bill = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __amount = this.amount
      val __invoiceIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.invoiceIds)
      var __created = this.created
      var __customerInfo = this.customerInfo
      var __paymentMethod = this.paymentMethod
      var __year = this.year
      var __description = this.description
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 45 =>
            __amount = Option(_input__.readFloat())
          case 50 =>
            __invoiceIds += _input__.readString()
          case 56 =>
            __created = Option(_input__.readInt64())
          case 66 =>
            __customerInfo = Option(_root_.scalapb.LiteParser.readMessage(_input__, __customerInfo.getOrElse(payment.Contact.defaultInstance)))
          case 82 =>
            __paymentMethod = Option(_input__.readString())
          case 88 =>
            __year = Option(_input__.readInt32())
          case 98 =>
            __description = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Bill(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          amount = __amount,
          invoiceIds = __invoiceIds.result(),
          created = __created,
          customerInfo = __customerInfo,
          paymentMethod = __paymentMethod,
          year = __year,
          description = __description
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Bill = copy(ctx = None)
    def withCtx(__v: common.Context): Bill = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Bill = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Bill = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Bill = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Bill = copy(accountId = Option(__v))
    def getAmount: _root_.scala.Float = amount.getOrElse(0.0f)
    def clearAmount: Bill = copy(amount = None)
    def withAmount(__v: _root_.scala.Float): Bill = copy(amount = Option(__v))
    def clearInvoiceIds = copy(invoiceIds = _root_.scala.collection.Seq.empty)
    def addInvoiceIds(__vs: _root_.scala.Predef.String*): Bill = addAllInvoiceIds(__vs)
    def addAllInvoiceIds(__vs: TraversableOnce[_root_.scala.Predef.String]): Bill = copy(invoiceIds = invoiceIds ++ __vs)
    def withInvoiceIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Bill = copy(invoiceIds = __v)
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Bill = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Bill = copy(created = Option(__v))
    def getCustomerInfo: payment.Contact = customerInfo.getOrElse(payment.Contact.defaultInstance)
    def clearCustomerInfo: Bill = copy(customerInfo = None)
    def withCustomerInfo(__v: payment.Contact): Bill = copy(customerInfo = Option(__v))
    def getPaymentMethod: _root_.scala.Predef.String = paymentMethod.getOrElse("")
    def clearPaymentMethod: Bill = copy(paymentMethod = None)
    def withPaymentMethod(__v: _root_.scala.Predef.String): Bill = copy(paymentMethod = Option(__v))
    def getYear: _root_.scala.Int = year.getOrElse(0)
    def clearYear: Bill = copy(year = None)
    def withYear(__v: _root_.scala.Int): Bill = copy(year = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: Bill = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): Bill = copy(description = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => id.orNull
        case 4 => accountId.orNull
        case 5 => amount.orNull
        case 6 => invoiceIds
        case 7 => created.orNull
        case 8 => customerInfo.orNull
        case 10 => paymentMethod.orNull
        case 11 => year.orNull
        case 12 => description.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => amount.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(invoiceIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 7 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => customerInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => paymentMethod.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => year.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Bill
}

object Bill extends scalapb.GeneratedMessageCompanion[payment.Bill] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Bill] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Bill = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Bill(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[payment.Contact]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Bill] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Bill(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[payment.Contact]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 8 => __out = payment.Contact
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Bill(
  )
  implicit class BillLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Bill]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Bill](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getAmount)((c_, f_) => c_.copy(amount = Option(f_)))
    def optionalAmount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def invoiceIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.invoiceIds)((c_, f_) => c_.copy(invoiceIds = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def customerInfo: _root_.scalapb.lenses.Lens[UpperPB, payment.Contact] = field(_.getCustomerInfo)((c_, f_) => c_.copy(customerInfo = Option(f_)))
    def optionalCustomerInfo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Contact]] = field(_.customerInfo)((c_, f_) => c_.copy(customerInfo = f_))
    def paymentMethod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPaymentMethod)((c_, f_) => c_.copy(paymentMethod = Option(f_)))
    def optionalPaymentMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.paymentMethod)((c_, f_) => c_.copy(paymentMethod = f_))
    def year: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getYear)((c_, f_) => c_.copy(year = Option(f_)))
    def optionalYear: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.year)((c_, f_) => c_.copy(year = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val AMOUNT_FIELD_NUMBER = 5
  final val INVOICE_IDS_FIELD_NUMBER = 6
  final val CREATED_FIELD_NUMBER = 7
  final val CUSTOMER_INFO_FIELD_NUMBER = 8
  final val PAYMENT_METHOD_FIELD_NUMBER = 10
  final val YEAR_FIELD_NUMBER = 11
  final val DESCRIPTION_FIELD_NUMBER = 12
}
