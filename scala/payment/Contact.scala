// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class Contact(
    ctx: scala.Option[common.Context] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    email: scala.Option[_root_.scala.Predef.String] = None,
    phone: scala.Option[_root_.scala.Predef.String] = None,
    jobTitle: scala.Option[_root_.scala.Predef.String] = None,
    title: scala.Option[_root_.scala.Predef.String] = None,
    primary: scala.Option[_root_.scala.Boolean] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Contact] with scalapb.lenses.Updatable[Contact] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (email.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, email.get) }
      if (phone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, phone.get) }
      if (jobTitle.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, jobTitle.get) }
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, title.get) }
      if (primary.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, primary.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      email.foreach { __v =>
        _output__.writeString(3, __v)
      };
      phone.foreach { __v =>
        _output__.writeString(4, __v)
      };
      jobTitle.foreach { __v =>
        _output__.writeString(5, __v)
      };
      title.foreach { __v =>
        _output__.writeString(6, __v)
      };
      primary.foreach { __v =>
        _output__.writeBool(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.Contact = {
      var __ctx = this.ctx
      var __name = this.name
      var __email = this.email
      var __phone = this.phone
      var __jobTitle = this.jobTitle
      var __title = this.title
      var __primary = this.primary
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __name = Option(_input__.readString())
          case 26 =>
            __email = Option(_input__.readString())
          case 34 =>
            __phone = Option(_input__.readString())
          case 42 =>
            __jobTitle = Option(_input__.readString())
          case 50 =>
            __title = Option(_input__.readString())
          case 56 =>
            __primary = Option(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      payment.Contact(
          ctx = __ctx,
          name = __name,
          email = __email,
          phone = __phone,
          jobTitle = __jobTitle,
          title = __title,
          primary = __primary
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Contact = copy(ctx = None)
    def withCtx(__v: common.Context): Contact = copy(ctx = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Contact = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Contact = copy(name = Option(__v))
    def getEmail: _root_.scala.Predef.String = email.getOrElse("")
    def clearEmail: Contact = copy(email = None)
    def withEmail(__v: _root_.scala.Predef.String): Contact = copy(email = Option(__v))
    def getPhone: _root_.scala.Predef.String = phone.getOrElse("")
    def clearPhone: Contact = copy(phone = None)
    def withPhone(__v: _root_.scala.Predef.String): Contact = copy(phone = Option(__v))
    def getJobTitle: _root_.scala.Predef.String = jobTitle.getOrElse("")
    def clearJobTitle: Contact = copy(jobTitle = None)
    def withJobTitle(__v: _root_.scala.Predef.String): Contact = copy(jobTitle = Option(__v))
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: Contact = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): Contact = copy(title = Option(__v))
    def getPrimary: _root_.scala.Boolean = primary.getOrElse(false)
    def clearPrimary: Contact = copy(primary = None)
    def withPrimary(__v: _root_.scala.Boolean): Contact = copy(primary = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => name.orNull
        case 3 => email.orNull
        case 4 => phone.orNull
        case 5 => jobTitle.orNull
        case 6 => title.orNull
        case 7 => primary.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => email.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => phone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => jobTitle.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => primary.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.Contact
}

object Contact extends scalapb.GeneratedMessageCompanion[payment.Contact] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.Contact] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.Contact = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.Contact(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.Contact] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.Contact(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.Contact(
  )
  sealed trait Title extends _root_.scalapb.GeneratedEnum {
    type EnumType = Title
    def ismr: _root_.scala.Boolean = false
    def isms: _root_.scala.Boolean = false
    def ismrs: _root_.scala.Boolean = false
    def isdr: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Title] = payment.Contact.Title
  }
  
  object Title extends _root_.scalapb.GeneratedEnumCompanion[Title] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Title] = this
    @SerialVersionUID(0L)
    case object mr extends Title {
      val value = 0
      val index = 0
      val name = "mr"
      override def ismr: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ms extends Title {
      val value = 1
      val index = 1
      val name = "ms"
      override def isms: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object mrs extends Title {
      val value = 2
      val index = 2
      val name = "mrs"
      override def ismrs: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object dr extends Title {
      val value = 3
      val index = 3
      val name = "dr"
      override def isdr: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Title with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(mr, ms, mrs, dr)
    def fromValue(value: _root_.scala.Int): Title = value match {
      case 0 => mr
      case 1 => ms
      case 2 => mrs
      case 3 => dr
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.Contact.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.Contact.scalaDescriptor.enums(0)
  }
  implicit class ContactLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.Contact]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.Contact](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEmail)((c_, f_) => c_.copy(email = Option(f_)))
    def optionalEmail: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPhone)((c_, f_) => c_.copy(phone = Option(f_)))
    def optionalPhone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def jobTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getJobTitle)((c_, f_) => c_.copy(jobTitle = Option(f_)))
    def optionalJobTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.jobTitle)((c_, f_) => c_.copy(jobTitle = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def primary: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getPrimary)((c_, f_) => c_.copy(primary = Option(f_)))
    def optionalPrimary: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.primary)((c_, f_) => c_.copy(primary = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val PHONE_FIELD_NUMBER = 4
  final val JOB_TITLE_FIELD_NUMBER = 5
  final val TITLE_FIELD_NUMBER = 6
  final val PRIMARY_FIELD_NUMBER = 7
}
