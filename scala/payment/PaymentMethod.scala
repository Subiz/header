// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

@SerialVersionUID(0L)
final case class PaymentMethod(
    ctx: scala.Option[common.Context] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    stripe: scala.Option[payment.Stripe] = None,
    failedMessage: scala.Option[_root_.scala.Predef.String] = None,
    charged: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PaymentMethod] with scalapb.lenses.Updatable[PaymentMethod] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, `type`.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, state.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, created.get) }
      if (stripe.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(stripe.get.serializedSize) + stripe.get.serializedSize }
      if (failedMessage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, failedMessage.get) }
      if (charged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, charged.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      `type`.foreach { __v =>
        _output__.writeString(2, __v)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      state.foreach { __v =>
        _output__.writeString(5, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      stripe.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      failedMessage.foreach { __v =>
        _output__.writeString(10, __v)
      };
      charged.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.PaymentMethod = {
      var __ctx = this.ctx
      var __type = this.`type`
      var __id = this.id
      var __accountId = this.accountId
      var __state = this.state
      var __created = this.created
      var __stripe = this.stripe
      var __failedMessage = this.failedMessage
      var __charged = this.charged
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __type = Option(_input__.readString())
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __state = Option(_input__.readString())
          case 64 =>
            __created = Option(_input__.readInt64())
          case 74 =>
            __stripe = Option(_root_.scalapb.LiteParser.readMessage(_input__, __stripe.getOrElse(payment.Stripe.defaultInstance)))
          case 82 =>
            __failedMessage = Option(_input__.readString())
          case 88 =>
            __charged = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      payment.PaymentMethod(
          ctx = __ctx,
          `type` = __type,
          id = __id,
          accountId = __accountId,
          state = __state,
          created = __created,
          stripe = __stripe,
          failedMessage = __failedMessage,
          charged = __charged
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: PaymentMethod = copy(ctx = None)
    def withCtx(__v: common.Context): PaymentMethod = copy(ctx = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: PaymentMethod = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): PaymentMethod = copy(`type` = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: PaymentMethod = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): PaymentMethod = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: PaymentMethod = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): PaymentMethod = copy(accountId = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: PaymentMethod = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): PaymentMethod = copy(state = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: PaymentMethod = copy(created = None)
    def withCreated(__v: _root_.scala.Long): PaymentMethod = copy(created = Option(__v))
    def getStripe: payment.Stripe = stripe.getOrElse(payment.Stripe.defaultInstance)
    def clearStripe: PaymentMethod = copy(stripe = None)
    def withStripe(__v: payment.Stripe): PaymentMethod = copy(stripe = Option(__v))
    def getFailedMessage: _root_.scala.Predef.String = failedMessage.getOrElse("")
    def clearFailedMessage: PaymentMethod = copy(failedMessage = None)
    def withFailedMessage(__v: _root_.scala.Predef.String): PaymentMethod = copy(failedMessage = Option(__v))
    def getCharged: _root_.scala.Long = charged.getOrElse(0L)
    def clearCharged: PaymentMethod = copy(charged = None)
    def withCharged(__v: _root_.scala.Long): PaymentMethod = copy(charged = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => `type`.orNull
        case 3 => id.orNull
        case 4 => accountId.orNull
        case 5 => state.orNull
        case 8 => created.orNull
        case 9 => stripe.orNull
        case 10 => failedMessage.orNull
        case 11 => charged.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => stripe.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => failedMessage.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => charged.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.PaymentMethod
}

object PaymentMethod extends scalapb.GeneratedMessageCompanion[payment.PaymentMethod] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.PaymentMethod] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.PaymentMethod = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.PaymentMethod(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[payment.Stripe]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.PaymentMethod] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.PaymentMethod(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[payment.Stripe]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 9 => __out = payment.Stripe
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.PaymentMethod(
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def isbanktransfer: _root_.scala.Boolean = false
    def iscreditcard: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = payment.PaymentMethod.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object bank_transfer extends Type {
      val value = 0
      val index = 0
      val name = "bank_transfer"
      override def isbanktransfer: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object credit_card extends Type {
      val value = 1
      val index = 1
      val name = "credit_card"
      override def iscreditcard: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(bank_transfer, credit_card)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => bank_transfer
      case 1 => credit_card
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.PaymentMethod.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.PaymentMethod.scalaDescriptor.enums(0)
  }
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def isactive: _root_.scala.Boolean = false
    def isfailed: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = payment.PaymentMethod.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object active extends State {
      val value = 0
      val index = 0
      val name = "active"
      override def isactive: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object failed extends State {
      val value = 1
      val index = 1
      val name = "failed"
      override def isfailed: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(active, failed)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => active
      case 1 => failed
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = payment.PaymentMethod.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = payment.PaymentMethod.scalaDescriptor.enums(1)
  }
  implicit class PaymentMethodLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.PaymentMethod]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.PaymentMethod](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def stripe: _root_.scalapb.lenses.Lens[UpperPB, payment.Stripe] = field(_.getStripe)((c_, f_) => c_.copy(stripe = Option(f_)))
    def optionalStripe: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Stripe]] = field(_.stripe)((c_, f_) => c_.copy(stripe = f_))
    def failedMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFailedMessage)((c_, f_) => c_.copy(failedMessage = Option(f_)))
    def optionalFailedMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.failedMessage)((c_, f_) => c_.copy(failedMessage = f_))
    def charged: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCharged)((c_, f_) => c_.copy(charged = Option(f_)))
    def optionalCharged: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.charged)((c_, f_) => c_.copy(charged = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TYPE_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val STATE_FIELD_NUMBER = 5
  final val CREATED_FIELD_NUMBER = 8
  final val STRIPE_FIELD_NUMBER = 9
  final val FAILED_MESSAGE_FIELD_NUMBER = 10
  final val CHARGED_FIELD_NUMBER = 11
}
