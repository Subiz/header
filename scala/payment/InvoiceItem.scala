// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package payment

/** @param description
  *   remove
  * @param invoiceId
  *   remove
  * @param price
  *   per unit
  */
@SerialVersionUID(0L)
final case class InvoiceItem(
    description: scala.Option[_root_.scala.Predef.String] = None,
    invoiceId: scala.Option[_root_.scala.Predef.String] = None,
    quantity: scala.Option[_root_.scala.Int] = None,
    price: scala.Option[_root_.scala.Float] = None,
    data: scala.Option[payment.InvoiceItem.Data] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[InvoiceItem] with scalapb.lenses.Updatable[InvoiceItem] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, description.get) }
      if (invoiceId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, invoiceId.get) }
      if (quantity.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, quantity.get) }
      if (price.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(8, price.get) }
      if (data.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(data.get.serializedSize) + data.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      description.foreach { __v =>
        _output__.writeString(5, __v)
      };
      invoiceId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      quantity.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      price.foreach { __v =>
        _output__.writeFloat(8, __v)
      };
      data.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.InvoiceItem = {
      var __description = this.description
      var __invoiceId = this.invoiceId
      var __quantity = this.quantity
      var __price = this.price
      var __data = this.data
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 42 =>
            __description = Option(_input__.readString())
          case 50 =>
            __invoiceId = Option(_input__.readString())
          case 56 =>
            __quantity = Option(_input__.readInt32())
          case 69 =>
            __price = Option(_input__.readFloat())
          case 74 =>
            __data = Option(_root_.scalapb.LiteParser.readMessage(_input__, __data.getOrElse(payment.InvoiceItem.Data.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      payment.InvoiceItem(
          description = __description,
          invoiceId = __invoiceId,
          quantity = __quantity,
          price = __price,
          data = __data
      )
    }
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: InvoiceItem = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): InvoiceItem = copy(description = Option(__v))
    def getInvoiceId: _root_.scala.Predef.String = invoiceId.getOrElse("")
    def clearInvoiceId: InvoiceItem = copy(invoiceId = None)
    def withInvoiceId(__v: _root_.scala.Predef.String): InvoiceItem = copy(invoiceId = Option(__v))
    def getQuantity: _root_.scala.Int = quantity.getOrElse(0)
    def clearQuantity: InvoiceItem = copy(quantity = None)
    def withQuantity(__v: _root_.scala.Int): InvoiceItem = copy(quantity = Option(__v))
    def getPrice: _root_.scala.Float = price.getOrElse(0.0f)
    def clearPrice: InvoiceItem = copy(price = None)
    def withPrice(__v: _root_.scala.Float): InvoiceItem = copy(price = Option(__v))
    def getData: payment.InvoiceItem.Data = data.getOrElse(payment.InvoiceItem.Data.defaultInstance)
    def clearData: InvoiceItem = copy(data = None)
    def withData(__v: payment.InvoiceItem.Data): InvoiceItem = copy(data = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 5 => description.orNull
        case 6 => invoiceId.orNull
        case 7 => quantity.orNull
        case 8 => price.orNull
        case 9 => data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 5 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => invoiceId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => quantity.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => price.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = payment.InvoiceItem
}

object InvoiceItem extends scalapb.GeneratedMessageCompanion[payment.InvoiceItem] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.InvoiceItem] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.InvoiceItem = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    payment.InvoiceItem(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[payment.InvoiceItem.Data]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.InvoiceItem] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      payment.InvoiceItem(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[payment.InvoiceItem.Data]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PaymentProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PaymentProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = payment.InvoiceItem.Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.payment.InvoiceItem.Data
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = payment.InvoiceItem(
  )
  @SerialVersionUID(0L)
  final case class Data(
      renew: scala.Option[payment.RenewInvoiceItem] = None,
      agent: scala.Option[payment.AgentInvoiceItem] = None,
      plan: scala.Option[payment.PlanInvoiceItem] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[Data] with scalapb.lenses.Updatable[Data] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (renew.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(renew.get.serializedSize) + renew.get.serializedSize }
        if (agent.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agent.get.serializedSize) + agent.get.serializedSize }
        if (plan.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(plan.get.serializedSize) + plan.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        renew.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        agent.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        plan.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): payment.InvoiceItem.Data = {
        var __renew = this.renew
        var __agent = this.agent
        var __plan = this.plan
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 18 =>
              __renew = Option(_root_.scalapb.LiteParser.readMessage(_input__, __renew.getOrElse(payment.RenewInvoiceItem.defaultInstance)))
            case 26 =>
              __agent = Option(_root_.scalapb.LiteParser.readMessage(_input__, __agent.getOrElse(payment.AgentInvoiceItem.defaultInstance)))
            case 42 =>
              __plan = Option(_root_.scalapb.LiteParser.readMessage(_input__, __plan.getOrElse(payment.PlanInvoiceItem.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        payment.InvoiceItem.Data(
            renew = __renew,
            agent = __agent,
            plan = __plan
        )
      }
      def getRenew: payment.RenewInvoiceItem = renew.getOrElse(payment.RenewInvoiceItem.defaultInstance)
      def clearRenew: Data = copy(renew = None)
      def withRenew(__v: payment.RenewInvoiceItem): Data = copy(renew = Option(__v))
      def getAgent: payment.AgentInvoiceItem = agent.getOrElse(payment.AgentInvoiceItem.defaultInstance)
      def clearAgent: Data = copy(agent = None)
      def withAgent(__v: payment.AgentInvoiceItem): Data = copy(agent = Option(__v))
      def getPlan: payment.PlanInvoiceItem = plan.getOrElse(payment.PlanInvoiceItem.defaultInstance)
      def clearPlan: Data = copy(plan = None)
      def withPlan(__v: payment.PlanInvoiceItem): Data = copy(plan = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => renew.orNull
          case 3 => agent.orNull
          case 5 => plan.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 2 => renew.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => agent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => plan.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = payment.InvoiceItem.Data
  }
  
  object Data extends scalapb.GeneratedMessageCompanion[payment.InvoiceItem.Data] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[payment.InvoiceItem.Data] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): payment.InvoiceItem.Data = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      payment.InvoiceItem.Data(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[payment.RenewInvoiceItem]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[payment.AgentInvoiceItem]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[payment.PlanInvoiceItem]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[payment.InvoiceItem.Data] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        payment.InvoiceItem.Data(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[payment.RenewInvoiceItem]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[payment.AgentInvoiceItem]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[payment.PlanInvoiceItem]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = payment.InvoiceItem.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = payment.InvoiceItem.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = payment.RenewInvoiceItem
        case 3 => __out = payment.AgentInvoiceItem
        case 5 => __out = payment.PlanInvoiceItem
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = payment.InvoiceItem.Data(
    )
    implicit class DataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.InvoiceItem.Data]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.InvoiceItem.Data](_l) {
      def renew: _root_.scalapb.lenses.Lens[UpperPB, payment.RenewInvoiceItem] = field(_.getRenew)((c_, f_) => c_.copy(renew = Option(f_)))
      def optionalRenew: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.RenewInvoiceItem]] = field(_.renew)((c_, f_) => c_.copy(renew = f_))
      def agent: _root_.scalapb.lenses.Lens[UpperPB, payment.AgentInvoiceItem] = field(_.getAgent)((c_, f_) => c_.copy(agent = Option(f_)))
      def optionalAgent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.AgentInvoiceItem]] = field(_.agent)((c_, f_) => c_.copy(agent = f_))
      def plan: _root_.scalapb.lenses.Lens[UpperPB, payment.PlanInvoiceItem] = field(_.getPlan)((c_, f_) => c_.copy(plan = Option(f_)))
      def optionalPlan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.PlanInvoiceItem]] = field(_.plan)((c_, f_) => c_.copy(plan = f_))
    }
    final val RENEW_FIELD_NUMBER = 2
    final val AGENT_FIELD_NUMBER = 3
    final val PLAN_FIELD_NUMBER = 5
  }
  
  implicit class InvoiceItemLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, payment.InvoiceItem]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, payment.InvoiceItem](_l) {
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def invoiceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getInvoiceId)((c_, f_) => c_.copy(invoiceId = Option(f_)))
    def optionalInvoiceId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.invoiceId)((c_, f_) => c_.copy(invoiceId = f_))
    def quantity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getQuantity)((c_, f_) => c_.copy(quantity = Option(f_)))
    def optionalQuantity: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.quantity)((c_, f_) => c_.copy(quantity = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPrice)((c_, f_) => c_.copy(price = Option(f_)))
    def optionalPrice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, payment.InvoiceItem.Data] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.InvoiceItem.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val DESCRIPTION_FIELD_NUMBER = 5
  final val INVOICE_ID_FIELD_NUMBER = 6
  final val QUANTITY_FIELD_NUMBER = 7
  final val PRICE_FIELD_NUMBER = 8
  final val DATA_FIELD_NUMBER = 9
}
