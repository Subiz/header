// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package api

@SerialVersionUID(0L)
final case class AllType(
    domain: scala.Option[api.WlDomain] = None,
    wlip: scala.Option[api.WlIP] = None,
    wluse: scala.Option[api.WlUser] = None,
    lr: scala.Option[api.ListRequest] = None,
    sc: scala.Option[api.ScryptChallenge] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (domain.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(domain.get.serializedSize) + domain.get.serializedSize }
      if (wlip.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(wlip.get.serializedSize) + wlip.get.serializedSize }
      if (wluse.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(wluse.get.serializedSize) + wluse.get.serializedSize }
      if (lr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(lr.get.serializedSize) + lr.get.serializedSize }
      if (sc.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sc.get.serializedSize) + sc.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      domain.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      wlip.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      wluse.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      lr.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sc.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): api.AllType = {
      var __domain = this.domain
      var __wlip = this.wlip
      var __wluse = this.wluse
      var __lr = this.lr
      var __sc = this.sc
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __domain = Option(_root_.scalapb.LiteParser.readMessage(_input__, __domain.getOrElse(api.WlDomain.defaultInstance)))
          case 26 =>
            __wlip = Option(_root_.scalapb.LiteParser.readMessage(_input__, __wlip.getOrElse(api.WlIP.defaultInstance)))
          case 34 =>
            __wluse = Option(_root_.scalapb.LiteParser.readMessage(_input__, __wluse.getOrElse(api.WlUser.defaultInstance)))
          case 42 =>
            __lr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __lr.getOrElse(api.ListRequest.defaultInstance)))
          case 50 =>
            __sc = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sc.getOrElse(api.ScryptChallenge.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      api.AllType(
          domain = __domain,
          wlip = __wlip,
          wluse = __wluse,
          lr = __lr,
          sc = __sc
      )
    }
    def getDomain: api.WlDomain = domain.getOrElse(api.WlDomain.defaultInstance)
    def clearDomain: AllType = copy(domain = None)
    def withDomain(__v: api.WlDomain): AllType = copy(domain = Option(__v))
    def getWlip: api.WlIP = wlip.getOrElse(api.WlIP.defaultInstance)
    def clearWlip: AllType = copy(wlip = None)
    def withWlip(__v: api.WlIP): AllType = copy(wlip = Option(__v))
    def getWluse: api.WlUser = wluse.getOrElse(api.WlUser.defaultInstance)
    def clearWluse: AllType = copy(wluse = None)
    def withWluse(__v: api.WlUser): AllType = copy(wluse = Option(__v))
    def getLr: api.ListRequest = lr.getOrElse(api.ListRequest.defaultInstance)
    def clearLr: AllType = copy(lr = None)
    def withLr(__v: api.ListRequest): AllType = copy(lr = Option(__v))
    def getSc: api.ScryptChallenge = sc.getOrElse(api.ScryptChallenge.defaultInstance)
    def clearSc: AllType = copy(sc = None)
    def withSc(__v: api.ScryptChallenge): AllType = copy(sc = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => domain.orNull
        case 3 => wlip.orNull
        case 4 => wluse.orNull
        case 5 => lr.orNull
        case 6 => sc.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => domain.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => wlip.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => wluse.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => lr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => sc.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = api.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[api.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[api.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): api.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    api.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[api.WlDomain]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[api.WlIP]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[api.WlUser]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[api.ListRequest]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[api.ScryptChallenge]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[api.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      api.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[api.WlDomain]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[api.WlIP]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[api.WlUser]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[api.ListRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[api.ScryptChallenge]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = api.WlDomain
      case 3 => __out = api.WlIP
      case 4 => __out = api.WlUser
      case 5 => __out = api.ListRequest
      case 6 => __out = api.ScryptChallenge
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = api.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, api.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, api.AllType](_l) {
    def domain: _root_.scalapb.lenses.Lens[UpperPB, api.WlDomain] = field(_.getDomain)((c_, f_) => c_.copy(domain = Option(f_)))
    def optionalDomain: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[api.WlDomain]] = field(_.domain)((c_, f_) => c_.copy(domain = f_))
    def wlip: _root_.scalapb.lenses.Lens[UpperPB, api.WlIP] = field(_.getWlip)((c_, f_) => c_.copy(wlip = Option(f_)))
    def optionalWlip: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[api.WlIP]] = field(_.wlip)((c_, f_) => c_.copy(wlip = f_))
    def wluse: _root_.scalapb.lenses.Lens[UpperPB, api.WlUser] = field(_.getWluse)((c_, f_) => c_.copy(wluse = Option(f_)))
    def optionalWluse: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[api.WlUser]] = field(_.wluse)((c_, f_) => c_.copy(wluse = f_))
    def lr: _root_.scalapb.lenses.Lens[UpperPB, api.ListRequest] = field(_.getLr)((c_, f_) => c_.copy(lr = Option(f_)))
    def optionalLr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[api.ListRequest]] = field(_.lr)((c_, f_) => c_.copy(lr = f_))
    def sc: _root_.scalapb.lenses.Lens[UpperPB, api.ScryptChallenge] = field(_.getSc)((c_, f_) => c_.copy(sc = Option(f_)))
    def optionalSc: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[api.ScryptChallenge]] = field(_.sc)((c_, f_) => c_.copy(sc = f_))
  }
  final val DOMAIN_FIELD_NUMBER = 2
  final val WLIP_FIELD_NUMBER = 3
  final val WLUSE_FIELD_NUMBER = 4
  final val LR_FIELD_NUMBER = 5
  final val SC_FIELD_NUMBER = 6
}
