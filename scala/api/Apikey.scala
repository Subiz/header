// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package api

@SerialVersionUID(0L)
final case class Apikey(
    secret: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    clientId: scala.Option[_root_.scala.Predef.String] = None,
    clientType: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Apikey] with scalapb.lenses.Updatable[Apikey] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (secret.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, secret.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (clientId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, clientId.get) }
      if (clientType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, clientType.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      secret.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      clientId.foreach { __v =>
        _output__.writeString(5, __v)
      };
      clientType.foreach { __v =>
        _output__.writeString(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): api.Apikey = {
      var __secret = this.secret
      var __accountId = this.accountId
      var __clientId = this.clientId
      var __clientType = this.clientType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __secret = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __clientId = Option(_input__.readString())
          case 50 =>
            __clientType = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      api.Apikey(
          secret = __secret,
          accountId = __accountId,
          clientId = __clientId,
          clientType = __clientType
      )
    }
    def getSecret: _root_.scala.Predef.String = secret.getOrElse("")
    def clearSecret: Apikey = copy(secret = None)
    def withSecret(__v: _root_.scala.Predef.String): Apikey = copy(secret = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Apikey = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Apikey = copy(accountId = Option(__v))
    def getClientId: _root_.scala.Predef.String = clientId.getOrElse("")
    def clearClientId: Apikey = copy(clientId = None)
    def withClientId(__v: _root_.scala.Predef.String): Apikey = copy(clientId = Option(__v))
    def getClientType: _root_.scala.Predef.String = clientType.getOrElse("")
    def clearClientType: Apikey = copy(clientType = None)
    def withClientType(__v: _root_.scala.Predef.String): Apikey = copy(clientType = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => secret.orNull
        case 4 => accountId.orNull
        case 5 => clientId.orNull
        case 6 => clientType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => secret.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => clientId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => clientType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = api.Apikey
}

object Apikey extends scalapb.GeneratedMessageCompanion[api.Apikey] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[api.Apikey] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): api.Apikey = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    api.Apikey(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[api.Apikey] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      api.Apikey(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = api.Apikey(
  )
  implicit class ApikeyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, api.Apikey]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, api.Apikey](_l) {
    def secret: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSecret)((c_, f_) => c_.copy(secret = Option(f_)))
    def optionalSecret: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.secret)((c_, f_) => c_.copy(secret = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClientId)((c_, f_) => c_.copy(clientId = Option(f_)))
    def optionalClientId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def clientType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClientType)((c_, f_) => c_.copy(clientType = Option(f_)))
    def optionalClientType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.clientType)((c_, f_) => c_.copy(clientType = f_))
  }
  final val SECRET_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val CLIENT_ID_FIELD_NUMBER = 5
  final val CLIENT_TYPE_FIELD_NUMBER = 6
}
