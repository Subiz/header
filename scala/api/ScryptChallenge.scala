// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package api

/** @param id
  *   very long string
  * @param hash
  *   32 bit hex
  * @param answer
  *   only for subiz use
  */
@SerialVersionUID(0L)
final case class ScryptChallenge(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    n: scala.Option[_root_.scala.Int] = None,
    p: scala.Option[_root_.scala.Int] = None,
    r: scala.Option[_root_.scala.Int] = None,
    salt: scala.Option[_root_.scala.Predef.String] = None,
    hash: scala.Option[_root_.scala.Predef.String] = None,
    domain: scala.Option[_root_.scala.Int] = None,
    dklen: scala.Option[_root_.scala.Int] = None,
    answer: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ScryptChallenge] with scalapb.lenses.Updatable[ScryptChallenge] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, accountId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (n.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, n.get) }
      if (p.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, p.get) }
      if (r.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, r.get) }
      if (salt.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, salt.get) }
      if (hash.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, hash.get) }
      if (domain.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, domain.get) }
      if (dklen.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, dklen.get) }
      if (answer.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, answer.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, created.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      n.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      p.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      r.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      salt.foreach { __v =>
        _output__.writeString(6, __v)
      };
      hash.foreach { __v =>
        _output__.writeString(8, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(9, __v)
      };
      answer.foreach { __v =>
        _output__.writeString(10, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      domain.foreach { __v =>
        _output__.writeInt32(14, __v)
      };
      dklen.foreach { __v =>
        _output__.writeInt32(15, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): api.ScryptChallenge = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __id = this.id
      var __n = this.n
      var __p = this.p
      var __r = this.r
      var __salt = this.salt
      var __hash = this.hash
      var __domain = this.domain
      var __dklen = this.dklen
      var __answer = this.answer
      var __created = this.created
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 74 =>
            __accountId = Option(_input__.readString())
          case 18 =>
            __id = Option(_input__.readString())
          case 24 =>
            __n = Option(_input__.readInt32())
          case 32 =>
            __p = Option(_input__.readInt32())
          case 40 =>
            __r = Option(_input__.readInt32())
          case 50 =>
            __salt = Option(_input__.readString())
          case 66 =>
            __hash = Option(_input__.readString())
          case 112 =>
            __domain = Option(_input__.readInt32())
          case 120 =>
            __dklen = Option(_input__.readInt32())
          case 82 =>
            __answer = Option(_input__.readString())
          case 88 =>
            __created = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      api.ScryptChallenge(
          ctx = __ctx,
          accountId = __accountId,
          id = __id,
          n = __n,
          p = __p,
          r = __r,
          salt = __salt,
          hash = __hash,
          domain = __domain,
          dklen = __dklen,
          answer = __answer,
          created = __created
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: ScryptChallenge = copy(ctx = None)
    def withCtx(__v: common.Context): ScryptChallenge = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: ScryptChallenge = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): ScryptChallenge = copy(accountId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: ScryptChallenge = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): ScryptChallenge = copy(id = Option(__v))
    def getN: _root_.scala.Int = n.getOrElse(0)
    def clearN: ScryptChallenge = copy(n = None)
    def withN(__v: _root_.scala.Int): ScryptChallenge = copy(n = Option(__v))
    def getP: _root_.scala.Int = p.getOrElse(0)
    def clearP: ScryptChallenge = copy(p = None)
    def withP(__v: _root_.scala.Int): ScryptChallenge = copy(p = Option(__v))
    def getR: _root_.scala.Int = r.getOrElse(0)
    def clearR: ScryptChallenge = copy(r = None)
    def withR(__v: _root_.scala.Int): ScryptChallenge = copy(r = Option(__v))
    def getSalt: _root_.scala.Predef.String = salt.getOrElse("")
    def clearSalt: ScryptChallenge = copy(salt = None)
    def withSalt(__v: _root_.scala.Predef.String): ScryptChallenge = copy(salt = Option(__v))
    def getHash: _root_.scala.Predef.String = hash.getOrElse("")
    def clearHash: ScryptChallenge = copy(hash = None)
    def withHash(__v: _root_.scala.Predef.String): ScryptChallenge = copy(hash = Option(__v))
    def getDomain: _root_.scala.Int = domain.getOrElse(0)
    def clearDomain: ScryptChallenge = copy(domain = None)
    def withDomain(__v: _root_.scala.Int): ScryptChallenge = copy(domain = Option(__v))
    def getDklen: _root_.scala.Int = dklen.getOrElse(0)
    def clearDklen: ScryptChallenge = copy(dklen = None)
    def withDklen(__v: _root_.scala.Int): ScryptChallenge = copy(dklen = Option(__v))
    def getAnswer: _root_.scala.Predef.String = answer.getOrElse("")
    def clearAnswer: ScryptChallenge = copy(answer = None)
    def withAnswer(__v: _root_.scala.Predef.String): ScryptChallenge = copy(answer = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: ScryptChallenge = copy(created = None)
    def withCreated(__v: _root_.scala.Long): ScryptChallenge = copy(created = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 9 => accountId.orNull
        case 2 => id.orNull
        case 3 => n.orNull
        case 4 => p.orNull
        case 5 => r.orNull
        case 6 => salt.orNull
        case 8 => hash.orNull
        case 14 => domain.orNull
        case 15 => dklen.orNull
        case 10 => answer.orNull
        case 11 => created.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => n.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => p.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => r.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => salt.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => hash.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => domain.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => dklen.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => answer.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = api.ScryptChallenge
}

object ScryptChallenge extends scalapb.GeneratedMessageCompanion[api.ScryptChallenge] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[api.ScryptChallenge] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): api.ScryptChallenge = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    api.ScryptChallenge(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[api.ScryptChallenge] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      api.ScryptChallenge(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = api.ScryptChallenge(
  )
  implicit class ScryptChallengeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, api.ScryptChallenge]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, api.ScryptChallenge](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def n: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getN)((c_, f_) => c_.copy(n = Option(f_)))
    def optionalN: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.n)((c_, f_) => c_.copy(n = f_))
    def p: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getP)((c_, f_) => c_.copy(p = Option(f_)))
    def optionalP: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.p)((c_, f_) => c_.copy(p = f_))
    def r: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getR)((c_, f_) => c_.copy(r = Option(f_)))
    def optionalR: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.r)((c_, f_) => c_.copy(r = f_))
    def salt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSalt)((c_, f_) => c_.copy(salt = Option(f_)))
    def optionalSalt: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.salt)((c_, f_) => c_.copy(salt = f_))
    def hash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getHash)((c_, f_) => c_.copy(hash = Option(f_)))
    def optionalHash: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
    def domain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDomain)((c_, f_) => c_.copy(domain = Option(f_)))
    def optionalDomain: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.domain)((c_, f_) => c_.copy(domain = f_))
    def dklen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDklen)((c_, f_) => c_.copy(dklen = Option(f_)))
    def optionalDklen: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.dklen)((c_, f_) => c_.copy(dklen = f_))
    def answer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnswer)((c_, f_) => c_.copy(answer = Option(f_)))
    def optionalAnswer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.answer)((c_, f_) => c_.copy(answer = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 9
  final val ID_FIELD_NUMBER = 2
  final val N_FIELD_NUMBER = 3
  final val P_FIELD_NUMBER = 4
  final val R_FIELD_NUMBER = 5
  final val SALT_FIELD_NUMBER = 6
  final val HASH_FIELD_NUMBER = 8
  final val DOMAIN_FIELD_NUMBER = 14
  final val DKLEN_FIELD_NUMBER = 15
  final val ANSWER_FIELD_NUMBER = 10
  final val CREATED_FIELD_NUMBER = 11
}
