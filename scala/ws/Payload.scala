// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ws

@SerialVersionUID(0L)
final case class Payload(
    id: _root_.scala.Long = 0L,
    message: _root_.scala.Predef.String = "",
    error: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Payload] with scalapb.lenses.Updatable[Payload] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, id) }
      if (message != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, message) }
      if (error != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, error) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = message
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = error
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ws.Payload = {
      var __id = this.id
      var __message = this.message
      var __error = this.error
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 24 =>
            __id = _input__.readInt64()
          case 34 =>
            __message = _input__.readString()
          case 42 =>
            __error = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      ws.Payload(
          id = __id,
          message = __message,
          error = __error
      )
    }
    def withId(__v: _root_.scala.Long): Payload = copy(id = __v)
    def withMessage(__v: _root_.scala.Predef.String): Payload = copy(message = __v)
    def withError(__v: _root_.scala.Predef.String): Payload = copy(error = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = error
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => _root_.scalapb.descriptors.PLong(id)
        case 4 => _root_.scalapb.descriptors.PString(message)
        case 5 => _root_.scalapb.descriptors.PString(error)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ws.Payload
}

object Payload extends scalapb.GeneratedMessageCompanion[ws.Payload] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ws.Payload] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ws.Payload = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    ws.Payload(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ws.Payload] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      ws.Payload(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WsProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WsProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ws.Payload(
  )
  implicit class PayloadLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ws.Payload]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ws.Payload](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def error: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.error)((c_, f_) => c_.copy(error = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val MESSAGE_FIELD_NUMBER = 4
  final val ERROR_FIELD_NUMBER = 5
}
