// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package file

@SerialVersionUID(0L)
final case class AllType(
    fh: scala.Option[file.FileHeader] = None,
    ps: scala.Option[file.PresignResult] = None,
    f: scala.Option[file.File] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (fh.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fh.get.serializedSize) + fh.get.serializedSize }
      if (ps.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ps.get.serializedSize) + ps.get.serializedSize }
      if (f.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(f.get.serializedSize) + f.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      fh.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ps.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      f.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): file.AllType = {
      var __fh = this.fh
      var __ps = this.ps
      var __f = this.f
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __fh = Option(_root_.scalapb.LiteParser.readMessage(_input__, __fh.getOrElse(file.FileHeader.defaultInstance)))
          case 26 =>
            __ps = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ps.getOrElse(file.PresignResult.defaultInstance)))
          case 34 =>
            __f = Option(_root_.scalapb.LiteParser.readMessage(_input__, __f.getOrElse(file.File.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      file.AllType(
          fh = __fh,
          ps = __ps,
          f = __f
      )
    }
    def getFh: file.FileHeader = fh.getOrElse(file.FileHeader.defaultInstance)
    def clearFh: AllType = copy(fh = None)
    def withFh(__v: file.FileHeader): AllType = copy(fh = Option(__v))
    def getPs: file.PresignResult = ps.getOrElse(file.PresignResult.defaultInstance)
    def clearPs: AllType = copy(ps = None)
    def withPs(__v: file.PresignResult): AllType = copy(ps = Option(__v))
    def getF: file.File = f.getOrElse(file.File.defaultInstance)
    def clearF: AllType = copy(f = None)
    def withF(__v: file.File): AllType = copy(f = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => fh.orNull
        case 3 => ps.orNull
        case 4 => f.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => fh.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => ps.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => f.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = file.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[file.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[file.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): file.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    file.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[file.FileHeader]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[file.PresignResult]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[file.File]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[file.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      file.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[file.FileHeader]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[file.PresignResult]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[file.File]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FileProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FileProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = file.FileHeader
      case 3 => __out = file.PresignResult
      case 4 => __out = file.File
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = file.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, file.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, file.AllType](_l) {
    def fh: _root_.scalapb.lenses.Lens[UpperPB, file.FileHeader] = field(_.getFh)((c_, f_) => c_.copy(fh = Option(f_)))
    def optionalFh: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[file.FileHeader]] = field(_.fh)((c_, f_) => c_.copy(fh = f_))
    def ps: _root_.scalapb.lenses.Lens[UpperPB, file.PresignResult] = field(_.getPs)((c_, f_) => c_.copy(ps = Option(f_)))
    def optionalPs: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[file.PresignResult]] = field(_.ps)((c_, f_) => c_.copy(ps = f_))
    def f: _root_.scalapb.lenses.Lens[UpperPB, file.File] = field(_.getF)((c_, f_) => c_.copy(f = Option(f_)))
    def optionalF: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[file.File]] = field(_.f)((c_, f_) => c_.copy(f = f_))
  }
  final val FH_FIELD_NUMBER = 2
  final val PS_FIELD_NUMBER = 3
  final val F_FIELD_NUMBER = 4
}
