// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package email

@SerialVersionUID(0L)
final case class Attachment(
    url: _root_.scala.Predef.String = "",
    name: _root_.scala.Predef.String = "",
    mimetype: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Attachment] with scalapb.lenses.Updatable[Attachment] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (url != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, url) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name) }
      if (mimetype != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, mimetype) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = url
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = mimetype
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): email.Attachment = {
      var __url = this.url
      var __name = this.name
      var __mimetype = this.mimetype
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __url = _input__.readString()
          case 26 =>
            __name = _input__.readString()
          case 34 =>
            __mimetype = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      email.Attachment(
          url = __url,
          name = __name,
          mimetype = __mimetype
      )
    }
    def withUrl(__v: _root_.scala.Predef.String): Attachment = copy(url = __v)
    def withName(__v: _root_.scala.Predef.String): Attachment = copy(name = __v)
    def withMimetype(__v: _root_.scala.Predef.String): Attachment = copy(mimetype = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = url
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = mimetype
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PString(url)
        case 3 => _root_.scalapb.descriptors.PString(name)
        case 4 => _root_.scalapb.descriptors.PString(mimetype)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = email.Attachment
}

object Attachment extends scalapb.GeneratedMessageCompanion[email.Attachment] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[email.Attachment] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): email.Attachment = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    email.Attachment(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[email.Attachment] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      email.Attachment(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EmailProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EmailProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = email.Attachment(
  )
  implicit class AttachmentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, email.Attachment]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, email.Attachment](_l) {
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def mimetype: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.mimetype)((c_, f_) => c_.copy(mimetype = f_))
  }
  final val URL_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val MIMETYPE_FIELD_NUMBER = 4
}
