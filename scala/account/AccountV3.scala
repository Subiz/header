// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

@SerialVersionUID(0L)
final case class AccountV3(
    ctx: scala.Option[common.Context] = None,
    account: scala.Option[_root_.account.Account] = None,
    owner: scala.Option[_root_.account.Agent] = None,
    subscription: scala.Option[payment.Subscription] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AccountV3] with scalapb.lenses.Updatable[AccountV3] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (account.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(account.get.serializedSize) + account.get.serializedSize }
      if (owner.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(owner.get.serializedSize) + owner.get.serializedSize }
      if (subscription.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(subscription.get.serializedSize) + subscription.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      account.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      owner.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      subscription.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.account.AccountV3 = {
      var __ctx = this.ctx
      var __account = this.account
      var __owner = this.owner
      var __subscription = this.subscription
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __account = Option(_root_.scalapb.LiteParser.readMessage(_input__, __account.getOrElse(_root_.account.Account.defaultInstance)))
          case 26 =>
            __owner = Option(_root_.scalapb.LiteParser.readMessage(_input__, __owner.getOrElse(_root_.account.Agent.defaultInstance)))
          case 34 =>
            __subscription = Option(_root_.scalapb.LiteParser.readMessage(_input__, __subscription.getOrElse(payment.Subscription.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      _root_.account.AccountV3(
          ctx = __ctx,
          account = __account,
          owner = __owner,
          subscription = __subscription
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: AccountV3 = copy(ctx = None)
    def withCtx(__v: common.Context): AccountV3 = copy(ctx = Option(__v))
    def getAccount: _root_.account.Account = account.getOrElse(_root_.account.Account.defaultInstance)
    def clearAccount: AccountV3 = copy(account = None)
    def withAccount(__v: _root_.account.Account): AccountV3 = copy(account = Option(__v))
    def getOwner: _root_.account.Agent = owner.getOrElse(_root_.account.Agent.defaultInstance)
    def clearOwner: AccountV3 = copy(owner = None)
    def withOwner(__v: _root_.account.Agent): AccountV3 = copy(owner = Option(__v))
    def getSubscription: payment.Subscription = subscription.getOrElse(payment.Subscription.defaultInstance)
    def clearSubscription: AccountV3 = copy(subscription = None)
    def withSubscription(__v: payment.Subscription): AccountV3 = copy(subscription = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => account.orNull
        case 3 => owner.orNull
        case 4 => subscription.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => account.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => owner.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => subscription.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.account.AccountV3
}

object AccountV3 extends scalapb.GeneratedMessageCompanion[account.AccountV3] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[account.AccountV3] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): account.AccountV3 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    account.AccountV3(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.account.Account]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.account.Agent]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[payment.Subscription]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[account.AccountV3] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      account.AccountV3(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.account.Account]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.account.Agent]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[payment.Subscription]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AccountProto.javaDescriptor.getMessageTypes.get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AccountProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 2 => __out = account.Account
      case 3 => __out = account.Agent
      case 4 => __out = payment.Subscription
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = account.AccountV3(
  )
  implicit class AccountV3Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, account.AccountV3]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, account.AccountV3](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def account: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Account] = field(_.getAccount)((c_, f_) => c_.copy(account = Option(f_)))
    def optionalAccount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Account]] = field(_.account)((c_, f_) => c_.copy(account = f_))
    def owner: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Agent] = field(_.getOwner)((c_, f_) => c_.copy(owner = Option(f_)))
    def optionalOwner: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Agent]] = field(_.owner)((c_, f_) => c_.copy(owner = f_))
    def subscription: _root_.scalapb.lenses.Lens[UpperPB, payment.Subscription] = field(_.getSubscription)((c_, f_) => c_.copy(subscription = Option(f_)))
    def optionalSubscription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Subscription]] = field(_.subscription)((c_, f_) => c_.copy(subscription = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_FIELD_NUMBER = 2
  final val OWNER_FIELD_NUMBER = 3
  final val SUBSCRIPTION_FIELD_NUMBER = 4
}
