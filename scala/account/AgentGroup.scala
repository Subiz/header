// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

/** @param members
  *   members is list of 10 agents in group
  */
@SerialVersionUID(0L)
final case class AgentGroup(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    logoUrl: scala.Option[_root_.scala.Predef.String] = None,
    members: _root_.scala.collection.Seq[account.Agent] = _root_.scala.collection.Seq.empty,
    created: scala.Option[_root_.scala.Long] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    membersCount: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AgentGroup] with scalapb.lenses.Updatable[AgentGroup] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, name.get) }
      if (logoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, logoUrl.get) }
      members.foreach(members => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(members.serializedSize) + members.serializedSize)
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, created.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, modified.get) }
      if (membersCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, membersCount.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      name.foreach { __v =>
        _output__.writeString(4, __v)
      };
      logoUrl.foreach { __v =>
        _output__.writeString(5, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      members.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      modified.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      membersCount.foreach { __v =>
        _output__.writeInt32(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): account.AgentGroup = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __name = this.name
      var __logoUrl = this.logoUrl
      val __members = (_root_.scala.collection.immutable.Vector.newBuilder[account.Agent] ++= this.members)
      var __created = this.created
      var __modified = this.modified
      var __membersCount = this.membersCount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __name = Option(_input__.readString())
          case 42 =>
            __logoUrl = Option(_input__.readString())
          case 58 =>
            __members += _root_.scalapb.LiteParser.readMessage(_input__, account.Agent.defaultInstance)
          case 48 =>
            __created = Option(_input__.readInt64())
          case 64 =>
            __modified = Option(_input__.readInt64())
          case 72 =>
            __membersCount = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      account.AgentGroup(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          name = __name,
          logoUrl = __logoUrl,
          members = __members.result(),
          created = __created,
          modified = __modified,
          membersCount = __membersCount
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: AgentGroup = copy(ctx = None)
    def withCtx(__v: common.Context): AgentGroup = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: AgentGroup = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): AgentGroup = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: AgentGroup = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): AgentGroup = copy(accountId = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: AgentGroup = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): AgentGroup = copy(name = Option(__v))
    def getLogoUrl: _root_.scala.Predef.String = logoUrl.getOrElse("")
    def clearLogoUrl: AgentGroup = copy(logoUrl = None)
    def withLogoUrl(__v: _root_.scala.Predef.String): AgentGroup = copy(logoUrl = Option(__v))
    def clearMembers = copy(members = _root_.scala.collection.Seq.empty)
    def addMembers(__vs: account.Agent*): AgentGroup = addAllMembers(__vs)
    def addAllMembers(__vs: TraversableOnce[account.Agent]): AgentGroup = copy(members = members ++ __vs)
    def withMembers(__v: _root_.scala.collection.Seq[account.Agent]): AgentGroup = copy(members = __v)
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: AgentGroup = copy(created = None)
    def withCreated(__v: _root_.scala.Long): AgentGroup = copy(created = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: AgentGroup = copy(modified = None)
    def withModified(__v: _root_.scala.Long): AgentGroup = copy(modified = Option(__v))
    def getMembersCount: _root_.scala.Int = membersCount.getOrElse(0)
    def clearMembersCount: AgentGroup = copy(membersCount = None)
    def withMembersCount(__v: _root_.scala.Int): AgentGroup = copy(membersCount = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => name.orNull
        case 5 => logoUrl.orNull
        case 7 => members
        case 6 => created.orNull
        case 8 => modified.orNull
        case 9 => membersCount.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => logoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(members.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => membersCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = account.AgentGroup
}

object AgentGroup extends scalapb.GeneratedMessageCompanion[account.AgentGroup] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[account.AgentGroup] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): account.AgentGroup = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    account.AgentGroup(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[account.Agent]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[account.AgentGroup] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      account.AgentGroup(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[account.Agent]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AccountProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AccountProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 7 => __out = account.Agent
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = account.AgentGroup(
  )
  implicit class AgentGroupLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, account.AgentGroup]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, account.AgentGroup](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLogoUrl)((c_, f_) => c_.copy(logoUrl = Option(f_)))
    def optionalLogoUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def members: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[account.Agent]] = field(_.members)((c_, f_) => c_.copy(members = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def membersCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getMembersCount)((c_, f_) => c_.copy(membersCount = Option(f_)))
    def optionalMembersCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.membersCount)((c_, f_) => c_.copy(membersCount = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val NAME_FIELD_NUMBER = 4
  final val LOGO_URL_FIELD_NUMBER = 5
  final val MEMBERS_FIELD_NUMBER = 7
  final val CREATED_FIELD_NUMBER = 6
  final val MODIFIED_FIELD_NUMBER = 8
  final val MEMBERS_COUNT_FIELD_NUMBER = 9
}
