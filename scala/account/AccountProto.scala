// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

object AccountProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    auth.AuthProto,
    common.CommonProto,
    lang.LangProto,
    payment.PaymentProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    account.Agent,
    account.Invitation,
    account.AgentGroup,
    account.ResetPasswordRequest,
    account.AgentPerm,
    account.Account,
    account.GroupMember,
    account.CreateAccountRequest,
    account.LoginRequest,
    account.Agents,
    account.NewPassword,
    account.AgentGroups,
    account.Token,
    account.AccountV3,
    account.ConfirmEmail,
    account.InviteEmail,
    account.ResetPasswordEmail,
    account.PasswordChangedEmail,
    account.AccountConfirmSuccessEmail
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjBiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci9hY2NvdW50L2FjY291bnQucHJvdG8SB2FjY291bnQaKmJpdGJ1Y2tldC5vc
  mcvc3ViaXovaGVhZGVyL2F1dGgvYXV0aC5wcm90bxouYml0YnVja2V0Lm9yZy9zdWJpei9oZWFkZXIvY29tbW9uL2NvbW1vbi5wc
  m90bxoqYml0YnVja2V0Lm9yZy9zdWJpei9oZWFkZXIvbGFuZy9sYW5nLnByb3RvGjBiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlc
  i9wYXltZW50L3BheW1lbnQucHJvdG8i+wYKBUFnZW50EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYA
  iABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIaCghmdWxsbmFtZRgEIAEoCVIIZnVsbG5hbWUSFAoFZW1ha
  WwYBSABKAlSBWVtYWlsEhYKBmVtYWlscxgGIAMoCVIGZW1haWxzEhYKBnBob25lcxgHIAMoCVIGcGhvbmVzEhQKBXBob25lGAggA
  SgJUgVwaG9uZRIZCghpc19vd25lchgKIAEoCFIHaXNPd25lchIbCglqb2JfdGl0bGUYCyABKAlSCGpvYlRpdGxlEhYKBmdlbmRlc
  hgMIAEoCVIGZ2VuZGVyEh0KCmF2YXRhcl91cmwYDSABKAlSCWF2YXRhclVybBISCgRsYW5nGA4gASgJUgRsYW5nEhoKCGxvY2F0a
  W9uGA8gASgJUghsb2NhdGlvbhIaCgh0aW1lem9uZRgQIAEoCVIIdGltZXpvbmUSLQoSZW5jcnlwdGVkX3Bhc3N3b3JkGBEgASgJU
  hFlbmNyeXB0ZWRQYXNzd29yZBIWCgZqb2luZWQYFCABKANSBmpvaW5lZBIdCgppbnZpdGVkX2J5GBUgASgJUglpbnZpdGVkQnkSF
  AoFc3RhdGUYFiABKAlSBXN0YXRlEikKEHBhc3N3b3JkX2NoYW5nZWQYFyABKANSD3Bhc3N3b3JkQ2hhbmdlZBISCgRzZWVuGBggA
  SgDUgRzZWVuEhoKCG1vZGlmaWVkGBkgASgDUghtb2RpZmllZBIkCgZtZXRob2QYGyABKAsyDC5hdXRoLk1ldGhvZFIGbWV0aG9kE
  ioKB2FjY291bnQYHCABKAsyEC5hY2NvdW50LkFjY291bnRSB2FjY291bnQSIQoMY291bnRyeV9jb2RlGB0gASgJUgtjb3VudHJ5Q
  29kZRIZCgh2M19zdGF0ZRgeIAEoBVIHdjNTdGF0ZSJECgZHZW5kZXISCQoFdW5zZXQQABIICgRtYWxlEAESCgoGZmVtYWxlEAISD
  AoIYmlzZXh1YWwQAxILCgdhc2V4dWFsEAQiQAoKQWdlbnRTdGF0ZRILCgdwZW5kaW5nEAASCgoGYWN0aXZlEAESDAoIaW5hY3Rpd
  mUQAhILCgdkZWxldGVkEAMiuwIKCkludml0YXRpb24SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJpZBgCI
  AEoCVICaWQSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhcKB2Zyb21faWQYBCABKAlSBmZyb21JZBIUCgVlbWFpbBgFI
  AEoCVIFZW1haWwSGQoIYWdlbnRfaWQYBiABKAlSB2FnZW50SWQSEgoEc2VudBgHIAEoA1IEc2VudBIYCgdyZXBsaWVkGAggASgDU
  gdyZXBsaWVkEiUKDmFnZW50X2Z1bGxuYW1lGAkgASgJUg1hZ2VudEZ1bGxuYW1lEiYKD2FnZW50X2pvYl90aXRsZRgKIAEoCVINY
  WdlbnRKb2JUaXRsZRIUCgV0b2tlbhgLIAEoCVIFdG9rZW4ikgIKCkFnZW50R3JvdXASIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvb
  nRleHRSA2N0eBIOCgJpZBgCIAEoCVICaWQSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhIKBG5hbWUYBCABKAlSBG5hb
  WUSGQoIbG9nb191cmwYBSABKAlSB2xvZ29VcmwSKAoHbWVtYmVycxgHIAMoCzIOLmFjY291bnQuQWdlbnRSB21lbWJlcnMSGAoHY
  3JlYXRlZBgGIAEoA1IHY3JlYXRlZBIaCghtb2RpZmllZBgIIAEoA1IIbW9kaWZpZWQSIwoNbWVtYmVyc19jb3VudBgJIAEoBVIMb
  WVtYmVyc0NvdW50Ik8KFFJlc2V0UGFzc3dvcmRSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSFAoFZ
  W1haWwYAiABKAlSBWVtYWlsIo4BCglBZ2VudFBlcm0SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2Nvd
  W50X2lkGAIgASgJUglhY2NvdW50SWQSGQoIYWdlbnRfaWQYAyABKAlSB2FnZW50SWQSJAoGbWV0aG9kGAQgASgLMgwuYXV0aC5NZ
  XRob2RSBm1ldGhvZCLRBQoHQWNjb3VudBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAIgASgJUgJpZ
  BISCgRuYW1lGAMgASgJUgRuYW1lEhkKCGxvZ29fdXJsGAUgASgJUgdsb2dvVXJsEhkKCG93bmVyX2lkGAYgASgJUgdvd25lcklkE
  hQKBXN0YXRlGAcgASgJUgVzdGF0ZRIYCgdjcmVhdGVkGAggASgDUgdjcmVhdGVkEhwKCWNvbmZpcm1lZBgJIAEoA1IJY29uZmlyb
  WVkEhoKCG1vZGlmaWVkGAogASgDUghtb2RpZmllZBIWCgZzbG9nYW4YDCABKAlSBnNsb2dhbhIdCgpyZWZlcmVyX2lkGAsgASgJU
  glyZWZlcmVySWQSEgoEY2l0eRgOIAEoCVIEY2l0eRIZCgh6aXBfY29kZRgQIAEoBVIHemlwQ29kZRIVCgZ0YXhfaWQYESABKAlSB
  XRheElkEhoKCGZhY2Vib29rGBIgASgJUghmYWNlYm9vaxIYCgd0d2l0dGVyGBYgASgJUgd0d2l0dGVyEhQKBXBob25lGBMgASgJU
  gVwaG9uZRIYCgdhZGRyZXNzGBQgASgJUgdhZGRyZXNzEhAKA3VybBgVIAEoCVIDdXJsEhIKBGxhbmcYFyABKAlSBGxhbmcSIQoMc
  mVmZXJlcl9mcm9tGBggASgJUgtyZWZlcmVyRnJvbRIaCgh0aW1lem9uZRgaIAEoCVIIdGltZXpvbmUSJAoFbGltaXQYGSABKAsyD
  i5wYXltZW50LkxpbWl0UgVsaW1pdBIYCgdjb3VudHJ5GBsgASgJUgdjb3VudHJ5EhkKCHYzX3N0YXRlGBwgASgFUgd2M1N0YXRlI
  jwKBVN0YXRlEgsKB3BlbmRpbmcQABINCglhY3RpdmF0ZWQQARIKCgZsb2NrZWQQAhILCgdkZWxldGVkEAMihQEKC0dyb3VwTWVtY
  mVyEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhkKCGdyb
  3VwX2lkGAMgASgJUgdncm91cElkEhkKCGFnZW50X2lkGAQgASgJUgdhZ2VudElkItMCChRDcmVhdGVBY2NvdW50UmVxdWVzdBIhC
  gNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhoKCGZ1bGxuYW1lGAIgASgJUghmdWxsbmFtZRIUCgVlbWFpbBgDIAEoC
  VIFZW1haWwSEgoEbGFuZxgEIAEoCVIEbGFuZxIaCghwYXNzd29yZBgFIAEoCVIIcGFzc3dvcmQSIQoMYWNjb3VudF9uYW1lGAYgA
  SgJUgthY2NvdW50TmFtZRIfCgthY2NvdW50X3VybBgHIAEoCVIKYWNjb3VudFVybBIdCgphdmF0YXJfdXJsGAggASgJUglhdmF0Y
  XJVcmwSGgoIdGltZXpvbmUYCSABKAlSCHRpbWV6b25lEhQKBXBob25lGAogASgJUgVwaG9uZRIhCgxjb3VudHJ5X2NvZGUYCyABK
  AlSC2NvdW50cnlDb2RlImMKDExvZ2luUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhQKBWVtYWlsG
  AIgASgJUgVlbWFpbBIaCghwYXNzd29yZBgDIAEoCVIIcGFzc3dvcmQiUwoGQWdlbnRzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db
  250ZXh0UgNjdHgSJgoGQWdlbnRzGAIgAygLMg4uYWNjb3VudC5BZ2VudFIGQWdlbnRzIqIBCgtOZXdQYXNzd29yZBIhCgNjdHgYA
  SABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhQKBXRva2VuGAIgASgJUgV0b2tlbhIhCgxuZXdfcGFzc3dvcmQYAyABKAlSC25ld
  1Bhc3N3b3JkEiEKDG9sZF9wYXNzd29yZBgFIAEoCVILb2xkUGFzc3dvcmQSFAoFZW1haWwYCCABKAlSBWVtYWlsIl0KC0FnZW50R
  3JvdXBzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSKwoGR3JvdXBzGAIgAygLMhMuYWNjb3VudC5BZ2VudEdyb
  3VwUgZHcm91cHMidgoFVG9rZW4SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIVCgZpc19zZXQYAiABKAhSBWlzU
  2V0EhQKBXRva2VuGAMgASgJUgV0b2tlbhIdCgphY2NvdW50X2lkGAQgASgJUglhY2NvdW50SWQiuwEKCUFjY291bnRWMxIhCgNjd
  HgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EioKB2FjY291bnQYAiABKAsyEC5hY2NvdW50LkFjY291bnRSB2FjY291bnQSJ
  AoFb3duZXIYAyABKAsyDi5hY2NvdW50LkFnZW50UgVvd25lchI5CgxzdWJzY3JpcHRpb24YBCABKAsyFS5wYXltZW50LlN1YnNjc
  mlwdGlvblIMc3Vic2NyaXB0aW9uIqMCCgxDb25maXJtRW1haWwSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOC
  gJ0bxgCIAEoCVICdG8SHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhkKCG93bmVyX2lkGAQgASgJUgdvd25lcklkEhQKB
  XRva2VuGAUgASgJUgV0b2tlbhIdCgpleHBpcmVkX2luGAYgASgDUglleHBpcmVkSW4SIQoMYWNjb3VudF9uYW1lGAcgASgJUgthY
  2NvdW50TmFtZRIbCgRsYW5nGAggASgOMgcubGFuZy5MUgRsYW5nEh0KCm93bmVyX25hbWUYCSABKAlSCW93bmVyTmFtZRISCgRmc
  m9tGAogASgJUgRmcm9tIuwCCgtJbnZpdGVFbWFpbBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAnRvGAIgA
  SgJUgJ0bxIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGwoJc2VuZGVyX2lkGAQgASgJUghzZW5kZXJJZBIdCgpleHBpc
  mVkX2luGAUgASgDUglleHBpcmVkSW4SFAoFdG9rZW4YBiABKAlSBXRva2VuEhsKBGxhbmcYCCABKA4yBy5sYW5nLkxSBGxhbmcSG
  goIZnVsbG5hbWUYCSABKAlSCGZ1bGxuYW1lEh8KC3NlbmRlcl9uYW1lGAogASgJUgpzZW5kZXJOYW1lEiEKDGFjY291bnRfbmFtZ
  RgLIAEoCVILYWNjb3VudE5hbWUSKAoQYWNjb3VudF9sb2dvX3VybBgMIAEoCVIOYWNjb3VudExvZ29VcmwSEgoEZnJvbRgOIAEoC
  VIEZnJvbSKGAgoSUmVzZXRQYXNzd29yZEVtYWlsEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSEgoEZnJvbRgCI
  AEoCVIEZnJvbRIOCgJ0bxgDIAEoCVICdG8SHQoKZXhwaXJlZF9pbhgEIAEoA1IJZXhwaXJlZEluEhQKBXRva2VuGAUgASgJUgV0b
  2tlbhIdCgphY2NvdW50X2lkGAYgASgJUglhY2NvdW50SWQSGQoIYWdlbnRfaWQYByABKAlSB2FnZW50SWQSHQoKYWdlbnRfbmFtZ
  RgIIAEoCVIJYWdlbnROYW1lEhsKBGxhbmcYCSABKA4yBy5sYW5nLkxSBGxhbmci0wEKFFBhc3N3b3JkQ2hhbmdlZEVtYWlsEiEKA
  2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCdG8YAiABKAlSAnRvEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291b
  nRJZBIZCghhZ2VudF9pZBgEIAEoCVIHYWdlbnRJZBIdCgphZ2VudF9uYW1lGAUgASgJUglhZ2VudE5hbWUSGwoEbGFuZxgHIAEoD
  jIHLmxhbmcuTFIEbGFuZxISCgRmcm9tGAkgASgJUgRmcm9tIo8CChpBY2NvdW50Q29uZmlybVN1Y2Nlc3NFbWFpbBIhCgNjdHgYA
  SABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAnRvGAIgASgJUgJ0bxIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSG
  QoIYWdlbnRfaWQYBCABKAlSB2FnZW50SWQSHQoKYWdlbnRfbmFtZRgFIAEoCVIJYWdlbnROYW1lEhsKBGxhbmcYByABKA4yBy5sY
  W5nLkxSBGxhbmcSEgoEZnJvbRgJIAEoCVIEZnJvbRIbCglmcm9tX3RpbWUYCiABKANSCGZyb21UaW1lEhcKB3RvX3RpbWUYCyABK
  ANSBnRvVGltZSqHBgoFRXZlbnQSFQoQQWNjb3VudFJlcXVlc3RlZBDoBxISCg1BY2NvdW50U3luY2VkEOkHEhQKD0FjY291bnRWM
  1N5bmNlZBDqBxIVChFBZ2VudEdyb3VwRGVsZXRlZBAAEhIKDkFnZW50TGVmdEdyb3VwEAESFAoQQWdlbnRKb2luZWRHcm91cBACE
  hYKEkFnZW50R3JvdXBVcHNlcnRlZBAEEhEKDUFnZW50VXBzZXJ0ZWQQBhIaChZBZ2VudFBlcm1pc3Npb25VcGRhdGVkEAkSEwoPQ
  WNjb3VudFVwc2VydGVkEA4SFgoSQWNjb3VudFBsYW5VcGRhdGVkEBASFwoTQWNjb3VudFN0YXRlVXBkYXRlZBAREhkKFUFjY291b
  nRDb25maXJtUmVxdWVzdBATEhsKF0hhbmRsZUV4cGlyZWRJbnZpdGF0aW9uEBQSGwoXQWNjb3VudENvbmZpcm1SZXF1ZXN0ZWQQF
  RInCiNBY2NvdW50Q29uZmlybVN1Y2Nlc3NFbWFpbFJlcXVlc3RlZBAZEh0KGUFjY291bnRSZXNldFBhc3N3b3JkRW1haWwQIRIoC
  iRBY2NvdW50UGFzc3dvcmRDaGFuZ2VkRW1haWxSZXF1ZXN0ZWQQIhIWChJBY2NvdW50SW52aXRlRW1haWwQFhISCg5BY2NvdW50R
  GVsZXRlZBAYEhIKDkFjY291bnRDcmVhdGVkEC0SFAoQQWNjb3VudEFjdGl2YXRlZBAuEhYKEkFjY291bnRJbmZvVXBkYXRlZBAvE
  hEKDUFnZW50UmVqZWN0ZWQQChIRCg1BZ2VudEFjY2VwdGVkEAsSEAoMQWdlbnRJbnZpdGVkEA0SEAoMQWdlbnREZWxldGVkEA8SE
  goOQWdlbnRBY3RpdmF0ZWQQMhIUChBBZ2VudERlYWN0aXZhdGVkEDMSFAoQQWdlbnRJbmZvVXBkYXRlZBA7EhQKEEFjY291bnRWM
  0NyZWF0ZWQQPBIaChZBY2NvdW50UGF5bWVudFYzU3luY2VkED8ysgkKCkFjY291bnRNZ3ISNwoLQ3JlYXRlR3JvdXASEy5hY2Nvd
  W50LkFnZW50R3JvdXAaEy5hY2NvdW50LkFnZW50R3JvdXASNwoLVXBkYXRlR3JvdXASEy5hY2NvdW50LkFnZW50R3JvdXAaEy5hY
  2NvdW50LkFnZW50R3JvdXASKwoIR2V0R3JvdXASCi5jb21tb24uSWQaEy5hY2NvdW50LkFnZW50R3JvdXASLgoSR2V0QWdlbnRQZ
  XJtaXNzaW9uEgouY29tbW9uLklkGgwuYXV0aC5NZXRob2QSOQoVVXBkYXRlQWdlbnRQZXJtaXNzaW9uEhIuYWNjb3VudC5BZ2Vud
  FBlcm0aDC5hdXRoLk1ldGhvZBJEChRSZXF1ZXN0UmVzZXRQYXNzd29yZBIdLmFjY291bnQuUmVzZXRQYXNzd29yZFJlcXVlc3QaD
  S5jb21tb24uRW1wdHkSNgoOVXBkYXRlUGFzc3dvcmQSFC5hY2NvdW50Lk5ld1Bhc3N3b3JkGg4uYWNjb3VudC5BZ2VudBItCgtVc
  GRhdGVBZ2VudBIOLmFjY291bnQuQWdlbnQaDi5hY2NvdW50LkFnZW50EikKC0RlbGV0ZUFnZW50EgouY29tbW9uLklkGg4uYWNjb
  3VudC5BZ2VudBI4ChBBY2NlcHRJbnZpdGF0aW9uEhQuYWNjb3VudC5OZXdQYXNzd29yZBoOLmFjY291bnQuQWdlbnQSLwoNR2V0S
  W52aXRhdGlvbhIOLmFjY291bnQuVG9rZW4aDi5hY2NvdW50LkFnZW50Ei0KC0ludml0ZUFnZW50Eg4uYWNjb3VudC5BZ2VudBoOL
  mFjY291bnQuQWdlbnQSJgoIR2V0QWdlbnQSCi5jb21tb24uSWQaDi5hY2NvdW50LkFnZW50EjIKDkNvbmZpcm1BY2NvdW50Eg4uY
  WNjb3VudC5Ub2tlbhoQLmFjY291bnQuQWNjb3VudBIqCgpHZXRBY2NvdW50EgouY29tbW9uLklkGhAuYWNjb3VudC5BY2NvdW50E
  jMKDVVwZGF0ZUFjY291bnQSEC5hY2NvdW50LkFjY291bnQaEC5hY2NvdW50LkFjY291bnQSQAoNQ3JlYXRlQWNjb3VudBIdLmFjY
  291bnQuQ3JlYXRlQWNjb3VudFJlcXVlc3QaEC5hY2NvdW50LkFjY291bnQSKQoKTGlzdEFnZW50cxIKLmNvbW1vbi5JZBoPLmFjY
  291bnQuQWdlbnRzEi8KCkNoZWNrTG9naW4SFS5hY2NvdW50LkxvZ2luUmVxdWVzdBoKLmNvbW1vbi5JZBIoCgtEZWxldGVHcm91c
  BIKLmNvbW1vbi5JZBoNLmNvbW1vbi5FbXB0eRIuCgpMaXN0R3JvdXBzEgouY29tbW9uLklkGhQuYWNjb3VudC5BZ2VudEdyb3Vwc
  xI2Cg9BZGRBZ2VudFRvR3JvdXASFC5hY2NvdW50Lkdyb3VwTWVtYmVyGg0uY29tbW9uLkVtcHR5EjsKFFJlbW92ZUFnZW50RnJvb
  Udyb3VwEhQuYWNjb3VudC5Hcm91cE1lbWJlchoNLmNvbW1vbi5FbXB0eQ=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      auth.AuthProto.javaDescriptor,
      common.CommonProto.javaDescriptor,
      lang.LangProto.javaDescriptor,
      payment.PaymentProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}