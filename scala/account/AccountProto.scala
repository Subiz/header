// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

object AccountProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    auth.AuthProto,
    common.CommonProto,
    lang.LangProto,
    payment.PaymentProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    account.Agent,
    account.Invitation,
    account.AgentGroup,
    account.ResetPasswordRequest,
    account.AgentPerm,
    account.Account,
    account.GroupMember,
    account.CreateAccountRequest,
    account.LoginRequest,
    account.Agents,
    account.NewPassword,
    account.AgentGroups,
    account.Token,
    account.AccountV3,
    account.ConfirmEmail,
    account.InviteEmail,
    account.ResetPasswordEmail,
    account.PasswordChangedEmail,
    account.AccountConfirmSuccessEmail
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjBiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci9hY2NvdW50L2FjY291bnQucHJvdG8SB2FjY291bnQaKmJpdGJ1Y2tldC5vc
  mcvc3ViaXovaGVhZGVyL2F1dGgvYXV0aC5wcm90bxouYml0YnVja2V0Lm9yZy9zdWJpei9oZWFkZXIvY29tbW9uL2NvbW1vbi5wc
  m90bxoqYml0YnVja2V0Lm9yZy9zdWJpei9oZWFkZXIvbGFuZy9sYW5nLnByb3RvGjBiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlc
  i9wYXltZW50L3BheW1lbnQucHJvdG8iqQcKBUFnZW50EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYA
  iABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIaCghmdWxsbmFtZRgEIAEoCVIIZnVsbG5hbWUSFAoFZW1ha
  WwYBSABKAlSBWVtYWlsEhYKBmVtYWlscxgGIAMoCVIGZW1haWxzEhYKBnBob25lcxgHIAMoCVIGcGhvbmVzEhQKBXBob25lGAggA
  SgJUgVwaG9uZRIZCghpc19vd25lchgKIAEoCFIHaXNPd25lchIbCglqb2JfdGl0bGUYCyABKAlSCGpvYlRpdGxlEhYKBmdlbmRlc
  hgMIAEoCVIGZ2VuZGVyEh0KCmF2YXRhcl91cmwYDSABKAlSCWF2YXRhclVybBISCgRsYW5nGA4gASgJUgRsYW5nEhoKCGxvY2F0a
  W9uGA8gASgJUghsb2NhdGlvbhIaCgh0aW1lem9uZRgQIAEoCVIIdGltZXpvbmUSLQoSZW5jcnlwdGVkX3Bhc3N3b3JkGBEgASgJU
  hFlbmNyeXB0ZWRQYXNzd29yZBIWCgZqb2luZWQYFCABKANSBmpvaW5lZBIdCgppbnZpdGVkX2J5GBUgASgJUglpbnZpdGVkQnkSF
  AoFc3RhdGUYFiABKAlSBXN0YXRlEikKEHBhc3N3b3JkX2NoYW5nZWQYFyABKANSD3Bhc3N3b3JkQ2hhbmdlZBISCgRzZWVuGBggA
  SgDUgRzZWVuEhoKCG1vZGlmaWVkGBkgASgDUghtb2RpZmllZBIkCgZtZXRob2QYGyABKAsyDC5hdXRoLk1ldGhvZFIGbWV0aG9kE
  ioKB2FjY291bnQYHCABKAsyEC5hY2NvdW50LkFjY291bnRSB2FjY291bnQSIQoMY291bnRyeV9jb2RlGB0gASgJUgtjb3VudHJ5Q
  29kZRIZCgh2M19zdGF0ZRgeIAEoBVIHdjNTdGF0ZRIsChJ2M19oYXNoZWRfcGFzc3dvcmQYHyABKAlSEHYzSGFzaGVkUGFzc3dvc
  mQiRAoGR2VuZGVyEgkKBXVuc2V0EAASCAoEbWFsZRABEgoKBmZlbWFsZRACEgwKCGJpc2V4dWFsEAMSCwoHYXNleHVhbBAEIkAKC
  kFnZW50U3RhdGUSCwoHcGVuZGluZxAAEgoKBmFjdGl2ZRABEgwKCGluYWN0aXZlEAISCwoHZGVsZXRlZBADIrsCCgpJbnZpdGF0a
  W9uEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYAiABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSC
  WFjY291bnRJZBIXCgdmcm9tX2lkGAQgASgJUgZmcm9tSWQSFAoFZW1haWwYBSABKAlSBWVtYWlsEhkKCGFnZW50X2lkGAYgASgJU
  gdhZ2VudElkEhIKBHNlbnQYByABKANSBHNlbnQSGAoHcmVwbGllZBgIIAEoA1IHcmVwbGllZBIlCg5hZ2VudF9mdWxsbmFtZRgJI
  AEoCVINYWdlbnRGdWxsbmFtZRImCg9hZ2VudF9qb2JfdGl0bGUYCiABKAlSDWFnZW50Sm9iVGl0bGUSFAoFdG9rZW4YCyABKAlSB
  XRva2VuIpICCgpBZ2VudEdyb3VwEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYAiABKAlSAmlkEh0KC
  mFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBISCgRuYW1lGAQgASgJUgRuYW1lEhkKCGxvZ29fdXJsGAUgASgJUgdsb2dvVXJsE
  igKB21lbWJlcnMYByADKAsyDi5hY2NvdW50LkFnZW50UgdtZW1iZXJzEhgKB2NyZWF0ZWQYBiABKANSB2NyZWF0ZWQSGgoIbW9ka
  WZpZWQYCCABKANSCG1vZGlmaWVkEiMKDW1lbWJlcnNfY291bnQYCSABKAVSDG1lbWJlcnNDb3VudCJPChRSZXNldFBhc3N3b3JkU
  mVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhQKBWVtYWlsGAIgASgJUgVlbWFpbCKOAQoJQWdlbnRQZ
  XJtEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhkKCGFnZ
  W50X2lkGAMgASgJUgdhZ2VudElkEiQKBm1ldGhvZBgEIAEoCzIMLmF1dGguTWV0aG9kUgZtZXRob2Qi0QUKB0FjY291bnQSIQoDY
  3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJpZBgCIAEoCVICaWQSEgoEbmFtZRgDIAEoCVIEbmFtZRIZCghsb2dvX
  3VybBgFIAEoCVIHbG9nb1VybBIZCghvd25lcl9pZBgGIAEoCVIHb3duZXJJZBIUCgVzdGF0ZRgHIAEoCVIFc3RhdGUSGAoHY3JlY
  XRlZBgIIAEoA1IHY3JlYXRlZBIcCgljb25maXJtZWQYCSABKANSCWNvbmZpcm1lZBIaCghtb2RpZmllZBgKIAEoA1IIbW9kaWZpZ
  WQSFgoGc2xvZ2FuGAwgASgJUgZzbG9nYW4SHQoKcmVmZXJlcl9pZBgLIAEoCVIJcmVmZXJlcklkEhIKBGNpdHkYDiABKAlSBGNpd
  HkSGQoIemlwX2NvZGUYECABKAVSB3ppcENvZGUSFQoGdGF4X2lkGBEgASgJUgV0YXhJZBIaCghmYWNlYm9vaxgSIAEoCVIIZmFjZ
  WJvb2sSGAoHdHdpdHRlchgWIAEoCVIHdHdpdHRlchIUCgVwaG9uZRgTIAEoCVIFcGhvbmUSGAoHYWRkcmVzcxgUIAEoCVIHYWRkc
  mVzcxIQCgN1cmwYFSABKAlSA3VybBISCgRsYW5nGBcgASgJUgRsYW5nEiEKDHJlZmVyZXJfZnJvbRgYIAEoCVILcmVmZXJlckZyb
  20SGgoIdGltZXpvbmUYGiABKAlSCHRpbWV6b25lEiQKBWxpbWl0GBkgASgLMg4ucGF5bWVudC5MaW1pdFIFbGltaXQSGAoHY291b
  nRyeRgbIAEoCVIHY291bnRyeRIZCgh2M19zdGF0ZRgcIAEoBVIHdjNTdGF0ZSI8CgVTdGF0ZRILCgdwZW5kaW5nEAASDQoJYWN0a
  XZhdGVkEAESCgoGbG9ja2VkEAISCwoHZGVsZXRlZBADIoUBCgtHcm91cE1lbWJlchIhCgNjdHgYASABKAsyDy5jb21tb24uQ29ud
  GV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBIZCghncm91cF9pZBgDIAEoCVIHZ3JvdXBJZBIZCghhZ2Vud
  F9pZBgEIAEoCVIHYWdlbnRJZCLTAgoUQ3JlYXRlQWNjb3VudFJlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA
  2N0eBIaCghmdWxsbmFtZRgCIAEoCVIIZnVsbG5hbWUSFAoFZW1haWwYAyABKAlSBWVtYWlsEhIKBGxhbmcYBCABKAlSBGxhbmcSG
  goIcGFzc3dvcmQYBSABKAlSCHBhc3N3b3JkEiEKDGFjY291bnRfbmFtZRgGIAEoCVILYWNjb3VudE5hbWUSHwoLYWNjb3VudF91c
  mwYByABKAlSCmFjY291bnRVcmwSHQoKYXZhdGFyX3VybBgIIAEoCVIJYXZhdGFyVXJsEhoKCHRpbWV6b25lGAkgASgJUgh0aW1le
  m9uZRIUCgVwaG9uZRgKIAEoCVIFcGhvbmUSIQoMY291bnRyeV9jb2RlGAsgASgJUgtjb3VudHJ5Q29kZSJjCgxMb2dpblJlcXVlc
  3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIUCgVlbWFpbBgCIAEoCVIFZW1haWwSGgoIcGFzc3dvcmQYAyABK
  AlSCHBhc3N3b3JkIlMKBkFnZW50cxIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EiYKBkFnZW50cxgCIAMoCzIOL
  mFjY291bnQuQWdlbnRSBkFnZW50cyKiAQoLTmV3UGFzc3dvcmQSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIUC
  gV0b2tlbhgCIAEoCVIFdG9rZW4SIQoMbmV3X3Bhc3N3b3JkGAMgASgJUgtuZXdQYXNzd29yZBIhCgxvbGRfcGFzc3dvcmQYBSABK
  AlSC29sZFBhc3N3b3JkEhQKBWVtYWlsGAggASgJUgVlbWFpbCJdCgtBZ2VudEdyb3VwcxIhCgNjdHgYASABKAsyDy5jb21tb24uQ
  29udGV4dFIDY3R4EisKBkdyb3VwcxgCIAMoCzITLmFjY291bnQuQWdlbnRHcm91cFIGR3JvdXBzInYKBVRva2VuEiEKA2N0eBgBI
  AEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSFQoGaXNfc2V0GAIgASgIUgVpc1NldBIUCgV0b2tlbhgDIAEoCVIFdG9rZW4SHQoKY
  WNjb3VudF9pZBgEIAEoCVIJYWNjb3VudElkIrsBCglBY2NvdW50VjMSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0e
  BIqCgdhY2NvdW50GAIgASgLMhAuYWNjb3VudC5BY2NvdW50UgdhY2NvdW50EiQKBW93bmVyGAMgASgLMg4uYWNjb3VudC5BZ2Vud
  FIFb3duZXISOQoMc3Vic2NyaXB0aW9uGAQgASgLMhUucGF5bWVudC5TdWJzY3JpcHRpb25SDHN1YnNjcmlwdGlvbiKjAgoMQ29uZ
  mlybUVtYWlsEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCdG8YAiABKAlSAnRvEh0KCmFjY291bnRfaWQYA
  yABKAlSCWFjY291bnRJZBIZCghvd25lcl9pZBgEIAEoCVIHb3duZXJJZBIUCgV0b2tlbhgFIAEoCVIFdG9rZW4SHQoKZXhwaXJlZ
  F9pbhgGIAEoA1IJZXhwaXJlZEluEiEKDGFjY291bnRfbmFtZRgHIAEoCVILYWNjb3VudE5hbWUSGwoEbGFuZxgIIAEoDjIHLmxhb
  mcuTFIEbGFuZxIdCgpvd25lcl9uYW1lGAkgASgJUglvd25lck5hbWUSEgoEZnJvbRgKIAEoCVIEZnJvbSLsAgoLSW52aXRlRW1ha
  WwSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJ0bxgCIAEoCVICdG8SHQoKYWNjb3VudF9pZBgDIAEoCVIJY
  WNjb3VudElkEhsKCXNlbmRlcl9pZBgEIAEoCVIIc2VuZGVySWQSHQoKZXhwaXJlZF9pbhgFIAEoA1IJZXhwaXJlZEluEhQKBXRva
  2VuGAYgASgJUgV0b2tlbhIbCgRsYW5nGAggASgOMgcubGFuZy5MUgRsYW5nEhoKCGZ1bGxuYW1lGAkgASgJUghmdWxsbmFtZRIfC
  gtzZW5kZXJfbmFtZRgKIAEoCVIKc2VuZGVyTmFtZRIhCgxhY2NvdW50X25hbWUYCyABKAlSC2FjY291bnROYW1lEigKEGFjY291b
  nRfbG9nb191cmwYDCABKAlSDmFjY291bnRMb2dvVXJsEhIKBGZyb20YDiABKAlSBGZyb20ihgIKElJlc2V0UGFzc3dvcmRFbWFpb
  BIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhIKBGZyb20YAiABKAlSBGZyb20SDgoCdG8YAyABKAlSAnRvEh0KC
  mV4cGlyZWRfaW4YBCABKANSCWV4cGlyZWRJbhIUCgV0b2tlbhgFIAEoCVIFdG9rZW4SHQoKYWNjb3VudF9pZBgGIAEoCVIJYWNjb
  3VudElkEhkKCGFnZW50X2lkGAcgASgJUgdhZ2VudElkEh0KCmFnZW50X25hbWUYCCABKAlSCWFnZW50TmFtZRIbCgRsYW5nGAkgA
  SgOMgcubGFuZy5MUgRsYW5nItMBChRQYXNzd29yZENoYW5nZWRFbWFpbBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY
  3R4Eg4KAnRvGAIgASgJUgJ0bxIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGQoIYWdlbnRfaWQYBCABKAlSB2FnZW50S
  WQSHQoKYWdlbnRfbmFtZRgFIAEoCVIJYWdlbnROYW1lEhsKBGxhbmcYByABKA4yBy5sYW5nLkxSBGxhbmcSEgoEZnJvbRgJIAEoC
  VIEZnJvbSKPAgoaQWNjb3VudENvbmZpcm1TdWNjZXNzRW1haWwSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOC
  gJ0bxgCIAEoCVICdG8SHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhkKCGFnZW50X2lkGAQgASgJUgdhZ2VudElkEh0KC
  mFnZW50X25hbWUYBSABKAlSCWFnZW50TmFtZRIbCgRsYW5nGAcgASgOMgcubGFuZy5MUgRsYW5nEhIKBGZyb20YCSABKAlSBGZyb
  20SGwoJZnJvbV90aW1lGAogASgDUghmcm9tVGltZRIXCgd0b190aW1lGAsgASgDUgZ0b1RpbWUqhwYKBUV2ZW50EhUKEEFjY291b
  nRSZXF1ZXN0ZWQQ6AcSEgoNQWNjb3VudFN5bmNlZBDpBxIUCg9BY2NvdW50VjNTeW5jZWQQ6gcSFQoRQWdlbnRHcm91cERlbGV0Z
  WQQABISCg5BZ2VudExlZnRHcm91cBABEhQKEEFnZW50Sm9pbmVkR3JvdXAQAhIWChJBZ2VudEdyb3VwVXBzZXJ0ZWQQBBIRCg1BZ
  2VudFVwc2VydGVkEAYSGgoWQWdlbnRQZXJtaXNzaW9uVXBkYXRlZBAJEhMKD0FjY291bnRVcHNlcnRlZBAOEhYKEkFjY291bnRQb
  GFuVXBkYXRlZBAQEhcKE0FjY291bnRTdGF0ZVVwZGF0ZWQQERIZChVBY2NvdW50Q29uZmlybVJlcXVlc3QQExIbChdIYW5kbGVFe
  HBpcmVkSW52aXRhdGlvbhAUEhsKF0FjY291bnRDb25maXJtUmVxdWVzdGVkEBUSJwojQWNjb3VudENvbmZpcm1TdWNjZXNzRW1ha
  WxSZXF1ZXN0ZWQQGRIdChlBY2NvdW50UmVzZXRQYXNzd29yZEVtYWlsECESKAokQWNjb3VudFBhc3N3b3JkQ2hhbmdlZEVtYWlsU
  mVxdWVzdGVkECISFgoSQWNjb3VudEludml0ZUVtYWlsEBYSEgoOQWNjb3VudERlbGV0ZWQQGBISCg5BY2NvdW50Q3JlYXRlZBAtE
  hQKEEFjY291bnRBY3RpdmF0ZWQQLhIWChJBY2NvdW50SW5mb1VwZGF0ZWQQLxIRCg1BZ2VudFJlamVjdGVkEAoSEQoNQWdlbnRBY
  2NlcHRlZBALEhAKDEFnZW50SW52aXRlZBANEhAKDEFnZW50RGVsZXRlZBAPEhIKDkFnZW50QWN0aXZhdGVkEDISFAoQQWdlbnREZ
  WFjdGl2YXRlZBAzEhQKEEFnZW50SW5mb1VwZGF0ZWQQOxIUChBBY2NvdW50VjNDcmVhdGVkEDwSGgoWQWNjb3VudFBheW1lbnRWM
  1N5bmNlZBA/MrIJCgpBY2NvdW50TWdyEjcKC0NyZWF0ZUdyb3VwEhMuYWNjb3VudC5BZ2VudEdyb3VwGhMuYWNjb3VudC5BZ2Vud
  Edyb3VwEjcKC1VwZGF0ZUdyb3VwEhMuYWNjb3VudC5BZ2VudEdyb3VwGhMuYWNjb3VudC5BZ2VudEdyb3VwEisKCEdldEdyb3VwE
  gouY29tbW9uLklkGhMuYWNjb3VudC5BZ2VudEdyb3VwEi4KEkdldEFnZW50UGVybWlzc2lvbhIKLmNvbW1vbi5JZBoMLmF1dGguT
  WV0aG9kEjkKFVVwZGF0ZUFnZW50UGVybWlzc2lvbhISLmFjY291bnQuQWdlbnRQZXJtGgwuYXV0aC5NZXRob2QSRAoUUmVxdWVzd
  FJlc2V0UGFzc3dvcmQSHS5hY2NvdW50LlJlc2V0UGFzc3dvcmRSZXF1ZXN0Gg0uY29tbW9uLkVtcHR5EjYKDlVwZGF0ZVBhc3N3b
  3JkEhQuYWNjb3VudC5OZXdQYXNzd29yZBoOLmFjY291bnQuQWdlbnQSLQoLVXBkYXRlQWdlbnQSDi5hY2NvdW50LkFnZW50Gg4uY
  WNjb3VudC5BZ2VudBIpCgtEZWxldGVBZ2VudBIKLmNvbW1vbi5JZBoOLmFjY291bnQuQWdlbnQSOAoQQWNjZXB0SW52aXRhdGlvb
  hIULmFjY291bnQuTmV3UGFzc3dvcmQaDi5hY2NvdW50LkFnZW50Ei8KDUdldEludml0YXRpb24SDi5hY2NvdW50LlRva2VuGg4uY
  WNjb3VudC5BZ2VudBItCgtJbnZpdGVBZ2VudBIOLmFjY291bnQuQWdlbnQaDi5hY2NvdW50LkFnZW50EiYKCEdldEFnZW50EgouY
  29tbW9uLklkGg4uYWNjb3VudC5BZ2VudBIyCg5Db25maXJtQWNjb3VudBIOLmFjY291bnQuVG9rZW4aEC5hY2NvdW50LkFjY291b
  nQSKgoKR2V0QWNjb3VudBIKLmNvbW1vbi5JZBoQLmFjY291bnQuQWNjb3VudBIzCg1VcGRhdGVBY2NvdW50EhAuYWNjb3VudC5BY
  2NvdW50GhAuYWNjb3VudC5BY2NvdW50EkAKDUNyZWF0ZUFjY291bnQSHS5hY2NvdW50LkNyZWF0ZUFjY291bnRSZXF1ZXN0GhAuY
  WNjb3VudC5BY2NvdW50EikKCkxpc3RBZ2VudHMSCi5jb21tb24uSWQaDy5hY2NvdW50LkFnZW50cxIvCgpDaGVja0xvZ2luEhUuY
  WNjb3VudC5Mb2dpblJlcXVlc3QaCi5jb21tb24uSWQSKAoLRGVsZXRlR3JvdXASCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkSL
  goKTGlzdEdyb3VwcxIKLmNvbW1vbi5JZBoULmFjY291bnQuQWdlbnRHcm91cHMSNgoPQWRkQWdlbnRUb0dyb3VwEhQuYWNjb3Vud
  C5Hcm91cE1lbWJlchoNLmNvbW1vbi5FbXB0eRI7ChRSZW1vdmVBZ2VudEZyb21Hcm91cBIULmFjY291bnQuR3JvdXBNZW1iZXIaD
  S5jb21tb24uRW1wdHk="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      auth.AuthProto.javaDescriptor,
      common.CommonProto.javaDescriptor,
      lang.LangProto.javaDescriptor,
      payment.PaymentProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}