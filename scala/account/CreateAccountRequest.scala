// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

@SerialVersionUID(0L)
final case class CreateAccountRequest(
    ctx: scala.Option[common.Context] = None,
    fullname: scala.Option[_root_.scala.Predef.String] = None,
    email: scala.Option[_root_.scala.Predef.String] = None,
    lang: scala.Option[_root_.scala.Predef.String] = None,
    password: scala.Option[_root_.scala.Predef.String] = None,
    accountName: scala.Option[_root_.scala.Predef.String] = None,
    accountUrl: scala.Option[_root_.scala.Predef.String] = None,
    avatarUrl: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Predef.String] = None,
    phone: scala.Option[_root_.scala.Predef.String] = None,
    countryCode: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[CreateAccountRequest] with scalapb.lenses.Updatable[CreateAccountRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (fullname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, fullname.get) }
      if (email.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, email.get) }
      if (lang.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, lang.get) }
      if (password.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, password.get) }
      if (accountName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, accountName.get) }
      if (accountUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, accountUrl.get) }
      if (avatarUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, avatarUrl.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, timezone.get) }
      if (phone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, phone.get) }
      if (countryCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, countryCode.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      fullname.foreach { __v =>
        _output__.writeString(2, __v)
      };
      email.foreach { __v =>
        _output__.writeString(3, __v)
      };
      lang.foreach { __v =>
        _output__.writeString(4, __v)
      };
      password.foreach { __v =>
        _output__.writeString(5, __v)
      };
      accountName.foreach { __v =>
        _output__.writeString(6, __v)
      };
      accountUrl.foreach { __v =>
        _output__.writeString(7, __v)
      };
      avatarUrl.foreach { __v =>
        _output__.writeString(8, __v)
      };
      timezone.foreach { __v =>
        _output__.writeString(9, __v)
      };
      phone.foreach { __v =>
        _output__.writeString(10, __v)
      };
      countryCode.foreach { __v =>
        _output__.writeString(11, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): account.CreateAccountRequest = {
      var __ctx = this.ctx
      var __fullname = this.fullname
      var __email = this.email
      var __lang = this.lang
      var __password = this.password
      var __accountName = this.accountName
      var __accountUrl = this.accountUrl
      var __avatarUrl = this.avatarUrl
      var __timezone = this.timezone
      var __phone = this.phone
      var __countryCode = this.countryCode
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __fullname = Option(_input__.readString())
          case 26 =>
            __email = Option(_input__.readString())
          case 34 =>
            __lang = Option(_input__.readString())
          case 42 =>
            __password = Option(_input__.readString())
          case 50 =>
            __accountName = Option(_input__.readString())
          case 58 =>
            __accountUrl = Option(_input__.readString())
          case 66 =>
            __avatarUrl = Option(_input__.readString())
          case 74 =>
            __timezone = Option(_input__.readString())
          case 82 =>
            __phone = Option(_input__.readString())
          case 90 =>
            __countryCode = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      account.CreateAccountRequest(
          ctx = __ctx,
          fullname = __fullname,
          email = __email,
          lang = __lang,
          password = __password,
          accountName = __accountName,
          accountUrl = __accountUrl,
          avatarUrl = __avatarUrl,
          timezone = __timezone,
          phone = __phone,
          countryCode = __countryCode
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: CreateAccountRequest = copy(ctx = None)
    def withCtx(__v: common.Context): CreateAccountRequest = copy(ctx = Option(__v))
    def getFullname: _root_.scala.Predef.String = fullname.getOrElse("")
    def clearFullname: CreateAccountRequest = copy(fullname = None)
    def withFullname(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(fullname = Option(__v))
    def getEmail: _root_.scala.Predef.String = email.getOrElse("")
    def clearEmail: CreateAccountRequest = copy(email = None)
    def withEmail(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(email = Option(__v))
    def getLang: _root_.scala.Predef.String = lang.getOrElse("")
    def clearLang: CreateAccountRequest = copy(lang = None)
    def withLang(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(lang = Option(__v))
    def getPassword: _root_.scala.Predef.String = password.getOrElse("")
    def clearPassword: CreateAccountRequest = copy(password = None)
    def withPassword(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(password = Option(__v))
    def getAccountName: _root_.scala.Predef.String = accountName.getOrElse("")
    def clearAccountName: CreateAccountRequest = copy(accountName = None)
    def withAccountName(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(accountName = Option(__v))
    def getAccountUrl: _root_.scala.Predef.String = accountUrl.getOrElse("")
    def clearAccountUrl: CreateAccountRequest = copy(accountUrl = None)
    def withAccountUrl(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(accountUrl = Option(__v))
    def getAvatarUrl: _root_.scala.Predef.String = avatarUrl.getOrElse("")
    def clearAvatarUrl: CreateAccountRequest = copy(avatarUrl = None)
    def withAvatarUrl(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(avatarUrl = Option(__v))
    def getTimezone: _root_.scala.Predef.String = timezone.getOrElse("")
    def clearTimezone: CreateAccountRequest = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(timezone = Option(__v))
    def getPhone: _root_.scala.Predef.String = phone.getOrElse("")
    def clearPhone: CreateAccountRequest = copy(phone = None)
    def withPhone(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(phone = Option(__v))
    def getCountryCode: _root_.scala.Predef.String = countryCode.getOrElse("")
    def clearCountryCode: CreateAccountRequest = copy(countryCode = None)
    def withCountryCode(__v: _root_.scala.Predef.String): CreateAccountRequest = copy(countryCode = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => fullname.orNull
        case 3 => email.orNull
        case 4 => lang.orNull
        case 5 => password.orNull
        case 6 => accountName.orNull
        case 7 => accountUrl.orNull
        case 8 => avatarUrl.orNull
        case 9 => timezone.orNull
        case 10 => phone.orNull
        case 11 => countryCode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => fullname.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => email.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => lang.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => password.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => accountName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => accountUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => avatarUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => timezone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => phone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => countryCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = account.CreateAccountRequest
}

object CreateAccountRequest extends scalapb.GeneratedMessageCompanion[account.CreateAccountRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[account.CreateAccountRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): account.CreateAccountRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    account.CreateAccountRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[account.CreateAccountRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      account.CreateAccountRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AccountProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AccountProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = account.CreateAccountRequest(
  )
  implicit class CreateAccountRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, account.CreateAccountRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, account.CreateAccountRequest](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def fullname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFullname)((c_, f_) => c_.copy(fullname = Option(f_)))
    def optionalFullname: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fullname)((c_, f_) => c_.copy(fullname = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEmail)((c_, f_) => c_.copy(email = Option(f_)))
    def optionalEmail: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def lang: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLang)((c_, f_) => c_.copy(lang = Option(f_)))
    def optionalLang: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lang)((c_, f_) => c_.copy(lang = f_))
    def password: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPassword)((c_, f_) => c_.copy(password = Option(f_)))
    def optionalPassword: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def accountName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountName)((c_, f_) => c_.copy(accountName = Option(f_)))
    def optionalAccountName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountName)((c_, f_) => c_.copy(accountName = f_))
    def accountUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountUrl)((c_, f_) => c_.copy(accountUrl = Option(f_)))
    def optionalAccountUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountUrl)((c_, f_) => c_.copy(accountUrl = f_))
    def avatarUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvatarUrl)((c_, f_) => c_.copy(avatarUrl = Option(f_)))
    def optionalAvatarUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.avatarUrl)((c_, f_) => c_.copy(avatarUrl = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPhone)((c_, f_) => c_.copy(phone = Option(f_)))
    def optionalPhone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryCode)((c_, f_) => c_.copy(countryCode = Option(f_)))
    def optionalCountryCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val FULLNAME_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val LANG_FIELD_NUMBER = 4
  final val PASSWORD_FIELD_NUMBER = 5
  final val ACCOUNT_NAME_FIELD_NUMBER = 6
  final val ACCOUNT_URL_FIELD_NUMBER = 7
  final val AVATAR_URL_FIELD_NUMBER = 8
  final val TIMEZONE_FIELD_NUMBER = 9
  final val PHONE_FIELD_NUMBER = 10
  final val COUNTRY_CODE_FIELD_NUMBER = 11
}
