// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

/** @param state
  *   accountstate
  * @param v3State
  *   0: not v3, 1: v3 but not convert, 2: converted v3
  */
@SerialVersionUID(0L)
final case class Account(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    logoUrl: scala.Option[_root_.scala.Predef.String] = None,
    ownerId: scala.Option[_root_.scala.Predef.String] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    confirmed: scala.Option[_root_.scala.Long] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    slogan: scala.Option[_root_.scala.Predef.String] = None,
    refererId: scala.Option[_root_.scala.Predef.String] = None,
    city: scala.Option[_root_.scala.Predef.String] = None,
    zipCode: scala.Option[_root_.scala.Int] = None,
    taxId: scala.Option[_root_.scala.Predef.String] = None,
    facebook: scala.Option[_root_.scala.Predef.String] = None,
    twitter: scala.Option[_root_.scala.Predef.String] = None,
    phone: scala.Option[_root_.scala.Predef.String] = None,
    address: scala.Option[_root_.scala.Predef.String] = None,
    url: scala.Option[_root_.scala.Predef.String] = None,
    lang: scala.Option[_root_.scala.Predef.String] = None,
    refererFrom: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Predef.String] = None,
    limit: scala.Option[payment.Limit] = None,
    country: scala.Option[_root_.scala.Predef.String] = None,
    v3State: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Account] with scalapb.lenses.Updatable[Account] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name.get) }
      if (logoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, logoUrl.get) }
      if (ownerId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, ownerId.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, state.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, created.get) }
      if (confirmed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, confirmed.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, modified.get) }
      if (slogan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, slogan.get) }
      if (refererId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, refererId.get) }
      if (city.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, city.get) }
      if (zipCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(16, zipCode.get) }
      if (taxId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, taxId.get) }
      if (facebook.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(18, facebook.get) }
      if (twitter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(22, twitter.get) }
      if (phone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, phone.get) }
      if (address.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(20, address.get) }
      if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, url.get) }
      if (lang.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(23, lang.get) }
      if (refererFrom.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(24, refererFrom.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(26, timezone.get) }
      if (limit.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(limit.get.serializedSize) + limit.get.serializedSize }
      if (country.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(27, country.get) }
      if (v3State.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(28, v3State.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      name.foreach { __v =>
        _output__.writeString(3, __v)
      };
      logoUrl.foreach { __v =>
        _output__.writeString(5, __v)
      };
      ownerId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      state.foreach { __v =>
        _output__.writeString(7, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      confirmed.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      modified.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      refererId.foreach { __v =>
        _output__.writeString(11, __v)
      };
      slogan.foreach { __v =>
        _output__.writeString(12, __v)
      };
      city.foreach { __v =>
        _output__.writeString(14, __v)
      };
      zipCode.foreach { __v =>
        _output__.writeInt32(16, __v)
      };
      taxId.foreach { __v =>
        _output__.writeString(17, __v)
      };
      facebook.foreach { __v =>
        _output__.writeString(18, __v)
      };
      phone.foreach { __v =>
        _output__.writeString(19, __v)
      };
      address.foreach { __v =>
        _output__.writeString(20, __v)
      };
      url.foreach { __v =>
        _output__.writeString(21, __v)
      };
      twitter.foreach { __v =>
        _output__.writeString(22, __v)
      };
      lang.foreach { __v =>
        _output__.writeString(23, __v)
      };
      refererFrom.foreach { __v =>
        _output__.writeString(24, __v)
      };
      limit.foreach { __v =>
        _output__.writeTag(25, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      timezone.foreach { __v =>
        _output__.writeString(26, __v)
      };
      country.foreach { __v =>
        _output__.writeString(27, __v)
      };
      v3State.foreach { __v =>
        _output__.writeInt32(28, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): account.Account = {
      var __ctx = this.ctx
      var __id = this.id
      var __name = this.name
      var __logoUrl = this.logoUrl
      var __ownerId = this.ownerId
      var __state = this.state
      var __created = this.created
      var __confirmed = this.confirmed
      var __modified = this.modified
      var __slogan = this.slogan
      var __refererId = this.refererId
      var __city = this.city
      var __zipCode = this.zipCode
      var __taxId = this.taxId
      var __facebook = this.facebook
      var __twitter = this.twitter
      var __phone = this.phone
      var __address = this.address
      var __url = this.url
      var __lang = this.lang
      var __refererFrom = this.refererFrom
      var __timezone = this.timezone
      var __limit = this.limit
      var __country = this.country
      var __v3State = this.v3State
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __name = Option(_input__.readString())
          case 42 =>
            __logoUrl = Option(_input__.readString())
          case 50 =>
            __ownerId = Option(_input__.readString())
          case 58 =>
            __state = Option(_input__.readString())
          case 64 =>
            __created = Option(_input__.readInt64())
          case 72 =>
            __confirmed = Option(_input__.readInt64())
          case 80 =>
            __modified = Option(_input__.readInt64())
          case 98 =>
            __slogan = Option(_input__.readString())
          case 90 =>
            __refererId = Option(_input__.readString())
          case 114 =>
            __city = Option(_input__.readString())
          case 128 =>
            __zipCode = Option(_input__.readInt32())
          case 138 =>
            __taxId = Option(_input__.readString())
          case 146 =>
            __facebook = Option(_input__.readString())
          case 178 =>
            __twitter = Option(_input__.readString())
          case 154 =>
            __phone = Option(_input__.readString())
          case 162 =>
            __address = Option(_input__.readString())
          case 170 =>
            __url = Option(_input__.readString())
          case 186 =>
            __lang = Option(_input__.readString())
          case 194 =>
            __refererFrom = Option(_input__.readString())
          case 210 =>
            __timezone = Option(_input__.readString())
          case 202 =>
            __limit = Option(_root_.scalapb.LiteParser.readMessage(_input__, __limit.getOrElse(payment.Limit.defaultInstance)))
          case 218 =>
            __country = Option(_input__.readString())
          case 224 =>
            __v3State = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      account.Account(
          ctx = __ctx,
          id = __id,
          name = __name,
          logoUrl = __logoUrl,
          ownerId = __ownerId,
          state = __state,
          created = __created,
          confirmed = __confirmed,
          modified = __modified,
          slogan = __slogan,
          refererId = __refererId,
          city = __city,
          zipCode = __zipCode,
          taxId = __taxId,
          facebook = __facebook,
          twitter = __twitter,
          phone = __phone,
          address = __address,
          url = __url,
          lang = __lang,
          refererFrom = __refererFrom,
          timezone = __timezone,
          limit = __limit,
          country = __country,
          v3State = __v3State
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Account = copy(ctx = None)
    def withCtx(__v: common.Context): Account = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Account = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Account = copy(id = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Account = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Account = copy(name = Option(__v))
    def getLogoUrl: _root_.scala.Predef.String = logoUrl.getOrElse("")
    def clearLogoUrl: Account = copy(logoUrl = None)
    def withLogoUrl(__v: _root_.scala.Predef.String): Account = copy(logoUrl = Option(__v))
    def getOwnerId: _root_.scala.Predef.String = ownerId.getOrElse("")
    def clearOwnerId: Account = copy(ownerId = None)
    def withOwnerId(__v: _root_.scala.Predef.String): Account = copy(ownerId = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Account = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Account = copy(state = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Account = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Account = copy(created = Option(__v))
    def getConfirmed: _root_.scala.Long = confirmed.getOrElse(0L)
    def clearConfirmed: Account = copy(confirmed = None)
    def withConfirmed(__v: _root_.scala.Long): Account = copy(confirmed = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: Account = copy(modified = None)
    def withModified(__v: _root_.scala.Long): Account = copy(modified = Option(__v))
    def getSlogan: _root_.scala.Predef.String = slogan.getOrElse("")
    def clearSlogan: Account = copy(slogan = None)
    def withSlogan(__v: _root_.scala.Predef.String): Account = copy(slogan = Option(__v))
    def getRefererId: _root_.scala.Predef.String = refererId.getOrElse("")
    def clearRefererId: Account = copy(refererId = None)
    def withRefererId(__v: _root_.scala.Predef.String): Account = copy(refererId = Option(__v))
    def getCity: _root_.scala.Predef.String = city.getOrElse("")
    def clearCity: Account = copy(city = None)
    def withCity(__v: _root_.scala.Predef.String): Account = copy(city = Option(__v))
    def getZipCode: _root_.scala.Int = zipCode.getOrElse(0)
    def clearZipCode: Account = copy(zipCode = None)
    def withZipCode(__v: _root_.scala.Int): Account = copy(zipCode = Option(__v))
    def getTaxId: _root_.scala.Predef.String = taxId.getOrElse("")
    def clearTaxId: Account = copy(taxId = None)
    def withTaxId(__v: _root_.scala.Predef.String): Account = copy(taxId = Option(__v))
    def getFacebook: _root_.scala.Predef.String = facebook.getOrElse("")
    def clearFacebook: Account = copy(facebook = None)
    def withFacebook(__v: _root_.scala.Predef.String): Account = copy(facebook = Option(__v))
    def getTwitter: _root_.scala.Predef.String = twitter.getOrElse("")
    def clearTwitter: Account = copy(twitter = None)
    def withTwitter(__v: _root_.scala.Predef.String): Account = copy(twitter = Option(__v))
    def getPhone: _root_.scala.Predef.String = phone.getOrElse("")
    def clearPhone: Account = copy(phone = None)
    def withPhone(__v: _root_.scala.Predef.String): Account = copy(phone = Option(__v))
    def getAddress: _root_.scala.Predef.String = address.getOrElse("")
    def clearAddress: Account = copy(address = None)
    def withAddress(__v: _root_.scala.Predef.String): Account = copy(address = Option(__v))
    def getUrl: _root_.scala.Predef.String = url.getOrElse("")
    def clearUrl: Account = copy(url = None)
    def withUrl(__v: _root_.scala.Predef.String): Account = copy(url = Option(__v))
    def getLang: _root_.scala.Predef.String = lang.getOrElse("")
    def clearLang: Account = copy(lang = None)
    def withLang(__v: _root_.scala.Predef.String): Account = copy(lang = Option(__v))
    def getRefererFrom: _root_.scala.Predef.String = refererFrom.getOrElse("")
    def clearRefererFrom: Account = copy(refererFrom = None)
    def withRefererFrom(__v: _root_.scala.Predef.String): Account = copy(refererFrom = Option(__v))
    def getTimezone: _root_.scala.Predef.String = timezone.getOrElse("")
    def clearTimezone: Account = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Predef.String): Account = copy(timezone = Option(__v))
    def getLimit: payment.Limit = limit.getOrElse(payment.Limit.defaultInstance)
    def clearLimit: Account = copy(limit = None)
    def withLimit(__v: payment.Limit): Account = copy(limit = Option(__v))
    def getCountry: _root_.scala.Predef.String = country.getOrElse("")
    def clearCountry: Account = copy(country = None)
    def withCountry(__v: _root_.scala.Predef.String): Account = copy(country = Option(__v))
    def getV3State: _root_.scala.Int = v3State.getOrElse(0)
    def clearV3State: Account = copy(v3State = None)
    def withV3State(__v: _root_.scala.Int): Account = copy(v3State = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => id.orNull
        case 3 => name.orNull
        case 5 => logoUrl.orNull
        case 6 => ownerId.orNull
        case 7 => state.orNull
        case 8 => created.orNull
        case 9 => confirmed.orNull
        case 10 => modified.orNull
        case 12 => slogan.orNull
        case 11 => refererId.orNull
        case 14 => city.orNull
        case 16 => zipCode.orNull
        case 17 => taxId.orNull
        case 18 => facebook.orNull
        case 22 => twitter.orNull
        case 19 => phone.orNull
        case 20 => address.orNull
        case 21 => url.orNull
        case 23 => lang.orNull
        case 24 => refererFrom.orNull
        case 26 => timezone.orNull
        case 25 => limit.orNull
        case 27 => country.orNull
        case 28 => v3State.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => logoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => ownerId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => confirmed.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => slogan.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => refererId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => city.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => zipCode.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => taxId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => facebook.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => twitter.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => phone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => address.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => lang.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => refererFrom.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => timezone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => limit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => country.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => v3State.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = account.Account
}

object Account extends scalapb.GeneratedMessageCompanion[account.Account] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[account.Account] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): account.Account = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    account.Account(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[payment.Limit]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[account.Account] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      account.Account(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[payment.Limit]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AccountProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AccountProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 25 => __out = payment.Limit
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = account.Account(
  )
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def ispending: _root_.scala.Boolean = false
    def isactivated: _root_.scala.Boolean = false
    def islocked: _root_.scala.Boolean = false
    def isdeleted: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = account.Account.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object pending extends State {
      val value = 0
      val index = 0
      val name = "pending"
      override def ispending: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object activated extends State {
      val value = 1
      val index = 1
      val name = "activated"
      override def isactivated: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object locked extends State {
      val value = 2
      val index = 2
      val name = "locked"
      override def islocked: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object deleted extends State {
      val value = 3
      val index = 3
      val name = "deleted"
      override def isdeleted: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(pending, activated, locked, deleted)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => pending
      case 1 => activated
      case 2 => locked
      case 3 => deleted
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = account.Account.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = account.Account.scalaDescriptor.enums(0)
  }
  implicit class AccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, account.Account]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, account.Account](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLogoUrl)((c_, f_) => c_.copy(logoUrl = Option(f_)))
    def optionalLogoUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def ownerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getOwnerId)((c_, f_) => c_.copy(ownerId = Option(f_)))
    def optionalOwnerId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.ownerId)((c_, f_) => c_.copy(ownerId = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def confirmed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getConfirmed)((c_, f_) => c_.copy(confirmed = Option(f_)))
    def optionalConfirmed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.confirmed)((c_, f_) => c_.copy(confirmed = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def slogan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSlogan)((c_, f_) => c_.copy(slogan = Option(f_)))
    def optionalSlogan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.slogan)((c_, f_) => c_.copy(slogan = f_))
    def refererId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRefererId)((c_, f_) => c_.copy(refererId = Option(f_)))
    def optionalRefererId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.refererId)((c_, f_) => c_.copy(refererId = f_))
    def city: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCity)((c_, f_) => c_.copy(city = Option(f_)))
    def optionalCity: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def zipCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getZipCode)((c_, f_) => c_.copy(zipCode = Option(f_)))
    def optionalZipCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.zipCode)((c_, f_) => c_.copy(zipCode = f_))
    def taxId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTaxId)((c_, f_) => c_.copy(taxId = Option(f_)))
    def optionalTaxId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.taxId)((c_, f_) => c_.copy(taxId = f_))
    def facebook: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFacebook)((c_, f_) => c_.copy(facebook = Option(f_)))
    def optionalFacebook: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.facebook)((c_, f_) => c_.copy(facebook = f_))
    def twitter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTwitter)((c_, f_) => c_.copy(twitter = Option(f_)))
    def optionalTwitter: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.twitter)((c_, f_) => c_.copy(twitter = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPhone)((c_, f_) => c_.copy(phone = Option(f_)))
    def optionalPhone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAddress)((c_, f_) => c_.copy(address = Option(f_)))
    def optionalAddress: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUrl)((c_, f_) => c_.copy(url = Option(f_)))
    def optionalUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def lang: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLang)((c_, f_) => c_.copy(lang = Option(f_)))
    def optionalLang: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lang)((c_, f_) => c_.copy(lang = f_))
    def refererFrom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRefererFrom)((c_, f_) => c_.copy(refererFrom = Option(f_)))
    def optionalRefererFrom: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.refererFrom)((c_, f_) => c_.copy(refererFrom = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, payment.Limit] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Limit]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def country: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountry)((c_, f_) => c_.copy(country = Option(f_)))
    def optionalCountry: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.country)((c_, f_) => c_.copy(country = f_))
    def v3State: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getV3State)((c_, f_) => c_.copy(v3State = Option(f_)))
    def optionalV3State: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.v3State)((c_, f_) => c_.copy(v3State = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val LOGO_URL_FIELD_NUMBER = 5
  final val OWNER_ID_FIELD_NUMBER = 6
  final val STATE_FIELD_NUMBER = 7
  final val CREATED_FIELD_NUMBER = 8
  final val CONFIRMED_FIELD_NUMBER = 9
  final val MODIFIED_FIELD_NUMBER = 10
  final val SLOGAN_FIELD_NUMBER = 12
  final val REFERER_ID_FIELD_NUMBER = 11
  final val CITY_FIELD_NUMBER = 14
  final val ZIP_CODE_FIELD_NUMBER = 16
  final val TAX_ID_FIELD_NUMBER = 17
  final val FACEBOOK_FIELD_NUMBER = 18
  final val TWITTER_FIELD_NUMBER = 22
  final val PHONE_FIELD_NUMBER = 19
  final val ADDRESS_FIELD_NUMBER = 20
  final val URL_FIELD_NUMBER = 21
  final val LANG_FIELD_NUMBER = 23
  final val REFERER_FROM_FIELD_NUMBER = 24
  final val TIMEZONE_FIELD_NUMBER = 26
  final val LIMIT_FIELD_NUMBER = 25
  final val COUNTRY_FIELD_NUMBER = 27
  final val V3_STATE_FIELD_NUMBER = 28
}
