// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package account

/** @param accountId
  *   subiz only
  * @param gender
  *  gender
  * @param state
  *  Agent state
  * @param v3State
  *   0: not v3, 1: v3 but not convert, 2: converted v3
  */
@SerialVersionUID(0L)
final case class Agent(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    fullname: scala.Option[_root_.scala.Predef.String] = None,
    email: scala.Option[_root_.scala.Predef.String] = None,
    emails: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    phones: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    phone: scala.Option[_root_.scala.Predef.String] = None,
    isOwner: scala.Option[_root_.scala.Boolean] = None,
    jobTitle: scala.Option[_root_.scala.Predef.String] = None,
    gender: scala.Option[_root_.scala.Predef.String] = None,
    avatarUrl: scala.Option[_root_.scala.Predef.String] = None,
    lang: scala.Option[_root_.scala.Predef.String] = None,
    location: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Predef.String] = None,
    encryptedPassword: scala.Option[_root_.scala.Predef.String] = None,
    joined: scala.Option[_root_.scala.Long] = None,
    invitedBy: scala.Option[_root_.scala.Predef.String] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    passwordChanged: scala.Option[_root_.scala.Long] = None,
    seen: scala.Option[_root_.scala.Long] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    method: scala.Option[auth.Method] = None,
    account: scala.Option[_root_.account.Account] = None,
    countryCode: scala.Option[_root_.scala.Predef.String] = None,
    v3State: scala.Option[_root_.scala.Int] = None,
    v3HashedPassword: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Agent] with scalapb.lenses.Updatable[Agent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (fullname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, fullname.get) }
      if (email.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, email.get) }
      emails.foreach(emails => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, emails))
      phones.foreach(phones => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, phones))
      if (phone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, phone.get) }
      if (isOwner.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, isOwner.get) }
      if (jobTitle.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, jobTitle.get) }
      if (gender.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, gender.get) }
      if (avatarUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, avatarUrl.get) }
      if (lang.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, lang.get) }
      if (location.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, location.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, timezone.get) }
      if (encryptedPassword.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, encryptedPassword.get) }
      if (joined.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(20, joined.get) }
      if (invitedBy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, invitedBy.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(22, state.get) }
      if (passwordChanged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(23, passwordChanged.get) }
      if (seen.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(24, seen.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(25, modified.get) }
      if (method.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(method.get.serializedSize) + method.get.serializedSize }
      if (account.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(account.get.serializedSize) + account.get.serializedSize }
      if (countryCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(29, countryCode.get) }
      if (v3State.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(30, v3State.get) }
      if (v3HashedPassword.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(31, v3HashedPassword.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      fullname.foreach { __v =>
        _output__.writeString(4, __v)
      };
      email.foreach { __v =>
        _output__.writeString(5, __v)
      };
      emails.foreach { __v =>
        _output__.writeString(6, __v)
      };
      phones.foreach { __v =>
        _output__.writeString(7, __v)
      };
      phone.foreach { __v =>
        _output__.writeString(8, __v)
      };
      isOwner.foreach { __v =>
        _output__.writeBool(10, __v)
      };
      jobTitle.foreach { __v =>
        _output__.writeString(11, __v)
      };
      gender.foreach { __v =>
        _output__.writeString(12, __v)
      };
      avatarUrl.foreach { __v =>
        _output__.writeString(13, __v)
      };
      lang.foreach { __v =>
        _output__.writeString(14, __v)
      };
      location.foreach { __v =>
        _output__.writeString(15, __v)
      };
      timezone.foreach { __v =>
        _output__.writeString(16, __v)
      };
      encryptedPassword.foreach { __v =>
        _output__.writeString(17, __v)
      };
      joined.foreach { __v =>
        _output__.writeInt64(20, __v)
      };
      invitedBy.foreach { __v =>
        _output__.writeString(21, __v)
      };
      state.foreach { __v =>
        _output__.writeString(22, __v)
      };
      passwordChanged.foreach { __v =>
        _output__.writeInt64(23, __v)
      };
      seen.foreach { __v =>
        _output__.writeInt64(24, __v)
      };
      modified.foreach { __v =>
        _output__.writeInt64(25, __v)
      };
      method.foreach { __v =>
        _output__.writeTag(27, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      account.foreach { __v =>
        _output__.writeTag(28, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      countryCode.foreach { __v =>
        _output__.writeString(29, __v)
      };
      v3State.foreach { __v =>
        _output__.writeInt32(30, __v)
      };
      v3HashedPassword.foreach { __v =>
        _output__.writeString(31, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.account.Agent = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __fullname = this.fullname
      var __email = this.email
      val __emails = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.emails)
      val __phones = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.phones)
      var __phone = this.phone
      var __isOwner = this.isOwner
      var __jobTitle = this.jobTitle
      var __gender = this.gender
      var __avatarUrl = this.avatarUrl
      var __lang = this.lang
      var __location = this.location
      var __timezone = this.timezone
      var __encryptedPassword = this.encryptedPassword
      var __joined = this.joined
      var __invitedBy = this.invitedBy
      var __state = this.state
      var __passwordChanged = this.passwordChanged
      var __seen = this.seen
      var __modified = this.modified
      var __method = this.method
      var __account = this.account
      var __countryCode = this.countryCode
      var __v3State = this.v3State
      var __v3HashedPassword = this.v3HashedPassword
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __fullname = Option(_input__.readString())
          case 42 =>
            __email = Option(_input__.readString())
          case 50 =>
            __emails += _input__.readString()
          case 58 =>
            __phones += _input__.readString()
          case 66 =>
            __phone = Option(_input__.readString())
          case 80 =>
            __isOwner = Option(_input__.readBool())
          case 90 =>
            __jobTitle = Option(_input__.readString())
          case 98 =>
            __gender = Option(_input__.readString())
          case 106 =>
            __avatarUrl = Option(_input__.readString())
          case 114 =>
            __lang = Option(_input__.readString())
          case 122 =>
            __location = Option(_input__.readString())
          case 130 =>
            __timezone = Option(_input__.readString())
          case 138 =>
            __encryptedPassword = Option(_input__.readString())
          case 160 =>
            __joined = Option(_input__.readInt64())
          case 170 =>
            __invitedBy = Option(_input__.readString())
          case 178 =>
            __state = Option(_input__.readString())
          case 184 =>
            __passwordChanged = Option(_input__.readInt64())
          case 192 =>
            __seen = Option(_input__.readInt64())
          case 200 =>
            __modified = Option(_input__.readInt64())
          case 218 =>
            __method = Option(_root_.scalapb.LiteParser.readMessage(_input__, __method.getOrElse(auth.Method.defaultInstance)))
          case 226 =>
            __account = Option(_root_.scalapb.LiteParser.readMessage(_input__, __account.getOrElse(_root_.account.Account.defaultInstance)))
          case 234 =>
            __countryCode = Option(_input__.readString())
          case 240 =>
            __v3State = Option(_input__.readInt32())
          case 250 =>
            __v3HashedPassword = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      _root_.account.Agent(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          fullname = __fullname,
          email = __email,
          emails = __emails.result(),
          phones = __phones.result(),
          phone = __phone,
          isOwner = __isOwner,
          jobTitle = __jobTitle,
          gender = __gender,
          avatarUrl = __avatarUrl,
          lang = __lang,
          location = __location,
          timezone = __timezone,
          encryptedPassword = __encryptedPassword,
          joined = __joined,
          invitedBy = __invitedBy,
          state = __state,
          passwordChanged = __passwordChanged,
          seen = __seen,
          modified = __modified,
          method = __method,
          account = __account,
          countryCode = __countryCode,
          v3State = __v3State,
          v3HashedPassword = __v3HashedPassword
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Agent = copy(ctx = None)
    def withCtx(__v: common.Context): Agent = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Agent = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Agent = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Agent = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Agent = copy(accountId = Option(__v))
    def getFullname: _root_.scala.Predef.String = fullname.getOrElse("")
    def clearFullname: Agent = copy(fullname = None)
    def withFullname(__v: _root_.scala.Predef.String): Agent = copy(fullname = Option(__v))
    def getEmail: _root_.scala.Predef.String = email.getOrElse("")
    def clearEmail: Agent = copy(email = None)
    def withEmail(__v: _root_.scala.Predef.String): Agent = copy(email = Option(__v))
    def clearEmails = copy(emails = _root_.scala.collection.Seq.empty)
    def addEmails(__vs: _root_.scala.Predef.String*): Agent = addAllEmails(__vs)
    def addAllEmails(__vs: TraversableOnce[_root_.scala.Predef.String]): Agent = copy(emails = emails ++ __vs)
    def withEmails(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Agent = copy(emails = __v)
    def clearPhones = copy(phones = _root_.scala.collection.Seq.empty)
    def addPhones(__vs: _root_.scala.Predef.String*): Agent = addAllPhones(__vs)
    def addAllPhones(__vs: TraversableOnce[_root_.scala.Predef.String]): Agent = copy(phones = phones ++ __vs)
    def withPhones(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Agent = copy(phones = __v)
    def getPhone: _root_.scala.Predef.String = phone.getOrElse("")
    def clearPhone: Agent = copy(phone = None)
    def withPhone(__v: _root_.scala.Predef.String): Agent = copy(phone = Option(__v))
    def getIsOwner: _root_.scala.Boolean = isOwner.getOrElse(false)
    def clearIsOwner: Agent = copy(isOwner = None)
    def withIsOwner(__v: _root_.scala.Boolean): Agent = copy(isOwner = Option(__v))
    def getJobTitle: _root_.scala.Predef.String = jobTitle.getOrElse("")
    def clearJobTitle: Agent = copy(jobTitle = None)
    def withJobTitle(__v: _root_.scala.Predef.String): Agent = copy(jobTitle = Option(__v))
    def getGender: _root_.scala.Predef.String = gender.getOrElse("")
    def clearGender: Agent = copy(gender = None)
    def withGender(__v: _root_.scala.Predef.String): Agent = copy(gender = Option(__v))
    def getAvatarUrl: _root_.scala.Predef.String = avatarUrl.getOrElse("")
    def clearAvatarUrl: Agent = copy(avatarUrl = None)
    def withAvatarUrl(__v: _root_.scala.Predef.String): Agent = copy(avatarUrl = Option(__v))
    def getLang: _root_.scala.Predef.String = lang.getOrElse("")
    def clearLang: Agent = copy(lang = None)
    def withLang(__v: _root_.scala.Predef.String): Agent = copy(lang = Option(__v))
    def getLocation: _root_.scala.Predef.String = location.getOrElse("")
    def clearLocation: Agent = copy(location = None)
    def withLocation(__v: _root_.scala.Predef.String): Agent = copy(location = Option(__v))
    def getTimezone: _root_.scala.Predef.String = timezone.getOrElse("")
    def clearTimezone: Agent = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Predef.String): Agent = copy(timezone = Option(__v))
    def getEncryptedPassword: _root_.scala.Predef.String = encryptedPassword.getOrElse("")
    def clearEncryptedPassword: Agent = copy(encryptedPassword = None)
    def withEncryptedPassword(__v: _root_.scala.Predef.String): Agent = copy(encryptedPassword = Option(__v))
    def getJoined: _root_.scala.Long = joined.getOrElse(0L)
    def clearJoined: Agent = copy(joined = None)
    def withJoined(__v: _root_.scala.Long): Agent = copy(joined = Option(__v))
    def getInvitedBy: _root_.scala.Predef.String = invitedBy.getOrElse("")
    def clearInvitedBy: Agent = copy(invitedBy = None)
    def withInvitedBy(__v: _root_.scala.Predef.String): Agent = copy(invitedBy = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Agent = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Agent = copy(state = Option(__v))
    def getPasswordChanged: _root_.scala.Long = passwordChanged.getOrElse(0L)
    def clearPasswordChanged: Agent = copy(passwordChanged = None)
    def withPasswordChanged(__v: _root_.scala.Long): Agent = copy(passwordChanged = Option(__v))
    def getSeen: _root_.scala.Long = seen.getOrElse(0L)
    def clearSeen: Agent = copy(seen = None)
    def withSeen(__v: _root_.scala.Long): Agent = copy(seen = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: Agent = copy(modified = None)
    def withModified(__v: _root_.scala.Long): Agent = copy(modified = Option(__v))
    def getMethod: auth.Method = method.getOrElse(auth.Method.defaultInstance)
    def clearMethod: Agent = copy(method = None)
    def withMethod(__v: auth.Method): Agent = copy(method = Option(__v))
    def getAccount: _root_.account.Account = account.getOrElse(_root_.account.Account.defaultInstance)
    def clearAccount: Agent = copy(account = None)
    def withAccount(__v: _root_.account.Account): Agent = copy(account = Option(__v))
    def getCountryCode: _root_.scala.Predef.String = countryCode.getOrElse("")
    def clearCountryCode: Agent = copy(countryCode = None)
    def withCountryCode(__v: _root_.scala.Predef.String): Agent = copy(countryCode = Option(__v))
    def getV3State: _root_.scala.Int = v3State.getOrElse(0)
    def clearV3State: Agent = copy(v3State = None)
    def withV3State(__v: _root_.scala.Int): Agent = copy(v3State = Option(__v))
    def getV3HashedPassword: _root_.scala.Predef.String = v3HashedPassword.getOrElse("")
    def clearV3HashedPassword: Agent = copy(v3HashedPassword = None)
    def withV3HashedPassword(__v: _root_.scala.Predef.String): Agent = copy(v3HashedPassword = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => fullname.orNull
        case 5 => email.orNull
        case 6 => emails
        case 7 => phones
        case 8 => phone.orNull
        case 10 => isOwner.orNull
        case 11 => jobTitle.orNull
        case 12 => gender.orNull
        case 13 => avatarUrl.orNull
        case 14 => lang.orNull
        case 15 => location.orNull
        case 16 => timezone.orNull
        case 17 => encryptedPassword.orNull
        case 20 => joined.orNull
        case 21 => invitedBy.orNull
        case 22 => state.orNull
        case 23 => passwordChanged.orNull
        case 24 => seen.orNull
        case 25 => modified.orNull
        case 27 => method.orNull
        case 28 => account.orNull
        case 29 => countryCode.orNull
        case 30 => v3State.orNull
        case 31 => v3HashedPassword.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => fullname.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => email.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(emails.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(phones.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 8 => phone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => isOwner.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => jobTitle.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => gender.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => avatarUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => lang.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => location.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => timezone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => encryptedPassword.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => joined.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => invitedBy.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => passwordChanged.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => seen.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => method.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => account.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 29 => countryCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 30 => v3State.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 31 => v3HashedPassword.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.account.Agent
}

object Agent extends scalapb.GeneratedMessageCompanion[account.Agent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[account.Agent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): account.Agent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    account.Agent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[auth.Method]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[_root_.account.Account]],
      __fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(25)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(26)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[account.Agent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      account.Agent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[auth.Method]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[scala.Option[_root_.account.Account]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AccountProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AccountProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 27 => __out = auth.Method
      case 28 => __out = account.Account
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = account.Agent(
  )
  sealed trait Gender extends _root_.scalapb.GeneratedEnum {
    type EnumType = Gender
    def isunset: _root_.scala.Boolean = false
    def ismale: _root_.scala.Boolean = false
    def isfemale: _root_.scala.Boolean = false
    def isbisexual: _root_.scala.Boolean = false
    def isasexual: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Gender] = account.Agent.Gender
  }
  
  object Gender extends _root_.scalapb.GeneratedEnumCompanion[Gender] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Gender] = this
    @SerialVersionUID(0L)
    case object unset extends Gender {
      val value = 0
      val index = 0
      val name = "unset"
      override def isunset: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object male extends Gender {
      val value = 1
      val index = 1
      val name = "male"
      override def ismale: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object female extends Gender {
      val value = 2
      val index = 2
      val name = "female"
      override def isfemale: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object bisexual extends Gender {
      val value = 3
      val index = 3
      val name = "bisexual"
      override def isbisexual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object asexual extends Gender {
      val value = 4
      val index = 4
      val name = "asexual"
      override def isasexual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Gender with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(unset, male, female, bisexual, asexual)
    def fromValue(value: _root_.scala.Int): Gender = value match {
      case 0 => unset
      case 1 => male
      case 2 => female
      case 3 => bisexual
      case 4 => asexual
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = account.Agent.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = account.Agent.scalaDescriptor.enums(0)
  }
  sealed trait AgentState extends _root_.scalapb.GeneratedEnum {
    type EnumType = AgentState
    def ispending: _root_.scala.Boolean = false
    def isactive: _root_.scala.Boolean = false
    def isinactive: _root_.scala.Boolean = false
    def isdeleted: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[AgentState] = account.Agent.AgentState
  }
  
  object AgentState extends _root_.scalapb.GeneratedEnumCompanion[AgentState] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AgentState] = this
    @SerialVersionUID(0L)
    case object pending extends AgentState {
      val value = 0
      val index = 0
      val name = "pending"
      override def ispending: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object active extends AgentState {
      val value = 1
      val index = 1
      val name = "active"
      override def isactive: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object inactive extends AgentState {
      val value = 2
      val index = 2
      val name = "inactive"
      override def isinactive: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object deleted extends AgentState {
      val value = 3
      val index = 3
      val name = "deleted"
      override def isdeleted: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends AgentState with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(pending, active, inactive, deleted)
    def fromValue(value: _root_.scala.Int): AgentState = value match {
      case 0 => pending
      case 1 => active
      case 2 => inactive
      case 3 => deleted
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = account.Agent.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = account.Agent.scalaDescriptor.enums(1)
  }
  implicit class AgentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, account.Agent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, account.Agent](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def fullname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFullname)((c_, f_) => c_.copy(fullname = Option(f_)))
    def optionalFullname: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fullname)((c_, f_) => c_.copy(fullname = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEmail)((c_, f_) => c_.copy(email = Option(f_)))
    def optionalEmail: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def emails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.emails)((c_, f_) => c_.copy(emails = f_))
    def phones: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.phones)((c_, f_) => c_.copy(phones = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPhone)((c_, f_) => c_.copy(phone = Option(f_)))
    def optionalPhone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def isOwner: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsOwner)((c_, f_) => c_.copy(isOwner = Option(f_)))
    def optionalIsOwner: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.isOwner)((c_, f_) => c_.copy(isOwner = f_))
    def jobTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getJobTitle)((c_, f_) => c_.copy(jobTitle = Option(f_)))
    def optionalJobTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.jobTitle)((c_, f_) => c_.copy(jobTitle = f_))
    def gender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getGender)((c_, f_) => c_.copy(gender = Option(f_)))
    def optionalGender: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.gender)((c_, f_) => c_.copy(gender = f_))
    def avatarUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvatarUrl)((c_, f_) => c_.copy(avatarUrl = Option(f_)))
    def optionalAvatarUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.avatarUrl)((c_, f_) => c_.copy(avatarUrl = f_))
    def lang: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLang)((c_, f_) => c_.copy(lang = Option(f_)))
    def optionalLang: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lang)((c_, f_) => c_.copy(lang = f_))
    def location: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLocation)((c_, f_) => c_.copy(location = Option(f_)))
    def optionalLocation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.location)((c_, f_) => c_.copy(location = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def encryptedPassword: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEncryptedPassword)((c_, f_) => c_.copy(encryptedPassword = Option(f_)))
    def optionalEncryptedPassword: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.encryptedPassword)((c_, f_) => c_.copy(encryptedPassword = f_))
    def joined: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getJoined)((c_, f_) => c_.copy(joined = Option(f_)))
    def optionalJoined: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.joined)((c_, f_) => c_.copy(joined = f_))
    def invitedBy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getInvitedBy)((c_, f_) => c_.copy(invitedBy = Option(f_)))
    def optionalInvitedBy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.invitedBy)((c_, f_) => c_.copy(invitedBy = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def passwordChanged: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getPasswordChanged)((c_, f_) => c_.copy(passwordChanged = Option(f_)))
    def optionalPasswordChanged: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.passwordChanged)((c_, f_) => c_.copy(passwordChanged = f_))
    def seen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getSeen)((c_, f_) => c_.copy(seen = Option(f_)))
    def optionalSeen: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.seen)((c_, f_) => c_.copy(seen = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def method: _root_.scalapb.lenses.Lens[UpperPB, auth.Method] = field(_.getMethod)((c_, f_) => c_.copy(method = Option(f_)))
    def optionalMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Method]] = field(_.method)((c_, f_) => c_.copy(method = f_))
    def account: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Account] = field(_.getAccount)((c_, f_) => c_.copy(account = Option(f_)))
    def optionalAccount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Account]] = field(_.account)((c_, f_) => c_.copy(account = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryCode)((c_, f_) => c_.copy(countryCode = Option(f_)))
    def optionalCountryCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
    def v3State: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getV3State)((c_, f_) => c_.copy(v3State = Option(f_)))
    def optionalV3State: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.v3State)((c_, f_) => c_.copy(v3State = f_))
    def v3HashedPassword: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getV3HashedPassword)((c_, f_) => c_.copy(v3HashedPassword = Option(f_)))
    def optionalV3HashedPassword: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.v3HashedPassword)((c_, f_) => c_.copy(v3HashedPassword = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val FULLNAME_FIELD_NUMBER = 4
  final val EMAIL_FIELD_NUMBER = 5
  final val EMAILS_FIELD_NUMBER = 6
  final val PHONES_FIELD_NUMBER = 7
  final val PHONE_FIELD_NUMBER = 8
  final val IS_OWNER_FIELD_NUMBER = 10
  final val JOB_TITLE_FIELD_NUMBER = 11
  final val GENDER_FIELD_NUMBER = 12
  final val AVATAR_URL_FIELD_NUMBER = 13
  final val LANG_FIELD_NUMBER = 14
  final val LOCATION_FIELD_NUMBER = 15
  final val TIMEZONE_FIELD_NUMBER = 16
  final val ENCRYPTED_PASSWORD_FIELD_NUMBER = 17
  final val JOINED_FIELD_NUMBER = 20
  final val INVITED_BY_FIELD_NUMBER = 21
  final val STATE_FIELD_NUMBER = 22
  final val PASSWORD_CHANGED_FIELD_NUMBER = 23
  final val SEEN_FIELD_NUMBER = 24
  final val MODIFIED_FIELD_NUMBER = 25
  final val METHOD_FIELD_NUMBER = 27
  final val ACCOUNT_FIELD_NUMBER = 28
  final val COUNTRY_CODE_FIELD_NUMBER = 29
  final val V3_STATE_FIELD_NUMBER = 30
  final val V3_HASHED_PASSWORD_FIELD_NUMBER = 31
}
