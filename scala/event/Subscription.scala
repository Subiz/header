// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

/** raweventcreatedpayload
  *
  * @param topic
  *  optional string user_id = 4; // connectorid or userid
  * @param subId
  *  optional SubscribeScope scope = 5;
  *  optional string account_id = 6;
  * @param targetTopic
  *  optional SubscriberType subscriber_type = 8;
  *  optional string subscriber_id = 9;
  */
@SerialVersionUID(0L)
final case class Subscription(
    ctx: scala.Option[common.Context] = None,
    topic: _root_.scala.Predef.String = "",
    subId: _root_.scala.Predef.String = "",
    targetTopic: _root_.scala.Predef.String = "",
    targetKey: _root_.scala.Predef.String = "",
    ttls: _root_.scala.Long = 0L,
    routerTopic: _root_.scala.Predef.String = "",
    targetPartition: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[Subscription] with scalapb.lenses.Updatable[Subscription] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (topic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, topic) }
      if (subId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, subId) }
      if (targetTopic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, targetTopic) }
      if (targetKey != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, targetKey) }
      if (ttls != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, ttls) }
      if (routerTopic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, routerTopic) }
      if (targetPartition != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, targetPartition) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = topic
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = subId
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = targetTopic
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = targetKey
        if (__v != "") {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = ttls
        if (__v != 0L) {
          _output__.writeInt64(12, __v)
        }
      };
      {
        val __v = routerTopic
        if (__v != "") {
          _output__.writeString(13, __v)
        }
      };
      {
        val __v = targetPartition
        if (__v != 0) {
          _output__.writeInt32(14, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.Subscription = {
      var __ctx = this.ctx
      var __topic = this.topic
      var __subId = this.subId
      var __targetTopic = this.targetTopic
      var __targetKey = this.targetKey
      var __ttls = this.ttls
      var __routerTopic = this.routerTopic
      var __targetPartition = this.targetPartition
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __topic = _input__.readString()
          case 58 =>
            __subId = _input__.readString()
          case 82 =>
            __targetTopic = _input__.readString()
          case 90 =>
            __targetKey = _input__.readString()
          case 96 =>
            __ttls = _input__.readInt64()
          case 106 =>
            __routerTopic = _input__.readString()
          case 112 =>
            __targetPartition = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      event.Subscription(
          ctx = __ctx,
          topic = __topic,
          subId = __subId,
          targetTopic = __targetTopic,
          targetKey = __targetKey,
          ttls = __ttls,
          routerTopic = __routerTopic,
          targetPartition = __targetPartition
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Subscription = copy(ctx = None)
    def withCtx(__v: common.Context): Subscription = copy(ctx = Option(__v))
    def withTopic(__v: _root_.scala.Predef.String): Subscription = copy(topic = __v)
    def withSubId(__v: _root_.scala.Predef.String): Subscription = copy(subId = __v)
    def withTargetTopic(__v: _root_.scala.Predef.String): Subscription = copy(targetTopic = __v)
    def withTargetKey(__v: _root_.scala.Predef.String): Subscription = copy(targetKey = __v)
    def withTtls(__v: _root_.scala.Long): Subscription = copy(ttls = __v)
    def withRouterTopic(__v: _root_.scala.Predef.String): Subscription = copy(routerTopic = __v)
    def withTargetPartition(__v: _root_.scala.Int): Subscription = copy(targetPartition = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => {
          val __t = topic
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = subId
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = targetTopic
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = targetKey
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = ttls
          if (__t != 0L) __t else null
        }
        case 13 => {
          val __t = routerTopic
          if (__t != "") __t else null
        }
        case 14 => {
          val __t = targetPartition
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(topic)
        case 7 => _root_.scalapb.descriptors.PString(subId)
        case 10 => _root_.scalapb.descriptors.PString(targetTopic)
        case 11 => _root_.scalapb.descriptors.PString(targetKey)
        case 12 => _root_.scalapb.descriptors.PLong(ttls)
        case 13 => _root_.scalapb.descriptors.PString(routerTopic)
        case 14 => _root_.scalapb.descriptors.PInt(targetPartition)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = event.Subscription
}

object Subscription extends scalapb.GeneratedMessageCompanion[event.Subscription] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.Subscription] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.Subscription = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.Subscription(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(7), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.Subscription] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.Subscription(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.Subscription(
  )
  implicit class SubscriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.Subscription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.Subscription](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def subId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subId)((c_, f_) => c_.copy(subId = f_))
    def targetTopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.targetTopic)((c_, f_) => c_.copy(targetTopic = f_))
    def targetKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.targetKey)((c_, f_) => c_.copy(targetKey = f_))
    def ttls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.ttls)((c_, f_) => c_.copy(ttls = f_))
    def routerTopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.routerTopic)((c_, f_) => c_.copy(routerTopic = f_))
    def targetPartition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.targetPartition)((c_, f_) => c_.copy(targetPartition = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TOPIC_FIELD_NUMBER = 3
  final val SUB_ID_FIELD_NUMBER = 7
  final val TARGET_TOPIC_FIELD_NUMBER = 10
  final val TARGET_KEY_FIELD_NUMBER = 11
  final val TTLS_FIELD_NUMBER = 12
  final val ROUTER_TOPIC_FIELD_NUMBER = 13
  final val TARGET_PARTITION_FIELD_NUMBER = 14
}
