// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

/** @param type
  *   eventtype
  */
@SerialVersionUID(0L)
final case class RawEvent(
    ctx: scala.Option[common.Context] = None,
    id: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    created: _root_.scala.Long = 0L,
    `type`: _root_.scala.Predef.String = "",
    topics: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    by: scala.Option[event.By] = None,
    `object`: _root_.scala.Predef.String = "",
    conversationId: _root_.scala.Predef.String = "",
    data: scala.Option[event.RawEvent.Data] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[RawEvent] with scalapb.lenses.Updatable[RawEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId) }
      if (created != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, created) }
      if (`type` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, `type`) }
      topics.foreach(topics => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, topics))
      if (by.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(by.get.serializedSize) + by.get.serializedSize }
      if (`object` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, `object`) }
      if (conversationId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, conversationId) }
      if (data.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(data.get.serializedSize) + data.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = created
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = `type`
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
      topics.foreach { __v =>
        _output__.writeString(11, __v)
      };
      {
        val __v = `object`
        if (__v != "") {
          _output__.writeString(13, __v)
        }
      };
      {
        val __v = conversationId
        if (__v != "") {
          _output__.writeString(15, __v)
        }
      };
      data.foreach { __v =>
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      by.foreach { __v =>
        _output__.writeTag(50, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.RawEvent = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __created = this.created
      var __type = this.`type`
      val __topics = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.topics)
      var __by = this.by
      var __object = this.`object`
      var __conversationId = this.conversationId
      var __data = this.data
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __id = _input__.readString()
          case 34 =>
            __accountId = _input__.readString()
          case 64 =>
            __created = _input__.readInt64()
          case 74 =>
            __type = _input__.readString()
          case 90 =>
            __topics += _input__.readString()
          case 402 =>
            __by = Option(_root_.scalapb.LiteParser.readMessage(_input__, __by.getOrElse(event.By.defaultInstance)))
          case 106 =>
            __object = _input__.readString()
          case 122 =>
            __conversationId = _input__.readString()
          case 162 =>
            __data = Option(_root_.scalapb.LiteParser.readMessage(_input__, __data.getOrElse(event.RawEvent.Data.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      event.RawEvent(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          created = __created,
          `type` = __type,
          topics = __topics.result(),
          by = __by,
          `object` = __object,
          conversationId = __conversationId,
          data = __data
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: RawEvent = copy(ctx = None)
    def withCtx(__v: common.Context): RawEvent = copy(ctx = Option(__v))
    def withId(__v: _root_.scala.Predef.String): RawEvent = copy(id = __v)
    def withAccountId(__v: _root_.scala.Predef.String): RawEvent = copy(accountId = __v)
    def withCreated(__v: _root_.scala.Long): RawEvent = copy(created = __v)
    def withType(__v: _root_.scala.Predef.String): RawEvent = copy(`type` = __v)
    def clearTopics = copy(topics = _root_.scala.collection.Seq.empty)
    def addTopics(__vs: _root_.scala.Predef.String*): RawEvent = addAllTopics(__vs)
    def addAllTopics(__vs: TraversableOnce[_root_.scala.Predef.String]): RawEvent = copy(topics = topics ++ __vs)
    def withTopics(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): RawEvent = copy(topics = __v)
    def getBy: event.By = by.getOrElse(event.By.defaultInstance)
    def clearBy: RawEvent = copy(by = None)
    def withBy(__v: event.By): RawEvent = copy(by = Option(__v))
    def withObject(__v: _root_.scala.Predef.String): RawEvent = copy(`object` = __v)
    def withConversationId(__v: _root_.scala.Predef.String): RawEvent = copy(conversationId = __v)
    def getData: event.RawEvent.Data = data.getOrElse(event.RawEvent.Data.defaultInstance)
    def clearData: RawEvent = copy(data = None)
    def withData(__v: event.RawEvent.Data): RawEvent = copy(data = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = created
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = `type`
          if (__t != "") __t else null
        }
        case 11 => topics
        case 50 => by.orNull
        case 13 => {
          val __t = `object`
          if (__t != "") __t else null
        }
        case 15 => {
          val __t = conversationId
          if (__t != "") __t else null
        }
        case 20 => data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(id)
        case 4 => _root_.scalapb.descriptors.PString(accountId)
        case 8 => _root_.scalapb.descriptors.PLong(created)
        case 9 => _root_.scalapb.descriptors.PString(`type`)
        case 11 => _root_.scalapb.descriptors.PRepeated(topics.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 50 => by.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => _root_.scalapb.descriptors.PString(`object`)
        case 15 => _root_.scalapb.descriptors.PString(conversationId)
        case 20 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = event.RawEvent
}

object RawEvent extends scalapb.GeneratedMessageCompanion[event.RawEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.RawEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.RawEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.RawEvent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[event.By]],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[event.RawEvent.Data]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.RawEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.RawEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(50).get).flatMap(_.as[scala.Option[event.By]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[event.RawEvent.Data]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 50 => __out = event.By
      case 20 => __out = event.RawEvent.Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.event.RawEvent.Data
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.RawEvent(
  )
  @SerialVersionUID(0L)
  final case class Data(
      account: scala.Option[_root_.account.Account] = None,
      agent: scala.Option[_root_.account.Agent] = None,
      message: scala.Option[_root_.conversation.Message] = None,
      conversation: scala.Option[_root_.conversation.Conversation] = None,
      postback: scala.Option[_root_.conversation.Postback] = None,
      content: scala.Option[_root_.content.Content] = None,
      topic: scala.Option[_root_.user.Topic] = None,
      presence: scala.Option[_root_.user.Presence] = None,
      user: scala.Option[_root_.user.User] = None,
      unreadTopic: scala.Option[_root_.user.UnreadTopic] = None,
      myUser: scala.Option[_root_.user.MyUser] = None,
      notification: scala.Option[_root_.notibox.Notification] = None,
      notibox: scala.Option[_root_.notibox.Box] = None,
      agentPerm: scala.Option[_root_.account.AgentPerm] = None,
      groupMember: scala.Option[_root_.account.GroupMember] = None,
      group: scala.Option[_root_.account.AgentGroup] = None,
      limit: scala.Option[payment.Limit] = None,
      userAttribute: scala.Option[_root_.user.AttributeData] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[Data] with scalapb.lenses.Updatable[Data] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (account.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(account.get.serializedSize) + account.get.serializedSize }
        if (agent.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agent.get.serializedSize) + agent.get.serializedSize }
        if (message.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(message.get.serializedSize) + message.get.serializedSize }
        if (conversation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(conversation.get.serializedSize) + conversation.get.serializedSize }
        if (postback.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(postback.get.serializedSize) + postback.get.serializedSize }
        if (content.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(content.get.serializedSize) + content.get.serializedSize }
        if (topic.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(topic.get.serializedSize) + topic.get.serializedSize }
        if (presence.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(presence.get.serializedSize) + presence.get.serializedSize }
        if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
        if (unreadTopic.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(unreadTopic.get.serializedSize) + unreadTopic.get.serializedSize }
        if (myUser.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(myUser.get.serializedSize) + myUser.get.serializedSize }
        if (notification.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(notification.get.serializedSize) + notification.get.serializedSize }
        if (notibox.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(notibox.get.serializedSize) + notibox.get.serializedSize }
        if (agentPerm.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agentPerm.get.serializedSize) + agentPerm.get.serializedSize }
        if (groupMember.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(groupMember.get.serializedSize) + groupMember.get.serializedSize }
        if (group.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(group.get.serializedSize) + group.get.serializedSize }
        if (limit.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(limit.get.serializedSize) + limit.get.serializedSize }
        if (userAttribute.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(userAttribute.get.serializedSize) + userAttribute.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        account.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        agent.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        message.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        conversation.foreach { __v =>
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        postback.foreach { __v =>
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        content.foreach { __v =>
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        topic.foreach { __v =>
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        presence.foreach { __v =>
          _output__.writeTag(8, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        user.foreach { __v =>
          _output__.writeTag(10, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        unreadTopic.foreach { __v =>
          _output__.writeTag(11, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        myUser.foreach { __v =>
          _output__.writeTag(12, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        notification.foreach { __v =>
          _output__.writeTag(14, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        notibox.foreach { __v =>
          _output__.writeTag(15, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        agentPerm.foreach { __v =>
          _output__.writeTag(16, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        groupMember.foreach { __v =>
          _output__.writeTag(17, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        group.foreach { __v =>
          _output__.writeTag(18, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        limit.foreach { __v =>
          _output__.writeTag(19, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        userAttribute.foreach { __v =>
          _output__.writeTag(20, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.RawEvent.Data = {
        var __account = this.account
        var __agent = this.agent
        var __message = this.message
        var __conversation = this.conversation
        var __postback = this.postback
        var __content = this.content
        var __topic = this.topic
        var __presence = this.presence
        var __user = this.user
        var __unreadTopic = this.unreadTopic
        var __myUser = this.myUser
        var __notification = this.notification
        var __notibox = this.notibox
        var __agentPerm = this.agentPerm
        var __groupMember = this.groupMember
        var __group = this.group
        var __limit = this.limit
        var __userAttribute = this.userAttribute
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __account = Option(_root_.scalapb.LiteParser.readMessage(_input__, __account.getOrElse(_root_.account.Account.defaultInstance)))
            case 18 =>
              __agent = Option(_root_.scalapb.LiteParser.readMessage(_input__, __agent.getOrElse(_root_.account.Agent.defaultInstance)))
            case 26 =>
              __message = Option(_root_.scalapb.LiteParser.readMessage(_input__, __message.getOrElse(_root_.conversation.Message.defaultInstance)))
            case 34 =>
              __conversation = Option(_root_.scalapb.LiteParser.readMessage(_input__, __conversation.getOrElse(_root_.conversation.Conversation.defaultInstance)))
            case 42 =>
              __postback = Option(_root_.scalapb.LiteParser.readMessage(_input__, __postback.getOrElse(_root_.conversation.Postback.defaultInstance)))
            case 50 =>
              __content = Option(_root_.scalapb.LiteParser.readMessage(_input__, __content.getOrElse(_root_.content.Content.defaultInstance)))
            case 58 =>
              __topic = Option(_root_.scalapb.LiteParser.readMessage(_input__, __topic.getOrElse(_root_.user.Topic.defaultInstance)))
            case 66 =>
              __presence = Option(_root_.scalapb.LiteParser.readMessage(_input__, __presence.getOrElse(_root_.user.Presence.defaultInstance)))
            case 82 =>
              __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
            case 90 =>
              __unreadTopic = Option(_root_.scalapb.LiteParser.readMessage(_input__, __unreadTopic.getOrElse(_root_.user.UnreadTopic.defaultInstance)))
            case 98 =>
              __myUser = Option(_root_.scalapb.LiteParser.readMessage(_input__, __myUser.getOrElse(_root_.user.MyUser.defaultInstance)))
            case 114 =>
              __notification = Option(_root_.scalapb.LiteParser.readMessage(_input__, __notification.getOrElse(_root_.notibox.Notification.defaultInstance)))
            case 122 =>
              __notibox = Option(_root_.scalapb.LiteParser.readMessage(_input__, __notibox.getOrElse(_root_.notibox.Box.defaultInstance)))
            case 130 =>
              __agentPerm = Option(_root_.scalapb.LiteParser.readMessage(_input__, __agentPerm.getOrElse(_root_.account.AgentPerm.defaultInstance)))
            case 138 =>
              __groupMember = Option(_root_.scalapb.LiteParser.readMessage(_input__, __groupMember.getOrElse(_root_.account.GroupMember.defaultInstance)))
            case 146 =>
              __group = Option(_root_.scalapb.LiteParser.readMessage(_input__, __group.getOrElse(_root_.account.AgentGroup.defaultInstance)))
            case 154 =>
              __limit = Option(_root_.scalapb.LiteParser.readMessage(_input__, __limit.getOrElse(payment.Limit.defaultInstance)))
            case 162 =>
              __userAttribute = Option(_root_.scalapb.LiteParser.readMessage(_input__, __userAttribute.getOrElse(_root_.user.AttributeData.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        event.RawEvent.Data(
            account = __account,
            agent = __agent,
            message = __message,
            conversation = __conversation,
            postback = __postback,
            content = __content,
            topic = __topic,
            presence = __presence,
            user = __user,
            unreadTopic = __unreadTopic,
            myUser = __myUser,
            notification = __notification,
            notibox = __notibox,
            agentPerm = __agentPerm,
            groupMember = __groupMember,
            group = __group,
            limit = __limit,
            userAttribute = __userAttribute
        )
      }
      def getAccount: _root_.account.Account = account.getOrElse(_root_.account.Account.defaultInstance)
      def clearAccount: Data = copy(account = None)
      def withAccount(__v: _root_.account.Account): Data = copy(account = Option(__v))
      def getAgent: _root_.account.Agent = agent.getOrElse(_root_.account.Agent.defaultInstance)
      def clearAgent: Data = copy(agent = None)
      def withAgent(__v: _root_.account.Agent): Data = copy(agent = Option(__v))
      def getMessage: _root_.conversation.Message = message.getOrElse(_root_.conversation.Message.defaultInstance)
      def clearMessage: Data = copy(message = None)
      def withMessage(__v: _root_.conversation.Message): Data = copy(message = Option(__v))
      def getConversation: _root_.conversation.Conversation = conversation.getOrElse(_root_.conversation.Conversation.defaultInstance)
      def clearConversation: Data = copy(conversation = None)
      def withConversation(__v: _root_.conversation.Conversation): Data = copy(conversation = Option(__v))
      def getPostback: _root_.conversation.Postback = postback.getOrElse(_root_.conversation.Postback.defaultInstance)
      def clearPostback: Data = copy(postback = None)
      def withPostback(__v: _root_.conversation.Postback): Data = copy(postback = Option(__v))
      def getContent: _root_.content.Content = content.getOrElse(_root_.content.Content.defaultInstance)
      def clearContent: Data = copy(content = None)
      def withContent(__v: _root_.content.Content): Data = copy(content = Option(__v))
      def getTopic: _root_.user.Topic = topic.getOrElse(_root_.user.Topic.defaultInstance)
      def clearTopic: Data = copy(topic = None)
      def withTopic(__v: _root_.user.Topic): Data = copy(topic = Option(__v))
      def getPresence: _root_.user.Presence = presence.getOrElse(_root_.user.Presence.defaultInstance)
      def clearPresence: Data = copy(presence = None)
      def withPresence(__v: _root_.user.Presence): Data = copy(presence = Option(__v))
      def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
      def clearUser: Data = copy(user = None)
      def withUser(__v: _root_.user.User): Data = copy(user = Option(__v))
      def getUnreadTopic: _root_.user.UnreadTopic = unreadTopic.getOrElse(_root_.user.UnreadTopic.defaultInstance)
      def clearUnreadTopic: Data = copy(unreadTopic = None)
      def withUnreadTopic(__v: _root_.user.UnreadTopic): Data = copy(unreadTopic = Option(__v))
      def getMyUser: _root_.user.MyUser = myUser.getOrElse(_root_.user.MyUser.defaultInstance)
      def clearMyUser: Data = copy(myUser = None)
      def withMyUser(__v: _root_.user.MyUser): Data = copy(myUser = Option(__v))
      def getNotification: _root_.notibox.Notification = notification.getOrElse(_root_.notibox.Notification.defaultInstance)
      def clearNotification: Data = copy(notification = None)
      def withNotification(__v: _root_.notibox.Notification): Data = copy(notification = Option(__v))
      def getNotibox: _root_.notibox.Box = notibox.getOrElse(_root_.notibox.Box.defaultInstance)
      def clearNotibox: Data = copy(notibox = None)
      def withNotibox(__v: _root_.notibox.Box): Data = copy(notibox = Option(__v))
      def getAgentPerm: _root_.account.AgentPerm = agentPerm.getOrElse(_root_.account.AgentPerm.defaultInstance)
      def clearAgentPerm: Data = copy(agentPerm = None)
      def withAgentPerm(__v: _root_.account.AgentPerm): Data = copy(agentPerm = Option(__v))
      def getGroupMember: _root_.account.GroupMember = groupMember.getOrElse(_root_.account.GroupMember.defaultInstance)
      def clearGroupMember: Data = copy(groupMember = None)
      def withGroupMember(__v: _root_.account.GroupMember): Data = copy(groupMember = Option(__v))
      def getGroup: _root_.account.AgentGroup = group.getOrElse(_root_.account.AgentGroup.defaultInstance)
      def clearGroup: Data = copy(group = None)
      def withGroup(__v: _root_.account.AgentGroup): Data = copy(group = Option(__v))
      def getLimit: payment.Limit = limit.getOrElse(payment.Limit.defaultInstance)
      def clearLimit: Data = copy(limit = None)
      def withLimit(__v: payment.Limit): Data = copy(limit = Option(__v))
      def getUserAttribute: _root_.user.AttributeData = userAttribute.getOrElse(_root_.user.AttributeData.defaultInstance)
      def clearUserAttribute: Data = copy(userAttribute = None)
      def withUserAttribute(__v: _root_.user.AttributeData): Data = copy(userAttribute = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => account.orNull
          case 2 => agent.orNull
          case 3 => message.orNull
          case 4 => conversation.orNull
          case 5 => postback.orNull
          case 6 => content.orNull
          case 7 => topic.orNull
          case 8 => presence.orNull
          case 10 => user.orNull
          case 11 => unreadTopic.orNull
          case 12 => myUser.orNull
          case 14 => notification.orNull
          case 15 => notibox.orNull
          case 16 => agentPerm.orNull
          case 17 => groupMember.orNull
          case 18 => group.orNull
          case 19 => limit.orNull
          case 20 => userAttribute.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => account.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => agent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => message.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => conversation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => postback.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => content.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => topic.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => presence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => unreadTopic.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => myUser.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 14 => notification.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 15 => notibox.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 16 => agentPerm.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 17 => groupMember.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 18 => group.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 19 => limit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 20 => userAttribute.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = event.RawEvent.Data
  }
  
  object Data extends scalapb.GeneratedMessageCompanion[event.RawEvent.Data] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.RawEvent.Data] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.RawEvent.Data = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      event.RawEvent.Data(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.account.Account]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.account.Agent]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.conversation.Message]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.conversation.Conversation]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.conversation.Postback]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.content.Content]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.user.Topic]],
        __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.user.Presence]],
        __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.user.User]],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.user.UnreadTopic]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.user.MyUser]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.notibox.Notification]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.notibox.Box]],
        __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.account.AgentPerm]],
        __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.account.GroupMember]],
        __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.account.AgentGroup]],
        __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[payment.Limit]],
        __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.user.AttributeData]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[event.RawEvent.Data] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        event.RawEvent.Data(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.account.Account]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.account.Agent]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.conversation.Message]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.conversation.Conversation]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.conversation.Postback]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.content.Content]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.user.Topic]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.user.Presence]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.user.User]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.user.UnreadTopic]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.user.MyUser]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.notibox.Notification]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.notibox.Box]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.account.AgentPerm]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.account.GroupMember]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.account.AgentGroup]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[payment.Limit]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.user.AttributeData]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = event.RawEvent.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = event.RawEvent.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = account.Account
        case 2 => __out = account.Agent
        case 3 => __out = conversation.Message
        case 4 => __out = conversation.Conversation
        case 5 => __out = conversation.Postback
        case 6 => __out = content.Content
        case 7 => __out = user.Topic
        case 8 => __out = user.Presence
        case 10 => __out = user.User
        case 11 => __out = user.UnreadTopic
        case 12 => __out = user.MyUser
        case 14 => __out = notibox.Notification
        case 15 => __out = notibox.Box
        case 16 => __out = account.AgentPerm
        case 17 => __out = account.GroupMember
        case 18 => __out = account.AgentGroup
        case 19 => __out = payment.Limit
        case 20 => __out = user.AttributeData
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = event.RawEvent.Data(
    )
    implicit class DataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.RawEvent.Data]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.RawEvent.Data](_l) {
      def account: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Account] = field(_.getAccount)((c_, f_) => c_.copy(account = Option(f_)))
      def optionalAccount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Account]] = field(_.account)((c_, f_) => c_.copy(account = f_))
      def agent: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Agent] = field(_.getAgent)((c_, f_) => c_.copy(agent = Option(f_)))
      def optionalAgent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Agent]] = field(_.agent)((c_, f_) => c_.copy(agent = f_))
      def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.conversation.Message] = field(_.getMessage)((c_, f_) => c_.copy(message = Option(f_)))
      def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.conversation.Message]] = field(_.message)((c_, f_) => c_.copy(message = f_))
      def conversation: _root_.scalapb.lenses.Lens[UpperPB, _root_.conversation.Conversation] = field(_.getConversation)((c_, f_) => c_.copy(conversation = Option(f_)))
      def optionalConversation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.conversation.Conversation]] = field(_.conversation)((c_, f_) => c_.copy(conversation = f_))
      def postback: _root_.scalapb.lenses.Lens[UpperPB, _root_.conversation.Postback] = field(_.getPostback)((c_, f_) => c_.copy(postback = Option(f_)))
      def optionalPostback: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.conversation.Postback]] = field(_.postback)((c_, f_) => c_.copy(postback = f_))
      def content: _root_.scalapb.lenses.Lens[UpperPB, _root_.content.Content] = field(_.getContent)((c_, f_) => c_.copy(content = Option(f_)))
      def optionalContent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.content.Content]] = field(_.content)((c_, f_) => c_.copy(content = f_))
      def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Topic] = field(_.getTopic)((c_, f_) => c_.copy(topic = Option(f_)))
      def optionalTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Topic]] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
      def presence: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Presence] = field(_.getPresence)((c_, f_) => c_.copy(presence = Option(f_)))
      def optionalPresence: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Presence]] = field(_.presence)((c_, f_) => c_.copy(presence = f_))
      def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
      def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
      def unreadTopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.UnreadTopic] = field(_.getUnreadTopic)((c_, f_) => c_.copy(unreadTopic = Option(f_)))
      def optionalUnreadTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.UnreadTopic]] = field(_.unreadTopic)((c_, f_) => c_.copy(unreadTopic = f_))
      def myUser: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.MyUser] = field(_.getMyUser)((c_, f_) => c_.copy(myUser = Option(f_)))
      def optionalMyUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.MyUser]] = field(_.myUser)((c_, f_) => c_.copy(myUser = f_))
      def notification: _root_.scalapb.lenses.Lens[UpperPB, _root_.notibox.Notification] = field(_.getNotification)((c_, f_) => c_.copy(notification = Option(f_)))
      def optionalNotification: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.notibox.Notification]] = field(_.notification)((c_, f_) => c_.copy(notification = f_))
      def notibox: _root_.scalapb.lenses.Lens[UpperPB, _root_.notibox.Box] = field(_.getNotibox)((c_, f_) => c_.copy(notibox = Option(f_)))
      def optionalNotibox: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.notibox.Box]] = field(_.notibox)((c_, f_) => c_.copy(notibox = f_))
      def agentPerm: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.AgentPerm] = field(_.getAgentPerm)((c_, f_) => c_.copy(agentPerm = Option(f_)))
      def optionalAgentPerm: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.AgentPerm]] = field(_.agentPerm)((c_, f_) => c_.copy(agentPerm = f_))
      def groupMember: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.GroupMember] = field(_.getGroupMember)((c_, f_) => c_.copy(groupMember = Option(f_)))
      def optionalGroupMember: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.GroupMember]] = field(_.groupMember)((c_, f_) => c_.copy(groupMember = f_))
      def group: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.AgentGroup] = field(_.getGroup)((c_, f_) => c_.copy(group = Option(f_)))
      def optionalGroup: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.AgentGroup]] = field(_.group)((c_, f_) => c_.copy(group = f_))
      def limit: _root_.scalapb.lenses.Lens[UpperPB, payment.Limit] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
      def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[payment.Limit]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
      def userAttribute: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.AttributeData] = field(_.getUserAttribute)((c_, f_) => c_.copy(userAttribute = Option(f_)))
      def optionalUserAttribute: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.AttributeData]] = field(_.userAttribute)((c_, f_) => c_.copy(userAttribute = f_))
    }
    final val ACCOUNT_FIELD_NUMBER = 1
    final val AGENT_FIELD_NUMBER = 2
    final val MESSAGE_FIELD_NUMBER = 3
    final val CONVERSATION_FIELD_NUMBER = 4
    final val POSTBACK_FIELD_NUMBER = 5
    final val CONTENT_FIELD_NUMBER = 6
    final val TOPIC_FIELD_NUMBER = 7
    final val PRESENCE_FIELD_NUMBER = 8
    final val USER_FIELD_NUMBER = 10
    final val UNREAD_TOPIC_FIELD_NUMBER = 11
    final val MY_USER_FIELD_NUMBER = 12
    final val NOTIFICATION_FIELD_NUMBER = 14
    final val NOTIBOX_FIELD_NUMBER = 15
    final val AGENT_PERM_FIELD_NUMBER = 16
    final val GROUP_MEMBER_FIELD_NUMBER = 17
    final val GROUP_FIELD_NUMBER = 18
    final val LIMIT_FIELD_NUMBER = 19
    final val USER_ATTRIBUTE_FIELD_NUMBER = 20
  }
  
  implicit class RawEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.RawEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.RawEvent](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def topics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.topics)((c_, f_) => c_.copy(topics = f_))
    def by: _root_.scalapb.lenses.Lens[UpperPB, event.By] = field(_.getBy)((c_, f_) => c_.copy(by = Option(f_)))
    def optionalBy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[event.By]] = field(_.by)((c_, f_) => c_.copy(by = f_))
    def `object`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`object`)((c_, f_) => c_.copy(`object` = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, event.RawEvent.Data] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[event.RawEvent.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val CREATED_FIELD_NUMBER = 8
  final val TYPE_FIELD_NUMBER = 9
  final val TOPICS_FIELD_NUMBER = 11
  final val BY_FIELD_NUMBER = 50
  final val OBJECT_FIELD_NUMBER = 13
  final val CONVERSATION_ID_FIELD_NUMBER = 15
  final val DATA_FIELD_NUMBER = 20
}
