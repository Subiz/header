// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

@SerialVersionUID(0L)
final case class AutomationEvent(
    ctx: scala.Option[common.Context] = None,
    accountId: _root_.scala.Predef.String = "",
    userId: _root_.scala.Predef.String = "",
    automation: scala.Option[_root_.user.Automation] = None,
    session: scala.Option[_root_.user.Session] = None,
    user: scala.Option[_root_.user.User] = None,
    event: scala.Option[_root_.event.RawEvent] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AutomationEvent] with scalapb.lenses.Updatable[AutomationEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId) }
      if (userId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, userId) }
      if (automation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(automation.get.serializedSize) + automation.get.serializedSize }
      if (session.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(session.get.serializedSize) + session.get.serializedSize }
      if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
      if (event.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(event.get.serializedSize) + event.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      automation.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      session.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      user.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      event.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.event.AutomationEvent = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __userId = this.userId
      var __automation = this.automation
      var __session = this.session
      var __user = this.user
      var __event = this.event
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __accountId = _input__.readString()
          case 34 =>
            __userId = _input__.readString()
          case 42 =>
            __automation = Option(_root_.scalapb.LiteParser.readMessage(_input__, __automation.getOrElse(_root_.user.Automation.defaultInstance)))
          case 50 =>
            __session = Option(_root_.scalapb.LiteParser.readMessage(_input__, __session.getOrElse(_root_.user.Session.defaultInstance)))
          case 58 =>
            __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
          case 74 =>
            __event = Option(_root_.scalapb.LiteParser.readMessage(_input__, __event.getOrElse(_root_.event.RawEvent.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      _root_.event.AutomationEvent(
          ctx = __ctx,
          accountId = __accountId,
          userId = __userId,
          automation = __automation,
          session = __session,
          user = __user,
          event = __event
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: AutomationEvent = copy(ctx = None)
    def withCtx(__v: common.Context): AutomationEvent = copy(ctx = Option(__v))
    def withAccountId(__v: _root_.scala.Predef.String): AutomationEvent = copy(accountId = __v)
    def withUserId(__v: _root_.scala.Predef.String): AutomationEvent = copy(userId = __v)
    def getAutomation: _root_.user.Automation = automation.getOrElse(_root_.user.Automation.defaultInstance)
    def clearAutomation: AutomationEvent = copy(automation = None)
    def withAutomation(__v: _root_.user.Automation): AutomationEvent = copy(automation = Option(__v))
    def getSession: _root_.user.Session = session.getOrElse(_root_.user.Session.defaultInstance)
    def clearSession: AutomationEvent = copy(session = None)
    def withSession(__v: _root_.user.Session): AutomationEvent = copy(session = Option(__v))
    def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
    def clearUser: AutomationEvent = copy(user = None)
    def withUser(__v: _root_.user.User): AutomationEvent = copy(user = Option(__v))
    def getEvent: _root_.event.RawEvent = event.getOrElse(_root_.event.RawEvent.defaultInstance)
    def clearEvent: AutomationEvent = copy(event = None)
    def withEvent(__v: _root_.event.RawEvent): AutomationEvent = copy(event = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 5 => automation.orNull
        case 6 => session.orNull
        case 7 => user.orNull
        case 9 => event.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(accountId)
        case 4 => _root_.scalapb.descriptors.PString(userId)
        case 5 => automation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => session.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => event.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.event.AutomationEvent
}

object AutomationEvent extends scalapb.GeneratedMessageCompanion[event.AutomationEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.AutomationEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.AutomationEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.AutomationEvent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.user.Automation]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.user.Session]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.user.User]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.event.RawEvent]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.AutomationEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.AutomationEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.user.Automation]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.user.Session]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.user.User]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.event.RawEvent]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 5 => __out = user.Automation
      case 6 => __out = user.Session
      case 7 => __out = user.User
      case 9 => __out = event.RawEvent
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.AutomationEvent(
  )
  implicit class AutomationEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.AutomationEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.AutomationEvent](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def automation: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Automation] = field(_.getAutomation)((c_, f_) => c_.copy(automation = Option(f_)))
    def optionalAutomation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Automation]] = field(_.automation)((c_, f_) => c_.copy(automation = f_))
    def session: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Session] = field(_.getSession)((c_, f_) => c_.copy(session = Option(f_)))
    def optionalSession: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Session]] = field(_.session)((c_, f_) => c_.copy(session = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def event: _root_.scalapb.lenses.Lens[UpperPB, _root_.event.RawEvent] = field(_.getEvent)((c_, f_) => c_.copy(event = Option(f_)))
    def optionalEvent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.event.RawEvent]] = field(_.event)((c_, f_) => c_.copy(event = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val USER_ID_FIELD_NUMBER = 4
  final val AUTOMATION_FIELD_NUMBER = 5
  final val SESSION_FIELD_NUMBER = 6
  final val USER_FIELD_NUMBER = 7
  final val EVENT_FIELD_NUMBER = 9
}
