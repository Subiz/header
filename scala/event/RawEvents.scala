// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

@SerialVersionUID(0L)
final case class RawEvents(
    ctx: scala.Option[common.Context] = None,
    events: _root_.scala.collection.Seq[event.RawEvent] = _root_.scala.collection.Seq.empty,
    total: _root_.scala.Long = 0L,
    anchor: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[RawEvents] with scalapb.lenses.Updatable[RawEvents] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      events.foreach(events => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(events.serializedSize) + events.serializedSize)
      if (total != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, total) }
      if (anchor != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, anchor) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = total
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = anchor
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      events.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.RawEvents = {
      var __ctx = this.ctx
      val __events = (_root_.scala.collection.immutable.Vector.newBuilder[event.RawEvent] ++= this.events)
      var __total = this.total
      var __anchor = this.anchor
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 34 =>
            __events += _root_.scalapb.LiteParser.readMessage(_input__, event.RawEvent.defaultInstance)
          case 16 =>
            __total = _input__.readInt64()
          case 26 =>
            __anchor = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      event.RawEvents(
          ctx = __ctx,
          events = __events.result(),
          total = __total,
          anchor = __anchor
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: RawEvents = copy(ctx = None)
    def withCtx(__v: common.Context): RawEvents = copy(ctx = Option(__v))
    def clearEvents = copy(events = _root_.scala.collection.Seq.empty)
    def addEvents(__vs: event.RawEvent*): RawEvents = addAllEvents(__vs)
    def addAllEvents(__vs: TraversableOnce[event.RawEvent]): RawEvents = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.collection.Seq[event.RawEvent]): RawEvents = copy(events = __v)
    def withTotal(__v: _root_.scala.Long): RawEvents = copy(total = __v)
    def withAnchor(__v: _root_.scala.Predef.String): RawEvents = copy(anchor = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 4 => events
        case 2 => {
          val __t = total
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = anchor
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(events.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PLong(total)
        case 3 => _root_.scalapb.descriptors.PString(anchor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = event.RawEvents
}

object RawEvents extends scalapb.GeneratedMessageCompanion[event.RawEvents] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.RawEvents] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.RawEvents = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.RawEvents(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[event.RawEvent]],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.RawEvents] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.RawEvents(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[event.RawEvent]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 4 => __out = event.RawEvent
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.RawEvents(
  )
  implicit class RawEventsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.RawEvents]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.RawEvents](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[event.RawEvent]] = field(_.events)((c_, f_) => c_.copy(events = f_))
    def total: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val EVENTS_FIELD_NUMBER = 4
  final val TOTAL_FIELD_NUMBER = 2
  final val ANCHOR_FIELD_NUMBER = 3
}
