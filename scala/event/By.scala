// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

@SerialVersionUID(0L)
final case class By(
    device: scala.Option[common.Device] = None,
    id: _root_.scala.Predef.String = "",
    clientId: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[By] with scalapb.lenses.Updatable[By] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (device.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(device.get.serializedSize) + device.get.serializedSize }
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id) }
      if (clientId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, clientId) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      device.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = clientId
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.By = {
      var __device = this.device
      var __id = this.id
      var __clientId = this.clientId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __device = Option(_root_.scalapb.LiteParser.readMessage(_input__, __device.getOrElse(common.Device.defaultInstance)))
          case 26 =>
            __id = _input__.readString()
          case 34 =>
            __clientId = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      event.By(
          device = __device,
          id = __id,
          clientId = __clientId
      )
    }
    def getDevice: common.Device = device.getOrElse(common.Device.defaultInstance)
    def clearDevice: By = copy(device = None)
    def withDevice(__v: common.Device): By = copy(device = Option(__v))
    def withId(__v: _root_.scala.Predef.String): By = copy(id = __v)
    def withClientId(__v: _root_.scala.Predef.String): By = copy(clientId = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => device.orNull
        case 3 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = clientId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => device.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(id)
        case 4 => _root_.scalapb.descriptors.PString(clientId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = event.By
}

object By extends scalapb.GeneratedMessageCompanion[event.By] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.By] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.By = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.By(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Device]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.By] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.By(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[common.Device]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = common.Device
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.By(
  )
  implicit class ByLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.By]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.By](_l) {
    def device: _root_.scalapb.lenses.Lens[UpperPB, common.Device] = field(_.getDevice)((c_, f_) => c_.copy(device = Option(f_)))
    def optionalDevice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Device]] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
  }
  final val DEVICE_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val CLIENT_ID_FIELD_NUMBER = 4
}
