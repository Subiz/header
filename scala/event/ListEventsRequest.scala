// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package event

@SerialVersionUID(0L)
final case class ListEventsRequest(
    ctx: scala.Option[common.Context] = None,
    accountId: _root_.scala.Predef.String = "",
    userId: _root_.scala.Predef.String = "",
    query: _root_.scala.Predef.String = "",
    anchor: _root_.scala.Predef.String = "",
    limit: _root_.scala.Int = 0,
    category: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ListEventsRequest] with scalapb.lenses.Updatable[ListEventsRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId) }
      if (userId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, userId) }
      if (query != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, query) }
      if (anchor != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, anchor) }
      if (limit != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, limit) }
      if (category != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, category) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = query
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = anchor
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = limit
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      {
        val __v = category
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): event.ListEventsRequest = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __userId = this.userId
      var __query = this.query
      var __anchor = this.anchor
      var __limit = this.limit
      var __category = this.category
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = _input__.readString()
          case 26 =>
            __userId = _input__.readString()
          case 34 =>
            __query = _input__.readString()
          case 42 =>
            __anchor = _input__.readString()
          case 48 =>
            __limit = _input__.readInt32()
          case 74 =>
            __category = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      event.ListEventsRequest(
          ctx = __ctx,
          accountId = __accountId,
          userId = __userId,
          query = __query,
          anchor = __anchor,
          limit = __limit,
          category = __category
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: ListEventsRequest = copy(ctx = None)
    def withCtx(__v: common.Context): ListEventsRequest = copy(ctx = Option(__v))
    def withAccountId(__v: _root_.scala.Predef.String): ListEventsRequest = copy(accountId = __v)
    def withUserId(__v: _root_.scala.Predef.String): ListEventsRequest = copy(userId = __v)
    def withQuery(__v: _root_.scala.Predef.String): ListEventsRequest = copy(query = __v)
    def withAnchor(__v: _root_.scala.Predef.String): ListEventsRequest = copy(anchor = __v)
    def withLimit(__v: _root_.scala.Int): ListEventsRequest = copy(limit = __v)
    def withCategory(__v: _root_.scala.Predef.String): ListEventsRequest = copy(category = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = query
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = anchor
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = limit
          if (__t != 0) __t else null
        }
        case 9 => {
          val __t = category
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(accountId)
        case 3 => _root_.scalapb.descriptors.PString(userId)
        case 4 => _root_.scalapb.descriptors.PString(query)
        case 5 => _root_.scalapb.descriptors.PString(anchor)
        case 6 => _root_.scalapb.descriptors.PInt(limit)
        case 9 => _root_.scalapb.descriptors.PString(category)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = event.ListEventsRequest
}

object ListEventsRequest extends scalapb.GeneratedMessageCompanion[event.ListEventsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[event.ListEventsRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): event.ListEventsRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    event.ListEventsRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[event.ListEventsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      event.ListEventsRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = event.ListEventsRequest(
  )
  implicit class ListEventsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, event.ListEventsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, event.ListEventsRequest](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def query: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.query)((c_, f_) => c_.copy(query = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def category: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.category)((c_, f_) => c_.copy(category = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val USER_ID_FIELD_NUMBER = 3
  final val QUERY_FIELD_NUMBER = 4
  final val ANCHOR_FIELD_NUMBER = 5
  final val LIMIT_FIELD_NUMBER = 6
  final val CATEGORY_FIELD_NUMBER = 9
}
