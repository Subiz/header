// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class MyUser(
    ctx: scala.Option[common.Context] = None,
    agentId: scala.Option[_root_.scala.Predef.String] = None,
    user: scala.Option[_root_.user.User] = None,
    unread: scala.Option[_root_.scala.Int] = None,
    updated: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[MyUser] with scalapb.lenses.Updatable[MyUser] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (agentId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, agentId.get) }
      if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
      if (unread.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, unread.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, updated.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      agentId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      user.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      unread.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.user.MyUser = {
      var __ctx = this.ctx
      var __agentId = this.agentId
      var __user = this.user
      var __unread = this.unread
      var __updated = this.updated
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __agentId = Option(_input__.readString())
          case 26 =>
            __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
          case 32 =>
            __unread = Option(_input__.readInt32())
          case 40 =>
            __updated = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      _root_.user.MyUser(
          ctx = __ctx,
          agentId = __agentId,
          user = __user,
          unread = __unread,
          updated = __updated
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: MyUser = copy(ctx = None)
    def withCtx(__v: common.Context): MyUser = copy(ctx = Option(__v))
    def getAgentId: _root_.scala.Predef.String = agentId.getOrElse("")
    def clearAgentId: MyUser = copy(agentId = None)
    def withAgentId(__v: _root_.scala.Predef.String): MyUser = copy(agentId = Option(__v))
    def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
    def clearUser: MyUser = copy(user = None)
    def withUser(__v: _root_.user.User): MyUser = copy(user = Option(__v))
    def getUnread: _root_.scala.Int = unread.getOrElse(0)
    def clearUnread: MyUser = copy(unread = None)
    def withUnread(__v: _root_.scala.Int): MyUser = copy(unread = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: MyUser = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): MyUser = copy(updated = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => agentId.orNull
        case 3 => user.orNull
        case 4 => unread.orNull
        case 5 => updated.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => agentId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => unread.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.user.MyUser
}

object MyUser extends scalapb.GeneratedMessageCompanion[user.MyUser] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.MyUser] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.MyUser = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.MyUser(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.user.User]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.MyUser] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.MyUser(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.user.User]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 3 => __out = user.User
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.MyUser(
  )
  implicit class MyUserLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.MyUser]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.MyUser](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def agentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAgentId)((c_, f_) => c_.copy(agentId = Option(f_)))
    def optionalAgentId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def unread: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getUnread)((c_, f_) => c_.copy(unread = Option(f_)))
    def optionalUnread: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.unread)((c_, f_) => c_.copy(unread = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val AGENT_ID_FIELD_NUMBER = 2
  final val USER_FIELD_NUMBER = 3
  final val UNREAD_FIELD_NUMBER = 4
  final val UPDATED_FIELD_NUMBER = 5
}
