// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class ListNewsRequest(
    ctx: scala.Option[common.Context] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    startTime: scala.Option[_root_.scala.Long] = None,
    limit: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ListNewsRequest] with scalapb.lenses.Updatable[ListNewsRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, userId.get) }
      if (startTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, startTime.get) }
      if (limit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, limit.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      userId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      startTime.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      limit.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.ListNewsRequest = {
      var __ctx = this.ctx
      var __userId = this.userId
      var __startTime = this.startTime
      var __limit = this.limit
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __userId = Option(_input__.readString())
          case 32 =>
            __startTime = Option(_input__.readInt64())
          case 58 =>
            __limit = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.ListNewsRequest(
          ctx = __ctx,
          userId = __userId,
          startTime = __startTime,
          limit = __limit
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: ListNewsRequest = copy(ctx = None)
    def withCtx(__v: common.Context): ListNewsRequest = copy(ctx = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: ListNewsRequest = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): ListNewsRequest = copy(userId = Option(__v))
    def getStartTime: _root_.scala.Long = startTime.getOrElse(0L)
    def clearStartTime: ListNewsRequest = copy(startTime = None)
    def withStartTime(__v: _root_.scala.Long): ListNewsRequest = copy(startTime = Option(__v))
    def getLimit: _root_.scala.Predef.String = limit.getOrElse("")
    def clearLimit: ListNewsRequest = copy(limit = None)
    def withLimit(__v: _root_.scala.Predef.String): ListNewsRequest = copy(limit = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => userId.orNull
        case 4 => startTime.orNull
        case 7 => limit.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => startTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => limit.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.ListNewsRequest
}

object ListNewsRequest extends scalapb.GeneratedMessageCompanion[user.ListNewsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.ListNewsRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.ListNewsRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.ListNewsRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.ListNewsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.ListNewsRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.ListNewsRequest(
  )
  implicit class ListNewsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.ListNewsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.ListNewsRequest](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def startTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStartTime)((c_, f_) => c_.copy(startTime = Option(f_)))
    def optionalStartTime: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val USER_ID_FIELD_NUMBER = 3
  final val START_TIME_FIELD_NUMBER = 4
  final val LIMIT_FIELD_NUMBER = 7
}
