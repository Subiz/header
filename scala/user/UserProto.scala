// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

object UserProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    common.CommonProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    user.AllType,
    user.AddToMyRequest,
    user.UserCreateResult,
    user.MyUser,
    user.AttributeDefinition,
    user.AttributeDefinitions,
    user.AttributeData,
    user.User,
    user.Users,
    user.Device,
    user.Trace,
    user.MergeRequest,
    user.CreateRequest,
    user.Topic,
    user.UnreadTopic,
    user.ReadTopicRequest,
    user.SubscribeRequest,
    user.SubizIDRequest,
    user.MaskResponse,
    user.SubizIDResponse,
    user.Segmentations,
    user.SegmentLoopState,
    user.UserSegmentCache,
    user.Segmentation,
    user.SegmentTracking,
    user.SegmentCondition,
    user.Condition,
    user.UserSearchResult,
    user.UserSearchRequest,
    user.IndexEvent,
    user.ListTopicsRequest,
    user.ListTopicsResult,
    user.ListNewsRequest,
    user.AddToMyList,
    user.Field,
    user.Presence,
    user.Presences,
    user.Visitor,
    user.Visitors,
    user.LastView,
    user.Automation,
    user.Automations,
    user.Session,
    user.DeleteAttrRequest,
    user.AutomationCheck
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CipiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci91c2VyL3VzZXIucHJvdG8SBHVzZXIaLmJpdGJ1Y2tldC5vcmcvc3ViaXova
  GVhZGVyL2NvbW1vbi9jb21tb24ucHJvdG8irwYKB0FsbFR5cGUSHgoEdXNlchgCIAEoCzIKLnVzZXIuVXNlclIEdXNlchIjCgJjc
  hgDIAEoCzITLnVzZXIuQ3JlYXRlUmVxdWVzdFICY3ISIwoGZmllbGRzGAUgASgLMgsudXNlci5GaWVsZFIGZmllbGRzEigKA3Vjc
  hgGIAEoCzIWLnVzZXIuVXNlckNyZWF0ZVJlc3VsdFIDdWNyEigKA3JwchgIIAEoCzIWLnVzZXIuUmVhZFRvcGljUmVxdWVzdFIDc
  nByEkUKEXVzZXJzZWFyY2hyZXF1ZXN0GAkgASgLMhcudXNlci5Vc2VyU2VhcmNoUmVxdWVzdFIRdXNlcnNlYXJjaHJlcXVlc3QSQ
  goQdXNlcnNlYXJjaHJlc3VsdBgKIAEoCzIWLnVzZXIuVXNlclNlYXJjaFJlc3VsdFIQdXNlcnNlYXJjaHJlc3VsdBIiCgJtcxgLI
  AEoCzISLnVzZXIuTWFza1Jlc3BvbnNlUgJtcxIoCgNsdHIYDCABKAsyFi51c2VyLkxpc3RUb3BpY3NSZXN1bHRSA2x0chIiCgJzZ
  xgOIAEoCzISLnVzZXIuU2VnbWVudGF0aW9uUgJzZxIkCgVwcmVzbhgPIAEoCzIOLnVzZXIuUHJlc2VuY2VSBXByZXNuEh0KAnZpG
  BEgASgLMg0udXNlci5WaXNpdG9yUgJ2aRIgCgN2aXMYEiABKAsyDi51c2VyLlZpc2l0b3JzUgN2aXMSIQoFdG9waWMYEyABKAsyC
  y51c2VyLlRvcGljUgV0b3BpYxIpCgZ1dG9waWMYFCABKAsyES51c2VyLlVucmVhZFRvcGljUgZ1dG9waWMSJAoGbXl1c2VyGBUgA
  SgLMgwudXNlci5NeVVzZXJSBm15dXNlchIwCgphdXRvbWF0aW9uGBcgASgLMhAudXNlci5BdXRvbWF0aW9uUgphdXRvbWF0aW9uE
  jMKC2F1dG9tYXRpb25zGBkgASgLMhEudXNlci5BdXRvbWF0aW9uc1ILYXV0b21hdGlvbnMSJwoHc2Vzc2lvbhgaIAEoCzINLnVzZ
  XIuU2Vzc2lvblIHc2Vzc2lvbiJpCg5BZGRUb015UmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhcKB
  3VzZXJfaWQYAyABKAlSBnVzZXJJZBIbCglhZ2VudF9pZHMYBSADKAlSCGFnZW50SWRzIjYKEFVzZXJDcmVhdGVSZXN1bHQSDgoCa
  WQYAyABKAlSAmlkEhIKBG1hc2sYBSABKAlSBG1hc2simAEKBk15VXNlchIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY
  3R4EhkKCGFnZW50X2lkGAIgASgJUgdhZ2VudElkEh4KBHVzZXIYAyABKAsyCi51c2VyLlVzZXJSBHVzZXISFgoGdW5yZWFkGAQgA
  SgFUgZ1bnJlYWQSGAoHdXBkYXRlZBgFIAEoA1IHdXBkYXRlZCKAAgoTQXR0cmlidXRlRGVmaW5pdGlvbhIhCgNjdHgYASABKAsyD
  y5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBISCgRuYW1lGAMgASgJUgRuYW1lEiAKC
  2Rlc2NyaXB0aW9uGAQgASgJUgtkZXNjcmlwdGlvbhISCgR0eXBlGAUgASgJUgR0eXBlEh0KCmxpc3RfaXRlbXMYBiADKAlSCWxpc
  3RJdGVtcxIQCgNrZXkYByABKAlSA2tleRISCgRraW5kGAggASgJUgRraW5kEhgKB3VwZGF0ZWQYCSABKANSB3VwZGF0ZWQidAoUQ
  XR0cmlidXRlRGVmaW5pdGlvbnMSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBI5CgphdHRyaWJ1dGVzGAIgAygLM
  hkudXNlci5BdHRyaWJ1dGVEZWZpbml0aW9uUgphdHRyaWJ1dGVzIt4BCg1BdHRyaWJ1dGVEYXRhEiEKA2N0eBgBIAEoCzIPLmNvb
  W1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhcKB3VzZXJfaWQYAyABKAlSBnVzZXJJZBIQC
  gNrZXkYBCABKAlSA2tleRIUCgV2YWx1ZRgFIAEoCVIFdmFsdWUSFAoFc3RhdGUYBiABKAlSBXN0YXRlEhgKB2NyZWF0ZWQYByABK
  ANSB2NyZWF0ZWQSGgoIbW9kaWZpZWQYCCABKANSCG1vZGlmaWVkIu0GCgRVc2VyEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250Z
  Xh0UgNjdHgSDgoCaWQYAyABKAlSAmlkEh0KCmFjY291bnRfaWQYBCABKAlSCWFjY291bnRJZBIaCghmdWxsbmFtZRgFIAEoCVIIZ
  nVsbG5hbWUSFgoGcGhvbmVzGAcgAygJUgZwaG9uZXMSFgoGZW1haWxzGAogAygJUgZlbWFpbHMSIwoGdHJhY2VzGAsgAygLMgsud
  XNlci5UcmFjZVIGdHJhY2VzEiYKB2RldmljZXMYDSADKAsyDC51c2VyLkRldmljZVIHZGV2aWNlcxIVCgZpc19iYW4YDiABKAhSB
  WlzQmFuEh0KCmF2YXRhcl91cmwYDyABKAlSCWF2YXRhclVybBIzCgphdHRyaWJ1dGVzGBIgAygLMhMudXNlci5BdHRyaWJ1dGVEY
  XRhUgphdHRyaWJ1dGVzEhoKCHNlZ21lbnRzGBMgAygJUghzZWdtZW50cxIWCgZsYWJlbHMYFCADKAlSBmxhYmVscxIiCgx1bnN1Y
  nNjcmliZWQYFSABKAhSDHVuc3Vic2NyaWJlZBIfCgttYXJrZWRfc3BhbRgWIAEoCFIKbWFya2VkU3BhbRIhCgxoYXJkX2JvdW5jZ
  WQYFyABKAhSC2hhcmRCb3VuY2VkEiUKDnRvdGFsX3Nlc3Npb25zGBggASgFUg10b3RhbFNlc3Npb25zEhkKCHN1Yml6X2lkGBkgA
  SgJUgdzdWJpeklkEhoKCHRpbWV6b25lGBogASgJUgh0aW1lem9uZRIhCgxjb3VudHJ5X2NvZGUYGyABKAlSC2NvdW50cnlDb2RlE
  hIKBGNpdHkYICABKAlSBGNpdHkSGgoIbGFuZ3VhZ2UYHCABKAlSCGxhbmd1YWdlEhgKB2FsaWFzZXMYHiADKAlSB2FsaWFzZXMSE
  goEc2VlbhgfIAEoA1IEc2VlbhIjCgZmaWVsZHMYISADKAsyCy51c2VyLkZpZWxkUgZmaWVsZHMSEAoDcGFyGCIgASgFUgNwYXISG
  goIbW9kaWZpZWQYJCABKANSCG1vZGlmaWVkEiMKDW1vZGlmaWVkX3dlZWsYJSABKAVSDG1vZGlmaWVkV2VlaxIcCglhY3RpdmF0Z
  WQYJiABKANSCWFjdGl2YXRlZCIpCgVVc2VycxIgCgV1c2VycxgBIAMoCzIKLnVzZXIuVXNlclIFdXNlcnMiwwEKBkRldmljZRIOC
  gJpZBgDIAEoBVICaWQSIQoMdXNlcmFnZW50X2lkGAQgASgFUgt1c2VyYWdlbnRJZBIcCgl1c2VyYWdlbnQYBSABKAlSCXVzZXJhZ
  2VudBIrChFzY3JlZW5fcmVzb2x1dGlvbhgGIAEoCVIQc2NyZWVuUmVzb2x1dGlvbhIfCgtsYW5ndWFnZV9pZBgHIAEoBVIKbGFuZ
  3VhZ2VJZBIaCghsYW5ndWFnZRgIIAEoCVIIbGFuZ3VhZ2UiggMKBVRyYWNlEg4KAmlkGAMgASgJUgJpZBIOCgJpcBgEIAEoCVICa
  XASHwoLbG9jYXRpb25faWQYBSABKAVSCmxvY2F0aW9uSWQSGwoJY2l0eV9uYW1lGAggASgJUghjaXR5TmFtZRIhCgxjb3VudHJ5X
  25hbWUYCSABKAlSC2NvdW50cnlOYW1lEiEKDGNvdW50cnlfY29kZRgTIAEoCVILY291bnRyeUNvZGUSJQoOY29udGluZW50X2NvZ
  GUYCiABKAlSDWNvbnRpbmVudENvZGUSJQoOY29udGluZW50X25hbWUYEiABKAlSDWNvbnRpbmVudE5hbWUSGgoIbGF0aXR1ZGUYD
  CABKAJSCGxhdGl0dWRlEhwKCWxvbmdpdHVkZRgNIAEoAlIJbG9uZ2l0dWRlEh8KC3Bvc3RhbF9jb2RlGA4gASgJUgpwb3N0YWxDb
  2RlEhoKCHRpbWV6b25lGBAgASgJUgh0aW1lem9uZRIQCgNpc3AYESABKAlSA2lzcCJeCgxNZXJnZVJlcXVlc3QSIQoDY3R4GAEgA
  SgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJpZBgFIAEoCVICaWQSGwoJcmVjZW50X2lkGAQgASgJUghyZWNlbnRJZCJKCg1Dc
  mVhdGVSZXF1ZXN0EiEKDGNoYWxsZW5nZV9pZBgDIAEoCVILY2hhbGxlbmdlSWQSFgoGYW5zd2VyGAQgASgJUgZhbnN3ZXIipQEKB
  VRvcGljEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhQKB
  XRvcGljGAMgASgJUgV0b3BpYxISCgR0eXBlGAUgASgJUgR0eXBlEhgKB3VwZGF0ZWQYCCABKANSB3VwZGF0ZWQSFgoGdW5yZWFkG
  AkgASgFUgZ1bnJlYWQiwAEKC1VucmVhZFRvcGljEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSFAoFdG9waWMYA
  yABKAlSBXRvcGljEhkKCGFnZW50X2lkGAQgASgJUgdhZ2VudElkEhcKB3VzZXJfaWQYBSABKAlSBnVzZXJJZBISCgR0eXBlGAYgA
  SgJUgR0eXBlEhgKB3VwZGF0ZWQYCCABKANSB3VwZGF0ZWQSFgoGdW5yZWFkGAkgASgFUgZ1bnJlYWQifwoQUmVhZFRvcGljUmVxd
  WVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhQKBXRvcGljGAMgASgJUgV0b3BpYxIXCgd1c2VyX2lkGAQgA
  SgJUgZ1c2VySWQSGQoIYWdlbnRfaWQYBSABKAlSB2FnZW50SWQiaAoQU3Vic2NyaWJlUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb
  21tb24uQ29udGV4dFIDY3R4EhkKCGFnZW50X2lkGAMgASgJUgdhZ2VudElkEhYKBnRvcGljcxgEIAMoCVIGdG9waWNzIm0KDlN1Y
  ml6SURSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSGQoIc3ViaXpfaWQYAiABKAlSB3N1Yml6SWQSH
  QoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkInUKDE1hc2tSZXNwb25zZRIZCghzdWJpel9pZBgCIAEoCVIHc3ViaXpJZBIdC
  gphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSFwoHdXNlcl9pZBgEIAEoCVIGdXNlcklkEhIKBG1hc2sYBSABKAlSBG1hc2sih
  wEKD1N1Yml6SURSZXNwb25zZRIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhkKCHN1Yml6X2lkGAIgASgJUgdzd
  WJpeklkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIXCgd1c2VyX2lkGAQgASgJUgZ1c2VySWQibAoNU2VnbWVudGF0a
  W9ucxIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EjgKDXNlZ21lbnRhdGlvbnMYAyADKAsyEi51c2VyLlNlZ21lb
  nRhdGlvblINc2VnbWVudGF0aW9ucyKzAQoQU2VnbWVudExvb3BTdGF0ZRIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY
  3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBIZCgh1c2VyX3BhchgDIAEoBVIHdXNlclBhchIhCgxsb29wX2NyZWF0Z
  WQYBiABKANSC2xvb3BDcmVhdGVkEh8KC2xvb3BfbnVtYmVyGAcgASgDUgpsb29wTnVtYmVyIocBChBVc2VyU2VnbWVudENhY2hlE
  iEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEg4KAmlkGAMgA
  SgJUgJpZBIhCgxjb25kaXRpb25faWQYBCABKAlSC2NvbmRpdGlvbklkIrYDCgxTZWdtZW50YXRpb24SIQoDY3R4GAEgASgLMg8uY
  29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSDgoCaWQYBSABKAlSAmlkEhIKBG5hbWUYA
  yABKAlSBG5hbWUSIAoLZGVzY3JpcHRpb24YCyABKAlSC2Rlc2NyaXB0aW9uEh0KCnVzZXJfY291bnQYBCABKANSCXVzZXJDb3Vud
  BIQCgNyYW4YCCABKANSA3JhbhIhCgxzdGFydGVkX2Zyb20YByABKANSC3N0YXJ0ZWRGcm9tEhgKB2NyZWF0ZWQYCSABKANSB2NyZ
  WF0ZWQSGgoIbW9kaWZpZWQYCiABKANSCG1vZGlmaWVkEhQKBXN0YXRlGAwgASgJUgVzdGF0ZRI0Cgljb25kaXRpb24YEyABKAsyF
  i51c2VyLlNlZ21lbnRDb25kaXRpb25SCWNvbmRpdGlvbhIlCg5jdXJyZW50X2N1cnNvchgSIAEoCVINY3VycmVudEN1cnNvciIhC
  gVTdGF0ZRIKCgZhY3RpdmUQABIMCghpbmFjdGl2ZRABIrIBCg9TZWdtZW50VHJhY2tpbmcSIQoDY3R4GAEgASgLMg8uY29tbW9uL
  kNvbnRleHRSA2N0eBIZCgh1c2VyX3BhchgCIAEoBVIHdXNlclBhchIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSIQoMb
  G9vcF9jcmVhdGVkGAcgASgDUgtsb29wQ3JlYXRlZBIfCgtsb29wX251bWJlchgIIAEoA1IKbG9vcE51bWJlciKbAwoQU2VnbWVud
  ENvbmRpdGlvbhISCgRqb2luGAIgASgJUgRqb2luEg4KAmlkGAQgASgJUgJpZBIdCgpldmVudF90eXBlGAUgASgJUglldmVudFR5c
  GUSIAoLY29tcG9zaXRpb24YBiABKAlSC2NvbXBvc2l0aW9uEhAKA2tleRgHIAEoCVIDa2V5Ei8KCmNvbmRpdGlvbnMYCCADKAsyD
  y51c2VyLkNvbmRpdGlvblIKY29uZGl0aW9ucxI9Cg5sZWZ0X2NvbmRpdGlvbhgLIAEoCzIWLnVzZXIuU2VnbWVudENvbmRpdGlvb
  lINbGVmdENvbmRpdGlvbhI/Cg9yaWdodF9jb25kaXRpb24YDCABKAsyFi51c2VyLlNlZ21lbnRDb25kaXRpb25SDnJpZ2h0Q29uZ
  Gl0aW9uIikKDEpvaW5PcGVyYXRvchIICgRub25lEAASBwoDYW5kEAESBgoCb3IQAiI0CgtDb21wb3NpdGlvbhIICgR0cnVlEAASB
  woDc3VtEAESBwoDYXZnEAISCQoFY291bnQQAyKOAQoJQ29uZGl0aW9uEhIKBGpvaW4YASABKAlSBGpvaW4SEAoDa2V5GAIgASgJU
  gNrZXkSGgoIb3BlcmF0b3IYAyABKAlSCG9wZXJhdG9yEhQKBXZhbHVlGAQgASgJUgV2YWx1ZSIpCgxKb2luT3BlcmF0b3ISCAoEb
  m9uZRAAEgcKA2FuZBABEgYKAm9yEAIirwIKEFVzZXJTZWFyY2hSZXN1bHQSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA
  2N0eBIUCgV0b3RhbBgDIAEoA1IFdG90YWwSIAoFdXNlcnMYBCADKAsyCi51c2VyLlVzZXJSBXVzZXJzEhYKBmFuY2hvchgFIAEoC
  VIGYW5jaG9yEhgKB3VucmVhZHMYBiADKAVSB3VucmVhZHMSTQoNdW5yZWFkX2NvdW50cxgHIAMoCzIoLnVzZXIuVXNlclNlYXJja
  FJlc3VsdC5VbnJlYWRDb3VudHNFbnRyeVIMdW5yZWFkQ291bnRzGj8KEVVucmVhZENvdW50c0VudHJ5EhAKA2tleRgBIAEoCVIDa
  2V5EhQKBXZhbHVlGAIgASgFUgV2YWx1ZToCOAEi1gEKEVVzZXJTZWFyY2hSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db
  250ZXh0UgNjdHgSJwoPc2VnbWVudGF0aW9uX2lkGAMgASgJUg5zZWdtZW50YXRpb25JZBIUCgVxdWVyeRgEIAEoCVIFcXVlcnkSF
  goGYW5jaG9yGAUgASgJUgZhbmNob3ISFAoFbGltaXQYBiABKAVSBWxpbWl0EhkKCGFnZW50X2lkGAggASgJUgdhZ2VudElkEhYKB
  nVucmVhZBgJIAEoCFIGdW5yZWFkIs4BCgpJbmRleEV2ZW50Eg4KAmlkGAMgASgJUgJpZBIdCgphY2NvdW50X2lkGAQgASgJUglhY
  2NvdW50SWQSFwoHdXNlcl9pZBgFIAEoCVIGdXNlcklkEhgKB2NyZWF0ZWQYBiABKANSB2NyZWF0ZWQSGgoIY2F0ZWdvcnkYByABK
  AlSCGNhdGVnb3J5EhYKBnRvcGljcxgIIAMoCVIGdG9waWNzEhYKBm9iamVjdBgJIAEoCVIGb2JqZWN0EhIKBHRleHQYCiABKAlSB
  HRleHQisAEKEUxpc3RUb3BpY3NSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSFwoHdXNlcl9pZBgDI
  AEoCVIGdXNlcklkEhkKCGFnZW50X2lkGAUgASgJUgdhZ2VudElkEhYKBmFuY2hvchgEIAEoCVIGYW5jaG9yEhQKBWxpbWl0GAcgA
  SgFUgVsaW1pdBIWCgZ1bnJlYWQYCCABKAhSBnVucmVhZCJyChBMaXN0VG9waWNzUmVzdWx0EiEKA2N0eBgBIAEoCzIPLmNvbW1vb
  i5Db250ZXh0UgNjdHgSIwoGdG9waWNzGAMgAygLMgsudXNlci5Ub3BpY1IGdG9waWNzEhYKBmFuY2hvchgFIAEoCVIGYW5jaG9yI
  oIBCg9MaXN0TmV3c1JlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIXCgd1c2VyX2lkGAMgASgJUgZ1c
  2VySWQSHQoKc3RhcnRfdGltZRgEIAEoA1IJc3RhcnRUaW1lEhQKBWxpbWl0GAcgASgJUgVsaW1pdCJkCgtBZGRUb015TGlzdBIhC
  gNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhkKCGFnZW50X2lkGAIgASgJUgdhZ2VudElkEhcKB3VzZXJfaWQYAyABK
  AlSBnVzZXJJZCLKAQoFRmllbGQSEgoEbmFtZRgCIAEoCVIEbmFtZRIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSFwoHd
  XNlcl9pZBgEIAEoCVIGdXNlcklkEhYKBnNldHRlchgFIAEoCVIGc2V0dGVyEh8KC3NldHRlcl90eXBlGAYgASgJUgpzZXR0ZXJUe
  XBlEhgKB3VwZGF0ZWQYCCABKANSB3VwZGF0ZWQSEgoEZGF0YRgJIAEoCVIEZGF0YRIOCgJpZBgKIAEoCVICaWQiogEKCFByZXNlb
  mNlEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhcKB3VzZ
  XJfaWQYBCABKAlSBnVzZXJJZBIWCgZwaW5nZWQYBSABKANSBnBpbmdlZBIjCg1waW5nZWRfbWludXRlGAYgASgDUgxwaW5nZWRNa
  W51dGUiXAoJUHJlc2VuY2VzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSLAoJcHJlc2VuY2VzGAIgAygLMg4ud
  XNlci5QcmVzZW5jZVIJcHJlc2VuY2VzIt4BCgdWaXNpdG9yEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKY
  WNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEh4KBHVzZXIYBCABKAsyCi51c2VyLlVzZXJSBHVzZXISFgoGcGluZ2VkGAUgASgDU
  gZwaW5nZWQSGQoIcGFnZV91cmwYBiABKAlSB3BhZ2VVcmwSHwoLcGFnZV92aWV3ZWQYByABKANSCnBhZ2VWaWV3ZWQSHQoKcGFnZ
  V90aXRsZRgIIAEoCVIJcGFnZVRpdGxlIlgKCFZpc2l0b3JzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSKQoId
  mlzaXRvcnMYAiADKAsyDS51c2VyLlZpc2l0b3JSCHZpc2l0b3JzIr8BCghMYXN0VmlldxIdCgphY2NvdW50X2lkGAMgASgJUglhY
  2NvdW50SWQSFwoHdXNlcl9pZBgEIAEoCVIGdXNlcklkEhAKA3VybBgFIAEoCVIDdXJsEg4KAnVhGAYgASgJUgJ1YRIOCgJpcBgHI
  AEoCVICaXASGAoHY3JlYXRlZBgIIAEoA1IHY3JlYXRlZBIZCghldmVudF9pZBgJIAEoCVIHZXZlbnRJZBIUCgV0aXRsZRgKIAEoC
  VIFdGl0bGUihQQKCkF1dG9tYXRpb24SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAIgA
  SgJUglhY2NvdW50SWQSDgoCaWQYAyABKAlSAmlkEhgKB2NoYW5uZWwYBCABKAlSB2NoYW5uZWwSEgoEbmFtZRgFIAEoCVIEbmFtZ
  RIgCgtkZXNjcmlwdGlvbhgGIAEoCVILZGVzY3JpcHRpb24SLwoKY29uZGl0aW9ucxgHIAMoCzIPLnVzZXIuQ29uZGl0aW9uUgpjb
  25kaXRpb25zEhgKB2NyZWF0ZWQYCSABKANSB2NyZWF0ZWQSGgoIbW9kaWZpZWQYCiABKANSCG1vZGlmaWVkEhQKBXN0YXRlGAwgA
  SgJUgVzdGF0ZRIfCgthY3Rpb25fdHlwZRgNIAEoCVIKYWN0aW9uVHlwZRIfCgthY3Rpb25fZGF0YRgOIAEoCVIKYWN0aW9uRGF0Y
  RIUCgVzY29wZRgPIAEoCVIFc2NvcGUiIQoFU3RhdGUSCgoGYWN0aXZlEAASDAoIaW5hY3RpdmUQASJdCgpBY3Rpb25UeXBlEhgKF
  GNvbnZlcnNhdGlvbl9tZXNzYWdlEAASFgoSYWdlbnRfbm90aWZpY2F0aW9uEAESHQoZYXV0b21hdGlvbl9pbnZpdGVfbWVzc2FnZ
  RAEImQKC0F1dG9tYXRpb25zEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSMgoLYXV0b21hdGlvbnMYAiADKAsyE
  C51c2VyLkF1dG9tYXRpb25SC2F1dG9tYXRpb25zIt8DCgdTZXNzaW9uEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjd
  HgSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhcKB3VzZXJfaWQYBCABKAlSBnVzZXJJZBIOCgJpZBgFIAEoCVICaWQSG
  goIcGxhdGZvcm0YByABKAlSCHBsYXRmb3JtEhoKCHJlZmVycmVyGAggASgJUghyZWZlcnJlchIjCg1zZWFyY2hfZW5naW5lGAkgA
  SgJUgxzZWFyY2hFbmdpbmUSGAoHc3RhcnRlZBgKIAEoA1IHc3RhcnRlZBIYCgd0cmFja2VkGAsgASgDUgd0cmFja2VkEhYKBnN0Y
  XR1cxgMIAEoCVIGc3RhdHVzEiEKDGV2ZW50c19jb3VudBgNIAEoBVILZXZlbnRzQ291bnQSLgoTY29udGVudF92aWV3c19jb3Vud
  BgOIAEoBVIRY29udGVudFZpZXdzQ291bnQSHwoLc2VhcmNoX3Rlcm0YDyABKAlSCnNlYXJjaFRlcm0iLAoIUGxhdGZvcm0SBwoDd
  2ViEAASCgoGbW9iaWxlEAISCwoHZGVza3RvcBAEIh4KBlN0YXR1cxIICgRvcGVuEAASCgoGY2xvc2VkEAEiSAoRRGVsZXRlQXR0c
  lJlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIQCgNrZXkYAiABKAlSA2tleSKfAQoPQXV0b21hdGlvb
  kNoZWNrEh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBIjCg1hdXRvbWF0aW9uX2lkGAMgASgJUgxhdXRvbWF0aW9uSWQSF
  woHdXNlcl9pZBgEIAEoCVIGdXNlcklkEhkKCGV2ZW50X2lkGAUgASgJUgdldmVudElkEhQKBXNjb3BlGAYgASgJUgVzY29wZSpKC
  g1BdHRyaWJ1dGVUeXBlEggKBHRleHQQABIKCgZudW1iZXIQARILCgdib29sZWFuEAISDAoIZGF0ZXRpbWUQAxIICgRsaXN0EAQqN
  AoNQXR0cmlidXRlS2luZBIKCgZzeXN0ZW0QABILCgdkZWZhdWx0EAESCgoGY3VzdG9tEAIqKwoSQXR0cmlidXRlRGF0YVN0YXRlE
  ggKBGxpdmUQABILCgdkZWxldGVkEAEqpwgKBUV2ZW50EhUKEVVzZXJSZWFkUmVxdWVzdGVkEAASFwoTVXNlclVwZGF0ZVJlcXVlc
  3RlZBACEhcKE1VzZXJDcmVhdGVSZXF1ZXN0ZWQQAxIXChNVc2VyU2VhcmNoUmVxdWVzdGVkEAQSHAoYVXNlckV2ZW50Q3JlYXRlU
  mVxdWVzdGVkEAUSHAoYVXNlckV2ZW50U2VhcmNoUmVxdWVzdGVkEAcSHAoYVXNlclRvcGljU2VhcmNoUmVxdWVzdGVkEAYSIwofV
  XNlclNlZ21lbnRhdGlvbkNyZWF0ZVJlcXVlc3RlZBAKEiMKH1VzZXJTZWdtZW50YXRpb25VcGRhdGVSZXF1ZXN0ZWQQCxIjCh9Vc
  2VyU2VnbWVudGF0aW9uRGVsZXRlUmVxdWVzdGVkEAwSIQodVXNlclNlZ21lbnRhdGlvbkxpc3RSZXF1ZXN0ZWQQDRIhCh1Vc2VyU
  2VnbWVudGF0aW9uUmVhZFJlcXVlc3RlZBAOEhwKGFVzZXJBZGRUb015TGlzdFJlcXVlc3RlZBAUEiQKIFVzZXJFdmVudFRvcGljU
  3Vic2NyaWJlUmVxdWVzdGVkECMSJgoiVXNlckV2ZW50VG9waWNVbnN1YnNjcmliZVJlcXVlc3RlZBAkEhoKFlVzZXJSZWFkVG9wa
  WNSZXF1ZXN0ZWQQKRIPCgtVc2VyU3ViaXpJZBAqEh0KGVVzZXJQcmVzZW5jZVJlYWRSZXF1ZXN0ZWQQLBIfChtVc2VyUHJldmlld
  2luZ1JlYWRSZXF1ZXN0ZWQQLhIYChRVc2VyTGlzdFRvcFJlcXVlc3RlZBAvEiEKHVVzZXJBdXRvbWF0aW9uVXBzZXJ0UmVxdWVzd
  GVkEDISIQodVXNlckF1dG9tYXRpb25EZWxldGVSZXF1ZXN0ZWQQMxIfChtVc2VyQXV0b21hdGlvbkxpc3RSZXF1ZXN0ZWQQNBIfC
  htVc2VyQXV0b21hdGlvblJlYWRSZXF1ZXN0ZWQQNRIkCiBBdXRvbWF0aW9uQWdlbnROb3RpZmljYXRpb25GaXJlZBA2EiYKIkF1d
  G9tYXRpb25Db252ZXJzYXRpb25NZXNzYWdlRmlyZWQQNxIeChpVc2VyU2Vzc2lvblVwZGF0ZVJlcXVlc3RlZBBBEh4KGlVzZXJTZ
  XNzaW9uQ3JlYXRlUmVxdWVzdGVkEEISHAoYVXNlclNlc3Npb25SZWFkUmVxdWVzdGVkEEMSFAoQU2VnbWVudGF0aW9uTG9vcBBEE
  hQKEEF1dG9tYXRpb25TeW5jZWQQZhITCg9BdXRvbWF0aW9uRmlyZWQQZxIRCg1Vc2VyUmVxdWVzdGVkEGQSDgoKVXNlclN5bmNlZ
  BBlEhAKDFVzZXJVcHNlcnRlZBBpEhAKDFVzZXJWM1N5bmNlZBBqKi0KD0F1dG9tYXRpb25TY29wZRIQCgxjb252ZXJzYXRpb24QA
  hIICgR1c2VyEAMyMAoITXlTZXJ2ZXISJAoCRG8SDS51c2VyLkFsbFR5cGUaDS51c2VyLkFsbFR5cGUiADKZAgoPU2VnbWVudGF0a
  W9uTWdyEjkKDUNyZWF0ZVNlZ21lbnQSEi51c2VyLlNlZ21lbnRhdGlvbhoSLnVzZXIuU2VnbWVudGF0aW9uIgASOQoNVXBkYXRlU
  2VnbWVudBISLnVzZXIuU2VnbWVudGF0aW9uGhIudXNlci5TZWdtZW50YXRpb24iABIxCgxMaXN0U2VnbWVudHMSCi5jb21tb24uS
  WQaEy51c2VyLlNlZ21lbnRhdGlvbnMiABIsCg1EZWxldGVTZWdtZW50EgouY29tbW9uLklkGg0uY29tbW9uLkVtcHR5IgASLwoLU
  mVhZFNlZ21lbnQSCi5jb21tb24uSWQaEi51c2VyLlNlZ21lbnRhdGlvbiIAMskBCgpWaXNpdG9yTWdyEiwKDFJlYWRQcmVzZW5jZ
  RIKLmNvbW1vbi5JZBoOLnVzZXIuUHJlc2VuY2UiABIvCg1SZWFkUHJlc2VuY2VzEgsuY29tbW9uLklkcxoPLnVzZXIuUHJlc2VuY
  2VzIgASKwoLUmVhZFByZXZpZXcSCi5jb21tb24uSWQaDi51c2VyLkxhc3RWaWV3IgASLwoPTGlzdFRvcFZpc2l0b3JzEgouY29tb
  W9uLklkGg4udXNlci5WaXNpdG9ycyIAMtoCCgdVc2VyTWdyEkAKC1NlYXJjaFVzZXJzEhcudXNlci5Vc2VyU2VhcmNoUmVxdWVzd
  BoWLnVzZXIuVXNlclNlYXJjaFJlc3VsdCIAEjgKB1N1Yml6SUQSFC51c2VyLlN1Yml6SURSZXF1ZXN0GhUudXNlci5TdWJpeklEU
  mVzcG9uc2UiABIwCgdBZGRUb015EhQudXNlci5BZGRUb015UmVxdWVzdBoNLmNvbW1vbi5FbXB0eSIAEiYKCkNyZWF0ZVVzZXISC
  i51c2VyLlVzZXIaCi51c2VyLlVzZXIiABImCgpVcGRhdGVVc2VyEgoudXNlci5Vc2VyGgoudXNlci5Vc2VyIgASJAoIUmVhZFVzZ
  XISCi5jb21tb24uSWQaCi51c2VyLlVzZXIiABIrCgxSZW1vdmVGcm9tTXkSCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkiADKaA
  goNQXV0b21hdGlvbk1nchIyCg9MaXN0QXV0b21hdGlvbnMSCi5jb21tb24uSWQaES51c2VyLkF1dG9tYXRpb25zIgASOAoQVXBkY
  XRlQXV0b21hdGlvbhIQLnVzZXIuQXV0b21hdGlvbhoQLnVzZXIuQXV0b21hdGlvbiIAEi8KEERlbGV0ZUF1dG9tYXRpb24SCi5jb
  21tb24uSWQaDS5jb21tb24uRW1wdHkiABIwCg5SZWFkQXV0b21hdGlvbhIKLmNvbW1vbi5JZBoQLnVzZXIuQXV0b21hdGlvbiIAE
  jgKEENyZWF0ZUF1dG9tYXRpb24SEC51c2VyLkF1dG9tYXRpb24aEC51c2VyLkF1dG9tYXRpb24iADKdAQoKU2Vzc2lvbk1nchIvC
  g1DcmVhdGVTZXNzaW9uEg0udXNlci5TZXNzaW9uGg0udXNlci5TZXNzaW9uIgASLQoLUmVhZFNlc3Npb24SDS51c2VyLlNlc3Npb
  24aDS51c2VyLlNlc3Npb24iABIvCg1VcGRhdGVTZXNzaW9uEg0udXNlci5TZXNzaW9uGg0udXNlci5TZXNzaW9uIgAyyAIKDEF0d
  HJpYnV0ZU1nchJHChhMaXN0QXR0cmlidXRlRGVmaW5pdGlvbnMSDS5jb21tb24uRW1wdHkaGi51c2VyLkF0dHJpYnV0ZURlZmlua
  XRpb25zIgASUwoZQ3JlYXRlQXR0cmlidXRlRGVmaW5pdGlvbhIZLnVzZXIuQXR0cmlidXRlRGVmaW5pdGlvbhoZLnVzZXIuQXR0c
  mlidXRlRGVmaW5pdGlvbiIAElMKGVVwZGF0ZUF0dHJpYnV0ZURlZmluaXRpb24SGS51c2VyLkF0dHJpYnV0ZURlZmluaXRpb24aG
  S51c2VyLkF0dHJpYnV0ZURlZmluaXRpb24iABJFChlEZWxldGVBdHRyaWJ1dGVEZWZpbml0aW9uEhcudXNlci5EZWxldGVBdHRyU
  mVxdWVzdBoNLmNvbW1vbi5FbXB0eSIA"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      common.CommonProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}