// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

object UserProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    common.CommonProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    user.AllType,
    user.AddToMyRequest,
    user.UserCreateResult,
    user.MyUser,
    user.AttributeDefinition,
    user.AttributeDefinitions,
    user.AttributeData,
    user.User,
    user.Users,
    user.Device,
    user.Trace,
    user.MergeRequest,
    user.CreateRequest,
    user.Topic,
    user.UnreadTopic,
    user.ReadTopicRequest,
    user.SubscribeRequest,
    user.SubizIDRequest,
    user.MaskResponse,
    user.SubizIDResponse,
    user.Segmentations,
    user.SegmentLoopState,
    user.UserSegmentCache,
    user.Segmentation,
    user.SegmentTracking,
    user.SegmentCondition,
    user.Condition,
    user.UserSearchResult,
    user.UserSearchRequest,
    user.IndexEvent,
    user.ListTopicsRequest,
    user.ListTopicsResult,
    user.ListNewsRequest,
    user.AddToMyList,
    user.Field,
    user.Presence,
    user.Presences,
    user.Visitor,
    user.Visitors,
    user.LastView,
    user.Automation,
    user.Automations,
    user.Session,
    user.DeleteAttrRequest,
    user.CountMyUserRequest,
    user.CountUserRequest,
    user.CountUserByAttributeRequest,
    user.CountResponse,
    user.AutomationCheck
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CipiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci91c2VyL3VzZXIucHJvdG8SBHVzZXIaLmJpdGJ1Y2tldC5vcmcvc3ViaXova
  GVhZGVyL2NvbW1vbi9jb21tb24ucHJvdG8irwYKB0FsbFR5cGUSHgoEdXNlchgCIAEoCzIKLnVzZXIuVXNlclIEdXNlchIjCgJjc
  hgDIAEoCzITLnVzZXIuQ3JlYXRlUmVxdWVzdFICY3ISIwoGZmllbGRzGAUgASgLMgsudXNlci5GaWVsZFIGZmllbGRzEigKA3Vjc
  hgGIAEoCzIWLnVzZXIuVXNlckNyZWF0ZVJlc3VsdFIDdWNyEigKA3JwchgIIAEoCzIWLnVzZXIuUmVhZFRvcGljUmVxdWVzdFIDc
  nByEkUKEXVzZXJzZWFyY2hyZXF1ZXN0GAkgASgLMhcudXNlci5Vc2VyU2VhcmNoUmVxdWVzdFIRdXNlcnNlYXJjaHJlcXVlc3QSQ
  goQdXNlcnNlYXJjaHJlc3VsdBgKIAEoCzIWLnVzZXIuVXNlclNlYXJjaFJlc3VsdFIQdXNlcnNlYXJjaHJlc3VsdBIiCgJtcxgLI
  AEoCzISLnVzZXIuTWFza1Jlc3BvbnNlUgJtcxIoCgNsdHIYDCABKAsyFi51c2VyLkxpc3RUb3BpY3NSZXN1bHRSA2x0chIiCgJzZ
  xgOIAEoCzISLnVzZXIuU2VnbWVudGF0aW9uUgJzZxIkCgVwcmVzbhgPIAEoCzIOLnVzZXIuUHJlc2VuY2VSBXByZXNuEh0KAnZpG
  BEgASgLMg0udXNlci5WaXNpdG9yUgJ2aRIgCgN2aXMYEiABKAsyDi51c2VyLlZpc2l0b3JzUgN2aXMSIQoFdG9waWMYEyABKAsyC
  y51c2VyLlRvcGljUgV0b3BpYxIpCgZ1dG9waWMYFCABKAsyES51c2VyLlVucmVhZFRvcGljUgZ1dG9waWMSJAoGbXl1c2VyGBUgA
  SgLMgwudXNlci5NeVVzZXJSBm15dXNlchIwCgphdXRvbWF0aW9uGBcgASgLMhAudXNlci5BdXRvbWF0aW9uUgphdXRvbWF0aW9uE
  jMKC2F1dG9tYXRpb25zGBkgASgLMhEudXNlci5BdXRvbWF0aW9uc1ILYXV0b21hdGlvbnMSJwoHc2Vzc2lvbhgaIAEoCzINLnVzZ
  XIuU2Vzc2lvblIHc2Vzc2lvbiJpCg5BZGRUb015UmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhcKB
  3VzZXJfaWQYAyABKAlSBnVzZXJJZBIbCglhZ2VudF9pZHMYBSADKAlSCGFnZW50SWRzIjYKEFVzZXJDcmVhdGVSZXN1bHQSDgoCa
  WQYAyABKAlSAmlkEhIKBG1hc2sYBSABKAlSBG1hc2simAEKBk15VXNlchIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY
  3R4EhkKCGFnZW50X2lkGAIgASgJUgdhZ2VudElkEh4KBHVzZXIYAyABKAsyCi51c2VyLlVzZXJSBHVzZXISFgoGdW5yZWFkGAQgA
  SgFUgZ1bnJlYWQSGAoHdXBkYXRlZBgFIAEoA1IHdXBkYXRlZCKAAgoTQXR0cmlidXRlRGVmaW5pdGlvbhIhCgNjdHgYASABKAsyD
  y5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBISCgRuYW1lGAMgASgJUgRuYW1lEiAKC
  2Rlc2NyaXB0aW9uGAQgASgJUgtkZXNjcmlwdGlvbhISCgR0eXBlGAUgASgJUgR0eXBlEh0KCmxpc3RfaXRlbXMYBiADKAlSCWxpc
  3RJdGVtcxIQCgNrZXkYByABKAlSA2tleRISCgRraW5kGAggASgJUgRraW5kEhgKB3VwZGF0ZWQYCSABKANSB3VwZGF0ZWQidAoUQ
  XR0cmlidXRlRGVmaW5pdGlvbnMSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBI5CgphdHRyaWJ1dGVzGAIgAygLM
  hkudXNlci5BdHRyaWJ1dGVEZWZpbml0aW9uUgphdHRyaWJ1dGVzIswCCg1BdHRyaWJ1dGVEYXRhEiEKA2N0eBgBIAEoCzIPLmNvb
  W1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhcKB3VzZXJfaWQYAyABKAlSBnVzZXJJZBIQC
  gNrZXkYBCABKAlSA2tleRIUCgV2YWx1ZRgFIAEoCVIFdmFsdWUSFAoFc3RhdGUYBiABKAlSBXN0YXRlEhgKB2NyZWF0ZWQYByABK
  ANSB2NyZWF0ZWQSGgoIbW9kaWZpZWQYCCABKANSCG1vZGlmaWVkEhIKBHRleHQYCiABKAlSBHRleHQSFgoGbnVtYmVyGAsgASgBU
  gZudW1iZXISGAoHYm9vbGVhbhgMIAEoCFIHYm9vbGVhbhISCgRkYXRlGA0gASgJUgRkYXRlEhIKBGxpc3QYDiADKAlSBGxpc3Qi7
  QYKBFVzZXISIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJpZBgDIAEoCVICaWQSHQoKYWNjb3VudF9pZBgEI
  AEoCVIJYWNjb3VudElkEhoKCGZ1bGxuYW1lGAUgASgJUghmdWxsbmFtZRIWCgZwaG9uZXMYByADKAlSBnBob25lcxIWCgZlbWFpb
  HMYCiADKAlSBmVtYWlscxIjCgZ0cmFjZXMYCyADKAsyCy51c2VyLlRyYWNlUgZ0cmFjZXMSJgoHZGV2aWNlcxgNIAMoCzIMLnVzZ
  XIuRGV2aWNlUgdkZXZpY2VzEhUKBmlzX2JhbhgOIAEoCFIFaXNCYW4SHQoKYXZhdGFyX3VybBgPIAEoCVIJYXZhdGFyVXJsEjMKC
  mF0dHJpYnV0ZXMYEiADKAsyEy51c2VyLkF0dHJpYnV0ZURhdGFSCmF0dHJpYnV0ZXMSGgoIc2VnbWVudHMYEyADKAlSCHNlZ21lb
  nRzEhYKBmxhYmVscxgUIAMoCVIGbGFiZWxzEiIKDHVuc3Vic2NyaWJlZBgVIAEoCFIMdW5zdWJzY3JpYmVkEh8KC21hcmtlZF9zc
  GFtGBYgASgIUgptYXJrZWRTcGFtEiEKDGhhcmRfYm91bmNlZBgXIAEoCFILaGFyZEJvdW5jZWQSJQoOdG90YWxfc2Vzc2lvbnMYG
  CABKAVSDXRvdGFsU2Vzc2lvbnMSGQoIc3ViaXpfaWQYGSABKAlSB3N1Yml6SWQSGgoIdGltZXpvbmUYGiABKAlSCHRpbWV6b25lE
  iEKDGNvdW50cnlfY29kZRgbIAEoCVILY291bnRyeUNvZGUSEgoEY2l0eRggIAEoCVIEY2l0eRIaCghsYW5ndWFnZRgcIAEoCVIIb
  GFuZ3VhZ2USGAoHYWxpYXNlcxgeIAMoCVIHYWxpYXNlcxISCgRzZWVuGB8gASgDUgRzZWVuEiMKBmZpZWxkcxghIAMoCzILLnVzZ
  XIuRmllbGRSBmZpZWxkcxIQCgNwYXIYIiABKAVSA3BhchIaCghtb2RpZmllZBgkIAEoA1IIbW9kaWZpZWQSIwoNbW9kaWZpZWRfd
  2VlaxglIAEoBVIMbW9kaWZpZWRXZWVrEhwKCWFjdGl2YXRlZBgmIAEoA1IJYWN0aXZhdGVkIikKBVVzZXJzEiAKBXVzZXJzGAEgA
  ygLMgoudXNlci5Vc2VyUgV1c2VycyLDAQoGRGV2aWNlEg4KAmlkGAMgASgFUgJpZBIhCgx1c2VyYWdlbnRfaWQYBCABKAVSC3VzZ
  XJhZ2VudElkEhwKCXVzZXJhZ2VudBgFIAEoCVIJdXNlcmFnZW50EisKEXNjcmVlbl9yZXNvbHV0aW9uGAYgASgJUhBzY3JlZW5SZ
  XNvbHV0aW9uEh8KC2xhbmd1YWdlX2lkGAcgASgFUgpsYW5ndWFnZUlkEhoKCGxhbmd1YWdlGAggASgJUghsYW5ndWFnZSKCAwoFV
  HJhY2USDgoCaWQYAyABKAlSAmlkEg4KAmlwGAQgASgJUgJpcBIfCgtsb2NhdGlvbl9pZBgFIAEoBVIKbG9jYXRpb25JZBIbCglja
  XR5X25hbWUYCCABKAlSCGNpdHlOYW1lEiEKDGNvdW50cnlfbmFtZRgJIAEoCVILY291bnRyeU5hbWUSIQoMY291bnRyeV9jb2RlG
  BMgASgJUgtjb3VudHJ5Q29kZRIlCg5jb250aW5lbnRfY29kZRgKIAEoCVINY29udGluZW50Q29kZRIlCg5jb250aW5lbnRfbmFtZ
  RgSIAEoCVINY29udGluZW50TmFtZRIaCghsYXRpdHVkZRgMIAEoAlIIbGF0aXR1ZGUSHAoJbG9uZ2l0dWRlGA0gASgCUglsb25na
  XR1ZGUSHwoLcG9zdGFsX2NvZGUYDiABKAlSCnBvc3RhbENvZGUSGgoIdGltZXpvbmUYECABKAlSCHRpbWV6b25lEhAKA2lzcBgRI
  AEoCVIDaXNwIl4KDE1lcmdlUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAUgASgJUgJpZ
  BIbCglyZWNlbnRfaWQYBCABKAlSCHJlY2VudElkIkoKDUNyZWF0ZVJlcXVlc3QSIQoMY2hhbGxlbmdlX2lkGAMgASgJUgtjaGFsb
  GVuZ2VJZBIWCgZhbnN3ZXIYBCABKAlSBmFuc3dlciKlAQoFVG9waWMSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0e
  BIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSFAoFdG9waWMYAyABKAlSBXRvcGljEhIKBHR5cGUYBSABKAlSBHR5cGUSG
  AoHdXBkYXRlZBgIIAEoA1IHdXBkYXRlZBIWCgZ1bnJlYWQYCSABKAVSBnVucmVhZCLAAQoLVW5yZWFkVG9waWMSIQoDY3R4GAEgA
  SgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIUCgV0b3BpYxgDIAEoCVIFdG9waWMSGQoIYWdlbnRfaWQYBCABKAlSB2FnZW50SWQSF
  woHdXNlcl9pZBgFIAEoCVIGdXNlcklkEhIKBHR5cGUYBiABKAlSBHR5cGUSGAoHdXBkYXRlZBgIIAEoA1IHdXBkYXRlZBIWCgZ1b
  nJlYWQYCSABKAVSBnVucmVhZCJ/ChBSZWFkVG9waWNSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSF
  AoFdG9waWMYAyABKAlSBXRvcGljEhcKB3VzZXJfaWQYBCABKAlSBnVzZXJJZBIZCghhZ2VudF9pZBgFIAEoCVIHYWdlbnRJZCJoC
  hBTdWJzY3JpYmVSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSGQoIYWdlbnRfaWQYAyABKAlSB2FnZ
  W50SWQSFgoGdG9waWNzGAQgAygJUgZ0b3BpY3MibQoOU3ViaXpJRFJlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRle
  HRSA2N0eBIZCghzdWJpel9pZBgCIAEoCVIHc3ViaXpJZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQidQoMTWFza1Jlc
  3BvbnNlEhkKCHN1Yml6X2lkGAIgASgJUgdzdWJpeklkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIXCgd1c2VyX2lkG
  AQgASgJUgZ1c2VySWQSEgoEbWFzaxgFIAEoCVIEbWFzayKHAQoPU3ViaXpJRFJlc3BvbnNlEiEKA2N0eBgBIAEoCzIPLmNvbW1vb
  i5Db250ZXh0UgNjdHgSGQoIc3ViaXpfaWQYAiABKAlSB3N1Yml6SWQSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhcKB
  3VzZXJfaWQYBCABKAlSBnVzZXJJZCJsCg1TZWdtZW50YXRpb25zEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSO
  AoNc2VnbWVudGF0aW9ucxgDIAMoCzISLnVzZXIuU2VnbWVudGF0aW9uUg1zZWdtZW50YXRpb25zIrMBChBTZWdtZW50TG9vcFN0Y
  XRlEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEhkKCHVzZ
  XJfcGFyGAMgASgFUgd1c2VyUGFyEiEKDGxvb3BfY3JlYXRlZBgGIAEoA1ILbG9vcENyZWF0ZWQSHwoLbG9vcF9udW1iZXIYByABK
  ANSCmxvb3BOdW1iZXIihwEKEFVzZXJTZWdtZW50Q2FjaGUSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY
  2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSDgoCaWQYAyABKAlSAmlkEiEKDGNvbmRpdGlvbl9pZBgEIAEoCVILY29uZGl0aW9uS
  WQitgMKDFNlZ21lbnRhdGlvbhIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSC
  WFjY291bnRJZBIOCgJpZBgFIAEoCVICaWQSEgoEbmFtZRgDIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgLIAEoCVILZGVzY3Jpc
  HRpb24SHQoKdXNlcl9jb3VudBgEIAEoA1IJdXNlckNvdW50EhAKA3JhbhgIIAEoA1IDcmFuEiEKDHN0YXJ0ZWRfZnJvbRgHIAEoA
  1ILc3RhcnRlZEZyb20SGAoHY3JlYXRlZBgJIAEoA1IHY3JlYXRlZBIaCghtb2RpZmllZBgKIAEoA1IIbW9kaWZpZWQSFAoFc3Rhd
  GUYDCABKAlSBXN0YXRlEjQKCWNvbmRpdGlvbhgTIAEoCzIWLnVzZXIuU2VnbWVudENvbmRpdGlvblIJY29uZGl0aW9uEiUKDmN1c
  nJlbnRfY3Vyc29yGBIgASgJUg1jdXJyZW50Q3Vyc29yIiEKBVN0YXRlEgoKBmFjdGl2ZRAAEgwKCGluYWN0aXZlEAEisgEKD1NlZ
  21lbnRUcmFja2luZxIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhkKCHVzZXJfcGFyGAIgASgFUgd1c2VyUGFyE
  h0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIhCgxsb29wX2NyZWF0ZWQYByABKANSC2xvb3BDcmVhdGVkEh8KC2xvb3Bfb
  nVtYmVyGAggASgDUgpsb29wTnVtYmVyIpsDChBTZWdtZW50Q29uZGl0aW9uEhIKBGpvaW4YAiABKAlSBGpvaW4SDgoCaWQYBCABK
  AlSAmlkEh0KCmV2ZW50X3R5cGUYBSABKAlSCWV2ZW50VHlwZRIgCgtjb21wb3NpdGlvbhgGIAEoCVILY29tcG9zaXRpb24SEAoDa
  2V5GAcgASgJUgNrZXkSLwoKY29uZGl0aW9ucxgIIAMoCzIPLnVzZXIuQ29uZGl0aW9uUgpjb25kaXRpb25zEj0KDmxlZnRfY29uZ
  Gl0aW9uGAsgASgLMhYudXNlci5TZWdtZW50Q29uZGl0aW9uUg1sZWZ0Q29uZGl0aW9uEj8KD3JpZ2h0X2NvbmRpdGlvbhgMIAEoC
  zIWLnVzZXIuU2VnbWVudENvbmRpdGlvblIOcmlnaHRDb25kaXRpb24iKQoMSm9pbk9wZXJhdG9yEggKBG5vbmUQABIHCgNhbmQQA
  RIGCgJvchACIjQKC0NvbXBvc2l0aW9uEggKBHRydWUQABIHCgNzdW0QARIHCgNhdmcQAhIJCgVjb3VudBADIo4BCglDb25kaXRpb
  24SEgoEam9pbhgBIAEoCVIEam9pbhIQCgNrZXkYAiABKAlSA2tleRIaCghvcGVyYXRvchgDIAEoCVIIb3BlcmF0b3ISFAoFdmFsd
  WUYBCABKAlSBXZhbHVlIikKDEpvaW5PcGVyYXRvchIICgRub25lEAASBwoDYW5kEAESBgoCb3IQAiKvAgoQVXNlclNlYXJjaFJlc
  3VsdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4EhQKBXRvdGFsGAMgASgDUgV0b3RhbBIgCgV1c2VycxgEIAMoC
  zIKLnVzZXIuVXNlclIFdXNlcnMSFgoGYW5jaG9yGAUgASgJUgZhbmNob3ISGAoHdW5yZWFkcxgGIAMoBVIHdW5yZWFkcxJNCg11b
  nJlYWRfY291bnRzGAcgAygLMigudXNlci5Vc2VyU2VhcmNoUmVzdWx0LlVucmVhZENvdW50c0VudHJ5Ugx1bnJlYWRDb3VudHMaP
  woRVW5yZWFkQ291bnRzRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAVSBXZhbHVlOgI4ASLWAQoRVXNlclNlY
  XJjaFJlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBInCg9zZWdtZW50YXRpb25faWQYAyABKAlSDnNlZ
  21lbnRhdGlvbklkEhQKBXF1ZXJ5GAQgASgJUgVxdWVyeRIWCgZhbmNob3IYBSABKAlSBmFuY2hvchIUCgVsaW1pdBgGIAEoBVIFb
  GltaXQSGQoIYWdlbnRfaWQYCCABKAlSB2FnZW50SWQSFgoGdW5yZWFkGAkgASgIUgZ1bnJlYWQizgEKCkluZGV4RXZlbnQSDgoCa
  WQYAyABKAlSAmlkEh0KCmFjY291bnRfaWQYBCABKAlSCWFjY291bnRJZBIXCgd1c2VyX2lkGAUgASgJUgZ1c2VySWQSGAoHY3JlY
  XRlZBgGIAEoA1IHY3JlYXRlZBIaCghjYXRlZ29yeRgHIAEoCVIIY2F0ZWdvcnkSFgoGdG9waWNzGAggAygJUgZ0b3BpY3MSFgoGb
  2JqZWN0GAkgASgJUgZvYmplY3QSEgoEdGV4dBgKIAEoCVIEdGV4dCKwAQoRTGlzdFRvcGljc1JlcXVlc3QSIQoDY3R4GAEgASgLM
  g8uY29tbW9uLkNvbnRleHRSA2N0eBIXCgd1c2VyX2lkGAMgASgJUgZ1c2VySWQSGQoIYWdlbnRfaWQYBSABKAlSB2FnZW50SWQSF
  goGYW5jaG9yGAQgASgJUgZhbmNob3ISFAoFbGltaXQYByABKAVSBWxpbWl0EhYKBnVucmVhZBgIIAEoCFIGdW5yZWFkInIKEExpc
  3RUb3BpY3NSZXN1bHQSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIjCgZ0b3BpY3MYAyADKAsyCy51c2VyLlRvc
  GljUgZ0b3BpY3MSFgoGYW5jaG9yGAUgASgJUgZhbmNob3IiggEKD0xpc3ROZXdzUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb
  24uQ29udGV4dFIDY3R4EhcKB3VzZXJfaWQYAyABKAlSBnVzZXJJZBIdCgpzdGFydF90aW1lGAQgASgDUglzdGFydFRpbWUSFAoFb
  GltaXQYByABKAlSBWxpbWl0ImQKC0FkZFRvTXlMaXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSGQoIYWdlb
  nRfaWQYAiABKAlSB2FnZW50SWQSFwoHdXNlcl9pZBgDIAEoCVIGdXNlcklkIsoBCgVGaWVsZBISCgRuYW1lGAIgASgJUgRuYW1lE
  h0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIXCgd1c2VyX2lkGAQgASgJUgZ1c2VySWQSFgoGc2V0dGVyGAUgASgJUgZzZ
  XR0ZXISHwoLc2V0dGVyX3R5cGUYBiABKAlSCnNldHRlclR5cGUSGAoHdXBkYXRlZBgIIAEoA1IHdXBkYXRlZBISCgRkYXRhGAkgA
  SgJUgRkYXRhEg4KAmlkGAogASgJUgJpZCKiAQoIUHJlc2VuY2USIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdC
  gphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSFwoHdXNlcl9pZBgEIAEoCVIGdXNlcklkEhYKBnBpbmdlZBgFIAEoA1IGcGluZ
  2VkEiMKDXBpbmdlZF9taW51dGUYBiABKANSDHBpbmdlZE1pbnV0ZSJcCglQcmVzZW5jZXMSIQoDY3R4GAEgASgLMg8uY29tbW9uL
  kNvbnRleHRSA2N0eBIsCglwcmVzZW5jZXMYAiADKAsyDi51c2VyLlByZXNlbmNlUglwcmVzZW5jZXMi3gEKB1Zpc2l0b3ISIQoDY
  3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSHgoEdXNlchgEIAEoC
  zIKLnVzZXIuVXNlclIEdXNlchIWCgZwaW5nZWQYBSABKANSBnBpbmdlZBIZCghwYWdlX3VybBgGIAEoCVIHcGFnZVVybBIfCgtwY
  WdlX3ZpZXdlZBgHIAEoA1IKcGFnZVZpZXdlZBIdCgpwYWdlX3RpdGxlGAggASgJUglwYWdlVGl0bGUiWAoIVmlzaXRvcnMSIQoDY
  3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIpCgh2aXNpdG9ycxgCIAMoCzINLnVzZXIuVmlzaXRvclIIdmlzaXRvcnMiv
  wEKCExhc3RWaWV3Eh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIXCgd1c2VyX2lkGAQgASgJUgZ1c2VySWQSEAoDdXJsG
  AUgASgJUgN1cmwSDgoCdWEYBiABKAlSAnVhEg4KAmlwGAcgASgJUgJpcBIYCgdjcmVhdGVkGAggASgDUgdjcmVhdGVkEhkKCGV2Z
  W50X2lkGAkgASgJUgdldmVudElkEhQKBXRpdGxlGAogASgJUgV0aXRsZSKFBAoKQXV0b21hdGlvbhIhCgNjdHgYASABKAsyDy5jb
  21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBIOCgJpZBgDIAEoCVICaWQSGAoHY2hhbm5lb
  BgEIAEoCVIHY2hhbm5lbBISCgRuYW1lGAUgASgJUgRuYW1lEiAKC2Rlc2NyaXB0aW9uGAYgASgJUgtkZXNjcmlwdGlvbhIvCgpjb
  25kaXRpb25zGAcgAygLMg8udXNlci5Db25kaXRpb25SCmNvbmRpdGlvbnMSGAoHY3JlYXRlZBgJIAEoA1IHY3JlYXRlZBIaCghtb
  2RpZmllZBgKIAEoA1IIbW9kaWZpZWQSFAoFc3RhdGUYDCABKAlSBXN0YXRlEh8KC2FjdGlvbl90eXBlGA0gASgJUgphY3Rpb25Ue
  XBlEh8KC2FjdGlvbl9kYXRhGA4gASgJUgphY3Rpb25EYXRhEhQKBXNjb3BlGA8gASgJUgVzY29wZSIhCgVTdGF0ZRIKCgZhY3Rpd
  mUQABIMCghpbmFjdGl2ZRABIl0KCkFjdGlvblR5cGUSGAoUY29udmVyc2F0aW9uX21lc3NhZ2UQABIWChJhZ2VudF9ub3RpZmljY
  XRpb24QARIdChlhdXRvbWF0aW9uX2ludml0ZV9tZXNzYWdlEAQiZAoLQXV0b21hdGlvbnMSIQoDY3R4GAEgASgLMg8uY29tbW9uL
  kNvbnRleHRSA2N0eBIyCgthdXRvbWF0aW9ucxgCIAMoCzIQLnVzZXIuQXV0b21hdGlvblILYXV0b21hdGlvbnMi3wMKB1Nlc3Npb
  24SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSFwoHdXNlc
  l9pZBgEIAEoCVIGdXNlcklkEg4KAmlkGAUgASgJUgJpZBIaCghwbGF0Zm9ybRgHIAEoCVIIcGxhdGZvcm0SGgoIcmVmZXJyZXIYC
  CABKAlSCHJlZmVycmVyEiMKDXNlYXJjaF9lbmdpbmUYCSABKAlSDHNlYXJjaEVuZ2luZRIYCgdzdGFydGVkGAogASgDUgdzdGFyd
  GVkEhgKB3RyYWNrZWQYCyABKANSB3RyYWNrZWQSFgoGc3RhdHVzGAwgASgJUgZzdGF0dXMSIQoMZXZlbnRzX2NvdW50GA0gASgFU
  gtldmVudHNDb3VudBIuChNjb250ZW50X3ZpZXdzX2NvdW50GA4gASgFUhFjb250ZW50Vmlld3NDb3VudBIfCgtzZWFyY2hfdGVyb
  RgPIAEoCVIKc2VhcmNoVGVybSIsCghQbGF0Zm9ybRIHCgN3ZWIQABIKCgZtb2JpbGUQAhILCgdkZXNrdG9wEAQiHgoGU3RhdHVzE
  ggKBG9wZW4QABIKCgZjbG9zZWQQASJIChFEZWxldGVBdHRyUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY
  3R4EhAKA2tleRgCIAEoCVIDa2V5IoUBChJDb3VudE15VXNlclJlcXVlc3QSGQoIYWdlbnRfaWQYBCABKAlSB2FnZW50SWQSEgoEZ
  nJvbRgFIAEoBVIEZnJvbRIOCgJ0bxgGIAEoBVICdG8SFAoFcmFuZ2UYCCABKAlSBXJhbmdlIhoKBVJhbmdlEggKBGhvdXIQABIHC
  gNkYXkQASJoChBDb3VudFVzZXJSZXF1ZXN0EhIKBGZyb20YBSABKAVSBGZyb20SDgoCdG8YBiABKAVSAnRvEhQKBXJhbmdlGAggA
  SgJUgVyYW5nZSIaCgVSYW5nZRIICgRob3VyEAASBwoDZGF5EAEimAEKG0NvdW50VXNlckJ5QXR0cmlidXRlUmVxdWVzdBIjCg1hd
  HRyaWJ1dGVfa2V5GAQgASgJUgxhdHRyaWJ1dGVLZXkSEgoEZnJvbRgFIAEoBVIEZnJvbRIOCgJ0bxgGIAEoBVICdG8SFAoFcmFuZ
  2UYCCABKAlSBXJhbmdlIhoKBVJhbmdlEggKBGhvdXIQABIHCgNkYXkQASIjCg1Db3VudFJlc3BvbnNlEhIKBGRhdGEYAyADKAVSB
  GRhdGEinwEKD0F1dG9tYXRpb25DaGVjaxIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSIwoNYXV0b21hdGlvbl9pZBgDI
  AEoCVIMYXV0b21hdGlvbklkEhcKB3VzZXJfaWQYBCABKAlSBnVzZXJJZBIZCghldmVudF9pZBgFIAEoCVIHZXZlbnRJZBIUCgVzY
  29wZRgGIAEoCVIFc2NvcGUqSgoNQXR0cmlidXRlVHlwZRIICgR0ZXh0EAASCgoGbnVtYmVyEAESCwoHYm9vbGVhbhACEgwKCGRhd
  GV0aW1lEAMSCAoEbGlzdBAEKjQKDUF0dHJpYnV0ZUtpbmQSCgoGc3lzdGVtEAASCwoHZGVmYXVsdBABEgoKBmN1c3RvbRACKisKE
  kF0dHJpYnV0ZURhdGFTdGF0ZRIICgRsaXZlEAASCwoHZGVsZXRlZBABKtAICgVFdmVudBIVChFVc2VyUmVhZFJlcXVlc3RlZBAAE
  hcKE1VzZXJVcGRhdGVSZXF1ZXN0ZWQQAhIXChNVc2VyQ3JlYXRlUmVxdWVzdGVkEAMSFwoTVXNlclNlYXJjaFJlcXVlc3RlZBAEE
  hwKGFVzZXJFdmVudENyZWF0ZVJlcXVlc3RlZBAFEhwKGFVzZXJFdmVudFNlYXJjaFJlcXVlc3RlZBAHEhwKGFVzZXJUb3BpY1NlY
  XJjaFJlcXVlc3RlZBAGEiMKH1VzZXJTZWdtZW50YXRpb25DcmVhdGVSZXF1ZXN0ZWQQChIjCh9Vc2VyU2VnbWVudGF0aW9uVXBkY
  XRlUmVxdWVzdGVkEAsSIwofVXNlclNlZ21lbnRhdGlvbkRlbGV0ZVJlcXVlc3RlZBAMEiEKHVVzZXJTZWdtZW50YXRpb25MaXN0U
  mVxdWVzdGVkEA0SIQodVXNlclNlZ21lbnRhdGlvblJlYWRSZXF1ZXN0ZWQQDhIcChhVc2VyQWRkVG9NeUxpc3RSZXF1ZXN0ZWQQF
  BIkCiBVc2VyRXZlbnRUb3BpY1N1YnNjcmliZVJlcXVlc3RlZBAjEiYKIlVzZXJFdmVudFRvcGljVW5zdWJzY3JpYmVSZXF1ZXN0Z
  WQQJBIaChZVc2VyUmVhZFRvcGljUmVxdWVzdGVkECkSDwoLVXNlclN1Yml6SWQQKhIdChlVc2VyUHJlc2VuY2VSZWFkUmVxdWVzd
  GVkECwSHwobVXNlclByZXZpZXdpbmdSZWFkUmVxdWVzdGVkEC4SGAoUVXNlckxpc3RUb3BSZXF1ZXN0ZWQQLxIhCh1Vc2VyQXV0b
  21hdGlvblVwc2VydFJlcXVlc3RlZBAyEiEKHVVzZXJBdXRvbWF0aW9uRGVsZXRlUmVxdWVzdGVkEDMSHwobVXNlckF1dG9tYXRpb
  25MaXN0UmVxdWVzdGVkEDQSHwobVXNlckF1dG9tYXRpb25SZWFkUmVxdWVzdGVkEDUSJAogQXV0b21hdGlvbkFnZW50Tm90aWZpY
  2F0aW9uRmlyZWQQNhImCiJBdXRvbWF0aW9uQ29udmVyc2F0aW9uTWVzc2FnZUZpcmVkEDcSHgoaVXNlclNlc3Npb25VcGRhdGVSZ
  XF1ZXN0ZWQQQRIeChpVc2VyU2Vzc2lvbkNyZWF0ZVJlcXVlc3RlZBBCEhwKGFVzZXJTZXNzaW9uUmVhZFJlcXVlc3RlZBBDEhQKE
  FNlZ21lbnRhdGlvbkxvb3AQRBIUChBBdXRvbWF0aW9uU3luY2VkEGYSEwoPQXV0b21hdGlvbkZpcmVkEGcSEQoNVXNlclJlcXVlc
  3RlZBBkEg8KC1VzZXJDcmVhdGVkEEYSFgoSVXNlckF0dHJpYnV0ZUFkZGVkEEcSDgoKVXNlclN5bmNlZBBlEhAKDFVzZXJVcHNlc
  nRlZBBpEhAKDFVzZXJWM1N5bmNlZBBqKi0KD0F1dG9tYXRpb25TY29wZRIQCgxjb252ZXJzYXRpb24QAhIICgR1c2VyEAMyMAoIT
  XlTZXJ2ZXISJAoCRG8SDS51c2VyLkFsbFR5cGUaDS51c2VyLkFsbFR5cGUiADKZAgoPU2VnbWVudGF0aW9uTWdyEjkKDUNyZWF0Z
  VNlZ21lbnQSEi51c2VyLlNlZ21lbnRhdGlvbhoSLnVzZXIuU2VnbWVudGF0aW9uIgASOQoNVXBkYXRlU2VnbWVudBISLnVzZXIuU
  2VnbWVudGF0aW9uGhIudXNlci5TZWdtZW50YXRpb24iABIxCgxMaXN0U2VnbWVudHMSCi5jb21tb24uSWQaEy51c2VyLlNlZ21lb
  nRhdGlvbnMiABIsCg1EZWxldGVTZWdtZW50EgouY29tbW9uLklkGg0uY29tbW9uLkVtcHR5IgASLwoLUmVhZFNlZ21lbnQSCi5jb
  21tb24uSWQaEi51c2VyLlNlZ21lbnRhdGlvbiIAMskBCgpWaXNpdG9yTWdyEiwKDFJlYWRQcmVzZW5jZRIKLmNvbW1vbi5JZBoOL
  nVzZXIuUHJlc2VuY2UiABIvCg1SZWFkUHJlc2VuY2VzEgsuY29tbW9uLklkcxoPLnVzZXIuUHJlc2VuY2VzIgASKwoLUmVhZFByZ
  XZpZXcSCi5jb21tb24uSWQaDi51c2VyLkxhc3RWaWV3IgASLwoPTGlzdFRvcFZpc2l0b3JzEgouY29tbW9uLklkGg4udXNlci5Wa
  XNpdG9ycyIAMqgECgdVc2VyTWdyEkAKC1NlYXJjaFVzZXJzEhcudXNlci5Vc2VyU2VhcmNoUmVxdWVzdBoWLnVzZXIuVXNlclNlY
  XJjaFJlc3VsdCIAEjgKB1N1Yml6SUQSFC51c2VyLlN1Yml6SURSZXF1ZXN0GhUudXNlci5TdWJpeklEUmVzcG9uc2UiABIwCgdBZ
  GRUb015EhQudXNlci5BZGRUb015UmVxdWVzdBoNLmNvbW1vbi5FbXB0eSIAEiYKCkNyZWF0ZVVzZXISCi51c2VyLlVzZXIaCi51c
  2VyLlVzZXIiABImCgpVcGRhdGVVc2VyEgoudXNlci5Vc2VyGgoudXNlci5Vc2VyIgASJAoIUmVhZFVzZXISCi5jb21tb24uSWQaC
  i51c2VyLlVzZXIiABIrCgxSZW1vdmVGcm9tTXkSCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkiABI+CgtDb3VudE15VXNlchIYL
  nVzZXIuQ291bnRNeVVzZXJSZXF1ZXN0GhMudXNlci5Db3VudFJlc3BvbnNlIgASOgoJQ291bnRVc2VyEhYudXNlci5Db3VudFVzZ
  XJSZXF1ZXN0GhMudXNlci5Db3VudFJlc3BvbnNlIgASUAoUQ291bnRVc2VyQnlBdHRyaWJ1dGUSIS51c2VyLkNvdW50VXNlckJ5Q
  XR0cmlidXRlUmVxdWVzdBoTLnVzZXIuQ291bnRSZXNwb25zZSIAMpoCCg1BdXRvbWF0aW9uTWdyEjIKD0xpc3RBdXRvbWF0aW9uc
  xIKLmNvbW1vbi5JZBoRLnVzZXIuQXV0b21hdGlvbnMiABI4ChBVcGRhdGVBdXRvbWF0aW9uEhAudXNlci5BdXRvbWF0aW9uGhAud
  XNlci5BdXRvbWF0aW9uIgASLwoQRGVsZXRlQXV0b21hdGlvbhIKLmNvbW1vbi5JZBoNLmNvbW1vbi5FbXB0eSIAEjAKDlJlYWRBd
  XRvbWF0aW9uEgouY29tbW9uLklkGhAudXNlci5BdXRvbWF0aW9uIgASOAoQQ3JlYXRlQXV0b21hdGlvbhIQLnVzZXIuQXV0b21hd
  GlvbhoQLnVzZXIuQXV0b21hdGlvbiIAMp0BCgpTZXNzaW9uTWdyEi8KDUNyZWF0ZVNlc3Npb24SDS51c2VyLlNlc3Npb24aDS51c
  2VyLlNlc3Npb24iABItCgtSZWFkU2Vzc2lvbhINLnVzZXIuU2Vzc2lvbhoNLnVzZXIuU2Vzc2lvbiIAEi8KDVVwZGF0ZVNlc3Npb
  24SDS51c2VyLlNlc3Npb24aDS51c2VyLlNlc3Npb24iADLIAgoMQXR0cmlidXRlTWdyEkcKGExpc3RBdHRyaWJ1dGVEZWZpbml0a
  W9ucxINLmNvbW1vbi5FbXB0eRoaLnVzZXIuQXR0cmlidXRlRGVmaW5pdGlvbnMiABJTChlDcmVhdGVBdHRyaWJ1dGVEZWZpbml0a
  W9uEhkudXNlci5BdHRyaWJ1dGVEZWZpbml0aW9uGhkudXNlci5BdHRyaWJ1dGVEZWZpbml0aW9uIgASUwoZVXBkYXRlQXR0cmlid
  XRlRGVmaW5pdGlvbhIZLnVzZXIuQXR0cmlidXRlRGVmaW5pdGlvbhoZLnVzZXIuQXR0cmlidXRlRGVmaW5pdGlvbiIAEkUKGURlb
  GV0ZUF0dHJpYnV0ZURlZmluaXRpb24SFy51c2VyLkRlbGV0ZUF0dHJSZXF1ZXN0Gg0uY29tbW9uLkVtcHR5IgA="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      common.CommonProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}