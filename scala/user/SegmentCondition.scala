// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class SegmentCondition(
    join: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    eventType: scala.Option[_root_.scala.Predef.String] = None,
    composition: scala.Option[_root_.scala.Predef.String] = None,
    key: scala.Option[_root_.scala.Predef.String] = None,
    conditions: _root_.scala.collection.Seq[user.Condition] = _root_.scala.collection.Seq.empty,
    leftCondition: scala.Option[user.SegmentCondition] = None,
    rightCondition: scala.Option[user.SegmentCondition] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[SegmentCondition] with scalapb.lenses.Updatable[SegmentCondition] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (join.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, join.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, id.get) }
      if (eventType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, eventType.get) }
      if (composition.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, composition.get) }
      if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, key.get) }
      conditions.foreach(conditions => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(conditions.serializedSize) + conditions.serializedSize)
      if (leftCondition.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(leftCondition.get.serializedSize) + leftCondition.get.serializedSize }
      if (rightCondition.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rightCondition.get.serializedSize) + rightCondition.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      join.foreach { __v =>
        _output__.writeString(2, __v)
      };
      id.foreach { __v =>
        _output__.writeString(4, __v)
      };
      eventType.foreach { __v =>
        _output__.writeString(5, __v)
      };
      composition.foreach { __v =>
        _output__.writeString(6, __v)
      };
      key.foreach { __v =>
        _output__.writeString(7, __v)
      };
      conditions.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      leftCondition.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rightCondition.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.SegmentCondition = {
      var __join = this.join
      var __id = this.id
      var __eventType = this.eventType
      var __composition = this.composition
      var __key = this.key
      val __conditions = (_root_.scala.collection.immutable.Vector.newBuilder[user.Condition] ++= this.conditions)
      var __leftCondition = this.leftCondition
      var __rightCondition = this.rightCondition
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __join = Option(_input__.readString())
          case 34 =>
            __id = Option(_input__.readString())
          case 42 =>
            __eventType = Option(_input__.readString())
          case 50 =>
            __composition = Option(_input__.readString())
          case 58 =>
            __key = Option(_input__.readString())
          case 66 =>
            __conditions += _root_.scalapb.LiteParser.readMessage(_input__, user.Condition.defaultInstance)
          case 90 =>
            __leftCondition = Option(_root_.scalapb.LiteParser.readMessage(_input__, __leftCondition.getOrElse(user.SegmentCondition.defaultInstance)))
          case 98 =>
            __rightCondition = Option(_root_.scalapb.LiteParser.readMessage(_input__, __rightCondition.getOrElse(user.SegmentCondition.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      user.SegmentCondition(
          join = __join,
          id = __id,
          eventType = __eventType,
          composition = __composition,
          key = __key,
          conditions = __conditions.result(),
          leftCondition = __leftCondition,
          rightCondition = __rightCondition
      )
    }
    def getJoin: _root_.scala.Predef.String = join.getOrElse("")
    def clearJoin: SegmentCondition = copy(join = None)
    def withJoin(__v: _root_.scala.Predef.String): SegmentCondition = copy(join = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: SegmentCondition = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): SegmentCondition = copy(id = Option(__v))
    def getEventType: _root_.scala.Predef.String = eventType.getOrElse("")
    def clearEventType: SegmentCondition = copy(eventType = None)
    def withEventType(__v: _root_.scala.Predef.String): SegmentCondition = copy(eventType = Option(__v))
    def getComposition: _root_.scala.Predef.String = composition.getOrElse("")
    def clearComposition: SegmentCondition = copy(composition = None)
    def withComposition(__v: _root_.scala.Predef.String): SegmentCondition = copy(composition = Option(__v))
    def getKey: _root_.scala.Predef.String = key.getOrElse("")
    def clearKey: SegmentCondition = copy(key = None)
    def withKey(__v: _root_.scala.Predef.String): SegmentCondition = copy(key = Option(__v))
    def clearConditions = copy(conditions = _root_.scala.collection.Seq.empty)
    def addConditions(__vs: user.Condition*): SegmentCondition = addAllConditions(__vs)
    def addAllConditions(__vs: TraversableOnce[user.Condition]): SegmentCondition = copy(conditions = conditions ++ __vs)
    def withConditions(__v: _root_.scala.collection.Seq[user.Condition]): SegmentCondition = copy(conditions = __v)
    def getLeftCondition: user.SegmentCondition = leftCondition.getOrElse(user.SegmentCondition.defaultInstance)
    def clearLeftCondition: SegmentCondition = copy(leftCondition = None)
    def withLeftCondition(__v: user.SegmentCondition): SegmentCondition = copy(leftCondition = Option(__v))
    def getRightCondition: user.SegmentCondition = rightCondition.getOrElse(user.SegmentCondition.defaultInstance)
    def clearRightCondition: SegmentCondition = copy(rightCondition = None)
    def withRightCondition(__v: user.SegmentCondition): SegmentCondition = copy(rightCondition = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => join.orNull
        case 4 => id.orNull
        case 5 => eventType.orNull
        case 6 => composition.orNull
        case 7 => key.orNull
        case 8 => conditions
        case 11 => leftCondition.orNull
        case 12 => rightCondition.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => join.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => eventType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => composition.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PRepeated(conditions.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 11 => leftCondition.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => rightCondition.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.SegmentCondition
}

object SegmentCondition extends scalapb.GeneratedMessageCompanion[user.SegmentCondition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.SegmentCondition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.SegmentCondition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.SegmentCondition(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[user.Condition]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[user.SegmentCondition]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[user.SegmentCondition]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.SegmentCondition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.SegmentCondition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[user.Condition]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[user.SegmentCondition]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[user.SegmentCondition]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 8 => __out = user.Condition
      case 11 => __out = user.SegmentCondition
      case 12 => __out = user.SegmentCondition
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.SegmentCondition(
  )
  sealed trait JoinOperator extends _root_.scalapb.GeneratedEnum {
    type EnumType = JoinOperator
    def isnone: _root_.scala.Boolean = false
    def isand: _root_.scala.Boolean = false
    def isor: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[JoinOperator] = user.SegmentCondition.JoinOperator
  }
  
  object JoinOperator extends _root_.scalapb.GeneratedEnumCompanion[JoinOperator] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[JoinOperator] = this
    @SerialVersionUID(0L)
    case object none extends JoinOperator {
      val value = 0
      val index = 0
      val name = "none"
      override def isnone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object and extends JoinOperator {
      val value = 1
      val index = 1
      val name = "and"
      override def isand: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object or extends JoinOperator {
      val value = 2
      val index = 2
      val name = "or"
      override def isor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends JoinOperator with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(none, and, or)
    def fromValue(value: _root_.scala.Int): JoinOperator = value match {
      case 0 => none
      case 1 => and
      case 2 => or
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = user.SegmentCondition.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = user.SegmentCondition.scalaDescriptor.enums(0)
  }
  sealed trait Composition extends _root_.scalapb.GeneratedEnum {
    type EnumType = Composition
    def istrue: _root_.scala.Boolean = false
    def issum: _root_.scala.Boolean = false
    def isavg: _root_.scala.Boolean = false
    def iscount: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Composition] = user.SegmentCondition.Composition
  }
  
  object Composition extends _root_.scalapb.GeneratedEnumCompanion[Composition] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Composition] = this
    @SerialVersionUID(0L)
    case object `true` extends Composition {
      val value = 0
      val index = 0
      val name = "true"
      override def istrue: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object sum extends Composition {
      val value = 1
      val index = 1
      val name = "sum"
      override def issum: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object avg extends Composition {
      val value = 2
      val index = 2
      val name = "avg"
      override def isavg: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object count extends Composition {
      val value = 3
      val index = 3
      val name = "count"
      override def iscount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Composition with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(`true`, sum, avg, count)
    def fromValue(value: _root_.scala.Int): Composition = value match {
      case 0 => `true`
      case 1 => sum
      case 2 => avg
      case 3 => count
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = user.SegmentCondition.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = user.SegmentCondition.scalaDescriptor.enums(1)
  }
  implicit class SegmentConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.SegmentCondition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.SegmentCondition](_l) {
    def join: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getJoin)((c_, f_) => c_.copy(join = Option(f_)))
    def optionalJoin: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.join)((c_, f_) => c_.copy(join = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def eventType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEventType)((c_, f_) => c_.copy(eventType = Option(f_)))
    def optionalEventType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.eventType)((c_, f_) => c_.copy(eventType = f_))
    def composition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getComposition)((c_, f_) => c_.copy(composition = Option(f_)))
    def optionalComposition: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.composition)((c_, f_) => c_.copy(composition = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = Option(f_)))
    def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def conditions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.Condition]] = field(_.conditions)((c_, f_) => c_.copy(conditions = f_))
    def leftCondition: _root_.scalapb.lenses.Lens[UpperPB, user.SegmentCondition] = field(_.getLeftCondition)((c_, f_) => c_.copy(leftCondition = Option(f_)))
    def optionalLeftCondition: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[user.SegmentCondition]] = field(_.leftCondition)((c_, f_) => c_.copy(leftCondition = f_))
    def rightCondition: _root_.scalapb.lenses.Lens[UpperPB, user.SegmentCondition] = field(_.getRightCondition)((c_, f_) => c_.copy(rightCondition = Option(f_)))
    def optionalRightCondition: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[user.SegmentCondition]] = field(_.rightCondition)((c_, f_) => c_.copy(rightCondition = f_))
  }
  final val JOIN_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 4
  final val EVENT_TYPE_FIELD_NUMBER = 5
  final val COMPOSITION_FIELD_NUMBER = 6
  final val KEY_FIELD_NUMBER = 7
  final val CONDITIONS_FIELD_NUMBER = 8
  final val LEFT_CONDITION_FIELD_NUMBER = 11
  final val RIGHT_CONDITION_FIELD_NUMBER = 12
}
