// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class Session(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    platform: scala.Option[_root_.scala.Predef.String] = None,
    referrer: scala.Option[_root_.scala.Predef.String] = None,
    searchEngine: scala.Option[_root_.scala.Predef.String] = None,
    started: scala.Option[_root_.scala.Long] = None,
    tracked: scala.Option[_root_.scala.Long] = None,
    status: scala.Option[_root_.scala.Predef.String] = None,
    eventsCount: scala.Option[_root_.scala.Int] = None,
    contentViewsCount: scala.Option[_root_.scala.Int] = None,
    searchTerm: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Session] with scalapb.lenses.Updatable[Session] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, userId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, id.get) }
      if (platform.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, platform.get) }
      if (referrer.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, referrer.get) }
      if (searchEngine.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, searchEngine.get) }
      if (started.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, started.get) }
      if (tracked.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, tracked.get) }
      if (status.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, status.get) }
      if (eventsCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(13, eventsCount.get) }
      if (contentViewsCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, contentViewsCount.get) }
      if (searchTerm.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, searchTerm.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      id.foreach { __v =>
        _output__.writeString(5, __v)
      };
      platform.foreach { __v =>
        _output__.writeString(7, __v)
      };
      referrer.foreach { __v =>
        _output__.writeString(8, __v)
      };
      searchEngine.foreach { __v =>
        _output__.writeString(9, __v)
      };
      started.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      tracked.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
      status.foreach { __v =>
        _output__.writeString(12, __v)
      };
      eventsCount.foreach { __v =>
        _output__.writeInt32(13, __v)
      };
      contentViewsCount.foreach { __v =>
        _output__.writeInt32(14, __v)
      };
      searchTerm.foreach { __v =>
        _output__.writeString(15, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.Session = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __userId = this.userId
      var __id = this.id
      var __platform = this.platform
      var __referrer = this.referrer
      var __searchEngine = this.searchEngine
      var __started = this.started
      var __tracked = this.tracked
      var __status = this.status
      var __eventsCount = this.eventsCount
      var __contentViewsCount = this.contentViewsCount
      var __searchTerm = this.searchTerm
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __userId = Option(_input__.readString())
          case 42 =>
            __id = Option(_input__.readString())
          case 58 =>
            __platform = Option(_input__.readString())
          case 66 =>
            __referrer = Option(_input__.readString())
          case 74 =>
            __searchEngine = Option(_input__.readString())
          case 80 =>
            __started = Option(_input__.readInt64())
          case 88 =>
            __tracked = Option(_input__.readInt64())
          case 98 =>
            __status = Option(_input__.readString())
          case 104 =>
            __eventsCount = Option(_input__.readInt32())
          case 112 =>
            __contentViewsCount = Option(_input__.readInt32())
          case 122 =>
            __searchTerm = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.Session(
          ctx = __ctx,
          accountId = __accountId,
          userId = __userId,
          id = __id,
          platform = __platform,
          referrer = __referrer,
          searchEngine = __searchEngine,
          started = __started,
          tracked = __tracked,
          status = __status,
          eventsCount = __eventsCount,
          contentViewsCount = __contentViewsCount,
          searchTerm = __searchTerm
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Session = copy(ctx = None)
    def withCtx(__v: common.Context): Session = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Session = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Session = copy(accountId = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: Session = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): Session = copy(userId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Session = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Session = copy(id = Option(__v))
    def getPlatform: _root_.scala.Predef.String = platform.getOrElse("")
    def clearPlatform: Session = copy(platform = None)
    def withPlatform(__v: _root_.scala.Predef.String): Session = copy(platform = Option(__v))
    def getReferrer: _root_.scala.Predef.String = referrer.getOrElse("")
    def clearReferrer: Session = copy(referrer = None)
    def withReferrer(__v: _root_.scala.Predef.String): Session = copy(referrer = Option(__v))
    def getSearchEngine: _root_.scala.Predef.String = searchEngine.getOrElse("")
    def clearSearchEngine: Session = copy(searchEngine = None)
    def withSearchEngine(__v: _root_.scala.Predef.String): Session = copy(searchEngine = Option(__v))
    def getStarted: _root_.scala.Long = started.getOrElse(0L)
    def clearStarted: Session = copy(started = None)
    def withStarted(__v: _root_.scala.Long): Session = copy(started = Option(__v))
    def getTracked: _root_.scala.Long = tracked.getOrElse(0L)
    def clearTracked: Session = copy(tracked = None)
    def withTracked(__v: _root_.scala.Long): Session = copy(tracked = Option(__v))
    def getStatus: _root_.scala.Predef.String = status.getOrElse("")
    def clearStatus: Session = copy(status = None)
    def withStatus(__v: _root_.scala.Predef.String): Session = copy(status = Option(__v))
    def getEventsCount: _root_.scala.Int = eventsCount.getOrElse(0)
    def clearEventsCount: Session = copy(eventsCount = None)
    def withEventsCount(__v: _root_.scala.Int): Session = copy(eventsCount = Option(__v))
    def getContentViewsCount: _root_.scala.Int = contentViewsCount.getOrElse(0)
    def clearContentViewsCount: Session = copy(contentViewsCount = None)
    def withContentViewsCount(__v: _root_.scala.Int): Session = copy(contentViewsCount = Option(__v))
    def getSearchTerm: _root_.scala.Predef.String = searchTerm.getOrElse("")
    def clearSearchTerm: Session = copy(searchTerm = None)
    def withSearchTerm(__v: _root_.scala.Predef.String): Session = copy(searchTerm = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => accountId.orNull
        case 4 => userId.orNull
        case 5 => id.orNull
        case 7 => platform.orNull
        case 8 => referrer.orNull
        case 9 => searchEngine.orNull
        case 10 => started.orNull
        case 11 => tracked.orNull
        case 12 => status.orNull
        case 13 => eventsCount.orNull
        case 14 => contentViewsCount.orNull
        case 15 => searchTerm.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => platform.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => referrer.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => searchEngine.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => started.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => tracked.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => status.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => eventsCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => contentViewsCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => searchTerm.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.Session
}

object Session extends scalapb.GeneratedMessageCompanion[user.Session] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.Session] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.Session = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.Session(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.Session] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.Session(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.Session(
  )
  sealed trait Platform extends _root_.scalapb.GeneratedEnum {
    type EnumType = Platform
    def isweb: _root_.scala.Boolean = false
    def ismobile: _root_.scala.Boolean = false
    def isdesktop: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Platform] = user.Session.Platform
  }
  
  object Platform extends _root_.scalapb.GeneratedEnumCompanion[Platform] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Platform] = this
    @SerialVersionUID(0L)
    case object web extends Platform {
      val value = 0
      val index = 0
      val name = "web"
      override def isweb: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object mobile extends Platform {
      val value = 2
      val index = 1
      val name = "mobile"
      override def ismobile: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object desktop extends Platform {
      val value = 4
      val index = 2
      val name = "desktop"
      override def isdesktop: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Platform with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(web, mobile, desktop)
    def fromValue(value: _root_.scala.Int): Platform = value match {
      case 0 => web
      case 2 => mobile
      case 4 => desktop
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = user.Session.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = user.Session.scalaDescriptor.enums(0)
  }
  sealed trait Status extends _root_.scalapb.GeneratedEnum {
    type EnumType = Status
    def isopen: _root_.scala.Boolean = false
    def isclosed: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Status] = user.Session.Status
  }
  
  object Status extends _root_.scalapb.GeneratedEnumCompanion[Status] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Status] = this
    @SerialVersionUID(0L)
    case object open extends Status {
      val value = 0
      val index = 0
      val name = "open"
      override def isopen: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object closed extends Status {
      val value = 1
      val index = 1
      val name = "closed"
      override def isclosed: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Status with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(open, closed)
    def fromValue(value: _root_.scala.Int): Status = value match {
      case 0 => open
      case 1 => closed
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = user.Session.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = user.Session.scalaDescriptor.enums(1)
  }
  implicit class SessionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.Session]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.Session](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def platform: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPlatform)((c_, f_) => c_.copy(platform = Option(f_)))
    def optionalPlatform: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.platform)((c_, f_) => c_.copy(platform = f_))
    def referrer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getReferrer)((c_, f_) => c_.copy(referrer = Option(f_)))
    def optionalReferrer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.referrer)((c_, f_) => c_.copy(referrer = f_))
    def searchEngine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSearchEngine)((c_, f_) => c_.copy(searchEngine = Option(f_)))
    def optionalSearchEngine: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.searchEngine)((c_, f_) => c_.copy(searchEngine = f_))
    def started: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStarted)((c_, f_) => c_.copy(started = Option(f_)))
    def optionalStarted: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.started)((c_, f_) => c_.copy(started = f_))
    def tracked: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getTracked)((c_, f_) => c_.copy(tracked = Option(f_)))
    def optionalTracked: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.tracked)((c_, f_) => c_.copy(tracked = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStatus)((c_, f_) => c_.copy(status = Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def eventsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getEventsCount)((c_, f_) => c_.copy(eventsCount = Option(f_)))
    def optionalEventsCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.eventsCount)((c_, f_) => c_.copy(eventsCount = f_))
    def contentViewsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getContentViewsCount)((c_, f_) => c_.copy(contentViewsCount = Option(f_)))
    def optionalContentViewsCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.contentViewsCount)((c_, f_) => c_.copy(contentViewsCount = f_))
    def searchTerm: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSearchTerm)((c_, f_) => c_.copy(searchTerm = Option(f_)))
    def optionalSearchTerm: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.searchTerm)((c_, f_) => c_.copy(searchTerm = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val USER_ID_FIELD_NUMBER = 4
  final val ID_FIELD_NUMBER = 5
  final val PLATFORM_FIELD_NUMBER = 7
  final val REFERRER_FIELD_NUMBER = 8
  final val SEARCH_ENGINE_FIELD_NUMBER = 9
  final val STARTED_FIELD_NUMBER = 10
  final val TRACKED_FIELD_NUMBER = 11
  final val STATUS_FIELD_NUMBER = 12
  final val EVENTS_COUNT_FIELD_NUMBER = 13
  final val CONTENT_VIEWS_COUNT_FIELD_NUMBER = 14
  final val SEARCH_TERM_FIELD_NUMBER = 15
}
