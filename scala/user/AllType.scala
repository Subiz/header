// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class AllType(
    user: scala.Option[_root_.user.User] = None,
    cr: scala.Option[_root_.user.CreateRequest] = None,
    fields: scala.Option[_root_.user.Field] = None,
    ucr: scala.Option[_root_.user.UserCreateResult] = None,
    rpr: scala.Option[_root_.user.ReadTopicRequest] = None,
    usersearchrequest: scala.Option[_root_.user.UserSearchRequest] = None,
    usersearchresult: scala.Option[_root_.user.UserSearchResult] = None,
    ms: scala.Option[_root_.user.MaskResponse] = None,
    ltr: scala.Option[_root_.user.ListTopicsResult] = None,
    sg: scala.Option[_root_.user.Segmentation] = None,
    presn: scala.Option[_root_.user.Presence] = None,
    vi: scala.Option[_root_.user.Visitor] = None,
    vis: scala.Option[_root_.user.Visitors] = None,
    topic: scala.Option[_root_.user.Topic] = None,
    utopic: scala.Option[_root_.user.UnreadTopic] = None,
    myuser: scala.Option[_root_.user.MyUser] = None,
    automation: scala.Option[_root_.user.Automation] = None,
    automations: scala.Option[_root_.user.Automations] = None,
    session: scala.Option[_root_.user.Session] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
      if (cr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(cr.get.serializedSize) + cr.get.serializedSize }
      if (fields.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.get.serializedSize) + fields.get.serializedSize }
      if (ucr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ucr.get.serializedSize) + ucr.get.serializedSize }
      if (rpr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rpr.get.serializedSize) + rpr.get.serializedSize }
      if (usersearchrequest.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(usersearchrequest.get.serializedSize) + usersearchrequest.get.serializedSize }
      if (usersearchresult.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(usersearchresult.get.serializedSize) + usersearchresult.get.serializedSize }
      if (ms.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ms.get.serializedSize) + ms.get.serializedSize }
      if (ltr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ltr.get.serializedSize) + ltr.get.serializedSize }
      if (sg.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sg.get.serializedSize) + sg.get.serializedSize }
      if (presn.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(presn.get.serializedSize) + presn.get.serializedSize }
      if (vi.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(vi.get.serializedSize) + vi.get.serializedSize }
      if (vis.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(vis.get.serializedSize) + vis.get.serializedSize }
      if (topic.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(topic.get.serializedSize) + topic.get.serializedSize }
      if (utopic.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(utopic.get.serializedSize) + utopic.get.serializedSize }
      if (myuser.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(myuser.get.serializedSize) + myuser.get.serializedSize }
      if (automation.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(automation.get.serializedSize) + automation.get.serializedSize }
      if (automations.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(automations.get.serializedSize) + automations.get.serializedSize }
      if (session.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(session.get.serializedSize) + session.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      user.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      cr.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      fields.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ucr.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rpr.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      usersearchrequest.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      usersearchresult.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ms.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ltr.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sg.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      presn.foreach { __v =>
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      vi.foreach { __v =>
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      vis.foreach { __v =>
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      topic.foreach { __v =>
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      utopic.foreach { __v =>
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      myuser.foreach { __v =>
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      automation.foreach { __v =>
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      automations.foreach { __v =>
        _output__.writeTag(25, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      session.foreach { __v =>
        _output__.writeTag(26, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.user.AllType = {
      var __user = this.user
      var __cr = this.cr
      var __fields = this.fields
      var __ucr = this.ucr
      var __rpr = this.rpr
      var __usersearchrequest = this.usersearchrequest
      var __usersearchresult = this.usersearchresult
      var __ms = this.ms
      var __ltr = this.ltr
      var __sg = this.sg
      var __presn = this.presn
      var __vi = this.vi
      var __vis = this.vis
      var __topic = this.topic
      var __utopic = this.utopic
      var __myuser = this.myuser
      var __automation = this.automation
      var __automations = this.automations
      var __session = this.session
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
          case 26 =>
            __cr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __cr.getOrElse(_root_.user.CreateRequest.defaultInstance)))
          case 42 =>
            __fields = Option(_root_.scalapb.LiteParser.readMessage(_input__, __fields.getOrElse(_root_.user.Field.defaultInstance)))
          case 50 =>
            __ucr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ucr.getOrElse(_root_.user.UserCreateResult.defaultInstance)))
          case 66 =>
            __rpr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __rpr.getOrElse(_root_.user.ReadTopicRequest.defaultInstance)))
          case 74 =>
            __usersearchrequest = Option(_root_.scalapb.LiteParser.readMessage(_input__, __usersearchrequest.getOrElse(_root_.user.UserSearchRequest.defaultInstance)))
          case 82 =>
            __usersearchresult = Option(_root_.scalapb.LiteParser.readMessage(_input__, __usersearchresult.getOrElse(_root_.user.UserSearchResult.defaultInstance)))
          case 90 =>
            __ms = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ms.getOrElse(_root_.user.MaskResponse.defaultInstance)))
          case 98 =>
            __ltr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ltr.getOrElse(_root_.user.ListTopicsResult.defaultInstance)))
          case 114 =>
            __sg = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sg.getOrElse(_root_.user.Segmentation.defaultInstance)))
          case 122 =>
            __presn = Option(_root_.scalapb.LiteParser.readMessage(_input__, __presn.getOrElse(_root_.user.Presence.defaultInstance)))
          case 138 =>
            __vi = Option(_root_.scalapb.LiteParser.readMessage(_input__, __vi.getOrElse(_root_.user.Visitor.defaultInstance)))
          case 146 =>
            __vis = Option(_root_.scalapb.LiteParser.readMessage(_input__, __vis.getOrElse(_root_.user.Visitors.defaultInstance)))
          case 154 =>
            __topic = Option(_root_.scalapb.LiteParser.readMessage(_input__, __topic.getOrElse(_root_.user.Topic.defaultInstance)))
          case 162 =>
            __utopic = Option(_root_.scalapb.LiteParser.readMessage(_input__, __utopic.getOrElse(_root_.user.UnreadTopic.defaultInstance)))
          case 170 =>
            __myuser = Option(_root_.scalapb.LiteParser.readMessage(_input__, __myuser.getOrElse(_root_.user.MyUser.defaultInstance)))
          case 186 =>
            __automation = Option(_root_.scalapb.LiteParser.readMessage(_input__, __automation.getOrElse(_root_.user.Automation.defaultInstance)))
          case 202 =>
            __automations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __automations.getOrElse(_root_.user.Automations.defaultInstance)))
          case 210 =>
            __session = Option(_root_.scalapb.LiteParser.readMessage(_input__, __session.getOrElse(_root_.user.Session.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      _root_.user.AllType(
          user = __user,
          cr = __cr,
          fields = __fields,
          ucr = __ucr,
          rpr = __rpr,
          usersearchrequest = __usersearchrequest,
          usersearchresult = __usersearchresult,
          ms = __ms,
          ltr = __ltr,
          sg = __sg,
          presn = __presn,
          vi = __vi,
          vis = __vis,
          topic = __topic,
          utopic = __utopic,
          myuser = __myuser,
          automation = __automation,
          automations = __automations,
          session = __session
      )
    }
    def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
    def clearUser: AllType = copy(user = None)
    def withUser(__v: _root_.user.User): AllType = copy(user = Option(__v))
    def getCr: _root_.user.CreateRequest = cr.getOrElse(_root_.user.CreateRequest.defaultInstance)
    def clearCr: AllType = copy(cr = None)
    def withCr(__v: _root_.user.CreateRequest): AllType = copy(cr = Option(__v))
    def getFields: _root_.user.Field = fields.getOrElse(_root_.user.Field.defaultInstance)
    def clearFields: AllType = copy(fields = None)
    def withFields(__v: _root_.user.Field): AllType = copy(fields = Option(__v))
    def getUcr: _root_.user.UserCreateResult = ucr.getOrElse(_root_.user.UserCreateResult.defaultInstance)
    def clearUcr: AllType = copy(ucr = None)
    def withUcr(__v: _root_.user.UserCreateResult): AllType = copy(ucr = Option(__v))
    def getRpr: _root_.user.ReadTopicRequest = rpr.getOrElse(_root_.user.ReadTopicRequest.defaultInstance)
    def clearRpr: AllType = copy(rpr = None)
    def withRpr(__v: _root_.user.ReadTopicRequest): AllType = copy(rpr = Option(__v))
    def getUsersearchrequest: _root_.user.UserSearchRequest = usersearchrequest.getOrElse(_root_.user.UserSearchRequest.defaultInstance)
    def clearUsersearchrequest: AllType = copy(usersearchrequest = None)
    def withUsersearchrequest(__v: _root_.user.UserSearchRequest): AllType = copy(usersearchrequest = Option(__v))
    def getUsersearchresult: _root_.user.UserSearchResult = usersearchresult.getOrElse(_root_.user.UserSearchResult.defaultInstance)
    def clearUsersearchresult: AllType = copy(usersearchresult = None)
    def withUsersearchresult(__v: _root_.user.UserSearchResult): AllType = copy(usersearchresult = Option(__v))
    def getMs: _root_.user.MaskResponse = ms.getOrElse(_root_.user.MaskResponse.defaultInstance)
    def clearMs: AllType = copy(ms = None)
    def withMs(__v: _root_.user.MaskResponse): AllType = copy(ms = Option(__v))
    def getLtr: _root_.user.ListTopicsResult = ltr.getOrElse(_root_.user.ListTopicsResult.defaultInstance)
    def clearLtr: AllType = copy(ltr = None)
    def withLtr(__v: _root_.user.ListTopicsResult): AllType = copy(ltr = Option(__v))
    def getSg: _root_.user.Segmentation = sg.getOrElse(_root_.user.Segmentation.defaultInstance)
    def clearSg: AllType = copy(sg = None)
    def withSg(__v: _root_.user.Segmentation): AllType = copy(sg = Option(__v))
    def getPresn: _root_.user.Presence = presn.getOrElse(_root_.user.Presence.defaultInstance)
    def clearPresn: AllType = copy(presn = None)
    def withPresn(__v: _root_.user.Presence): AllType = copy(presn = Option(__v))
    def getVi: _root_.user.Visitor = vi.getOrElse(_root_.user.Visitor.defaultInstance)
    def clearVi: AllType = copy(vi = None)
    def withVi(__v: _root_.user.Visitor): AllType = copy(vi = Option(__v))
    def getVis: _root_.user.Visitors = vis.getOrElse(_root_.user.Visitors.defaultInstance)
    def clearVis: AllType = copy(vis = None)
    def withVis(__v: _root_.user.Visitors): AllType = copy(vis = Option(__v))
    def getTopic: _root_.user.Topic = topic.getOrElse(_root_.user.Topic.defaultInstance)
    def clearTopic: AllType = copy(topic = None)
    def withTopic(__v: _root_.user.Topic): AllType = copy(topic = Option(__v))
    def getUtopic: _root_.user.UnreadTopic = utopic.getOrElse(_root_.user.UnreadTopic.defaultInstance)
    def clearUtopic: AllType = copy(utopic = None)
    def withUtopic(__v: _root_.user.UnreadTopic): AllType = copy(utopic = Option(__v))
    def getMyuser: _root_.user.MyUser = myuser.getOrElse(_root_.user.MyUser.defaultInstance)
    def clearMyuser: AllType = copy(myuser = None)
    def withMyuser(__v: _root_.user.MyUser): AllType = copy(myuser = Option(__v))
    def getAutomation: _root_.user.Automation = automation.getOrElse(_root_.user.Automation.defaultInstance)
    def clearAutomation: AllType = copy(automation = None)
    def withAutomation(__v: _root_.user.Automation): AllType = copy(automation = Option(__v))
    def getAutomations: _root_.user.Automations = automations.getOrElse(_root_.user.Automations.defaultInstance)
    def clearAutomations: AllType = copy(automations = None)
    def withAutomations(__v: _root_.user.Automations): AllType = copy(automations = Option(__v))
    def getSession: _root_.user.Session = session.getOrElse(_root_.user.Session.defaultInstance)
    def clearSession: AllType = copy(session = None)
    def withSession(__v: _root_.user.Session): AllType = copy(session = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => user.orNull
        case 3 => cr.orNull
        case 5 => fields.orNull
        case 6 => ucr.orNull
        case 8 => rpr.orNull
        case 9 => usersearchrequest.orNull
        case 10 => usersearchresult.orNull
        case 11 => ms.orNull
        case 12 => ltr.orNull
        case 14 => sg.orNull
        case 15 => presn.orNull
        case 17 => vi.orNull
        case 18 => vis.orNull
        case 19 => topic.orNull
        case 20 => utopic.orNull
        case 21 => myuser.orNull
        case 23 => automation.orNull
        case 25 => automations.orNull
        case 26 => session.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => cr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => fields.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => ucr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => rpr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => usersearchrequest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => usersearchresult.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => ms.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => ltr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => sg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => presn.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => vi.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => vis.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => topic.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => utopic.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => myuser.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => automation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => automations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => session.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.user.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[user.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.user.User]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.user.CreateRequest]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.user.Field]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.user.UserCreateResult]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.user.ReadTopicRequest]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.user.UserSearchRequest]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.user.UserSearchResult]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.user.MaskResponse]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.user.ListTopicsResult]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.user.Segmentation]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.user.Presence]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.user.Visitor]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.user.Visitors]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.user.Topic]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.user.UnreadTopic]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.user.MyUser]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.user.Automation]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.user.Automations]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.user.Session]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.user.User]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.user.CreateRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.user.Field]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.user.UserCreateResult]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.user.ReadTopicRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.user.UserSearchRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.user.UserSearchResult]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.user.MaskResponse]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.user.ListTopicsResult]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.user.Segmentation]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.user.Presence]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.user.Visitor]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.user.Visitors]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.user.Topic]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[_root_.user.UnreadTopic]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.user.MyUser]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[_root_.user.Automation]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[_root_.user.Automations]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[_root_.user.Session]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = user.User
      case 3 => __out = user.CreateRequest
      case 5 => __out = user.Field
      case 6 => __out = user.UserCreateResult
      case 8 => __out = user.ReadTopicRequest
      case 9 => __out = user.UserSearchRequest
      case 10 => __out = user.UserSearchResult
      case 11 => __out = user.MaskResponse
      case 12 => __out = user.ListTopicsResult
      case 14 => __out = user.Segmentation
      case 15 => __out = user.Presence
      case 17 => __out = user.Visitor
      case 18 => __out = user.Visitors
      case 19 => __out = user.Topic
      case 20 => __out = user.UnreadTopic
      case 21 => __out = user.MyUser
      case 23 => __out = user.Automation
      case 25 => __out = user.Automations
      case 26 => __out = user.Session
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.AllType](_l) {
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def cr: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.CreateRequest] = field(_.getCr)((c_, f_) => c_.copy(cr = Option(f_)))
    def optionalCr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.CreateRequest]] = field(_.cr)((c_, f_) => c_.copy(cr = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Field] = field(_.getFields)((c_, f_) => c_.copy(fields = Option(f_)))
    def optionalFields: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Field]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def ucr: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.UserCreateResult] = field(_.getUcr)((c_, f_) => c_.copy(ucr = Option(f_)))
    def optionalUcr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.UserCreateResult]] = field(_.ucr)((c_, f_) => c_.copy(ucr = f_))
    def rpr: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.ReadTopicRequest] = field(_.getRpr)((c_, f_) => c_.copy(rpr = Option(f_)))
    def optionalRpr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.ReadTopicRequest]] = field(_.rpr)((c_, f_) => c_.copy(rpr = f_))
    def usersearchrequest: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.UserSearchRequest] = field(_.getUsersearchrequest)((c_, f_) => c_.copy(usersearchrequest = Option(f_)))
    def optionalUsersearchrequest: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.UserSearchRequest]] = field(_.usersearchrequest)((c_, f_) => c_.copy(usersearchrequest = f_))
    def usersearchresult: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.UserSearchResult] = field(_.getUsersearchresult)((c_, f_) => c_.copy(usersearchresult = Option(f_)))
    def optionalUsersearchresult: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.UserSearchResult]] = field(_.usersearchresult)((c_, f_) => c_.copy(usersearchresult = f_))
    def ms: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.MaskResponse] = field(_.getMs)((c_, f_) => c_.copy(ms = Option(f_)))
    def optionalMs: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.MaskResponse]] = field(_.ms)((c_, f_) => c_.copy(ms = f_))
    def ltr: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.ListTopicsResult] = field(_.getLtr)((c_, f_) => c_.copy(ltr = Option(f_)))
    def optionalLtr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.ListTopicsResult]] = field(_.ltr)((c_, f_) => c_.copy(ltr = f_))
    def sg: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Segmentation] = field(_.getSg)((c_, f_) => c_.copy(sg = Option(f_)))
    def optionalSg: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Segmentation]] = field(_.sg)((c_, f_) => c_.copy(sg = f_))
    def presn: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Presence] = field(_.getPresn)((c_, f_) => c_.copy(presn = Option(f_)))
    def optionalPresn: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Presence]] = field(_.presn)((c_, f_) => c_.copy(presn = f_))
    def vi: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Visitor] = field(_.getVi)((c_, f_) => c_.copy(vi = Option(f_)))
    def optionalVi: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Visitor]] = field(_.vi)((c_, f_) => c_.copy(vi = f_))
    def vis: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Visitors] = field(_.getVis)((c_, f_) => c_.copy(vis = Option(f_)))
    def optionalVis: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Visitors]] = field(_.vis)((c_, f_) => c_.copy(vis = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Topic] = field(_.getTopic)((c_, f_) => c_.copy(topic = Option(f_)))
    def optionalTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Topic]] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def utopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.UnreadTopic] = field(_.getUtopic)((c_, f_) => c_.copy(utopic = Option(f_)))
    def optionalUtopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.UnreadTopic]] = field(_.utopic)((c_, f_) => c_.copy(utopic = f_))
    def myuser: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.MyUser] = field(_.getMyuser)((c_, f_) => c_.copy(myuser = Option(f_)))
    def optionalMyuser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.MyUser]] = field(_.myuser)((c_, f_) => c_.copy(myuser = f_))
    def automation: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Automation] = field(_.getAutomation)((c_, f_) => c_.copy(automation = Option(f_)))
    def optionalAutomation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Automation]] = field(_.automation)((c_, f_) => c_.copy(automation = f_))
    def automations: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Automations] = field(_.getAutomations)((c_, f_) => c_.copy(automations = Option(f_)))
    def optionalAutomations: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Automations]] = field(_.automations)((c_, f_) => c_.copy(automations = f_))
    def session: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.Session] = field(_.getSession)((c_, f_) => c_.copy(session = Option(f_)))
    def optionalSession: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.Session]] = field(_.session)((c_, f_) => c_.copy(session = f_))
  }
  final val USER_FIELD_NUMBER = 2
  final val CR_FIELD_NUMBER = 3
  final val FIELDS_FIELD_NUMBER = 5
  final val UCR_FIELD_NUMBER = 6
  final val RPR_FIELD_NUMBER = 8
  final val USERSEARCHREQUEST_FIELD_NUMBER = 9
  final val USERSEARCHRESULT_FIELD_NUMBER = 10
  final val MS_FIELD_NUMBER = 11
  final val LTR_FIELD_NUMBER = 12
  final val SG_FIELD_NUMBER = 14
  final val PRESN_FIELD_NUMBER = 15
  final val VI_FIELD_NUMBER = 17
  final val VIS_FIELD_NUMBER = 18
  final val TOPIC_FIELD_NUMBER = 19
  final val UTOPIC_FIELD_NUMBER = 20
  final val MYUSER_FIELD_NUMBER = 21
  final val AUTOMATION_FIELD_NUMBER = 23
  final val AUTOMATIONS_FIELD_NUMBER = 25
  final val SESSION_FIELD_NUMBER = 26
}
