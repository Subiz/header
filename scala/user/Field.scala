// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class Field(
    name: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    setter: scala.Option[_root_.scala.Predef.String] = None,
    setterType: scala.Option[_root_.scala.Predef.String] = None,
    updated: scala.Option[_root_.scala.Long] = None,
    data: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Field] with scalapb.lenses.Updatable[Field] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, userId.get) }
      if (setter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, setter.get) }
      if (setterType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, setterType.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, updated.get) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, data.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, id.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      setter.foreach { __v =>
        _output__.writeString(5, __v)
      };
      setterType.foreach { __v =>
        _output__.writeString(6, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      data.foreach { __v =>
        _output__.writeString(9, __v)
      };
      id.foreach { __v =>
        _output__.writeString(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.Field = {
      var __name = this.name
      var __accountId = this.accountId
      var __userId = this.userId
      var __setter = this.setter
      var __setterType = this.setterType
      var __updated = this.updated
      var __data = this.data
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __name = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __userId = Option(_input__.readString())
          case 42 =>
            __setter = Option(_input__.readString())
          case 50 =>
            __setterType = Option(_input__.readString())
          case 64 =>
            __updated = Option(_input__.readInt64())
          case 74 =>
            __data = Option(_input__.readString())
          case 82 =>
            __id = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.Field(
          name = __name,
          accountId = __accountId,
          userId = __userId,
          setter = __setter,
          setterType = __setterType,
          updated = __updated,
          data = __data,
          id = __id
      )
    }
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Field = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Field = copy(name = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Field = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Field = copy(accountId = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: Field = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): Field = copy(userId = Option(__v))
    def getSetter: _root_.scala.Predef.String = setter.getOrElse("")
    def clearSetter: Field = copy(setter = None)
    def withSetter(__v: _root_.scala.Predef.String): Field = copy(setter = Option(__v))
    def getSetterType: _root_.scala.Predef.String = setterType.getOrElse("")
    def clearSetterType: Field = copy(setterType = None)
    def withSetterType(__v: _root_.scala.Predef.String): Field = copy(setterType = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: Field = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): Field = copy(updated = Option(__v))
    def getData: _root_.scala.Predef.String = data.getOrElse("")
    def clearData: Field = copy(data = None)
    def withData(__v: _root_.scala.Predef.String): Field = copy(data = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Field = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Field = copy(id = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => name.orNull
        case 3 => accountId.orNull
        case 4 => userId.orNull
        case 5 => setter.orNull
        case 6 => setterType.orNull
        case 8 => updated.orNull
        case 9 => data.orNull
        case 10 => id.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => setter.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => setterType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => data.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.Field
}

object Field extends scalapb.GeneratedMessageCompanion[user.Field] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.Field] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.Field = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.Field(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.Field] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.Field(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(34)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(34)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.Field(
  )
  implicit class FieldLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.Field]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.Field](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def setter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSetter)((c_, f_) => c_.copy(setter = Option(f_)))
    def optionalSetter: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.setter)((c_, f_) => c_.copy(setter = f_))
    def setterType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSetterType)((c_, f_) => c_.copy(setterType = Option(f_)))
    def optionalSetterType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.setterType)((c_, f_) => c_.copy(setterType = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val NAME_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val USER_ID_FIELD_NUMBER = 4
  final val SETTER_FIELD_NUMBER = 5
  final val SETTER_TYPE_FIELD_NUMBER = 6
  final val UPDATED_FIELD_NUMBER = 8
  final val DATA_FIELD_NUMBER = 9
  final val ID_FIELD_NUMBER = 10
}
