// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class UserCreateResult(
    id: scala.Option[_root_.scala.Predef.String] = None,
    mask: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserCreateResult] with scalapb.lenses.Updatable[UserCreateResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (mask.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, mask.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      mask.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.UserCreateResult = {
      var __id = this.id
      var __mask = this.mask
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __id = Option(_input__.readString())
          case 42 =>
            __mask = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.UserCreateResult(
          id = __id,
          mask = __mask
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: UserCreateResult = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): UserCreateResult = copy(id = Option(__v))
    def getMask: _root_.scala.Predef.String = mask.getOrElse("")
    def clearMask: UserCreateResult = copy(mask = None)
    def withMask(__v: _root_.scala.Predef.String): UserCreateResult = copy(mask = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 5 => mask.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => mask.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.UserCreateResult
}

object UserCreateResult extends scalapb.GeneratedMessageCompanion[user.UserCreateResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.UserCreateResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.UserCreateResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.UserCreateResult(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.UserCreateResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.UserCreateResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.UserCreateResult(
  )
  implicit class UserCreateResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.UserCreateResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.UserCreateResult](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def mask: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMask)((c_, f_) => c_.copy(mask = Option(f_)))
    def optionalMask: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.mask)((c_, f_) => c_.copy(mask = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val MASK_FIELD_NUMBER = 5
}
