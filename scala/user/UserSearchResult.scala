// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

/** @param unreads
  *   only used when search my users
  */
@SerialVersionUID(0L)
final case class UserSearchResult(
    ctx: scala.Option[common.Context] = None,
    total: scala.Option[_root_.scala.Long] = None,
    users: _root_.scala.collection.Seq[user.User] = _root_.scala.collection.Seq.empty,
    anchor: scala.Option[_root_.scala.Predef.String] = None,
    unreads: _root_.scala.collection.Seq[_root_.scala.Int] = _root_.scala.collection.Seq.empty,
    unreadCounts: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = scala.collection.immutable.Map.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserSearchResult] with scalapb.lenses.Updatable[UserSearchResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (total.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, total.get) }
      users.foreach(users => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(users.serializedSize) + users.serializedSize)
      if (anchor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, anchor.get) }
      unreads.foreach(unreads => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, unreads))
      unreadCounts.foreach(unreadCounts => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.UserSearchResult._typemapper_unreadCounts.toBase(unreadCounts).serializedSize) + user.UserSearchResult._typemapper_unreadCounts.toBase(unreadCounts).serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      total.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      users.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      anchor.foreach { __v =>
        _output__.writeString(5, __v)
      };
      unreads.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
      unreadCounts.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(user.UserSearchResult._typemapper_unreadCounts.toBase(__v).serializedSize)
        user.UserSearchResult._typemapper_unreadCounts.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.UserSearchResult = {
      var __ctx = this.ctx
      var __total = this.total
      val __users = (_root_.scala.collection.immutable.Vector.newBuilder[user.User] ++= this.users)
      var __anchor = this.anchor
      val __unreads = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.unreads)
      val __unreadCounts = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int] ++= this.unreadCounts)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 24 =>
            __total = Option(_input__.readInt64())
          case 34 =>
            __users += _root_.scalapb.LiteParser.readMessage(_input__, user.User.defaultInstance)
          case 42 =>
            __anchor = Option(_input__.readString())
          case 48 =>
            __unreads += _input__.readInt32()
          case 50 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __unreads += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 58 =>
            __unreadCounts += user.UserSearchResult._typemapper_unreadCounts.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, user.UserSearchResult.UnreadCountsEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      user.UserSearchResult(
          ctx = __ctx,
          total = __total,
          users = __users.result(),
          anchor = __anchor,
          unreads = __unreads.result(),
          unreadCounts = __unreadCounts.result()
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: UserSearchResult = copy(ctx = None)
    def withCtx(__v: common.Context): UserSearchResult = copy(ctx = Option(__v))
    def getTotal: _root_.scala.Long = total.getOrElse(0L)
    def clearTotal: UserSearchResult = copy(total = None)
    def withTotal(__v: _root_.scala.Long): UserSearchResult = copy(total = Option(__v))
    def clearUsers = copy(users = _root_.scala.collection.Seq.empty)
    def addUsers(__vs: user.User*): UserSearchResult = addAllUsers(__vs)
    def addAllUsers(__vs: TraversableOnce[user.User]): UserSearchResult = copy(users = users ++ __vs)
    def withUsers(__v: _root_.scala.collection.Seq[user.User]): UserSearchResult = copy(users = __v)
    def getAnchor: _root_.scala.Predef.String = anchor.getOrElse("")
    def clearAnchor: UserSearchResult = copy(anchor = None)
    def withAnchor(__v: _root_.scala.Predef.String): UserSearchResult = copy(anchor = Option(__v))
    def clearUnreads = copy(unreads = _root_.scala.collection.Seq.empty)
    def addUnreads(__vs: _root_.scala.Int*): UserSearchResult = addAllUnreads(__vs)
    def addAllUnreads(__vs: TraversableOnce[_root_.scala.Int]): UserSearchResult = copy(unreads = unreads ++ __vs)
    def withUnreads(__v: _root_.scala.collection.Seq[_root_.scala.Int]): UserSearchResult = copy(unreads = __v)
    def clearUnreadCounts = copy(unreadCounts = scala.collection.immutable.Map.empty)
    def addUnreadCounts(__vs: (_root_.scala.Predef.String, _root_.scala.Int)*): UserSearchResult = addAllUnreadCounts(__vs)
    def addAllUnreadCounts(__vs: TraversableOnce[(_root_.scala.Predef.String, _root_.scala.Int)]): UserSearchResult = copy(unreadCounts = unreadCounts ++ __vs)
    def withUnreadCounts(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): UserSearchResult = copy(unreadCounts = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => total.orNull
        case 4 => users
        case 5 => anchor.orNull
        case 6 => unreads
        case 7 => unreadCounts.map(user.UserSearchResult._typemapper_unreadCounts.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => total.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(users.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => anchor.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(unreads.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(unreadCounts.map(user.UserSearchResult._typemapper_unreadCounts.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.UserSearchResult
}

object UserSearchResult extends scalapb.GeneratedMessageCompanion[user.UserSearchResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.UserSearchResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.UserSearchResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.UserSearchResult(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[user.User]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Int]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[user.UserSearchResult.UnreadCountsEntry]].map(user.UserSearchResult._typemapper_unreadCounts.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.UserSearchResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.UserSearchResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[user.User]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[user.UserSearchResult.UnreadCountsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(user.UserSearchResult._typemapper_unreadCounts.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(27)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(27)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 4 => __out = user.User
      case 7 => __out = user.UserSearchResult.UnreadCountsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.user.UserSearchResult.UnreadCountsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.UserSearchResult(
  )
  @SerialVersionUID(0L)
  final case class UnreadCountsEntry(
      key: scala.Option[_root_.scala.Predef.String] = None,
      value: scala.Option[_root_.scala.Int] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[UnreadCountsEntry] with scalapb.lenses.Updatable[UnreadCountsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key.get) }
        if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, value.get) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        key.foreach { __v =>
          _output__.writeString(1, __v)
        };
        value.foreach { __v =>
          _output__.writeInt32(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.UserSearchResult.UnreadCountsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = Option(_input__.readString())
            case 16 =>
              __value = Option(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        user.UserSearchResult.UnreadCountsEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: _root_.scala.Predef.String = key.getOrElse("")
      def clearKey: UnreadCountsEntry = copy(key = None)
      def withKey(__v: _root_.scala.Predef.String): UnreadCountsEntry = copy(key = Option(__v))
      def getValue: _root_.scala.Int = value.getOrElse(0)
      def clearValue: UnreadCountsEntry = copy(value = None)
      def withValue(__v: _root_.scala.Int): UnreadCountsEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = user.UserSearchResult.UnreadCountsEntry
  }
  
  object UnreadCountsEntry extends scalapb.GeneratedMessageCompanion[user.UserSearchResult.UnreadCountsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.UserSearchResult.UnreadCountsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.UserSearchResult.UnreadCountsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      user.UserSearchResult.UnreadCountsEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[user.UserSearchResult.UnreadCountsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        user.UserSearchResult.UnreadCountsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = user.UserSearchResult.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = user.UserSearchResult.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = user.UserSearchResult.UnreadCountsEntry(
    )
    implicit class UnreadCountsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.UserSearchResult.UnreadCountsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.UserSearchResult.UnreadCountsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = Option(f_)))
      def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[user.UserSearchResult.UnreadCountsEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[user.UserSearchResult.UnreadCountsEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.getKey, __m.getValue))(__p => user.UserSearchResult.UnreadCountsEntry(Some(__p._1), Some(__p._2)))
  }
  
  implicit class UserSearchResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.UserSearchResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.UserSearchResult](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def total: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getTotal)((c_, f_) => c_.copy(total = Option(f_)))
    def optionalTotal: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def users: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.User]] = field(_.users)((c_, f_) => c_.copy(users = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnchor)((c_, f_) => c_.copy(anchor = Option(f_)))
    def optionalAnchor: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
    def unreads: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Int]] = field(_.unreads)((c_, f_) => c_.copy(unreads = f_))
    def unreadCounts: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.unreadCounts)((c_, f_) => c_.copy(unreadCounts = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TOTAL_FIELD_NUMBER = 3
  final val USERS_FIELD_NUMBER = 4
  final val ANCHOR_FIELD_NUMBER = 5
  final val UNREADS_FIELD_NUMBER = 6
  final val UNREAD_COUNTS_FIELD_NUMBER = 7
  @transient
  private val _typemapper_unreadCounts: _root_.scalapb.TypeMapper[user.UserSearchResult.UnreadCountsEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[user.UserSearchResult.UnreadCountsEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
}
