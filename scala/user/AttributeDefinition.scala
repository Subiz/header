// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class AttributeDefinition(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    description: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    listItems: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    key: scala.Option[_root_.scala.Predef.String] = None,
    kind: scala.Option[_root_.scala.Predef.String] = None,
    updated: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AttributeDefinition] with scalapb.lenses.Updatable[AttributeDefinition] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, description.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, `type`.get) }
      listItems.foreach(listItems => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, listItems))
      if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, key.get) }
      if (kind.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, kind.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, updated.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      name.foreach { __v =>
        _output__.writeString(3, __v)
      };
      description.foreach { __v =>
        _output__.writeString(4, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(5, __v)
      };
      listItems.foreach { __v =>
        _output__.writeString(6, __v)
      };
      key.foreach { __v =>
        _output__.writeString(7, __v)
      };
      kind.foreach { __v =>
        _output__.writeString(8, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.AttributeDefinition = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __name = this.name
      var __description = this.description
      var __type = this.`type`
      val __listItems = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.listItems)
      var __key = this.key
      var __kind = this.kind
      var __updated = this.updated
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __name = Option(_input__.readString())
          case 34 =>
            __description = Option(_input__.readString())
          case 42 =>
            __type = Option(_input__.readString())
          case 50 =>
            __listItems += _input__.readString()
          case 58 =>
            __key = Option(_input__.readString())
          case 66 =>
            __kind = Option(_input__.readString())
          case 72 =>
            __updated = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      user.AttributeDefinition(
          ctx = __ctx,
          accountId = __accountId,
          name = __name,
          description = __description,
          `type` = __type,
          listItems = __listItems.result(),
          key = __key,
          kind = __kind,
          updated = __updated
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: AttributeDefinition = copy(ctx = None)
    def withCtx(__v: common.Context): AttributeDefinition = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: AttributeDefinition = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): AttributeDefinition = copy(accountId = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: AttributeDefinition = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): AttributeDefinition = copy(name = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: AttributeDefinition = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): AttributeDefinition = copy(description = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: AttributeDefinition = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): AttributeDefinition = copy(`type` = Option(__v))
    def clearListItems = copy(listItems = _root_.scala.collection.Seq.empty)
    def addListItems(__vs: _root_.scala.Predef.String*): AttributeDefinition = addAllListItems(__vs)
    def addAllListItems(__vs: TraversableOnce[_root_.scala.Predef.String]): AttributeDefinition = copy(listItems = listItems ++ __vs)
    def withListItems(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): AttributeDefinition = copy(listItems = __v)
    def getKey: _root_.scala.Predef.String = key.getOrElse("")
    def clearKey: AttributeDefinition = copy(key = None)
    def withKey(__v: _root_.scala.Predef.String): AttributeDefinition = copy(key = Option(__v))
    def getKind: _root_.scala.Predef.String = kind.getOrElse("")
    def clearKind: AttributeDefinition = copy(kind = None)
    def withKind(__v: _root_.scala.Predef.String): AttributeDefinition = copy(kind = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: AttributeDefinition = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): AttributeDefinition = copy(updated = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => name.orNull
        case 4 => description.orNull
        case 5 => `type`.orNull
        case 6 => listItems
        case 7 => key.orNull
        case 8 => kind.orNull
        case 9 => updated.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(listItems.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 7 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => kind.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.AttributeDefinition
}

object AttributeDefinition extends scalapb.GeneratedMessageCompanion[user.AttributeDefinition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.AttributeDefinition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.AttributeDefinition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.AttributeDefinition(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.AttributeDefinition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.AttributeDefinition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.AttributeDefinition(
  )
  implicit class AttributeDefinitionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.AttributeDefinition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.AttributeDefinition](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def listItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.listItems)((c_, f_) => c_.copy(listItems = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = Option(f_)))
    def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def kind: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKind)((c_, f_) => c_.copy(kind = Option(f_)))
    def optionalKind: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val DESCRIPTION_FIELD_NUMBER = 4
  final val TYPE_FIELD_NUMBER = 5
  final val LIST_ITEMS_FIELD_NUMBER = 6
  final val KEY_FIELD_NUMBER = 7
  final val KIND_FIELD_NUMBER = 8
  final val UPDATED_FIELD_NUMBER = 9
}
