// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class UnreadTopic(
    ctx: scala.Option[common.Context] = None,
    topic: scala.Option[_root_.scala.Predef.String] = None,
    agentId: scala.Option[_root_.scala.Predef.String] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    updated: scala.Option[_root_.scala.Long] = None,
    unread: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[UnreadTopic] with scalapb.lenses.Updatable[UnreadTopic] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (topic.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, topic.get) }
      if (agentId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, agentId.get) }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, userId.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, `type`.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, updated.get) }
      if (unread.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, unread.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      topic.foreach { __v =>
        _output__.writeString(3, __v)
      };
      agentId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(5, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(6, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      unread.foreach { __v =>
        _output__.writeInt32(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.UnreadTopic = {
      var __ctx = this.ctx
      var __topic = this.topic
      var __agentId = this.agentId
      var __userId = this.userId
      var __type = this.`type`
      var __updated = this.updated
      var __unread = this.unread
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __topic = Option(_input__.readString())
          case 34 =>
            __agentId = Option(_input__.readString())
          case 42 =>
            __userId = Option(_input__.readString())
          case 50 =>
            __type = Option(_input__.readString())
          case 64 =>
            __updated = Option(_input__.readInt64())
          case 72 =>
            __unread = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      user.UnreadTopic(
          ctx = __ctx,
          topic = __topic,
          agentId = __agentId,
          userId = __userId,
          `type` = __type,
          updated = __updated,
          unread = __unread
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: UnreadTopic = copy(ctx = None)
    def withCtx(__v: common.Context): UnreadTopic = copy(ctx = Option(__v))
    def getTopic: _root_.scala.Predef.String = topic.getOrElse("")
    def clearTopic: UnreadTopic = copy(topic = None)
    def withTopic(__v: _root_.scala.Predef.String): UnreadTopic = copy(topic = Option(__v))
    def getAgentId: _root_.scala.Predef.String = agentId.getOrElse("")
    def clearAgentId: UnreadTopic = copy(agentId = None)
    def withAgentId(__v: _root_.scala.Predef.String): UnreadTopic = copy(agentId = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: UnreadTopic = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): UnreadTopic = copy(userId = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: UnreadTopic = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): UnreadTopic = copy(`type` = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: UnreadTopic = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): UnreadTopic = copy(updated = Option(__v))
    def getUnread: _root_.scala.Int = unread.getOrElse(0)
    def clearUnread: UnreadTopic = copy(unread = None)
    def withUnread(__v: _root_.scala.Int): UnreadTopic = copy(unread = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => topic.orNull
        case 4 => agentId.orNull
        case 5 => userId.orNull
        case 6 => `type`.orNull
        case 8 => updated.orNull
        case 9 => unread.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => topic.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => agentId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => unread.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.UnreadTopic
}

object UnreadTopic extends scalapb.GeneratedMessageCompanion[user.UnreadTopic] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.UnreadTopic] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.UnreadTopic = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.UnreadTopic(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.UnreadTopic] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.UnreadTopic(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.UnreadTopic(
  )
  implicit class UnreadTopicLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.UnreadTopic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.UnreadTopic](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTopic)((c_, f_) => c_.copy(topic = Option(f_)))
    def optionalTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def agentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAgentId)((c_, f_) => c_.copy(agentId = Option(f_)))
    def optionalAgentId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
    def unread: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getUnread)((c_, f_) => c_.copy(unread = Option(f_)))
    def optionalUnread: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.unread)((c_, f_) => c_.copy(unread = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TOPIC_FIELD_NUMBER = 3
  final val AGENT_ID_FIELD_NUMBER = 4
  final val USER_ID_FIELD_NUMBER = 5
  final val TYPE_FIELD_NUMBER = 6
  final val UPDATED_FIELD_NUMBER = 8
  final val UNREAD_FIELD_NUMBER = 9
}
