// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

/** @param devices
  *  	repeated string alias = 12;
  * @param modified
  *   optional int32 modified_hour = 35;
  */
@SerialVersionUID(0L)
final case class User(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    fullname: scala.Option[_root_.scala.Predef.String] = None,
    phones: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    emails: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    traces: _root_.scala.collection.Seq[user.Trace] = _root_.scala.collection.Seq.empty,
    devices: _root_.scala.collection.Seq[user.Device] = _root_.scala.collection.Seq.empty,
    isBan: scala.Option[_root_.scala.Boolean] = None,
    avatarUrl: scala.Option[_root_.scala.Predef.String] = None,
    attributes: _root_.scala.collection.Seq[user.AttributeData] = _root_.scala.collection.Seq.empty,
    segments: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    labels: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    unsubscribed: scala.Option[_root_.scala.Boolean] = None,
    markedSpam: scala.Option[_root_.scala.Boolean] = None,
    hardBounced: scala.Option[_root_.scala.Boolean] = None,
    totalSessions: scala.Option[_root_.scala.Int] = None,
    subizId: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Predef.String] = None,
    countryCode: scala.Option[_root_.scala.Predef.String] = None,
    city: scala.Option[_root_.scala.Predef.String] = None,
    language: scala.Option[_root_.scala.Predef.String] = None,
    aliases: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    seen: scala.Option[_root_.scala.Long] = None,
    fields: _root_.scala.collection.Seq[user.Field] = _root_.scala.collection.Seq.empty,
    par: scala.Option[_root_.scala.Int] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    modifiedWeek: scala.Option[_root_.scala.Int] = None,
    activated: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[User] with scalapb.lenses.Updatable[User] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (fullname.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, fullname.get) }
      phones.foreach(phones => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, phones))
      emails.foreach(emails => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, emails))
      traces.foreach(traces => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(traces.serializedSize) + traces.serializedSize)
      devices.foreach(devices => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(devices.serializedSize) + devices.serializedSize)
      if (isBan.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(14, isBan.get) }
      if (avatarUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, avatarUrl.get) }
      attributes.foreach(attributes => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attributes.serializedSize) + attributes.serializedSize)
      segments.foreach(segments => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, segments))
      labels.foreach(labels => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(20, labels))
      if (unsubscribed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(21, unsubscribed.get) }
      if (markedSpam.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(22, markedSpam.get) }
      if (hardBounced.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(23, hardBounced.get) }
      if (totalSessions.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(24, totalSessions.get) }
      if (subizId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(25, subizId.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(26, timezone.get) }
      if (countryCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(27, countryCode.get) }
      if (city.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(32, city.get) }
      if (language.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(28, language.get) }
      aliases.foreach(aliases => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(30, aliases))
      if (seen.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(31, seen.get) }
      fields.foreach(fields => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      if (par.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(34, par.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(36, modified.get) }
      if (modifiedWeek.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(37, modifiedWeek.get) }
      if (activated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(38, activated.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      fullname.foreach { __v =>
        _output__.writeString(5, __v)
      };
      phones.foreach { __v =>
        _output__.writeString(7, __v)
      };
      emails.foreach { __v =>
        _output__.writeString(10, __v)
      };
      traces.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      devices.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      isBan.foreach { __v =>
        _output__.writeBool(14, __v)
      };
      avatarUrl.foreach { __v =>
        _output__.writeString(15, __v)
      };
      attributes.foreach { __v =>
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      segments.foreach { __v =>
        _output__.writeString(19, __v)
      };
      labels.foreach { __v =>
        _output__.writeString(20, __v)
      };
      unsubscribed.foreach { __v =>
        _output__.writeBool(21, __v)
      };
      markedSpam.foreach { __v =>
        _output__.writeBool(22, __v)
      };
      hardBounced.foreach { __v =>
        _output__.writeBool(23, __v)
      };
      totalSessions.foreach { __v =>
        _output__.writeInt32(24, __v)
      };
      subizId.foreach { __v =>
        _output__.writeString(25, __v)
      };
      timezone.foreach { __v =>
        _output__.writeString(26, __v)
      };
      countryCode.foreach { __v =>
        _output__.writeString(27, __v)
      };
      language.foreach { __v =>
        _output__.writeString(28, __v)
      };
      aliases.foreach { __v =>
        _output__.writeString(30, __v)
      };
      seen.foreach { __v =>
        _output__.writeInt64(31, __v)
      };
      city.foreach { __v =>
        _output__.writeString(32, __v)
      };
      fields.foreach { __v =>
        _output__.writeTag(33, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      par.foreach { __v =>
        _output__.writeInt32(34, __v)
      };
      modified.foreach { __v =>
        _output__.writeInt64(36, __v)
      };
      modifiedWeek.foreach { __v =>
        _output__.writeInt32(37, __v)
      };
      activated.foreach { __v =>
        _output__.writeInt64(38, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.User = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __fullname = this.fullname
      val __phones = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.phones)
      val __emails = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.emails)
      val __traces = (_root_.scala.collection.immutable.Vector.newBuilder[user.Trace] ++= this.traces)
      val __devices = (_root_.scala.collection.immutable.Vector.newBuilder[user.Device] ++= this.devices)
      var __isBan = this.isBan
      var __avatarUrl = this.avatarUrl
      val __attributes = (_root_.scala.collection.immutable.Vector.newBuilder[user.AttributeData] ++= this.attributes)
      val __segments = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.segments)
      val __labels = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.labels)
      var __unsubscribed = this.unsubscribed
      var __markedSpam = this.markedSpam
      var __hardBounced = this.hardBounced
      var __totalSessions = this.totalSessions
      var __subizId = this.subizId
      var __timezone = this.timezone
      var __countryCode = this.countryCode
      var __city = this.city
      var __language = this.language
      val __aliases = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.aliases)
      var __seen = this.seen
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[user.Field] ++= this.fields)
      var __par = this.par
      var __modified = this.modified
      var __modifiedWeek = this.modifiedWeek
      var __activated = this.activated
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __fullname = Option(_input__.readString())
          case 58 =>
            __phones += _input__.readString()
          case 82 =>
            __emails += _input__.readString()
          case 90 =>
            __traces += _root_.scalapb.LiteParser.readMessage(_input__, user.Trace.defaultInstance)
          case 106 =>
            __devices += _root_.scalapb.LiteParser.readMessage(_input__, user.Device.defaultInstance)
          case 112 =>
            __isBan = Option(_input__.readBool())
          case 122 =>
            __avatarUrl = Option(_input__.readString())
          case 146 =>
            __attributes += _root_.scalapb.LiteParser.readMessage(_input__, user.AttributeData.defaultInstance)
          case 154 =>
            __segments += _input__.readString()
          case 162 =>
            __labels += _input__.readString()
          case 168 =>
            __unsubscribed = Option(_input__.readBool())
          case 176 =>
            __markedSpam = Option(_input__.readBool())
          case 184 =>
            __hardBounced = Option(_input__.readBool())
          case 192 =>
            __totalSessions = Option(_input__.readInt32())
          case 202 =>
            __subizId = Option(_input__.readString())
          case 210 =>
            __timezone = Option(_input__.readString())
          case 218 =>
            __countryCode = Option(_input__.readString())
          case 258 =>
            __city = Option(_input__.readString())
          case 226 =>
            __language = Option(_input__.readString())
          case 242 =>
            __aliases += _input__.readString()
          case 248 =>
            __seen = Option(_input__.readInt64())
          case 266 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, user.Field.defaultInstance)
          case 272 =>
            __par = Option(_input__.readInt32())
          case 288 =>
            __modified = Option(_input__.readInt64())
          case 296 =>
            __modifiedWeek = Option(_input__.readInt32())
          case 304 =>
            __activated = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      user.User(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          fullname = __fullname,
          phones = __phones.result(),
          emails = __emails.result(),
          traces = __traces.result(),
          devices = __devices.result(),
          isBan = __isBan,
          avatarUrl = __avatarUrl,
          attributes = __attributes.result(),
          segments = __segments.result(),
          labels = __labels.result(),
          unsubscribed = __unsubscribed,
          markedSpam = __markedSpam,
          hardBounced = __hardBounced,
          totalSessions = __totalSessions,
          subizId = __subizId,
          timezone = __timezone,
          countryCode = __countryCode,
          city = __city,
          language = __language,
          aliases = __aliases.result(),
          seen = __seen,
          fields = __fields.result(),
          par = __par,
          modified = __modified,
          modifiedWeek = __modifiedWeek,
          activated = __activated
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: User = copy(ctx = None)
    def withCtx(__v: common.Context): User = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: User = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): User = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: User = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): User = copy(accountId = Option(__v))
    def getFullname: _root_.scala.Predef.String = fullname.getOrElse("")
    def clearFullname: User = copy(fullname = None)
    def withFullname(__v: _root_.scala.Predef.String): User = copy(fullname = Option(__v))
    def clearPhones = copy(phones = _root_.scala.collection.Seq.empty)
    def addPhones(__vs: _root_.scala.Predef.String*): User = addAllPhones(__vs)
    def addAllPhones(__vs: TraversableOnce[_root_.scala.Predef.String]): User = copy(phones = phones ++ __vs)
    def withPhones(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): User = copy(phones = __v)
    def clearEmails = copy(emails = _root_.scala.collection.Seq.empty)
    def addEmails(__vs: _root_.scala.Predef.String*): User = addAllEmails(__vs)
    def addAllEmails(__vs: TraversableOnce[_root_.scala.Predef.String]): User = copy(emails = emails ++ __vs)
    def withEmails(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): User = copy(emails = __v)
    def clearTraces = copy(traces = _root_.scala.collection.Seq.empty)
    def addTraces(__vs: user.Trace*): User = addAllTraces(__vs)
    def addAllTraces(__vs: TraversableOnce[user.Trace]): User = copy(traces = traces ++ __vs)
    def withTraces(__v: _root_.scala.collection.Seq[user.Trace]): User = copy(traces = __v)
    def clearDevices = copy(devices = _root_.scala.collection.Seq.empty)
    def addDevices(__vs: user.Device*): User = addAllDevices(__vs)
    def addAllDevices(__vs: TraversableOnce[user.Device]): User = copy(devices = devices ++ __vs)
    def withDevices(__v: _root_.scala.collection.Seq[user.Device]): User = copy(devices = __v)
    def getIsBan: _root_.scala.Boolean = isBan.getOrElse(false)
    def clearIsBan: User = copy(isBan = None)
    def withIsBan(__v: _root_.scala.Boolean): User = copy(isBan = Option(__v))
    def getAvatarUrl: _root_.scala.Predef.String = avatarUrl.getOrElse("")
    def clearAvatarUrl: User = copy(avatarUrl = None)
    def withAvatarUrl(__v: _root_.scala.Predef.String): User = copy(avatarUrl = Option(__v))
    def clearAttributes = copy(attributes = _root_.scala.collection.Seq.empty)
    def addAttributes(__vs: user.AttributeData*): User = addAllAttributes(__vs)
    def addAllAttributes(__vs: TraversableOnce[user.AttributeData]): User = copy(attributes = attributes ++ __vs)
    def withAttributes(__v: _root_.scala.collection.Seq[user.AttributeData]): User = copy(attributes = __v)
    def clearSegments = copy(segments = _root_.scala.collection.Seq.empty)
    def addSegments(__vs: _root_.scala.Predef.String*): User = addAllSegments(__vs)
    def addAllSegments(__vs: TraversableOnce[_root_.scala.Predef.String]): User = copy(segments = segments ++ __vs)
    def withSegments(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): User = copy(segments = __v)
    def clearLabels = copy(labels = _root_.scala.collection.Seq.empty)
    def addLabels(__vs: _root_.scala.Predef.String*): User = addAllLabels(__vs)
    def addAllLabels(__vs: TraversableOnce[_root_.scala.Predef.String]): User = copy(labels = labels ++ __vs)
    def withLabels(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): User = copy(labels = __v)
    def getUnsubscribed: _root_.scala.Boolean = unsubscribed.getOrElse(false)
    def clearUnsubscribed: User = copy(unsubscribed = None)
    def withUnsubscribed(__v: _root_.scala.Boolean): User = copy(unsubscribed = Option(__v))
    def getMarkedSpam: _root_.scala.Boolean = markedSpam.getOrElse(false)
    def clearMarkedSpam: User = copy(markedSpam = None)
    def withMarkedSpam(__v: _root_.scala.Boolean): User = copy(markedSpam = Option(__v))
    def getHardBounced: _root_.scala.Boolean = hardBounced.getOrElse(false)
    def clearHardBounced: User = copy(hardBounced = None)
    def withHardBounced(__v: _root_.scala.Boolean): User = copy(hardBounced = Option(__v))
    def getTotalSessions: _root_.scala.Int = totalSessions.getOrElse(0)
    def clearTotalSessions: User = copy(totalSessions = None)
    def withTotalSessions(__v: _root_.scala.Int): User = copy(totalSessions = Option(__v))
    def getSubizId: _root_.scala.Predef.String = subizId.getOrElse("")
    def clearSubizId: User = copy(subizId = None)
    def withSubizId(__v: _root_.scala.Predef.String): User = copy(subizId = Option(__v))
    def getTimezone: _root_.scala.Predef.String = timezone.getOrElse("")
    def clearTimezone: User = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Predef.String): User = copy(timezone = Option(__v))
    def getCountryCode: _root_.scala.Predef.String = countryCode.getOrElse("")
    def clearCountryCode: User = copy(countryCode = None)
    def withCountryCode(__v: _root_.scala.Predef.String): User = copy(countryCode = Option(__v))
    def getCity: _root_.scala.Predef.String = city.getOrElse("")
    def clearCity: User = copy(city = None)
    def withCity(__v: _root_.scala.Predef.String): User = copy(city = Option(__v))
    def getLanguage: _root_.scala.Predef.String = language.getOrElse("")
    def clearLanguage: User = copy(language = None)
    def withLanguage(__v: _root_.scala.Predef.String): User = copy(language = Option(__v))
    def clearAliases = copy(aliases = _root_.scala.collection.Seq.empty)
    def addAliases(__vs: _root_.scala.Predef.String*): User = addAllAliases(__vs)
    def addAllAliases(__vs: TraversableOnce[_root_.scala.Predef.String]): User = copy(aliases = aliases ++ __vs)
    def withAliases(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): User = copy(aliases = __v)
    def getSeen: _root_.scala.Long = seen.getOrElse(0L)
    def clearSeen: User = copy(seen = None)
    def withSeen(__v: _root_.scala.Long): User = copy(seen = Option(__v))
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: user.Field*): User = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[user.Field]): User = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[user.Field]): User = copy(fields = __v)
    def getPar: _root_.scala.Int = par.getOrElse(0)
    def clearPar: User = copy(par = None)
    def withPar(__v: _root_.scala.Int): User = copy(par = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: User = copy(modified = None)
    def withModified(__v: _root_.scala.Long): User = copy(modified = Option(__v))
    def getModifiedWeek: _root_.scala.Int = modifiedWeek.getOrElse(0)
    def clearModifiedWeek: User = copy(modifiedWeek = None)
    def withModifiedWeek(__v: _root_.scala.Int): User = copy(modifiedWeek = Option(__v))
    def getActivated: _root_.scala.Long = activated.getOrElse(0L)
    def clearActivated: User = copy(activated = None)
    def withActivated(__v: _root_.scala.Long): User = copy(activated = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => id.orNull
        case 4 => accountId.orNull
        case 5 => fullname.orNull
        case 7 => phones
        case 10 => emails
        case 11 => traces
        case 13 => devices
        case 14 => isBan.orNull
        case 15 => avatarUrl.orNull
        case 18 => attributes
        case 19 => segments
        case 20 => labels
        case 21 => unsubscribed.orNull
        case 22 => markedSpam.orNull
        case 23 => hardBounced.orNull
        case 24 => totalSessions.orNull
        case 25 => subizId.orNull
        case 26 => timezone.orNull
        case 27 => countryCode.orNull
        case 32 => city.orNull
        case 28 => language.orNull
        case 30 => aliases
        case 31 => seen.orNull
        case 33 => fields
        case 34 => par.orNull
        case 36 => modified.orNull
        case 37 => modifiedWeek.orNull
        case 38 => activated.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => fullname.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(phones.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PRepeated(emails.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 11 => _root_.scalapb.descriptors.PRepeated(traces.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 13 => _root_.scalapb.descriptors.PRepeated(devices.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 14 => isBan.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => avatarUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => _root_.scalapb.descriptors.PRepeated(attributes.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 19 => _root_.scalapb.descriptors.PRepeated(segments.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 20 => _root_.scalapb.descriptors.PRepeated(labels.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 21 => unsubscribed.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => markedSpam.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => hardBounced.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => totalSessions.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => subizId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 26 => timezone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => countryCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 32 => city.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 28 => language.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 30 => _root_.scalapb.descriptors.PRepeated(aliases.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 31 => seen.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 33 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 34 => par.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 36 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 37 => modifiedWeek.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 38 => activated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.User
}

object User extends scalapb.GeneratedMessageCompanion[user.User] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.User] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.User = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.User(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[user.Trace]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[user.Device]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(10), Nil).asInstanceOf[_root_.scala.collection.Seq[user.AttributeData]],
      __fieldsMap.getOrElse(__fields.get(11), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(12), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(22), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.getOrElse(__fields.get(24), Nil).asInstanceOf[_root_.scala.collection.Seq[user.Field]],
      __fieldsMap.get(__fields.get(25)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(26)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(27)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(28)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.User] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.User(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[user.Trace]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.collection.Seq[user.Device]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.collection.Seq[user.AttributeData]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).map(_.as[_root_.scala.collection.Seq[user.Field]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(38).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 11 => __out = user.Trace
      case 13 => __out = user.Device
      case 18 => __out = user.AttributeData
      case 33 => __out = user.Field
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.User(
  )
  implicit class UserLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.User]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.User](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def fullname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFullname)((c_, f_) => c_.copy(fullname = Option(f_)))
    def optionalFullname: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fullname)((c_, f_) => c_.copy(fullname = f_))
    def phones: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.phones)((c_, f_) => c_.copy(phones = f_))
    def emails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.emails)((c_, f_) => c_.copy(emails = f_))
    def traces: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.Trace]] = field(_.traces)((c_, f_) => c_.copy(traces = f_))
    def devices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.Device]] = field(_.devices)((c_, f_) => c_.copy(devices = f_))
    def isBan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsBan)((c_, f_) => c_.copy(isBan = Option(f_)))
    def optionalIsBan: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.isBan)((c_, f_) => c_.copy(isBan = f_))
    def avatarUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvatarUrl)((c_, f_) => c_.copy(avatarUrl = Option(f_)))
    def optionalAvatarUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.avatarUrl)((c_, f_) => c_.copy(avatarUrl = f_))
    def attributes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.AttributeData]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
    def segments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.segments)((c_, f_) => c_.copy(segments = f_))
    def labels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    def unsubscribed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getUnsubscribed)((c_, f_) => c_.copy(unsubscribed = Option(f_)))
    def optionalUnsubscribed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.unsubscribed)((c_, f_) => c_.copy(unsubscribed = f_))
    def markedSpam: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getMarkedSpam)((c_, f_) => c_.copy(markedSpam = Option(f_)))
    def optionalMarkedSpam: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.markedSpam)((c_, f_) => c_.copy(markedSpam = f_))
    def hardBounced: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getHardBounced)((c_, f_) => c_.copy(hardBounced = Option(f_)))
    def optionalHardBounced: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.hardBounced)((c_, f_) => c_.copy(hardBounced = f_))
    def totalSessions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getTotalSessions)((c_, f_) => c_.copy(totalSessions = Option(f_)))
    def optionalTotalSessions: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.totalSessions)((c_, f_) => c_.copy(totalSessions = f_))
    def subizId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubizId)((c_, f_) => c_.copy(subizId = Option(f_)))
    def optionalSubizId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.subizId)((c_, f_) => c_.copy(subizId = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryCode)((c_, f_) => c_.copy(countryCode = Option(f_)))
    def optionalCountryCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
    def city: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCity)((c_, f_) => c_.copy(city = Option(f_)))
    def optionalCity: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLanguage)((c_, f_) => c_.copy(language = Option(f_)))
    def optionalLanguage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.language)((c_, f_) => c_.copy(language = f_))
    def aliases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.aliases)((c_, f_) => c_.copy(aliases = f_))
    def seen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getSeen)((c_, f_) => c_.copy(seen = Option(f_)))
    def optionalSeen: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.seen)((c_, f_) => c_.copy(seen = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[user.Field]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def par: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPar)((c_, f_) => c_.copy(par = Option(f_)))
    def optionalPar: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.par)((c_, f_) => c_.copy(par = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def modifiedWeek: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getModifiedWeek)((c_, f_) => c_.copy(modifiedWeek = Option(f_)))
    def optionalModifiedWeek: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.modifiedWeek)((c_, f_) => c_.copy(modifiedWeek = f_))
    def activated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getActivated)((c_, f_) => c_.copy(activated = Option(f_)))
    def optionalActivated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.activated)((c_, f_) => c_.copy(activated = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val FULLNAME_FIELD_NUMBER = 5
  final val PHONES_FIELD_NUMBER = 7
  final val EMAILS_FIELD_NUMBER = 10
  final val TRACES_FIELD_NUMBER = 11
  final val DEVICES_FIELD_NUMBER = 13
  final val IS_BAN_FIELD_NUMBER = 14
  final val AVATAR_URL_FIELD_NUMBER = 15
  final val ATTRIBUTES_FIELD_NUMBER = 18
  final val SEGMENTS_FIELD_NUMBER = 19
  final val LABELS_FIELD_NUMBER = 20
  final val UNSUBSCRIBED_FIELD_NUMBER = 21
  final val MARKED_SPAM_FIELD_NUMBER = 22
  final val HARD_BOUNCED_FIELD_NUMBER = 23
  final val TOTAL_SESSIONS_FIELD_NUMBER = 24
  final val SUBIZ_ID_FIELD_NUMBER = 25
  final val TIMEZONE_FIELD_NUMBER = 26
  final val COUNTRY_CODE_FIELD_NUMBER = 27
  final val CITY_FIELD_NUMBER = 32
  final val LANGUAGE_FIELD_NUMBER = 28
  final val ALIASES_FIELD_NUMBER = 30
  final val SEEN_FIELD_NUMBER = 31
  final val FIELDS_FIELD_NUMBER = 33
  final val PAR_FIELD_NUMBER = 34
  final val MODIFIED_FIELD_NUMBER = 36
  final val MODIFIED_WEEK_FIELD_NUMBER = 37
  final val ACTIVATED_FIELD_NUMBER = 38
}
