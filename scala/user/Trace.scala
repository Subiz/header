// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

/** @param latitude
  *  optional string coutry_code = 11;
  */
@SerialVersionUID(0L)
final case class Trace(
    id: scala.Option[_root_.scala.Predef.String] = None,
    ip: scala.Option[_root_.scala.Predef.String] = None,
    locationId: scala.Option[_root_.scala.Int] = None,
    cityName: scala.Option[_root_.scala.Predef.String] = None,
    countryName: scala.Option[_root_.scala.Predef.String] = None,
    countryCode: scala.Option[_root_.scala.Predef.String] = None,
    continentCode: scala.Option[_root_.scala.Predef.String] = None,
    continentName: scala.Option[_root_.scala.Predef.String] = None,
    latitude: scala.Option[_root_.scala.Float] = None,
    longitude: scala.Option[_root_.scala.Float] = None,
    postalCode: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Predef.String] = None,
    isp: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Trace] with scalapb.lenses.Updatable[Trace] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (ip.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, ip.get) }
      if (locationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, locationId.get) }
      if (cityName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, cityName.get) }
      if (countryName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, countryName.get) }
      if (countryCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, countryCode.get) }
      if (continentCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, continentCode.get) }
      if (continentName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(18, continentName.get) }
      if (latitude.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(12, latitude.get) }
      if (longitude.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(13, longitude.get) }
      if (postalCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, postalCode.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, timezone.get) }
      if (isp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, isp.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      ip.foreach { __v =>
        _output__.writeString(4, __v)
      };
      locationId.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      cityName.foreach { __v =>
        _output__.writeString(8, __v)
      };
      countryName.foreach { __v =>
        _output__.writeString(9, __v)
      };
      continentCode.foreach { __v =>
        _output__.writeString(10, __v)
      };
      latitude.foreach { __v =>
        _output__.writeFloat(12, __v)
      };
      longitude.foreach { __v =>
        _output__.writeFloat(13, __v)
      };
      postalCode.foreach { __v =>
        _output__.writeString(14, __v)
      };
      timezone.foreach { __v =>
        _output__.writeString(16, __v)
      };
      isp.foreach { __v =>
        _output__.writeString(17, __v)
      };
      continentName.foreach { __v =>
        _output__.writeString(18, __v)
      };
      countryCode.foreach { __v =>
        _output__.writeString(19, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.Trace = {
      var __id = this.id
      var __ip = this.ip
      var __locationId = this.locationId
      var __cityName = this.cityName
      var __countryName = this.countryName
      var __countryCode = this.countryCode
      var __continentCode = this.continentCode
      var __continentName = this.continentName
      var __latitude = this.latitude
      var __longitude = this.longitude
      var __postalCode = this.postalCode
      var __timezone = this.timezone
      var __isp = this.isp
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __ip = Option(_input__.readString())
          case 40 =>
            __locationId = Option(_input__.readInt32())
          case 66 =>
            __cityName = Option(_input__.readString())
          case 74 =>
            __countryName = Option(_input__.readString())
          case 154 =>
            __countryCode = Option(_input__.readString())
          case 82 =>
            __continentCode = Option(_input__.readString())
          case 146 =>
            __continentName = Option(_input__.readString())
          case 101 =>
            __latitude = Option(_input__.readFloat())
          case 109 =>
            __longitude = Option(_input__.readFloat())
          case 114 =>
            __postalCode = Option(_input__.readString())
          case 130 =>
            __timezone = Option(_input__.readString())
          case 138 =>
            __isp = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.Trace(
          id = __id,
          ip = __ip,
          locationId = __locationId,
          cityName = __cityName,
          countryName = __countryName,
          countryCode = __countryCode,
          continentCode = __continentCode,
          continentName = __continentName,
          latitude = __latitude,
          longitude = __longitude,
          postalCode = __postalCode,
          timezone = __timezone,
          isp = __isp
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Trace = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Trace = copy(id = Option(__v))
    def getIp: _root_.scala.Predef.String = ip.getOrElse("")
    def clearIp: Trace = copy(ip = None)
    def withIp(__v: _root_.scala.Predef.String): Trace = copy(ip = Option(__v))
    def getLocationId: _root_.scala.Int = locationId.getOrElse(0)
    def clearLocationId: Trace = copy(locationId = None)
    def withLocationId(__v: _root_.scala.Int): Trace = copy(locationId = Option(__v))
    def getCityName: _root_.scala.Predef.String = cityName.getOrElse("")
    def clearCityName: Trace = copy(cityName = None)
    def withCityName(__v: _root_.scala.Predef.String): Trace = copy(cityName = Option(__v))
    def getCountryName: _root_.scala.Predef.String = countryName.getOrElse("")
    def clearCountryName: Trace = copy(countryName = None)
    def withCountryName(__v: _root_.scala.Predef.String): Trace = copy(countryName = Option(__v))
    def getCountryCode: _root_.scala.Predef.String = countryCode.getOrElse("")
    def clearCountryCode: Trace = copy(countryCode = None)
    def withCountryCode(__v: _root_.scala.Predef.String): Trace = copy(countryCode = Option(__v))
    def getContinentCode: _root_.scala.Predef.String = continentCode.getOrElse("")
    def clearContinentCode: Trace = copy(continentCode = None)
    def withContinentCode(__v: _root_.scala.Predef.String): Trace = copy(continentCode = Option(__v))
    def getContinentName: _root_.scala.Predef.String = continentName.getOrElse("")
    def clearContinentName: Trace = copy(continentName = None)
    def withContinentName(__v: _root_.scala.Predef.String): Trace = copy(continentName = Option(__v))
    def getLatitude: _root_.scala.Float = latitude.getOrElse(0.0f)
    def clearLatitude: Trace = copy(latitude = None)
    def withLatitude(__v: _root_.scala.Float): Trace = copy(latitude = Option(__v))
    def getLongitude: _root_.scala.Float = longitude.getOrElse(0.0f)
    def clearLongitude: Trace = copy(longitude = None)
    def withLongitude(__v: _root_.scala.Float): Trace = copy(longitude = Option(__v))
    def getPostalCode: _root_.scala.Predef.String = postalCode.getOrElse("")
    def clearPostalCode: Trace = copy(postalCode = None)
    def withPostalCode(__v: _root_.scala.Predef.String): Trace = copy(postalCode = Option(__v))
    def getTimezone: _root_.scala.Predef.String = timezone.getOrElse("")
    def clearTimezone: Trace = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Predef.String): Trace = copy(timezone = Option(__v))
    def getIsp: _root_.scala.Predef.String = isp.getOrElse("")
    def clearIsp: Trace = copy(isp = None)
    def withIsp(__v: _root_.scala.Predef.String): Trace = copy(isp = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 4 => ip.orNull
        case 5 => locationId.orNull
        case 8 => cityName.orNull
        case 9 => countryName.orNull
        case 19 => countryCode.orNull
        case 10 => continentCode.orNull
        case 18 => continentName.orNull
        case 12 => latitude.orNull
        case 13 => longitude.orNull
        case 14 => postalCode.orNull
        case 16 => timezone.orNull
        case 17 => isp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => ip.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => locationId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => cityName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => countryName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => countryCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => continentCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => continentName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => latitude.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => longitude.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => postalCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => timezone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => isp.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.Trace
}

object Trace extends scalapb.GeneratedMessageCompanion[user.Trace] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.Trace] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.Trace = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.Trace(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.Trace] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.Trace(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.Trace(
  )
  implicit class TraceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.Trace]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.Trace](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def ip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIp)((c_, f_) => c_.copy(ip = Option(f_)))
    def optionalIp: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.ip)((c_, f_) => c_.copy(ip = f_))
    def locationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLocationId)((c_, f_) => c_.copy(locationId = Option(f_)))
    def optionalLocationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.locationId)((c_, f_) => c_.copy(locationId = f_))
    def cityName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCityName)((c_, f_) => c_.copy(cityName = Option(f_)))
    def optionalCityName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.cityName)((c_, f_) => c_.copy(cityName = f_))
    def countryName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryName)((c_, f_) => c_.copy(countryName = Option(f_)))
    def optionalCountryName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryName)((c_, f_) => c_.copy(countryName = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCountryCode)((c_, f_) => c_.copy(countryCode = Option(f_)))
    def optionalCountryCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
    def continentCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getContinentCode)((c_, f_) => c_.copy(continentCode = Option(f_)))
    def optionalContinentCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.continentCode)((c_, f_) => c_.copy(continentCode = f_))
    def continentName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getContinentName)((c_, f_) => c_.copy(continentName = Option(f_)))
    def optionalContinentName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.continentName)((c_, f_) => c_.copy(continentName = f_))
    def latitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getLatitude)((c_, f_) => c_.copy(latitude = Option(f_)))
    def optionalLatitude: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.latitude)((c_, f_) => c_.copy(latitude = f_))
    def longitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getLongitude)((c_, f_) => c_.copy(longitude = Option(f_)))
    def optionalLongitude: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.longitude)((c_, f_) => c_.copy(longitude = f_))
    def postalCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPostalCode)((c_, f_) => c_.copy(postalCode = Option(f_)))
    def optionalPostalCode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.postalCode)((c_, f_) => c_.copy(postalCode = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def isp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIsp)((c_, f_) => c_.copy(isp = Option(f_)))
    def optionalIsp: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.isp)((c_, f_) => c_.copy(isp = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val IP_FIELD_NUMBER = 4
  final val LOCATION_ID_FIELD_NUMBER = 5
  final val CITY_NAME_FIELD_NUMBER = 8
  final val COUNTRY_NAME_FIELD_NUMBER = 9
  final val COUNTRY_CODE_FIELD_NUMBER = 19
  final val CONTINENT_CODE_FIELD_NUMBER = 10
  final val CONTINENT_NAME_FIELD_NUMBER = 18
  final val LATITUDE_FIELD_NUMBER = 12
  final val LONGITUDE_FIELD_NUMBER = 13
  final val POSTAL_CODE_FIELD_NUMBER = 14
  final val TIMEZONE_FIELD_NUMBER = 16
  final val ISP_FIELD_NUMBER = 17
}
