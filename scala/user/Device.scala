// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class Device(
    id: scala.Option[_root_.scala.Int] = None,
    useragentId: scala.Option[_root_.scala.Int] = None,
    useragent: scala.Option[_root_.scala.Predef.String] = None,
    screenResolution: scala.Option[_root_.scala.Predef.String] = None,
    languageId: scala.Option[_root_.scala.Int] = None,
    language: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Device] with scalapb.lenses.Updatable[Device] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, id.get) }
      if (useragentId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, useragentId.get) }
      if (useragent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, useragent.get) }
      if (screenResolution.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, screenResolution.get) }
      if (languageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, languageId.get) }
      if (language.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, language.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      useragentId.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      useragent.foreach { __v =>
        _output__.writeString(5, __v)
      };
      screenResolution.foreach { __v =>
        _output__.writeString(6, __v)
      };
      languageId.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      language.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.Device = {
      var __id = this.id
      var __useragentId = this.useragentId
      var __useragent = this.useragent
      var __screenResolution = this.screenResolution
      var __languageId = this.languageId
      var __language = this.language
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 24 =>
            __id = Option(_input__.readInt32())
          case 32 =>
            __useragentId = Option(_input__.readInt32())
          case 42 =>
            __useragent = Option(_input__.readString())
          case 50 =>
            __screenResolution = Option(_input__.readString())
          case 56 =>
            __languageId = Option(_input__.readInt32())
          case 66 =>
            __language = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.Device(
          id = __id,
          useragentId = __useragentId,
          useragent = __useragent,
          screenResolution = __screenResolution,
          languageId = __languageId,
          language = __language
      )
    }
    def getId: _root_.scala.Int = id.getOrElse(0)
    def clearId: Device = copy(id = None)
    def withId(__v: _root_.scala.Int): Device = copy(id = Option(__v))
    def getUseragentId: _root_.scala.Int = useragentId.getOrElse(0)
    def clearUseragentId: Device = copy(useragentId = None)
    def withUseragentId(__v: _root_.scala.Int): Device = copy(useragentId = Option(__v))
    def getUseragent: _root_.scala.Predef.String = useragent.getOrElse("")
    def clearUseragent: Device = copy(useragent = None)
    def withUseragent(__v: _root_.scala.Predef.String): Device = copy(useragent = Option(__v))
    def getScreenResolution: _root_.scala.Predef.String = screenResolution.getOrElse("")
    def clearScreenResolution: Device = copy(screenResolution = None)
    def withScreenResolution(__v: _root_.scala.Predef.String): Device = copy(screenResolution = Option(__v))
    def getLanguageId: _root_.scala.Int = languageId.getOrElse(0)
    def clearLanguageId: Device = copy(languageId = None)
    def withLanguageId(__v: _root_.scala.Int): Device = copy(languageId = Option(__v))
    def getLanguage: _root_.scala.Predef.String = language.getOrElse("")
    def clearLanguage: Device = copy(language = None)
    def withLanguage(__v: _root_.scala.Predef.String): Device = copy(language = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 4 => useragentId.orNull
        case 5 => useragent.orNull
        case 6 => screenResolution.orNull
        case 7 => languageId.orNull
        case 8 => language.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => useragentId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => useragent.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => screenResolution.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => languageId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => language.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.Device
}

object Device extends scalapb.GeneratedMessageCompanion[user.Device] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.Device] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.Device = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.Device(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.Device] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.Device(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.Device(
  )
  implicit class DeviceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.Device]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.Device](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def useragentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getUseragentId)((c_, f_) => c_.copy(useragentId = Option(f_)))
    def optionalUseragentId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.useragentId)((c_, f_) => c_.copy(useragentId = f_))
    def useragent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUseragent)((c_, f_) => c_.copy(useragent = Option(f_)))
    def optionalUseragent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.useragent)((c_, f_) => c_.copy(useragent = f_))
    def screenResolution: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getScreenResolution)((c_, f_) => c_.copy(screenResolution = Option(f_)))
    def optionalScreenResolution: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.screenResolution)((c_, f_) => c_.copy(screenResolution = f_))
    def languageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLanguageId)((c_, f_) => c_.copy(languageId = Option(f_)))
    def optionalLanguageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.languageId)((c_, f_) => c_.copy(languageId = f_))
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLanguage)((c_, f_) => c_.copy(language = Option(f_)))
    def optionalLanguage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.language)((c_, f_) => c_.copy(language = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val USERAGENT_ID_FIELD_NUMBER = 4
  final val USERAGENT_FIELD_NUMBER = 5
  final val SCREEN_RESOLUTION_FIELD_NUMBER = 6
  final val LANGUAGE_ID_FIELD_NUMBER = 7
  final val LANGUAGE_FIELD_NUMBER = 8
}
