// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class Visitor(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    user: scala.Option[_root_.user.User] = None,
    pinged: scala.Option[_root_.scala.Long] = None,
    pageUrl: scala.Option[_root_.scala.Predef.String] = None,
    pageViewed: scala.Option[_root_.scala.Long] = None,
    pageTitle: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Visitor] with scalapb.lenses.Updatable[Visitor] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
      if (pinged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, pinged.get) }
      if (pageUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, pageUrl.get) }
      if (pageViewed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, pageViewed.get) }
      if (pageTitle.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, pageTitle.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      user.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      pinged.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      pageUrl.foreach { __v =>
        _output__.writeString(6, __v)
      };
      pageViewed.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      pageTitle.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.user.Visitor = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __user = this.user
      var __pinged = this.pinged
      var __pageUrl = this.pageUrl
      var __pageViewed = this.pageViewed
      var __pageTitle = this.pageTitle
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
          case 40 =>
            __pinged = Option(_input__.readInt64())
          case 50 =>
            __pageUrl = Option(_input__.readString())
          case 56 =>
            __pageViewed = Option(_input__.readInt64())
          case 66 =>
            __pageTitle = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      _root_.user.Visitor(
          ctx = __ctx,
          accountId = __accountId,
          user = __user,
          pinged = __pinged,
          pageUrl = __pageUrl,
          pageViewed = __pageViewed,
          pageTitle = __pageTitle
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Visitor = copy(ctx = None)
    def withCtx(__v: common.Context): Visitor = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Visitor = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Visitor = copy(accountId = Option(__v))
    def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
    def clearUser: Visitor = copy(user = None)
    def withUser(__v: _root_.user.User): Visitor = copy(user = Option(__v))
    def getPinged: _root_.scala.Long = pinged.getOrElse(0L)
    def clearPinged: Visitor = copy(pinged = None)
    def withPinged(__v: _root_.scala.Long): Visitor = copy(pinged = Option(__v))
    def getPageUrl: _root_.scala.Predef.String = pageUrl.getOrElse("")
    def clearPageUrl: Visitor = copy(pageUrl = None)
    def withPageUrl(__v: _root_.scala.Predef.String): Visitor = copy(pageUrl = Option(__v))
    def getPageViewed: _root_.scala.Long = pageViewed.getOrElse(0L)
    def clearPageViewed: Visitor = copy(pageViewed = None)
    def withPageViewed(__v: _root_.scala.Long): Visitor = copy(pageViewed = Option(__v))
    def getPageTitle: _root_.scala.Predef.String = pageTitle.getOrElse("")
    def clearPageTitle: Visitor = copy(pageTitle = None)
    def withPageTitle(__v: _root_.scala.Predef.String): Visitor = copy(pageTitle = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => accountId.orNull
        case 4 => user.orNull
        case 5 => pinged.orNull
        case 6 => pageUrl.orNull
        case 7 => pageViewed.orNull
        case 8 => pageTitle.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => pinged.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => pageUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => pageViewed.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => pageTitle.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.user.Visitor
}

object Visitor extends scalapb.GeneratedMessageCompanion[user.Visitor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.Visitor] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.Visitor = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.Visitor(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.user.User]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.Visitor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.Visitor(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.user.User]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(37)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(37)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 4 => __out = user.User
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.Visitor(
  )
  implicit class VisitorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.Visitor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.Visitor](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def pinged: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getPinged)((c_, f_) => c_.copy(pinged = Option(f_)))
    def optionalPinged: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.pinged)((c_, f_) => c_.copy(pinged = f_))
    def pageUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPageUrl)((c_, f_) => c_.copy(pageUrl = Option(f_)))
    def optionalPageUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.pageUrl)((c_, f_) => c_.copy(pageUrl = f_))
    def pageViewed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getPageViewed)((c_, f_) => c_.copy(pageViewed = Option(f_)))
    def optionalPageViewed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.pageViewed)((c_, f_) => c_.copy(pageViewed = f_))
    def pageTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPageTitle)((c_, f_) => c_.copy(pageTitle = Option(f_)))
    def optionalPageTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.pageTitle)((c_, f_) => c_.copy(pageTitle = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val USER_FIELD_NUMBER = 4
  final val PINGED_FIELD_NUMBER = 5
  final val PAGE_URL_FIELD_NUMBER = 6
  final val PAGE_VIEWED_FIELD_NUMBER = 7
  final val PAGE_TITLE_FIELD_NUMBER = 8
}
