// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

@SerialVersionUID(0L)
final case class LastView(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    url: scala.Option[_root_.scala.Predef.String] = None,
    ua: scala.Option[_root_.scala.Predef.String] = None,
    ip: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    eventId: scala.Option[_root_.scala.Predef.String] = None,
    title: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[LastView] with scalapb.lenses.Updatable[LastView] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, userId.get) }
      if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, url.get) }
      if (ua.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, ua.get) }
      if (ip.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, ip.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, created.get) }
      if (eventId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, eventId.get) }
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, title.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      url.foreach { __v =>
        _output__.writeString(5, __v)
      };
      ua.foreach { __v =>
        _output__.writeString(6, __v)
      };
      ip.foreach { __v =>
        _output__.writeString(7, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(8, __v)
      };
      eventId.foreach { __v =>
        _output__.writeString(9, __v)
      };
      title.foreach { __v =>
        _output__.writeString(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.LastView = {
      var __accountId = this.accountId
      var __userId = this.userId
      var __url = this.url
      var __ua = this.ua
      var __ip = this.ip
      var __created = this.created
      var __eventId = this.eventId
      var __title = this.title
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __userId = Option(_input__.readString())
          case 42 =>
            __url = Option(_input__.readString())
          case 50 =>
            __ua = Option(_input__.readString())
          case 58 =>
            __ip = Option(_input__.readString())
          case 64 =>
            __created = Option(_input__.readInt64())
          case 74 =>
            __eventId = Option(_input__.readString())
          case 82 =>
            __title = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.LastView(
          accountId = __accountId,
          userId = __userId,
          url = __url,
          ua = __ua,
          ip = __ip,
          created = __created,
          eventId = __eventId,
          title = __title
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: LastView = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): LastView = copy(accountId = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: LastView = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): LastView = copy(userId = Option(__v))
    def getUrl: _root_.scala.Predef.String = url.getOrElse("")
    def clearUrl: LastView = copy(url = None)
    def withUrl(__v: _root_.scala.Predef.String): LastView = copy(url = Option(__v))
    def getUa: _root_.scala.Predef.String = ua.getOrElse("")
    def clearUa: LastView = copy(ua = None)
    def withUa(__v: _root_.scala.Predef.String): LastView = copy(ua = Option(__v))
    def getIp: _root_.scala.Predef.String = ip.getOrElse("")
    def clearIp: LastView = copy(ip = None)
    def withIp(__v: _root_.scala.Predef.String): LastView = copy(ip = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: LastView = copy(created = None)
    def withCreated(__v: _root_.scala.Long): LastView = copy(created = Option(__v))
    def getEventId: _root_.scala.Predef.String = eventId.getOrElse("")
    def clearEventId: LastView = copy(eventId = None)
    def withEventId(__v: _root_.scala.Predef.String): LastView = copy(eventId = Option(__v))
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: LastView = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): LastView = copy(title = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => accountId.orNull
        case 4 => userId.orNull
        case 5 => url.orNull
        case 6 => ua.orNull
        case 7 => ip.orNull
        case 8 => created.orNull
        case 9 => eventId.orNull
        case 10 => title.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => ua.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => ip.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => eventId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.LastView
}

object LastView extends scalapb.GeneratedMessageCompanion[user.LastView] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.LastView] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.LastView = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.LastView(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.LastView] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.LastView(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(39)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(39)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.LastView(
  )
  implicit class LastViewLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.LastView]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.LastView](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUrl)((c_, f_) => c_.copy(url = Option(f_)))
    def optionalUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def ua: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUa)((c_, f_) => c_.copy(ua = Option(f_)))
    def optionalUa: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.ua)((c_, f_) => c_.copy(ua = f_))
    def ip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIp)((c_, f_) => c_.copy(ip = Option(f_)))
    def optionalIp: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.ip)((c_, f_) => c_.copy(ip = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def eventId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEventId)((c_, f_) => c_.copy(eventId = Option(f_)))
    def optionalEventId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.eventId)((c_, f_) => c_.copy(eventId = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val USER_ID_FIELD_NUMBER = 4
  final val URL_FIELD_NUMBER = 5
  final val UA_FIELD_NUMBER = 6
  final val IP_FIELD_NUMBER = 7
  final val CREATED_FIELD_NUMBER = 8
  final val EVENT_ID_FIELD_NUMBER = 9
  final val TITLE_FIELD_NUMBER = 10
}
