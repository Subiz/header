// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package user

/** @param category
  *   eventtype
  */
@SerialVersionUID(0L)
final case class IndexEvent(
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    category: scala.Option[_root_.scala.Predef.String] = None,
    topics: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    `object`: scala.Option[_root_.scala.Predef.String] = None,
    text: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[IndexEvent] with scalapb.lenses.Updatable[IndexEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, userId.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, created.get) }
      if (category.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, category.get) }
      topics.foreach(topics => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, topics))
      if (`object`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, `object`.get) }
      if (text.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, text.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(5, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      category.foreach { __v =>
        _output__.writeString(7, __v)
      };
      topics.foreach { __v =>
        _output__.writeString(8, __v)
      };
      `object`.foreach { __v =>
        _output__.writeString(9, __v)
      };
      text.foreach { __v =>
        _output__.writeString(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): user.IndexEvent = {
      var __id = this.id
      var __accountId = this.accountId
      var __userId = this.userId
      var __created = this.created
      var __category = this.category
      val __topics = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.topics)
      var __object = this.`object`
      var __text = this.text
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __userId = Option(_input__.readString())
          case 48 =>
            __created = Option(_input__.readInt64())
          case 58 =>
            __category = Option(_input__.readString())
          case 66 =>
            __topics += _input__.readString()
          case 74 =>
            __object = Option(_input__.readString())
          case 82 =>
            __text = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      user.IndexEvent(
          id = __id,
          accountId = __accountId,
          userId = __userId,
          created = __created,
          category = __category,
          topics = __topics.result(),
          `object` = __object,
          text = __text
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: IndexEvent = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): IndexEvent = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: IndexEvent = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): IndexEvent = copy(accountId = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: IndexEvent = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): IndexEvent = copy(userId = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: IndexEvent = copy(created = None)
    def withCreated(__v: _root_.scala.Long): IndexEvent = copy(created = Option(__v))
    def getCategory: _root_.scala.Predef.String = category.getOrElse("")
    def clearCategory: IndexEvent = copy(category = None)
    def withCategory(__v: _root_.scala.Predef.String): IndexEvent = copy(category = Option(__v))
    def clearTopics = copy(topics = _root_.scala.collection.Seq.empty)
    def addTopics(__vs: _root_.scala.Predef.String*): IndexEvent = addAllTopics(__vs)
    def addAllTopics(__vs: TraversableOnce[_root_.scala.Predef.String]): IndexEvent = copy(topics = topics ++ __vs)
    def withTopics(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): IndexEvent = copy(topics = __v)
    def getObject: _root_.scala.Predef.String = `object`.getOrElse("")
    def clearObject: IndexEvent = copy(`object` = None)
    def withObject(__v: _root_.scala.Predef.String): IndexEvent = copy(`object` = Option(__v))
    def getText: _root_.scala.Predef.String = text.getOrElse("")
    def clearText: IndexEvent = copy(text = None)
    def withText(__v: _root_.scala.Predef.String): IndexEvent = copy(text = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 4 => accountId.orNull
        case 5 => userId.orNull
        case 6 => created.orNull
        case 7 => category.orNull
        case 8 => topics
        case 9 => `object`.orNull
        case 10 => text.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => category.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PRepeated(topics.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 9 => `object`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => text.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = user.IndexEvent
}

object IndexEvent extends scalapb.GeneratedMessageCompanion[user.IndexEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.IndexEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): user.IndexEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.IndexEvent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.IndexEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.IndexEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.IndexEvent(
  )
  implicit class IndexEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.IndexEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.IndexEvent](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def category: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCategory)((c_, f_) => c_.copy(category = Option(f_)))
    def optionalCategory: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.category)((c_, f_) => c_.copy(category = f_))
    def topics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.topics)((c_, f_) => c_.copy(topics = f_))
    def `object`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getObject)((c_, f_) => c_.copy(`object` = Option(f_)))
    def optionalObject: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`object`)((c_, f_) => c_.copy(`object` = f_))
    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getText)((c_, f_) => c_.copy(text = Option(f_)))
    def optionalText: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.text)((c_, f_) => c_.copy(text = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val USER_ID_FIELD_NUMBER = 5
  final val CREATED_FIELD_NUMBER = 6
  final val CATEGORY_FIELD_NUMBER = 7
  final val TOPICS_FIELD_NUMBER = 8
  final val OBJECT_FIELD_NUMBER = 9
  final val TEXT_FIELD_NUMBER = 10
}
