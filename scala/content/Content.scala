// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package content

/** @param id
  *   user input id
  */
@SerialVersionUID(0L)
final case class Content(
    ctx: scala.Option[common.Context] = None,
    sbid: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    description: scala.Option[_root_.scala.Predef.String] = None,
    title: scala.Option[_root_.scala.Predef.String] = None,
    url: scala.Option[_root_.scala.Predef.String] = None,
    labels: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    availability: scala.Option[_root_.scala.Predef.String] = None,
    price: scala.Option[_root_.scala.Float] = None,
    currency: scala.Option[_root_.scala.Predef.String] = None,
    salePrice: scala.Option[_root_.scala.Float] = None,
    fields: _root_.scala.collection.Seq[content.KeyValue] = _root_.scala.collection.Seq.empty,
    categories: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    relates: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    attachmentUrls: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    `type`: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Content] with scalapb.lenses.Updatable[Content] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (sbid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, sbid.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, description.get) }
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, title.get) }
      if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, url.get) }
      labels.foreach(labels => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, labels))
      if (availability.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, availability.get) }
      if (price.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(10, price.get) }
      if (currency.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, currency.get) }
      if (salePrice.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(12, salePrice.get) }
      fields.foreach(fields => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      categories.foreach(categories => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, categories))
      relates.foreach(relates => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, relates))
      attachmentUrls.foreach(attachmentUrls => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, attachmentUrls))
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, `type`.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sbid.foreach { __v =>
        _output__.writeString(2, __v)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      description.foreach { __v =>
        _output__.writeString(5, __v)
      };
      title.foreach { __v =>
        _output__.writeString(6, __v)
      };
      url.foreach { __v =>
        _output__.writeString(7, __v)
      };
      labels.foreach { __v =>
        _output__.writeString(8, __v)
      };
      availability.foreach { __v =>
        _output__.writeString(9, __v)
      };
      price.foreach { __v =>
        _output__.writeFloat(10, __v)
      };
      currency.foreach { __v =>
        _output__.writeString(11, __v)
      };
      salePrice.foreach { __v =>
        _output__.writeFloat(12, __v)
      };
      fields.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      categories.foreach { __v =>
        _output__.writeString(14, __v)
      };
      relates.foreach { __v =>
        _output__.writeString(15, __v)
      };
      attachmentUrls.foreach { __v =>
        _output__.writeString(16, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(17, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): content.Content = {
      var __ctx = this.ctx
      var __sbid = this.sbid
      var __id = this.id
      var __accountId = this.accountId
      var __description = this.description
      var __title = this.title
      var __url = this.url
      val __labels = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.labels)
      var __availability = this.availability
      var __price = this.price
      var __currency = this.currency
      var __salePrice = this.salePrice
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[content.KeyValue] ++= this.fields)
      val __categories = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.categories)
      val __relates = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.relates)
      val __attachmentUrls = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.attachmentUrls)
      var __type = this.`type`
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __sbid = Option(_input__.readString())
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __description = Option(_input__.readString())
          case 50 =>
            __title = Option(_input__.readString())
          case 58 =>
            __url = Option(_input__.readString())
          case 66 =>
            __labels += _input__.readString()
          case 74 =>
            __availability = Option(_input__.readString())
          case 85 =>
            __price = Option(_input__.readFloat())
          case 90 =>
            __currency = Option(_input__.readString())
          case 101 =>
            __salePrice = Option(_input__.readFloat())
          case 106 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, content.KeyValue.defaultInstance)
          case 114 =>
            __categories += _input__.readString()
          case 122 =>
            __relates += _input__.readString()
          case 130 =>
            __attachmentUrls += _input__.readString()
          case 138 =>
            __type = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      content.Content(
          ctx = __ctx,
          sbid = __sbid,
          id = __id,
          accountId = __accountId,
          description = __description,
          title = __title,
          url = __url,
          labels = __labels.result(),
          availability = __availability,
          price = __price,
          currency = __currency,
          salePrice = __salePrice,
          fields = __fields.result(),
          categories = __categories.result(),
          relates = __relates.result(),
          attachmentUrls = __attachmentUrls.result(),
          `type` = __type
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Content = copy(ctx = None)
    def withCtx(__v: common.Context): Content = copy(ctx = Option(__v))
    def getSbid: _root_.scala.Predef.String = sbid.getOrElse("")
    def clearSbid: Content = copy(sbid = None)
    def withSbid(__v: _root_.scala.Predef.String): Content = copy(sbid = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Content = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Content = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Content = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Content = copy(accountId = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: Content = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): Content = copy(description = Option(__v))
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: Content = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): Content = copy(title = Option(__v))
    def getUrl: _root_.scala.Predef.String = url.getOrElse("")
    def clearUrl: Content = copy(url = None)
    def withUrl(__v: _root_.scala.Predef.String): Content = copy(url = Option(__v))
    def clearLabels = copy(labels = _root_.scala.collection.Seq.empty)
    def addLabels(__vs: _root_.scala.Predef.String*): Content = addAllLabels(__vs)
    def addAllLabels(__vs: TraversableOnce[_root_.scala.Predef.String]): Content = copy(labels = labels ++ __vs)
    def withLabels(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Content = copy(labels = __v)
    def getAvailability: _root_.scala.Predef.String = availability.getOrElse("")
    def clearAvailability: Content = copy(availability = None)
    def withAvailability(__v: _root_.scala.Predef.String): Content = copy(availability = Option(__v))
    def getPrice: _root_.scala.Float = price.getOrElse(0.0f)
    def clearPrice: Content = copy(price = None)
    def withPrice(__v: _root_.scala.Float): Content = copy(price = Option(__v))
    def getCurrency: _root_.scala.Predef.String = currency.getOrElse("")
    def clearCurrency: Content = copy(currency = None)
    def withCurrency(__v: _root_.scala.Predef.String): Content = copy(currency = Option(__v))
    def getSalePrice: _root_.scala.Float = salePrice.getOrElse(0.0f)
    def clearSalePrice: Content = copy(salePrice = None)
    def withSalePrice(__v: _root_.scala.Float): Content = copy(salePrice = Option(__v))
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: content.KeyValue*): Content = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[content.KeyValue]): Content = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[content.KeyValue]): Content = copy(fields = __v)
    def clearCategories = copy(categories = _root_.scala.collection.Seq.empty)
    def addCategories(__vs: _root_.scala.Predef.String*): Content = addAllCategories(__vs)
    def addAllCategories(__vs: TraversableOnce[_root_.scala.Predef.String]): Content = copy(categories = categories ++ __vs)
    def withCategories(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Content = copy(categories = __v)
    def clearRelates = copy(relates = _root_.scala.collection.Seq.empty)
    def addRelates(__vs: _root_.scala.Predef.String*): Content = addAllRelates(__vs)
    def addAllRelates(__vs: TraversableOnce[_root_.scala.Predef.String]): Content = copy(relates = relates ++ __vs)
    def withRelates(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Content = copy(relates = __v)
    def clearAttachmentUrls = copy(attachmentUrls = _root_.scala.collection.Seq.empty)
    def addAttachmentUrls(__vs: _root_.scala.Predef.String*): Content = addAllAttachmentUrls(__vs)
    def addAllAttachmentUrls(__vs: TraversableOnce[_root_.scala.Predef.String]): Content = copy(attachmentUrls = attachmentUrls ++ __vs)
    def withAttachmentUrls(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Content = copy(attachmentUrls = __v)
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Content = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Content = copy(`type` = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => sbid.orNull
        case 3 => id.orNull
        case 4 => accountId.orNull
        case 5 => description.orNull
        case 6 => title.orNull
        case 7 => url.orNull
        case 8 => labels
        case 9 => availability.orNull
        case 10 => price.orNull
        case 11 => currency.orNull
        case 12 => salePrice.orNull
        case 13 => fields
        case 14 => categories
        case 15 => relates
        case 16 => attachmentUrls
        case 17 => `type`.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sbid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PRepeated(labels.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 9 => availability.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => price.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => currency.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => salePrice.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 14 => _root_.scalapb.descriptors.PRepeated(categories.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 15 => _root_.scalapb.descriptors.PRepeated(relates.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 16 => _root_.scalapb.descriptors.PRepeated(attachmentUrls.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 17 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = content.Content
}

object Content extends scalapb.GeneratedMessageCompanion[content.Content] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[content.Content] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): content.Content = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    content.Content(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Float]],
      __fieldsMap.getOrElse(__fields.get(12), Nil).asInstanceOf[_root_.scala.collection.Seq[content.KeyValue]],
      __fieldsMap.getOrElse(__fields.get(13), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(14), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(15), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[content.Content] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      content.Content(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.collection.Seq[content.KeyValue]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ContentProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ContentProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 13 => __out = content.KeyValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = content.Content(
  )
  implicit class ContentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, content.Content]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, content.Content](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def sbid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSbid)((c_, f_) => c_.copy(sbid = Option(f_)))
    def optionalSbid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.sbid)((c_, f_) => c_.copy(sbid = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUrl)((c_, f_) => c_.copy(url = Option(f_)))
    def optionalUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def labels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.labels)((c_, f_) => c_.copy(labels = f_))
    def availability: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvailability)((c_, f_) => c_.copy(availability = Option(f_)))
    def optionalAvailability: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.availability)((c_, f_) => c_.copy(availability = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getPrice)((c_, f_) => c_.copy(price = Option(f_)))
    def optionalPrice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def currency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCurrency)((c_, f_) => c_.copy(currency = Option(f_)))
    def optionalCurrency: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.currency)((c_, f_) => c_.copy(currency = f_))
    def salePrice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSalePrice)((c_, f_) => c_.copy(salePrice = Option(f_)))
    def optionalSalePrice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Float]] = field(_.salePrice)((c_, f_) => c_.copy(salePrice = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[content.KeyValue]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def categories: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.categories)((c_, f_) => c_.copy(categories = f_))
    def relates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.relates)((c_, f_) => c_.copy(relates = f_))
    def attachmentUrls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.attachmentUrls)((c_, f_) => c_.copy(attachmentUrls = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val SBID_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val DESCRIPTION_FIELD_NUMBER = 5
  final val TITLE_FIELD_NUMBER = 6
  final val URL_FIELD_NUMBER = 7
  final val LABELS_FIELD_NUMBER = 8
  final val AVAILABILITY_FIELD_NUMBER = 9
  final val PRICE_FIELD_NUMBER = 10
  final val CURRENCY_FIELD_NUMBER = 11
  final val SALE_PRICE_FIELD_NUMBER = 12
  final val FIELDS_FIELD_NUMBER = 13
  final val CATEGORIES_FIELD_NUMBER = 14
  final val RELATES_FIELD_NUMBER = 15
  final val ATTACHMENT_URLS_FIELD_NUMBER = 16
  final val TYPE_FIELD_NUMBER = 17
}
