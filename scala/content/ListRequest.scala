// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package content

@SerialVersionUID(0L)
final case class ListRequest(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    anchor: scala.Option[_root_.scala.Predef.String] = None,
    category: scala.Option[_root_.scala.Predef.String] = None,
    limit: scala.Option[_root_.scala.Int] = None,
    label: scala.Option[_root_.scala.Predef.String] = None,
    query: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ListRequest] with scalapb.lenses.Updatable[ListRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, accountId.get) }
      if (anchor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, anchor.get) }
      if (category.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, category.get) }
      if (limit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, limit.get) }
      if (label.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, label.get) }
      if (query.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, query.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      anchor.foreach { __v =>
        _output__.writeString(2, __v)
      };
      category.foreach { __v =>
        _output__.writeString(3, __v)
      };
      limit.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      label.foreach { __v =>
        _output__.writeString(5, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      query.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): content.ListRequest = {
      var __accountId = this.accountId
      var __anchor = this.anchor
      var __category = this.category
      var __limit = this.limit
      var __label = this.label
      var __query = this.query
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 50 =>
            __accountId = Option(_input__.readString())
          case 18 =>
            __anchor = Option(_input__.readString())
          case 26 =>
            __category = Option(_input__.readString())
          case 32 =>
            __limit = Option(_input__.readInt32())
          case 42 =>
            __label = Option(_input__.readString())
          case 58 =>
            __query = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      content.ListRequest(
          accountId = __accountId,
          anchor = __anchor,
          category = __category,
          limit = __limit,
          label = __label,
          query = __query
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: ListRequest = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): ListRequest = copy(accountId = Option(__v))
    def getAnchor: _root_.scala.Predef.String = anchor.getOrElse("")
    def clearAnchor: ListRequest = copy(anchor = None)
    def withAnchor(__v: _root_.scala.Predef.String): ListRequest = copy(anchor = Option(__v))
    def getCategory: _root_.scala.Predef.String = category.getOrElse("")
    def clearCategory: ListRequest = copy(category = None)
    def withCategory(__v: _root_.scala.Predef.String): ListRequest = copy(category = Option(__v))
    def getLimit: _root_.scala.Int = limit.getOrElse(0)
    def clearLimit: ListRequest = copy(limit = None)
    def withLimit(__v: _root_.scala.Int): ListRequest = copy(limit = Option(__v))
    def getLabel: _root_.scala.Predef.String = label.getOrElse("")
    def clearLabel: ListRequest = copy(label = None)
    def withLabel(__v: _root_.scala.Predef.String): ListRequest = copy(label = Option(__v))
    def getQuery: _root_.scala.Predef.String = query.getOrElse("")
    def clearQuery: ListRequest = copy(query = None)
    def withQuery(__v: _root_.scala.Predef.String): ListRequest = copy(query = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 6 => accountId.orNull
        case 2 => anchor.orNull
        case 3 => category.orNull
        case 4 => limit.orNull
        case 5 => label.orNull
        case 7 => query.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 6 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => anchor.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => category.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => limit.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => label.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => query.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = content.ListRequest
}

object ListRequest extends scalapb.GeneratedMessageCompanion[content.ListRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[content.ListRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): content.ListRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    content.ListRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[content.ListRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      content.ListRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ContentProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ContentProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = content.ListRequest(
  )
  implicit class ListRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, content.ListRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, content.ListRequest](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnchor)((c_, f_) => c_.copy(anchor = Option(f_)))
    def optionalAnchor: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
    def category: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCategory)((c_, f_) => c_.copy(category = Option(f_)))
    def optionalCategory: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.category)((c_, f_) => c_.copy(category = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def label: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLabel)((c_, f_) => c_.copy(label = Option(f_)))
    def optionalLabel: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.label)((c_, f_) => c_.copy(label = f_))
    def query: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getQuery)((c_, f_) => c_.copy(query = Option(f_)))
    def optionalQuery: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.query)((c_, f_) => c_.copy(query = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 6
  final val ANCHOR_FIELD_NUMBER = 2
  final val CATEGORY_FIELD_NUMBER = 3
  final val LIMIT_FIELD_NUMBER = 4
  final val LABEL_FIELD_NUMBER = 5
  final val QUERY_FIELD_NUMBER = 7
}
