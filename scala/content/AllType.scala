// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package content

@SerialVersionUID(0L)
final case class AllType(
    content: scala.Option[_root_.content.Content] = None,
    contents: scala.Option[_root_.content.Contents] = None,
    lr: scala.Option[_root_.content.ListRequest] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (content.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(content.get.serializedSize) + content.get.serializedSize }
      if (contents.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(contents.get.serializedSize) + contents.get.serializedSize }
      if (lr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(lr.get.serializedSize) + lr.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      content.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      contents.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      lr.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.content.AllType = {
      var __content = this.content
      var __contents = this.contents
      var __lr = this.lr
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __content = Option(_root_.scalapb.LiteParser.readMessage(_input__, __content.getOrElse(_root_.content.Content.defaultInstance)))
          case 26 =>
            __contents = Option(_root_.scalapb.LiteParser.readMessage(_input__, __contents.getOrElse(_root_.content.Contents.defaultInstance)))
          case 42 =>
            __lr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __lr.getOrElse(_root_.content.ListRequest.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      _root_.content.AllType(
          content = __content,
          contents = __contents,
          lr = __lr
      )
    }
    def getContent: _root_.content.Content = content.getOrElse(_root_.content.Content.defaultInstance)
    def clearContent: AllType = copy(content = None)
    def withContent(__v: _root_.content.Content): AllType = copy(content = Option(__v))
    def getContents: _root_.content.Contents = contents.getOrElse(_root_.content.Contents.defaultInstance)
    def clearContents: AllType = copy(contents = None)
    def withContents(__v: _root_.content.Contents): AllType = copy(contents = Option(__v))
    def getLr: _root_.content.ListRequest = lr.getOrElse(_root_.content.ListRequest.defaultInstance)
    def clearLr: AllType = copy(lr = None)
    def withLr(__v: _root_.content.ListRequest): AllType = copy(lr = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => content.orNull
        case 3 => contents.orNull
        case 5 => lr.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => content.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => contents.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => lr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.content.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[content.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[content.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): content.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    content.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.content.Content]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.content.Contents]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.content.ListRequest]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[content.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      content.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.content.Content]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.content.Contents]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.content.ListRequest]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ContentProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ContentProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = content.Content
      case 3 => __out = content.Contents
      case 5 => __out = content.ListRequest
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = content.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, content.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, content.AllType](_l) {
    def content: _root_.scalapb.lenses.Lens[UpperPB, _root_.content.Content] = field(_.getContent)((c_, f_) => c_.copy(content = Option(f_)))
    def optionalContent: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.content.Content]] = field(_.content)((c_, f_) => c_.copy(content = f_))
    def contents: _root_.scalapb.lenses.Lens[UpperPB, _root_.content.Contents] = field(_.getContents)((c_, f_) => c_.copy(contents = Option(f_)))
    def optionalContents: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.content.Contents]] = field(_.contents)((c_, f_) => c_.copy(contents = f_))
    def lr: _root_.scalapb.lenses.Lens[UpperPB, _root_.content.ListRequest] = field(_.getLr)((c_, f_) => c_.copy(lr = Option(f_)))
    def optionalLr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.content.ListRequest]] = field(_.lr)((c_, f_) => c_.copy(lr = f_))
  }
  final val CONTENT_FIELD_NUMBER = 2
  final val CONTENTS_FIELD_NUMBER = 3
  final val LR_FIELD_NUMBER = 5
}
