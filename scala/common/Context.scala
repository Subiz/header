// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package common

/** @param credential
  *  	optional int32 reply_partition = 5;
  * @param topic
  *   for kafka
  */
@SerialVersionUID(0L)
final case class Context(
    eventId: _root_.scala.Predef.String = "",
    state: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    node: _root_.scala.Predef.String = "",
    replyTopic: _root_.scala.Predef.String = "",
    credential: scala.Option[auth.Credential] = None,
    tracing: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    replyKey: _root_.scala.Predef.String = "",
    byDevice: scala.Option[common.Device] = None,
    topic: _root_.scala.Predef.String = "",
    partition: _root_.scala.Int = 0,
    offset: _root_.scala.Long = 0L,
    term: _root_.scala.Long = 0L,
    routerTopic: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Context] with scalapb.lenses.Updatable[Context] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (eventId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, eventId) }
      if (state != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, state) }
      if (node != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, node) }
      if (replyTopic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, replyTopic) }
      if (credential.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(credential.get.serializedSize) + credential.get.serializedSize }
      if (tracing != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(7, tracing) }
      if (replyKey != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, replyKey) }
      if (byDevice.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(byDevice.get.serializedSize) + byDevice.get.serializedSize }
      if (topic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, topic) }
      if (partition != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(13, partition) }
      if (offset != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(14, offset) }
      if (term != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(15, term) }
      if (routerTopic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, routerTopic) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = eventId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = state
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = node
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = replyTopic
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      credential.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = tracing
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(7, __v)
        }
      };
      {
        val __v = replyKey
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      byDevice.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = topic
        if (__v != "") {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = partition
        if (__v != 0) {
          _output__.writeInt32(13, __v)
        }
      };
      {
        val __v = offset
        if (__v != 0L) {
          _output__.writeInt64(14, __v)
        }
      };
      {
        val __v = term
        if (__v != 0L) {
          _output__.writeUInt64(15, __v)
        }
      };
      {
        val __v = routerTopic
        if (__v != "") {
          _output__.writeString(16, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): common.Context = {
      var __eventId = this.eventId
      var __state = this.state
      var __node = this.node
      var __replyTopic = this.replyTopic
      var __credential = this.credential
      var __tracing = this.tracing
      var __replyKey = this.replyKey
      var __byDevice = this.byDevice
      var __topic = this.topic
      var __partition = this.partition
      var __offset = this.offset
      var __term = this.term
      var __routerTopic = this.routerTopic
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __eventId = _input__.readString()
          case 18 =>
            __state = _input__.readBytes()
          case 26 =>
            __node = _input__.readString()
          case 34 =>
            __replyTopic = _input__.readString()
          case 50 =>
            __credential = Option(_root_.scalapb.LiteParser.readMessage(_input__, __credential.getOrElse(auth.Credential.defaultInstance)))
          case 58 =>
            __tracing = _input__.readBytes()
          case 66 =>
            __replyKey = _input__.readString()
          case 82 =>
            __byDevice = Option(_root_.scalapb.LiteParser.readMessage(_input__, __byDevice.getOrElse(common.Device.defaultInstance)))
          case 90 =>
            __topic = _input__.readString()
          case 104 =>
            __partition = _input__.readInt32()
          case 112 =>
            __offset = _input__.readInt64()
          case 120 =>
            __term = _input__.readUInt64()
          case 130 =>
            __routerTopic = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      common.Context(
          eventId = __eventId,
          state = __state,
          node = __node,
          replyTopic = __replyTopic,
          credential = __credential,
          tracing = __tracing,
          replyKey = __replyKey,
          byDevice = __byDevice,
          topic = __topic,
          partition = __partition,
          offset = __offset,
          term = __term,
          routerTopic = __routerTopic
      )
    }
    def withEventId(__v: _root_.scala.Predef.String): Context = copy(eventId = __v)
    def withState(__v: _root_.com.google.protobuf.ByteString): Context = copy(state = __v)
    def withNode(__v: _root_.scala.Predef.String): Context = copy(node = __v)
    def withReplyTopic(__v: _root_.scala.Predef.String): Context = copy(replyTopic = __v)
    def getCredential: auth.Credential = credential.getOrElse(auth.Credential.defaultInstance)
    def clearCredential: Context = copy(credential = None)
    def withCredential(__v: auth.Credential): Context = copy(credential = Option(__v))
    def withTracing(__v: _root_.com.google.protobuf.ByteString): Context = copy(tracing = __v)
    def withReplyKey(__v: _root_.scala.Predef.String): Context = copy(replyKey = __v)
    def getByDevice: common.Device = byDevice.getOrElse(common.Device.defaultInstance)
    def clearByDevice: Context = copy(byDevice = None)
    def withByDevice(__v: common.Device): Context = copy(byDevice = Option(__v))
    def withTopic(__v: _root_.scala.Predef.String): Context = copy(topic = __v)
    def withPartition(__v: _root_.scala.Int): Context = copy(partition = __v)
    def withOffset(__v: _root_.scala.Long): Context = copy(offset = __v)
    def withTerm(__v: _root_.scala.Long): Context = copy(term = __v)
    def withRouterTopic(__v: _root_.scala.Predef.String): Context = copy(routerTopic = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = eventId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = state
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = node
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = replyTopic
          if (__t != "") __t else null
        }
        case 6 => credential.orNull
        case 7 => {
          val __t = tracing
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 8 => {
          val __t = replyKey
          if (__t != "") __t else null
        }
        case 10 => byDevice.orNull
        case 11 => {
          val __t = topic
          if (__t != "") __t else null
        }
        case 13 => {
          val __t = partition
          if (__t != 0) __t else null
        }
        case 14 => {
          val __t = offset
          if (__t != 0L) __t else null
        }
        case 15 => {
          val __t = term
          if (__t != 0L) __t else null
        }
        case 16 => {
          val __t = routerTopic
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(eventId)
        case 2 => _root_.scalapb.descriptors.PByteString(state)
        case 3 => _root_.scalapb.descriptors.PString(node)
        case 4 => _root_.scalapb.descriptors.PString(replyTopic)
        case 6 => credential.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PByteString(tracing)
        case 8 => _root_.scalapb.descriptors.PString(replyKey)
        case 10 => byDevice.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => _root_.scalapb.descriptors.PString(topic)
        case 13 => _root_.scalapb.descriptors.PInt(partition)
        case 14 => _root_.scalapb.descriptors.PLong(offset)
        case 15 => _root_.scalapb.descriptors.PLong(term)
        case 16 => _root_.scalapb.descriptors.PString(routerTopic)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = common.Context
}

object Context extends scalapb.GeneratedMessageCompanion[common.Context] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[common.Context] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): common.Context = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    common.Context(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[auth.Credential]],
      __fieldsMap.getOrElse(__fields.get(5), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[common.Device]],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(9), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(10), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(11), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(12), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[common.Context] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      common.Context(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[auth.Credential]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[common.Device]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = auth.Credential
      case 10 => __out = common.Device
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = common.Context(
  )
  implicit class ContextLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, common.Context]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, common.Context](_l) {
    def eventId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.eventId)((c_, f_) => c_.copy(eventId = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def node: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.node)((c_, f_) => c_.copy(node = f_))
    def replyTopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.replyTopic)((c_, f_) => c_.copy(replyTopic = f_))
    def credential: _root_.scalapb.lenses.Lens[UpperPB, auth.Credential] = field(_.getCredential)((c_, f_) => c_.copy(credential = Option(f_)))
    def optionalCredential: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Credential]] = field(_.credential)((c_, f_) => c_.copy(credential = f_))
    def tracing: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.tracing)((c_, f_) => c_.copy(tracing = f_))
    def replyKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.replyKey)((c_, f_) => c_.copy(replyKey = f_))
    def byDevice: _root_.scalapb.lenses.Lens[UpperPB, common.Device] = field(_.getByDevice)((c_, f_) => c_.copy(byDevice = Option(f_)))
    def optionalByDevice: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Device]] = field(_.byDevice)((c_, f_) => c_.copy(byDevice = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def partition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.partition)((c_, f_) => c_.copy(partition = f_))
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def routerTopic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.routerTopic)((c_, f_) => c_.copy(routerTopic = f_))
  }
  final val EVENT_ID_FIELD_NUMBER = 1
  final val STATE_FIELD_NUMBER = 2
  final val NODE_FIELD_NUMBER = 3
  final val REPLY_TOPIC_FIELD_NUMBER = 4
  final val CREDENTIAL_FIELD_NUMBER = 6
  final val TRACING_FIELD_NUMBER = 7
  final val REPLY_KEY_FIELD_NUMBER = 8
  final val BY_DEVICE_FIELD_NUMBER = 10
  final val TOPIC_FIELD_NUMBER = 11
  final val PARTITION_FIELD_NUMBER = 13
  final val OFFSET_FIELD_NUMBER = 14
  final val TERM_FIELD_NUMBER = 15
  final val ROUTER_TOPIC_FIELD_NUMBER = 16
}
