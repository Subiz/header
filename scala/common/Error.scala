// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package common

@SerialVersionUID(0L)
final case class Error(
    error: _root_.scala.Predef.String = "",
    requestId: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    hash: _root_.scala.Predef.String = "",
    debug: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Error] with scalapb.lenses.Updatable[Error] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (error != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, error) }
      if (requestId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, requestId) }
      if (description != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, description) }
      if (hash != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, hash) }
      if (debug != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, debug) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = error
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = requestId
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = hash
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = debug
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): common.Error = {
      var __error = this.error
      var __requestId = this.requestId
      var __description = this.description
      var __hash = this.hash
      var __debug = this.debug
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __error = _input__.readString()
          case 26 =>
            __requestId = _input__.readString()
          case 34 =>
            __description = _input__.readString()
          case 42 =>
            __hash = _input__.readString()
          case 50 =>
            __debug = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      common.Error(
          error = __error,
          requestId = __requestId,
          description = __description,
          hash = __hash,
          debug = __debug
      )
    }
    def withError(__v: _root_.scala.Predef.String): Error = copy(error = __v)
    def withRequestId(__v: _root_.scala.Predef.String): Error = copy(requestId = __v)
    def withDescription(__v: _root_.scala.Predef.String): Error = copy(description = __v)
    def withHash(__v: _root_.scala.Predef.String): Error = copy(hash = __v)
    def withDebug(__v: _root_.scala.Predef.String): Error = copy(debug = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = error
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = requestId
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = hash
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = debug
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PString(error)
        case 3 => _root_.scalapb.descriptors.PString(requestId)
        case 4 => _root_.scalapb.descriptors.PString(description)
        case 5 => _root_.scalapb.descriptors.PString(hash)
        case 6 => _root_.scalapb.descriptors.PString(debug)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = common.Error
}

object Error extends scalapb.GeneratedMessageCompanion[common.Error] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[common.Error] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): common.Error = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    common.Error(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[common.Error] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      common.Error(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = common.Error(
  )
  implicit class ErrorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, common.Error]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, common.Error](_l) {
    def error: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.error)((c_, f_) => c_.copy(error = f_))
    def requestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.requestId)((c_, f_) => c_.copy(requestId = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def hash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
    def debug: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.debug)((c_, f_) => c_.copy(debug = f_))
  }
  final val ERROR_FIELD_NUMBER = 2
  final val REQUEST_ID_FIELD_NUMBER = 3
  final val DESCRIPTION_FIELD_NUMBER = 4
  final val HASH_FIELD_NUMBER = 5
  final val DEBUG_FIELD_NUMBER = 6
}
