// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Postback(
    message: scala.Option[conversation.Message] = None,
    button: scala.Option[conversation.Button] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Postback] with scalapb.lenses.Updatable[Postback] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (message.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(message.get.serializedSize) + message.get.serializedSize }
      if (button.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(button.get.serializedSize) + button.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      message.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      button.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Postback = {
      var __message = this.message
      var __button = this.button
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __message = Option(_root_.scalapb.LiteParser.readMessage(_input__, __message.getOrElse(conversation.Message.defaultInstance)))
          case 26 =>
            __button = Option(_root_.scalapb.LiteParser.readMessage(_input__, __button.getOrElse(conversation.Button.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Postback(
          message = __message,
          button = __button
      )
    }
    def getMessage: conversation.Message = message.getOrElse(conversation.Message.defaultInstance)
    def clearMessage: Postback = copy(message = None)
    def withMessage(__v: conversation.Message): Postback = copy(message = Option(__v))
    def getButton: conversation.Button = button.getOrElse(conversation.Button.defaultInstance)
    def clearButton: Postback = copy(button = None)
    def withButton(__v: conversation.Button): Postback = copy(button = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => message.orNull
        case 3 => button.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => message.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => button.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Postback
}

object Postback extends scalapb.GeneratedMessageCompanion[conversation.Postback] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Postback] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Postback = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Postback(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[conversation.Message]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[conversation.Button]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Postback] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Postback(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[conversation.Message]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[conversation.Button]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(38)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(38)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = conversation.Message
      case 3 => __out = conversation.Button
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Postback(
  )
  implicit class PostbackLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Postback]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Postback](_l) {
    def message: _root_.scalapb.lenses.Lens[UpperPB, conversation.Message] = field(_.getMessage)((c_, f_) => c_.copy(message = Option(f_)))
    def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Message]] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def button: _root_.scalapb.lenses.Lens[UpperPB, conversation.Button] = field(_.getButton)((c_, f_) => c_.copy(button = Option(f_)))
    def optionalButton: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Button]] = field(_.button)((c_, f_) => c_.copy(button = f_))
  }
  final val MESSAGE_FIELD_NUMBER = 2
  final val BUTTON_FIELD_NUMBER = 3
}
