// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Reaction(
    name: scala.Option[_root_.scala.Predef.String] = None,
    count: scala.Option[_root_.scala.Int] = None,
    users: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Reaction] with scalapb.lenses.Updatable[Reaction] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name.get) }
      if (count.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, count.get) }
      users.foreach(users => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, users))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      name.foreach { __v =>
        _output__.writeString(3, __v)
      };
      count.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      users.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Reaction = {
      var __name = this.name
      var __count = this.count
      val __users = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.users)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __name = Option(_input__.readString())
          case 32 =>
            __count = Option(_input__.readInt32())
          case 42 =>
            __users += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Reaction(
          name = __name,
          count = __count,
          users = __users.result()
      )
    }
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Reaction = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Reaction = copy(name = Option(__v))
    def getCount: _root_.scala.Int = count.getOrElse(0)
    def clearCount: Reaction = copy(count = None)
    def withCount(__v: _root_.scala.Int): Reaction = copy(count = Option(__v))
    def clearUsers = copy(users = _root_.scala.collection.Seq.empty)
    def addUsers(__vs: _root_.scala.Predef.String*): Reaction = addAllUsers(__vs)
    def addAllUsers(__vs: TraversableOnce[_root_.scala.Predef.String]): Reaction = copy(users = users ++ __vs)
    def withUsers(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Reaction = copy(users = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => name.orNull
        case 4 => count.orNull
        case 5 => users
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => count.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(users.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Reaction
}

object Reaction extends scalapb.GeneratedMessageCompanion[conversation.Reaction] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Reaction] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Reaction = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Reaction(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Reaction] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Reaction(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Reaction(
  )
  implicit class ReactionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Reaction]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Reaction](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def count: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getCount)((c_, f_) => c_.copy(count = Option(f_)))
    def optionalCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.count)((c_, f_) => c_.copy(count = f_))
    def users: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.users)((c_, f_) => c_.copy(users = f_))
  }
  final val NAME_FIELD_NUMBER = 3
  final val COUNT_FIELD_NUMBER = 4
  final val USERS_FIELD_NUMBER = 5
}
