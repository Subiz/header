// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class AvailabilityCheckResult(
    ctx: scala.Option[common.Context] = None,
    availability: scala.Option[_root_.scala.Boolean] = None,
    reason: scala.Option[_root_.scala.Predef.String] = None,
    payload: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AvailabilityCheckResult] with scalapb.lenses.Updatable[AvailabilityCheckResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (availability.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, availability.get) }
      if (reason.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, reason.get) }
      if (payload.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, payload.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      availability.foreach { __v =>
        _output__.writeBool(2, __v)
      };
      reason.foreach { __v =>
        _output__.writeString(3, __v)
      };
      payload.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.AvailabilityCheckResult = {
      var __ctx = this.ctx
      var __availability = this.availability
      var __reason = this.reason
      var __payload = this.payload
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 16 =>
            __availability = Option(_input__.readBool())
          case 26 =>
            __reason = Option(_input__.readString())
          case 42 =>
            __payload = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.AvailabilityCheckResult(
          ctx = __ctx,
          availability = __availability,
          reason = __reason,
          payload = __payload
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: AvailabilityCheckResult = copy(ctx = None)
    def withCtx(__v: common.Context): AvailabilityCheckResult = copy(ctx = Option(__v))
    def getAvailability: _root_.scala.Boolean = availability.getOrElse(false)
    def clearAvailability: AvailabilityCheckResult = copy(availability = None)
    def withAvailability(__v: _root_.scala.Boolean): AvailabilityCheckResult = copy(availability = Option(__v))
    def getReason: _root_.scala.Predef.String = reason.getOrElse("")
    def clearReason: AvailabilityCheckResult = copy(reason = None)
    def withReason(__v: _root_.scala.Predef.String): AvailabilityCheckResult = copy(reason = Option(__v))
    def getPayload: _root_.scala.Predef.String = payload.getOrElse("")
    def clearPayload: AvailabilityCheckResult = copy(payload = None)
    def withPayload(__v: _root_.scala.Predef.String): AvailabilityCheckResult = copy(payload = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => availability.orNull
        case 3 => reason.orNull
        case 5 => payload.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => availability.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => reason.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => payload.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.AvailabilityCheckResult
}

object AvailabilityCheckResult extends scalapb.GeneratedMessageCompanion[conversation.AvailabilityCheckResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.AvailabilityCheckResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.AvailabilityCheckResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.AvailabilityCheckResult(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.AvailabilityCheckResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.AvailabilityCheckResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.AvailabilityCheckResult(
  )
  implicit class AvailabilityCheckResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.AvailabilityCheckResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.AvailabilityCheckResult](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def availability: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getAvailability)((c_, f_) => c_.copy(availability = Option(f_)))
    def optionalAvailability: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.availability)((c_, f_) => c_.copy(availability = f_))
    def reason: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getReason)((c_, f_) => c_.copy(reason = Option(f_)))
    def optionalReason: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.reason)((c_, f_) => c_.copy(reason = f_))
    def payload: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPayload)((c_, f_) => c_.copy(payload = Option(f_)))
    def optionalPayload: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val AVAILABILITY_FIELD_NUMBER = 2
  final val REASON_FIELD_NUMBER = 3
  final val PAYLOAD_FIELD_NUMBER = 5
}
