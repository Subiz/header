// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

/** @param key
  *   user.name user.phone
  */
@SerialVersionUID(0L)
final case class AskInfomation(
    question: scala.Option[_root_.scala.Predef.String] = None,
    inputType: scala.Option[_root_.scala.Predef.String] = None,
    key: scala.Option[_root_.scala.Predef.String] = None,
    answer: scala.Option[_root_.scala.Predef.String] = None,
    answered: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AskInfomation] with scalapb.lenses.Updatable[AskInfomation] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (question.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, question.get) }
      if (inputType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, inputType.get) }
      if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, key.get) }
      if (answer.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, answer.get) }
      if (answered.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, answered.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      question.foreach { __v =>
        _output__.writeString(2, __v)
      };
      inputType.foreach { __v =>
        _output__.writeString(3, __v)
      };
      key.foreach { __v =>
        _output__.writeString(4, __v)
      };
      answer.foreach { __v =>
        _output__.writeString(5, __v)
      };
      answered.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.AskInfomation = {
      var __question = this.question
      var __inputType = this.inputType
      var __key = this.key
      var __answer = this.answer
      var __answered = this.answered
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __question = Option(_input__.readString())
          case 26 =>
            __inputType = Option(_input__.readString())
          case 34 =>
            __key = Option(_input__.readString())
          case 42 =>
            __answer = Option(_input__.readString())
          case 48 =>
            __answered = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.AskInfomation(
          question = __question,
          inputType = __inputType,
          key = __key,
          answer = __answer,
          answered = __answered
      )
    }
    def getQuestion: _root_.scala.Predef.String = question.getOrElse("")
    def clearQuestion: AskInfomation = copy(question = None)
    def withQuestion(__v: _root_.scala.Predef.String): AskInfomation = copy(question = Option(__v))
    def getInputType: _root_.scala.Predef.String = inputType.getOrElse("")
    def clearInputType: AskInfomation = copy(inputType = None)
    def withInputType(__v: _root_.scala.Predef.String): AskInfomation = copy(inputType = Option(__v))
    def getKey: _root_.scala.Predef.String = key.getOrElse("")
    def clearKey: AskInfomation = copy(key = None)
    def withKey(__v: _root_.scala.Predef.String): AskInfomation = copy(key = Option(__v))
    def getAnswer: _root_.scala.Predef.String = answer.getOrElse("")
    def clearAnswer: AskInfomation = copy(answer = None)
    def withAnswer(__v: _root_.scala.Predef.String): AskInfomation = copy(answer = Option(__v))
    def getAnswered: _root_.scala.Long = answered.getOrElse(0L)
    def clearAnswered: AskInfomation = copy(answered = None)
    def withAnswered(__v: _root_.scala.Long): AskInfomation = copy(answered = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => question.orNull
        case 3 => inputType.orNull
        case 4 => key.orNull
        case 5 => answer.orNull
        case 6 => answered.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => question.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => inputType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => answer.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => answered.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.AskInfomation
}

object AskInfomation extends scalapb.GeneratedMessageCompanion[conversation.AskInfomation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.AskInfomation] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.AskInfomation = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.AskInfomation(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.AskInfomation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.AskInfomation(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(28)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(28)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.AskInfomation(
  )
  sealed trait InputType extends _root_.scalapb.GeneratedEnum {
    type EnumType = InputType
    def isphone: _root_.scala.Boolean = false
    def isemail: _root_.scala.Boolean = false
    def istext: _root_.scala.Boolean = false
    def ispassword: _root_.scala.Boolean = false
    def isnumber: _root_.scala.Boolean = false
    def isdate: _root_.scala.Boolean = false
    def iscolor: _root_.scala.Boolean = false
    def islocation: _root_.scala.Boolean = false
    def istime: _root_.scala.Boolean = false
    def isurl: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[InputType] = conversation.AskInfomation.InputType
  }
  
  object InputType extends _root_.scalapb.GeneratedEnumCompanion[InputType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[InputType] = this
    @SerialVersionUID(0L)
    case object phone extends InputType {
      val value = 0
      val index = 0
      val name = "phone"
      override def isphone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object email extends InputType {
      val value = 1
      val index = 1
      val name = "email"
      override def isemail: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object text extends InputType {
      val value = 2
      val index = 2
      val name = "text"
      override def istext: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object password extends InputType {
      val value = 3
      val index = 3
      val name = "password"
      override def ispassword: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object number extends InputType {
      val value = 4
      val index = 4
      val name = "number"
      override def isnumber: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object date extends InputType {
      val value = 5
      val index = 5
      val name = "date"
      override def isdate: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object color extends InputType {
      val value = 6
      val index = 6
      val name = "color"
      override def iscolor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object location extends InputType {
      val value = 7
      val index = 7
      val name = "location"
      override def islocation: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object time extends InputType {
      val value = 8
      val index = 8
      val name = "time"
      override def istime: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object url extends InputType {
      val value = 9
      val index = 9
      val name = "url"
      override def isurl: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends InputType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(phone, email, text, password, number, date, color, location, time, url)
    def fromValue(value: _root_.scala.Int): InputType = value match {
      case 0 => phone
      case 1 => email
      case 2 => text
      case 3 => password
      case 4 => number
      case 5 => date
      case 6 => color
      case 7 => location
      case 8 => time
      case 9 => url
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.AskInfomation.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.AskInfomation.scalaDescriptor.enums(0)
  }
  implicit class AskInfomationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.AskInfomation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.AskInfomation](_l) {
    def question: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getQuestion)((c_, f_) => c_.copy(question = Option(f_)))
    def optionalQuestion: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.question)((c_, f_) => c_.copy(question = f_))
    def inputType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getInputType)((c_, f_) => c_.copy(inputType = Option(f_)))
    def optionalInputType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.inputType)((c_, f_) => c_.copy(inputType = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = Option(f_)))
    def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def answer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnswer)((c_, f_) => c_.copy(answer = Option(f_)))
    def optionalAnswer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.answer)((c_, f_) => c_.copy(answer = f_))
    def answered: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getAnswered)((c_, f_) => c_.copy(answered = Option(f_)))
    def optionalAnswered: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.answered)((c_, f_) => c_.copy(answered = f_))
  }
  final val QUESTION_FIELD_NUMBER = 2
  final val INPUT_TYPE_FIELD_NUMBER = 3
  final val KEY_FIELD_NUMBER = 4
  final val ANSWER_FIELD_NUMBER = 5
  final val ANSWERED_FIELD_NUMBER = 6
}
