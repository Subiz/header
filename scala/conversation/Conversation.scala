// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

/** @param state
  *   converation state
  * @param accepted
  *   time chat is accepted after being in unassigned list
  * @param lastMessageId
  *   internal use only
  */
@SerialVersionUID(0L)
final case class Conversation(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    closed: scala.Option[_root_.scala.Long] = None,
    members: _root_.scala.collection.Seq[conversation.Member] = _root_.scala.collection.Seq.empty,
    tags: _root_.scala.collection.Seq[conversation.Tag] = _root_.scala.collection.Seq.empty,
    state: scala.Option[_root_.scala.Predef.String] = None,
    request: scala.Option[conversation.StartRequest] = None,
    accepted: scala.Option[_root_.scala.Long] = None,
    channelType: scala.Option[_root_.scala.Predef.String] = None,
    integration: scala.Option[conversation.Integration] = None,
    actived: scala.Option[_root_.scala.Long] = None,
    lastMessageId: scala.Option[_root_.scala.Predef.String] = None,
    lastMessage: scala.Option[conversation.Message] = None,
    responseSec: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Conversation] with scalapb.lenses.Updatable[Conversation] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, created.get) }
      if (closed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, closed.get) }
      members.foreach(members => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(members.serializedSize) + members.serializedSize)
      tags.foreach(tags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tags.serializedSize) + tags.serializedSize)
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, state.get) }
      if (request.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(request.get.serializedSize) + request.get.serializedSize }
      if (accepted.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, accepted.get) }
      if (channelType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, channelType.get) }
      if (integration.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(integration.get.serializedSize) + integration.get.serializedSize }
      if (actived.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(19, actived.get) }
      if (lastMessageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, lastMessageId.get) }
      if (lastMessage.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(lastMessage.get.serializedSize) + lastMessage.get.serializedSize }
      if (responseSec.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(22, responseSec.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      closed.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      members.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      tags.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      state.foreach { __v =>
        _output__.writeString(11, __v)
      };
      request.foreach { __v =>
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accepted.foreach { __v =>
        _output__.writeInt64(15, __v)
      };
      channelType.foreach { __v =>
        _output__.writeString(17, __v)
      };
      integration.foreach { __v =>
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      actived.foreach { __v =>
        _output__.writeInt64(19, __v)
      };
      lastMessage.foreach { __v =>
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      lastMessageId.foreach { __v =>
        _output__.writeString(21, __v)
      };
      responseSec.foreach { __v =>
        _output__.writeInt64(22, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Conversation = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __created = this.created
      var __closed = this.closed
      val __members = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Member] ++= this.members)
      val __tags = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Tag] ++= this.tags)
      var __state = this.state
      var __request = this.request
      var __accepted = this.accepted
      var __channelType = this.channelType
      var __integration = this.integration
      var __actived = this.actived
      var __lastMessageId = this.lastMessageId
      var __lastMessage = this.lastMessage
      var __responseSec = this.responseSec
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 32 =>
            __created = Option(_input__.readInt64())
          case 48 =>
            __closed = Option(_input__.readInt64())
          case 58 =>
            __members += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Member.defaultInstance)
          case 82 =>
            __tags += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Tag.defaultInstance)
          case 90 =>
            __state = Option(_input__.readString())
          case 114 =>
            __request = Option(_root_.scalapb.LiteParser.readMessage(_input__, __request.getOrElse(conversation.StartRequest.defaultInstance)))
          case 120 =>
            __accepted = Option(_input__.readInt64())
          case 138 =>
            __channelType = Option(_input__.readString())
          case 146 =>
            __integration = Option(_root_.scalapb.LiteParser.readMessage(_input__, __integration.getOrElse(conversation.Integration.defaultInstance)))
          case 152 =>
            __actived = Option(_input__.readInt64())
          case 170 =>
            __lastMessageId = Option(_input__.readString())
          case 162 =>
            __lastMessage = Option(_root_.scalapb.LiteParser.readMessage(_input__, __lastMessage.getOrElse(conversation.Message.defaultInstance)))
          case 176 =>
            __responseSec = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Conversation(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          created = __created,
          closed = __closed,
          members = __members.result(),
          tags = __tags.result(),
          state = __state,
          request = __request,
          accepted = __accepted,
          channelType = __channelType,
          integration = __integration,
          actived = __actived,
          lastMessageId = __lastMessageId,
          lastMessage = __lastMessage,
          responseSec = __responseSec
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Conversation = copy(ctx = None)
    def withCtx(__v: common.Context): Conversation = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Conversation = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Conversation = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Conversation = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Conversation = copy(accountId = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Conversation = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Conversation = copy(created = Option(__v))
    def getClosed: _root_.scala.Long = closed.getOrElse(0L)
    def clearClosed: Conversation = copy(closed = None)
    def withClosed(__v: _root_.scala.Long): Conversation = copy(closed = Option(__v))
    def clearMembers = copy(members = _root_.scala.collection.Seq.empty)
    def addMembers(__vs: conversation.Member*): Conversation = addAllMembers(__vs)
    def addAllMembers(__vs: TraversableOnce[conversation.Member]): Conversation = copy(members = members ++ __vs)
    def withMembers(__v: _root_.scala.collection.Seq[conversation.Member]): Conversation = copy(members = __v)
    def clearTags = copy(tags = _root_.scala.collection.Seq.empty)
    def addTags(__vs: conversation.Tag*): Conversation = addAllTags(__vs)
    def addAllTags(__vs: TraversableOnce[conversation.Tag]): Conversation = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.collection.Seq[conversation.Tag]): Conversation = copy(tags = __v)
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Conversation = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Conversation = copy(state = Option(__v))
    def getRequest: conversation.StartRequest = request.getOrElse(conversation.StartRequest.defaultInstance)
    def clearRequest: Conversation = copy(request = None)
    def withRequest(__v: conversation.StartRequest): Conversation = copy(request = Option(__v))
    def getAccepted: _root_.scala.Long = accepted.getOrElse(0L)
    def clearAccepted: Conversation = copy(accepted = None)
    def withAccepted(__v: _root_.scala.Long): Conversation = copy(accepted = Option(__v))
    def getChannelType: _root_.scala.Predef.String = channelType.getOrElse("")
    def clearChannelType: Conversation = copy(channelType = None)
    def withChannelType(__v: _root_.scala.Predef.String): Conversation = copy(channelType = Option(__v))
    def getIntegration: conversation.Integration = integration.getOrElse(conversation.Integration.defaultInstance)
    def clearIntegration: Conversation = copy(integration = None)
    def withIntegration(__v: conversation.Integration): Conversation = copy(integration = Option(__v))
    def getActived: _root_.scala.Long = actived.getOrElse(0L)
    def clearActived: Conversation = copy(actived = None)
    def withActived(__v: _root_.scala.Long): Conversation = copy(actived = Option(__v))
    def getLastMessageId: _root_.scala.Predef.String = lastMessageId.getOrElse("")
    def clearLastMessageId: Conversation = copy(lastMessageId = None)
    def withLastMessageId(__v: _root_.scala.Predef.String): Conversation = copy(lastMessageId = Option(__v))
    def getLastMessage: conversation.Message = lastMessage.getOrElse(conversation.Message.defaultInstance)
    def clearLastMessage: Conversation = copy(lastMessage = None)
    def withLastMessage(__v: conversation.Message): Conversation = copy(lastMessage = Option(__v))
    def getResponseSec: _root_.scala.Long = responseSec.getOrElse(0L)
    def clearResponseSec: Conversation = copy(responseSec = None)
    def withResponseSec(__v: _root_.scala.Long): Conversation = copy(responseSec = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => created.orNull
        case 6 => closed.orNull
        case 7 => members
        case 10 => tags
        case 11 => state.orNull
        case 14 => request.orNull
        case 15 => accepted.orNull
        case 17 => channelType.orNull
        case 18 => integration.orNull
        case 19 => actived.orNull
        case 21 => lastMessageId.orNull
        case 20 => lastMessage.orNull
        case 22 => responseSec.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => closed.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(members.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PRepeated(tags.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 11 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => request.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => accepted.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => channelType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => integration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => actived.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => lastMessageId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => lastMessage.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => responseSec.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Conversation
}

object Conversation extends scalapb.GeneratedMessageCompanion[conversation.Conversation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Conversation] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Conversation = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Conversation(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Member]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Tag]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[conversation.StartRequest]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[conversation.Integration]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[conversation.Message]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Conversation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Conversation(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[conversation.Member]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[conversation.Tag]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[conversation.StartRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[conversation.Integration]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[conversation.Message]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 7 => __out = conversation.Member
      case 10 => __out = conversation.Tag
      case 14 => __out = conversation.StartRequest
      case 18 => __out = conversation.Integration
      case 20 => __out = conversation.Message
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Conversation(
  )
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def isconversationnone: _root_.scala.Boolean = false
    def isunassigned: _root_.scala.Boolean = false
    def isactive: _root_.scala.Boolean = false
    def isended: _root_.scala.Boolean = false
    def ispending: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = conversation.Conversation.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object conversation_none extends State {
      val value = 0
      val index = 0
      val name = "conversation_none"
      override def isconversationnone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object unassigned extends State {
      val value = 2
      val index = 1
      val name = "unassigned"
      override def isunassigned: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object active extends State {
      val value = 6
      val index = 2
      val name = "active"
      override def isactive: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ended extends State {
      val value = 8
      val index = 3
      val name = "ended"
      override def isended: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object pending extends State {
      val value = 9
      val index = 4
      val name = "pending"
      override def ispending: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(conversation_none, unassigned, active, ended, pending)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => conversation_none
      case 2 => unassigned
      case 6 => active
      case 8 => ended
      case 9 => pending
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.Conversation.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.Conversation.scalaDescriptor.enums(0)
  }
  implicit class ConversationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Conversation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Conversation](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def closed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getClosed)((c_, f_) => c_.copy(closed = Option(f_)))
    def optionalClosed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.closed)((c_, f_) => c_.copy(closed = f_))
    def members: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Member]] = field(_.members)((c_, f_) => c_.copy(members = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Tag]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def request: _root_.scalapb.lenses.Lens[UpperPB, conversation.StartRequest] = field(_.getRequest)((c_, f_) => c_.copy(request = Option(f_)))
    def optionalRequest: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.StartRequest]] = field(_.request)((c_, f_) => c_.copy(request = f_))
    def accepted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getAccepted)((c_, f_) => c_.copy(accepted = Option(f_)))
    def optionalAccepted: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.accepted)((c_, f_) => c_.copy(accepted = f_))
    def channelType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getChannelType)((c_, f_) => c_.copy(channelType = Option(f_)))
    def optionalChannelType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.channelType)((c_, f_) => c_.copy(channelType = f_))
    def integration: _root_.scalapb.lenses.Lens[UpperPB, conversation.Integration] = field(_.getIntegration)((c_, f_) => c_.copy(integration = Option(f_)))
    def optionalIntegration: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Integration]] = field(_.integration)((c_, f_) => c_.copy(integration = f_))
    def actived: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getActived)((c_, f_) => c_.copy(actived = Option(f_)))
    def optionalActived: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.actived)((c_, f_) => c_.copy(actived = f_))
    def lastMessageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastMessageId)((c_, f_) => c_.copy(lastMessageId = Option(f_)))
    def optionalLastMessageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lastMessageId)((c_, f_) => c_.copy(lastMessageId = f_))
    def lastMessage: _root_.scalapb.lenses.Lens[UpperPB, conversation.Message] = field(_.getLastMessage)((c_, f_) => c_.copy(lastMessage = Option(f_)))
    def optionalLastMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Message]] = field(_.lastMessage)((c_, f_) => c_.copy(lastMessage = f_))
    def responseSec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getResponseSec)((c_, f_) => c_.copy(responseSec = Option(f_)))
    def optionalResponseSec: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.responseSec)((c_, f_) => c_.copy(responseSec = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CREATED_FIELD_NUMBER = 4
  final val CLOSED_FIELD_NUMBER = 6
  final val MEMBERS_FIELD_NUMBER = 7
  final val TAGS_FIELD_NUMBER = 10
  final val STATE_FIELD_NUMBER = 11
  final val REQUEST_FIELD_NUMBER = 14
  final val ACCEPTED_FIELD_NUMBER = 15
  final val CHANNEL_TYPE_FIELD_NUMBER = 17
  final val INTEGRATION_FIELD_NUMBER = 18
  final val ACTIVED_FIELD_NUMBER = 19
  final val LAST_MESSAGE_ID_FIELD_NUMBER = 21
  final val LAST_MESSAGE_FIELD_NUMBER = 20
  final val RESPONSE_SEC_FIELD_NUMBER = 22
}
