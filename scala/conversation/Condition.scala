// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

/** @param key
  *   unique
  * @param operator
  *   = # regex
  * @param value
  *   JSON
  */
@SerialVersionUID(0L)
final case class Condition(
    join: scala.Option[_root_.scala.Predef.String] = None,
    key: scala.Option[_root_.scala.Predef.String] = None,
    operator: scala.Option[_root_.scala.Predef.String] = None,
    value: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Condition] with scalapb.lenses.Updatable[Condition] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (join.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, join.get) }
      if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, key.get) }
      if (operator.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, operator.get) }
      if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, value.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      join.foreach { __v =>
        _output__.writeString(1, __v)
      };
      key.foreach { __v =>
        _output__.writeString(2, __v)
      };
      operator.foreach { __v =>
        _output__.writeString(3, __v)
      };
      value.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Condition = {
      var __join = this.join
      var __key = this.key
      var __operator = this.operator
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __join = Option(_input__.readString())
          case 18 =>
            __key = Option(_input__.readString())
          case 26 =>
            __operator = Option(_input__.readString())
          case 34 =>
            __value = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Condition(
          join = __join,
          key = __key,
          operator = __operator,
          value = __value
      )
    }
    def getJoin: _root_.scala.Predef.String = join.getOrElse("")
    def clearJoin: Condition = copy(join = None)
    def withJoin(__v: _root_.scala.Predef.String): Condition = copy(join = Option(__v))
    def getKey: _root_.scala.Predef.String = key.getOrElse("")
    def clearKey: Condition = copy(key = None)
    def withKey(__v: _root_.scala.Predef.String): Condition = copy(key = Option(__v))
    def getOperator: _root_.scala.Predef.String = operator.getOrElse("")
    def clearOperator: Condition = copy(operator = None)
    def withOperator(__v: _root_.scala.Predef.String): Condition = copy(operator = Option(__v))
    def getValue: _root_.scala.Predef.String = value.getOrElse("")
    def clearValue: Condition = copy(value = None)
    def withValue(__v: _root_.scala.Predef.String): Condition = copy(value = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => join.orNull
        case 2 => key.orNull
        case 3 => operator.orNull
        case 4 => value.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => join.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => operator.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => value.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Condition
}

object Condition extends scalapb.GeneratedMessageCompanion[conversation.Condition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Condition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Condition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Condition(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Condition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Condition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Condition(
  )
  sealed trait JoinOperator extends _root_.scalapb.GeneratedEnum {
    type EnumType = JoinOperator
    def isnone: _root_.scala.Boolean = false
    def isand: _root_.scala.Boolean = false
    def isor: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[JoinOperator] = conversation.Condition.JoinOperator
  }
  
  object JoinOperator extends _root_.scalapb.GeneratedEnumCompanion[JoinOperator] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[JoinOperator] = this
    @SerialVersionUID(0L)
    case object none extends JoinOperator {
      val value = 0
      val index = 0
      val name = "none"
      override def isnone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object and extends JoinOperator {
      val value = 1
      val index = 1
      val name = "and"
      override def isand: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object or extends JoinOperator {
      val value = 2
      val index = 2
      val name = "or"
      override def isor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends JoinOperator with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(none, and, or)
    def fromValue(value: _root_.scala.Int): JoinOperator = value match {
      case 0 => none
      case 1 => and
      case 2 => or
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.Condition.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.Condition.scalaDescriptor.enums(0)
  }
  implicit class ConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Condition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Condition](_l) {
    def join: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getJoin)((c_, f_) => c_.copy(join = Option(f_)))
    def optionalJoin: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.join)((c_, f_) => c_.copy(join = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = Option(f_)))
    def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def operator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getOperator)((c_, f_) => c_.copy(operator = Option(f_)))
    def optionalOperator: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.operator)((c_, f_) => c_.copy(operator = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
    def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val JOIN_FIELD_NUMBER = 1
  final val KEY_FIELD_NUMBER = 2
  final val OPERATOR_FIELD_NUMBER = 3
  final val VALUE_FIELD_NUMBER = 4
}
