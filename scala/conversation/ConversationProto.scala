// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

object ConversationProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    common.CommonProto,
    user.UserProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    conversation.Rule,
    conversation.AvailabilityCheckRequest,
    conversation.AvailabilityCheckResult,
    conversation.Condition,
    conversation.Route,
    conversation.RouteResult,
    conversation.MemberSeen,
    conversation.MemberV3,
    conversation.Member,
    conversation.Conversation,
    conversation.UserConversation,
    conversation.StartRequest,
    conversation.Conversations,
    conversation.Search,
    conversation.ListConversationsRequest,
    conversation.ListEventsRequest,
    conversation.ListConversationsByUserRequest,
    conversation.RequestState,
    conversation.Reaction,
    conversation.EsMessage,
    conversation.Message,
    conversation.Computed,
    conversation.Seen,
    conversation.Ack,
    conversation.Received,
    conversation.Field,
    conversation.Button,
    conversation.AskInfomationAnswer,
    conversation.AskInfomation,
    conversation.GenericElementTemplate,
    conversation.Attachment,
    conversation.Form,
    conversation.FormSubmit,
    conversation.FormField,
    conversation.Tag,
    conversation.CannedResponse,
    conversation.CannedResponses,
    conversation.Tags,
    conversation.Postback,
    conversation.UseConnector,
    conversation.Integrations,
    conversation.Integration,
    conversation.SearchMessageRequest,
    conversation.MessageId,
    conversation.MessageAck,
    conversation.TagRequest,
    conversation.CountByAgentRequest,
    conversation.CountByGroupRequest,
    conversation.CountByAgentsRequest,
    conversation.CountByTagsRequest,
    conversation.CountByAgent,
    conversation.CountByGroup,
    conversation.CountByTag,
    conversation.CountByTagsResponse,
    conversation.CountByAgentsResponse,
    conversation.AvgResponseTimeRequest,
    conversation.AvgResponseTimeResponse,
    conversation.TotalConversationResponse
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjpiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci9jb252ZXJzYXRpb24vY29udmVyc2F0aW9uLnByb3RvEgxjb252ZXJzYXRpb
  24aLmJpdGJ1Y2tldC5vcmcvc3ViaXovaGVhZGVyL2NvbW1vbi9jb21tb24ucHJvdG8aKmJpdGJ1Y2tldC5vcmcvc3ViaXovaGVhZ
  GVyL3VzZXIvdXNlci5wcm90byLvAwoEUnVsZRIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAIgASgJU
  gJpZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGgoIcHJpb3JpdHkYBCABKAVSCHByaW9yaXR5EhoKCHN0cmF0ZWd5G
  AUgASgJUghzdHJhdGVneRIdCgphc3NpZ25fdG9zGAYgAygJUglhc3NpZ25Ub3MSNwoKY29uZGl0aW9ucxgHIAMoCzIXLmNvbnZlc
  nNhdGlvbi5Db25kaXRpb25SCmNvbmRpdGlvbnMSGAoHZW5hYmxlZBgIIAEoCFIHZW5hYmxlZBIYCgdjcmVhdGVkGAkgASgDUgdjc
  mVhdGVkEhoKCG1vZGlmaWVkGAwgASgDUghtb2RpZmllZBISCgRuYW1lGAogASgJUgRuYW1lEiAKC2Rlc2NyaXB0aW9uGAsgASgJU
  gtkZXNjcmlwdGlvbiJ/Cg5Bc3NpZ25TdHJhdGVneRIOCgphbGxfYWdlbnRzEAASDgoKYWdlbnRncm91cBACEgoKBmFnZW50cxADE
  g8KC21vc3RfcmVjZW50EAQSGQoVcm91bmRyb2Jpbl9hbGxfYWdlbnRzEAUSFQoRcm91bmRyb2Jpbl9hZ2VudHMQBiK8AQoYQXZha
  WxhYmlsaXR5Q2hlY2tSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSJQoOaW50ZWdyYXRpb25faWQYA
  yABKAlSDWludGVncmF0aW9uSWQSHgoEdXNlchgEIAEoCzIKLnVzZXIuVXNlclIEdXNlchIdCgphY2NvdW50X2lkGAUgASgJUglhY
  2NvdW50SWQSFwoHdXNlcl9pZBgGIAEoCVIGdXNlcklkIpIBChdBdmFpbGFiaWxpdHlDaGVja1Jlc3VsdBIhCgNjdHgYASABKAsyD
  y5jb21tb24uQ29udGV4dFIDY3R4EiIKDGF2YWlsYWJpbGl0eRgCIAEoCFIMYXZhaWxhYmlsaXR5EhYKBnJlYXNvbhgDIAEoCVIGc
  mVhc29uEhgKB3BheWxvYWQYBSABKAlSB3BheWxvYWQijgEKCUNvbmRpdGlvbhISCgRqb2luGAEgASgJUgRqb2luEhAKA2tleRgCI
  AEoCVIDa2V5EhoKCG9wZXJhdG9yGAMgASgJUghvcGVyYXRvchIUCgV2YWx1ZRgEIAEoCVIFdmFsdWUiKQoMSm9pbk9wZXJhdG9yE
  ggKBG5vbmUQABIHCgNhbmQQARIGCgJvchACIlQKBVJvdXRlEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSKAoFc
  nVsZXMYAiADKAsyEi5jb252ZXJzYXRpb24uUnVsZVIFcnVsZXMiegoLUm91dGVSZXN1bHQSFwoHcnVsZV9pZBgBIAEoCVIGcnVsZ
  UlkEhoKCHN0cmF0ZWd5GAMgASgJUghzdHJhdGVneRIbCglhZ2VudF9pZHMYBCADKAlSCGFnZW50SWRzEhkKCGdyb3VwX2lkGAUgA
  SgJUgdncm91cElkIkgKCk1lbWJlclNlZW4SGwoJbWVtYmVyX2lkGAIgASgJUghtZW1iZXJJZBIdCgptZXNzYWdlX2lkGAMgASgJU
  gltZXNzYWdlSWQizAEKCE1lbWJlclYzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYBCABKAlSAmlkE
  icKD2NvbnZlcnNhdGlvbl9pZBgFIAEoCVIOY29udmVyc2F0aW9uSWQSHQoKYWNjb3VudF9pZBgGIAEoCVIJYWNjb3VudElkEhIKB
  G5hbWUYByABKAlSBG5hbWUSHQoKYXZhdGFyX3VybBgIIAEoCVIJYXZhdGFyVXJsEhIKBHR5cGUYCSABKAlSBHR5cGUitwEKBk1lb
  WJlchISCgR0eXBlGAMgASgJUgR0eXBlEhkKCHN1Yml6X2lkGAggASgJUgdzdWJpeklkEg4KAmlkGAQgASgJUgJpZBISCgRuYW1lG
  AogASgJUgRuYW1lEh0KCmF2YXRhcl91cmwYBiABKAlSCWF2YXRhclVybBISCgRsZWZ0GAsgASgIUgRsZWZ0EicKD2NvbnZlcnNhd
  Glvbl9pZBgNIAEoCVIOY29udmVyc2F0aW9uSWQipAUKDENvbnZlcnNhdGlvbhIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eg4KAmlkGAIgASgJUgJpZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGAoHY3JlYXRlZBgEIAEoA1IHY3JlY
  XRlZBIWCgZjbG9zZWQYBiABKANSBmNsb3NlZBIuCgdtZW1iZXJzGAcgAygLMhQuY29udmVyc2F0aW9uLk1lbWJlclIHbWVtYmVyc
  xIlCgR0YWdzGAogAygLMhEuY29udmVyc2F0aW9uLlRhZ1IEdGFncxIUCgVzdGF0ZRgLIAEoCVIFc3RhdGUSNAoHcmVxdWVzdBgOI
  AEoCzIaLmNvbnZlcnNhdGlvbi5TdGFydFJlcXVlc3RSB3JlcXVlc3QSGgoIYWNjZXB0ZWQYDyABKANSCGFjY2VwdGVkEiEKDGNoY
  W5uZWxfdHlwZRgRIAEoCVILY2hhbm5lbFR5cGUSOwoLaW50ZWdyYXRpb24YEiABKAsyGS5jb252ZXJzYXRpb24uSW50ZWdyYXRpb
  25SC2ludGVncmF0aW9uEhgKB2FjdGl2ZWQYEyABKANSB2FjdGl2ZWQSJgoPbGFzdF9tZXNzYWdlX2lkGBUgASgJUg1sYXN0TWVzc
  2FnZUlkEjgKDGxhc3RfbWVzc2FnZRgUIAEoCzIVLmNvbnZlcnNhdGlvbi5NZXNzYWdlUgtsYXN0TWVzc2FnZRIhCgxyZXNwb25zZ
  V9zZWMYFiABKANSC3Jlc3BvbnNlU2VjIlIKBVN0YXRlEhUKEWNvbnZlcnNhdGlvbl9ub25lEAASDgoKdW5hc3NpZ25lZBACEgoKB
  mFjdGl2ZRAGEgkKBWVuZGVkEAgSCwoHcGVuZGluZxAJIqMBChBVc2VyQ29udmVyc2F0aW9uEh0KCmFjY291bnRfaWQYBiABKAlSC
  WFjY291bnRJZBIUCgVzdGF0ZRgLIAEoCVIFc3RhdGUSFwoHdXNlcl9pZBgCIAEoCVIGdXNlcklkEhkKCGNvbnZvX2lkGAQgASgJU
  gdjb252b0lkEiYKD2xhc3Rfc2Vlbl9ldmVudBgFIAEoCVINbGFzdFNlZW5FdmVudCLJBQoMU3RhcnRSZXF1ZXN0EiEKA2N0eBgBI
  AEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYAiABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIhC
  gxjaGFubmVsX3R5cGUYBCABKAlSC2NoYW5uZWxUeXBlEhIKBGZyb20YDCABKAlSBGZyb20SDgoCdG8YBSADKAlSAnRvEhkKCHBhZ
  2VfdXJsGAYgASgJUgdwYWdlVXJsEh0KCnBhZ2VfdGl0bGUYByABKAlSCXBhZ2VUaXRsZRIYCgdtZXNzYWdlGAggASgJUgdtZXNzY
  WdlEikKEGJyb3dzZXJfbGFuZ3VhZ2UYCSABKAlSD2Jyb3dzZXJMYW5ndWFnZRIaCghsYW5ndWFnZRgKIAEoCVIIbGFuZ3VhZ2USH
  woLZGV2aWNlX3R5cGUYCyABKAlSCmRldmljZVR5cGUSGAoHY3JlYXRlZBgNIAEoA1IHY3JlYXRlZBInCg9jb252ZXJzYXRpb25fa
  WQYDiABKAlSDmNvbnZlcnNhdGlvbklkEg4KAmlwGA8gASgJUgJpcBIYCgdjb3VudHJ5GBAgASgJUgdjb3VudHJ5EiEKDGNvdW50c
  nlfY29kZRgRIAEoCVILY291bnRyeUNvZGUSEgoEY2l0eRgSIAEoCVIEY2l0eRIaCgh0aW1lem9uZRgTIAEoCVIIdGltZXpvbmUSH
  QoKc3RhcnRlcl9pZBgUIAEoCVIJc3RhcnRlcklkEiEKDHN0YXJ0ZXJfdHlwZRgVIAEoCVILc3RhcnRlclR5cGUSGwoJYWdlbnRfa
  WRzGBYgAygJUghhZ2VudElkcxIeCgR1c2VyGBkgASgLMgoudXNlci5Vc2VyUgR1c2VyEiUKDmludGVncmF0aW9uX2lkGBogASgJU
  g1pbnRlZ3JhdGlvbklkIqcBCg1Db252ZXJzYXRpb25zEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSQAoNY29ud
  mVyc2F0aW9ucxgDIAMoCzIaLmNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb25SDWNvbnZlcnNhdGlvbnMSFgoGYW5jaG9yGAQgASgJU
  gZhbmNob3ISGQoIdXNlcl9pZHMYBSADKAlSB3VzZXJJZHMisgEKBlNlYXJjaBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIYCgdrZXl3b3JkGAQgASgJUgdrZXl3b3JkEhQKBWxpbWl0GAUgA
  SgFUgVsaW1pdBIbCgliZWZvcmVfaWQYBiABKAlSCGJlZm9yZUlkEhkKCGFmdGVyX2lkGAcgASgJUgdhZnRlcklkIv8BChhMaXN0Q
  29udmVyc2F0aW9uc1JlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAMgASgJU
  glhY2NvdW50SWQSFAoFc3RhdGUYBCABKAlSBXN0YXRlEhQKBWxpbWl0GAUgASgFUgVsaW1pdBIWCgZhbmNob3IYBiABKAlSBmFuY
  2hvchIbCgltZW1iZXJfaWQYCCABKAlSCG1lbWJlcklkEhkKCGdyb3VwX2J5GAkgASgJUgdncm91cEJ5EiUKDmludGVncmF0aW9uX
  2lkGAogASgJUg1pbnRlZ3JhdGlvbklkIq8BChFMaXN0RXZlbnRzUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBInCg9jb252ZXJzYXRpb25faWQYAyABKAlSDmNvbnZlcnNhdGlvb
  klkEhkKCHN0YXJ0X2lkGAQgASgJUgdzdGFydElkEhQKBWxpbWl0GAYgASgFUgVsaW1pdCKoAQoeTGlzdENvbnZlcnNhdGlvbnNCe
  VVzZXJSZXF1ZXN0Eh0KCmFjY291bnRfaWQYASABKAlSCWFjY291bnRJZBIdCgpjaGFubmVsX2lkGAIgASgJUgljaGFubmVsSWQSF
  woHdXNlcl9pZBgDIAEoCVIGdXNlcklkEhkKCHN0YXJ0X2lkGAQgASgJUgdzdGFydElkEhQKBWxpbWl0GAUgASgFUgVsaW1pdCJ1C
  gxSZXF1ZXN0U3RhdGUSHQoKYWNjb3VudF9pZBgBIAEoCVIJYWNjb3VudElkEicKD2NvbnZlcnNhdGlvbl9pZBgCIAEoCVIOY29ud
  mVyc2F0aW9uSWQSHQoKY2hhbm5lbF9pZBgDIAEoCVIJY2hhbm5lbElkIkoKCFJlYWN0aW9uEhIKBG5hbWUYAyABKAlSBG5hbWUSF
  AoFY291bnQYBCABKAVSBWNvdW50EhQKBXVzZXJzGAUgAygJUgV1c2VycyLQAQoJRXNNZXNzYWdlEg4KAmlkGAIgASgJUgJpZBIdC
  gphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSJwoPY29udmVyc2F0aW9uX2lkGAQgASgJUg5jb252ZXJzYXRpb25JZBIdCgptZ
  W1iZXJfaWRzGAUgAygJUgltZW1iZXJJZHMSEgoEdGV4dBgGIAEoCVIEdGV4dBIgCgthdHRhY2htZW50cxgHIAMoCVILYXR0YWNob
  WVudHMSFgoGZmllbGRzGAggAygJUgZmaWVsZHMiqgMKB01lc3NhZ2USIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0e
  BIdCgphY2NvdW50X2lkGAUgASgJUglhY2NvdW50SWQSJwoPY29udmVyc2F0aW9uX2lkGA4gASgJUg5jb252ZXJzYXRpb25JZBIOC
  gJpZBgLIAEoCVICaWQSEgoEdGV4dBgCIAEoCVIEdGV4dBIWCgZmb3JtYXQYAyABKAlSBmZvcm1hdBI6CgthdHRhY2htZW50cxgEI
  AMoCzIYLmNvbnZlcnNhdGlvbi5BdHRhY2htZW50UgthdHRhY2htZW50cxI0CglyZWFjdGlvbnMYByADKAsyFi5jb252ZXJzYXRpb
  24uUmVhY3Rpb25SCXJlYWN0aW9ucxIrCgZmaWVsZHMYCiADKAsyEy5jb252ZXJzYXRpb24uRmllbGRSBmZpZWxkcxIyCghjb21wd
  XRlZBgMIAEoCzIWLmNvbnZlcnNhdGlvbi5Db21wdXRlZFIIY29tcHV0ZWQSJQoOaW50ZWdyYXRpb25faWQYDyABKAlSDWludGVnc
  mF0aW9uSWQiiwEKCENvbXB1dGVkEiYKBHNlZW4YBCADKAsyEi5jb252ZXJzYXRpb24uU2VlblIEc2VlbhIjCgNhY2sYBSADKAsyE
  S5jb252ZXJzYXRpb24uQWNrUgNhY2sSMgoIcmVjZWl2ZWQYBiADKAsyFi5jb252ZXJzYXRpb24uUmVjZWl2ZWRSCHJlY2VpdmVkI
  jMKBFNlZW4SGwoJbWVtYmVyX2lkGAYgASgJUghtZW1iZXJJZBIOCgJhdBgEIAEoA1ICYXQiSAoDQWNrEhsKCW1lbWJlcl9pZBgFI
  AEoCVIIbWVtYmVySWQSFAoFZXJyb3IYBiABKAlSBWVycm9yEg4KAmF0GAQgASgDUgJhdCI3CghSZWNlaXZlZBIbCgltZW1iZXJfa
  WQYBCABKAlSCG1lbWJlcklkEg4KAmF0GAUgASgDUgJhdCIvCgVGaWVsZBIUCgV2YWx1ZRgDIAEoCVIFdmFsdWUSEAoDa2V5GAIgA
  SgJUgNrZXki7wEKBkJ1dHRvbhISCgR0eXBlGAIgASgJUgR0eXBlEg4KAmlkGA8gASgJUgJpZBIUCgV0aXRsZRgDIAEoCVIFdGl0b
  GUSGAoHcGF5bG9hZBgEIAEoCVIHcGF5bG9hZBIbCglpbWFnZV91cmwYBSABKAlSCGltYWdlVXJsEh0KCmNvbnRlbnRfaWQYCiABK
  AlSCWNvbnRlbnRJZBIQCgN1cmwYDiABKAlSA3VybCJDCgpCdXR0b25UeXBlEg4KCnVybF9idXR0b24QAhITCg9wb3N0YmFja19id
  XR0b24QAxIQCgxldmVudF9idXR0b24QBCJMChNBc2tJbmZvbWF0aW9uQW5zd2VyEh0KCm1lc3NhZ2VfaWQYAiABKAlSCW1lc3NhZ
  2VJZBIWCgZhbnN3ZXIYAyABKAlSBmFuc3dlciKNAgoNQXNrSW5mb21hdGlvbhIaCghxdWVzdGlvbhgCIAEoCVIIcXVlc3Rpb24SH
  QoKaW5wdXRfdHlwZRgDIAEoCVIJaW5wdXRUeXBlEhAKA2tleRgEIAEoCVIDa2V5EhYKBmFuc3dlchgFIAEoCVIGYW5zd2VyEhoKC
  GFuc3dlcmVkGAYgASgDUghhbnN3ZXJlZCJ7CglJbnB1dFR5cGUSCQoFcGhvbmUQABIJCgVlbWFpbBABEggKBHRleHQQAhIMCghwY
  XNzd29yZBADEgoKBm51bWJlchAEEggKBGRhdGUQBRIJCgVjb2xvchAGEgwKCGxvY2F0aW9uEAcSCAoEdGltZRAIEgcKA3VybBAJI
  tQBChZHZW5lcmljRWxlbWVudFRlbXBsYXRlEhQKBXRpdGxlGAIgASgJUgV0aXRsZRIbCglpbWFnZV91cmwYAyABKAlSCGltYWdlV
  XJsEhoKCHN1YnRpdGxlGAQgASgJUghzdWJ0aXRsZRI7Cg5kZWZhdWx0X2FjdGlvbhgFIAEoCzIULmNvbnZlcnNhdGlvbi5CdXR0b
  25SDWRlZmF1bHRBY3Rpb24SLgoHYnV0dG9ucxgGIAMoCzIULmNvbnZlcnNhdGlvbi5CdXR0b25SB2J1dHRvbnMi8wQKCkF0dGFja
  G1lbnQSEgoEdHlwZRgMIAEoCVIEdHlwZRIaCghtaW1ldHlwZRgCIAEoCVIIbWltZXR5cGUSEAoDdXJsGAMgASgJUgN1cmwSIwoNd
  Gh1bWJuYWlsX3VybBgEIAEoCVIMdGh1bWJuYWlsVXJsEhIKBG5hbWUYBSABKAlSBG5hbWUSIAoLZGVzY3JpcHRpb24YBiABKAlSC
  2Rlc2NyaXB0aW9uEhYKBmxlbmd0aBgPIAEoBVIGbGVuZ3RoEhIKBHNpemUYDSABKAVSBHNpemUSQAoIZWxlbWVudHMYCCADKAsyJ
  C5jb252ZXJzYXRpb24uR2VuZXJpY0VsZW1lbnRUZW1wbGF0ZVIIZWxlbWVudHMSFAoFdGl0bGUYCSABKAlSBXRpdGxlEhQKBWNvb
  G9yGAogASgJUgVjb2xvchIYCgdwcmV0ZXh0GAsgASgJUgdwcmV0ZXh0Ei4KB2J1dHRvbnMYECADKAsyFC5jb252ZXJzYXRpb24uQ
  nV0dG9uUgdidXR0b25zEjYKCGFza19pbmZvGBEgASgLMhsuY29udmVyc2F0aW9uLkFza0luZm9tYXRpb25SB2Fza0luZm8SSQoPY
  XNrX2luZm9fYW5zd2VyGBIgASgLMiEuY29udmVyc2F0aW9uLkFza0luZm9tYXRpb25BbnN3ZXJSDWFza0luZm9BbnN3ZXISJgoEZ
  m9ybRgUIAEoCzISLmNvbnZlcnNhdGlvbi5Gb3JtUgRmb3JtEjkKC2Zvcm1fc3VibWl0GBUgASgLMhguY29udmVyc2F0aW9uLkZvc
  m1TdWJtaXRSCmZvcm1TdWJtaXQiggEKBEZvcm0SFAoFdGl0bGUYAiABKAlSBXRpdGxlEhQKBXN0YXRlGAMgASgJUgVzdGF0ZRIvC
  gZmaWVsZHMYBCADKAsyFy5jb252ZXJzYXRpb24uRm9ybUZpZWxkUgZmaWVsZHMSHQoKc3VibWl0X3VybBgFIAEoCVIJc3VibWl0V
  XJsInsKCkZvcm1TdWJtaXQSJgoPZm9ybV9tZXNzYWdlX2lkGAIgASgJUg1mb3JtTWVzc2FnZUlkEi8KBmZpZWxkcxgDIAMoCzIXL
  mNvbnZlcnNhdGlvbi5Gb3JtRmllbGRSBmZpZWxkcxIUCgVzdGF0ZRgEIAEoCVIFc3RhdGUi0QEKCUZvcm1GaWVsZBIdCgppbnB1d
  F90eXBlGAIgASgJUglpbnB1dFR5cGUSFAoFaXRlbXMYAyADKAlSBWl0ZW1zEhQKBXN0YXRlGAQgASgJUgVzdGF0ZRIUCgV0aXRsZ
  RgFIAEoCVIFdGl0bGUSGwoJaW1hZ2VfdXJsGAYgASgJUghpbWFnZVVybBISCgRuYW1lGAcgASgJUgRuYW1lEhYKBmFuc3dlchgII
  AEoCVIGYW5zd2VyEhoKCGFuc3dlcmVkGAkgASgDUghhbnN3ZXJlZCLYAQoDVGFnEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250Z
  Xh0UgNjdHgSDgoCaWQYAiABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIUCgV0aXRsZRgEIAEoCVIFdGl0b
  GUSGAoHY3JlYXRlZBgFIAEoA1IHY3JlYXRlZBIaCghtb2RpZmllZBgGIAEoA1IIbW9kaWZpZWQSHQoKY3JlYXRvcl9pZBgHIAEoC
  VIJY3JlYXRvcklkEhQKBWNvbG9yGAggASgJUgVjb2xvciLaAQoOQ2FubmVkUmVzcG9uc2USIQoDY3R4GAEgASgLMg8uY29tbW9uL
  kNvbnRleHRSA2N0eBIOCgJpZBgCIAEoCVICaWQSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhIKBHRleHQYBSABKAlSB
  HRleHQSEgoEa2V5cxgGIAMoCVIEa2V5cxIYCgdjcmVhdGVkGAcgASgDUgdjcmVhdGVkEhoKCG1vZGlmaWVkGAggASgDUghtb2RpZ
  mllZBIYCgdjcmVhdG9yGAkgASgJUgdjcmVhdG9yInAKD0Nhbm5lZFJlc3BvbnNlcxIhCgNjdHgYASABKAsyDy5jb21tb24uQ29ud
  GV4dFIDY3R4EjoKCXJlc3BvbnNlcxgDIAMoCzIcLmNvbnZlcnNhdGlvbi5DYW5uZWRSZXNwb25zZVIJcmVzcG9uc2VzIlAKBFRhZ
  3MSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIlCgR0YWdzGAQgAygLMhEuY29udmVyc2F0aW9uLlRhZ1IEdGFnc
  yJpCghQb3N0YmFjaxIvCgdtZXNzYWdlGAIgASgLMhUuY29udmVyc2F0aW9uLk1lc3NhZ2VSB21lc3NhZ2USLAoGYnV0dG9uGAMgA
  SgLMhQuY29udmVyc2F0aW9uLkJ1dHRvblIGYnV0dG9uIrYBCgxVc2VDb25uZWN0b3ISHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb
  3VudElkEiEKDGNvbm5lY3Rvcl9pZBgDIAEoCVILY29ubmVjdG9ySWQSFAoFc3RhdGUYCCABKAlSBXN0YXRlEhgKB3VwZGF0ZWQYC
  SABKAlSB3VwZGF0ZWQSDgoCYnkYCiABKAlSAmJ5IiQKBVN0YXRlEgwKCGRpc2FibGVkEAASDQoJYWN0aXZhdGVkEAEijwEKDElud
  GVncmF0aW9ucxIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZ
  BI9CgxpbnRlZ3JhdGlvbnMYAyADKAsyGS5jb252ZXJzYXRpb24uSW50ZWdyYXRpb25SDGludGVncmF0aW9ucyLOAgoLSW50ZWdyY
  XRpb24SIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSIQoMY
  29ubmVjdG9yX2lkGAMgASgJUgtjb25uZWN0b3JJZBIZCghsb2dvX3VybBgEIAEoCVIHbG9nb1VybBISCgRuYW1lGAUgASgJUgRuY
  W1lEiUKDmNvbm5lY3Rvcl90eXBlGAwgASgJUg1jb25uZWN0b3JUeXBlEh4KCmludGVncmF0ZWQYBiABKANSCmludGVncmF0ZWQSG
  AoHdXBkYXRlZBgHIAEoA1IHdXBkYXRlZBIUCgVzdGF0ZRgIIAEoCVIFc3RhdGUSDgoCaWQYCiABKAlSAmlkIiQKBVN0YXRlEgwKC
  GRpc2FibGVkEAASDQoJYWN0aXZhdGVkEAEi4AEKFFNlYXJjaE1lc3NhZ2VSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db
  250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEicKD2NvbnZlcnNhdGlvbl9pZBgDIAEoCVIOY29udmVyc
  2F0aW9uSWQSGQoIdXNlcl9pZHMYBCADKAlSB3VzZXJJZHMSFAoFcXVlcnkYBSABKAlSBXF1ZXJ5EhYKBmFuY2hvchgGIAEoCVIGY
  W5jaG9yEhQKBWxpbWl0GAcgASgFUgVsaW1pdCJTCglNZXNzYWdlSWQSJwoPY29udmVyc2F0aW9uX2lkGAMgASgJUg5jb252ZXJzY
  XRpb25JZBIdCgptZXNzYWdlX2lkGAQgASgJUgltZXNzYWdlSWQiagoKTWVzc2FnZUFjaxInCg9jb252ZXJzYXRpb25faWQYAyABK
  AlSDmNvbnZlcnNhdGlvbklkEh0KCm1lc3NhZ2VfaWQYBCABKAlSCW1lc3NhZ2VJZBIUCgVlcnJvchgFIAEoCVIFZXJyb3IihwEKC
  lRhZ1JlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50S
  WQSJwoPY29udmVyc2F0aW9uX2lkGAMgASgJUg5jb252ZXJzYXRpb25JZBIOCgJpZBgEIAEoCVICaWQirQEKE0NvdW50QnlBZ2Vud
  FJlcXVlc3QSJQoOaW50ZWdyYXRpb25faWQYAyABKAlSDWludGVncmF0aW9uSWQSGQoIYWdlbnRfaWQYBCABKAlSB2FnZW50SWQSE
  goEZnJvbRgFIAEoBVIEZnJvbRIOCgJ0bxgGIAEoBVICdG8SFAoFcmFuZ2UYCCABKAlSBXJhbmdlIhoKBVJhbmdlEggKBGhvdXIQA
  BIHCgNkYXkQASKtAQoTQ291bnRCeUdyb3VwUmVxdWVzdBIlCg5pbnRlZ3JhdGlvbl9pZBgDIAEoCVINaW50ZWdyYXRpb25JZBIZC
  ghncm91cF9pZBgEIAEoCVIHZ3JvdXBJZBISCgRmcm9tGAUgASgFUgRmcm9tEg4KAnRvGAYgASgFUgJ0bxIUCgVyYW5nZRgIIAEoC
  VIFcmFuZ2UiGgoFUmFuZ2USCAoEaG91chAAEgcKA2RheRABIrABChRDb3VudEJ5QWdlbnRzUmVxdWVzdBIlCg5pbnRlZ3JhdGlvb
  l9pZBgDIAEoCVINaW50ZWdyYXRpb25JZBIbCglhZ2VudF9pZHMYBCADKAlSCGFnZW50SWRzEhIKBGZyb20YBSABKAVSBGZyb20SD
  goCdG8YBiABKAVSAnRvEhQKBXJhbmdlGAggASgJUgVyYW5nZSIaCgVSYW5nZRIICgRob3VyEAASBwoDZGF5EAEiqgEKEkNvdW50Q
  nlUYWdzUmVxdWVzdBIlCg5pbnRlZ3JhdGlvbl9pZBgDIAEoCVINaW50ZWdyYXRpb25JZBIXCgd0YWdfaWRzGAQgAygJUgZ0YWdJZ
  HMSEgoEZnJvbRgFIAEoBVIEZnJvbRIOCgJ0bxgGIAEoBVICdG8SFAoFcmFuZ2UYCCABKAlSBXJhbmdlIhoKBVJhbmdlEggKBGhvd
  XIQABIHCgNkYXkQASI9CgxDb3VudEJ5QWdlbnQSGQoIYWdlbnRfaWQYAiABKAlSB2FnZW50SWQSEgoEZGF0YRgDIAMoA1IEZGF0Y
  SI9CgxDb3VudEJ5R3JvdXASGQoIZ3JvdXBfaWQYAiABKAlSB2dyb3VwSWQSEgoEZGF0YRgDIAMoA1IEZGF0YSI3CgpDb3VudEJ5V
  GFnEhUKBnRhZ19pZBgCIAEoCVIFdGFnSWQSEgoEZGF0YRgDIAMoA1IEZGF0YSJDChNDb3VudEJ5VGFnc1Jlc3BvbnNlEiwKBGRhd
  GEYAiADKAsyGC5jb252ZXJzYXRpb24uQ291bnRCeVRhZ1IEZGF0YSJHChVDb3VudEJ5QWdlbnRzUmVzcG9uc2USLgoEZGF0YRgCI
  AMoCzIaLmNvbnZlcnNhdGlvbi5Db3VudEJ5QWdlbnRSBGRhdGEiYwoWQXZnUmVzcG9uc2VUaW1lUmVxdWVzdBIlCg5pbnRlZ3Jhd
  Glvbl9pZBgDIAEoCVINaW50ZWdyYXRpb25JZBISCgRmcm9tGAUgASgFUgRmcm9tEg4KAnRvGAYgASgFUgJ0byJDChdBdmdSZXNwb
  25zZVRpbWVSZXNwb25zZRIoChBhdmdfcmVzcG9uc2Vfc2VjGAIgASgBUg5hdmdSZXNwb25zZVNlYyJKChlUb3RhbENvbnZlcnNhd
  GlvblJlc3BvbnNlEi0KEnRvdGFsX2NvbnZlcnNhdGlvbhgCIAEoA1IRdG90YWxDb252ZXJzYXRpb24qmwwKBUV2ZW50EhgKFENvb
  nZlcnNhdGlvbkFzc2lnbmVkEAASFwoTQ29udmVyc2F0aW9uV2FpdGluZxACEh4KGkNvbnZlcnNhdGlvblN0YXJ0UmVxdWVzdGVkE
  AMSGAoUQ29udmVyc2F0aW9uQWNjZXB0ZWQQBBIXChNDb252ZXJzYXRpb25Ecm9wcGVkEAUSHAoYQ29udmVyc2F0aW9uRXZlbnRDc
  mVhdGVkEAYSHQoZQ29udmVyc2F0aW9uSm9pblJlcXVlc3RlZBAHEiAKHENvbnZlcnNhdGlvbk1lc3NhZ2VSZXF1ZXN0ZWQQCBIeC
  hpDb252ZXJzYXRpb25MZWF2ZVJlcXVlc3RlZBAJEh4KGkNvbnZlcnNhdGlvbkNsb3NlUmVxdWVzdGVkEAoSHAoYQ29udmVyc2F0a
  W9uVGFnUmVxdWVzdGVkEAsSHgoaQ29udmVyc2F0aW9uVW50YWdSZXF1ZXN0ZWQQDBIdChlDb252ZXJzYXRpb25SZWFkUmVxdWVzd
  GVkEA0SHQoZQ29udmVyc2F0aW9uTGlzdFJlcXVlc3RlZBAOEh8KG0NvbnZlcnNhdGlvbkFjY2VwdFJlcXVlc3RlZBAPEiMKH0Nvb
  nZlcnNhdGlvblVwZGF0ZVJ1bGVSZXF1ZXN0ZWQQFBIjCh9Db252ZXJzYXRpb25DcmVhdGVSdWxlUmVxdWVzdGVkEBUSIwofQ29ud
  mVyc2F0aW9uRGVsZXRlUnVsZVJlcXVlc3RlZBAWEiEKHUNvbnZlcnNhdGlvblJlYWRSdWxlUmVxdWVzdGVkEBcSIQodQ29udmVyc
  2F0aW9uTGlzdFJ1bGVSZXF1ZXN0ZWQQGBIgChxDb252ZXJzYXRpb25Vc2VyUmVxdWVzdFJlcGx5EDMSHAoYQ29udmVyc2F0aW9uT
  GltaXRVcGRhdGVkEDQSIgoeQ29udmVyc2F0aW9uUmVxdWVzdFdhaXRUaW1lb3V0EDwSIwofQ29udmVyc2F0aW9uTGlzdEV2ZW50c
  1JlcXVlc3RlZBA9Eh8KG0NoYW5uZWxEZWludGVncmF0ZVJlcXVlc3RlZBBBEh0KGUNoYW5uZWxJbnRlZ3JhdGVSZXF1ZXN0ZWQQQ
  hIjCh9DaGFubmVsSW50ZWdyYXRpb25MaXN0UmVxdWVzdGVkEEMSHAoYQ29ubmVjdG9yVXBzZXJ0UmVxdWVzdGVkEEQSGgoWQ29ub
  mVjdG9yTGlzdFJlcXVlc3RlZBBFEiEKHUNhbm5lZFJlc3BvbnNlQ3JlYXRlUmVxdWVzdGVkEFASIQodQ2FubmVkUmVzcG9uc2VVc
  GRhdGVSZXF1ZXN0ZWQQURIhCh1DYW5uZWRSZXNwb25zZURlbGV0ZVJlcXVlc3RlZBBSEh8KG0Nhbm5lZFJlc3BvbnNlUmVhZFJlc
  XVlc3RlZBBTEh8KG0Nhbm5lZFJlc3BvbnNlTGlzdFJlcXVlc3RlZBBUEhYKElRhZ0NyZWF0ZVJlcXVlc3RlZBBVEhYKElRhZ1VwZ
  GF0ZVJlcXVlc3RlZBBWEhQKEFRhZ1JlYWRSZXF1ZXN0ZWQQVxIWChJUYWdEZWxldGVSZXF1ZXN0ZWQQWBIUChBUYWdMaXN0UmVxd
  WVzdGVkEFkSDgoKVGFnQ3JlYXRlZBBfEhgKFENvbnZlcnNhdGlvblVwc2VydGVkEGESGwoXQ29udmVyc2F0aW9uTWVzc2FnZVNlb
  nQQYxIjCh9Db252ZXJzYXRpb25NZXNzYWdlQWNrUmVxdWVzdGVkEFoSJwojQ29udmVyc2F0aW9uTWVzc2FnZVJlY2VpdmVSZXF1Z
  XN0ZWQQWxIjCh9Db252ZXJzYXRpb25NZXNzYWdlU2VlUmVxdWVzdGVkEFwSJwojQ2hhbm5lbEludGVncmF0aW9uQXZhaWxhYmlsa
  XR5Q2hlY2sQXRIkCiBDb252ZXJzYXRpb25NZXNzYWdlU2VhcmNoUmVxdWVzdBBeEhkKFUNvbnZlcnNhdGlvblJlcXVlc3RlZBBkE
  hYKEkNvbnZlcnNhdGlvblN5bmNlZBBlEhgKFENvbnZlcnNhdGlvblYzU3luY2VkEGYqkwEKDkF0dGFjaG1lbnRUeXBlEggKBGZpb
  GUQAhILCgdnZW5lcmljEAMSCwoHcHJldmlldxAEEgoKBmJ1dHRvbhAFEgkKBWlucHV0EAYSEQoNYXNrX2luZm9fZm9ybRAHEhgKF
  GFza19pbmZvX2Zvcm1fYW5zd2VyEAgSCAoEZm9ybRAJEg8KC2Zvcm1fc3VibWl0EAoy+AEKB1J1bGVNZ3ISNAoKVXBkYXRlUnVsZ
  RISLmNvbnZlcnNhdGlvbi5SdWxlGhIuY29udmVyc2F0aW9uLlJ1bGUSNAoKQ3JlYXRlUnVsZRISLmNvbnZlcnNhdGlvbi5SdWxlG
  hIuY29udmVyc2F0aW9uLlJ1bGUSJwoKRGVsZXRlUnVsZRIKLmNvbW1vbi5JZBoNLmNvbW1vbi5FbXB0eRIqCghSZWFkUnVsZRIKL
  mNvbW1vbi5JZBoSLmNvbnZlcnNhdGlvbi5SdWxlEiwKCUxpc3RSdWxlcxIKLmNvbW1vbi5JZBoTLmNvbnZlcnNhdGlvbi5Sb3V0Z
  TKlBgoPQ29udmVyc2F0aW9uTWdyEjUKC1NlZW5NZXNzYWdlEhcuY29udmVyc2F0aW9uLk1lc3NhZ2VJZBoNLmNvbW1vbi5FbXB0e
  RI4Cg5SZWNlaXZlTWVzc2FnZRIXLmNvbnZlcnNhdGlvbi5NZXNzYWdlSWQaDS5jb21tb24uRW1wdHkSNQoKQWNrTWVzc2FnZRIYL
  mNvbnZlcnNhdGlvbi5NZXNzYWdlQWNrGg0uY29tbW9uLkVtcHR5EksKEVN0YXJ0Q29udmVyc2F0aW9uEhouY29udmVyc2F0aW9uL
  lN0YXJ0UmVxdWVzdBoaLmNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb24SOQoPRW5kQ29udmVyc2F0aW9uEgouY29tbW9uLklkGhouY
  29udmVyc2F0aW9uLkNvbnZlcnNhdGlvbhI5Cg9HZXRDb252ZXJzYXRpb24SCi5jb21tb24uSWQaGi5jb252ZXJzYXRpb24uQ29ud
  mVyc2F0aW9uElgKEUxpc3RDb252ZXJzYXRpb25zEiYuY29udmVyc2F0aW9uLkxpc3RDb252ZXJzYXRpb25zUmVxdWVzdBobLmNvb
  nZlcnNhdGlvbi5Db252ZXJzYXRpb25zEjwKEkFjY2VwdENvbnZlcnNhdGlvbhIKLmNvbW1vbi5JZBoaLmNvbnZlcnNhdGlvbi5Db
  252ZXJzYXRpb24SOgoPVGFnQ29udmVyc2F0aW9uEhguY29udmVyc2F0aW9uLlRhZ1JlcXVlc3QaDS5jb21tb24uRW1wdHkSPAoRV
  W50YWdDb252ZXJzYXRpb24SGC5jb252ZXJzYXRpb24uVGFnUmVxdWVzdBoNLmNvbW1vbi5FbXB0eRI3ChBKb2luQ29udmVyc2F0a
  W9uEhQuY29udmVyc2F0aW9uLk1lbWJlchoNLmNvbW1vbi5FbXB0eRI3ChBMZWZ0Q29udmVyc2F0aW9uEhQuY29udmVyc2F0aW9uL
  k1lbWJlchoNLmNvbW1vbi5FbXB0eRIjCgZUeXBpbmcSCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHky7wIKEUNhbm5lZFJlc3Bvb
  nNlTWdyElIKFENyZWF0ZUNhbm5lZFJlc3BvbnNlEhwuY29udmVyc2F0aW9uLkNhbm5lZFJlc3BvbnNlGhwuY29udmVyc2F0aW9uL
  kNhbm5lZFJlc3BvbnNlElIKFFVwZGF0ZUNhbm5lZFJlc3BvbnNlEhwuY29udmVyc2F0aW9uLkNhbm5lZFJlc3BvbnNlGhwuY29ud
  mVyc2F0aW9uLkNhbm5lZFJlc3BvbnNlEkAKE0xpc3RDYW5uZWRSZXNwb25zZXMSCi5jb21tb24uSWQaHS5jb252ZXJzYXRpb24uQ
  2FubmVkUmVzcG9uc2VzEjEKFERlbGV0ZUNhbm5lZFJlc3BvbnNlEgouY29tbW9uLklkGg0uY29tbW9uLkVtcHR5Ej0KEUdldENhb
  m5lZFJlc3BvbnNlEgouY29tbW9uLklkGhwuY29udmVyc2F0aW9uLkNhbm5lZFJlc3BvbnNlMusBCgZUYWdNZ3ISMQoJQ3JlYXRlV
  GFnEhEuY29udmVyc2F0aW9uLlRhZxoRLmNvbnZlcnNhdGlvbi5UYWcSMQoJVXBkYXRlVGFnEhEuY29udmVyc2F0aW9uLlRhZxoRL
  mNvbnZlcnNhdGlvbi5UYWcSJgoJRGVsZXRlVGFnEgouY29tbW9uLklkGg0uY29tbW9uLkVtcHR5EioKCExpc3RUYWdzEgouY29tb
  W9uLklkGhIuY29udmVyc2F0aW9uLlRhZ3MSJwoGR2V0VGFnEgouY29tbW9uLklkGhEuY29udmVyc2F0aW9uLlRhZzKdAgoOSW50Z
  WdyYXRpb25NZ3ISKAoLRGVpbnRlZ3JhdGUSCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkSOgoQTGlzdEludGVncmF0aW9ucxIKL
  mNvbW1vbi5JZBoaLmNvbnZlcnNhdGlvbi5JbnRlZ3JhdGlvbnMSQQoJSW50ZWdyYXRlEhkuY29udmVyc2F0aW9uLkludGVncmF0a
  W9uGhkuY29udmVyc2F0aW9uLkludGVncmF0aW9uEmIKEUNoZWNrQXZhaWxhYmlsaXR5EiYuY29udmVyc2F0aW9uLkF2YWlsYWJpb
  Gl0eUNoZWNrUmVxdWVzdBolLmNvbnZlcnNhdGlvbi5BdmFpbGFiaWxpdHlDaGVja1Jlc3VsdDLhBAoUQ29udmVyc2F0aW9uUmVwb
  3J0ZXISWgoZQ291bnRDb252ZXJzYXRpb25zQnlBZ2VudBIhLmNvbnZlcnNhdGlvbi5Db3VudEJ5QWdlbnRSZXF1ZXN0GhouY29ud
  mVyc2F0aW9uLkNvdW50QnlBZ2VudBJlChpDb3VudENvbnZlcnNhdGlvbnNCeUFnZW50cxIiLmNvbnZlcnNhdGlvbi5Db3VudEJ5Q
  WdlbnRzUmVxdWVzdBojLmNvbnZlcnNhdGlvbi5Db3VudEJ5QWdlbnRzUmVzcG9uc2USWgoZQ291bnRDb252ZXJzYXRpb25zQnlHc
  m91cBIhLmNvbnZlcnNhdGlvbi5Db3VudEJ5R3JvdXBSZXF1ZXN0GhouY29udmVyc2F0aW9uLkNvdW50QnlHcm91cBJfChhDb3Vud
  ENvbnZlcnNhdGlvbnNCeVRhZ3MSIC5jb252ZXJzYXRpb24uQ291bnRCeVRhZ3NSZXF1ZXN0GiEuY29udmVyc2F0aW9uLkNvdW50Q
  nlUYWdzUmVzcG9uc2USYgoTR2V0QXZnUmVzcG9uc2VUaW1lcxIkLmNvbnZlcnNhdGlvbi5BdmdSZXNwb25zZVRpbWVSZXF1ZXN0G
  iUuY29udmVyc2F0aW9uLkF2Z1Jlc3BvbnNlVGltZVJlc3BvbnNlEmUKFEdldFRvdGFsQ29udmVyc2F0aW9uEiQuY29udmVyc2F0a
  W9uLkF2Z1Jlc3BvbnNlVGltZVJlcXVlc3QaJy5jb252ZXJzYXRpb24uVG90YWxDb252ZXJzYXRpb25SZXNwb25zZQ=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      common.CommonProto.javaDescriptor,
      user.UserProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}