// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

object ConversationProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    common.CommonProto,
    user.UserProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    conversation.Rule,
    conversation.AvailabilityCheckRequest,
    conversation.AvailabilityCheckResult,
    conversation.Condition,
    conversation.Route,
    conversation.RouteResult,
    conversation.MemberSeen,
    conversation.MemberV3,
    conversation.Member,
    conversation.Conversation,
    conversation.UserConversation,
    conversation.StartRequest,
    conversation.Conversations,
    conversation.Search,
    conversation.ListConversationsRequest,
    conversation.ListEventsRequest,
    conversation.ListConversationsByUserRequest,
    conversation.RequestState,
    conversation.Reaction,
    conversation.EsMessage,
    conversation.Message,
    conversation.Computed,
    conversation.Seen,
    conversation.Ack,
    conversation.Received,
    conversation.Field,
    conversation.Button,
    conversation.AskInfomationAnswer,
    conversation.AskInfomation,
    conversation.GenericElementTemplate,
    conversation.Attachment,
    conversation.Form,
    conversation.FormSubmit,
    conversation.FormField,
    conversation.Tag,
    conversation.CannedResponse,
    conversation.CannedResponses,
    conversation.Tags,
    conversation.Postback,
    conversation.UseConnector,
    conversation.Integrations,
    conversation.Integration,
    conversation.SearchMessageRequest,
    conversation.MessageId,
    conversation.MessageAck,
    conversation.TagRequest,
    conversation.CountByAgentRequest,
    conversation.CountByGroupRequest,
    conversation.CountByAgentsRequest,
    conversation.CountByTagsRequest,
    conversation.CountByAgent,
    conversation.CountByGroup,
    conversation.CountByTag,
    conversation.CountByTagsResponse,
    conversation.CountByAgentsResponse,
    conversation.AvgResponseTimeRequest,
    conversation.AvgResponseTimeResponse,
    conversation.TotalConversationResponse
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CjpiaXRidWNrZXQub3JnL3N1Yml6L2hlYWRlci9jb252ZXJzYXRpb24vY29udmVyc2F0aW9uLnByb3RvEgxjb252ZXJzYXRpb
  24aLmJpdGJ1Y2tldC5vcmcvc3ViaXovaGVhZGVyL2NvbW1vbi9jb21tb24ucHJvdG8aKmJpdGJ1Y2tldC5vcmcvc3ViaXovaGVhZ
  GVyL3VzZXIvdXNlci5wcm90byLvAwoEUnVsZRIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAIgASgJU
  gJpZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGgoIcHJpb3JpdHkYBCABKAVSCHByaW9yaXR5EhoKCHN0cmF0ZWd5G
  AUgASgJUghzdHJhdGVneRIdCgphc3NpZ25fdG9zGAYgAygJUglhc3NpZ25Ub3MSNwoKY29uZGl0aW9ucxgHIAMoCzIXLmNvbnZlc
  nNhdGlvbi5Db25kaXRpb25SCmNvbmRpdGlvbnMSGAoHZW5hYmxlZBgIIAEoCFIHZW5hYmxlZBIYCgdjcmVhdGVkGAkgASgDUgdjc
  mVhdGVkEhoKCG1vZGlmaWVkGAwgASgDUghtb2RpZmllZBISCgRuYW1lGAogASgJUgRuYW1lEiAKC2Rlc2NyaXB0aW9uGAsgASgJU
  gtkZXNjcmlwdGlvbiJ/Cg5Bc3NpZ25TdHJhdGVneRIOCgphbGxfYWdlbnRzEAASDgoKYWdlbnRncm91cBACEgoKBmFnZW50cxADE
  g8KC21vc3RfcmVjZW50EAQSGQoVcm91bmRyb2Jpbl9hbGxfYWdlbnRzEAUSFQoRcm91bmRyb2Jpbl9hZ2VudHMQBiK8AQoYQXZha
  WxhYmlsaXR5Q2hlY2tSZXF1ZXN0EiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSJQoOaW50ZWdyYXRpb25faWQYA
  yABKAlSDWludGVncmF0aW9uSWQSHgoEdXNlchgEIAEoCzIKLnVzZXIuVXNlclIEdXNlchIdCgphY2NvdW50X2lkGAUgASgJUglhY
  2NvdW50SWQSFwoHdXNlcl9pZBgGIAEoCVIGdXNlcklkIpIBChdBdmFpbGFiaWxpdHlDaGVja1Jlc3VsdBIhCgNjdHgYASABKAsyD
  y5jb21tb24uQ29udGV4dFIDY3R4EiIKDGF2YWlsYWJpbGl0eRgCIAEoCFIMYXZhaWxhYmlsaXR5EhYKBnJlYXNvbhgDIAEoCVIGc
  mVhc29uEhgKB3BheWxvYWQYBSABKAlSB3BheWxvYWQijgEKCUNvbmRpdGlvbhISCgRqb2luGAEgASgJUgRqb2luEhAKA2tleRgCI
  AEoCVIDa2V5EhoKCG9wZXJhdG9yGAMgASgJUghvcGVyYXRvchIUCgV2YWx1ZRgEIAEoCVIFdmFsdWUiKQoMSm9pbk9wZXJhdG9yE
  ggKBG5vbmUQABIHCgNhbmQQARIGCgJvchACIlQKBVJvdXRlEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSKAoFc
  nVsZXMYAiADKAsyEi5jb252ZXJzYXRpb24uUnVsZVIFcnVsZXMiegoLUm91dGVSZXN1bHQSFwoHcnVsZV9pZBgBIAEoCVIGcnVsZ
  UlkEhoKCHN0cmF0ZWd5GAMgASgJUghzdHJhdGVneRIbCglhZ2VudF9pZHMYBCADKAlSCGFnZW50SWRzEhkKCGdyb3VwX2lkGAUgA
  SgJUgdncm91cElkIkgKCk1lbWJlclNlZW4SGwoJbWVtYmVyX2lkGAIgASgJUghtZW1iZXJJZBIdCgptZXNzYWdlX2lkGAMgASgJU
  gltZXNzYWdlSWQizAEKCE1lbWJlclYzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYBCABKAlSAmlkE
  icKD2NvbnZlcnNhdGlvbl9pZBgFIAEoCVIOY29udmVyc2F0aW9uSWQSHQoKYWNjb3VudF9pZBgGIAEoCVIJYWNjb3VudElkEhIKB
  G5hbWUYByABKAlSBG5hbWUSHQoKYXZhdGFyX3VybBgIIAEoCVIJYXZhdGFyVXJsEhIKBHR5cGUYCSABKAlSBHR5cGUitwEKBk1lb
  WJlchISCgR0eXBlGAMgASgJUgR0eXBlEhkKCHN1Yml6X2lkGAggASgJUgdzdWJpeklkEg4KAmlkGAQgASgJUgJpZBISCgRuYW1lG
  AogASgJUgRuYW1lEh0KCmF2YXRhcl91cmwYBiABKAlSCWF2YXRhclVybBISCgRsZWZ0GAsgASgIUgRsZWZ0EicKD2NvbnZlcnNhd
  Glvbl9pZBgNIAEoCVIOY29udmVyc2F0aW9uSWQipAUKDENvbnZlcnNhdGlvbhIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eg4KAmlkGAIgASgJUgJpZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSGAoHY3JlYXRlZBgEIAEoA1IHY3JlY
  XRlZBIWCgZjbG9zZWQYBiABKANSBmNsb3NlZBIuCgdtZW1iZXJzGAcgAygLMhQuY29udmVyc2F0aW9uLk1lbWJlclIHbWVtYmVyc
  xIlCgR0YWdzGAogAygLMhEuY29udmVyc2F0aW9uLlRhZ1IEdGFncxIUCgVzdGF0ZRgLIAEoCVIFc3RhdGUSNAoHcmVxdWVzdBgOI
  AEoCzIaLmNvbnZlcnNhdGlvbi5TdGFydFJlcXVlc3RSB3JlcXVlc3QSGgoIYWNjZXB0ZWQYDyABKANSCGFjY2VwdGVkEiEKDGNoY
  W5uZWxfdHlwZRgRIAEoCVILY2hhbm5lbFR5cGUSOwoLaW50ZWdyYXRpb24YEiABKAsyGS5jb252ZXJzYXRpb24uSW50ZWdyYXRpb
  25SC2ludGVncmF0aW9uEhgKB2FjdGl2ZWQYEyABKANSB2FjdGl2ZWQSJgoPbGFzdF9tZXNzYWdlX2lkGBUgASgJUg1sYXN0TWVzc
  2FnZUlkEjgKDGxhc3RfbWVzc2FnZRgUIAEoCzIVLmNvbnZlcnNhdGlvbi5NZXNzYWdlUgtsYXN0TWVzc2FnZRIhCgxyZXNwb25zZ
  V9zZWMYFiABKANSC3Jlc3BvbnNlU2VjIlIKBVN0YXRlEhUKEWNvbnZlcnNhdGlvbl9ub25lEAASDgoKdW5hc3NpZ25lZBACEgoKB
  mFjdGl2ZRAGEgkKBWVuZGVkEAgSCwoHcGVuZGluZxAJIqMBChBVc2VyQ29udmVyc2F0aW9uEh0KCmFjY291bnRfaWQYBiABKAlSC
  WFjY291bnRJZBIUCgVzdGF0ZRgLIAEoCVIFc3RhdGUSFwoHdXNlcl9pZBgCIAEoCVIGdXNlcklkEhkKCGNvbnZvX2lkGAQgASgJU
  gdjb252b0lkEiYKD2xhc3Rfc2Vlbl9ldmVudBgFIAEoCVINbGFzdFNlZW5FdmVudCLJBQoMU3RhcnRSZXF1ZXN0EiEKA2N0eBgBI
  AEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSDgoCaWQYAiABKAlSAmlkEh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIhC
  gxjaGFubmVsX3R5cGUYBCABKAlSC2NoYW5uZWxUeXBlEhIKBGZyb20YDCABKAlSBGZyb20SDgoCdG8YBSADKAlSAnRvEhkKCHBhZ
  2VfdXJsGAYgASgJUgdwYWdlVXJsEh0KCnBhZ2VfdGl0bGUYByABKAlSCXBhZ2VUaXRsZRIYCgdtZXNzYWdlGAggASgJUgdtZXNzY
  WdlEikKEGJyb3dzZXJfbGFuZ3VhZ2UYCSABKAlSD2Jyb3dzZXJMYW5ndWFnZRIaCghsYW5ndWFnZRgKIAEoCVIIbGFuZ3VhZ2USH
  woLZGV2aWNlX3R5cGUYCyABKAlSCmRldmljZVR5cGUSGAoHY3JlYXRlZBgNIAEoA1IHY3JlYXRlZBInCg9jb252ZXJzYXRpb25fa
  WQYDiABKAlSDmNvbnZlcnNhdGlvbklkEg4KAmlwGA8gASgJUgJpcBIYCgdjb3VudHJ5GBAgASgJUgdjb3VudHJ5EiEKDGNvdW50c
  nlfY29kZRgRIAEoCVILY291bnRyeUNvZGUSEgoEY2l0eRgSIAEoCVIEY2l0eRIaCgh0aW1lem9uZRgTIAEoCVIIdGltZXpvbmUSH
  QoKc3RhcnRlcl9pZBgUIAEoCVIJc3RhcnRlcklkEiEKDHN0YXJ0ZXJfdHlwZRgVIAEoCVILc3RhcnRlclR5cGUSGwoJYWdlbnRfa
  WRzGBYgAygJUghhZ2VudElkcxIeCgR1c2VyGBkgASgLMgoudXNlci5Vc2VyUgR1c2VyEiUKDmludGVncmF0aW9uX2lkGBogASgJU
  g1pbnRlZ3JhdGlvbklkIqcBCg1Db252ZXJzYXRpb25zEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSQAoNY29ud
  mVyc2F0aW9ucxgDIAMoCzIaLmNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb25SDWNvbnZlcnNhdGlvbnMSFgoGYW5jaG9yGAQgASgJU
  gZhbmNob3ISGQoIdXNlcl9pZHMYBSADKAlSB3VzZXJJZHMisgEKBlNlYXJjaBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eh0KCmFjY291bnRfaWQYAyABKAlSCWFjY291bnRJZBIYCgdrZXl3b3JkGAQgASgJUgdrZXl3b3JkEhQKBWxpbWl0GAUgA
  SgFUgVsaW1pdBIbCgliZWZvcmVfaWQYBiABKAlSCGJlZm9yZUlkEhkKCGFmdGVyX2lkGAcgASgJUgdhZnRlcklkIv8BChhMaXN0Q
  29udmVyc2F0aW9uc1JlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X2lkGAMgASgJU
  glhY2NvdW50SWQSFAoFc3RhdGUYBCABKAlSBXN0YXRlEhQKBWxpbWl0GAUgASgFUgVsaW1pdBIWCgZhbmNob3IYBiABKAlSBmFuY
  2hvchIbCgltZW1iZXJfaWQYCCABKAlSCG1lbWJlcklkEhkKCGdyb3VwX2J5GAkgASgJUgdncm91cEJ5EiUKDmludGVncmF0aW9uX
  2lkGAogASgJUg1pbnRlZ3JhdGlvbklkIq8BChFMaXN0RXZlbnRzUmVxdWVzdBIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4d
  FIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBInCg9jb252ZXJzYXRpb25faWQYAyABKAlSDmNvbnZlcnNhdGlvb
  klkEhkKCHN0YXJ0X2lkGAQgASgJUgdzdGFydElkEhQKBWxpbWl0GAYgASgFUgVsaW1pdCKoAQoeTGlzdENvbnZlcnNhdGlvbnNCe
  VVzZXJSZXF1ZXN0Eh0KCmFjY291bnRfaWQYASABKAlSCWFjY291bnRJZBIdCgpjaGFubmVsX2lkGAIgASgJUgljaGFubmVsSWQSF
  woHdXNlcl9pZBgDIAEoCVIGdXNlcklkEhkKCHN0YXJ0X2lkGAQgASgJUgdzdGFydElkEhQKBWxpbWl0GAUgASgFUgVsaW1pdCJ1C
  gxSZXF1ZXN0U3RhdGUSHQoKYWNjb3VudF9pZBgBIAEoCVIJYWNjb3VudElkEicKD2NvbnZlcnNhdGlvbl9pZBgCIAEoCVIOY29ud
  mVyc2F0aW9uSWQSHQoKY2hhbm5lbF9pZBgDIAEoCVIJY2hhbm5lbElkIkoKCFJlYWN0aW9uEhIKBG5hbWUYAyABKAlSBG5hbWUSF
  AoFY291bnQYBCABKAVSBWNvdW50EhQKBXVzZXJzGAUgAygJUgV1c2VycyLQAQoJRXNNZXNzYWdlEg4KAmlkGAIgASgJUgJpZBIdC
  gphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSJwoPY29udmVyc2F0aW9uX2lkGAQgASgJUg5jb252ZXJzYXRpb25JZBIdCgptZ
  W1iZXJfaWRzGAUgAygJUgltZW1iZXJJZHMSEgoEdGV4dBgGIAEoCVIEdGV4dBIgCgthdHRhY2htZW50cxgHIAMoCVILYXR0YWNob
  WVudHMSFgoGZmllbGRzGAggAygJUgZmaWVsZHMiqgMKB01lc3NhZ2USIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0e
  BIdCgphY2NvdW50X2lkGAUgASgJUglhY2NvdW50SWQSJwoPY29udmVyc2F0aW9uX2lkGA4gASgJUg5jb252ZXJzYXRpb25JZBIOC
  gJpZBgLIAEoCVICaWQSEgoEdGV4dBgCIAEoCVIEdGV4dBIWCgZmb3JtYXQYAyABKAlSBmZvcm1hdBI6CgthdHRhY2htZW50cxgEI
  AMoCzIYLmNvbnZlcnNhdGlvbi5BdHRhY2htZW50UgthdHRhY2htZW50cxI0CglyZWFjdGlvbnMYByADKAsyFi5jb252ZXJzYXRpb
  24uUmVhY3Rpb25SCXJlYWN0aW9ucxIrCgZmaWVsZHMYCiADKAsyEy5jb252ZXJzYXRpb24uRmllbGRSBmZpZWxkcxIyCghjb21wd
  XRlZBgMIAEoCzIWLmNvbnZlcnNhdGlvbi5Db21wdXRlZFIIY29tcHV0ZWQSJQoOaW50ZWdyYXRpb25faWQYDyABKAlSDWludGVnc
  mF0aW9uSWQiiwEKCENvbXB1dGVkEiYKBHNlZW4YBCADKAsyEi5jb252ZXJzYXRpb24uU2VlblIEc2VlbhIjCgNhY2sYBSADKAsyE
  S5jb252ZXJzYXRpb24uQWNrUgNhY2sSMgoIcmVjZWl2ZWQYBiADKAsyFi5jb252ZXJzYXRpb24uUmVjZWl2ZWRSCHJlY2VpdmVkI
  jMKBFNlZW4SGwoJbWVtYmVyX2lkGAYgASgJUghtZW1iZXJJZBIOCgJhdBgEIAEoA1ICYXQiSAoDQWNrEhsKCW1lbWJlcl9pZBgFI
  AEoCVIIbWVtYmVySWQSFAoFZXJyb3IYBiABKAlSBWVycm9yEg4KAmF0GAQgASgDUgJhdCI3CghSZWNlaXZlZBIbCgltZW1iZXJfa
  WQYBCABKAlSCG1lbWJlcklkEg4KAmF0GAUgASgDUgJhdCIvCgVGaWVsZBIUCgV2YWx1ZRgDIAEoCVIFdmFsdWUSEAoDa2V5GAIgA
  SgJUgNrZXki7wEKBkJ1dHRvbhISCgR0eXBlGAIgASgJUgR0eXBlEg4KAmlkGA8gASgJUgJpZBIUCgV0aXRsZRgDIAEoCVIFdGl0b
  GUSGAoHcGF5bG9hZBgEIAEoCVIHcGF5bG9hZBIbCglpbWFnZV91cmwYBSABKAlSCGltYWdlVXJsEh0KCmNvbnRlbnRfaWQYCiABK
  AlSCWNvbnRlbnRJZBIQCgN1cmwYDiABKAlSA3VybCJDCgpCdXR0b25UeXBlEg4KCnVybF9idXR0b24QAhITCg9wb3N0YmFja19id
  XR0b24QAxIQCgxldmVudF9idXR0b24QBCJMChNBc2tJbmZvbWF0aW9uQW5zd2VyEh0KCm1lc3NhZ2VfaWQYAiABKAlSCW1lc3NhZ
  2VJZBIWCgZhbnN3ZXIYAyABKAlSBmFuc3dlciKNAgoNQXNrSW5mb21hdGlvbhIaCghxdWVzdGlvbhgCIAEoCVIIcXVlc3Rpb24SH
  QoKaW5wdXRfdHlwZRgDIAEoCVIJaW5wdXRUeXBlEhAKA2tleRgEIAEoCVIDa2V5EhYKBmFuc3dlchgFIAEoCVIGYW5zd2VyEhoKC
  GFuc3dlcmVkGAYgASgDUghhbnN3ZXJlZCJ7CglJbnB1dFR5cGUSCQoFcGhvbmUQABIJCgVlbWFpbBABEggKBHRleHQQAhIMCghwY
  XNzd29yZBADEgoKBm51bWJlchAEEggKBGRhdGUQBRIJCgVjb2xvchAGEgwKCGxvY2F0aW9uEAcSCAoEdGltZRAIEgcKA3VybBAJI
  tQBChZHZW5lcmljRWxlbWVudFRlbXBsYXRlEhQKBXRpdGxlGAIgASgJUgV0aXRsZRIbCglpbWFnZV91cmwYAyABKAlSCGltYWdlV
  XJsEhoKCHN1YnRpdGxlGAQgASgJUghzdWJ0aXRsZRI7Cg5kZWZhdWx0X2FjdGlvbhgFIAEoCzIULmNvbnZlcnNhdGlvbi5CdXR0b
  25SDWRlZmF1bHRBY3Rpb24SLgoHYnV0dG9ucxgGIAMoCzIULmNvbnZlcnNhdGlvbi5CdXR0b25SB2J1dHRvbnMi8wQKCkF0dGFja
  G1lbnQSEgoEdHlwZRgMIAEoCVIEdHlwZRIaCghtaW1ldHlwZRgCIAEoCVIIbWltZXR5cGUSEAoDdXJsGAMgASgJUgN1cmwSIwoNd
  Gh1bWJuYWlsX3VybBgEIAEoCVIMdGh1bWJuYWlsVXJsEhIKBG5hbWUYBSABKAlSBG5hbWUSIAoLZGVzY3JpcHRpb24YBiABKAlSC
  2Rlc2NyaXB0aW9uEhYKBmxlbmd0aBgPIAEoBVIGbGVuZ3RoEhIKBHNpemUYDSABKAVSBHNpemUSQAoIZWxlbWVudHMYCCADKAsyJ
  C5jb252ZXJzYXRpb24uR2VuZXJpY0VsZW1lbnRUZW1wbGF0ZVIIZWxlbWVudHMSFAoFdGl0bGUYCSABKAlSBXRpdGxlEhQKBWNvb
  G9yGAogASgJUgVjb2xvchIYCgdwcmV0ZXh0GAsgASgJUgdwcmV0ZXh0Ei4KB2J1dHRvbnMYECADKAsyFC5jb252ZXJzYXRpb24uQ
  nV0dG9uUgdidXR0b25zEjYKCGFza19pbmZvGBEgASgLMhsuY29udmVyc2F0aW9uLkFza0luZm9tYXRpb25SB2Fza0luZm8SSQoPY
  XNrX2luZm9fYW5zd2VyGBIgASgLMiEuY29udmVyc2F0aW9uLkFza0luZm9tYXRpb25BbnN3ZXJSDWFza0luZm9BbnN3ZXISJgoEZ
  m9ybRgUIAEoCzISLmNvbnZlcnNhdGlvbi5Gb3JtUgRmb3JtEjkKC2Zvcm1fc3VibWl0GBUgASgLMhguY29udmVyc2F0aW9uLkZvc
  m1TdWJtaXRSCmZvcm1TdWJtaXQiggEKBEZvcm0SFAoFdGl0bGUYAiABKAlSBXRpdGxlEhQKBXN0YXRlGAMgASgJUgVzdGF0ZRIvC
  gZmaWVsZHMYBCADKAsyFy5jb252ZXJzYXRpb24uRm9ybUZpZWxkUgZmaWVsZHMSHQoKc3VibWl0X3VybBgFIAEoCVIJc3VibWl0V
  XJsImUKCkZvcm1TdWJtaXQSJgoPZm9ybV9tZXNzYWdlX2lkGAIgASgJUg1mb3JtTWVzc2FnZUlkEi8KBmZpZWxkcxgDIAMoCzIXL
  mNvbnZlcnNhdGlvbi5Gb3JtRmllbGRSBmZpZWxkcyLRAQoJRm9ybUZpZWxkEh0KCmlucHV0X3R5cGUYAiABKAlSCWlucHV0VHlwZ
  RIUCgVpdGVtcxgDIAMoCVIFaXRlbXMSFAoFc3RhdGUYBCABKAlSBXN0YXRlEhQKBXRpdGxlGAUgASgJUgV0aXRsZRIbCglpbWFnZ
  V91cmwYBiABKAlSCGltYWdlVXJsEhIKBG5hbWUYByABKAlSBG5hbWUSFgoGYW5zd2VyGAggASgJUgZhbnN3ZXISGgoIYW5zd2VyZ
  WQYCSABKANSCGFuc3dlcmVkItgBCgNUYWcSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIOCgJpZBgCIAEoCVICa
  WQSHQoKYWNjb3VudF9pZBgDIAEoCVIJYWNjb3VudElkEhQKBXRpdGxlGAQgASgJUgV0aXRsZRIYCgdjcmVhdGVkGAUgASgDUgdjc
  mVhdGVkEhoKCG1vZGlmaWVkGAYgASgDUghtb2RpZmllZBIdCgpjcmVhdG9yX2lkGAcgASgJUgljcmVhdG9ySWQSFAoFY29sb3IYC
  CABKAlSBWNvbG9yItoBCg5DYW5uZWRSZXNwb25zZRIhCgNjdHgYASABKAsyDy5jb21tb24uQ29udGV4dFIDY3R4Eg4KAmlkGAIgA
  SgJUgJpZBIdCgphY2NvdW50X2lkGAMgASgJUglhY2NvdW50SWQSEgoEdGV4dBgFIAEoCVIEdGV4dBISCgRrZXlzGAYgAygJUgRrZ
  XlzEhgKB2NyZWF0ZWQYByABKANSB2NyZWF0ZWQSGgoIbW9kaWZpZWQYCCABKANSCG1vZGlmaWVkEhgKB2NyZWF0b3IYCSABKAlSB
  2NyZWF0b3IicAoPQ2FubmVkUmVzcG9uc2VzEiEKA2N0eBgBIAEoCzIPLmNvbW1vbi5Db250ZXh0UgNjdHgSOgoJcmVzcG9uc2VzG
  AMgAygLMhwuY29udmVyc2F0aW9uLkNhbm5lZFJlc3BvbnNlUglyZXNwb25zZXMiUAoEVGFncxIhCgNjdHgYASABKAsyDy5jb21tb
  24uQ29udGV4dFIDY3R4EiUKBHRhZ3MYBCADKAsyES5jb252ZXJzYXRpb24uVGFnUgR0YWdzImkKCFBvc3RiYWNrEi8KB21lc3NhZ
  2UYAiABKAsyFS5jb252ZXJzYXRpb24uTWVzc2FnZVIHbWVzc2FnZRIsCgZidXR0b24YAyABKAsyFC5jb252ZXJzYXRpb24uQnV0d
  G9uUgZidXR0b24itgEKDFVzZUNvbm5lY3RvchIdCgphY2NvdW50X2lkGAIgASgJUglhY2NvdW50SWQSIQoMY29ubmVjdG9yX2lkG
  AMgASgJUgtjb25uZWN0b3JJZBIUCgVzdGF0ZRgIIAEoCVIFc3RhdGUSGAoHdXBkYXRlZBgJIAEoCVIHdXBkYXRlZBIOCgJieRgKI
  AEoCVICYnkiJAoFU3RhdGUSDAoIZGlzYWJsZWQQABINCglhY3RpdmF0ZWQQASKPAQoMSW50ZWdyYXRpb25zEiEKA2N0eBgBIAEoC
  zIPLmNvbW1vbi5Db250ZXh0UgNjdHgSHQoKYWNjb3VudF9pZBgCIAEoCVIJYWNjb3VudElkEj0KDGludGVncmF0aW9ucxgDIAMoC
  zIZLmNvbnZlcnNhdGlvbi5JbnRlZ3JhdGlvblIMaW50ZWdyYXRpb25zIs4CCgtJbnRlZ3JhdGlvbhIhCgNjdHgYASABKAsyDy5jb
  21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBIhCgxjb25uZWN0b3JfaWQYAyABKAlSC2Nvb
  m5lY3RvcklkEhkKCGxvZ29fdXJsGAQgASgJUgdsb2dvVXJsEhIKBG5hbWUYBSABKAlSBG5hbWUSJQoOY29ubmVjdG9yX3R5cGUYD
  CABKAlSDWNvbm5lY3RvclR5cGUSHgoKaW50ZWdyYXRlZBgGIAEoA1IKaW50ZWdyYXRlZBIYCgd1cGRhdGVkGAcgASgDUgd1cGRhd
  GVkEhQKBXN0YXRlGAggASgJUgVzdGF0ZRIOCgJpZBgKIAEoCVICaWQiJAoFU3RhdGUSDAoIZGlzYWJsZWQQABINCglhY3RpdmF0Z
  WQQASLgAQoUU2VhcmNoTWVzc2FnZVJlcXVlc3QSIQoDY3R4GAEgASgLMg8uY29tbW9uLkNvbnRleHRSA2N0eBIdCgphY2NvdW50X
  2lkGAIgASgJUglhY2NvdW50SWQSJwoPY29udmVyc2F0aW9uX2lkGAMgASgJUg5jb252ZXJzYXRpb25JZBIZCgh1c2VyX2lkcxgEI
  AMoCVIHdXNlcklkcxIUCgVxdWVyeRgFIAEoCVIFcXVlcnkSFgoGYW5jaG9yGAYgASgJUgZhbmNob3ISFAoFbGltaXQYByABKAVSB
  WxpbWl0IlMKCU1lc3NhZ2VJZBInCg9jb252ZXJzYXRpb25faWQYAyABKAlSDmNvbnZlcnNhdGlvbklkEh0KCm1lc3NhZ2VfaWQYB
  CABKAlSCW1lc3NhZ2VJZCJqCgpNZXNzYWdlQWNrEicKD2NvbnZlcnNhdGlvbl9pZBgDIAEoCVIOY29udmVyc2F0aW9uSWQSHQoKb
  WVzc2FnZV9pZBgEIAEoCVIJbWVzc2FnZUlkEhQKBWVycm9yGAUgASgJUgVlcnJvciKHAQoKVGFnUmVxdWVzdBIhCgNjdHgYASABK
  AsyDy5jb21tb24uQ29udGV4dFIDY3R4Eh0KCmFjY291bnRfaWQYAiABKAlSCWFjY291bnRJZBInCg9jb252ZXJzYXRpb25faWQYA
  yABKAlSDmNvbnZlcnNhdGlvbklkEg4KAmlkGAQgASgJUgJpZCKtAQoTQ291bnRCeUFnZW50UmVxdWVzdBIlCg5pbnRlZ3JhdGlvb
  l9pZBgDIAEoCVINaW50ZWdyYXRpb25JZBIZCghhZ2VudF9pZBgEIAEoCVIHYWdlbnRJZBISCgRmcm9tGAUgASgFUgRmcm9tEg4KA
  nRvGAYgASgFUgJ0bxIUCgVyYW5nZRgIIAEoCVIFcmFuZ2UiGgoFUmFuZ2USCAoEaG91chAAEgcKA2RheRABIq0BChNDb3VudEJ5R
  3JvdXBSZXF1ZXN0EiUKDmludGVncmF0aW9uX2lkGAMgASgJUg1pbnRlZ3JhdGlvbklkEhkKCGdyb3VwX2lkGAQgASgJUgdncm91c
  ElkEhIKBGZyb20YBSABKAVSBGZyb20SDgoCdG8YBiABKAVSAnRvEhQKBXJhbmdlGAggASgJUgVyYW5nZSIaCgVSYW5nZRIICgRob
  3VyEAASBwoDZGF5EAEisAEKFENvdW50QnlBZ2VudHNSZXF1ZXN0EiUKDmludGVncmF0aW9uX2lkGAMgASgJUg1pbnRlZ3JhdGlvb
  klkEhsKCWFnZW50X2lkcxgEIAMoCVIIYWdlbnRJZHMSEgoEZnJvbRgFIAEoBVIEZnJvbRIOCgJ0bxgGIAEoBVICdG8SFAoFcmFuZ
  2UYCCABKAlSBXJhbmdlIhoKBVJhbmdlEggKBGhvdXIQABIHCgNkYXkQASKqAQoSQ291bnRCeVRhZ3NSZXF1ZXN0EiUKDmludGVnc
  mF0aW9uX2lkGAMgASgJUg1pbnRlZ3JhdGlvbklkEhcKB3RhZ19pZHMYBCADKAlSBnRhZ0lkcxISCgRmcm9tGAUgASgFUgRmcm9tE
  g4KAnRvGAYgASgFUgJ0bxIUCgVyYW5nZRgIIAEoCVIFcmFuZ2UiGgoFUmFuZ2USCAoEaG91chAAEgcKA2RheRABIj0KDENvdW50Q
  nlBZ2VudBIZCghhZ2VudF9pZBgCIAEoCVIHYWdlbnRJZBISCgRkYXRhGAMgAygDUgRkYXRhIj0KDENvdW50QnlHcm91cBIZCghnc
  m91cF9pZBgCIAEoCVIHZ3JvdXBJZBISCgRkYXRhGAMgAygDUgRkYXRhIjcKCkNvdW50QnlUYWcSFQoGdGFnX2lkGAIgASgJUgV0Y
  WdJZBISCgRkYXRhGAMgAygDUgRkYXRhIkMKE0NvdW50QnlUYWdzUmVzcG9uc2USLAoEZGF0YRgCIAMoCzIYLmNvbnZlcnNhdGlvb
  i5Db3VudEJ5VGFnUgRkYXRhIkcKFUNvdW50QnlBZ2VudHNSZXNwb25zZRIuCgRkYXRhGAIgAygLMhouY29udmVyc2F0aW9uLkNvd
  W50QnlBZ2VudFIEZGF0YSJjChZBdmdSZXNwb25zZVRpbWVSZXF1ZXN0EiUKDmludGVncmF0aW9uX2lkGAMgASgJUg1pbnRlZ3Jhd
  GlvbklkEhIKBGZyb20YBSABKAVSBGZyb20SDgoCdG8YBiABKAVSAnRvIkMKF0F2Z1Jlc3BvbnNlVGltZVJlc3BvbnNlEigKEGF2Z
  19yZXNwb25zZV9zZWMYAiABKAFSDmF2Z1Jlc3BvbnNlU2VjIkoKGVRvdGFsQ29udmVyc2F0aW9uUmVzcG9uc2USLQoSdG90YWxfY
  29udmVyc2F0aW9uGAIgASgDUhF0b3RhbENvbnZlcnNhdGlvbiqbDAoFRXZlbnQSGAoUQ29udmVyc2F0aW9uQXNzaWduZWQQABIXC
  hNDb252ZXJzYXRpb25XYWl0aW5nEAISHgoaQ29udmVyc2F0aW9uU3RhcnRSZXF1ZXN0ZWQQAxIYChRDb252ZXJzYXRpb25BY2Nlc
  HRlZBAEEhcKE0NvbnZlcnNhdGlvbkRyb3BwZWQQBRIcChhDb252ZXJzYXRpb25FdmVudENyZWF0ZWQQBhIdChlDb252ZXJzYXRpb
  25Kb2luUmVxdWVzdGVkEAcSIAocQ29udmVyc2F0aW9uTWVzc2FnZVJlcXVlc3RlZBAIEh4KGkNvbnZlcnNhdGlvbkxlYXZlUmVxd
  WVzdGVkEAkSHgoaQ29udmVyc2F0aW9uQ2xvc2VSZXF1ZXN0ZWQQChIcChhDb252ZXJzYXRpb25UYWdSZXF1ZXN0ZWQQCxIeChpDb
  252ZXJzYXRpb25VbnRhZ1JlcXVlc3RlZBAMEh0KGUNvbnZlcnNhdGlvblJlYWRSZXF1ZXN0ZWQQDRIdChlDb252ZXJzYXRpb25Ma
  XN0UmVxdWVzdGVkEA4SHwobQ29udmVyc2F0aW9uQWNjZXB0UmVxdWVzdGVkEA8SIwofQ29udmVyc2F0aW9uVXBkYXRlUnVsZVJlc
  XVlc3RlZBAUEiMKH0NvbnZlcnNhdGlvbkNyZWF0ZVJ1bGVSZXF1ZXN0ZWQQFRIjCh9Db252ZXJzYXRpb25EZWxldGVSdWxlUmVxd
  WVzdGVkEBYSIQodQ29udmVyc2F0aW9uUmVhZFJ1bGVSZXF1ZXN0ZWQQFxIhCh1Db252ZXJzYXRpb25MaXN0UnVsZVJlcXVlc3RlZ
  BAYEiAKHENvbnZlcnNhdGlvblVzZXJSZXF1ZXN0UmVwbHkQMxIcChhDb252ZXJzYXRpb25MaW1pdFVwZGF0ZWQQNBIiCh5Db252Z
  XJzYXRpb25SZXF1ZXN0V2FpdFRpbWVvdXQQPBIjCh9Db252ZXJzYXRpb25MaXN0RXZlbnRzUmVxdWVzdGVkED0SHwobQ2hhbm5lb
  ERlaW50ZWdyYXRlUmVxdWVzdGVkEEESHQoZQ2hhbm5lbEludGVncmF0ZVJlcXVlc3RlZBBCEiMKH0NoYW5uZWxJbnRlZ3JhdGlvb
  kxpc3RSZXF1ZXN0ZWQQQxIcChhDb25uZWN0b3JVcHNlcnRSZXF1ZXN0ZWQQRBIaChZDb25uZWN0b3JMaXN0UmVxdWVzdGVkEEUSI
  QodQ2FubmVkUmVzcG9uc2VDcmVhdGVSZXF1ZXN0ZWQQUBIhCh1DYW5uZWRSZXNwb25zZVVwZGF0ZVJlcXVlc3RlZBBREiEKHUNhb
  m5lZFJlc3BvbnNlRGVsZXRlUmVxdWVzdGVkEFISHwobQ2FubmVkUmVzcG9uc2VSZWFkUmVxdWVzdGVkEFMSHwobQ2FubmVkUmVzc
  G9uc2VMaXN0UmVxdWVzdGVkEFQSFgoSVGFnQ3JlYXRlUmVxdWVzdGVkEFUSFgoSVGFnVXBkYXRlUmVxdWVzdGVkEFYSFAoQVGFnU
  mVhZFJlcXVlc3RlZBBXEhYKElRhZ0RlbGV0ZVJlcXVlc3RlZBBYEhQKEFRhZ0xpc3RSZXF1ZXN0ZWQQWRIOCgpUYWdDcmVhdGVkE
  F8SGAoUQ29udmVyc2F0aW9uVXBzZXJ0ZWQQYRIbChdDb252ZXJzYXRpb25NZXNzYWdlU2VudBBjEiMKH0NvbnZlcnNhdGlvbk1lc
  3NhZ2VBY2tSZXF1ZXN0ZWQQWhInCiNDb252ZXJzYXRpb25NZXNzYWdlUmVjZWl2ZVJlcXVlc3RlZBBbEiMKH0NvbnZlcnNhdGlvb
  k1lc3NhZ2VTZWVSZXF1ZXN0ZWQQXBInCiNDaGFubmVsSW50ZWdyYXRpb25BdmFpbGFiaWxpdHlDaGVjaxBdEiQKIENvbnZlcnNhd
  Glvbk1lc3NhZ2VTZWFyY2hSZXF1ZXN0EF4SGQoVQ29udmVyc2F0aW9uUmVxdWVzdGVkEGQSFgoSQ29udmVyc2F0aW9uU3luY2VkE
  GUSGAoUQ29udmVyc2F0aW9uVjNTeW5jZWQQZiqTAQoOQXR0YWNobWVudFR5cGUSCAoEZmlsZRACEgsKB2dlbmVyaWMQAxILCgdwc
  mV2aWV3EAQSCgoGYnV0dG9uEAUSCQoFaW5wdXQQBhIRCg1hc2tfaW5mb19mb3JtEAcSGAoUYXNrX2luZm9fZm9ybV9hbnN3ZXIQC
  BIICgRmb3JtEAkSDwoLZm9ybV9zdWJtaXQQCjL4AQoHUnVsZU1nchI0CgpVcGRhdGVSdWxlEhIuY29udmVyc2F0aW9uLlJ1bGUaE
  i5jb252ZXJzYXRpb24uUnVsZRI0CgpDcmVhdGVSdWxlEhIuY29udmVyc2F0aW9uLlJ1bGUaEi5jb252ZXJzYXRpb24uUnVsZRInC
  gpEZWxldGVSdWxlEgouY29tbW9uLklkGg0uY29tbW9uLkVtcHR5EioKCFJlYWRSdWxlEgouY29tbW9uLklkGhIuY29udmVyc2F0a
  W9uLlJ1bGUSLAoJTGlzdFJ1bGVzEgouY29tbW9uLklkGhMuY29udmVyc2F0aW9uLlJvdXRlMqUGCg9Db252ZXJzYXRpb25NZ3ISN
  QoLU2Vlbk1lc3NhZ2USFy5jb252ZXJzYXRpb24uTWVzc2FnZUlkGg0uY29tbW9uLkVtcHR5EjgKDlJlY2VpdmVNZXNzYWdlEhcuY
  29udmVyc2F0aW9uLk1lc3NhZ2VJZBoNLmNvbW1vbi5FbXB0eRI1CgpBY2tNZXNzYWdlEhguY29udmVyc2F0aW9uLk1lc3NhZ2VBY
  2saDS5jb21tb24uRW1wdHkSSwoRU3RhcnRDb252ZXJzYXRpb24SGi5jb252ZXJzYXRpb24uU3RhcnRSZXF1ZXN0GhouY29udmVyc
  2F0aW9uLkNvbnZlcnNhdGlvbhI5Cg9FbmRDb252ZXJzYXRpb24SCi5jb21tb24uSWQaGi5jb252ZXJzYXRpb24uQ29udmVyc2F0a
  W9uEjkKD0dldENvbnZlcnNhdGlvbhIKLmNvbW1vbi5JZBoaLmNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb24SWAoRTGlzdENvbnZlc
  nNhdGlvbnMSJi5jb252ZXJzYXRpb24uTGlzdENvbnZlcnNhdGlvbnNSZXF1ZXN0GhsuY29udmVyc2F0aW9uLkNvbnZlcnNhdGlvb
  nMSPAoSQWNjZXB0Q29udmVyc2F0aW9uEgouY29tbW9uLklkGhouY29udmVyc2F0aW9uLkNvbnZlcnNhdGlvbhI6Cg9UYWdDb252Z
  XJzYXRpb24SGC5jb252ZXJzYXRpb24uVGFnUmVxdWVzdBoNLmNvbW1vbi5FbXB0eRI8ChFVbnRhZ0NvbnZlcnNhdGlvbhIYLmNvb
  nZlcnNhdGlvbi5UYWdSZXF1ZXN0Gg0uY29tbW9uLkVtcHR5EjcKEEpvaW5Db252ZXJzYXRpb24SFC5jb252ZXJzYXRpb24uTWVtY
  mVyGg0uY29tbW9uLkVtcHR5EjcKEExlZnRDb252ZXJzYXRpb24SFC5jb252ZXJzYXRpb24uTWVtYmVyGg0uY29tbW9uLkVtcHR5E
  iMKBlR5cGluZxIKLmNvbW1vbi5JZBoNLmNvbW1vbi5FbXB0eTLvAgoRQ2FubmVkUmVzcG9uc2VNZ3ISUgoUQ3JlYXRlQ2FubmVkU
  mVzcG9uc2USHC5jb252ZXJzYXRpb24uQ2FubmVkUmVzcG9uc2UaHC5jb252ZXJzYXRpb24uQ2FubmVkUmVzcG9uc2USUgoUVXBkY
  XRlQ2FubmVkUmVzcG9uc2USHC5jb252ZXJzYXRpb24uQ2FubmVkUmVzcG9uc2UaHC5jb252ZXJzYXRpb24uQ2FubmVkUmVzcG9uc
  2USQAoTTGlzdENhbm5lZFJlc3BvbnNlcxIKLmNvbW1vbi5JZBodLmNvbnZlcnNhdGlvbi5DYW5uZWRSZXNwb25zZXMSMQoURGVsZ
  XRlQ2FubmVkUmVzcG9uc2USCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkSPQoRR2V0Q2FubmVkUmVzcG9uc2USCi5jb21tb24uS
  WQaHC5jb252ZXJzYXRpb24uQ2FubmVkUmVzcG9uc2Uy6wEKBlRhZ01nchIxCglDcmVhdGVUYWcSES5jb252ZXJzYXRpb24uVGFnG
  hEuY29udmVyc2F0aW9uLlRhZxIxCglVcGRhdGVUYWcSES5jb252ZXJzYXRpb24uVGFnGhEuY29udmVyc2F0aW9uLlRhZxImCglEZ
  WxldGVUYWcSCi5jb21tb24uSWQaDS5jb21tb24uRW1wdHkSKgoITGlzdFRhZ3MSCi5jb21tb24uSWQaEi5jb252ZXJzYXRpb24uV
  GFncxInCgZHZXRUYWcSCi5jb21tb24uSWQaES5jb252ZXJzYXRpb24uVGFnMp0CCg5JbnRlZ3JhdGlvbk1nchIoCgtEZWludGVnc
  mF0ZRIKLmNvbW1vbi5JZBoNLmNvbW1vbi5FbXB0eRI6ChBMaXN0SW50ZWdyYXRpb25zEgouY29tbW9uLklkGhouY29udmVyc2F0a
  W9uLkludGVncmF0aW9ucxJBCglJbnRlZ3JhdGUSGS5jb252ZXJzYXRpb24uSW50ZWdyYXRpb24aGS5jb252ZXJzYXRpb24uSW50Z
  WdyYXRpb24SYgoRQ2hlY2tBdmFpbGFiaWxpdHkSJi5jb252ZXJzYXRpb24uQXZhaWxhYmlsaXR5Q2hlY2tSZXF1ZXN0GiUuY29ud
  mVyc2F0aW9uLkF2YWlsYWJpbGl0eUNoZWNrUmVzdWx0MuEEChRDb252ZXJzYXRpb25SZXBvcnRlchJaChlDb3VudENvbnZlcnNhd
  GlvbnNCeUFnZW50EiEuY29udmVyc2F0aW9uLkNvdW50QnlBZ2VudFJlcXVlc3QaGi5jb252ZXJzYXRpb24uQ291bnRCeUFnZW50E
  mUKGkNvdW50Q29udmVyc2F0aW9uc0J5QWdlbnRzEiIuY29udmVyc2F0aW9uLkNvdW50QnlBZ2VudHNSZXF1ZXN0GiMuY29udmVyc
  2F0aW9uLkNvdW50QnlBZ2VudHNSZXNwb25zZRJaChlDb3VudENvbnZlcnNhdGlvbnNCeUdyb3VwEiEuY29udmVyc2F0aW9uLkNvd
  W50QnlHcm91cFJlcXVlc3QaGi5jb252ZXJzYXRpb24uQ291bnRCeUdyb3VwEl8KGENvdW50Q29udmVyc2F0aW9uc0J5VGFncxIgL
  mNvbnZlcnNhdGlvbi5Db3VudEJ5VGFnc1JlcXVlc3QaIS5jb252ZXJzYXRpb24uQ291bnRCeVRhZ3NSZXNwb25zZRJiChNHZXRBd
  mdSZXNwb25zZVRpbWVzEiQuY29udmVyc2F0aW9uLkF2Z1Jlc3BvbnNlVGltZVJlcXVlc3QaJS5jb252ZXJzYXRpb24uQXZnUmVzc
  G9uc2VUaW1lUmVzcG9uc2USZQoUR2V0VG90YWxDb252ZXJzYXRpb24SJC5jb252ZXJzYXRpb24uQXZnUmVzcG9uc2VUaW1lUmVxd
  WVzdBonLmNvbnZlcnNhdGlvbi5Ub3RhbENvbnZlcnNhdGlvblJlc3BvbnNl"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      common.CommonProto.javaDescriptor,
      user.UserProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}