// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class FormField(
    inputType: scala.Option[_root_.scala.Predef.String] = None,
    items: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    state: scala.Option[_root_.scala.Predef.String] = None,
    title: scala.Option[_root_.scala.Predef.String] = None,
    imageUrl: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    answer: scala.Option[_root_.scala.Predef.String] = None,
    answered: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FormField] with scalapb.lenses.Updatable[FormField] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (inputType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, inputType.get) }
      items.foreach(items => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, items))
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, state.get) }
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, title.get) }
      if (imageUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, imageUrl.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, name.get) }
      if (answer.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, answer.get) }
      if (answered.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, answered.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      inputType.foreach { __v =>
        _output__.writeString(2, __v)
      };
      items.foreach { __v =>
        _output__.writeString(3, __v)
      };
      state.foreach { __v =>
        _output__.writeString(4, __v)
      };
      title.foreach { __v =>
        _output__.writeString(5, __v)
      };
      imageUrl.foreach { __v =>
        _output__.writeString(6, __v)
      };
      name.foreach { __v =>
        _output__.writeString(7, __v)
      };
      answer.foreach { __v =>
        _output__.writeString(8, __v)
      };
      answered.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.FormField = {
      var __inputType = this.inputType
      val __items = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.items)
      var __state = this.state
      var __title = this.title
      var __imageUrl = this.imageUrl
      var __name = this.name
      var __answer = this.answer
      var __answered = this.answered
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __inputType = Option(_input__.readString())
          case 26 =>
            __items += _input__.readString()
          case 34 =>
            __state = Option(_input__.readString())
          case 42 =>
            __title = Option(_input__.readString())
          case 50 =>
            __imageUrl = Option(_input__.readString())
          case 58 =>
            __name = Option(_input__.readString())
          case 66 =>
            __answer = Option(_input__.readString())
          case 72 =>
            __answered = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.FormField(
          inputType = __inputType,
          items = __items.result(),
          state = __state,
          title = __title,
          imageUrl = __imageUrl,
          name = __name,
          answer = __answer,
          answered = __answered
      )
    }
    def getInputType: _root_.scala.Predef.String = inputType.getOrElse("")
    def clearInputType: FormField = copy(inputType = None)
    def withInputType(__v: _root_.scala.Predef.String): FormField = copy(inputType = Option(__v))
    def clearItems = copy(items = _root_.scala.collection.Seq.empty)
    def addItems(__vs: _root_.scala.Predef.String*): FormField = addAllItems(__vs)
    def addAllItems(__vs: TraversableOnce[_root_.scala.Predef.String]): FormField = copy(items = items ++ __vs)
    def withItems(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): FormField = copy(items = __v)
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: FormField = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): FormField = copy(state = Option(__v))
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: FormField = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): FormField = copy(title = Option(__v))
    def getImageUrl: _root_.scala.Predef.String = imageUrl.getOrElse("")
    def clearImageUrl: FormField = copy(imageUrl = None)
    def withImageUrl(__v: _root_.scala.Predef.String): FormField = copy(imageUrl = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: FormField = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): FormField = copy(name = Option(__v))
    def getAnswer: _root_.scala.Predef.String = answer.getOrElse("")
    def clearAnswer: FormField = copy(answer = None)
    def withAnswer(__v: _root_.scala.Predef.String): FormField = copy(answer = Option(__v))
    def getAnswered: _root_.scala.Long = answered.getOrElse(0L)
    def clearAnswered: FormField = copy(answered = None)
    def withAnswered(__v: _root_.scala.Long): FormField = copy(answered = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => inputType.orNull
        case 3 => items
        case 4 => state.orNull
        case 5 => title.orNull
        case 6 => imageUrl.orNull
        case 7 => name.orNull
        case 8 => answer.orNull
        case 9 => answered.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => inputType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(items.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 4 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => imageUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => answer.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => answered.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.FormField
}

object FormField extends scalapb.GeneratedMessageCompanion[conversation.FormField] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.FormField] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.FormField = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.FormField(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.FormField] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.FormField(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.FormField(
  )
  implicit class FormFieldLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.FormField]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.FormField](_l) {
    def inputType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getInputType)((c_, f_) => c_.copy(inputType = Option(f_)))
    def optionalInputType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.inputType)((c_, f_) => c_.copy(inputType = f_))
    def items: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.items)((c_, f_) => c_.copy(items = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def imageUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getImageUrl)((c_, f_) => c_.copy(imageUrl = Option(f_)))
    def optionalImageUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.imageUrl)((c_, f_) => c_.copy(imageUrl = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def answer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnswer)((c_, f_) => c_.copy(answer = Option(f_)))
    def optionalAnswer: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.answer)((c_, f_) => c_.copy(answer = f_))
    def answered: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getAnswered)((c_, f_) => c_.copy(answered = Option(f_)))
    def optionalAnswered: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.answered)((c_, f_) => c_.copy(answered = f_))
  }
  final val INPUT_TYPE_FIELD_NUMBER = 2
  final val ITEMS_FIELD_NUMBER = 3
  final val STATE_FIELD_NUMBER = 4
  final val TITLE_FIELD_NUMBER = 5
  final val IMAGE_URL_FIELD_NUMBER = 6
  final val NAME_FIELD_NUMBER = 7
  final val ANSWER_FIELD_NUMBER = 8
  final val ANSWERED_FIELD_NUMBER = 9
}
