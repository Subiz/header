// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class CountByAgentRequest(
    integrationId: scala.Option[_root_.scala.Predef.String] = None,
    agentId: scala.Option[_root_.scala.Predef.String] = None,
    from: scala.Option[_root_.scala.Int] = None,
    to: scala.Option[_root_.scala.Int] = None,
    range: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[CountByAgentRequest] with scalapb.lenses.Updatable[CountByAgentRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (integrationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, integrationId.get) }
      if (agentId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, agentId.get) }
      if (from.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, from.get) }
      if (to.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, to.get) }
      if (range.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, range.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      integrationId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      agentId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      from.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      to.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
      range.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.CountByAgentRequest = {
      var __integrationId = this.integrationId
      var __agentId = this.agentId
      var __from = this.from
      var __to = this.to
      var __range = this.range
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __integrationId = Option(_input__.readString())
          case 34 =>
            __agentId = Option(_input__.readString())
          case 40 =>
            __from = Option(_input__.readInt32())
          case 48 =>
            __to = Option(_input__.readInt32())
          case 66 =>
            __range = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.CountByAgentRequest(
          integrationId = __integrationId,
          agentId = __agentId,
          from = __from,
          to = __to,
          range = __range
      )
    }
    def getIntegrationId: _root_.scala.Predef.String = integrationId.getOrElse("")
    def clearIntegrationId: CountByAgentRequest = copy(integrationId = None)
    def withIntegrationId(__v: _root_.scala.Predef.String): CountByAgentRequest = copy(integrationId = Option(__v))
    def getAgentId: _root_.scala.Predef.String = agentId.getOrElse("")
    def clearAgentId: CountByAgentRequest = copy(agentId = None)
    def withAgentId(__v: _root_.scala.Predef.String): CountByAgentRequest = copy(agentId = Option(__v))
    def getFrom: _root_.scala.Int = from.getOrElse(0)
    def clearFrom: CountByAgentRequest = copy(from = None)
    def withFrom(__v: _root_.scala.Int): CountByAgentRequest = copy(from = Option(__v))
    def getTo: _root_.scala.Int = to.getOrElse(0)
    def clearTo: CountByAgentRequest = copy(to = None)
    def withTo(__v: _root_.scala.Int): CountByAgentRequest = copy(to = Option(__v))
    def getRange: _root_.scala.Predef.String = range.getOrElse("")
    def clearRange: CountByAgentRequest = copy(range = None)
    def withRange(__v: _root_.scala.Predef.String): CountByAgentRequest = copy(range = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => integrationId.orNull
        case 4 => agentId.orNull
        case 5 => from.orNull
        case 6 => to.orNull
        case 8 => range.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => integrationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => agentId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => from.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => to.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => range.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.CountByAgentRequest
}

object CountByAgentRequest extends scalapb.GeneratedMessageCompanion[conversation.CountByAgentRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.CountByAgentRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.CountByAgentRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.CountByAgentRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.CountByAgentRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.CountByAgentRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.CountByAgentRequest(
  )
  sealed trait Range extends _root_.scalapb.GeneratedEnum {
    type EnumType = Range
    def ishour: _root_.scala.Boolean = false
    def isday: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Range] = conversation.CountByAgentRequest.Range
  }
  
  object Range extends _root_.scalapb.GeneratedEnumCompanion[Range] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Range] = this
    @SerialVersionUID(0L)
    case object hour extends Range {
      val value = 0
      val index = 0
      val name = "hour"
      override def ishour: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object day extends Range {
      val value = 1
      val index = 1
      val name = "day"
      override def isday: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Range with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(hour, day)
    def fromValue(value: _root_.scala.Int): Range = value match {
      case 0 => hour
      case 1 => day
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.CountByAgentRequest.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.CountByAgentRequest.scalaDescriptor.enums(0)
  }
  implicit class CountByAgentRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.CountByAgentRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.CountByAgentRequest](_l) {
    def integrationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIntegrationId)((c_, f_) => c_.copy(integrationId = Option(f_)))
    def optionalIntegrationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.integrationId)((c_, f_) => c_.copy(integrationId = f_))
    def agentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAgentId)((c_, f_) => c_.copy(agentId = Option(f_)))
    def optionalAgentId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.agentId)((c_, f_) => c_.copy(agentId = f_))
    def from: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getFrom)((c_, f_) => c_.copy(from = Option(f_)))
    def optionalFrom: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.from)((c_, f_) => c_.copy(from = f_))
    def to: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getTo)((c_, f_) => c_.copy(to = Option(f_)))
    def optionalTo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.to)((c_, f_) => c_.copy(to = f_))
    def range: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.range)((c_, f_) => c_.copy(range = f_))
  }
  final val INTEGRATION_ID_FIELD_NUMBER = 3
  final val AGENT_ID_FIELD_NUMBER = 4
  final val FROM_FIELD_NUMBER = 5
  final val TO_FIELD_NUMBER = 6
  final val RANGE_FIELD_NUMBER = 8
}
