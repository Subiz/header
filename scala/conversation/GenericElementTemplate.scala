// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class GenericElementTemplate(
    title: scala.Option[_root_.scala.Predef.String] = None,
    imageUrl: scala.Option[_root_.scala.Predef.String] = None,
    subtitle: scala.Option[_root_.scala.Predef.String] = None,
    defaultAction: scala.Option[conversation.Button] = None,
    buttons: _root_.scala.collection.Seq[conversation.Button] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[GenericElementTemplate] with scalapb.lenses.Updatable[GenericElementTemplate] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, title.get) }
      if (imageUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, imageUrl.get) }
      if (subtitle.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, subtitle.get) }
      if (defaultAction.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(defaultAction.get.serializedSize) + defaultAction.get.serializedSize }
      buttons.foreach(buttons => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(buttons.serializedSize) + buttons.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      title.foreach { __v =>
        _output__.writeString(2, __v)
      };
      imageUrl.foreach { __v =>
        _output__.writeString(3, __v)
      };
      subtitle.foreach { __v =>
        _output__.writeString(4, __v)
      };
      defaultAction.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      buttons.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.GenericElementTemplate = {
      var __title = this.title
      var __imageUrl = this.imageUrl
      var __subtitle = this.subtitle
      var __defaultAction = this.defaultAction
      val __buttons = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Button] ++= this.buttons)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __title = Option(_input__.readString())
          case 26 =>
            __imageUrl = Option(_input__.readString())
          case 34 =>
            __subtitle = Option(_input__.readString())
          case 42 =>
            __defaultAction = Option(_root_.scalapb.LiteParser.readMessage(_input__, __defaultAction.getOrElse(conversation.Button.defaultInstance)))
          case 50 =>
            __buttons += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Button.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      conversation.GenericElementTemplate(
          title = __title,
          imageUrl = __imageUrl,
          subtitle = __subtitle,
          defaultAction = __defaultAction,
          buttons = __buttons.result()
      )
    }
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: GenericElementTemplate = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): GenericElementTemplate = copy(title = Option(__v))
    def getImageUrl: _root_.scala.Predef.String = imageUrl.getOrElse("")
    def clearImageUrl: GenericElementTemplate = copy(imageUrl = None)
    def withImageUrl(__v: _root_.scala.Predef.String): GenericElementTemplate = copy(imageUrl = Option(__v))
    def getSubtitle: _root_.scala.Predef.String = subtitle.getOrElse("")
    def clearSubtitle: GenericElementTemplate = copy(subtitle = None)
    def withSubtitle(__v: _root_.scala.Predef.String): GenericElementTemplate = copy(subtitle = Option(__v))
    def getDefaultAction: conversation.Button = defaultAction.getOrElse(conversation.Button.defaultInstance)
    def clearDefaultAction: GenericElementTemplate = copy(defaultAction = None)
    def withDefaultAction(__v: conversation.Button): GenericElementTemplate = copy(defaultAction = Option(__v))
    def clearButtons = copy(buttons = _root_.scala.collection.Seq.empty)
    def addButtons(__vs: conversation.Button*): GenericElementTemplate = addAllButtons(__vs)
    def addAllButtons(__vs: TraversableOnce[conversation.Button]): GenericElementTemplate = copy(buttons = buttons ++ __vs)
    def withButtons(__v: _root_.scala.collection.Seq[conversation.Button]): GenericElementTemplate = copy(buttons = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => title.orNull
        case 3 => imageUrl.orNull
        case 4 => subtitle.orNull
        case 5 => defaultAction.orNull
        case 6 => buttons
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => imageUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => subtitle.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => defaultAction.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(buttons.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.GenericElementTemplate
}

object GenericElementTemplate extends scalapb.GeneratedMessageCompanion[conversation.GenericElementTemplate] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.GenericElementTemplate] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.GenericElementTemplate = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.GenericElementTemplate(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[conversation.Button]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Button]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.GenericElementTemplate] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.GenericElementTemplate(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[conversation.Button]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[conversation.Button]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = conversation.Button
      case 6 => __out = conversation.Button
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.GenericElementTemplate(
  )
  implicit class GenericElementTemplateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.GenericElementTemplate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.GenericElementTemplate](_l) {
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def imageUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getImageUrl)((c_, f_) => c_.copy(imageUrl = Option(f_)))
    def optionalImageUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.imageUrl)((c_, f_) => c_.copy(imageUrl = f_))
    def subtitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubtitle)((c_, f_) => c_.copy(subtitle = Option(f_)))
    def optionalSubtitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.subtitle)((c_, f_) => c_.copy(subtitle = f_))
    def defaultAction: _root_.scalapb.lenses.Lens[UpperPB, conversation.Button] = field(_.getDefaultAction)((c_, f_) => c_.copy(defaultAction = Option(f_)))
    def optionalDefaultAction: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Button]] = field(_.defaultAction)((c_, f_) => c_.copy(defaultAction = f_))
    def buttons: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Button]] = field(_.buttons)((c_, f_) => c_.copy(buttons = f_))
  }
  final val TITLE_FIELD_NUMBER = 2
  final val IMAGE_URL_FIELD_NUMBER = 3
  final val SUBTITLE_FIELD_NUMBER = 4
  final val DEFAULT_ACTION_FIELD_NUMBER = 5
  final val BUTTONS_FIELD_NUMBER = 6
}
