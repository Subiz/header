// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class FormSubmit(
    formMessageId: scala.Option[_root_.scala.Predef.String] = None,
    fields: _root_.scala.collection.Seq[conversation.FormField] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[FormSubmit] with scalapb.lenses.Updatable[FormSubmit] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (formMessageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, formMessageId.get) }
      fields.foreach(fields => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      formMessageId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      fields.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.FormSubmit = {
      var __formMessageId = this.formMessageId
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.FormField] ++= this.fields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __formMessageId = Option(_input__.readString())
          case 26 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, conversation.FormField.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      conversation.FormSubmit(
          formMessageId = __formMessageId,
          fields = __fields.result()
      )
    }
    def getFormMessageId: _root_.scala.Predef.String = formMessageId.getOrElse("")
    def clearFormMessageId: FormSubmit = copy(formMessageId = None)
    def withFormMessageId(__v: _root_.scala.Predef.String): FormSubmit = copy(formMessageId = Option(__v))
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: conversation.FormField*): FormSubmit = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[conversation.FormField]): FormSubmit = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[conversation.FormField]): FormSubmit = copy(fields = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => formMessageId.orNull
        case 3 => fields
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => formMessageId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.FormSubmit
}

object FormSubmit extends scalapb.GeneratedMessageCompanion[conversation.FormSubmit] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.FormSubmit] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.FormSubmit = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.FormSubmit(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.FormField]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.FormSubmit] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.FormSubmit(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[conversation.FormField]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = conversation.FormField
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.FormSubmit(
  )
  implicit class FormSubmitLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.FormSubmit]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.FormSubmit](_l) {
    def formMessageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFormMessageId)((c_, f_) => c_.copy(formMessageId = Option(f_)))
    def optionalFormMessageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.formMessageId)((c_, f_) => c_.copy(formMessageId = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.FormField]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
  }
  final val FORM_MESSAGE_ID_FIELD_NUMBER = 2
  final val FIELDS_FIELD_NUMBER = 3
}
