// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class SearchMessageRequest(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None,
    userIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    query: scala.Option[_root_.scala.Predef.String] = None,
    anchor: scala.Option[_root_.scala.Predef.String] = None,
    limit: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[SearchMessageRequest] with scalapb.lenses.Updatable[SearchMessageRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, conversationId.get) }
      userIds.foreach(userIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, userIds))
      if (query.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, query.get) }
      if (anchor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, anchor.get) }
      if (limit.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, limit.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      conversationId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      userIds.foreach { __v =>
        _output__.writeString(4, __v)
      };
      query.foreach { __v =>
        _output__.writeString(5, __v)
      };
      anchor.foreach { __v =>
        _output__.writeString(6, __v)
      };
      limit.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.SearchMessageRequest = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __conversationId = this.conversationId
      val __userIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.userIds)
      var __query = this.query
      var __anchor = this.anchor
      var __limit = this.limit
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __conversationId = Option(_input__.readString())
          case 34 =>
            __userIds += _input__.readString()
          case 42 =>
            __query = Option(_input__.readString())
          case 50 =>
            __anchor = Option(_input__.readString())
          case 56 =>
            __limit = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.SearchMessageRequest(
          ctx = __ctx,
          accountId = __accountId,
          conversationId = __conversationId,
          userIds = __userIds.result(),
          query = __query,
          anchor = __anchor,
          limit = __limit
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: SearchMessageRequest = copy(ctx = None)
    def withCtx(__v: common.Context): SearchMessageRequest = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: SearchMessageRequest = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): SearchMessageRequest = copy(accountId = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: SearchMessageRequest = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): SearchMessageRequest = copy(conversationId = Option(__v))
    def clearUserIds = copy(userIds = _root_.scala.collection.Seq.empty)
    def addUserIds(__vs: _root_.scala.Predef.String*): SearchMessageRequest = addAllUserIds(__vs)
    def addAllUserIds(__vs: TraversableOnce[_root_.scala.Predef.String]): SearchMessageRequest = copy(userIds = userIds ++ __vs)
    def withUserIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): SearchMessageRequest = copy(userIds = __v)
    def getQuery: _root_.scala.Predef.String = query.getOrElse("")
    def clearQuery: SearchMessageRequest = copy(query = None)
    def withQuery(__v: _root_.scala.Predef.String): SearchMessageRequest = copy(query = Option(__v))
    def getAnchor: _root_.scala.Predef.String = anchor.getOrElse("")
    def clearAnchor: SearchMessageRequest = copy(anchor = None)
    def withAnchor(__v: _root_.scala.Predef.String): SearchMessageRequest = copy(anchor = Option(__v))
    def getLimit: _root_.scala.Int = limit.getOrElse(0)
    def clearLimit: SearchMessageRequest = copy(limit = None)
    def withLimit(__v: _root_.scala.Int): SearchMessageRequest = copy(limit = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => conversationId.orNull
        case 4 => userIds
        case 5 => query.orNull
        case 6 => anchor.orNull
        case 7 => limit.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(userIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 5 => query.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => anchor.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => limit.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.SearchMessageRequest
}

object SearchMessageRequest extends scalapb.GeneratedMessageCompanion[conversation.SearchMessageRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.SearchMessageRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.SearchMessageRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.SearchMessageRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.SearchMessageRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.SearchMessageRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.SearchMessageRequest(
  )
  implicit class SearchMessageRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.SearchMessageRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.SearchMessageRequest](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def userIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.userIds)((c_, f_) => c_.copy(userIds = f_))
    def query: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getQuery)((c_, f_) => c_.copy(query = Option(f_)))
    def optionalQuery: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.query)((c_, f_) => c_.copy(query = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnchor)((c_, f_) => c_.copy(anchor = Option(f_)))
    def optionalAnchor: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLimit)((c_, f_) => c_.copy(limit = Option(f_)))
    def optionalLimit: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val CONVERSATION_ID_FIELD_NUMBER = 3
  final val USER_IDS_FIELD_NUMBER = 4
  final val QUERY_FIELD_NUMBER = 5
  final val ANCHOR_FIELD_NUMBER = 6
  final val LIMIT_FIELD_NUMBER = 7
}
