// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Message(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    text: scala.Option[_root_.scala.Predef.String] = None,
    format: scala.Option[_root_.scala.Predef.String] = None,
    attachments: _root_.scala.collection.Seq[conversation.Attachment] = _root_.scala.collection.Seq.empty,
    reactions: _root_.scala.collection.Seq[conversation.Reaction] = _root_.scala.collection.Seq.empty,
    fields: _root_.scala.collection.Seq[conversation.Field] = _root_.scala.collection.Seq.empty,
    computed: scala.Option[conversation.Computed] = None,
    integrationId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Message] with scalapb.lenses.Updatable[Message] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, accountId.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, conversationId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, id.get) }
      if (text.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, text.get) }
      if (format.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, format.get) }
      attachments.foreach(attachments => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attachments.serializedSize) + attachments.serializedSize)
      reactions.foreach(reactions => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(reactions.serializedSize) + reactions.serializedSize)
      fields.foreach(fields => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      if (computed.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(computed.get.serializedSize) + computed.get.serializedSize }
      if (integrationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, integrationId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      text.foreach { __v =>
        _output__.writeString(2, __v)
      };
      format.foreach { __v =>
        _output__.writeString(3, __v)
      };
      attachments.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(5, __v)
      };
      reactions.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      fields.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(11, __v)
      };
      computed.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      conversationId.foreach { __v =>
        _output__.writeString(14, __v)
      };
      integrationId.foreach { __v =>
        _output__.writeString(15, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Message = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __conversationId = this.conversationId
      var __id = this.id
      var __text = this.text
      var __format = this.format
      val __attachments = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Attachment] ++= this.attachments)
      val __reactions = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Reaction] ++= this.reactions)
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Field] ++= this.fields)
      var __computed = this.computed
      var __integrationId = this.integrationId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 42 =>
            __accountId = Option(_input__.readString())
          case 114 =>
            __conversationId = Option(_input__.readString())
          case 90 =>
            __id = Option(_input__.readString())
          case 18 =>
            __text = Option(_input__.readString())
          case 26 =>
            __format = Option(_input__.readString())
          case 34 =>
            __attachments += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Attachment.defaultInstance)
          case 58 =>
            __reactions += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Reaction.defaultInstance)
          case 82 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Field.defaultInstance)
          case 98 =>
            __computed = Option(_root_.scalapb.LiteParser.readMessage(_input__, __computed.getOrElse(conversation.Computed.defaultInstance)))
          case 122 =>
            __integrationId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Message(
          ctx = __ctx,
          accountId = __accountId,
          conversationId = __conversationId,
          id = __id,
          text = __text,
          format = __format,
          attachments = __attachments.result(),
          reactions = __reactions.result(),
          fields = __fields.result(),
          computed = __computed,
          integrationId = __integrationId
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Message = copy(ctx = None)
    def withCtx(__v: common.Context): Message = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Message = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Message = copy(accountId = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: Message = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): Message = copy(conversationId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Message = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Message = copy(id = Option(__v))
    def getText: _root_.scala.Predef.String = text.getOrElse("")
    def clearText: Message = copy(text = None)
    def withText(__v: _root_.scala.Predef.String): Message = copy(text = Option(__v))
    def getFormat: _root_.scala.Predef.String = format.getOrElse("")
    def clearFormat: Message = copy(format = None)
    def withFormat(__v: _root_.scala.Predef.String): Message = copy(format = Option(__v))
    def clearAttachments = copy(attachments = _root_.scala.collection.Seq.empty)
    def addAttachments(__vs: conversation.Attachment*): Message = addAllAttachments(__vs)
    def addAllAttachments(__vs: TraversableOnce[conversation.Attachment]): Message = copy(attachments = attachments ++ __vs)
    def withAttachments(__v: _root_.scala.collection.Seq[conversation.Attachment]): Message = copy(attachments = __v)
    def clearReactions = copy(reactions = _root_.scala.collection.Seq.empty)
    def addReactions(__vs: conversation.Reaction*): Message = addAllReactions(__vs)
    def addAllReactions(__vs: TraversableOnce[conversation.Reaction]): Message = copy(reactions = reactions ++ __vs)
    def withReactions(__v: _root_.scala.collection.Seq[conversation.Reaction]): Message = copy(reactions = __v)
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: conversation.Field*): Message = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[conversation.Field]): Message = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[conversation.Field]): Message = copy(fields = __v)
    def getComputed: conversation.Computed = computed.getOrElse(conversation.Computed.defaultInstance)
    def clearComputed: Message = copy(computed = None)
    def withComputed(__v: conversation.Computed): Message = copy(computed = Option(__v))
    def getIntegrationId: _root_.scala.Predef.String = integrationId.getOrElse("")
    def clearIntegrationId: Message = copy(integrationId = None)
    def withIntegrationId(__v: _root_.scala.Predef.String): Message = copy(integrationId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 5 => accountId.orNull
        case 14 => conversationId.orNull
        case 11 => id.orNull
        case 2 => text.orNull
        case 3 => format.orNull
        case 4 => attachments
        case 7 => reactions
        case 10 => fields
        case 12 => computed.orNull
        case 15 => integrationId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => text.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => format.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(attachments.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(reactions.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 12 => computed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => integrationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Message
}

object Message extends scalapb.GeneratedMessageCompanion[conversation.Message] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Message] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Message = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Message(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Attachment]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Reaction]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Field]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[conversation.Computed]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Message] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Message(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[conversation.Attachment]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[conversation.Reaction]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[conversation.Field]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[conversation.Computed]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 4 => __out = conversation.Attachment
      case 7 => __out = conversation.Reaction
      case 10 => __out = conversation.Field
      case 12 => __out = conversation.Computed
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Message(
  )
  implicit class MessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Message]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Message](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getText)((c_, f_) => c_.copy(text = Option(f_)))
    def optionalText: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.text)((c_, f_) => c_.copy(text = f_))
    def format: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFormat)((c_, f_) => c_.copy(format = Option(f_)))
    def optionalFormat: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.format)((c_, f_) => c_.copy(format = f_))
    def attachments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Attachment]] = field(_.attachments)((c_, f_) => c_.copy(attachments = f_))
    def reactions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Reaction]] = field(_.reactions)((c_, f_) => c_.copy(reactions = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Field]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def computed: _root_.scalapb.lenses.Lens[UpperPB, conversation.Computed] = field(_.getComputed)((c_, f_) => c_.copy(computed = Option(f_)))
    def optionalComputed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[conversation.Computed]] = field(_.computed)((c_, f_) => c_.copy(computed = f_))
    def integrationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIntegrationId)((c_, f_) => c_.copy(integrationId = Option(f_)))
    def optionalIntegrationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.integrationId)((c_, f_) => c_.copy(integrationId = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 5
  final val CONVERSATION_ID_FIELD_NUMBER = 14
  final val ID_FIELD_NUMBER = 11
  final val TEXT_FIELD_NUMBER = 2
  final val FORMAT_FIELD_NUMBER = 3
  final val ATTACHMENTS_FIELD_NUMBER = 4
  final val REACTIONS_FIELD_NUMBER = 7
  final val FIELDS_FIELD_NUMBER = 10
  final val COMPUTED_FIELD_NUMBER = 12
  final val INTEGRATION_ID_FIELD_NUMBER = 15
}
