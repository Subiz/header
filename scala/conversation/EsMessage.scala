// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class EsMessage(
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None,
    memberIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    text: scala.Option[_root_.scala.Predef.String] = None,
    attachments: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    fields: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[EsMessage] with scalapb.lenses.Updatable[EsMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, conversationId.get) }
      memberIds.foreach(memberIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, memberIds))
      if (text.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, text.get) }
      attachments.foreach(attachments => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, attachments))
      fields.foreach(fields => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, fields))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      conversationId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      memberIds.foreach { __v =>
        _output__.writeString(5, __v)
      };
      text.foreach { __v =>
        _output__.writeString(6, __v)
      };
      attachments.foreach { __v =>
        _output__.writeString(7, __v)
      };
      fields.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.EsMessage = {
      var __id = this.id
      var __accountId = this.accountId
      var __conversationId = this.conversationId
      val __memberIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.memberIds)
      var __text = this.text
      val __attachments = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.attachments)
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.fields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __conversationId = Option(_input__.readString())
          case 42 =>
            __memberIds += _input__.readString()
          case 50 =>
            __text = Option(_input__.readString())
          case 58 =>
            __attachments += _input__.readString()
          case 66 =>
            __fields += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      conversation.EsMessage(
          id = __id,
          accountId = __accountId,
          conversationId = __conversationId,
          memberIds = __memberIds.result(),
          text = __text,
          attachments = __attachments.result(),
          fields = __fields.result()
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: EsMessage = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): EsMessage = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: EsMessage = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): EsMessage = copy(accountId = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: EsMessage = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): EsMessage = copy(conversationId = Option(__v))
    def clearMemberIds = copy(memberIds = _root_.scala.collection.Seq.empty)
    def addMemberIds(__vs: _root_.scala.Predef.String*): EsMessage = addAllMemberIds(__vs)
    def addAllMemberIds(__vs: TraversableOnce[_root_.scala.Predef.String]): EsMessage = copy(memberIds = memberIds ++ __vs)
    def withMemberIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): EsMessage = copy(memberIds = __v)
    def getText: _root_.scala.Predef.String = text.getOrElse("")
    def clearText: EsMessage = copy(text = None)
    def withText(__v: _root_.scala.Predef.String): EsMessage = copy(text = Option(__v))
    def clearAttachments = copy(attachments = _root_.scala.collection.Seq.empty)
    def addAttachments(__vs: _root_.scala.Predef.String*): EsMessage = addAllAttachments(__vs)
    def addAllAttachments(__vs: TraversableOnce[_root_.scala.Predef.String]): EsMessage = copy(attachments = attachments ++ __vs)
    def withAttachments(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): EsMessage = copy(attachments = __v)
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: _root_.scala.Predef.String*): EsMessage = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[_root_.scala.Predef.String]): EsMessage = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): EsMessage = copy(fields = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => conversationId.orNull
        case 5 => memberIds
        case 6 => text.orNull
        case 7 => attachments
        case 8 => fields
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(memberIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 6 => text.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(attachments.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 8 => _root_.scalapb.descriptors.PRepeated(fields.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.EsMessage
}

object EsMessage extends scalapb.GeneratedMessageCompanion[conversation.EsMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.EsMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.EsMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.EsMessage(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.EsMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.EsMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.EsMessage(
  )
  implicit class EsMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.EsMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.EsMessage](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def memberIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.memberIds)((c_, f_) => c_.copy(memberIds = f_))
    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getText)((c_, f_) => c_.copy(text = Option(f_)))
    def optionalText: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.text)((c_, f_) => c_.copy(text = f_))
    def attachments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.attachments)((c_, f_) => c_.copy(attachments = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
  }
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CONVERSATION_ID_FIELD_NUMBER = 4
  final val MEMBER_IDS_FIELD_NUMBER = 5
  final val TEXT_FIELD_NUMBER = 6
  final val ATTACHMENTS_FIELD_NUMBER = 7
  final val FIELDS_FIELD_NUMBER = 8
}
