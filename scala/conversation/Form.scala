// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Form(
    title: scala.Option[_root_.scala.Predef.String] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    fields: _root_.scala.collection.Seq[conversation.FormField] = _root_.scala.collection.Seq.empty,
    submitUrl: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Form] with scalapb.lenses.Updatable[Form] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, title.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, state.get) }
      fields.foreach(fields => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      if (submitUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, submitUrl.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      title.foreach { __v =>
        _output__.writeString(2, __v)
      };
      state.foreach { __v =>
        _output__.writeString(3, __v)
      };
      fields.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      submitUrl.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Form = {
      var __title = this.title
      var __state = this.state
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.FormField] ++= this.fields)
      var __submitUrl = this.submitUrl
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __title = Option(_input__.readString())
          case 26 =>
            __state = Option(_input__.readString())
          case 34 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, conversation.FormField.defaultInstance)
          case 42 =>
            __submitUrl = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Form(
          title = __title,
          state = __state,
          fields = __fields.result(),
          submitUrl = __submitUrl
      )
    }
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: Form = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): Form = copy(title = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Form = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Form = copy(state = Option(__v))
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: conversation.FormField*): Form = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[conversation.FormField]): Form = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[conversation.FormField]): Form = copy(fields = __v)
    def getSubmitUrl: _root_.scala.Predef.String = submitUrl.getOrElse("")
    def clearSubmitUrl: Form = copy(submitUrl = None)
    def withSubmitUrl(__v: _root_.scala.Predef.String): Form = copy(submitUrl = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => title.orNull
        case 3 => state.orNull
        case 4 => fields
        case 5 => submitUrl.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => submitUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Form
}

object Form extends scalapb.GeneratedMessageCompanion[conversation.Form] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Form] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Form = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Form(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.FormField]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Form] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Form(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[conversation.FormField]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(31)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(31)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = conversation.FormField
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Form(
  )
  implicit class FormLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Form]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Form](_l) {
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.FormField]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def submitUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubmitUrl)((c_, f_) => c_.copy(submitUrl = Option(f_)))
    def optionalSubmitUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.submitUrl)((c_, f_) => c_.copy(submitUrl = f_))
  }
  final val TITLE_FIELD_NUMBER = 2
  final val STATE_FIELD_NUMBER = 3
  final val FIELDS_FIELD_NUMBER = 4
  final val SUBMIT_URL_FIELD_NUMBER = 5
}
