// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Computed(
    seen: _root_.scala.collection.Seq[conversation.Seen] = _root_.scala.collection.Seq.empty,
    ack: _root_.scala.collection.Seq[conversation.Ack] = _root_.scala.collection.Seq.empty,
    received: _root_.scala.collection.Seq[conversation.Received] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Computed] with scalapb.lenses.Updatable[Computed] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      seen.foreach(seen => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(seen.serializedSize) + seen.serializedSize)
      ack.foreach(ack => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ack.serializedSize) + ack.serializedSize)
      received.foreach(received => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(received.serializedSize) + received.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      seen.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      ack.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      received.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Computed = {
      val __seen = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Seen] ++= this.seen)
      val __ack = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Ack] ++= this.ack)
      val __received = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Received] ++= this.received)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 34 =>
            __seen += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Seen.defaultInstance)
          case 42 =>
            __ack += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Ack.defaultInstance)
          case 50 =>
            __received += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Received.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Computed(
          seen = __seen.result(),
          ack = __ack.result(),
          received = __received.result()
      )
    }
    def clearSeen = copy(seen = _root_.scala.collection.Seq.empty)
    def addSeen(__vs: conversation.Seen*): Computed = addAllSeen(__vs)
    def addAllSeen(__vs: TraversableOnce[conversation.Seen]): Computed = copy(seen = seen ++ __vs)
    def withSeen(__v: _root_.scala.collection.Seq[conversation.Seen]): Computed = copy(seen = __v)
    def clearAck = copy(ack = _root_.scala.collection.Seq.empty)
    def addAck(__vs: conversation.Ack*): Computed = addAllAck(__vs)
    def addAllAck(__vs: TraversableOnce[conversation.Ack]): Computed = copy(ack = ack ++ __vs)
    def withAck(__v: _root_.scala.collection.Seq[conversation.Ack]): Computed = copy(ack = __v)
    def clearReceived = copy(received = _root_.scala.collection.Seq.empty)
    def addReceived(__vs: conversation.Received*): Computed = addAllReceived(__vs)
    def addAllReceived(__vs: TraversableOnce[conversation.Received]): Computed = copy(received = received ++ __vs)
    def withReceived(__v: _root_.scala.collection.Seq[conversation.Received]): Computed = copy(received = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => seen
        case 5 => ack
        case 6 => received
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => _root_.scalapb.descriptors.PRepeated(seen.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(ack.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(received.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Computed
}

object Computed extends scalapb.GeneratedMessageCompanion[conversation.Computed] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Computed] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Computed = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Computed(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Seen]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Ack]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Received]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Computed] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Computed(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[conversation.Seen]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[conversation.Ack]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[conversation.Received]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = conversation.Seen
      case 5 => __out = conversation.Ack
      case 6 => __out = conversation.Received
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Computed(
  )
  implicit class ComputedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Computed]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Computed](_l) {
    def seen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Seen]] = field(_.seen)((c_, f_) => c_.copy(seen = f_))
    def ack: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Ack]] = field(_.ack)((c_, f_) => c_.copy(ack = f_))
    def received: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Received]] = field(_.received)((c_, f_) => c_.copy(received = f_))
  }
  final val SEEN_FIELD_NUMBER = 4
  final val ACK_FIELD_NUMBER = 5
  final val RECEIVED_FIELD_NUMBER = 6
}
