// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class AvgResponseTimeRequest(
    integrationId: scala.Option[_root_.scala.Predef.String] = None,
    from: scala.Option[_root_.scala.Int] = None,
    to: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AvgResponseTimeRequest] with scalapb.lenses.Updatable[AvgResponseTimeRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (integrationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, integrationId.get) }
      if (from.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, from.get) }
      if (to.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, to.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      integrationId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      from.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      to.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.AvgResponseTimeRequest = {
      var __integrationId = this.integrationId
      var __from = this.from
      var __to = this.to
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __integrationId = Option(_input__.readString())
          case 40 =>
            __from = Option(_input__.readInt32())
          case 48 =>
            __to = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.AvgResponseTimeRequest(
          integrationId = __integrationId,
          from = __from,
          to = __to
      )
    }
    def getIntegrationId: _root_.scala.Predef.String = integrationId.getOrElse("")
    def clearIntegrationId: AvgResponseTimeRequest = copy(integrationId = None)
    def withIntegrationId(__v: _root_.scala.Predef.String): AvgResponseTimeRequest = copy(integrationId = Option(__v))
    def getFrom: _root_.scala.Int = from.getOrElse(0)
    def clearFrom: AvgResponseTimeRequest = copy(from = None)
    def withFrom(__v: _root_.scala.Int): AvgResponseTimeRequest = copy(from = Option(__v))
    def getTo: _root_.scala.Int = to.getOrElse(0)
    def clearTo: AvgResponseTimeRequest = copy(to = None)
    def withTo(__v: _root_.scala.Int): AvgResponseTimeRequest = copy(to = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => integrationId.orNull
        case 5 => from.orNull
        case 6 => to.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => integrationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => from.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => to.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.AvgResponseTimeRequest
}

object AvgResponseTimeRequest extends scalapb.GeneratedMessageCompanion[conversation.AvgResponseTimeRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.AvgResponseTimeRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.AvgResponseTimeRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.AvgResponseTimeRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.AvgResponseTimeRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.AvgResponseTimeRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(55)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(55)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.AvgResponseTimeRequest(
  )
  implicit class AvgResponseTimeRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.AvgResponseTimeRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.AvgResponseTimeRequest](_l) {
    def integrationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIntegrationId)((c_, f_) => c_.copy(integrationId = Option(f_)))
    def optionalIntegrationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.integrationId)((c_, f_) => c_.copy(integrationId = f_))
    def from: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getFrom)((c_, f_) => c_.copy(from = Option(f_)))
    def optionalFrom: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.from)((c_, f_) => c_.copy(from = f_))
    def to: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getTo)((c_, f_) => c_.copy(to = Option(f_)))
    def optionalTo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.to)((c_, f_) => c_.copy(to = f_))
  }
  final val INTEGRATION_ID_FIELD_NUMBER = 3
  final val FROM_FIELD_NUMBER = 5
  final val TO_FIELD_NUMBER = 6
}
