// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class RouteResult(
    ruleId: scala.Option[_root_.scala.Predef.String] = None,
    strategy: scala.Option[_root_.scala.Predef.String] = None,
    agentIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    groupId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[RouteResult] with scalapb.lenses.Updatable[RouteResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ruleId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, ruleId.get) }
      if (strategy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, strategy.get) }
      agentIds.foreach(agentIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, agentIds))
      if (groupId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, groupId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ruleId.foreach { __v =>
        _output__.writeString(1, __v)
      };
      strategy.foreach { __v =>
        _output__.writeString(3, __v)
      };
      agentIds.foreach { __v =>
        _output__.writeString(4, __v)
      };
      groupId.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.RouteResult = {
      var __ruleId = this.ruleId
      var __strategy = this.strategy
      val __agentIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.agentIds)
      var __groupId = this.groupId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ruleId = Option(_input__.readString())
          case 26 =>
            __strategy = Option(_input__.readString())
          case 34 =>
            __agentIds += _input__.readString()
          case 42 =>
            __groupId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.RouteResult(
          ruleId = __ruleId,
          strategy = __strategy,
          agentIds = __agentIds.result(),
          groupId = __groupId
      )
    }
    def getRuleId: _root_.scala.Predef.String = ruleId.getOrElse("")
    def clearRuleId: RouteResult = copy(ruleId = None)
    def withRuleId(__v: _root_.scala.Predef.String): RouteResult = copy(ruleId = Option(__v))
    def getStrategy: _root_.scala.Predef.String = strategy.getOrElse("")
    def clearStrategy: RouteResult = copy(strategy = None)
    def withStrategy(__v: _root_.scala.Predef.String): RouteResult = copy(strategy = Option(__v))
    def clearAgentIds = copy(agentIds = _root_.scala.collection.Seq.empty)
    def addAgentIds(__vs: _root_.scala.Predef.String*): RouteResult = addAllAgentIds(__vs)
    def addAllAgentIds(__vs: TraversableOnce[_root_.scala.Predef.String]): RouteResult = copy(agentIds = agentIds ++ __vs)
    def withAgentIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): RouteResult = copy(agentIds = __v)
    def getGroupId: _root_.scala.Predef.String = groupId.getOrElse("")
    def clearGroupId: RouteResult = copy(groupId = None)
    def withGroupId(__v: _root_.scala.Predef.String): RouteResult = copy(groupId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ruleId.orNull
        case 3 => strategy.orNull
        case 4 => agentIds
        case 5 => groupId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ruleId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => strategy.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(agentIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 5 => groupId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.RouteResult
}

object RouteResult extends scalapb.GeneratedMessageCompanion[conversation.RouteResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.RouteResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.RouteResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.RouteResult(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.RouteResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.RouteResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.RouteResult(
  )
  implicit class RouteResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.RouteResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.RouteResult](_l) {
    def ruleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRuleId)((c_, f_) => c_.copy(ruleId = Option(f_)))
    def optionalRuleId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.ruleId)((c_, f_) => c_.copy(ruleId = f_))
    def strategy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStrategy)((c_, f_) => c_.copy(strategy = Option(f_)))
    def optionalStrategy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.strategy)((c_, f_) => c_.copy(strategy = f_))
    def agentIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.agentIds)((c_, f_) => c_.copy(agentIds = f_))
    def groupId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getGroupId)((c_, f_) => c_.copy(groupId = Option(f_)))
    def optionalGroupId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.groupId)((c_, f_) => c_.copy(groupId = f_))
  }
  final val RULE_ID_FIELD_NUMBER = 1
  final val STRATEGY_FIELD_NUMBER = 3
  final val AGENT_IDS_FIELD_NUMBER = 4
  final val GROUP_ID_FIELD_NUMBER = 5
}
