// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

/** @param type
  *   type
  */
@SerialVersionUID(0L)
final case class Member(
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    subizId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    avatarUrl: scala.Option[_root_.scala.Predef.String] = None,
    left: scala.Option[_root_.scala.Boolean] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Member] with scalapb.lenses.Updatable[Member] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, `type`.get) }
      if (subizId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, subizId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, id.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, name.get) }
      if (avatarUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, avatarUrl.get) }
      if (left.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(11, left.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, conversationId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.foreach { __v =>
        _output__.writeString(3, __v)
      };
      id.foreach { __v =>
        _output__.writeString(4, __v)
      };
      avatarUrl.foreach { __v =>
        _output__.writeString(6, __v)
      };
      subizId.foreach { __v =>
        _output__.writeString(8, __v)
      };
      name.foreach { __v =>
        _output__.writeString(10, __v)
      };
      left.foreach { __v =>
        _output__.writeBool(11, __v)
      };
      conversationId.foreach { __v =>
        _output__.writeString(13, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Member = {
      var __type = this.`type`
      var __subizId = this.subizId
      var __id = this.id
      var __name = this.name
      var __avatarUrl = this.avatarUrl
      var __left = this.left
      var __conversationId = this.conversationId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __type = Option(_input__.readString())
          case 66 =>
            __subizId = Option(_input__.readString())
          case 34 =>
            __id = Option(_input__.readString())
          case 82 =>
            __name = Option(_input__.readString())
          case 50 =>
            __avatarUrl = Option(_input__.readString())
          case 88 =>
            __left = Option(_input__.readBool())
          case 106 =>
            __conversationId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Member(
          `type` = __type,
          subizId = __subizId,
          id = __id,
          name = __name,
          avatarUrl = __avatarUrl,
          left = __left,
          conversationId = __conversationId
      )
    }
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Member = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Member = copy(`type` = Option(__v))
    def getSubizId: _root_.scala.Predef.String = subizId.getOrElse("")
    def clearSubizId: Member = copy(subizId = None)
    def withSubizId(__v: _root_.scala.Predef.String): Member = copy(subizId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Member = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Member = copy(id = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Member = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Member = copy(name = Option(__v))
    def getAvatarUrl: _root_.scala.Predef.String = avatarUrl.getOrElse("")
    def clearAvatarUrl: Member = copy(avatarUrl = None)
    def withAvatarUrl(__v: _root_.scala.Predef.String): Member = copy(avatarUrl = Option(__v))
    def getLeft: _root_.scala.Boolean = left.getOrElse(false)
    def clearLeft: Member = copy(left = None)
    def withLeft(__v: _root_.scala.Boolean): Member = copy(left = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: Member = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): Member = copy(conversationId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => `type`.orNull
        case 8 => subizId.orNull
        case 4 => id.orNull
        case 10 => name.orNull
        case 6 => avatarUrl.orNull
        case 11 => left.orNull
        case 13 => conversationId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => subizId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => avatarUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => left.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Member
}

object Member extends scalapb.GeneratedMessageCompanion[conversation.Member] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Member] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Member = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Member(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Member] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Member(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Member(
  )
  implicit class MemberLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Member]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Member](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def subizId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubizId)((c_, f_) => c_.copy(subizId = Option(f_)))
    def optionalSubizId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.subizId)((c_, f_) => c_.copy(subizId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def avatarUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAvatarUrl)((c_, f_) => c_.copy(avatarUrl = Option(f_)))
    def optionalAvatarUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.avatarUrl)((c_, f_) => c_.copy(avatarUrl = f_))
    def left: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getLeft)((c_, f_) => c_.copy(left = Option(f_)))
    def optionalLeft: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.left)((c_, f_) => c_.copy(left = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
  }
  final val TYPE_FIELD_NUMBER = 3
  final val SUBIZ_ID_FIELD_NUMBER = 8
  final val ID_FIELD_NUMBER = 4
  final val NAME_FIELD_NUMBER = 10
  final val AVATAR_URL_FIELD_NUMBER = 6
  final val LEFT_FIELD_NUMBER = 11
  final val CONVERSATION_ID_FIELD_NUMBER = 13
}
