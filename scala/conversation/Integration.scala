// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

/** @param connectorType
  *   see client.Client_ChannelType
  * @param id
  *   generated by connector, must be format of accid.XXX.connectorid
  */
@SerialVersionUID(0L)
final case class Integration(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    connectorId: scala.Option[_root_.scala.Predef.String] = None,
    logoUrl: scala.Option[_root_.scala.Predef.String] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    connectorType: scala.Option[_root_.scala.Predef.String] = None,
    integrated: scala.Option[_root_.scala.Long] = None,
    updated: scala.Option[_root_.scala.Long] = None,
    state: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Integration] with scalapb.lenses.Updatable[Integration] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (connectorId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, connectorId.get) }
      if (logoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, logoUrl.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, name.get) }
      if (connectorType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, connectorType.get) }
      if (integrated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, integrated.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, updated.get) }
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, state.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, id.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      connectorId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      logoUrl.foreach { __v =>
        _output__.writeString(4, __v)
      };
      name.foreach { __v =>
        _output__.writeString(5, __v)
      };
      integrated.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
      state.foreach { __v =>
        _output__.writeString(8, __v)
      };
      id.foreach { __v =>
        _output__.writeString(10, __v)
      };
      connectorType.foreach { __v =>
        _output__.writeString(12, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Integration = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __connectorId = this.connectorId
      var __logoUrl = this.logoUrl
      var __name = this.name
      var __connectorType = this.connectorType
      var __integrated = this.integrated
      var __updated = this.updated
      var __state = this.state
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __connectorId = Option(_input__.readString())
          case 34 =>
            __logoUrl = Option(_input__.readString())
          case 42 =>
            __name = Option(_input__.readString())
          case 98 =>
            __connectorType = Option(_input__.readString())
          case 48 =>
            __integrated = Option(_input__.readInt64())
          case 56 =>
            __updated = Option(_input__.readInt64())
          case 66 =>
            __state = Option(_input__.readString())
          case 82 =>
            __id = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Integration(
          ctx = __ctx,
          accountId = __accountId,
          connectorId = __connectorId,
          logoUrl = __logoUrl,
          name = __name,
          connectorType = __connectorType,
          integrated = __integrated,
          updated = __updated,
          state = __state,
          id = __id
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Integration = copy(ctx = None)
    def withCtx(__v: common.Context): Integration = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Integration = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Integration = copy(accountId = Option(__v))
    def getConnectorId: _root_.scala.Predef.String = connectorId.getOrElse("")
    def clearConnectorId: Integration = copy(connectorId = None)
    def withConnectorId(__v: _root_.scala.Predef.String): Integration = copy(connectorId = Option(__v))
    def getLogoUrl: _root_.scala.Predef.String = logoUrl.getOrElse("")
    def clearLogoUrl: Integration = copy(logoUrl = None)
    def withLogoUrl(__v: _root_.scala.Predef.String): Integration = copy(logoUrl = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Integration = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Integration = copy(name = Option(__v))
    def getConnectorType: _root_.scala.Predef.String = connectorType.getOrElse("")
    def clearConnectorType: Integration = copy(connectorType = None)
    def withConnectorType(__v: _root_.scala.Predef.String): Integration = copy(connectorType = Option(__v))
    def getIntegrated: _root_.scala.Long = integrated.getOrElse(0L)
    def clearIntegrated: Integration = copy(integrated = None)
    def withIntegrated(__v: _root_.scala.Long): Integration = copy(integrated = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: Integration = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): Integration = copy(updated = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Integration = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Integration = copy(state = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Integration = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Integration = copy(id = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => connectorId.orNull
        case 4 => logoUrl.orNull
        case 5 => name.orNull
        case 12 => connectorType.orNull
        case 6 => integrated.orNull
        case 7 => updated.orNull
        case 8 => state.orNull
        case 10 => id.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => connectorId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => logoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => connectorType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => integrated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Integration
}

object Integration extends scalapb.GeneratedMessageCompanion[conversation.Integration] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Integration] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Integration = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Integration(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Integration] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Integration(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(41)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(41)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Integration(
  )
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def isdisabled: _root_.scala.Boolean = false
    def isactivated: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = conversation.Integration.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object disabled extends State {
      val value = 0
      val index = 0
      val name = "disabled"
      override def isdisabled: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object activated extends State {
      val value = 1
      val index = 1
      val name = "activated"
      override def isactivated: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(disabled, activated)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => disabled
      case 1 => activated
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.Integration.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.Integration.scalaDescriptor.enums(0)
  }
  implicit class IntegrationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Integration]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Integration](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def connectorId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConnectorId)((c_, f_) => c_.copy(connectorId = Option(f_)))
    def optionalConnectorId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.connectorId)((c_, f_) => c_.copy(connectorId = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLogoUrl)((c_, f_) => c_.copy(logoUrl = Option(f_)))
    def optionalLogoUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def connectorType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConnectorType)((c_, f_) => c_.copy(connectorType = Option(f_)))
    def optionalConnectorType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.connectorType)((c_, f_) => c_.copy(connectorType = f_))
    def integrated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getIntegrated)((c_, f_) => c_.copy(integrated = Option(f_)))
    def optionalIntegrated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.integrated)((c_, f_) => c_.copy(integrated = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val CONNECTOR_ID_FIELD_NUMBER = 3
  final val LOGO_URL_FIELD_NUMBER = 4
  final val NAME_FIELD_NUMBER = 5
  final val CONNECTOR_TYPE_FIELD_NUMBER = 12
  final val INTEGRATED_FIELD_NUMBER = 6
  final val UPDATED_FIELD_NUMBER = 7
  final val STATE_FIELD_NUMBER = 8
  final val ID_FIELD_NUMBER = 10
}
