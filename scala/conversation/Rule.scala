// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Rule(
    ctx: scala.Option[common.Context] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    priority: scala.Option[_root_.scala.Int] = None,
    strategy: scala.Option[_root_.scala.Predef.String] = None,
    assignTos: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    conditions: _root_.scala.collection.Seq[conversation.Condition] = _root_.scala.collection.Seq.empty,
    enabled: scala.Option[_root_.scala.Boolean] = None,
    created: scala.Option[_root_.scala.Long] = None,
    modified: scala.Option[_root_.scala.Long] = None,
    name: scala.Option[_root_.scala.Predef.String] = None,
    description: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Rule] with scalapb.lenses.Updatable[Rule] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (priority.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, priority.get) }
      if (strategy.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, strategy.get) }
      assignTos.foreach(assignTos => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, assignTos))
      conditions.foreach(conditions => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(conditions.serializedSize) + conditions.serializedSize)
      if (enabled.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, enabled.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, created.get) }
      if (modified.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, modified.get) }
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, name.get) }
      if (description.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, description.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      priority.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      strategy.foreach { __v =>
        _output__.writeString(5, __v)
      };
      assignTos.foreach { __v =>
        _output__.writeString(6, __v)
      };
      conditions.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      enabled.foreach { __v =>
        _output__.writeBool(8, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      name.foreach { __v =>
        _output__.writeString(10, __v)
      };
      description.foreach { __v =>
        _output__.writeString(11, __v)
      };
      modified.foreach { __v =>
        _output__.writeInt64(12, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Rule = {
      var __ctx = this.ctx
      var __id = this.id
      var __accountId = this.accountId
      var __priority = this.priority
      var __strategy = this.strategy
      val __assignTos = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.assignTos)
      val __conditions = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Condition] ++= this.conditions)
      var __enabled = this.enabled
      var __created = this.created
      var __modified = this.modified
      var __name = this.name
      var __description = this.description
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __id = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 32 =>
            __priority = Option(_input__.readInt32())
          case 42 =>
            __strategy = Option(_input__.readString())
          case 50 =>
            __assignTos += _input__.readString()
          case 58 =>
            __conditions += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Condition.defaultInstance)
          case 64 =>
            __enabled = Option(_input__.readBool())
          case 72 =>
            __created = Option(_input__.readInt64())
          case 96 =>
            __modified = Option(_input__.readInt64())
          case 82 =>
            __name = Option(_input__.readString())
          case 90 =>
            __description = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Rule(
          ctx = __ctx,
          id = __id,
          accountId = __accountId,
          priority = __priority,
          strategy = __strategy,
          assignTos = __assignTos.result(),
          conditions = __conditions.result(),
          enabled = __enabled,
          created = __created,
          modified = __modified,
          name = __name,
          description = __description
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Rule = copy(ctx = None)
    def withCtx(__v: common.Context): Rule = copy(ctx = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Rule = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Rule = copy(id = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Rule = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Rule = copy(accountId = Option(__v))
    def getPriority: _root_.scala.Int = priority.getOrElse(0)
    def clearPriority: Rule = copy(priority = None)
    def withPriority(__v: _root_.scala.Int): Rule = copy(priority = Option(__v))
    def getStrategy: _root_.scala.Predef.String = strategy.getOrElse("")
    def clearStrategy: Rule = copy(strategy = None)
    def withStrategy(__v: _root_.scala.Predef.String): Rule = copy(strategy = Option(__v))
    def clearAssignTos = copy(assignTos = _root_.scala.collection.Seq.empty)
    def addAssignTos(__vs: _root_.scala.Predef.String*): Rule = addAllAssignTos(__vs)
    def addAllAssignTos(__vs: TraversableOnce[_root_.scala.Predef.String]): Rule = copy(assignTos = assignTos ++ __vs)
    def withAssignTos(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Rule = copy(assignTos = __v)
    def clearConditions = copy(conditions = _root_.scala.collection.Seq.empty)
    def addConditions(__vs: conversation.Condition*): Rule = addAllConditions(__vs)
    def addAllConditions(__vs: TraversableOnce[conversation.Condition]): Rule = copy(conditions = conditions ++ __vs)
    def withConditions(__v: _root_.scala.collection.Seq[conversation.Condition]): Rule = copy(conditions = __v)
    def getEnabled: _root_.scala.Boolean = enabled.getOrElse(false)
    def clearEnabled: Rule = copy(enabled = None)
    def withEnabled(__v: _root_.scala.Boolean): Rule = copy(enabled = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Rule = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Rule = copy(created = Option(__v))
    def getModified: _root_.scala.Long = modified.getOrElse(0L)
    def clearModified: Rule = copy(modified = None)
    def withModified(__v: _root_.scala.Long): Rule = copy(modified = Option(__v))
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: Rule = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): Rule = copy(name = Option(__v))
    def getDescription: _root_.scala.Predef.String = description.getOrElse("")
    def clearDescription: Rule = copy(description = None)
    def withDescription(__v: _root_.scala.Predef.String): Rule = copy(description = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => id.orNull
        case 3 => accountId.orNull
        case 4 => priority.orNull
        case 5 => strategy.orNull
        case 6 => assignTos
        case 7 => conditions
        case 8 => enabled.orNull
        case 9 => created.orNull
        case 12 => modified.orNull
        case 10 => name.orNull
        case 11 => description.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => priority.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => strategy.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(assignTos.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 7 => _root_.scalapb.descriptors.PRepeated(conditions.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 8 => enabled.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => modified.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => description.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Rule
}

object Rule extends scalapb.GeneratedMessageCompanion[conversation.Rule] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Rule] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Rule = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Rule(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Condition]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Rule] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Rule(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[conversation.Condition]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 7 => __out = conversation.Condition
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Rule(
  )
  sealed trait AssignStrategy extends _root_.scalapb.GeneratedEnum {
    type EnumType = AssignStrategy
    def isallagents: _root_.scala.Boolean = false
    def isagentgroup: _root_.scala.Boolean = false
    def isagents: _root_.scala.Boolean = false
    def ismostrecent: _root_.scala.Boolean = false
    def isroundrobinallagents: _root_.scala.Boolean = false
    def isroundrobinagents: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[AssignStrategy] = conversation.Rule.AssignStrategy
  }
  
  object AssignStrategy extends _root_.scalapb.GeneratedEnumCompanion[AssignStrategy] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AssignStrategy] = this
    @SerialVersionUID(0L)
    case object all_agents extends AssignStrategy {
      val value = 0
      val index = 0
      val name = "all_agents"
      override def isallagents: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object agentgroup extends AssignStrategy {
      val value = 2
      val index = 1
      val name = "agentgroup"
      override def isagentgroup: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object agents extends AssignStrategy {
      val value = 3
      val index = 2
      val name = "agents"
      override def isagents: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object most_recent extends AssignStrategy {
      val value = 4
      val index = 3
      val name = "most_recent"
      override def ismostrecent: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object roundrobin_all_agents extends AssignStrategy {
      val value = 5
      val index = 4
      val name = "roundrobin_all_agents"
      override def isroundrobinallagents: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object roundrobin_agents extends AssignStrategy {
      val value = 6
      val index = 5
      val name = "roundrobin_agents"
      override def isroundrobinagents: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends AssignStrategy with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(all_agents, agentgroup, agents, most_recent, roundrobin_all_agents, roundrobin_agents)
    def fromValue(value: _root_.scala.Int): AssignStrategy = value match {
      case 0 => all_agents
      case 2 => agentgroup
      case 3 => agents
      case 4 => most_recent
      case 5 => roundrobin_all_agents
      case 6 => roundrobin_agents
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = conversation.Rule.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = conversation.Rule.scalaDescriptor.enums(0)
  }
  implicit class RuleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Rule]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Rule](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def priority: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPriority)((c_, f_) => c_.copy(priority = Option(f_)))
    def optionalPriority: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.priority)((c_, f_) => c_.copy(priority = f_))
    def strategy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStrategy)((c_, f_) => c_.copy(strategy = Option(f_)))
    def optionalStrategy: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.strategy)((c_, f_) => c_.copy(strategy = f_))
    def assignTos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.assignTos)((c_, f_) => c_.copy(assignTos = f_))
    def conditions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Condition]] = field(_.conditions)((c_, f_) => c_.copy(conditions = f_))
    def enabled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getEnabled)((c_, f_) => c_.copy(enabled = Option(f_)))
    def optionalEnabled: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.enabled)((c_, f_) => c_.copy(enabled = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def modified: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getModified)((c_, f_) => c_.copy(modified = Option(f_)))
    def optionalModified: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.modified)((c_, f_) => c_.copy(modified = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.description)((c_, f_) => c_.copy(description = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val PRIORITY_FIELD_NUMBER = 4
  final val STRATEGY_FIELD_NUMBER = 5
  final val ASSIGN_TOS_FIELD_NUMBER = 6
  final val CONDITIONS_FIELD_NUMBER = 7
  final val ENABLED_FIELD_NUMBER = 8
  final val CREATED_FIELD_NUMBER = 9
  final val MODIFIED_FIELD_NUMBER = 12
  final val NAME_FIELD_NUMBER = 10
  final val DESCRIPTION_FIELD_NUMBER = 11
}
