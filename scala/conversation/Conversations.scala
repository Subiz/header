// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package conversation

@SerialVersionUID(0L)
final case class Conversations(
    ctx: scala.Option[common.Context] = None,
    conversations: _root_.scala.collection.Seq[conversation.Conversation] = _root_.scala.collection.Seq.empty,
    anchor: scala.Option[_root_.scala.Predef.String] = None,
    userIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Conversations] with scalapb.lenses.Updatable[Conversations] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      conversations.foreach(conversations => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(conversations.serializedSize) + conversations.serializedSize)
      if (anchor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, anchor.get) }
      userIds.foreach(userIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, userIds))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      conversations.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      anchor.foreach { __v =>
        _output__.writeString(4, __v)
      };
      userIds.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): conversation.Conversations = {
      var __ctx = this.ctx
      val __conversations = (_root_.scala.collection.immutable.Vector.newBuilder[conversation.Conversation] ++= this.conversations)
      var __anchor = this.anchor
      val __userIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.userIds)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __conversations += _root_.scalapb.LiteParser.readMessage(_input__, conversation.Conversation.defaultInstance)
          case 34 =>
            __anchor = Option(_input__.readString())
          case 42 =>
            __userIds += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      conversation.Conversations(
          ctx = __ctx,
          conversations = __conversations.result(),
          anchor = __anchor,
          userIds = __userIds.result()
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Conversations = copy(ctx = None)
    def withCtx(__v: common.Context): Conversations = copy(ctx = Option(__v))
    def clearConversations = copy(conversations = _root_.scala.collection.Seq.empty)
    def addConversations(__vs: conversation.Conversation*): Conversations = addAllConversations(__vs)
    def addAllConversations(__vs: TraversableOnce[conversation.Conversation]): Conversations = copy(conversations = conversations ++ __vs)
    def withConversations(__v: _root_.scala.collection.Seq[conversation.Conversation]): Conversations = copy(conversations = __v)
    def getAnchor: _root_.scala.Predef.String = anchor.getOrElse("")
    def clearAnchor: Conversations = copy(anchor = None)
    def withAnchor(__v: _root_.scala.Predef.String): Conversations = copy(anchor = Option(__v))
    def clearUserIds = copy(userIds = _root_.scala.collection.Seq.empty)
    def addUserIds(__vs: _root_.scala.Predef.String*): Conversations = addAllUserIds(__vs)
    def addAllUserIds(__vs: TraversableOnce[_root_.scala.Predef.String]): Conversations = copy(userIds = userIds ++ __vs)
    def withUserIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Conversations = copy(userIds = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => conversations
        case 4 => anchor.orNull
        case 5 => userIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(conversations.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => anchor.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(userIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = conversation.Conversations
}

object Conversations extends scalapb.GeneratedMessageCompanion[conversation.Conversations] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[conversation.Conversations] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): conversation.Conversations = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    conversation.Conversations(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[conversation.Conversation]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[conversation.Conversations] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      conversation.Conversations(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[conversation.Conversation]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConversationProto.javaDescriptor.getMessageTypes.get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConversationProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 3 => __out = conversation.Conversation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = conversation.Conversations(
  )
  implicit class ConversationsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, conversation.Conversations]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, conversation.Conversations](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def conversations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[conversation.Conversation]] = field(_.conversations)((c_, f_) => c_.copy(conversations = f_))
    def anchor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAnchor)((c_, f_) => c_.copy(anchor = Option(f_)))
    def optionalAnchor: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.anchor)((c_, f_) => c_.copy(anchor = f_))
    def userIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.userIds)((c_, f_) => c_.copy(userIds = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val CONVERSATIONS_FIELD_NUMBER = 3
  final val ANCHOR_FIELD_NUMBER = 4
  final val USER_IDS_FIELD_NUMBER = 5
}
