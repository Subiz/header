// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package widget

/** @param accountId
  *   subiz use only
  * @param userId
  *   subiz use only
  */
@SerialVersionUID(0L)
final case class UserSetting(
    ctx: scala.Option[common.Context] = None,
    account: scala.Option[_root_.account.Account] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    user: scala.Option[_root_.user.User] = None,
    userId: scala.Option[_root_.scala.Predef.String] = None,
    soundEnabled: scala.Option[_root_.scala.Boolean] = None,
    language: scala.Option[_root_.scala.Predef.String] = None,
    sendTranscript: scala.Option[_root_.scala.Boolean] = None,
    accountSetting: scala.Option[widget.Setting] = None,
    desktopNotification: scala.Option[_root_.scala.Boolean] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserSetting] with scalapb.lenses.Updatable[UserSetting] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (account.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(account.get.serializedSize) + account.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (user.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(user.get.serializedSize) + user.get.serializedSize }
      if (userId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, userId.get) }
      if (soundEnabled.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, soundEnabled.get) }
      if (language.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, language.get) }
      if (sendTranscript.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, sendTranscript.get) }
      if (accountSetting.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(accountSetting.get.serializedSize) + accountSetting.get.serializedSize }
      if (desktopNotification.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, desktopNotification.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      account.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      user.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      soundEnabled.foreach { __v =>
        _output__.writeBool(5, __v)
      };
      language.foreach { __v =>
        _output__.writeString(6, __v)
      };
      userId.foreach { __v =>
        _output__.writeString(7, __v)
      };
      sendTranscript.foreach { __v =>
        _output__.writeBool(8, __v)
      };
      accountSetting.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      desktopNotification.foreach { __v =>
        _output__.writeBool(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): widget.UserSetting = {
      var __ctx = this.ctx
      var __account = this.account
      var __accountId = this.accountId
      var __user = this.user
      var __userId = this.userId
      var __soundEnabled = this.soundEnabled
      var __language = this.language
      var __sendTranscript = this.sendTranscript
      var __accountSetting = this.accountSetting
      var __desktopNotification = this.desktopNotification
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __account = Option(_root_.scalapb.LiteParser.readMessage(_input__, __account.getOrElse(_root_.account.Account.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __user = Option(_root_.scalapb.LiteParser.readMessage(_input__, __user.getOrElse(_root_.user.User.defaultInstance)))
          case 58 =>
            __userId = Option(_input__.readString())
          case 40 =>
            __soundEnabled = Option(_input__.readBool())
          case 50 =>
            __language = Option(_input__.readString())
          case 64 =>
            __sendTranscript = Option(_input__.readBool())
          case 74 =>
            __accountSetting = Option(_root_.scalapb.LiteParser.readMessage(_input__, __accountSetting.getOrElse(widget.Setting.defaultInstance)))
          case 80 =>
            __desktopNotification = Option(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      widget.UserSetting(
          ctx = __ctx,
          account = __account,
          accountId = __accountId,
          user = __user,
          userId = __userId,
          soundEnabled = __soundEnabled,
          language = __language,
          sendTranscript = __sendTranscript,
          accountSetting = __accountSetting,
          desktopNotification = __desktopNotification
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: UserSetting = copy(ctx = None)
    def withCtx(__v: common.Context): UserSetting = copy(ctx = Option(__v))
    def getAccount: _root_.account.Account = account.getOrElse(_root_.account.Account.defaultInstance)
    def clearAccount: UserSetting = copy(account = None)
    def withAccount(__v: _root_.account.Account): UserSetting = copy(account = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: UserSetting = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): UserSetting = copy(accountId = Option(__v))
    def getUser: _root_.user.User = user.getOrElse(_root_.user.User.defaultInstance)
    def clearUser: UserSetting = copy(user = None)
    def withUser(__v: _root_.user.User): UserSetting = copy(user = Option(__v))
    def getUserId: _root_.scala.Predef.String = userId.getOrElse("")
    def clearUserId: UserSetting = copy(userId = None)
    def withUserId(__v: _root_.scala.Predef.String): UserSetting = copy(userId = Option(__v))
    def getSoundEnabled: _root_.scala.Boolean = soundEnabled.getOrElse(false)
    def clearSoundEnabled: UserSetting = copy(soundEnabled = None)
    def withSoundEnabled(__v: _root_.scala.Boolean): UserSetting = copy(soundEnabled = Option(__v))
    def getLanguage: _root_.scala.Predef.String = language.getOrElse("")
    def clearLanguage: UserSetting = copy(language = None)
    def withLanguage(__v: _root_.scala.Predef.String): UserSetting = copy(language = Option(__v))
    def getSendTranscript: _root_.scala.Boolean = sendTranscript.getOrElse(false)
    def clearSendTranscript: UserSetting = copy(sendTranscript = None)
    def withSendTranscript(__v: _root_.scala.Boolean): UserSetting = copy(sendTranscript = Option(__v))
    def getAccountSetting: widget.Setting = accountSetting.getOrElse(widget.Setting.defaultInstance)
    def clearAccountSetting: UserSetting = copy(accountSetting = None)
    def withAccountSetting(__v: widget.Setting): UserSetting = copy(accountSetting = Option(__v))
    def getDesktopNotification: _root_.scala.Boolean = desktopNotification.getOrElse(false)
    def clearDesktopNotification: UserSetting = copy(desktopNotification = None)
    def withDesktopNotification(__v: _root_.scala.Boolean): UserSetting = copy(desktopNotification = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => account.orNull
        case 2 => accountId.orNull
        case 4 => user.orNull
        case 7 => userId.orNull
        case 5 => soundEnabled.orNull
        case 6 => language.orNull
        case 8 => sendTranscript.orNull
        case 9 => accountSetting.orNull
        case 10 => desktopNotification.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => account.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => userId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => soundEnabled.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => language.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => sendTranscript.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => accountSetting.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => desktopNotification.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = widget.UserSetting
}

object UserSetting extends scalapb.GeneratedMessageCompanion[widget.UserSetting] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[widget.UserSetting] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): widget.UserSetting = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    widget.UserSetting(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.account.Account]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.user.User]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[widget.Setting]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[widget.UserSetting] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      widget.UserSetting(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.account.Account]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.user.User]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[widget.Setting]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WidgetProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WidgetProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 3 => __out = account.Account
      case 4 => __out = user.User
      case 9 => __out = widget.Setting
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = widget.UserSetting(
  )
  implicit class UserSettingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, widget.UserSetting]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, widget.UserSetting](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def account: _root_.scalapb.lenses.Lens[UpperPB, _root_.account.Account] = field(_.getAccount)((c_, f_) => c_.copy(account = Option(f_)))
    def optionalAccount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.account.Account]] = field(_.account)((c_, f_) => c_.copy(account = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.user.User] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.user.User]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUserId)((c_, f_) => c_.copy(userId = Option(f_)))
    def optionalUserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def soundEnabled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getSoundEnabled)((c_, f_) => c_.copy(soundEnabled = Option(f_)))
    def optionalSoundEnabled: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.soundEnabled)((c_, f_) => c_.copy(soundEnabled = f_))
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLanguage)((c_, f_) => c_.copy(language = Option(f_)))
    def optionalLanguage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.language)((c_, f_) => c_.copy(language = f_))
    def sendTranscript: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getSendTranscript)((c_, f_) => c_.copy(sendTranscript = Option(f_)))
    def optionalSendTranscript: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.sendTranscript)((c_, f_) => c_.copy(sendTranscript = f_))
    def accountSetting: _root_.scalapb.lenses.Lens[UpperPB, widget.Setting] = field(_.getAccountSetting)((c_, f_) => c_.copy(accountSetting = Option(f_)))
    def optionalAccountSetting: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Setting]] = field(_.accountSetting)((c_, f_) => c_.copy(accountSetting = f_))
    def desktopNotification: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getDesktopNotification)((c_, f_) => c_.copy(desktopNotification = Option(f_)))
    def optionalDesktopNotification: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.desktopNotification)((c_, f_) => c_.copy(desktopNotification = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val USER_FIELD_NUMBER = 4
  final val USER_ID_FIELD_NUMBER = 7
  final val SOUND_ENABLED_FIELD_NUMBER = 5
  final val LANGUAGE_FIELD_NUMBER = 6
  final val SEND_TRANSCRIPT_FIELD_NUMBER = 8
  final val ACCOUNT_SETTING_FIELD_NUMBER = 9
  final val DESKTOP_NOTIFICATION_FIELD_NUMBER = 10
}
