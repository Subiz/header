// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package widget

/** @param agentIds
  *   subiz only
  * @param languageUrl
  *   read only
  * @param customLanguage
  *   write-only
  */
@SerialVersionUID(0L)
final case class Setting(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    widgetVersion: scala.Option[_root_.scala.Predef.String] = None,
    sound: scala.Option[widget.Sound] = None,
    language: scala.Option[_root_.scala.Predef.String] = None,
    theme: scala.Option[widget.Theme] = None,
    replytime: scala.Option[_root_.scala.Int] = None,
    agents: _root_.scala.collection.Seq[account.Agent] = _root_.scala.collection.Seq.empty,
    agentIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    languageUrl: scala.Option[_root_.scala.Predef.String] = None,
    customLanguageUrl: scala.Option[_root_.scala.Predef.String] = None,
    cssUrl: scala.Option[_root_.scala.Predef.String] = None,
    customCssUrl: scala.Option[_root_.scala.Predef.String] = None,
    customLanguage: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Setting] with scalapb.lenses.Updatable[Setting] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (widgetVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, widgetVersion.get) }
      if (sound.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sound.get.serializedSize) + sound.get.serializedSize }
      if (language.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, language.get) }
      if (theme.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(theme.get.serializedSize) + theme.get.serializedSize }
      if (replytime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, replytime.get) }
      agents.foreach(agents => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(agents.serializedSize) + agents.serializedSize)
      agentIds.foreach(agentIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, agentIds))
      if (languageUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, languageUrl.get) }
      if (customLanguageUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, customLanguageUrl.get) }
      if (cssUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, cssUrl.get) }
      if (customCssUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, customCssUrl.get) }
      if (customLanguage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, customLanguage.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      widgetVersion.foreach { __v =>
        _output__.writeString(3, __v)
      };
      sound.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      language.foreach { __v =>
        _output__.writeString(5, __v)
      };
      theme.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      replytime.foreach { __v =>
        _output__.writeInt32(9, __v)
      };
      agents.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      agentIds.foreach { __v =>
        _output__.writeString(11, __v)
      };
      cssUrl.foreach { __v =>
        _output__.writeString(12, __v)
      };
      languageUrl.foreach { __v =>
        _output__.writeString(13, __v)
      };
      customLanguageUrl.foreach { __v =>
        _output__.writeString(14, __v)
      };
      customCssUrl.foreach { __v =>
        _output__.writeString(15, __v)
      };
      customLanguage.foreach { __v =>
        _output__.writeString(16, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): widget.Setting = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __widgetVersion = this.widgetVersion
      var __sound = this.sound
      var __language = this.language
      var __theme = this.theme
      var __replytime = this.replytime
      val __agents = (_root_.scala.collection.immutable.Vector.newBuilder[account.Agent] ++= this.agents)
      val __agentIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.agentIds)
      var __languageUrl = this.languageUrl
      var __customLanguageUrl = this.customLanguageUrl
      var __cssUrl = this.cssUrl
      var __customCssUrl = this.customCssUrl
      var __customLanguage = this.customLanguage
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __widgetVersion = Option(_input__.readString())
          case 34 =>
            __sound = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sound.getOrElse(widget.Sound.defaultInstance)))
          case 42 =>
            __language = Option(_input__.readString())
          case 58 =>
            __theme = Option(_root_.scalapb.LiteParser.readMessage(_input__, __theme.getOrElse(widget.Theme.defaultInstance)))
          case 72 =>
            __replytime = Option(_input__.readInt32())
          case 82 =>
            __agents += _root_.scalapb.LiteParser.readMessage(_input__, account.Agent.defaultInstance)
          case 90 =>
            __agentIds += _input__.readString()
          case 106 =>
            __languageUrl = Option(_input__.readString())
          case 114 =>
            __customLanguageUrl = Option(_input__.readString())
          case 98 =>
            __cssUrl = Option(_input__.readString())
          case 122 =>
            __customCssUrl = Option(_input__.readString())
          case 130 =>
            __customLanguage = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      widget.Setting(
          ctx = __ctx,
          accountId = __accountId,
          widgetVersion = __widgetVersion,
          sound = __sound,
          language = __language,
          theme = __theme,
          replytime = __replytime,
          agents = __agents.result(),
          agentIds = __agentIds.result(),
          languageUrl = __languageUrl,
          customLanguageUrl = __customLanguageUrl,
          cssUrl = __cssUrl,
          customCssUrl = __customCssUrl,
          customLanguage = __customLanguage
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Setting = copy(ctx = None)
    def withCtx(__v: common.Context): Setting = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Setting = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Setting = copy(accountId = Option(__v))
    def getWidgetVersion: _root_.scala.Predef.String = widgetVersion.getOrElse("")
    def clearWidgetVersion: Setting = copy(widgetVersion = None)
    def withWidgetVersion(__v: _root_.scala.Predef.String): Setting = copy(widgetVersion = Option(__v))
    def getSound: widget.Sound = sound.getOrElse(widget.Sound.defaultInstance)
    def clearSound: Setting = copy(sound = None)
    def withSound(__v: widget.Sound): Setting = copy(sound = Option(__v))
    def getLanguage: _root_.scala.Predef.String = language.getOrElse("")
    def clearLanguage: Setting = copy(language = None)
    def withLanguage(__v: _root_.scala.Predef.String): Setting = copy(language = Option(__v))
    def getTheme: widget.Theme = theme.getOrElse(widget.Theme.defaultInstance)
    def clearTheme: Setting = copy(theme = None)
    def withTheme(__v: widget.Theme): Setting = copy(theme = Option(__v))
    def getReplytime: _root_.scala.Int = replytime.getOrElse(0)
    def clearReplytime: Setting = copy(replytime = None)
    def withReplytime(__v: _root_.scala.Int): Setting = copy(replytime = Option(__v))
    def clearAgents = copy(agents = _root_.scala.collection.Seq.empty)
    def addAgents(__vs: account.Agent*): Setting = addAllAgents(__vs)
    def addAllAgents(__vs: TraversableOnce[account.Agent]): Setting = copy(agents = agents ++ __vs)
    def withAgents(__v: _root_.scala.collection.Seq[account.Agent]): Setting = copy(agents = __v)
    def clearAgentIds = copy(agentIds = _root_.scala.collection.Seq.empty)
    def addAgentIds(__vs: _root_.scala.Predef.String*): Setting = addAllAgentIds(__vs)
    def addAllAgentIds(__vs: TraversableOnce[_root_.scala.Predef.String]): Setting = copy(agentIds = agentIds ++ __vs)
    def withAgentIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Setting = copy(agentIds = __v)
    def getLanguageUrl: _root_.scala.Predef.String = languageUrl.getOrElse("")
    def clearLanguageUrl: Setting = copy(languageUrl = None)
    def withLanguageUrl(__v: _root_.scala.Predef.String): Setting = copy(languageUrl = Option(__v))
    def getCustomLanguageUrl: _root_.scala.Predef.String = customLanguageUrl.getOrElse("")
    def clearCustomLanguageUrl: Setting = copy(customLanguageUrl = None)
    def withCustomLanguageUrl(__v: _root_.scala.Predef.String): Setting = copy(customLanguageUrl = Option(__v))
    def getCssUrl: _root_.scala.Predef.String = cssUrl.getOrElse("")
    def clearCssUrl: Setting = copy(cssUrl = None)
    def withCssUrl(__v: _root_.scala.Predef.String): Setting = copy(cssUrl = Option(__v))
    def getCustomCssUrl: _root_.scala.Predef.String = customCssUrl.getOrElse("")
    def clearCustomCssUrl: Setting = copy(customCssUrl = None)
    def withCustomCssUrl(__v: _root_.scala.Predef.String): Setting = copy(customCssUrl = Option(__v))
    def getCustomLanguage: _root_.scala.Predef.String = customLanguage.getOrElse("")
    def clearCustomLanguage: Setting = copy(customLanguage = None)
    def withCustomLanguage(__v: _root_.scala.Predef.String): Setting = copy(customLanguage = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => accountId.orNull
        case 3 => widgetVersion.orNull
        case 4 => sound.orNull
        case 5 => language.orNull
        case 7 => theme.orNull
        case 9 => replytime.orNull
        case 10 => agents
        case 11 => agentIds
        case 13 => languageUrl.orNull
        case 14 => customLanguageUrl.orNull
        case 12 => cssUrl.orNull
        case 15 => customCssUrl.orNull
        case 16 => customLanguage.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => widgetVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => sound.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => language.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => theme.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => replytime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PRepeated(agents.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 11 => _root_.scalapb.descriptors.PRepeated(agentIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 13 => languageUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => customLanguageUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => cssUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => customCssUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => customLanguage.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = widget.Setting
}

object Setting extends scalapb.GeneratedMessageCompanion[widget.Setting] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[widget.Setting] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): widget.Setting = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    widget.Setting(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[widget.Sound]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[widget.Theme]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[account.Agent]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[widget.Setting] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      widget.Setting(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[widget.Sound]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[widget.Theme]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[account.Agent]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WidgetProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WidgetProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 4 => __out = widget.Sound
      case 7 => __out = widget.Theme
      case 10 => __out = account.Agent
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = widget.Setting(
  )
  implicit class SettingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, widget.Setting]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, widget.Setting](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def widgetVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getWidgetVersion)((c_, f_) => c_.copy(widgetVersion = Option(f_)))
    def optionalWidgetVersion: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.widgetVersion)((c_, f_) => c_.copy(widgetVersion = f_))
    def sound: _root_.scalapb.lenses.Lens[UpperPB, widget.Sound] = field(_.getSound)((c_, f_) => c_.copy(sound = Option(f_)))
    def optionalSound: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Sound]] = field(_.sound)((c_, f_) => c_.copy(sound = f_))
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLanguage)((c_, f_) => c_.copy(language = Option(f_)))
    def optionalLanguage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.language)((c_, f_) => c_.copy(language = f_))
    def theme: _root_.scalapb.lenses.Lens[UpperPB, widget.Theme] = field(_.getTheme)((c_, f_) => c_.copy(theme = Option(f_)))
    def optionalTheme: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Theme]] = field(_.theme)((c_, f_) => c_.copy(theme = f_))
    def replytime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getReplytime)((c_, f_) => c_.copy(replytime = Option(f_)))
    def optionalReplytime: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.replytime)((c_, f_) => c_.copy(replytime = f_))
    def agents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[account.Agent]] = field(_.agents)((c_, f_) => c_.copy(agents = f_))
    def agentIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.agentIds)((c_, f_) => c_.copy(agentIds = f_))
    def languageUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLanguageUrl)((c_, f_) => c_.copy(languageUrl = Option(f_)))
    def optionalLanguageUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.languageUrl)((c_, f_) => c_.copy(languageUrl = f_))
    def customLanguageUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCustomLanguageUrl)((c_, f_) => c_.copy(customLanguageUrl = Option(f_)))
    def optionalCustomLanguageUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.customLanguageUrl)((c_, f_) => c_.copy(customLanguageUrl = f_))
    def cssUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCssUrl)((c_, f_) => c_.copy(cssUrl = Option(f_)))
    def optionalCssUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.cssUrl)((c_, f_) => c_.copy(cssUrl = f_))
    def customCssUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCustomCssUrl)((c_, f_) => c_.copy(customCssUrl = Option(f_)))
    def optionalCustomCssUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.customCssUrl)((c_, f_) => c_.copy(customCssUrl = f_))
    def customLanguage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCustomLanguage)((c_, f_) => c_.copy(customLanguage = Option(f_)))
    def optionalCustomLanguage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.customLanguage)((c_, f_) => c_.copy(customLanguage = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val WIDGET_VERSION_FIELD_NUMBER = 3
  final val SOUND_FIELD_NUMBER = 4
  final val LANGUAGE_FIELD_NUMBER = 5
  final val THEME_FIELD_NUMBER = 7
  final val REPLYTIME_FIELD_NUMBER = 9
  final val AGENTS_FIELD_NUMBER = 10
  final val AGENT_IDS_FIELD_NUMBER = 11
  final val LANGUAGE_URL_FIELD_NUMBER = 13
  final val CUSTOM_LANGUAGE_URL_FIELD_NUMBER = 14
  final val CSS_URL_FIELD_NUMBER = 12
  final val CUSTOM_CSS_URL_FIELD_NUMBER = 15
  final val CUSTOM_LANGUAGE_FIELD_NUMBER = 16
}
