// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package widget

/** @param customCss
  *   for setting only
  */
@SerialVersionUID(0L)
final case class Theme(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    customCss: scala.Option[_root_.scala.Predef.String] = None,
    widgetPosition: scala.Option[_root_.scala.Predef.String] = None,
    windowMode: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Theme] with scalapb.lenses.Updatable[Theme] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (customCss.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, customCss.get) }
      if (widgetPosition.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, widgetPosition.get) }
      if (windowMode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, windowMode.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      widgetPosition.foreach { __v =>
        _output__.writeString(3, __v)
      };
      windowMode.foreach { __v =>
        _output__.writeString(5, __v)
      };
      customCss.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): widget.Theme = {
      var __accountId = this.accountId
      var __customCss = this.customCss
      var __widgetPosition = this.widgetPosition
      var __windowMode = this.windowMode
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __accountId = Option(_input__.readString())
          case 66 =>
            __customCss = Option(_input__.readString())
          case 26 =>
            __widgetPosition = Option(_input__.readString())
          case 42 =>
            __windowMode = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      widget.Theme(
          accountId = __accountId,
          customCss = __customCss,
          widgetPosition = __widgetPosition,
          windowMode = __windowMode
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Theme = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Theme = copy(accountId = Option(__v))
    def getCustomCss: _root_.scala.Predef.String = customCss.getOrElse("")
    def clearCustomCss: Theme = copy(customCss = None)
    def withCustomCss(__v: _root_.scala.Predef.String): Theme = copy(customCss = Option(__v))
    def getWidgetPosition: _root_.scala.Predef.String = widgetPosition.getOrElse("")
    def clearWidgetPosition: Theme = copy(widgetPosition = None)
    def withWidgetPosition(__v: _root_.scala.Predef.String): Theme = copy(widgetPosition = Option(__v))
    def getWindowMode: _root_.scala.Predef.String = windowMode.getOrElse("")
    def clearWindowMode: Theme = copy(windowMode = None)
    def withWindowMode(__v: _root_.scala.Predef.String): Theme = copy(windowMode = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => accountId.orNull
        case 8 => customCss.orNull
        case 3 => widgetPosition.orNull
        case 5 => windowMode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => customCss.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => widgetPosition.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => windowMode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = widget.Theme
}

object Theme extends scalapb.GeneratedMessageCompanion[widget.Theme] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[widget.Theme] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): widget.Theme = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    widget.Theme(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[widget.Theme] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      widget.Theme(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WidgetProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WidgetProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = widget.Theme(
  )
  sealed trait ButtonPosition extends _root_.scalapb.GeneratedEnum {
    type EnumType = ButtonPosition
    def isleft: _root_.scala.Boolean = false
    def isright: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[ButtonPosition] = widget.Theme.ButtonPosition
  }
  
  object ButtonPosition extends _root_.scalapb.GeneratedEnumCompanion[ButtonPosition] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ButtonPosition] = this
    @SerialVersionUID(0L)
    case object left extends ButtonPosition {
      val value = 0
      val index = 0
      val name = "left"
      override def isleft: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object right extends ButtonPosition {
      val value = 1
      val index = 1
      val name = "right"
      override def isright: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends ButtonPosition with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(left, right)
    def fromValue(value: _root_.scala.Int): ButtonPosition = value match {
      case 0 => left
      case 1 => right
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = widget.Theme.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = widget.Theme.scalaDescriptor.enums(0)
  }
  sealed trait WindowMode extends _root_.scalapb.GeneratedEnum {
    type EnumType = WindowMode
    def ismini: _root_.scala.Boolean = false
    def isfull: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[WindowMode] = widget.Theme.WindowMode
  }
  
  object WindowMode extends _root_.scalapb.GeneratedEnumCompanion[WindowMode] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[WindowMode] = this
    @SerialVersionUID(0L)
    case object mini extends WindowMode {
      val value = 0
      val index = 0
      val name = "mini"
      override def ismini: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object full extends WindowMode {
      val value = 1
      val index = 1
      val name = "full"
      override def isfull: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends WindowMode with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(mini, full)
    def fromValue(value: _root_.scala.Int): WindowMode = value match {
      case 0 => mini
      case 1 => full
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = widget.Theme.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = widget.Theme.scalaDescriptor.enums(1)
  }
  implicit class ThemeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, widget.Theme]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, widget.Theme](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def customCss: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCustomCss)((c_, f_) => c_.copy(customCss = Option(f_)))
    def optionalCustomCss: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.customCss)((c_, f_) => c_.copy(customCss = f_))
    def widgetPosition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getWidgetPosition)((c_, f_) => c_.copy(widgetPosition = Option(f_)))
    def optionalWidgetPosition: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.widgetPosition)((c_, f_) => c_.copy(widgetPosition = f_))
    def windowMode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getWindowMode)((c_, f_) => c_.copy(windowMode = Option(f_)))
    def optionalWindowMode: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.windowMode)((c_, f_) => c_.copy(windowMode = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val CUSTOM_CSS_FIELD_NUMBER = 8
  final val WIDGET_POSITION_FIELD_NUMBER = 3
  final val WINDOW_MODE_FIELD_NUMBER = 5
}
