// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package widget

@SerialVersionUID(0L)
final case class Sound(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    enabled: scala.Option[_root_.scala.Boolean] = None,
    newConversation: scala.Option[_root_.scala.Predef.String] = None,
    fileCreate: scala.Option[_root_.scala.Predef.String] = None,
    newMessage: scala.Option[_root_.scala.Predef.String] = None,
    messageSendFailed: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Sound] with scalapb.lenses.Updatable[Sound] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, accountId.get) }
      if (enabled.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, enabled.get) }
      if (newConversation.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, newConversation.get) }
      if (fileCreate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, fileCreate.get) }
      if (newMessage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, newMessage.get) }
      if (messageSendFailed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, messageSendFailed.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(1, __v)
      };
      enabled.foreach { __v =>
        _output__.writeBool(2, __v)
      };
      newConversation.foreach { __v =>
        _output__.writeString(3, __v)
      };
      fileCreate.foreach { __v =>
        _output__.writeString(4, __v)
      };
      newMessage.foreach { __v =>
        _output__.writeString(5, __v)
      };
      messageSendFailed.foreach { __v =>
        _output__.writeString(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): widget.Sound = {
      var __accountId = this.accountId
      var __enabled = this.enabled
      var __newConversation = this.newConversation
      var __fileCreate = this.fileCreate
      var __newMessage = this.newMessage
      var __messageSendFailed = this.messageSendFailed
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __accountId = Option(_input__.readString())
          case 16 =>
            __enabled = Option(_input__.readBool())
          case 26 =>
            __newConversation = Option(_input__.readString())
          case 34 =>
            __fileCreate = Option(_input__.readString())
          case 42 =>
            __newMessage = Option(_input__.readString())
          case 50 =>
            __messageSendFailed = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      widget.Sound(
          accountId = __accountId,
          enabled = __enabled,
          newConversation = __newConversation,
          fileCreate = __fileCreate,
          newMessage = __newMessage,
          messageSendFailed = __messageSendFailed
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Sound = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Sound = copy(accountId = Option(__v))
    def getEnabled: _root_.scala.Boolean = enabled.getOrElse(false)
    def clearEnabled: Sound = copy(enabled = None)
    def withEnabled(__v: _root_.scala.Boolean): Sound = copy(enabled = Option(__v))
    def getNewConversation: _root_.scala.Predef.String = newConversation.getOrElse("")
    def clearNewConversation: Sound = copy(newConversation = None)
    def withNewConversation(__v: _root_.scala.Predef.String): Sound = copy(newConversation = Option(__v))
    def getFileCreate: _root_.scala.Predef.String = fileCreate.getOrElse("")
    def clearFileCreate: Sound = copy(fileCreate = None)
    def withFileCreate(__v: _root_.scala.Predef.String): Sound = copy(fileCreate = Option(__v))
    def getNewMessage: _root_.scala.Predef.String = newMessage.getOrElse("")
    def clearNewMessage: Sound = copy(newMessage = None)
    def withNewMessage(__v: _root_.scala.Predef.String): Sound = copy(newMessage = Option(__v))
    def getMessageSendFailed: _root_.scala.Predef.String = messageSendFailed.getOrElse("")
    def clearMessageSendFailed: Sound = copy(messageSendFailed = None)
    def withMessageSendFailed(__v: _root_.scala.Predef.String): Sound = copy(messageSendFailed = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => accountId.orNull
        case 2 => enabled.orNull
        case 3 => newConversation.orNull
        case 4 => fileCreate.orNull
        case 5 => newMessage.orNull
        case 6 => messageSendFailed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => enabled.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => newConversation.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => fileCreate.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => newMessage.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => messageSendFailed.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = widget.Sound
}

object Sound extends scalapb.GeneratedMessageCompanion[widget.Sound] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[widget.Sound] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): widget.Sound = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    widget.Sound(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[widget.Sound] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      widget.Sound(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WidgetProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WidgetProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = widget.Sound(
  )
  implicit class SoundLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, widget.Sound]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, widget.Sound](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def enabled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getEnabled)((c_, f_) => c_.copy(enabled = Option(f_)))
    def optionalEnabled: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.enabled)((c_, f_) => c_.copy(enabled = f_))
    def newConversation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getNewConversation)((c_, f_) => c_.copy(newConversation = Option(f_)))
    def optionalNewConversation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.newConversation)((c_, f_) => c_.copy(newConversation = f_))
    def fileCreate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFileCreate)((c_, f_) => c_.copy(fileCreate = Option(f_)))
    def optionalFileCreate: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fileCreate)((c_, f_) => c_.copy(fileCreate = f_))
    def newMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getNewMessage)((c_, f_) => c_.copy(newMessage = Option(f_)))
    def optionalNewMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.newMessage)((c_, f_) => c_.copy(newMessage = f_))
    def messageSendFailed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMessageSendFailed)((c_, f_) => c_.copy(messageSendFailed = Option(f_)))
    def optionalMessageSendFailed: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.messageSendFailed)((c_, f_) => c_.copy(messageSendFailed = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 1
  final val ENABLED_FIELD_NUMBER = 2
  final val NEW_CONVERSATION_FIELD_NUMBER = 3
  final val FILE_CREATE_FIELD_NUMBER = 4
  final val NEW_MESSAGE_FIELD_NUMBER = 5
  final val MESSAGE_SEND_FAILED_FIELD_NUMBER = 6
}
