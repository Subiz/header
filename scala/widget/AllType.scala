// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package widget

@SerialVersionUID(0L)
final case class AllType(
    theme: scala.Option[widget.Theme] = None,
    sound: scala.Option[widget.Sound] = None,
    setting: scala.Option[widget.Setting] = None,
    us: scala.Option[widget.UserSetting] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (theme.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(theme.get.serializedSize) + theme.get.serializedSize }
      if (sound.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sound.get.serializedSize) + sound.get.serializedSize }
      if (setting.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(setting.get.serializedSize) + setting.get.serializedSize }
      if (us.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(us.get.serializedSize) + us.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      theme.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sound.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      setting.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      us.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): widget.AllType = {
      var __theme = this.theme
      var __sound = this.sound
      var __setting = this.setting
      var __us = this.us
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __theme = Option(_root_.scalapb.LiteParser.readMessage(_input__, __theme.getOrElse(widget.Theme.defaultInstance)))
          case 26 =>
            __sound = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sound.getOrElse(widget.Sound.defaultInstance)))
          case 34 =>
            __setting = Option(_root_.scalapb.LiteParser.readMessage(_input__, __setting.getOrElse(widget.Setting.defaultInstance)))
          case 42 =>
            __us = Option(_root_.scalapb.LiteParser.readMessage(_input__, __us.getOrElse(widget.UserSetting.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      widget.AllType(
          theme = __theme,
          sound = __sound,
          setting = __setting,
          us = __us
      )
    }
    def getTheme: widget.Theme = theme.getOrElse(widget.Theme.defaultInstance)
    def clearTheme: AllType = copy(theme = None)
    def withTheme(__v: widget.Theme): AllType = copy(theme = Option(__v))
    def getSound: widget.Sound = sound.getOrElse(widget.Sound.defaultInstance)
    def clearSound: AllType = copy(sound = None)
    def withSound(__v: widget.Sound): AllType = copy(sound = Option(__v))
    def getSetting: widget.Setting = setting.getOrElse(widget.Setting.defaultInstance)
    def clearSetting: AllType = copy(setting = None)
    def withSetting(__v: widget.Setting): AllType = copy(setting = Option(__v))
    def getUs: widget.UserSetting = us.getOrElse(widget.UserSetting.defaultInstance)
    def clearUs: AllType = copy(us = None)
    def withUs(__v: widget.UserSetting): AllType = copy(us = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => theme.orNull
        case 3 => sound.orNull
        case 4 => setting.orNull
        case 5 => us.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => theme.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => sound.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => setting.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => us.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = widget.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[widget.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[widget.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): widget.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    widget.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[widget.Theme]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[widget.Sound]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[widget.Setting]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[widget.UserSetting]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[widget.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      widget.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[widget.Theme]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[widget.Sound]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[widget.Setting]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[widget.UserSetting]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WidgetProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WidgetProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = widget.Theme
      case 3 => __out = widget.Sound
      case 4 => __out = widget.Setting
      case 5 => __out = widget.UserSetting
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = widget.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, widget.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, widget.AllType](_l) {
    def theme: _root_.scalapb.lenses.Lens[UpperPB, widget.Theme] = field(_.getTheme)((c_, f_) => c_.copy(theme = Option(f_)))
    def optionalTheme: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Theme]] = field(_.theme)((c_, f_) => c_.copy(theme = f_))
    def sound: _root_.scalapb.lenses.Lens[UpperPB, widget.Sound] = field(_.getSound)((c_, f_) => c_.copy(sound = Option(f_)))
    def optionalSound: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Sound]] = field(_.sound)((c_, f_) => c_.copy(sound = f_))
    def setting: _root_.scalapb.lenses.Lens[UpperPB, widget.Setting] = field(_.getSetting)((c_, f_) => c_.copy(setting = Option(f_)))
    def optionalSetting: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.Setting]] = field(_.setting)((c_, f_) => c_.copy(setting = f_))
    def us: _root_.scalapb.lenses.Lens[UpperPB, widget.UserSetting] = field(_.getUs)((c_, f_) => c_.copy(us = Option(f_)))
    def optionalUs: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[widget.UserSetting]] = field(_.us)((c_, f_) => c_.copy(us = f_))
  }
  final val THEME_FIELD_NUMBER = 2
  final val SOUND_FIELD_NUMBER = 3
  final val SETTING_FIELD_NUMBER = 4
  final val US_FIELD_NUMBER = 5
}
