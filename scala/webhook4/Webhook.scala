// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package webhook4

@SerialVersionUID(0L)
final case class Webhook(
    ctx: scala.Option[common.Context] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    clientId: scala.Option[_root_.scala.Predef.String] = None,
    url: scala.Option[_root_.scala.Predef.String] = None,
    secret: scala.Option[_root_.scala.Predef.String] = None,
    events: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    state: scala.Option[_root_.scala.Predef.String] = None,
    lastHookAt: scala.Option[_root_.scala.Long] = None,
    lastHookId: scala.Option[_root_.scala.Long] = None,
    eventsCount: scala.Option[_root_.scala.Long] = None,
    lastHookResponse: scala.Option[_root_.scala.Predef.String] = None,
    lastHookStatus: scala.Option[_root_.scala.Int] = None,
    lastHookPayload: scala.Option[_root_.scala.Predef.String] = None,
    backoffsCount: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Webhook] with scalapb.lenses.Updatable[Webhook] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, accountId.get) }
      if (clientId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, clientId.get) }
      if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, url.get) }
      if (secret.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, secret.get) }
      events.foreach(events => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, events))
      if (state.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, state.get) }
      if (lastHookAt.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, lastHookAt.get) }
      if (lastHookId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, lastHookId.get) }
      if (eventsCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, eventsCount.get) }
      if (lastHookResponse.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, lastHookResponse.get) }
      if (lastHookStatus.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, lastHookStatus.get) }
      if (lastHookPayload.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, lastHookPayload.get) }
      if (backoffsCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(17, backoffsCount.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      clientId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      url.foreach { __v =>
        _output__.writeString(3, __v)
      };
      secret.foreach { __v =>
        _output__.writeString(4, __v)
      };
      events.foreach { __v =>
        _output__.writeString(6, __v)
      };
      state.foreach { __v =>
        _output__.writeString(7, __v)
      };
      lastHookAt.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      lastHookId.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(12, __v)
      };
      eventsCount.foreach { __v =>
        _output__.writeInt64(13, __v)
      };
      lastHookResponse.foreach { __v =>
        _output__.writeString(14, __v)
      };
      lastHookStatus.foreach { __v =>
        _output__.writeInt32(15, __v)
      };
      lastHookPayload.foreach { __v =>
        _output__.writeString(16, __v)
      };
      backoffsCount.foreach { __v =>
        _output__.writeInt64(17, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): webhook4.Webhook = {
      var __ctx = this.ctx
      var __accountId = this.accountId
      var __clientId = this.clientId
      var __url = this.url
      var __secret = this.secret
      val __events = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.events)
      var __state = this.state
      var __lastHookAt = this.lastHookAt
      var __lastHookId = this.lastHookId
      var __eventsCount = this.eventsCount
      var __lastHookResponse = this.lastHookResponse
      var __lastHookStatus = this.lastHookStatus
      var __lastHookPayload = this.lastHookPayload
      var __backoffsCount = this.backoffsCount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 98 =>
            __accountId = Option(_input__.readString())
          case 18 =>
            __clientId = Option(_input__.readString())
          case 26 =>
            __url = Option(_input__.readString())
          case 34 =>
            __secret = Option(_input__.readString())
          case 50 =>
            __events += _input__.readString()
          case 58 =>
            __state = Option(_input__.readString())
          case 72 =>
            __lastHookAt = Option(_input__.readInt64())
          case 80 =>
            __lastHookId = Option(_input__.readInt64())
          case 104 =>
            __eventsCount = Option(_input__.readInt64())
          case 114 =>
            __lastHookResponse = Option(_input__.readString())
          case 120 =>
            __lastHookStatus = Option(_input__.readInt32())
          case 130 =>
            __lastHookPayload = Option(_input__.readString())
          case 136 =>
            __backoffsCount = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      webhook4.Webhook(
          ctx = __ctx,
          accountId = __accountId,
          clientId = __clientId,
          url = __url,
          secret = __secret,
          events = __events.result(),
          state = __state,
          lastHookAt = __lastHookAt,
          lastHookId = __lastHookId,
          eventsCount = __eventsCount,
          lastHookResponse = __lastHookResponse,
          lastHookStatus = __lastHookStatus,
          lastHookPayload = __lastHookPayload,
          backoffsCount = __backoffsCount
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Webhook = copy(ctx = None)
    def withCtx(__v: common.Context): Webhook = copy(ctx = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Webhook = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Webhook = copy(accountId = Option(__v))
    def getClientId: _root_.scala.Predef.String = clientId.getOrElse("")
    def clearClientId: Webhook = copy(clientId = None)
    def withClientId(__v: _root_.scala.Predef.String): Webhook = copy(clientId = Option(__v))
    def getUrl: _root_.scala.Predef.String = url.getOrElse("")
    def clearUrl: Webhook = copy(url = None)
    def withUrl(__v: _root_.scala.Predef.String): Webhook = copy(url = Option(__v))
    def getSecret: _root_.scala.Predef.String = secret.getOrElse("")
    def clearSecret: Webhook = copy(secret = None)
    def withSecret(__v: _root_.scala.Predef.String): Webhook = copy(secret = Option(__v))
    def clearEvents = copy(events = _root_.scala.collection.Seq.empty)
    def addEvents(__vs: _root_.scala.Predef.String*): Webhook = addAllEvents(__vs)
    def addAllEvents(__vs: TraversableOnce[_root_.scala.Predef.String]): Webhook = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Webhook = copy(events = __v)
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: Webhook = copy(state = None)
    def withState(__v: _root_.scala.Predef.String): Webhook = copy(state = Option(__v))
    def getLastHookAt: _root_.scala.Long = lastHookAt.getOrElse(0L)
    def clearLastHookAt: Webhook = copy(lastHookAt = None)
    def withLastHookAt(__v: _root_.scala.Long): Webhook = copy(lastHookAt = Option(__v))
    def getLastHookId: _root_.scala.Long = lastHookId.getOrElse(0L)
    def clearLastHookId: Webhook = copy(lastHookId = None)
    def withLastHookId(__v: _root_.scala.Long): Webhook = copy(lastHookId = Option(__v))
    def getEventsCount: _root_.scala.Long = eventsCount.getOrElse(0L)
    def clearEventsCount: Webhook = copy(eventsCount = None)
    def withEventsCount(__v: _root_.scala.Long): Webhook = copy(eventsCount = Option(__v))
    def getLastHookResponse: _root_.scala.Predef.String = lastHookResponse.getOrElse("")
    def clearLastHookResponse: Webhook = copy(lastHookResponse = None)
    def withLastHookResponse(__v: _root_.scala.Predef.String): Webhook = copy(lastHookResponse = Option(__v))
    def getLastHookStatus: _root_.scala.Int = lastHookStatus.getOrElse(0)
    def clearLastHookStatus: Webhook = copy(lastHookStatus = None)
    def withLastHookStatus(__v: _root_.scala.Int): Webhook = copy(lastHookStatus = Option(__v))
    def getLastHookPayload: _root_.scala.Predef.String = lastHookPayload.getOrElse("")
    def clearLastHookPayload: Webhook = copy(lastHookPayload = None)
    def withLastHookPayload(__v: _root_.scala.Predef.String): Webhook = copy(lastHookPayload = Option(__v))
    def getBackoffsCount: _root_.scala.Long = backoffsCount.getOrElse(0L)
    def clearBackoffsCount: Webhook = copy(backoffsCount = None)
    def withBackoffsCount(__v: _root_.scala.Long): Webhook = copy(backoffsCount = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 12 => accountId.orNull
        case 2 => clientId.orNull
        case 3 => url.orNull
        case 4 => secret.orNull
        case 6 => events
        case 7 => state.orNull
        case 9 => lastHookAt.orNull
        case 10 => lastHookId.orNull
        case 13 => eventsCount.orNull
        case 14 => lastHookResponse.orNull
        case 15 => lastHookStatus.orNull
        case 16 => lastHookPayload.orNull
        case 17 => backoffsCount.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => clientId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => secret.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(events.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 7 => state.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => lastHookAt.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => lastHookId.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => eventsCount.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => lastHookResponse.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => lastHookStatus.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => lastHookPayload.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => backoffsCount.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = webhook4.Webhook
}

object Webhook extends scalapb.GeneratedMessageCompanion[webhook4.Webhook] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[webhook4.Webhook] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): webhook4.Webhook = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    webhook4.Webhook(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[webhook4.Webhook] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      webhook4.Webhook(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Webhook4Proto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Webhook4Proto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = webhook4.Webhook(
  )
  sealed trait State extends _root_.scalapb.GeneratedEnum {
    type EnumType = State
    def isnormal: _root_.scala.Boolean = false
    def isbackoff: _root_.scala.Boolean = false
    def isinactive: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = webhook4.Webhook.State
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    @SerialVersionUID(0L)
    case object normal extends State {
      val value = 0
      val index = 0
      val name = "normal"
      override def isnormal: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object backoff extends State {
      val value = 1
      val index = 1
      val name = "backoff"
      override def isbackoff: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object inactive extends State {
      val value = 2
      val index = 2
      val name = "inactive"
      override def isinactive: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends State with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(normal, backoff, inactive)
    def fromValue(value: _root_.scala.Int): State = value match {
      case 0 => normal
      case 1 => backoff
      case 2 => inactive
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = webhook4.Webhook.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = webhook4.Webhook.scalaDescriptor.enums(0)
  }
  implicit class WebhookLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, webhook4.Webhook]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, webhook4.Webhook](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClientId)((c_, f_) => c_.copy(clientId = Option(f_)))
    def optionalClientId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUrl)((c_, f_) => c_.copy(url = Option(f_)))
    def optionalUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def secret: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSecret)((c_, f_) => c_.copy(secret = Option(f_)))
    def optionalSecret: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.secret)((c_, f_) => c_.copy(secret = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.events)((c_, f_) => c_.copy(events = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def lastHookAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLastHookAt)((c_, f_) => c_.copy(lastHookAt = Option(f_)))
    def optionalLastHookAt: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.lastHookAt)((c_, f_) => c_.copy(lastHookAt = f_))
    def lastHookId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLastHookId)((c_, f_) => c_.copy(lastHookId = Option(f_)))
    def optionalLastHookId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.lastHookId)((c_, f_) => c_.copy(lastHookId = f_))
    def eventsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getEventsCount)((c_, f_) => c_.copy(eventsCount = Option(f_)))
    def optionalEventsCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.eventsCount)((c_, f_) => c_.copy(eventsCount = f_))
    def lastHookResponse: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastHookResponse)((c_, f_) => c_.copy(lastHookResponse = Option(f_)))
    def optionalLastHookResponse: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lastHookResponse)((c_, f_) => c_.copy(lastHookResponse = f_))
    def lastHookStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLastHookStatus)((c_, f_) => c_.copy(lastHookStatus = Option(f_)))
    def optionalLastHookStatus: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.lastHookStatus)((c_, f_) => c_.copy(lastHookStatus = f_))
    def lastHookPayload: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastHookPayload)((c_, f_) => c_.copy(lastHookPayload = Option(f_)))
    def optionalLastHookPayload: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lastHookPayload)((c_, f_) => c_.copy(lastHookPayload = f_))
    def backoffsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getBackoffsCount)((c_, f_) => c_.copy(backoffsCount = Option(f_)))
    def optionalBackoffsCount: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.backoffsCount)((c_, f_) => c_.copy(backoffsCount = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 12
  final val CLIENT_ID_FIELD_NUMBER = 2
  final val URL_FIELD_NUMBER = 3
  final val SECRET_FIELD_NUMBER = 4
  final val EVENTS_FIELD_NUMBER = 6
  final val STATE_FIELD_NUMBER = 7
  final val LAST_HOOK_AT_FIELD_NUMBER = 9
  final val LAST_HOOK_ID_FIELD_NUMBER = 10
  final val EVENTS_COUNT_FIELD_NUMBER = 13
  final val LAST_HOOK_RESPONSE_FIELD_NUMBER = 14
  final val LAST_HOOK_STATUS_FIELD_NUMBER = 15
  final val LAST_HOOK_PAYLOAD_FIELD_NUMBER = 16
  final val BACKOFFS_COUNT_FIELD_NUMBER = 17
}
