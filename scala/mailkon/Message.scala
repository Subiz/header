// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package mailkon

@SerialVersionUID(0L)
final case class Message(
    messageId: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None,
    fromAddr: scala.Option[_root_.scala.Predef.String] = None,
    toAddr: scala.Option[_root_.scala.Predef.String] = None,
    subject: scala.Option[_root_.scala.Predef.String] = None,
    body: scala.Option[_root_.scala.Predef.String] = None,
    header: scala.Option[_root_.scala.Predef.String] = None,
    attachments: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    created: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Message] with scalapb.lenses.Updatable[Message] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (messageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, messageId.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, conversationId.get) }
      if (fromAddr.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, fromAddr.get) }
      if (toAddr.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, toAddr.get) }
      if (subject.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, subject.get) }
      if (body.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, body.get) }
      if (header.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, header.get) }
      attachments.foreach(attachments => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, attachments))
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, created.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      messageId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      conversationId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      fromAddr.foreach { __v =>
        _output__.writeString(5, __v)
      };
      toAddr.foreach { __v =>
        _output__.writeString(6, __v)
      };
      subject.foreach { __v =>
        _output__.writeString(7, __v)
      };
      body.foreach { __v =>
        _output__.writeString(8, __v)
      };
      header.foreach { __v =>
        _output__.writeString(9, __v)
      };
      attachments.foreach { __v =>
        _output__.writeString(10, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(11, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): mailkon.Message = {
      var __messageId = this.messageId
      var __accountId = this.accountId
      var __conversationId = this.conversationId
      var __fromAddr = this.fromAddr
      var __toAddr = this.toAddr
      var __subject = this.subject
      var __body = this.body
      var __header = this.header
      val __attachments = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.attachments)
      var __created = this.created
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __messageId = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __conversationId = Option(_input__.readString())
          case 42 =>
            __fromAddr = Option(_input__.readString())
          case 50 =>
            __toAddr = Option(_input__.readString())
          case 58 =>
            __subject = Option(_input__.readString())
          case 66 =>
            __body = Option(_input__.readString())
          case 74 =>
            __header = Option(_input__.readString())
          case 82 =>
            __attachments += _input__.readString()
          case 88 =>
            __created = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      mailkon.Message(
          messageId = __messageId,
          accountId = __accountId,
          conversationId = __conversationId,
          fromAddr = __fromAddr,
          toAddr = __toAddr,
          subject = __subject,
          body = __body,
          header = __header,
          attachments = __attachments.result(),
          created = __created
      )
    }
    def getMessageId: _root_.scala.Predef.String = messageId.getOrElse("")
    def clearMessageId: Message = copy(messageId = None)
    def withMessageId(__v: _root_.scala.Predef.String): Message = copy(messageId = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Message = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Message = copy(accountId = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: Message = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): Message = copy(conversationId = Option(__v))
    def getFromAddr: _root_.scala.Predef.String = fromAddr.getOrElse("")
    def clearFromAddr: Message = copy(fromAddr = None)
    def withFromAddr(__v: _root_.scala.Predef.String): Message = copy(fromAddr = Option(__v))
    def getToAddr: _root_.scala.Predef.String = toAddr.getOrElse("")
    def clearToAddr: Message = copy(toAddr = None)
    def withToAddr(__v: _root_.scala.Predef.String): Message = copy(toAddr = Option(__v))
    def getSubject: _root_.scala.Predef.String = subject.getOrElse("")
    def clearSubject: Message = copy(subject = None)
    def withSubject(__v: _root_.scala.Predef.String): Message = copy(subject = Option(__v))
    def getBody: _root_.scala.Predef.String = body.getOrElse("")
    def clearBody: Message = copy(body = None)
    def withBody(__v: _root_.scala.Predef.String): Message = copy(body = Option(__v))
    def getHeader: _root_.scala.Predef.String = header.getOrElse("")
    def clearHeader: Message = copy(header = None)
    def withHeader(__v: _root_.scala.Predef.String): Message = copy(header = Option(__v))
    def clearAttachments = copy(attachments = _root_.scala.collection.Seq.empty)
    def addAttachments(__vs: _root_.scala.Predef.String*): Message = addAllAttachments(__vs)
    def addAllAttachments(__vs: TraversableOnce[_root_.scala.Predef.String]): Message = copy(attachments = attachments ++ __vs)
    def withAttachments(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Message = copy(attachments = __v)
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Message = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Message = copy(created = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => messageId.orNull
        case 3 => accountId.orNull
        case 4 => conversationId.orNull
        case 5 => fromAddr.orNull
        case 6 => toAddr.orNull
        case 7 => subject.orNull
        case 8 => body.orNull
        case 9 => header.orNull
        case 10 => attachments
        case 11 => created.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => messageId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => fromAddr.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => toAddr.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => subject.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => body.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => header.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PRepeated(attachments.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 11 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = mailkon.Message
}

object Message extends scalapb.GeneratedMessageCompanion[mailkon.Message] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[mailkon.Message] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): mailkon.Message = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    mailkon.Message(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[mailkon.Message] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      mailkon.Message(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MailkonProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MailkonProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = mailkon.Message(
  )
  implicit class MessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, mailkon.Message]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, mailkon.Message](_l) {
    def messageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMessageId)((c_, f_) => c_.copy(messageId = Option(f_)))
    def optionalMessageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.messageId)((c_, f_) => c_.copy(messageId = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def fromAddr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFromAddr)((c_, f_) => c_.copy(fromAddr = Option(f_)))
    def optionalFromAddr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fromAddr)((c_, f_) => c_.copy(fromAddr = f_))
    def toAddr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getToAddr)((c_, f_) => c_.copy(toAddr = Option(f_)))
    def optionalToAddr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.toAddr)((c_, f_) => c_.copy(toAddr = f_))
    def subject: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubject)((c_, f_) => c_.copy(subject = Option(f_)))
    def optionalSubject: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.subject)((c_, f_) => c_.copy(subject = f_))
    def body: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getBody)((c_, f_) => c_.copy(body = Option(f_)))
    def optionalBody: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.body)((c_, f_) => c_.copy(body = f_))
    def header: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getHeader)((c_, f_) => c_.copy(header = Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def attachments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.attachments)((c_, f_) => c_.copy(attachments = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
  }
  final val MESSAGE_ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CONVERSATION_ID_FIELD_NUMBER = 4
  final val FROM_ADDR_FIELD_NUMBER = 5
  final val TO_ADDR_FIELD_NUMBER = 6
  final val SUBJECT_FIELD_NUMBER = 7
  final val BODY_FIELD_NUMBER = 8
  final val HEADER_FIELD_NUMBER = 9
  final val ATTACHMENTS_FIELD_NUMBER = 10
  final val CREATED_FIELD_NUMBER = 11
}
