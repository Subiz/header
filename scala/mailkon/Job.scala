// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package mailkon

@SerialVersionUID(0L)
final case class Job(
    topic: scala.Option[_root_.scala.Predef.String] = None,
    partition: scala.Option[_root_.scala.Int] = None,
    offset: scala.Option[_root_.scala.Long] = None,
    contentType: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    requestId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Job] with scalapb.lenses.Updatable[Job] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (topic.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, topic.get) }
      if (partition.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, partition.get) }
      if (offset.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, offset.get) }
      if (contentType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, contentType.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, `type`.get) }
      if (requestId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, requestId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      topic.foreach { __v =>
        _output__.writeString(2, __v)
      };
      partition.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      offset.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      contentType.foreach { __v =>
        _output__.writeString(5, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(6, __v)
      };
      requestId.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): mailkon.Job = {
      var __topic = this.topic
      var __partition = this.partition
      var __offset = this.offset
      var __contentType = this.contentType
      var __type = this.`type`
      var __requestId = this.requestId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __topic = Option(_input__.readString())
          case 24 =>
            __partition = Option(_input__.readInt32())
          case 32 =>
            __offset = Option(_input__.readInt64())
          case 42 =>
            __contentType = Option(_input__.readString())
          case 50 =>
            __type = Option(_input__.readString())
          case 58 =>
            __requestId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      mailkon.Job(
          topic = __topic,
          partition = __partition,
          offset = __offset,
          contentType = __contentType,
          `type` = __type,
          requestId = __requestId
      )
    }
    def getTopic: _root_.scala.Predef.String = topic.getOrElse("")
    def clearTopic: Job = copy(topic = None)
    def withTopic(__v: _root_.scala.Predef.String): Job = copy(topic = Option(__v))
    def getPartition: _root_.scala.Int = partition.getOrElse(0)
    def clearPartition: Job = copy(partition = None)
    def withPartition(__v: _root_.scala.Int): Job = copy(partition = Option(__v))
    def getOffset: _root_.scala.Long = offset.getOrElse(0L)
    def clearOffset: Job = copy(offset = None)
    def withOffset(__v: _root_.scala.Long): Job = copy(offset = Option(__v))
    def getContentType: _root_.scala.Predef.String = contentType.getOrElse("")
    def clearContentType: Job = copy(contentType = None)
    def withContentType(__v: _root_.scala.Predef.String): Job = copy(contentType = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Job = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Job = copy(`type` = Option(__v))
    def getRequestId: _root_.scala.Predef.String = requestId.getOrElse("")
    def clearRequestId: Job = copy(requestId = None)
    def withRequestId(__v: _root_.scala.Predef.String): Job = copy(requestId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => topic.orNull
        case 3 => partition.orNull
        case 4 => offset.orNull
        case 5 => contentType.orNull
        case 6 => `type`.orNull
        case 7 => requestId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => topic.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => partition.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => offset.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => contentType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => requestId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = mailkon.Job
}

object Job extends scalapb.GeneratedMessageCompanion[mailkon.Job] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[mailkon.Job] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): mailkon.Job = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    mailkon.Job(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[mailkon.Job] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      mailkon.Job(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MailkonProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MailkonProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = mailkon.Job(
  )
  implicit class JobLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, mailkon.Job]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, mailkon.Job](_l) {
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTopic)((c_, f_) => c_.copy(topic = Option(f_)))
    def optionalTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def partition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPartition)((c_, f_) => c_.copy(partition = Option(f_)))
    def optionalPartition: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.partition)((c_, f_) => c_.copy(partition = f_))
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getOffset)((c_, f_) => c_.copy(offset = Option(f_)))
    def optionalOffset: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def contentType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getContentType)((c_, f_) => c_.copy(contentType = Option(f_)))
    def optionalContentType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.contentType)((c_, f_) => c_.copy(contentType = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def requestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRequestId)((c_, f_) => c_.copy(requestId = Option(f_)))
    def optionalRequestId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.requestId)((c_, f_) => c_.copy(requestId = f_))
  }
  final val TOPIC_FIELD_NUMBER = 2
  final val PARTITION_FIELD_NUMBER = 3
  final val OFFSET_FIELD_NUMBER = 4
  final val CONTENT_TYPE_FIELD_NUMBER = 5
  final val TYPE_FIELD_NUMBER = 6
  final val REQUEST_ID_FIELD_NUMBER = 7
}
