// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package mailkon

@SerialVersionUID(0L)
final case class Domain(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    domain: scala.Option[_root_.scala.Predef.String] = None,
    updated: scala.Option[_root_.scala.Long] = None,
    dnstype: scala.Option[_root_.scala.Predef.String] = None,
    data: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Domain] with scalapb.lenses.Updatable[Domain] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, accountId.get) }
      if (domain.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, domain.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, updated.get) }
      if (dnstype.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, dnstype.get) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, data.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(1, __v)
      };
      domain.foreach { __v =>
        _output__.writeString(2, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      dnstype.foreach { __v =>
        _output__.writeString(4, __v)
      };
      data.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): mailkon.Domain = {
      var __accountId = this.accountId
      var __domain = this.domain
      var __updated = this.updated
      var __dnstype = this.dnstype
      var __data = this.data
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __accountId = Option(_input__.readString())
          case 18 =>
            __domain = Option(_input__.readString())
          case 24 =>
            __updated = Option(_input__.readInt64())
          case 34 =>
            __dnstype = Option(_input__.readString())
          case 42 =>
            __data = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      mailkon.Domain(
          accountId = __accountId,
          domain = __domain,
          updated = __updated,
          dnstype = __dnstype,
          data = __data
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Domain = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Domain = copy(accountId = Option(__v))
    def getDomain: _root_.scala.Predef.String = domain.getOrElse("")
    def clearDomain: Domain = copy(domain = None)
    def withDomain(__v: _root_.scala.Predef.String): Domain = copy(domain = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: Domain = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): Domain = copy(updated = Option(__v))
    def getDnstype: _root_.scala.Predef.String = dnstype.getOrElse("")
    def clearDnstype: Domain = copy(dnstype = None)
    def withDnstype(__v: _root_.scala.Predef.String): Domain = copy(dnstype = Option(__v))
    def getData: _root_.scala.Predef.String = data.getOrElse("")
    def clearData: Domain = copy(data = None)
    def withData(__v: _root_.scala.Predef.String): Domain = copy(data = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => accountId.orNull
        case 2 => domain.orNull
        case 3 => updated.orNull
        case 4 => dnstype.orNull
        case 5 => data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => domain.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => dnstype.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = mailkon.Domain
}

object Domain extends scalapb.GeneratedMessageCompanion[mailkon.Domain] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[mailkon.Domain] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): mailkon.Domain = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    mailkon.Domain(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[mailkon.Domain] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      mailkon.Domain(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MailkonProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MailkonProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = mailkon.Domain(
  )
  implicit class DomainLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, mailkon.Domain]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, mailkon.Domain](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def domain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDomain)((c_, f_) => c_.copy(domain = Option(f_)))
    def optionalDomain: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.domain)((c_, f_) => c_.copy(domain = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
    def dnstype: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDnstype)((c_, f_) => c_.copy(dnstype = Option(f_)))
    def optionalDnstype: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.dnstype)((c_, f_) => c_.copy(dnstype = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 1
  final val DOMAIN_FIELD_NUMBER = 2
  final val UPDATED_FIELD_NUMBER = 3
  final val DNSTYPE_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
}
