// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package template

@SerialVersionUID(0L)
final case class NotificationTemplate(
    image: _root_.scala.Predef.String = "",
    footer: _root_.scala.Predef.String = "",
    body: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[NotificationTemplate] with scalapb.lenses.Updatable[NotificationTemplate] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (image != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, image) }
      if (footer != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, footer) }
      if (body != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, body) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = image
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = footer
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = body
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): template.NotificationTemplate = {
      var __image = this.image
      var __footer = this.footer
      var __body = this.body
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __image = _input__.readString()
          case 18 =>
            __footer = _input__.readString()
          case 26 =>
            __body = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      template.NotificationTemplate(
          image = __image,
          footer = __footer,
          body = __body
      )
    }
    def withImage(__v: _root_.scala.Predef.String): NotificationTemplate = copy(image = __v)
    def withFooter(__v: _root_.scala.Predef.String): NotificationTemplate = copy(footer = __v)
    def withBody(__v: _root_.scala.Predef.String): NotificationTemplate = copy(body = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = image
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = footer
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = body
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(image)
        case 2 => _root_.scalapb.descriptors.PString(footer)
        case 3 => _root_.scalapb.descriptors.PString(body)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = template.NotificationTemplate
}

object NotificationTemplate extends scalapb.GeneratedMessageCompanion[template.NotificationTemplate] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[template.NotificationTemplate] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): template.NotificationTemplate = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    template.NotificationTemplate(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[template.NotificationTemplate] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      template.NotificationTemplate(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TemplateProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TemplateProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = template.NotificationTemplate(
  )
  implicit class NotificationTemplateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, template.NotificationTemplate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, template.NotificationTemplate](_l) {
    def image: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.image)((c_, f_) => c_.copy(image = f_))
    def footer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.footer)((c_, f_) => c_.copy(footer = f_))
    def body: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.body)((c_, f_) => c_.copy(body = f_))
  }
  final val IMAGE_FIELD_NUMBER = 1
  final val FOOTER_FIELD_NUMBER = 2
  final val BODY_FIELD_NUMBER = 3
}
