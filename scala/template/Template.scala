// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package template

@SerialVersionUID(0L)
final case class Template(
    id: _root_.scala.Predef.String = "",
    language: _root_.scala.Predef.String = "",
    `type`: template.Type = template.Type.Email,
    email: scala.Option[template.EmailTemplate] = None,
    webPush: scala.Option[template.WebPushTemplate] = None,
    notification: scala.Option[template.NotificationTemplate] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Template] with scalapb.lenses.Updatable[Template] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id) }
      if (language != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, language) }
      if (`type` != template.Type.Email) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, `type`.value) }
      if (email.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(email.get.serializedSize) + email.get.serializedSize }
      if (webPush.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(webPush.get.serializedSize) + webPush.get.serializedSize }
      if (notification.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(notification.get.serializedSize) + notification.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = language
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = `type`
        if (__v != template.Type.Email) {
          _output__.writeEnum(3, __v.value)
        }
      };
      email.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      webPush.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      notification.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): template.Template = {
      var __id = this.id
      var __language = this.language
      var __type = this.`type`
      var __email = this.email
      var __webPush = this.webPush
      var __notification = this.notification
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __language = _input__.readString()
          case 24 =>
            __type = template.Type.fromValue(_input__.readEnum())
          case 66 =>
            __email = Option(_root_.scalapb.LiteParser.readMessage(_input__, __email.getOrElse(template.EmailTemplate.defaultInstance)))
          case 74 =>
            __webPush = Option(_root_.scalapb.LiteParser.readMessage(_input__, __webPush.getOrElse(template.WebPushTemplate.defaultInstance)))
          case 82 =>
            __notification = Option(_root_.scalapb.LiteParser.readMessage(_input__, __notification.getOrElse(template.NotificationTemplate.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      template.Template(
          id = __id,
          language = __language,
          `type` = __type,
          email = __email,
          webPush = __webPush,
          notification = __notification
      )
    }
    def withId(__v: _root_.scala.Predef.String): Template = copy(id = __v)
    def withLanguage(__v: _root_.scala.Predef.String): Template = copy(language = __v)
    def withType(__v: template.Type): Template = copy(`type` = __v)
    def getEmail: template.EmailTemplate = email.getOrElse(template.EmailTemplate.defaultInstance)
    def clearEmail: Template = copy(email = None)
    def withEmail(__v: template.EmailTemplate): Template = copy(email = Option(__v))
    def getWebPush: template.WebPushTemplate = webPush.getOrElse(template.WebPushTemplate.defaultInstance)
    def clearWebPush: Template = copy(webPush = None)
    def withWebPush(__v: template.WebPushTemplate): Template = copy(webPush = Option(__v))
    def getNotification: template.NotificationTemplate = notification.getOrElse(template.NotificationTemplate.defaultInstance)
    def clearNotification: Template = copy(notification = None)
    def withNotification(__v: template.NotificationTemplate): Template = copy(notification = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = language
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 8 => email.orNull
        case 9 => webPush.orNull
        case 10 => notification.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PString(language)
        case 3 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 8 => email.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => webPush.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => notification.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = template.Template
}

object Template extends scalapb.GeneratedMessageCompanion[template.Template] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[template.Template] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): template.Template = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    template.Template(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      template.Type.fromValue(__fieldsMap.getOrElse(__fields.get(2), template.Type.Email.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[template.EmailTemplate]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[template.WebPushTemplate]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[template.NotificationTemplate]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[template.Template] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      template.Template(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        template.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(template.Type.Email.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[template.EmailTemplate]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[template.WebPushTemplate]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[template.NotificationTemplate]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TemplateProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TemplateProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 8 => __out = template.EmailTemplate
      case 9 => __out = template.WebPushTemplate
      case 10 => __out = template.NotificationTemplate
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => template.Type
    }
  }
  lazy val defaultInstance = template.Template(
  )
  implicit class TemplateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, template.Template]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, template.Template](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.language)((c_, f_) => c_.copy(language = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, template.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, template.EmailTemplate] = field(_.getEmail)((c_, f_) => c_.copy(email = Option(f_)))
    def optionalEmail: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[template.EmailTemplate]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def webPush: _root_.scalapb.lenses.Lens[UpperPB, template.WebPushTemplate] = field(_.getWebPush)((c_, f_) => c_.copy(webPush = Option(f_)))
    def optionalWebPush: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[template.WebPushTemplate]] = field(_.webPush)((c_, f_) => c_.copy(webPush = f_))
    def notification: _root_.scalapb.lenses.Lens[UpperPB, template.NotificationTemplate] = field(_.getNotification)((c_, f_) => c_.copy(notification = Option(f_)))
    def optionalNotification: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[template.NotificationTemplate]] = field(_.notification)((c_, f_) => c_.copy(notification = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val LANGUAGE_FIELD_NUMBER = 2
  final val TYPE_FIELD_NUMBER = 3
  final val EMAIL_FIELD_NUMBER = 8
  final val WEBPUSH_FIELD_NUMBER = 9
  final val NOTIFICATION_FIELD_NUMBER = 10
}
