// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package logan

@SerialVersionUID(0L)
final case class Log(
    ctx: scala.Option[common.Context] = None,
    traceId: _root_.scala.Predef.String = "",
    created: _root_.scala.Long = 0L,
    level: _root_.scala.Predef.String = "",
    tags: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    debug: scala.Option[logan.Debug] = None,
    message: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends scalapb.GeneratedMessage with scalapb.Message[Log] with scalapb.lenses.Updatable[Log] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (traceId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, traceId) }
      if (created != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, created) }
      if (level != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, level) }
      tags.foreach(tags => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, tags))
      if (debug.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(debug.get.serializedSize) + debug.get.serializedSize }
      if (message != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(24, message) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = traceId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      tags.foreach { __v =>
        _output__.writeString(4, __v)
      };
      {
        val __v = created
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = level
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
      debug.foreach { __v =>
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = message
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(24, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): logan.Log = {
      var __ctx = this.ctx
      var __traceId = this.traceId
      var __created = this.created
      var __level = this.level
      val __tags = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.tags)
      var __debug = this.debug
      var __message = this.message
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __traceId = _input__.readString()
          case 64 =>
            __created = _input__.readInt64()
          case 82 =>
            __level = _input__.readString()
          case 34 =>
            __tags += _input__.readString()
          case 178 =>
            __debug = Option(_root_.scalapb.LiteParser.readMessage(_input__, __debug.getOrElse(logan.Debug.defaultInstance)))
          case 194 =>
            __message = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      logan.Log(
          ctx = __ctx,
          traceId = __traceId,
          created = __created,
          level = __level,
          tags = __tags.result(),
          debug = __debug,
          message = __message
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Log = copy(ctx = None)
    def withCtx(__v: common.Context): Log = copy(ctx = Option(__v))
    def withTraceId(__v: _root_.scala.Predef.String): Log = copy(traceId = __v)
    def withCreated(__v: _root_.scala.Long): Log = copy(created = __v)
    def withLevel(__v: _root_.scala.Predef.String): Log = copy(level = __v)
    def clearTags = copy(tags = _root_.scala.collection.Seq.empty)
    def addTags(__vs: _root_.scala.Predef.String*): Log = addAllTags(__vs)
    def addAllTags(__vs: TraversableOnce[_root_.scala.Predef.String]): Log = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Log = copy(tags = __v)
    def getDebug: logan.Debug = debug.getOrElse(logan.Debug.defaultInstance)
    def clearDebug: Log = copy(debug = None)
    def withDebug(__v: logan.Debug): Log = copy(debug = Option(__v))
    def withMessage(__v: _root_.com.google.protobuf.ByteString): Log = copy(message = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => {
          val __t = traceId
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = created
          if (__t != 0L) __t else null
        }
        case 10 => {
          val __t = level
          if (__t != "") __t else null
        }
        case 4 => tags
        case 22 => debug.orNull
        case 24 => {
          val __t = message
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(traceId)
        case 8 => _root_.scalapb.descriptors.PLong(created)
        case 10 => _root_.scalapb.descriptors.PString(level)
        case 4 => _root_.scalapb.descriptors.PRepeated(tags.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 22 => debug.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => _root_.scalapb.descriptors.PByteString(message)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = logan.Log
}

object Log extends scalapb.GeneratedMessageCompanion[logan.Log] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[logan.Log] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): logan.Log = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    logan.Log(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[logan.Debug]],
      __fieldsMap.getOrElse(__fields.get(6), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[logan.Log] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      logan.Log(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[logan.Debug]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LoganProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LoganProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
      case 22 => __out = logan.Debug
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = logan.Log(
  )
  implicit class LogLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, logan.Log]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, logan.Log](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def traceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.traceId)((c_, f_) => c_.copy(traceId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def level: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.level)((c_, f_) => c_.copy(level = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def debug: _root_.scalapb.lenses.Lens[UpperPB, logan.Debug] = field(_.getDebug)((c_, f_) => c_.copy(debug = Option(f_)))
    def optionalDebug: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[logan.Debug]] = field(_.debug)((c_, f_) => c_.copy(debug = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TRACE_ID_FIELD_NUMBER = 2
  final val CREATED_FIELD_NUMBER = 8
  final val LEVEL_FIELD_NUMBER = 10
  final val TAGS_FIELD_NUMBER = 4
  final val DEBUG_FIELD_NUMBER = 22
  final val MESSAGE_FIELD_NUMBER = 24
}
