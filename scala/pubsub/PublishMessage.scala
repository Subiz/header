// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pubsub

/** @param userIdsFilter
  *   user_ids bloom filter: only those users can get message
  * @param filterItemBitSize
  *   300
  * @param filterHashCount
  *   5
  * @param negUserIdsFilter
  *   negative user_ids bloom filter: those users wont get the message
  */
@SerialVersionUID(0L)
final case class PublishMessage(
    ctx: scala.Option[common.Context] = None,
    topics: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    payload: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    userIdsFilter: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    filterItemBitSize: _root_.scala.Int = 0,
    filterHashCount: _root_.scala.Int = 0,
    negUserIdsFilter: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends scalapb.GeneratedMessage with scalapb.Message[PublishMessage] with scalapb.lenses.Updatable[PublishMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      topics.foreach(topics => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, topics))
      if (payload != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, payload) }
      if (userIdsFilter != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, userIdsFilter) }
      if (filterItemBitSize != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, filterItemBitSize) }
      if (filterHashCount != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, filterHashCount) }
      if (negUserIdsFilter != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(6, negUserIdsFilter) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      topics.foreach { __v =>
        _output__.writeString(2, __v)
      };
      {
        val __v = payload
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(4, __v)
        }
      };
      {
        val __v = userIdsFilter
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(5, __v)
        }
      };
      {
        val __v = negUserIdsFilter
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(6, __v)
        }
      };
      {
        val __v = filterItemBitSize
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
      {
        val __v = filterHashCount
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): pubsub.PublishMessage = {
      var __ctx = this.ctx
      val __topics = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.topics)
      var __payload = this.payload
      var __userIdsFilter = this.userIdsFilter
      var __filterItemBitSize = this.filterItemBitSize
      var __filterHashCount = this.filterHashCount
      var __negUserIdsFilter = this.negUserIdsFilter
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 18 =>
            __topics += _input__.readString()
          case 34 =>
            __payload = _input__.readBytes()
          case 42 =>
            __userIdsFilter = _input__.readBytes()
          case 56 =>
            __filterItemBitSize = _input__.readInt32()
          case 64 =>
            __filterHashCount = _input__.readInt32()
          case 50 =>
            __negUserIdsFilter = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      pubsub.PublishMessage(
          ctx = __ctx,
          topics = __topics.result(),
          payload = __payload,
          userIdsFilter = __userIdsFilter,
          filterItemBitSize = __filterItemBitSize,
          filterHashCount = __filterHashCount,
          negUserIdsFilter = __negUserIdsFilter
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: PublishMessage = copy(ctx = None)
    def withCtx(__v: common.Context): PublishMessage = copy(ctx = Option(__v))
    def clearTopics = copy(topics = _root_.scala.collection.Seq.empty)
    def addTopics(__vs: _root_.scala.Predef.String*): PublishMessage = addAllTopics(__vs)
    def addAllTopics(__vs: TraversableOnce[_root_.scala.Predef.String]): PublishMessage = copy(topics = topics ++ __vs)
    def withTopics(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): PublishMessage = copy(topics = __v)
    def withPayload(__v: _root_.com.google.protobuf.ByteString): PublishMessage = copy(payload = __v)
    def withUserIdsFilter(__v: _root_.com.google.protobuf.ByteString): PublishMessage = copy(userIdsFilter = __v)
    def withFilterItemBitSize(__v: _root_.scala.Int): PublishMessage = copy(filterItemBitSize = __v)
    def withFilterHashCount(__v: _root_.scala.Int): PublishMessage = copy(filterHashCount = __v)
    def withNegUserIdsFilter(__v: _root_.com.google.protobuf.ByteString): PublishMessage = copy(negUserIdsFilter = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 2 => topics
        case 4 => {
          val __t = payload
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = userIdsFilter
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 7 => {
          val __t = filterItemBitSize
          if (__t != 0) __t else null
        }
        case 8 => {
          val __t = filterHashCount
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = negUserIdsFilter
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(topics.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PByteString(payload)
        case 5 => _root_.scalapb.descriptors.PByteString(userIdsFilter)
        case 7 => _root_.scalapb.descriptors.PInt(filterItemBitSize)
        case 8 => _root_.scalapb.descriptors.PInt(filterHashCount)
        case 6 => _root_.scalapb.descriptors.PByteString(negUserIdsFilter)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = pubsub.PublishMessage
}

object PublishMessage extends scalapb.GeneratedMessageCompanion[pubsub.PublishMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[pubsub.PublishMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): pubsub.PublishMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    pubsub.PublishMessage(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(6), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[pubsub.PublishMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      pubsub.PublishMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = pubsub.PublishMessage(
  )
  implicit class PublishMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, pubsub.PublishMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, pubsub.PublishMessage](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def topics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.topics)((c_, f_) => c_.copy(topics = f_))
    def payload: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
    def userIdsFilter: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.userIdsFilter)((c_, f_) => c_.copy(userIdsFilter = f_))
    def filterItemBitSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.filterItemBitSize)((c_, f_) => c_.copy(filterItemBitSize = f_))
    def filterHashCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.filterHashCount)((c_, f_) => c_.copy(filterHashCount = f_))
    def negUserIdsFilter: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.negUserIdsFilter)((c_, f_) => c_.copy(negUserIdsFilter = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val TOPICS_FIELD_NUMBER = 2
  final val PAYLOAD_FIELD_NUMBER = 4
  final val USER_IDS_FILTER_FIELD_NUMBER = 5
  final val FILTER_ITEM_BIT_SIZE_FIELD_NUMBER = 7
  final val FILTER_HASH_COUNT_FIELD_NUMBER = 8
  final val NEG_USER_IDS_FILTER_FIELD_NUMBER = 6
}
