// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scheduler

/** @param callbackTime
  *   callback_time is *nano second*, golang: time.Now().Unix(),
  *   node: new Date() * 1000000
  * @param data
  *   Data is value of kafka event in bytes
  * @param called
  *   internal only
  * @param sec
  *   internal only
  * @param par
  *   internal only
  */
@SerialVersionUID(0L)
final case class Task(
    id: _root_.scala.Predef.String = "",
    callbackTime: _root_.scala.Long = 0L,
    topic: _root_.scala.Predef.String = "",
    data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    key: _root_.scala.Predef.String = "",
    called: _root_.scala.Long = 0L,
    sec: _root_.scala.Long = 0L,
    par: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Task] with scalapb.lenses.Updatable[Task] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id) }
      if (callbackTime != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, callbackTime) }
      if (topic != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, topic) }
      if (data != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, data) }
      if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, key) }
      if (called != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, called) }
      if (sec != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, sec) }
      if (par != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, par) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = callbackTime
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = topic
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = data
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(5, __v)
        }
      };
      {
        val __v = key
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = called
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = sec
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      {
        val __v = par
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scheduler.Task = {
      var __id = this.id
      var __callbackTime = this.callbackTime
      var __topic = this.topic
      var __data = this.data
      var __key = this.key
      var __called = this.called
      var __sec = this.sec
      var __par = this.par
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __id = _input__.readString()
          case 24 =>
            __callbackTime = _input__.readInt64()
          case 34 =>
            __topic = _input__.readString()
          case 42 =>
            __data = _input__.readBytes()
          case 50 =>
            __key = _input__.readString()
          case 64 =>
            __called = _input__.readInt64()
          case 72 =>
            __sec = _input__.readInt64()
          case 82 =>
            __par = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scheduler.Task(
          id = __id,
          callbackTime = __callbackTime,
          topic = __topic,
          data = __data,
          key = __key,
          called = __called,
          sec = __sec,
          par = __par
      )
    }
    def withId(__v: _root_.scala.Predef.String): Task = copy(id = __v)
    def withCallbackTime(__v: _root_.scala.Long): Task = copy(callbackTime = __v)
    def withTopic(__v: _root_.scala.Predef.String): Task = copy(topic = __v)
    def withData(__v: _root_.com.google.protobuf.ByteString): Task = copy(data = __v)
    def withKey(__v: _root_.scala.Predef.String): Task = copy(key = __v)
    def withCalled(__v: _root_.scala.Long): Task = copy(called = __v)
    def withSec(__v: _root_.scala.Long): Task = copy(sec = __v)
    def withPar(__v: _root_.scala.Predef.String): Task = copy(par = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = callbackTime
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = topic
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = data
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 6 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = called
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = sec
          if (__t != 0L) __t else null
        }
        case 10 => {
          val __t = par
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PString(id)
        case 3 => _root_.scalapb.descriptors.PLong(callbackTime)
        case 4 => _root_.scalapb.descriptors.PString(topic)
        case 5 => _root_.scalapb.descriptors.PByteString(data)
        case 6 => _root_.scalapb.descriptors.PString(key)
        case 8 => _root_.scalapb.descriptors.PLong(called)
        case 9 => _root_.scalapb.descriptors.PLong(sec)
        case 10 => _root_.scalapb.descriptors.PString(par)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scheduler.Task
}

object Task extends scalapb.GeneratedMessageCompanion[scheduler.Task] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scheduler.Task] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): scheduler.Task = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scheduler.Task(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(6), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scheduler.Task] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scheduler.Task(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SchedulerProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SchedulerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scheduler.Task(
  )
  implicit class TaskLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scheduler.Task]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scheduler.Task](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def callbackTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.callbackTime)((c_, f_) => c_.copy(callbackTime = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def called: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.called)((c_, f_) => c_.copy(called = f_))
    def sec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sec)((c_, f_) => c_.copy(sec = f_))
    def par: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.par)((c_, f_) => c_.copy(par = f_))
  }
  final val ID_FIELD_NUMBER = 2
  final val CALLBACK_TIME_FIELD_NUMBER = 3
  final val TOPIC_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
  final val KEY_FIELD_NUMBER = 6
  final val CALLED_FIELD_NUMBER = 8
  final val SEC_FIELD_NUMBER = 9
  final val PAR_FIELD_NUMBER = 10
}
