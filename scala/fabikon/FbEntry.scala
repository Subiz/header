// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbEntry(
    id: scala.Option[_root_.scala.Predef.String] = None,
    time: scala.Option[_root_.scala.Long] = None,
    messaging: _root_.scala.collection.Seq[fabikon.FbMessaging] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbEntry] with scalapb.lenses.Updatable[FbEntry] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (time.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, time.get) }
      messaging.foreach(messaging => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(messaging.serializedSize) + messaging.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      time.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      messaging.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbEntry = {
      var __id = this.id
      var __time = this.time
      val __messaging = (_root_.scala.collection.immutable.Vector.newBuilder[fabikon.FbMessaging] ++= this.messaging)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __id = Option(_input__.readString())
          case 40 =>
            __time = Option(_input__.readInt64())
          case 50 =>
            __messaging += _root_.scalapb.LiteParser.readMessage(_input__, fabikon.FbMessaging.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbEntry(
          id = __id,
          time = __time,
          messaging = __messaging.result()
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: FbEntry = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): FbEntry = copy(id = Option(__v))
    def getTime: _root_.scala.Long = time.getOrElse(0L)
    def clearTime: FbEntry = copy(time = None)
    def withTime(__v: _root_.scala.Long): FbEntry = copy(time = Option(__v))
    def clearMessaging = copy(messaging = _root_.scala.collection.Seq.empty)
    def addMessaging(__vs: fabikon.FbMessaging*): FbEntry = addAllMessaging(__vs)
    def addAllMessaging(__vs: TraversableOnce[fabikon.FbMessaging]): FbEntry = copy(messaging = messaging ++ __vs)
    def withMessaging(__v: _root_.scala.collection.Seq[fabikon.FbMessaging]): FbEntry = copy(messaging = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 5 => time.orNull
        case 6 => messaging
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => time.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(messaging.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbEntry
}

object FbEntry extends scalapb.GeneratedMessageCompanion[fabikon.FbEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbEntry] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbEntry = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbEntry(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[fabikon.FbMessaging]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbEntry(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[fabikon.FbMessaging]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = fabikon.FbMessaging
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbEntry(
  )
  implicit class FbEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbEntry](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def time: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getTime)((c_, f_) => c_.copy(time = Option(f_)))
    def optionalTime: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.time)((c_, f_) => c_.copy(time = f_))
    def messaging: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[fabikon.FbMessaging]] = field(_.messaging)((c_, f_) => c_.copy(messaging = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val TIME_FIELD_NUMBER = 5
  final val MESSAGING_FIELD_NUMBER = 6
}
