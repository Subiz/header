// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbPayload(
    url: scala.Option[_root_.scala.Predef.String] = None,
    isReuseable: scala.Option[_root_.scala.Boolean] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbPayload] with scalapb.lenses.Updatable[FbPayload] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, url.get) }
      if (isReuseable.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, isReuseable.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      url.foreach { __v =>
        _output__.writeString(2, __v)
      };
      isReuseable.foreach { __v =>
        _output__.writeBool(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbPayload = {
      var __url = this.url
      var __isReuseable = this.isReuseable
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __url = Option(_input__.readString())
          case 24 =>
            __isReuseable = Option(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbPayload(
          url = __url,
          isReuseable = __isReuseable
      )
    }
    def getUrl: _root_.scala.Predef.String = url.getOrElse("")
    def clearUrl: FbPayload = copy(url = None)
    def withUrl(__v: _root_.scala.Predef.String): FbPayload = copy(url = Option(__v))
    def getIsReuseable: _root_.scala.Boolean = isReuseable.getOrElse(false)
    def clearIsReuseable: FbPayload = copy(isReuseable = None)
    def withIsReuseable(__v: _root_.scala.Boolean): FbPayload = copy(isReuseable = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => url.orNull
        case 3 => isReuseable.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => isReuseable.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbPayload
}

object FbPayload extends scalapb.GeneratedMessageCompanion[fabikon.FbPayload] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbPayload] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbPayload = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbPayload(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbPayload] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbPayload(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbPayload(
  )
  implicit class FbPayloadLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbPayload]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbPayload](_l) {
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getUrl)((c_, f_) => c_.copy(url = Option(f_)))
    def optionalUrl: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def isReuseable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getIsReuseable)((c_, f_) => c_.copy(isReuseable = Option(f_)))
    def optionalIsReuseable: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.isReuseable)((c_, f_) => c_.copy(isReuseable = f_))
  }
  final val URL_FIELD_NUMBER = 2
  final val IS_REUSEABLE_FIELD_NUMBER = 3
}
