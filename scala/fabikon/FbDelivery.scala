// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbDelivery(
    mids: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    watermark: scala.Option[_root_.scala.Long] = None,
    seq: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbDelivery] with scalapb.lenses.Updatable[FbDelivery] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      mids.foreach(mids => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, mids))
      if (watermark.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, watermark.get) }
      if (seq.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, seq.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      mids.foreach { __v =>
        _output__.writeString(2, __v)
      };
      watermark.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      seq.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbDelivery = {
      val __mids = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.mids)
      var __watermark = this.watermark
      var __seq = this.seq
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __mids += _input__.readString()
          case 24 =>
            __watermark = Option(_input__.readInt64())
          case 32 =>
            __seq = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbDelivery(
          mids = __mids.result(),
          watermark = __watermark,
          seq = __seq
      )
    }
    def clearMids = copy(mids = _root_.scala.collection.Seq.empty)
    def addMids(__vs: _root_.scala.Predef.String*): FbDelivery = addAllMids(__vs)
    def addAllMids(__vs: TraversableOnce[_root_.scala.Predef.String]): FbDelivery = copy(mids = mids ++ __vs)
    def withMids(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): FbDelivery = copy(mids = __v)
    def getWatermark: _root_.scala.Long = watermark.getOrElse(0L)
    def clearWatermark: FbDelivery = copy(watermark = None)
    def withWatermark(__v: _root_.scala.Long): FbDelivery = copy(watermark = Option(__v))
    def getSeq: _root_.scala.Int = seq.getOrElse(0)
    def clearSeq: FbDelivery = copy(seq = None)
    def withSeq(__v: _root_.scala.Int): FbDelivery = copy(seq = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => mids
        case 3 => watermark.orNull
        case 4 => seq.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PRepeated(mids.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 3 => watermark.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => seq.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbDelivery
}

object FbDelivery extends scalapb.GeneratedMessageCompanion[fabikon.FbDelivery] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbDelivery] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbDelivery = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbDelivery(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbDelivery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbDelivery(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbDelivery(
  )
  implicit class FbDeliveryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbDelivery]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbDelivery](_l) {
    def mids: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.mids)((c_, f_) => c_.copy(mids = f_))
    def watermark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getWatermark)((c_, f_) => c_.copy(watermark = Option(f_)))
    def optionalWatermark: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.watermark)((c_, f_) => c_.copy(watermark = f_))
    def seq: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getSeq)((c_, f_) => c_.copy(seq = Option(f_)))
    def optionalSeq: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.seq)((c_, f_) => c_.copy(seq = f_))
  }
  final val MIDS_FIELD_NUMBER = 2
  final val WATERMARK_FIELD_NUMBER = 3
  final val SEQ_FIELD_NUMBER = 4
}
