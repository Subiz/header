// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbAttachment(
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    payload: scala.Option[fabikon.FbPayload] = None,
    title: scala.Option[_root_.scala.Predef.String] = None,
    uRL: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbAttachment] with scalapb.lenses.Updatable[FbAttachment] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, `type`.get) }
      if (payload.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(payload.get.serializedSize) + payload.get.serializedSize }
      if (title.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, title.get) }
      if (uRL.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, uRL.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.foreach { __v =>
        _output__.writeString(2, __v)
      };
      payload.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      title.foreach { __v =>
        _output__.writeString(4, __v)
      };
      uRL.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbAttachment = {
      var __type = this.`type`
      var __payload = this.payload
      var __title = this.title
      var __uRL = this.uRL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __type = Option(_input__.readString())
          case 26 =>
            __payload = Option(_root_.scalapb.LiteParser.readMessage(_input__, __payload.getOrElse(fabikon.FbPayload.defaultInstance)))
          case 34 =>
            __title = Option(_input__.readString())
          case 42 =>
            __uRL = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbAttachment(
          `type` = __type,
          payload = __payload,
          title = __title,
          uRL = __uRL
      )
    }
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: FbAttachment = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): FbAttachment = copy(`type` = Option(__v))
    def getPayload: fabikon.FbPayload = payload.getOrElse(fabikon.FbPayload.defaultInstance)
    def clearPayload: FbAttachment = copy(payload = None)
    def withPayload(__v: fabikon.FbPayload): FbAttachment = copy(payload = Option(__v))
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: FbAttachment = copy(title = None)
    def withTitle(__v: _root_.scala.Predef.String): FbAttachment = copy(title = Option(__v))
    def getURL: _root_.scala.Predef.String = uRL.getOrElse("")
    def clearURL: FbAttachment = copy(uRL = None)
    def withURL(__v: _root_.scala.Predef.String): FbAttachment = copy(uRL = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => `type`.orNull
        case 3 => payload.orNull
        case 4 => title.orNull
        case 5 => uRL.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => payload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => title.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => uRL.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbAttachment
}

object FbAttachment extends scalapb.GeneratedMessageCompanion[fabikon.FbAttachment] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbAttachment] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbAttachment = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbAttachment(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[fabikon.FbPayload]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbAttachment] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbAttachment(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[fabikon.FbPayload]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = fabikon.FbPayload
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbAttachment(
  )
  implicit class FbAttachmentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbAttachment]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbAttachment](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def payload: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbPayload] = field(_.getPayload)((c_, f_) => c_.copy(payload = Option(f_)))
    def optionalPayload: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbPayload]] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def uRL: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getURL)((c_, f_) => c_.copy(uRL = Option(f_)))
    def optionalURL: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.uRL)((c_, f_) => c_.copy(uRL = f_))
  }
  final val TYPE_FIELD_NUMBER = 2
  final val PAYLOAD_FIELD_NUMBER = 3
  final val TITLE_FIELD_NUMBER = 4
  final val URL_FIELD_NUMBER = 5
}
