// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class UserAvail(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    fbuserId: scala.Option[_root_.scala.Predef.String] = None,
    availability: scala.Option[_root_.scala.Boolean] = None,
    updated: scala.Option[_root_.scala.Long] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserAvail] with scalapb.lenses.Updatable[UserAvail] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (fbuserId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, fbuserId.get) }
      if (availability.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, availability.get) }
      if (updated.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, updated.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      fbuserId.foreach { __v =>
        _output__.writeString(5, __v)
      };
      availability.foreach { __v =>
        _output__.writeBool(6, __v)
      };
      updated.foreach { __v =>
        _output__.writeInt64(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.UserAvail = {
      var __accountId = this.accountId
      var __fbuserId = this.fbuserId
      var __availability = this.availability
      var __updated = this.updated
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __accountId = Option(_input__.readString())
          case 42 =>
            __fbuserId = Option(_input__.readString())
          case 48 =>
            __availability = Option(_input__.readBool())
          case 56 =>
            __updated = Option(_input__.readInt64())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.UserAvail(
          accountId = __accountId,
          fbuserId = __fbuserId,
          availability = __availability,
          updated = __updated
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: UserAvail = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): UserAvail = copy(accountId = Option(__v))
    def getFbuserId: _root_.scala.Predef.String = fbuserId.getOrElse("")
    def clearFbuserId: UserAvail = copy(fbuserId = None)
    def withFbuserId(__v: _root_.scala.Predef.String): UserAvail = copy(fbuserId = Option(__v))
    def getAvailability: _root_.scala.Boolean = availability.getOrElse(false)
    def clearAvailability: UserAvail = copy(availability = None)
    def withAvailability(__v: _root_.scala.Boolean): UserAvail = copy(availability = Option(__v))
    def getUpdated: _root_.scala.Long = updated.getOrElse(0L)
    def clearUpdated: UserAvail = copy(updated = None)
    def withUpdated(__v: _root_.scala.Long): UserAvail = copy(updated = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => accountId.orNull
        case 5 => fbuserId.orNull
        case 6 => availability.orNull
        case 7 => updated.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => fbuserId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => availability.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => updated.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.UserAvail
}

object UserAvail extends scalapb.GeneratedMessageCompanion[fabikon.UserAvail] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.UserAvail] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.UserAvail = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.UserAvail(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Boolean]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.UserAvail] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.UserAvail(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Long]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.UserAvail(
  )
  implicit class UserAvailLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.UserAvail]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.UserAvail](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def fbuserId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFbuserId)((c_, f_) => c_.copy(fbuserId = Option(f_)))
    def optionalFbuserId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fbuserId)((c_, f_) => c_.copy(fbuserId = f_))
    def availability: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getAvailability)((c_, f_) => c_.copy(availability = Option(f_)))
    def optionalAvailability: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.availability)((c_, f_) => c_.copy(availability = f_))
    def updated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getUpdated)((c_, f_) => c_.copy(updated = Option(f_)))
    def optionalUpdated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.updated)((c_, f_) => c_.copy(updated = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val FBUSER_ID_FIELD_NUMBER = 5
  final val AVAILABILITY_FIELD_NUMBER = 6
  final val UPDATED_FIELD_NUMBER = 7
}
