// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbPageEntry(
    name: scala.Option[_root_.scala.Predef.String] = None,
    picture: scala.Option[fabikon.FbPagePicture] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    accessToken: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbPageEntry] with scalapb.lenses.Updatable[FbPageEntry] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name.get) }
      if (picture.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(picture.get.serializedSize) + picture.get.serializedSize }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, id.get) }
      if (accessToken.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, accessToken.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      name.foreach { __v =>
        _output__.writeString(2, __v)
      };
      picture.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      id.foreach { __v =>
        _output__.writeString(5, __v)
      };
      accessToken.foreach { __v =>
        _output__.writeString(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbPageEntry = {
      var __name = this.name
      var __picture = this.picture
      var __id = this.id
      var __accessToken = this.accessToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __name = Option(_input__.readString())
          case 26 =>
            __picture = Option(_root_.scalapb.LiteParser.readMessage(_input__, __picture.getOrElse(fabikon.FbPagePicture.defaultInstance)))
          case 42 =>
            __id = Option(_input__.readString())
          case 50 =>
            __accessToken = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbPageEntry(
          name = __name,
          picture = __picture,
          id = __id,
          accessToken = __accessToken
      )
    }
    def getName: _root_.scala.Predef.String = name.getOrElse("")
    def clearName: FbPageEntry = copy(name = None)
    def withName(__v: _root_.scala.Predef.String): FbPageEntry = copy(name = Option(__v))
    def getPicture: fabikon.FbPagePicture = picture.getOrElse(fabikon.FbPagePicture.defaultInstance)
    def clearPicture: FbPageEntry = copy(picture = None)
    def withPicture(__v: fabikon.FbPagePicture): FbPageEntry = copy(picture = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: FbPageEntry = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): FbPageEntry = copy(id = Option(__v))
    def getAccessToken: _root_.scala.Predef.String = accessToken.getOrElse("")
    def clearAccessToken: FbPageEntry = copy(accessToken = None)
    def withAccessToken(__v: _root_.scala.Predef.String): FbPageEntry = copy(accessToken = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => name.orNull
        case 3 => picture.orNull
        case 5 => id.orNull
        case 6 => accessToken.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => name.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => picture.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => accessToken.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbPageEntry
}

object FbPageEntry extends scalapb.GeneratedMessageCompanion[fabikon.FbPageEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbPageEntry] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbPageEntry = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbPageEntry(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[fabikon.FbPagePicture]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbPageEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbPageEntry(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[fabikon.FbPagePicture]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = fabikon.FbPagePicture
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbPageEntry(
  )
  implicit class FbPageEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbPageEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbPageEntry](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def picture: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbPagePicture] = field(_.getPicture)((c_, f_) => c_.copy(picture = Option(f_)))
    def optionalPicture: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbPagePicture]] = field(_.picture)((c_, f_) => c_.copy(picture = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accessToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccessToken)((c_, f_) => c_.copy(accessToken = Option(f_)))
    def optionalAccessToken: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accessToken)((c_, f_) => c_.copy(accessToken = f_))
  }
  final val NAME_FIELD_NUMBER = 2
  final val PICTURE_FIELD_NUMBER = 3
  final val ID_FIELD_NUMBER = 5
  final val ACCESS_TOKEN_FIELD_NUMBER = 6
}
