// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbWebhookEvent(
    `object`: scala.Option[_root_.scala.Predef.String] = None,
    entry: _root_.scala.collection.Seq[fabikon.FbEntry] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbWebhookEvent] with scalapb.lenses.Updatable[FbWebhookEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (`object`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, `object`.get) }
      entry.foreach(entry => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(entry.serializedSize) + entry.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `object`.foreach { __v =>
        _output__.writeString(2, __v)
      };
      entry.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbWebhookEvent = {
      var __object = this.`object`
      val __entry = (_root_.scala.collection.immutable.Vector.newBuilder[fabikon.FbEntry] ++= this.entry)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __object = Option(_input__.readString())
          case 26 =>
            __entry += _root_.scalapb.LiteParser.readMessage(_input__, fabikon.FbEntry.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbWebhookEvent(
          `object` = __object,
          entry = __entry.result()
      )
    }
    def getObject: _root_.scala.Predef.String = `object`.getOrElse("")
    def clearObject: FbWebhookEvent = copy(`object` = None)
    def withObject(__v: _root_.scala.Predef.String): FbWebhookEvent = copy(`object` = Option(__v))
    def clearEntry = copy(entry = _root_.scala.collection.Seq.empty)
    def addEntry(__vs: fabikon.FbEntry*): FbWebhookEvent = addAllEntry(__vs)
    def addAllEntry(__vs: TraversableOnce[fabikon.FbEntry]): FbWebhookEvent = copy(entry = entry ++ __vs)
    def withEntry(__v: _root_.scala.collection.Seq[fabikon.FbEntry]): FbWebhookEvent = copy(entry = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => `object`.orNull
        case 3 => entry
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => `object`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(entry.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbWebhookEvent
}

object FbWebhookEvent extends scalapb.GeneratedMessageCompanion[fabikon.FbWebhookEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbWebhookEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbWebhookEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbWebhookEvent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[fabikon.FbEntry]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbWebhookEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbWebhookEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[fabikon.FbEntry]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = fabikon.FbEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbWebhookEvent(
  )
  implicit class FbWebhookEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbWebhookEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbWebhookEvent](_l) {
    def `object`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getObject)((c_, f_) => c_.copy(`object` = Option(f_)))
    def optionalObject: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`object`)((c_, f_) => c_.copy(`object` = f_))
    def entry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[fabikon.FbEntry]] = field(_.entry)((c_, f_) => c_.copy(entry = f_))
  }
  final val OBJECT_FIELD_NUMBER = 2
  final val ENTRY_FIELD_NUMBER = 3
}
