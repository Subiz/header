// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FacebookUser(
    firstName: scala.Option[_root_.scala.Predef.String] = None,
    lastName: scala.Option[_root_.scala.Predef.String] = None,
    profilePic: scala.Option[_root_.scala.Predef.String] = None,
    locale: scala.Option[_root_.scala.Predef.String] = None,
    timezone: scala.Option[_root_.scala.Int] = None,
    gender: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FacebookUser] with scalapb.lenses.Updatable[FacebookUser] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (firstName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, firstName.get) }
      if (lastName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, lastName.get) }
      if (profilePic.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, profilePic.get) }
      if (locale.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, locale.get) }
      if (timezone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, timezone.get) }
      if (gender.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, gender.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      firstName.foreach { __v =>
        _output__.writeString(2, __v)
      };
      lastName.foreach { __v =>
        _output__.writeString(4, __v)
      };
      profilePic.foreach { __v =>
        _output__.writeString(5, __v)
      };
      locale.foreach { __v =>
        _output__.writeString(6, __v)
      };
      timezone.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      gender.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FacebookUser = {
      var __firstName = this.firstName
      var __lastName = this.lastName
      var __profilePic = this.profilePic
      var __locale = this.locale
      var __timezone = this.timezone
      var __gender = this.gender
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __firstName = Option(_input__.readString())
          case 34 =>
            __lastName = Option(_input__.readString())
          case 42 =>
            __profilePic = Option(_input__.readString())
          case 50 =>
            __locale = Option(_input__.readString())
          case 56 =>
            __timezone = Option(_input__.readInt32())
          case 66 =>
            __gender = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FacebookUser(
          firstName = __firstName,
          lastName = __lastName,
          profilePic = __profilePic,
          locale = __locale,
          timezone = __timezone,
          gender = __gender
      )
    }
    def getFirstName: _root_.scala.Predef.String = firstName.getOrElse("")
    def clearFirstName: FacebookUser = copy(firstName = None)
    def withFirstName(__v: _root_.scala.Predef.String): FacebookUser = copy(firstName = Option(__v))
    def getLastName: _root_.scala.Predef.String = lastName.getOrElse("")
    def clearLastName: FacebookUser = copy(lastName = None)
    def withLastName(__v: _root_.scala.Predef.String): FacebookUser = copy(lastName = Option(__v))
    def getProfilePic: _root_.scala.Predef.String = profilePic.getOrElse("")
    def clearProfilePic: FacebookUser = copy(profilePic = None)
    def withProfilePic(__v: _root_.scala.Predef.String): FacebookUser = copy(profilePic = Option(__v))
    def getLocale: _root_.scala.Predef.String = locale.getOrElse("")
    def clearLocale: FacebookUser = copy(locale = None)
    def withLocale(__v: _root_.scala.Predef.String): FacebookUser = copy(locale = Option(__v))
    def getTimezone: _root_.scala.Int = timezone.getOrElse(0)
    def clearTimezone: FacebookUser = copy(timezone = None)
    def withTimezone(__v: _root_.scala.Int): FacebookUser = copy(timezone = Option(__v))
    def getGender: _root_.scala.Predef.String = gender.getOrElse("")
    def clearGender: FacebookUser = copy(gender = None)
    def withGender(__v: _root_.scala.Predef.String): FacebookUser = copy(gender = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => firstName.orNull
        case 4 => lastName.orNull
        case 5 => profilePic.orNull
        case 6 => locale.orNull
        case 7 => timezone.orNull
        case 8 => gender.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => firstName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => lastName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => profilePic.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => locale.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => timezone.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => gender.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FacebookUser
}

object FacebookUser extends scalapb.GeneratedMessageCompanion[fabikon.FacebookUser] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FacebookUser] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FacebookUser = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FacebookUser(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FacebookUser] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FacebookUser(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FacebookUser(
  )
  implicit class FacebookUserLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FacebookUser]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FacebookUser](_l) {
    def firstName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFirstName)((c_, f_) => c_.copy(firstName = Option(f_)))
    def optionalFirstName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.firstName)((c_, f_) => c_.copy(firstName = f_))
    def lastName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastName)((c_, f_) => c_.copy(lastName = Option(f_)))
    def optionalLastName: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.lastName)((c_, f_) => c_.copy(lastName = f_))
    def profilePic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getProfilePic)((c_, f_) => c_.copy(profilePic = Option(f_)))
    def optionalProfilePic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.profilePic)((c_, f_) => c_.copy(profilePic = f_))
    def locale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLocale)((c_, f_) => c_.copy(locale = Option(f_)))
    def optionalLocale: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.locale)((c_, f_) => c_.copy(locale = f_))
    def timezone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getTimezone)((c_, f_) => c_.copy(timezone = Option(f_)))
    def optionalTimezone: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.timezone)((c_, f_) => c_.copy(timezone = f_))
    def gender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getGender)((c_, f_) => c_.copy(gender = Option(f_)))
    def optionalGender: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.gender)((c_, f_) => c_.copy(gender = f_))
  }
  final val FIRST_NAME_FIELD_NUMBER = 2
  final val LAST_NAME_FIELD_NUMBER = 4
  final val PROFILE_PIC_FIELD_NUMBER = 5
  final val LOCALE_FIELD_NUMBER = 6
  final val TIMEZONE_FIELD_NUMBER = 7
  final val GENDER_FIELD_NUMBER = 8
}
