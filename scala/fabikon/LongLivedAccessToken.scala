// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class LongLivedAccessToken(
    accessToken: scala.Option[_root_.scala.Predef.String] = None,
    tokenType: scala.Option[_root_.scala.Predef.String] = None,
    expiresIn: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[LongLivedAccessToken] with scalapb.lenses.Updatable[LongLivedAccessToken] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accessToken.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accessToken.get) }
      if (tokenType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, tokenType.get) }
      if (expiresIn.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, expiresIn.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accessToken.foreach { __v =>
        _output__.writeString(2, __v)
      };
      tokenType.foreach { __v =>
        _output__.writeString(3, __v)
      };
      expiresIn.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.LongLivedAccessToken = {
      var __accessToken = this.accessToken
      var __tokenType = this.tokenType
      var __expiresIn = this.expiresIn
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __accessToken = Option(_input__.readString())
          case 26 =>
            __tokenType = Option(_input__.readString())
          case 40 =>
            __expiresIn = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.LongLivedAccessToken(
          accessToken = __accessToken,
          tokenType = __tokenType,
          expiresIn = __expiresIn
      )
    }
    def getAccessToken: _root_.scala.Predef.String = accessToken.getOrElse("")
    def clearAccessToken: LongLivedAccessToken = copy(accessToken = None)
    def withAccessToken(__v: _root_.scala.Predef.String): LongLivedAccessToken = copy(accessToken = Option(__v))
    def getTokenType: _root_.scala.Predef.String = tokenType.getOrElse("")
    def clearTokenType: LongLivedAccessToken = copy(tokenType = None)
    def withTokenType(__v: _root_.scala.Predef.String): LongLivedAccessToken = copy(tokenType = Option(__v))
    def getExpiresIn: _root_.scala.Int = expiresIn.getOrElse(0)
    def clearExpiresIn: LongLivedAccessToken = copy(expiresIn = None)
    def withExpiresIn(__v: _root_.scala.Int): LongLivedAccessToken = copy(expiresIn = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => accessToken.orNull
        case 3 => tokenType.orNull
        case 5 => expiresIn.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => accessToken.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => tokenType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => expiresIn.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.LongLivedAccessToken
}

object LongLivedAccessToken extends scalapb.GeneratedMessageCompanion[fabikon.LongLivedAccessToken] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.LongLivedAccessToken] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.LongLivedAccessToken = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.LongLivedAccessToken(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.LongLivedAccessToken] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.LongLivedAccessToken(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.LongLivedAccessToken(
  )
  implicit class LongLivedAccessTokenLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.LongLivedAccessToken]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.LongLivedAccessToken](_l) {
    def accessToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccessToken)((c_, f_) => c_.copy(accessToken = Option(f_)))
    def optionalAccessToken: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accessToken)((c_, f_) => c_.copy(accessToken = f_))
    def tokenType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTokenType)((c_, f_) => c_.copy(tokenType = Option(f_)))
    def optionalTokenType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.tokenType)((c_, f_) => c_.copy(tokenType = f_))
    def expiresIn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getExpiresIn)((c_, f_) => c_.copy(expiresIn = Option(f_)))
    def optionalExpiresIn: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.expiresIn)((c_, f_) => c_.copy(expiresIn = f_))
  }
  final val ACCESS_TOKEN_FIELD_NUMBER = 2
  final val TOKEN_TYPE_FIELD_NUMBER = 3
  final val EXPIRES_IN_FIELD_NUMBER = 5
}
