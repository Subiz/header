// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbMessaging(
    sender: scala.Option[fabikon.FbSender] = None,
    recipient: scala.Option[fabikon.FbRecipient] = None,
    timestamp: scala.Option[_root_.scala.Long] = None,
    message: scala.Option[fabikon.FbMessage] = None,
    delivery: scala.Option[fabikon.FbDelivery] = None,
    messageType: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbMessaging] with scalapb.lenses.Updatable[FbMessaging] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sender.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sender.get.serializedSize) + sender.get.serializedSize }
      if (recipient.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(recipient.get.serializedSize) + recipient.get.serializedSize }
      if (timestamp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, timestamp.get) }
      if (message.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(message.get.serializedSize) + message.get.serializedSize }
      if (delivery.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(delivery.get.serializedSize) + delivery.get.serializedSize }
      if (messageType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, messageType.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sender.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      recipient.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      timestamp.foreach { __v =>
        _output__.writeInt64(4, __v)
      };
      message.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      delivery.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      messageType.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbMessaging = {
      var __sender = this.sender
      var __recipient = this.recipient
      var __timestamp = this.timestamp
      var __message = this.message
      var __delivery = this.delivery
      var __messageType = this.messageType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __sender = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sender.getOrElse(fabikon.FbSender.defaultInstance)))
          case 26 =>
            __recipient = Option(_root_.scalapb.LiteParser.readMessage(_input__, __recipient.getOrElse(fabikon.FbRecipient.defaultInstance)))
          case 32 =>
            __timestamp = Option(_input__.readInt64())
          case 42 =>
            __message = Option(_root_.scalapb.LiteParser.readMessage(_input__, __message.getOrElse(fabikon.FbMessage.defaultInstance)))
          case 50 =>
            __delivery = Option(_root_.scalapb.LiteParser.readMessage(_input__, __delivery.getOrElse(fabikon.FbDelivery.defaultInstance)))
          case 58 =>
            __messageType = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbMessaging(
          sender = __sender,
          recipient = __recipient,
          timestamp = __timestamp,
          message = __message,
          delivery = __delivery,
          messageType = __messageType
      )
    }
    def getSender: fabikon.FbSender = sender.getOrElse(fabikon.FbSender.defaultInstance)
    def clearSender: FbMessaging = copy(sender = None)
    def withSender(__v: fabikon.FbSender): FbMessaging = copy(sender = Option(__v))
    def getRecipient: fabikon.FbRecipient = recipient.getOrElse(fabikon.FbRecipient.defaultInstance)
    def clearRecipient: FbMessaging = copy(recipient = None)
    def withRecipient(__v: fabikon.FbRecipient): FbMessaging = copy(recipient = Option(__v))
    def getTimestamp: _root_.scala.Long = timestamp.getOrElse(0L)
    def clearTimestamp: FbMessaging = copy(timestamp = None)
    def withTimestamp(__v: _root_.scala.Long): FbMessaging = copy(timestamp = Option(__v))
    def getMessage: fabikon.FbMessage = message.getOrElse(fabikon.FbMessage.defaultInstance)
    def clearMessage: FbMessaging = copy(message = None)
    def withMessage(__v: fabikon.FbMessage): FbMessaging = copy(message = Option(__v))
    def getDelivery: fabikon.FbDelivery = delivery.getOrElse(fabikon.FbDelivery.defaultInstance)
    def clearDelivery: FbMessaging = copy(delivery = None)
    def withDelivery(__v: fabikon.FbDelivery): FbMessaging = copy(delivery = Option(__v))
    def getMessageType: _root_.scala.Predef.String = messageType.getOrElse("")
    def clearMessageType: FbMessaging = copy(messageType = None)
    def withMessageType(__v: _root_.scala.Predef.String): FbMessaging = copy(messageType = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => sender.orNull
        case 3 => recipient.orNull
        case 4 => timestamp.orNull
        case 5 => message.orNull
        case 6 => delivery.orNull
        case 7 => messageType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => sender.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => recipient.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => timestamp.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => message.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => delivery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => messageType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbMessaging
}

object FbMessaging extends scalapb.GeneratedMessageCompanion[fabikon.FbMessaging] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbMessaging] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbMessaging = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbMessaging(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[fabikon.FbSender]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[fabikon.FbRecipient]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[fabikon.FbMessage]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[fabikon.FbDelivery]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbMessaging] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbMessaging(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[fabikon.FbSender]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[fabikon.FbRecipient]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[fabikon.FbMessage]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[fabikon.FbDelivery]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = fabikon.FbSender
      case 3 => __out = fabikon.FbRecipient
      case 5 => __out = fabikon.FbMessage
      case 6 => __out = fabikon.FbDelivery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbMessaging(
  )
  implicit class FbMessagingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbMessaging]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbMessaging](_l) {
    def sender: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbSender] = field(_.getSender)((c_, f_) => c_.copy(sender = Option(f_)))
    def optionalSender: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbSender]] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
    def recipient: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbRecipient] = field(_.getRecipient)((c_, f_) => c_.copy(recipient = Option(f_)))
    def optionalRecipient: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbRecipient]] = field(_.recipient)((c_, f_) => c_.copy(recipient = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = Option(f_)))
    def optionalTimestamp: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbMessage] = field(_.getMessage)((c_, f_) => c_.copy(message = Option(f_)))
    def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbMessage]] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def delivery: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbDelivery] = field(_.getDelivery)((c_, f_) => c_.copy(delivery = Option(f_)))
    def optionalDelivery: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbDelivery]] = field(_.delivery)((c_, f_) => c_.copy(delivery = f_))
    def messageType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMessageType)((c_, f_) => c_.copy(messageType = Option(f_)))
    def optionalMessageType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.messageType)((c_, f_) => c_.copy(messageType = f_))
  }
  final val SENDER_FIELD_NUMBER = 2
  final val RECIPIENT_FIELD_NUMBER = 3
  final val TIMESTAMP_FIELD_NUMBER = 4
  final val MESSAGE_FIELD_NUMBER = 5
  final val DELIVERY_FIELD_NUMBER = 6
  final val MESSAGE_TYPE_FIELD_NUMBER = 7
}
