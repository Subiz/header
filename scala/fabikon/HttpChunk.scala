// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class HttpChunk(
    id: scala.Option[_root_.scala.Predef.String] = None,
    chunkId: scala.Option[_root_.scala.Int] = None,
    data: scala.Option[_root_.com.google.protobuf.ByteString] = None,
    chunkSize: scala.Option[_root_.scala.Int] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[HttpChunk] with scalapb.lenses.Updatable[HttpChunk] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (chunkId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, chunkId.get) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, data.get) }
      if (chunkSize.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, chunkSize.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      chunkId.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      data.foreach { __v =>
        _output__.writeBytes(5, __v)
      };
      chunkSize.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.HttpChunk = {
      var __id = this.id
      var __chunkId = this.chunkId
      var __data = this.data
      var __chunkSize = this.chunkSize
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __id = Option(_input__.readString())
          case 32 =>
            __chunkId = Option(_input__.readInt32())
          case 42 =>
            __data = Option(_input__.readBytes())
          case 48 =>
            __chunkSize = Option(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.HttpChunk(
          id = __id,
          chunkId = __chunkId,
          data = __data,
          chunkSize = __chunkSize
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: HttpChunk = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): HttpChunk = copy(id = Option(__v))
    def getChunkId: _root_.scala.Int = chunkId.getOrElse(0)
    def clearChunkId: HttpChunk = copy(chunkId = None)
    def withChunkId(__v: _root_.scala.Int): HttpChunk = copy(chunkId = Option(__v))
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: HttpChunk = copy(data = None)
    def withData(__v: _root_.com.google.protobuf.ByteString): HttpChunk = copy(data = Option(__v))
    def getChunkSize: _root_.scala.Int = chunkSize.getOrElse(0)
    def clearChunkSize: HttpChunk = copy(chunkSize = None)
    def withChunkSize(__v: _root_.scala.Int): HttpChunk = copy(chunkSize = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => id.orNull
        case 4 => chunkId.orNull
        case 5 => data.orNull
        case 6 => chunkSize.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => chunkId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.map(_root_.scalapb.descriptors.PByteString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => chunkSize.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.HttpChunk
}

object HttpChunk extends scalapb.GeneratedMessageCompanion[fabikon.HttpChunk] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.HttpChunk] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.HttpChunk = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.HttpChunk(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.HttpChunk] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.HttpChunk(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.HttpChunk(
  )
  implicit class HttpChunkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.HttpChunk]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.HttpChunk](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def chunkId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getChunkId)((c_, f_) => c_.copy(chunkId = Option(f_)))
    def optionalChunkId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.chunkId)((c_, f_) => c_.copy(chunkId = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def chunkSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getChunkSize)((c_, f_) => c_.copy(chunkSize = Option(f_)))
    def optionalChunkSize: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Int]] = field(_.chunkSize)((c_, f_) => c_.copy(chunkSize = f_))
  }
  final val ID_FIELD_NUMBER = 3
  final val CHUNK_ID_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
  final val CHUNK_SIZE_FIELD_NUMBER = 6
}
