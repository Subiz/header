// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class FbMessage(
    mid: scala.Option[_root_.scala.Predef.String] = None,
    text: scala.Option[_root_.scala.Predef.String] = None,
    attachments: _root_.scala.collection.Seq[fabikon.FbAttachment] = _root_.scala.collection.Seq.empty,
    read: scala.Option[fabikon.FbRead] = None,
    attachment: scala.Option[fabikon.FbAttachment] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FbMessage] with scalapb.lenses.Updatable[FbMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (mid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, mid.get) }
      if (text.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, text.get) }
      attachments.foreach(attachments => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attachments.serializedSize) + attachments.serializedSize)
      if (read.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(read.get.serializedSize) + read.get.serializedSize }
      if (attachment.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attachment.get.serializedSize) + attachment.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      mid.foreach { __v =>
        _output__.writeString(2, __v)
      };
      text.foreach { __v =>
        _output__.writeString(3, __v)
      };
      attachments.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      read.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attachment.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.FbMessage = {
      var __mid = this.mid
      var __text = this.text
      val __attachments = (_root_.scala.collection.immutable.Vector.newBuilder[fabikon.FbAttachment] ++= this.attachments)
      var __read = this.read
      var __attachment = this.attachment
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __mid = Option(_input__.readString())
          case 26 =>
            __text = Option(_input__.readString())
          case 34 =>
            __attachments += _root_.scalapb.LiteParser.readMessage(_input__, fabikon.FbAttachment.defaultInstance)
          case 42 =>
            __read = Option(_root_.scalapb.LiteParser.readMessage(_input__, __read.getOrElse(fabikon.FbRead.defaultInstance)))
          case 50 =>
            __attachment = Option(_root_.scalapb.LiteParser.readMessage(_input__, __attachment.getOrElse(fabikon.FbAttachment.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.FbMessage(
          mid = __mid,
          text = __text,
          attachments = __attachments.result(),
          read = __read,
          attachment = __attachment
      )
    }
    def getMid: _root_.scala.Predef.String = mid.getOrElse("")
    def clearMid: FbMessage = copy(mid = None)
    def withMid(__v: _root_.scala.Predef.String): FbMessage = copy(mid = Option(__v))
    def getText: _root_.scala.Predef.String = text.getOrElse("")
    def clearText: FbMessage = copy(text = None)
    def withText(__v: _root_.scala.Predef.String): FbMessage = copy(text = Option(__v))
    def clearAttachments = copy(attachments = _root_.scala.collection.Seq.empty)
    def addAttachments(__vs: fabikon.FbAttachment*): FbMessage = addAllAttachments(__vs)
    def addAllAttachments(__vs: TraversableOnce[fabikon.FbAttachment]): FbMessage = copy(attachments = attachments ++ __vs)
    def withAttachments(__v: _root_.scala.collection.Seq[fabikon.FbAttachment]): FbMessage = copy(attachments = __v)
    def getRead: fabikon.FbRead = read.getOrElse(fabikon.FbRead.defaultInstance)
    def clearRead: FbMessage = copy(read = None)
    def withRead(__v: fabikon.FbRead): FbMessage = copy(read = Option(__v))
    def getAttachment: fabikon.FbAttachment = attachment.getOrElse(fabikon.FbAttachment.defaultInstance)
    def clearAttachment: FbMessage = copy(attachment = None)
    def withAttachment(__v: fabikon.FbAttachment): FbMessage = copy(attachment = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => mid.orNull
        case 3 => text.orNull
        case 4 => attachments
        case 5 => read.orNull
        case 6 => attachment.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => mid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => text.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(attachments.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => read.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => attachment.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.FbMessage
}

object FbMessage extends scalapb.GeneratedMessageCompanion[fabikon.FbMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.FbMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.FbMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.FbMessage(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[fabikon.FbAttachment]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[fabikon.FbRead]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[fabikon.FbAttachment]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.FbMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.FbMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[fabikon.FbAttachment]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[fabikon.FbRead]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[fabikon.FbAttachment]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = fabikon.FbAttachment
      case 5 => __out = fabikon.FbRead
      case 6 => __out = fabikon.FbAttachment
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.FbMessage(
  )
  implicit class FbMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.FbMessage](_l) {
    def mid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMid)((c_, f_) => c_.copy(mid = Option(f_)))
    def optionalMid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.mid)((c_, f_) => c_.copy(mid = f_))
    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getText)((c_, f_) => c_.copy(text = Option(f_)))
    def optionalText: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.text)((c_, f_) => c_.copy(text = f_))
    def attachments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[fabikon.FbAttachment]] = field(_.attachments)((c_, f_) => c_.copy(attachments = f_))
    def read: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbRead] = field(_.getRead)((c_, f_) => c_.copy(read = Option(f_)))
    def optionalRead: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbRead]] = field(_.read)((c_, f_) => c_.copy(read = f_))
    def attachment: _root_.scalapb.lenses.Lens[UpperPB, fabikon.FbAttachment] = field(_.getAttachment)((c_, f_) => c_.copy(attachment = Option(f_)))
    def optionalAttachment: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[fabikon.FbAttachment]] = field(_.attachment)((c_, f_) => c_.copy(attachment = f_))
  }
  final val MID_FIELD_NUMBER = 2
  final val TEXT_FIELD_NUMBER = 3
  final val ATTACHMENTS_FIELD_NUMBER = 4
  final val READ_FIELD_NUMBER = 5
  final val ATTACHMENT_FIELD_NUMBER = 6
}
