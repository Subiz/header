// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class Fb2SbEvent(
    fbmid: scala.Option[_root_.scala.Predef.String] = None,
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    conversationId: scala.Option[_root_.scala.Predef.String] = None,
    sbmid: scala.Option[_root_.scala.Predef.String] = None,
    pageId: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Fb2SbEvent] with scalapb.lenses.Updatable[Fb2SbEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (fbmid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, fbmid.get) }
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId.get) }
      if (conversationId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, conversationId.get) }
      if (sbmid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, sbmid.get) }
      if (pageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, pageId.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      fbmid.foreach { __v =>
        _output__.writeString(2, __v)
      };
      accountId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      conversationId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      sbmid.foreach { __v =>
        _output__.writeString(5, __v)
      };
      pageId.foreach { __v =>
        _output__.writeString(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.Fb2SbEvent = {
      var __fbmid = this.fbmid
      var __accountId = this.accountId
      var __conversationId = this.conversationId
      var __sbmid = this.sbmid
      var __pageId = this.pageId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __fbmid = Option(_input__.readString())
          case 26 =>
            __accountId = Option(_input__.readString())
          case 34 =>
            __conversationId = Option(_input__.readString())
          case 42 =>
            __sbmid = Option(_input__.readString())
          case 50 =>
            __pageId = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.Fb2SbEvent(
          fbmid = __fbmid,
          accountId = __accountId,
          conversationId = __conversationId,
          sbmid = __sbmid,
          pageId = __pageId
      )
    }
    def getFbmid: _root_.scala.Predef.String = fbmid.getOrElse("")
    def clearFbmid: Fb2SbEvent = copy(fbmid = None)
    def withFbmid(__v: _root_.scala.Predef.String): Fb2SbEvent = copy(fbmid = Option(__v))
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Fb2SbEvent = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Fb2SbEvent = copy(accountId = Option(__v))
    def getConversationId: _root_.scala.Predef.String = conversationId.getOrElse("")
    def clearConversationId: Fb2SbEvent = copy(conversationId = None)
    def withConversationId(__v: _root_.scala.Predef.String): Fb2SbEvent = copy(conversationId = Option(__v))
    def getSbmid: _root_.scala.Predef.String = sbmid.getOrElse("")
    def clearSbmid: Fb2SbEvent = copy(sbmid = None)
    def withSbmid(__v: _root_.scala.Predef.String): Fb2SbEvent = copy(sbmid = Option(__v))
    def getPageId: _root_.scala.Predef.String = pageId.getOrElse("")
    def clearPageId: Fb2SbEvent = copy(pageId = None)
    def withPageId(__v: _root_.scala.Predef.String): Fb2SbEvent = copy(pageId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => fbmid.orNull
        case 3 => accountId.orNull
        case 4 => conversationId.orNull
        case 5 => sbmid.orNull
        case 6 => pageId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => fbmid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => conversationId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => sbmid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => pageId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.Fb2SbEvent
}

object Fb2SbEvent extends scalapb.GeneratedMessageCompanion[fabikon.Fb2SbEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.Fb2SbEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.Fb2SbEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.Fb2SbEvent(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.Fb2SbEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.Fb2SbEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.Fb2SbEvent(
  )
  implicit class Fb2SbEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.Fb2SbEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.Fb2SbEvent](_l) {
    def fbmid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFbmid)((c_, f_) => c_.copy(fbmid = Option(f_)))
    def optionalFbmid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fbmid)((c_, f_) => c_.copy(fbmid = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def conversationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConversationId)((c_, f_) => c_.copy(conversationId = Option(f_)))
    def optionalConversationId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.conversationId)((c_, f_) => c_.copy(conversationId = f_))
    def sbmid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSbmid)((c_, f_) => c_.copy(sbmid = Option(f_)))
    def optionalSbmid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.sbmid)((c_, f_) => c_.copy(sbmid = f_))
    def pageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPageId)((c_, f_) => c_.copy(pageId = Option(f_)))
    def optionalPageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.pageId)((c_, f_) => c_.copy(pageId = f_))
  }
  final val FBMID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val CONVERSATION_ID_FIELD_NUMBER = 4
  final val SBMID_FIELD_NUMBER = 5
  final val PAGE_ID_FIELD_NUMBER = 6
}
