// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package fabikon

@SerialVersionUID(0L)
final case class Conversation(
    accountId: scala.Option[_root_.scala.Predef.String] = None,
    id: scala.Option[_root_.scala.Predef.String] = None,
    pageId: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    fbuserid: scala.Option[_root_.scala.Predef.String] = None,
    sbuserid: scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Conversation] with scalapb.lenses.Updatable[Conversation] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId.get) }
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, id.get) }
      if (pageId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, pageId.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, created.get) }
      if (fbuserid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, fbuserid.get) }
      if (sbuserid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, sbuserid.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      accountId.foreach { __v =>
        _output__.writeString(2, __v)
      };
      id.foreach { __v =>
        _output__.writeString(3, __v)
      };
      pageId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(5, __v)
      };
      fbuserid.foreach { __v =>
        _output__.writeString(6, __v)
      };
      sbuserid.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): fabikon.Conversation = {
      var __accountId = this.accountId
      var __id = this.id
      var __pageId = this.pageId
      var __created = this.created
      var __fbuserid = this.fbuserid
      var __sbuserid = this.sbuserid
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __accountId = Option(_input__.readString())
          case 26 =>
            __id = Option(_input__.readString())
          case 34 =>
            __pageId = Option(_input__.readString())
          case 40 =>
            __created = Option(_input__.readInt64())
          case 50 =>
            __fbuserid = Option(_input__.readString())
          case 58 =>
            __sbuserid = Option(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      fabikon.Conversation(
          accountId = __accountId,
          id = __id,
          pageId = __pageId,
          created = __created,
          fbuserid = __fbuserid,
          sbuserid = __sbuserid
      )
    }
    def getAccountId: _root_.scala.Predef.String = accountId.getOrElse("")
    def clearAccountId: Conversation = copy(accountId = None)
    def withAccountId(__v: _root_.scala.Predef.String): Conversation = copy(accountId = Option(__v))
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Conversation = copy(id = None)
    def withId(__v: _root_.scala.Predef.String): Conversation = copy(id = Option(__v))
    def getPageId: _root_.scala.Predef.String = pageId.getOrElse("")
    def clearPageId: Conversation = copy(pageId = None)
    def withPageId(__v: _root_.scala.Predef.String): Conversation = copy(pageId = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Conversation = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Conversation = copy(created = Option(__v))
    def getFbuserid: _root_.scala.Predef.String = fbuserid.getOrElse("")
    def clearFbuserid: Conversation = copy(fbuserid = None)
    def withFbuserid(__v: _root_.scala.Predef.String): Conversation = copy(fbuserid = Option(__v))
    def getSbuserid: _root_.scala.Predef.String = sbuserid.getOrElse("")
    def clearSbuserid: Conversation = copy(sbuserid = None)
    def withSbuserid(__v: _root_.scala.Predef.String): Conversation = copy(sbuserid = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => accountId.orNull
        case 3 => id.orNull
        case 4 => pageId.orNull
        case 5 => created.orNull
        case 6 => fbuserid.orNull
        case 7 => sbuserid.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => accountId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => pageId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => fbuserid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => sbuserid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = fabikon.Conversation
}

object Conversation extends scalapb.GeneratedMessageCompanion[fabikon.Conversation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[fabikon.Conversation] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): fabikon.Conversation = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    fabikon.Conversation(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[fabikon.Conversation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      fabikon.Conversation(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FabikonProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FabikonProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = fabikon.Conversation(
  )
  implicit class ConversationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, fabikon.Conversation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, fabikon.Conversation](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAccountId)((c_, f_) => c_.copy(accountId = Option(f_)))
    def optionalAccountId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def pageId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPageId)((c_, f_) => c_.copy(pageId = Option(f_)))
    def optionalPageId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.pageId)((c_, f_) => c_.copy(pageId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def fbuserid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFbuserid)((c_, f_) => c_.copy(fbuserid = Option(f_)))
    def optionalFbuserid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.fbuserid)((c_, f_) => c_.copy(fbuserid = f_))
    def sbuserid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSbuserid)((c_, f_) => c_.copy(sbuserid = Option(f_)))
    def optionalSbuserid: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.sbuserid)((c_, f_) => c_.copy(sbuserid = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val PAGE_ID_FIELD_NUMBER = 4
  final val CREATED_FIELD_NUMBER = 5
  final val FBUSERID_FIELD_NUMBER = 6
  final val SBUSERID_FIELD_NUMBER = 7
}
