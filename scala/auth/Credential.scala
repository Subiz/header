// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

/** @param avatarUrl
  *   optional
  */
@SerialVersionUID(0L)
final case class Credential(
    accountId: _root_.scala.Predef.String = "",
    issuer: _root_.scala.Predef.String = "",
    `type`: auth.Type = auth.Type.unknown,
    method: scala.Option[auth.Method] = None,
    clientId: _root_.scala.Predef.String = "",
    clientType: auth.Type = auth.Type.unknown,
    clientAccountId: _root_.scala.Predef.String = "",
    scopes: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    avatarUrl: _root_.scala.Predef.String = "",
    name: _root_.scala.Predef.String = "",
    email: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Credential] with scalapb.lenses.Updatable[Credential] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, accountId) }
      if (issuer != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, issuer) }
      if (`type` != auth.Type.unknown) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, `type`.value) }
      if (method.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(method.get.serializedSize) + method.get.serializedSize }
      if (clientId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, clientId) }
      if (clientType != auth.Type.unknown) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, clientType.value) }
      if (clientAccountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, clientAccountId) }
      scopes.foreach(scopes => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, scopes))
      if (avatarUrl != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, avatarUrl) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, name) }
      if (email != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, email) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = issuer
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = `type`
        if (__v != auth.Type.unknown) {
          _output__.writeEnum(4, __v.value)
        }
      };
      method.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = clientId
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = clientType
        if (__v != auth.Type.unknown) {
          _output__.writeEnum(8, __v.value)
        }
      };
      scopes.foreach { __v =>
        _output__.writeString(9, __v)
      };
      {
        val __v = clientAccountId
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = avatarUrl
        if (__v != "") {
          _output__.writeString(15, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(16, __v)
        }
      };
      {
        val __v = email
        if (__v != "") {
          _output__.writeString(17, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.Credential = {
      var __accountId = this.accountId
      var __issuer = this.issuer
      var __type = this.`type`
      var __method = this.method
      var __clientId = this.clientId
      var __clientType = this.clientType
      var __clientAccountId = this.clientAccountId
      val __scopes = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.scopes)
      var __avatarUrl = this.avatarUrl
      var __name = this.name
      var __email = this.email
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __accountId = _input__.readString()
          case 26 =>
            __issuer = _input__.readString()
          case 32 =>
            __type = auth.Type.fromValue(_input__.readEnum())
          case 42 =>
            __method = Option(_root_.scalapb.LiteParser.readMessage(_input__, __method.getOrElse(auth.Method.defaultInstance)))
          case 58 =>
            __clientId = _input__.readString()
          case 64 =>
            __clientType = auth.Type.fromValue(_input__.readEnum())
          case 82 =>
            __clientAccountId = _input__.readString()
          case 74 =>
            __scopes += _input__.readString()
          case 122 =>
            __avatarUrl = _input__.readString()
          case 130 =>
            __name = _input__.readString()
          case 138 =>
            __email = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.Credential(
          accountId = __accountId,
          issuer = __issuer,
          `type` = __type,
          method = __method,
          clientId = __clientId,
          clientType = __clientType,
          clientAccountId = __clientAccountId,
          scopes = __scopes.result(),
          avatarUrl = __avatarUrl,
          name = __name,
          email = __email
      )
    }
    def withAccountId(__v: _root_.scala.Predef.String): Credential = copy(accountId = __v)
    def withIssuer(__v: _root_.scala.Predef.String): Credential = copy(issuer = __v)
    def withType(__v: auth.Type): Credential = copy(`type` = __v)
    def getMethod: auth.Method = method.getOrElse(auth.Method.defaultInstance)
    def clearMethod: Credential = copy(method = None)
    def withMethod(__v: auth.Method): Credential = copy(method = Option(__v))
    def withClientId(__v: _root_.scala.Predef.String): Credential = copy(clientId = __v)
    def withClientType(__v: auth.Type): Credential = copy(clientType = __v)
    def withClientAccountId(__v: _root_.scala.Predef.String): Credential = copy(clientAccountId = __v)
    def clearScopes = copy(scopes = _root_.scala.collection.Seq.empty)
    def addScopes(__vs: _root_.scala.Predef.String*): Credential = addAllScopes(__vs)
    def addAllScopes(__vs: TraversableOnce[_root_.scala.Predef.String]): Credential = copy(scopes = scopes ++ __vs)
    def withScopes(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Credential = copy(scopes = __v)
    def withAvatarUrl(__v: _root_.scala.Predef.String): Credential = copy(avatarUrl = __v)
    def withName(__v: _root_.scala.Predef.String): Credential = copy(name = __v)
    def withEmail(__v: _root_.scala.Predef.String): Credential = copy(email = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = issuer
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => method.orNull
        case 7 => {
          val __t = clientId
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = clientType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 10 => {
          val __t = clientAccountId
          if (__t != "") __t else null
        }
        case 9 => scopes
        case 15 => {
          val __t = avatarUrl
          if (__t != "") __t else null
        }
        case 16 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 17 => {
          val __t = email
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(accountId)
        case 3 => _root_.scalapb.descriptors.PString(issuer)
        case 4 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 5 => method.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PString(clientId)
        case 8 => _root_.scalapb.descriptors.PEnum(clientType.scalaValueDescriptor)
        case 10 => _root_.scalapb.descriptors.PString(clientAccountId)
        case 9 => _root_.scalapb.descriptors.PRepeated(scopes.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 15 => _root_.scalapb.descriptors.PString(avatarUrl)
        case 16 => _root_.scalapb.descriptors.PString(name)
        case 17 => _root_.scalapb.descriptors.PString(email)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.Credential
}

object Credential extends scalapb.GeneratedMessageCompanion[auth.Credential] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.Credential] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.Credential = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.Credential(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      auth.Type.fromValue(__fieldsMap.getOrElse(__fields.get(2), auth.Type.unknown.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[auth.Method]],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      auth.Type.fromValue(__fieldsMap.getOrElse(__fields.get(5), auth.Type.unknown.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(9), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(10), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.Credential] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.Credential(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        auth.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(auth.Type.unknown.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[auth.Method]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        auth.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(auth.Type.unknown.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = auth.Method
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => auth.Type
      case 8 => auth.Type
    }
  }
  lazy val defaultInstance = auth.Credential(
  )
  implicit class CredentialLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.Credential]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.Credential](_l) {
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def issuer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuer)((c_, f_) => c_.copy(issuer = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, auth.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def method: _root_.scalapb.lenses.Lens[UpperPB, auth.Method] = field(_.getMethod)((c_, f_) => c_.copy(method = Option(f_)))
    def optionalMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Method]] = field(_.method)((c_, f_) => c_.copy(method = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def clientType: _root_.scalapb.lenses.Lens[UpperPB, auth.Type] = field(_.clientType)((c_, f_) => c_.copy(clientType = f_))
    def clientAccountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientAccountId)((c_, f_) => c_.copy(clientAccountId = f_))
    def scopes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.scopes)((c_, f_) => c_.copy(scopes = f_))
    def avatarUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.avatarUrl)((c_, f_) => c_.copy(avatarUrl = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.email)((c_, f_) => c_.copy(email = f_))
  }
  final val ACCOUNT_ID_FIELD_NUMBER = 1
  final val ISSUER_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val METHOD_FIELD_NUMBER = 5
  final val CLIENT_ID_FIELD_NUMBER = 7
  final val CLIENT_TYPE_FIELD_NUMBER = 8
  final val CLIENT_ACCOUNT_ID_FIELD_NUMBER = 10
  final val SCOPES_FIELD_NUMBER = 9
  final val AVATAR_URL_FIELD_NUMBER = 15
  final val NAME_FIELD_NUMBER = 16
  final val EMAIL_FIELD_NUMBER = 17
}
