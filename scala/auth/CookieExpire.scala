// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

/** @param expiredToken
  *   expired_token will be mark as expired
  * @param beforeTime
  *   all token issue before before_time will be mark as expired, except for
  *   except_token
  * @param exceptToken
  *   this token will not be expired
  */
@SerialVersionUID(0L)
final case class CookieExpire(
    userId: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    expiredToken: _root_.scala.Predef.String = "",
    beforeTime: _root_.scala.Long = 0L,
    exceptToken: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[CookieExpire] with scalapb.lenses.Updatable[CookieExpire] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (userId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, userId) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId) }
      if (expiredToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, expiredToken) }
      if (beforeTime != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, beforeTime) }
      if (exceptToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, exceptToken) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = expiredToken
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = beforeTime
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = exceptToken
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.CookieExpire = {
      var __userId = this.userId
      var __accountId = this.accountId
      var __expiredToken = this.expiredToken
      var __beforeTime = this.beforeTime
      var __exceptToken = this.exceptToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = _input__.readString()
          case 18 =>
            __accountId = _input__.readString()
          case 26 =>
            __expiredToken = _input__.readString()
          case 32 =>
            __beforeTime = _input__.readInt64()
          case 42 =>
            __exceptToken = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.CookieExpire(
          userId = __userId,
          accountId = __accountId,
          expiredToken = __expiredToken,
          beforeTime = __beforeTime,
          exceptToken = __exceptToken
      )
    }
    def withUserId(__v: _root_.scala.Predef.String): CookieExpire = copy(userId = __v)
    def withAccountId(__v: _root_.scala.Predef.String): CookieExpire = copy(accountId = __v)
    def withExpiredToken(__v: _root_.scala.Predef.String): CookieExpire = copy(expiredToken = __v)
    def withBeforeTime(__v: _root_.scala.Long): CookieExpire = copy(beforeTime = __v)
    def withExceptToken(__v: _root_.scala.Predef.String): CookieExpire = copy(exceptToken = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = expiredToken
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = beforeTime
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = exceptToken
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(userId)
        case 2 => _root_.scalapb.descriptors.PString(accountId)
        case 3 => _root_.scalapb.descriptors.PString(expiredToken)
        case 4 => _root_.scalapb.descriptors.PLong(beforeTime)
        case 5 => _root_.scalapb.descriptors.PString(exceptToken)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.CookieExpire
}

object CookieExpire extends scalapb.GeneratedMessageCompanion[auth.CookieExpire] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.CookieExpire] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.CookieExpire = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.CookieExpire(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.CookieExpire] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.CookieExpire(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.CookieExpire(
  )
  implicit class CookieExpireLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.CookieExpire]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.CookieExpire](_l) {
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def expiredToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.expiredToken)((c_, f_) => c_.copy(expiredToken = f_))
    def beforeTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.beforeTime)((c_, f_) => c_.copy(beforeTime = f_))
    def exceptToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.exceptToken)((c_, f_) => c_.copy(exceptToken = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val EXPIRED_TOKEN_FIELD_NUMBER = 3
  final val BEFORE_TIME_FIELD_NUMBER = 4
  final val EXCEPT_TOKEN_FIELD_NUMBER = 5
}
