// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

@SerialVersionUID(0L)
final case class Scope(
    id: _root_.scala.Predef.String = "",
    name: _root_.scala.Predef.String = "",
    logoUrl: _root_.scala.Predef.String = "",
    title: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    method: scala.Option[auth.Method] = None,
    event: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Scope] with scalapb.lenses.Updatable[Scope] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name) }
      if (logoUrl != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, logoUrl) }
      if (title != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, title) }
      if (description != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, description) }
      if (method.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(method.get.serializedSize) + method.get.serializedSize }
      event.foreach(event => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, event))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = logoUrl
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = title
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      method.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      event.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.Scope = {
      var __id = this.id
      var __name = this.name
      var __logoUrl = this.logoUrl
      var __title = this.title
      var __description = this.description
      var __method = this.method
      val __event = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.event)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __name = _input__.readString()
          case 26 =>
            __logoUrl = _input__.readString()
          case 34 =>
            __title = _input__.readString()
          case 42 =>
            __description = _input__.readString()
          case 50 =>
            __method = Option(_root_.scalapb.LiteParser.readMessage(_input__, __method.getOrElse(auth.Method.defaultInstance)))
          case 58 =>
            __event += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.Scope(
          id = __id,
          name = __name,
          logoUrl = __logoUrl,
          title = __title,
          description = __description,
          method = __method,
          event = __event.result()
      )
    }
    def withId(__v: _root_.scala.Predef.String): Scope = copy(id = __v)
    def withName(__v: _root_.scala.Predef.String): Scope = copy(name = __v)
    def withLogoUrl(__v: _root_.scala.Predef.String): Scope = copy(logoUrl = __v)
    def withTitle(__v: _root_.scala.Predef.String): Scope = copy(title = __v)
    def withDescription(__v: _root_.scala.Predef.String): Scope = copy(description = __v)
    def getMethod: auth.Method = method.getOrElse(auth.Method.defaultInstance)
    def clearMethod: Scope = copy(method = None)
    def withMethod(__v: auth.Method): Scope = copy(method = Option(__v))
    def clearEvent = copy(event = _root_.scala.collection.Seq.empty)
    def addEvent(__vs: _root_.scala.Predef.String*): Scope = addAllEvent(__vs)
    def addAllEvent(__vs: TraversableOnce[_root_.scala.Predef.String]): Scope = copy(event = event ++ __vs)
    def withEvent(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): Scope = copy(event = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = logoUrl
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 6 => method.orNull
        case 7 => event
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PString(logoUrl)
        case 4 => _root_.scalapb.descriptors.PString(title)
        case 5 => _root_.scalapb.descriptors.PString(description)
        case 6 => method.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(event.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.Scope
}

object Scope extends scalapb.GeneratedMessageCompanion[auth.Scope] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.Scope] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.Scope = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.Scope(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[auth.Method]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.Scope] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.Scope(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[auth.Method]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = auth.Method
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.Scope(
  )
  implicit class ScopeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.Scope]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.Scope](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def method: _root_.scalapb.lenses.Lens[UpperPB, auth.Method] = field(_.getMethod)((c_, f_) => c_.copy(method = Option(f_)))
    def optionalMethod: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[auth.Method]] = field(_.method)((c_, f_) => c_.copy(method = f_))
    def event: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.event)((c_, f_) => c_.copy(event = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val LOGO_URL_FIELD_NUMBER = 3
  final val TITLE_FIELD_NUMBER = 4
  final val DESCRIPTION_FIELD_NUMBER = 5
  final val METHOD_FIELD_NUMBER = 6
  final val EVENT_FIELD_NUMBER = 7
}
