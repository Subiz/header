// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

@SerialVersionUID(0L)
final case class AccessToken(
    issuerId: _root_.scala.Predef.String = "",
    issuerType: _root_.scala.Predef.String = "",
    clientId: _root_.scala.Predef.String = "",
    clientType: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    clientAccountId: _root_.scala.Predef.String = "",
    expired: _root_.scala.Int = 0,
    scopes: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[AccessToken] with scalapb.lenses.Updatable[AccessToken] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (issuerId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, issuerId) }
      if (issuerType != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, issuerType) }
      if (clientId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, clientId) }
      if (clientType != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, clientType) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, accountId) }
      if (clientAccountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, clientAccountId) }
      if (expired != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, expired) }
      scopes.foreach(scopes => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, scopes))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = issuerId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = clientId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = clientType
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = clientAccountId
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      scopes.foreach { __v =>
        _output__.writeString(6, __v)
      };
      {
        val __v = issuerType
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = expired
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.AccessToken = {
      var __issuerId = this.issuerId
      var __issuerType = this.issuerType
      var __clientId = this.clientId
      var __clientType = this.clientType
      var __accountId = this.accountId
      var __clientAccountId = this.clientAccountId
      var __expired = this.expired
      val __scopes = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.scopes)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __issuerId = _input__.readString()
          case 58 =>
            __issuerType = _input__.readString()
          case 18 =>
            __clientId = _input__.readString()
          case 26 =>
            __clientType = _input__.readString()
          case 34 =>
            __accountId = _input__.readString()
          case 42 =>
            __clientAccountId = _input__.readString()
          case 64 =>
            __expired = _input__.readInt32()
          case 50 =>
            __scopes += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.AccessToken(
          issuerId = __issuerId,
          issuerType = __issuerType,
          clientId = __clientId,
          clientType = __clientType,
          accountId = __accountId,
          clientAccountId = __clientAccountId,
          expired = __expired,
          scopes = __scopes.result()
      )
    }
    def withIssuerId(__v: _root_.scala.Predef.String): AccessToken = copy(issuerId = __v)
    def withIssuerType(__v: _root_.scala.Predef.String): AccessToken = copy(issuerType = __v)
    def withClientId(__v: _root_.scala.Predef.String): AccessToken = copy(clientId = __v)
    def withClientType(__v: _root_.scala.Predef.String): AccessToken = copy(clientType = __v)
    def withAccountId(__v: _root_.scala.Predef.String): AccessToken = copy(accountId = __v)
    def withClientAccountId(__v: _root_.scala.Predef.String): AccessToken = copy(clientAccountId = __v)
    def withExpired(__v: _root_.scala.Int): AccessToken = copy(expired = __v)
    def clearScopes = copy(scopes = _root_.scala.collection.Seq.empty)
    def addScopes(__vs: _root_.scala.Predef.String*): AccessToken = addAllScopes(__vs)
    def addAllScopes(__vs: TraversableOnce[_root_.scala.Predef.String]): AccessToken = copy(scopes = scopes ++ __vs)
    def withScopes(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): AccessToken = copy(scopes = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = issuerId
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = issuerType
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = clientId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = clientType
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = clientAccountId
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = expired
          if (__t != 0) __t else null
        }
        case 6 => scopes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(issuerId)
        case 7 => _root_.scalapb.descriptors.PString(issuerType)
        case 2 => _root_.scalapb.descriptors.PString(clientId)
        case 3 => _root_.scalapb.descriptors.PString(clientType)
        case 4 => _root_.scalapb.descriptors.PString(accountId)
        case 5 => _root_.scalapb.descriptors.PString(clientAccountId)
        case 8 => _root_.scalapb.descriptors.PInt(expired)
        case 6 => _root_.scalapb.descriptors.PRepeated(scopes.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.AccessToken
}

object AccessToken extends scalapb.GeneratedMessageCompanion[auth.AccessToken] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.AccessToken] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.AccessToken = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.AccessToken(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.AccessToken] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.AccessToken(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.AccessToken(
  )
  implicit class AccessTokenLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.AccessToken]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.AccessToken](_l) {
    def issuerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuerId)((c_, f_) => c_.copy(issuerId = f_))
    def issuerType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuerType)((c_, f_) => c_.copy(issuerType = f_))
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def clientType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientType)((c_, f_) => c_.copy(clientType = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def clientAccountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientAccountId)((c_, f_) => c_.copy(clientAccountId = f_))
    def expired: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.expired)((c_, f_) => c_.copy(expired = f_))
    def scopes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.scopes)((c_, f_) => c_.copy(scopes = f_))
  }
  final val ISSUER_ID_FIELD_NUMBER = 1
  final val ISSUER_TYPE_FIELD_NUMBER = 7
  final val CLIENT_ID_FIELD_NUMBER = 2
  final val CLIENT_TYPE_FIELD_NUMBER = 3
  final val ACCOUNT_ID_FIELD_NUMBER = 4
  final val CLIENT_ACCOUNT_ID_FIELD_NUMBER = 5
  final val EXPIRED_FIELD_NUMBER = 8
  final val SCOPES_FIELD_NUMBER = 6
}
