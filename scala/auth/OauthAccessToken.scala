// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

@SerialVersionUID(0L)
final case class OauthAccessToken(
    accessToken: _root_.scala.Predef.String = "",
    tokenType: _root_.scala.Predef.String = "",
    expiresIn: _root_.scala.Long = 0L,
    refreshToken: _root_.scala.Predef.String = "",
    scope: _root_.scala.Predef.String = "",
    state: _root_.scala.Predef.String = "",
    error: _root_.scala.Predef.String = "",
    errorDescription: _root_.scala.Predef.String = "",
    errorUri: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[OauthAccessToken] with scalapb.lenses.Updatable[OauthAccessToken] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (accessToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, accessToken) }
      if (tokenType != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, tokenType) }
      if (expiresIn != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, expiresIn) }
      if (refreshToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, refreshToken) }
      if (scope != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, scope) }
      if (state != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, state) }
      if (error != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, error) }
      if (errorDescription != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, errorDescription) }
      if (errorUri != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, errorUri) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = accessToken
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = tokenType
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = expiresIn
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = refreshToken
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = scope
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = state
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = error
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = errorDescription
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = errorUri
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.OauthAccessToken = {
      var __accessToken = this.accessToken
      var __tokenType = this.tokenType
      var __expiresIn = this.expiresIn
      var __refreshToken = this.refreshToken
      var __scope = this.scope
      var __state = this.state
      var __error = this.error
      var __errorDescription = this.errorDescription
      var __errorUri = this.errorUri
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __accessToken = _input__.readString()
          case 26 =>
            __tokenType = _input__.readString()
          case 32 =>
            __expiresIn = _input__.readInt64()
          case 42 =>
            __refreshToken = _input__.readString()
          case 50 =>
            __scope = _input__.readString()
          case 58 =>
            __state = _input__.readString()
          case 66 =>
            __error = _input__.readString()
          case 74 =>
            __errorDescription = _input__.readString()
          case 82 =>
            __errorUri = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.OauthAccessToken(
          accessToken = __accessToken,
          tokenType = __tokenType,
          expiresIn = __expiresIn,
          refreshToken = __refreshToken,
          scope = __scope,
          state = __state,
          error = __error,
          errorDescription = __errorDescription,
          errorUri = __errorUri
      )
    }
    def withAccessToken(__v: _root_.scala.Predef.String): OauthAccessToken = copy(accessToken = __v)
    def withTokenType(__v: _root_.scala.Predef.String): OauthAccessToken = copy(tokenType = __v)
    def withExpiresIn(__v: _root_.scala.Long): OauthAccessToken = copy(expiresIn = __v)
    def withRefreshToken(__v: _root_.scala.Predef.String): OauthAccessToken = copy(refreshToken = __v)
    def withScope(__v: _root_.scala.Predef.String): OauthAccessToken = copy(scope = __v)
    def withState(__v: _root_.scala.Predef.String): OauthAccessToken = copy(state = __v)
    def withError(__v: _root_.scala.Predef.String): OauthAccessToken = copy(error = __v)
    def withErrorDescription(__v: _root_.scala.Predef.String): OauthAccessToken = copy(errorDescription = __v)
    def withErrorUri(__v: _root_.scala.Predef.String): OauthAccessToken = copy(errorUri = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = accessToken
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = tokenType
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = expiresIn
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = refreshToken
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = scope
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = state
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = error
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = errorDescription
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = errorUri
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(accessToken)
        case 3 => _root_.scalapb.descriptors.PString(tokenType)
        case 4 => _root_.scalapb.descriptors.PLong(expiresIn)
        case 5 => _root_.scalapb.descriptors.PString(refreshToken)
        case 6 => _root_.scalapb.descriptors.PString(scope)
        case 7 => _root_.scalapb.descriptors.PString(state)
        case 8 => _root_.scalapb.descriptors.PString(error)
        case 9 => _root_.scalapb.descriptors.PString(errorDescription)
        case 10 => _root_.scalapb.descriptors.PString(errorUri)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.OauthAccessToken
}

object OauthAccessToken extends scalapb.GeneratedMessageCompanion[auth.OauthAccessToken] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.OauthAccessToken] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.OauthAccessToken = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.OauthAccessToken(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.OauthAccessToken] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.OauthAccessToken(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.OauthAccessToken(
  )
  implicit class OauthAccessTokenLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.OauthAccessToken]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.OauthAccessToken](_l) {
    def accessToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accessToken)((c_, f_) => c_.copy(accessToken = f_))
    def tokenType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.tokenType)((c_, f_) => c_.copy(tokenType = f_))
    def expiresIn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.expiresIn)((c_, f_) => c_.copy(expiresIn = f_))
    def refreshToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.refreshToken)((c_, f_) => c_.copy(refreshToken = f_))
    def scope: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.scope)((c_, f_) => c_.copy(scope = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def error: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.error)((c_, f_) => c_.copy(error = f_))
    def errorDescription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.errorDescription)((c_, f_) => c_.copy(errorDescription = f_))
    def errorUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.errorUri)((c_, f_) => c_.copy(errorUri = f_))
  }
  final val ACCESS_TOKEN_FIELD_NUMBER = 1
  final val TOKEN_TYPE_FIELD_NUMBER = 3
  final val EXPIRES_IN_FIELD_NUMBER = 4
  final val REFRESH_TOKEN_FIELD_NUMBER = 5
  final val SCOPE_FIELD_NUMBER = 6
  final val STATE_FIELD_NUMBER = 7
  final val ERROR_FIELD_NUMBER = 8
  final val ERROR_DESCRIPTION_FIELD_NUMBER = 9
  final val ERROR_URI_FIELD_NUMBER = 10
}
