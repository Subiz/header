// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

/** @param issuerId
  *   default: owner
  * @param accountId
  *   string client_id = 7; // default subiz
  *   string client_type = 8;
  * @param expired
  *   string client_account_id = 10; // subiz
  *   default 24 hour
  * @param scopes
  *   default all
  */
@SerialVersionUID(0L)
final case class SuperPasswordCredential(
    subizUsername: _root_.scala.Predef.String = "",
    subizPassword: _root_.scala.Predef.String = "",
    subizToken: _root_.scala.Predef.String = "",
    issuerId: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    expired: _root_.scala.Int = 0,
    scopes: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SuperPasswordCredential] with scalapb.lenses.Updatable[SuperPasswordCredential] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (subizUsername != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, subizUsername) }
      if (subizPassword != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, subizPassword) }
      if (subizToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, subizToken) }
      if (issuerId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, issuerId) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, accountId) }
      if (expired != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, expired) }
      scopes.foreach(scopes => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, scopes))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = subizUsername
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = subizPassword
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = subizToken
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = issuerId
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = expired
        if (__v != 0) {
          _output__.writeInt32(11, __v)
        }
      };
      scopes.foreach { __v =>
        _output__.writeString(12, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.SuperPasswordCredential = {
      var __subizUsername = this.subizUsername
      var __subizPassword = this.subizPassword
      var __subizToken = this.subizToken
      var __issuerId = this.issuerId
      var __accountId = this.accountId
      var __expired = this.expired
      val __scopes = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.scopes)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __subizUsername = _input__.readString()
          case 18 =>
            __subizPassword = _input__.readString()
          case 26 =>
            __subizToken = _input__.readString()
          case 42 =>
            __issuerId = _input__.readString()
          case 74 =>
            __accountId = _input__.readString()
          case 88 =>
            __expired = _input__.readInt32()
          case 98 =>
            __scopes += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.SuperPasswordCredential(
          subizUsername = __subizUsername,
          subizPassword = __subizPassword,
          subizToken = __subizToken,
          issuerId = __issuerId,
          accountId = __accountId,
          expired = __expired,
          scopes = __scopes.result()
      )
    }
    def withSubizUsername(__v: _root_.scala.Predef.String): SuperPasswordCredential = copy(subizUsername = __v)
    def withSubizPassword(__v: _root_.scala.Predef.String): SuperPasswordCredential = copy(subizPassword = __v)
    def withSubizToken(__v: _root_.scala.Predef.String): SuperPasswordCredential = copy(subizToken = __v)
    def withIssuerId(__v: _root_.scala.Predef.String): SuperPasswordCredential = copy(issuerId = __v)
    def withAccountId(__v: _root_.scala.Predef.String): SuperPasswordCredential = copy(accountId = __v)
    def withExpired(__v: _root_.scala.Int): SuperPasswordCredential = copy(expired = __v)
    def clearScopes = copy(scopes = _root_.scala.collection.Seq.empty)
    def addScopes(__vs: _root_.scala.Predef.String*): SuperPasswordCredential = addAllScopes(__vs)
    def addAllScopes(__vs: TraversableOnce[_root_.scala.Predef.String]): SuperPasswordCredential = copy(scopes = scopes ++ __vs)
    def withScopes(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): SuperPasswordCredential = copy(scopes = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = subizUsername
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = subizPassword
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = subizToken
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = issuerId
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = expired
          if (__t != 0) __t else null
        }
        case 12 => scopes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(subizUsername)
        case 2 => _root_.scalapb.descriptors.PString(subizPassword)
        case 3 => _root_.scalapb.descriptors.PString(subizToken)
        case 5 => _root_.scalapb.descriptors.PString(issuerId)
        case 9 => _root_.scalapb.descriptors.PString(accountId)
        case 11 => _root_.scalapb.descriptors.PInt(expired)
        case 12 => _root_.scalapb.descriptors.PRepeated(scopes.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.SuperPasswordCredential
}

object SuperPasswordCredential extends scalapb.GeneratedMessageCompanion[auth.SuperPasswordCredential] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.SuperPasswordCredential] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.SuperPasswordCredential = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.SuperPasswordCredential(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.SuperPasswordCredential] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.SuperPasswordCredential(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.SuperPasswordCredential(
  )
  implicit class SuperPasswordCredentialLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.SuperPasswordCredential]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.SuperPasswordCredential](_l) {
    def subizUsername: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subizUsername)((c_, f_) => c_.copy(subizUsername = f_))
    def subizPassword: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subizPassword)((c_, f_) => c_.copy(subizPassword = f_))
    def subizToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subizToken)((c_, f_) => c_.copy(subizToken = f_))
    def issuerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuerId)((c_, f_) => c_.copy(issuerId = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def expired: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.expired)((c_, f_) => c_.copy(expired = f_))
    def scopes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.scopes)((c_, f_) => c_.copy(scopes = f_))
  }
  final val SUBIZ_USERNAME_FIELD_NUMBER = 1
  final val SUBIZ_PASSWORD_FIELD_NUMBER = 2
  final val SUBIZ_TOKEN_FIELD_NUMBER = 3
  final val ISSUER_ID_FIELD_NUMBER = 5
  final val ACCOUNT_ID_FIELD_NUMBER = 9
  final val EXPIRED_FIELD_NUMBER = 11
  final val SCOPES_FIELD_NUMBER = 12
}
