// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

@SerialVersionUID(0L)
final case class AuthCookie(
    userId: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    expired: _root_.scala.Int = 0,
    issued: _root_.scala.Int = 0,
    `type`: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[AuthCookie] with scalapb.lenses.Updatable[AuthCookie] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (userId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, userId) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accountId) }
      if (expired != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, expired) }
      if (issued != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, issued) }
      if (`type` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, `type`) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = `type`
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = expired
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = issued
        if (__v != 0) {
          _output__.writeInt32(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.AuthCookie = {
      var __userId = this.userId
      var __accountId = this.accountId
      var __expired = this.expired
      var __issued = this.issued
      var __type = this.`type`
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = _input__.readString()
          case 18 =>
            __accountId = _input__.readString()
          case 32 =>
            __expired = _input__.readInt32()
          case 40 =>
            __issued = _input__.readInt32()
          case 26 =>
            __type = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      auth.AuthCookie(
          userId = __userId,
          accountId = __accountId,
          expired = __expired,
          issued = __issued,
          `type` = __type
      )
    }
    def withUserId(__v: _root_.scala.Predef.String): AuthCookie = copy(userId = __v)
    def withAccountId(__v: _root_.scala.Predef.String): AuthCookie = copy(accountId = __v)
    def withExpired(__v: _root_.scala.Int): AuthCookie = copy(expired = __v)
    def withIssued(__v: _root_.scala.Int): AuthCookie = copy(issued = __v)
    def withType(__v: _root_.scala.Predef.String): AuthCookie = copy(`type` = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = expired
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = issued
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = `type`
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(userId)
        case 2 => _root_.scalapb.descriptors.PString(accountId)
        case 4 => _root_.scalapb.descriptors.PInt(expired)
        case 5 => _root_.scalapb.descriptors.PInt(issued)
        case 3 => _root_.scalapb.descriptors.PString(`type`)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.AuthCookie
}

object AuthCookie extends scalapb.GeneratedMessageCompanion[auth.AuthCookie] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.AuthCookie] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.AuthCookie = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.AuthCookie(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.AuthCookie] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.AuthCookie(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.AuthCookie(
  )
  implicit class AuthCookieLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.AuthCookie]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.AuthCookie](_l) {
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def expired: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.expired)((c_, f_) => c_.copy(expired = f_))
    def issued: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.issued)((c_, f_) => c_.copy(issued = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val ACCOUNT_ID_FIELD_NUMBER = 2
  final val EXPIRED_FIELD_NUMBER = 4
  final val ISSUED_FIELD_NUMBER = 5
  final val TYPE_FIELD_NUMBER = 3
}
