// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package auth

/** @param id
  *  	optioanl common.Context ctx = 1;
  */
@SerialVersionUID(0L)
final case class User(
    id: _root_.scala.Predef.String = "",
    accountId: _root_.scala.Predef.String = "",
    email: _root_.scala.Predef.String = "",
    encryptedPassword: _root_.scala.Predef.String = "",
    isActive: _root_.scala.Boolean = false,
    upserted: _root_.scala.Long = 0L
    ) extends scalapb.GeneratedMessage with scalapb.Message[User] with scalapb.lenses.Updatable[User] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, id) }
      if (accountId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, accountId) }
      if (email != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, email) }
      if (encryptedPassword != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, encryptedPassword) }
      if (isActive != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(18, isActive) }
      if (upserted != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(19, upserted) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = accountId
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = email
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = encryptedPassword
        if (__v != "") {
          _output__.writeString(17, __v)
        }
      };
      {
        val __v = isActive
        if (__v != false) {
          _output__.writeBool(18, __v)
        }
      };
      {
        val __v = upserted
        if (__v != 0L) {
          _output__.writeInt64(19, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): auth.User = {
      var __id = this.id
      var __accountId = this.accountId
      var __email = this.email
      var __encryptedPassword = this.encryptedPassword
      var __isActive = this.isActive
      var __upserted = this.upserted
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __id = _input__.readString()
          case 26 =>
            __accountId = _input__.readString()
          case 42 =>
            __email = _input__.readString()
          case 138 =>
            __encryptedPassword = _input__.readString()
          case 144 =>
            __isActive = _input__.readBool()
          case 152 =>
            __upserted = _input__.readInt64()
          case tag => _input__.skipField(tag)
        }
      }
      auth.User(
          id = __id,
          accountId = __accountId,
          email = __email,
          encryptedPassword = __encryptedPassword,
          isActive = __isActive,
          upserted = __upserted
      )
    }
    def withId(__v: _root_.scala.Predef.String): User = copy(id = __v)
    def withAccountId(__v: _root_.scala.Predef.String): User = copy(accountId = __v)
    def withEmail(__v: _root_.scala.Predef.String): User = copy(email = __v)
    def withEncryptedPassword(__v: _root_.scala.Predef.String): User = copy(encryptedPassword = __v)
    def withIsActive(__v: _root_.scala.Boolean): User = copy(isActive = __v)
    def withUpserted(__v: _root_.scala.Long): User = copy(upserted = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = accountId
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = email
          if (__t != "") __t else null
        }
        case 17 => {
          val __t = encryptedPassword
          if (__t != "") __t else null
        }
        case 18 => {
          val __t = isActive
          if (__t != false) __t else null
        }
        case 19 => {
          val __t = upserted
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PString(id)
        case 3 => _root_.scalapb.descriptors.PString(accountId)
        case 5 => _root_.scalapb.descriptors.PString(email)
        case 17 => _root_.scalapb.descriptors.PString(encryptedPassword)
        case 18 => _root_.scalapb.descriptors.PBoolean(isActive)
        case 19 => _root_.scalapb.descriptors.PLong(upserted)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = auth.User
}

object User extends scalapb.GeneratedMessageCompanion[auth.User] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[auth.User] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): auth.User = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    auth.User(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[auth.User] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      auth.User(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = auth.User(
  )
  implicit class UserLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, auth.User]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, auth.User](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def accountId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accountId)((c_, f_) => c_.copy(accountId = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def encryptedPassword: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.encryptedPassword)((c_, f_) => c_.copy(encryptedPassword = f_))
    def isActive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isActive)((c_, f_) => c_.copy(isActive = f_))
    def upserted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.upserted)((c_, f_) => c_.copy(upserted = f_))
  }
  final val ID_FIELD_NUMBER = 2
  final val ACCOUNT_ID_FIELD_NUMBER = 3
  final val EMAIL_FIELD_NUMBER = 5
  final val ENCRYPTED_PASSWORD_FIELD_NUMBER = 17
  final val IS_ACTIVE_FIELD_NUMBER = 18
  final val UPSERTED_FIELD_NUMBER = 19
}
