// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package notibox

@SerialVersionUID(0L)
final case class AllType(
    nts: scala.Option[notibox.Notifications] = None,
    listr: scala.Option[notibox.ListRequest] = None,
    rno: scala.Option[notibox.ReadNotification] = None,
    anorfr: scala.Option[notibox.AddNotificationRequest] = None,
    noti: scala.Option[notibox.Notification] = None,
    box: scala.Option[notibox.Box] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AllType] with scalapb.lenses.Updatable[AllType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (nts.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(nts.get.serializedSize) + nts.get.serializedSize }
      if (listr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(listr.get.serializedSize) + listr.get.serializedSize }
      if (rno.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rno.get.serializedSize) + rno.get.serializedSize }
      if (anorfr.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(anorfr.get.serializedSize) + anorfr.get.serializedSize }
      if (noti.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(noti.get.serializedSize) + noti.get.serializedSize }
      if (box.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(box.get.serializedSize) + box.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      nts.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      listr.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rno.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      anorfr.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      noti.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      box.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): notibox.AllType = {
      var __nts = this.nts
      var __listr = this.listr
      var __rno = this.rno
      var __anorfr = this.anorfr
      var __noti = this.noti
      var __box = this.box
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __nts = Option(_root_.scalapb.LiteParser.readMessage(_input__, __nts.getOrElse(notibox.Notifications.defaultInstance)))
          case 26 =>
            __listr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __listr.getOrElse(notibox.ListRequest.defaultInstance)))
          case 34 =>
            __rno = Option(_root_.scalapb.LiteParser.readMessage(_input__, __rno.getOrElse(notibox.ReadNotification.defaultInstance)))
          case 42 =>
            __anorfr = Option(_root_.scalapb.LiteParser.readMessage(_input__, __anorfr.getOrElse(notibox.AddNotificationRequest.defaultInstance)))
          case 50 =>
            __noti = Option(_root_.scalapb.LiteParser.readMessage(_input__, __noti.getOrElse(notibox.Notification.defaultInstance)))
          case 66 =>
            __box = Option(_root_.scalapb.LiteParser.readMessage(_input__, __box.getOrElse(notibox.Box.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      notibox.AllType(
          nts = __nts,
          listr = __listr,
          rno = __rno,
          anorfr = __anorfr,
          noti = __noti,
          box = __box
      )
    }
    def getNts: notibox.Notifications = nts.getOrElse(notibox.Notifications.defaultInstance)
    def clearNts: AllType = copy(nts = None)
    def withNts(__v: notibox.Notifications): AllType = copy(nts = Option(__v))
    def getListr: notibox.ListRequest = listr.getOrElse(notibox.ListRequest.defaultInstance)
    def clearListr: AllType = copy(listr = None)
    def withListr(__v: notibox.ListRequest): AllType = copy(listr = Option(__v))
    def getRno: notibox.ReadNotification = rno.getOrElse(notibox.ReadNotification.defaultInstance)
    def clearRno: AllType = copy(rno = None)
    def withRno(__v: notibox.ReadNotification): AllType = copy(rno = Option(__v))
    def getAnorfr: notibox.AddNotificationRequest = anorfr.getOrElse(notibox.AddNotificationRequest.defaultInstance)
    def clearAnorfr: AllType = copy(anorfr = None)
    def withAnorfr(__v: notibox.AddNotificationRequest): AllType = copy(anorfr = Option(__v))
    def getNoti: notibox.Notification = noti.getOrElse(notibox.Notification.defaultInstance)
    def clearNoti: AllType = copy(noti = None)
    def withNoti(__v: notibox.Notification): AllType = copy(noti = Option(__v))
    def getBox: notibox.Box = box.getOrElse(notibox.Box.defaultInstance)
    def clearBox: AllType = copy(box = None)
    def withBox(__v: notibox.Box): AllType = copy(box = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => nts.orNull
        case 3 => listr.orNull
        case 4 => rno.orNull
        case 5 => anorfr.orNull
        case 6 => noti.orNull
        case 8 => box.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => nts.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => listr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => rno.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => anorfr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => noti.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => box.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = notibox.AllType
}

object AllType extends scalapb.GeneratedMessageCompanion[notibox.AllType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[notibox.AllType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): notibox.AllType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    notibox.AllType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[notibox.Notifications]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[notibox.ListRequest]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[notibox.ReadNotification]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[notibox.AddNotificationRequest]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[notibox.Notification]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[notibox.Box]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[notibox.AllType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      notibox.AllType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[notibox.Notifications]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[notibox.ListRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[notibox.ReadNotification]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[notibox.AddNotificationRequest]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[notibox.Notification]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[notibox.Box]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = NotiboxProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = NotiboxProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = notibox.Notifications
      case 3 => __out = notibox.ListRequest
      case 4 => __out = notibox.ReadNotification
      case 5 => __out = notibox.AddNotificationRequest
      case 6 => __out = notibox.Notification
      case 8 => __out = notibox.Box
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = notibox.AllType(
  )
  implicit class AllTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, notibox.AllType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, notibox.AllType](_l) {
    def nts: _root_.scalapb.lenses.Lens[UpperPB, notibox.Notifications] = field(_.getNts)((c_, f_) => c_.copy(nts = Option(f_)))
    def optionalNts: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.Notifications]] = field(_.nts)((c_, f_) => c_.copy(nts = f_))
    def listr: _root_.scalapb.lenses.Lens[UpperPB, notibox.ListRequest] = field(_.getListr)((c_, f_) => c_.copy(listr = Option(f_)))
    def optionalListr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.ListRequest]] = field(_.listr)((c_, f_) => c_.copy(listr = f_))
    def rno: _root_.scalapb.lenses.Lens[UpperPB, notibox.ReadNotification] = field(_.getRno)((c_, f_) => c_.copy(rno = Option(f_)))
    def optionalRno: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.ReadNotification]] = field(_.rno)((c_, f_) => c_.copy(rno = f_))
    def anorfr: _root_.scalapb.lenses.Lens[UpperPB, notibox.AddNotificationRequest] = field(_.getAnorfr)((c_, f_) => c_.copy(anorfr = Option(f_)))
    def optionalAnorfr: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.AddNotificationRequest]] = field(_.anorfr)((c_, f_) => c_.copy(anorfr = f_))
    def noti: _root_.scalapb.lenses.Lens[UpperPB, notibox.Notification] = field(_.getNoti)((c_, f_) => c_.copy(noti = Option(f_)))
    def optionalNoti: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.Notification]] = field(_.noti)((c_, f_) => c_.copy(noti = f_))
    def box: _root_.scalapb.lenses.Lens[UpperPB, notibox.Box] = field(_.getBox)((c_, f_) => c_.copy(box = Option(f_)))
    def optionalBox: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[notibox.Box]] = field(_.box)((c_, f_) => c_.copy(box = f_))
  }
  final val NTS_FIELD_NUMBER = 2
  final val LISTR_FIELD_NUMBER = 3
  final val RNO_FIELD_NUMBER = 4
  final val ANORFR_FIELD_NUMBER = 5
  final val NOTI_FIELD_NUMBER = 6
  final val BOX_FIELD_NUMBER = 8
}
