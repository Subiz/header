// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package notibox

/** Notification represent an user's notification
  *
  * @param type
  *   type
  * @param data
  *  json
  */
@SerialVersionUID(0L)
final case class Notification(
    ctx: scala.Option[common.Context] = None,
    box: scala.Option[_root_.scala.Predef.String] = None,
    topic: scala.Option[_root_.scala.Predef.String] = None,
    `type`: scala.Option[_root_.scala.Predef.String] = None,
    data: scala.Option[_root_.scala.Predef.String] = None,
    created: scala.Option[_root_.scala.Long] = None,
    read: scala.Option[_root_.scala.Long] = None,
    view: scala.Option[_root_.scala.Boolean] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Notification] with scalapb.lenses.Updatable[Notification] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ctx.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ctx.get.serializedSize) + ctx.get.serializedSize }
      if (box.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, box.get) }
      if (topic.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, topic.get) }
      if (`type`.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, `type`.get) }
      if (data.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, data.get) }
      if (created.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, created.get) }
      if (read.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, read.get) }
      if (view.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(11, view.get) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ctx.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      box.foreach { __v =>
        _output__.writeString(3, __v)
      };
      `type`.foreach { __v =>
        _output__.writeString(5, __v)
      };
      created.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      data.foreach { __v =>
        _output__.writeString(8, __v)
      };
      read.foreach { __v =>
        _output__.writeInt64(9, __v)
      };
      topic.foreach { __v =>
        _output__.writeString(10, __v)
      };
      view.foreach { __v =>
        _output__.writeBool(11, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): notibox.Notification = {
      var __ctx = this.ctx
      var __box = this.box
      var __topic = this.topic
      var __type = this.`type`
      var __data = this.data
      var __created = this.created
      var __read = this.read
      var __view = this.view
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ctx = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ctx.getOrElse(common.Context.defaultInstance)))
          case 26 =>
            __box = Option(_input__.readString())
          case 82 =>
            __topic = Option(_input__.readString())
          case 42 =>
            __type = Option(_input__.readString())
          case 66 =>
            __data = Option(_input__.readString())
          case 48 =>
            __created = Option(_input__.readInt64())
          case 72 =>
            __read = Option(_input__.readInt64())
          case 88 =>
            __view = Option(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      notibox.Notification(
          ctx = __ctx,
          box = __box,
          topic = __topic,
          `type` = __type,
          data = __data,
          created = __created,
          read = __read,
          view = __view
      )
    }
    def getCtx: common.Context = ctx.getOrElse(common.Context.defaultInstance)
    def clearCtx: Notification = copy(ctx = None)
    def withCtx(__v: common.Context): Notification = copy(ctx = Option(__v))
    def getBox: _root_.scala.Predef.String = box.getOrElse("")
    def clearBox: Notification = copy(box = None)
    def withBox(__v: _root_.scala.Predef.String): Notification = copy(box = Option(__v))
    def getTopic: _root_.scala.Predef.String = topic.getOrElse("")
    def clearTopic: Notification = copy(topic = None)
    def withTopic(__v: _root_.scala.Predef.String): Notification = copy(topic = Option(__v))
    def getType: _root_.scala.Predef.String = `type`.getOrElse("")
    def clearType: Notification = copy(`type` = None)
    def withType(__v: _root_.scala.Predef.String): Notification = copy(`type` = Option(__v))
    def getData: _root_.scala.Predef.String = data.getOrElse("")
    def clearData: Notification = copy(data = None)
    def withData(__v: _root_.scala.Predef.String): Notification = copy(data = Option(__v))
    def getCreated: _root_.scala.Long = created.getOrElse(0L)
    def clearCreated: Notification = copy(created = None)
    def withCreated(__v: _root_.scala.Long): Notification = copy(created = Option(__v))
    def getRead: _root_.scala.Long = read.getOrElse(0L)
    def clearRead: Notification = copy(read = None)
    def withRead(__v: _root_.scala.Long): Notification = copy(read = Option(__v))
    def getView: _root_.scala.Boolean = view.getOrElse(false)
    def clearView: Notification = copy(view = None)
    def withView(__v: _root_.scala.Boolean): Notification = copy(view = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ctx.orNull
        case 3 => box.orNull
        case 10 => topic.orNull
        case 5 => `type`.orNull
        case 8 => data.orNull
        case 6 => created.orNull
        case 9 => read.orNull
        case 11 => view.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ctx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => box.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => topic.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `type`.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => data.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => created.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => read.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => view.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = notibox.Notification
}

object Notification extends scalapb.GeneratedMessageCompanion[notibox.Notification] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[notibox.Notification] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): notibox.Notification = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    notibox.Notification(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[common.Context]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.scala.Long]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[_root_.scala.Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[notibox.Notification] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      notibox.Notification(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[common.Context]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[_root_.scala.Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = NotiboxProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = NotiboxProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = common.Context
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = notibox.Notification(
  )
  implicit class NotificationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, notibox.Notification]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, notibox.Notification](_l) {
    def ctx: _root_.scalapb.lenses.Lens[UpperPB, common.Context] = field(_.getCtx)((c_, f_) => c_.copy(ctx = Option(f_)))
    def optionalCtx: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[common.Context]] = field(_.ctx)((c_, f_) => c_.copy(ctx = f_))
    def box: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getBox)((c_, f_) => c_.copy(box = Option(f_)))
    def optionalBox: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.box)((c_, f_) => c_.copy(box = f_))
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTopic)((c_, f_) => c_.copy(topic = Option(f_)))
    def optionalTopic: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
    def optionalType: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Predef.String]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCreated)((c_, f_) => c_.copy(created = Option(f_)))
    def optionalCreated: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def read: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getRead)((c_, f_) => c_.copy(read = Option(f_)))
    def optionalRead: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.read)((c_, f_) => c_.copy(read = f_))
    def view: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getView)((c_, f_) => c_.copy(view = Option(f_)))
    def optionalView: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Boolean]] = field(_.view)((c_, f_) => c_.copy(view = f_))
  }
  final val CTX_FIELD_NUMBER = 1
  final val BOX_FIELD_NUMBER = 3
  final val TOPIC_FIELD_NUMBER = 10
  final val TYPE_FIELD_NUMBER = 5
  final val DATA_FIELD_NUMBER = 8
  final val CREATED_FIELD_NUMBER = 6
  final val READ_FIELD_NUMBER = 9
  final val VIEW_FIELD_NUMBER = 11
}
