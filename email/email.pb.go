// Code generated by protoc-gen-go. DO NOT EDIT.
// source: email/email.proto

/*
Package email is a generated protocol buffer package.

It is generated from these files:
	email/email.proto

It has these top-level messages:
	Email
	Attachment
*/
package email

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bitbucket.org/subiz/header/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_Email_SendRequest Event = 0
)

var Event_name = map[int32]string{
	0: "Email_SendRequest",
}
var Event_value = map[string]int32{
	"Email_SendRequest": 0,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Email struct {
	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	From string          `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	// string to = 4;
	Subject     string            `protobuf:"bytes,5,opt,name=subject" json:"subject,omitempty"`
	Body        string            `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	Header      map[string]string `protobuf:"bytes,7,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Attachments []*Attachment     `protobuf:"bytes,8,rep,name=attachments" json:"attachments,omitempty"`
	To          []string          `protobuf:"bytes,9,rep,name=to" json:"to,omitempty"`
	Cc          []string          `protobuf:"bytes,10,rep,name=cc" json:"cc,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Email) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Email) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Email) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Email) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Email) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Email) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Email) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Email) GetCc() []string {
	if m != nil {
		return m.Cc
	}
	return nil
}

type Attachment struct {
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Mimetype string `protobuf:"bytes,4,opt,name=mimetype" json:"mimetype,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Attachment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Attachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attachment) GetMimetype() string {
	if m != nil {
		return m.Mimetype
	}
	return ""
}

func init() {
	proto.RegisterType((*Email)(nil), "email.Email")
	proto.RegisterType((*Attachment)(nil), "email.Attachment")
	proto.RegisterEnum("email.Event", Event_name, Event_value)
}

func init() { proto.RegisterFile("email/email.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0xb5, 0x2d, 0x05, 0x3a, 0x4d, 0x14, 0x36, 0x9a, 0x6c, 0x38, 0x98, 0xca, 0xa9, 0xf1, 0xd0,
	0x1a, 0xb8, 0xa8, 0x37, 0x63, 0x48, 0x3c, 0x79, 0xa8, 0x3f, 0xc0, 0xb4, 0xcb, 0x28, 0x15, 0xb6,
	0x8b, 0xed, 0x94, 0x50, 0x7f, 0x94, 0xbf, 0xd1, 0xec, 0xb6, 0x20, 0x97, 0xdd, 0xf7, 0x66, 0xde,
	0xdb, 0xf9, 0x58, 0x18, 0xa3, 0x4c, 0xf3, 0x4d, 0x6c, 0xce, 0x68, 0x5b, 0x2a, 0x52, 0xcc, 0x35,
	0x64, 0x12, 0x65, 0x39, 0x65, 0xb5, 0x58, 0x23, 0x45, 0xaa, 0xfc, 0x8c, 0xab, 0x3a, 0xcb, 0x7f,
	0xe2, 0x15, 0xa6, 0x4b, 0x2c, 0x63, 0xa1, 0xa4, 0x54, 0x45, 0x77, 0xb5, 0xb6, 0xe9, 0xaf, 0x0d,
	0xee, 0x42, 0x3b, 0xd9, 0x0d, 0x38, 0x82, 0xf6, 0xdc, 0x0a, 0xac, 0xd0, 0x9f, 0x5d, 0x44, 0x9d,
	0xea, 0x59, 0x15, 0x84, 0x7b, 0x4a, 0x74, 0x8e, 0x31, 0xe8, 0x7d, 0x94, 0x4a, 0x72, 0x27, 0xb0,
	0x42, 0x2f, 0x31, 0x98, 0x71, 0x18, 0x54, 0x75, 0xf6, 0x85, 0x82, 0xb8, 0x6b, 0xc2, 0x07, 0xaa,
	0xd5, 0x99, 0x5a, 0x36, 0xbc, 0xdf, 0xaa, 0x35, 0x66, 0x77, 0xd0, 0x6f, 0x9b, 0xe1, 0x83, 0xc0,
	0x09, 0xfd, 0x19, 0x8f, 0xda, 0x19, 0x4c, 0x0b, 0xd1, 0x8b, 0x49, 0x2d, 0x0a, 0x2a, 0x9b, 0xa4,
	0xd3, 0xb1, 0x39, 0xf8, 0x29, 0x51, 0x2a, 0x56, 0x12, 0x0b, 0xaa, 0xf8, 0xd0, 0xd8, 0xc6, 0x9d,
	0xed, 0xe9, 0x98, 0x49, 0x4e, 0x55, 0xec, 0x1c, 0x6c, 0x52, 0xdc, 0x0b, 0x9c, 0xd0, 0x4b, 0x6c,
	0x52, 0x9a, 0x0b, 0xc1, 0xa1, 0xe5, 0x42, 0x4c, 0x1e, 0xc0, 0x3f, 0xa9, 0xc5, 0x46, 0xe0, 0xac,
	0xb1, 0x31, 0xa3, 0x7b, 0x89, 0x86, 0xec, 0x12, 0xdc, 0x5d, 0xba, 0xa9, 0x91, 0xdb, 0x26, 0xd6,
	0x92, 0x47, 0xfb, 0xde, 0x9a, 0xbe, 0x02, 0xfc, 0x57, 0xd5, 0xce, 0xba, 0xdc, 0x74, 0x2a, 0x0d,
	0xf5, 0xd4, 0x45, 0x2a, 0xf1, 0xb0, 0x23, 0x8d, 0xd9, 0x04, 0x86, 0x32, 0x97, 0x48, 0xcd, 0x16,
	0x79, 0xcf, 0xc4, 0x8f, 0xfc, 0xf6, 0x1a, 0xdc, 0xc5, 0x4e, 0x3f, 0x75, 0x05, 0x63, 0xb3, 0x85,
	0xf7, 0x37, 0x2c, 0x96, 0x09, 0x7e, 0xd7, 0x58, 0xd1, 0xe8, 0x2c, 0xeb, 0x9b, 0x7f, 0x9a, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x2d, 0x59, 0xa6, 0xf3, 0x01, 0x00, 0x00,
}
