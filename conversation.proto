syntax = "proto2";

package conversation;

option go_package = "github.com/subiz/header/conversation";

import "common.proto";

message CountByTagsRequest {
	optional string account_id = 2;
	optional string integration_id = 3;
	repeated string tag_ids = 4;
	optional int32 from = 5; // deprecated
	optional int32 to = 6; // deprecated
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
	optional bool has_user = 9;
	optional int32 from_hour = 10;
	optional int32 to_hour = 11;
}

message CountByTag {
	optional string tag_id = 2;
	repeated int64 data = 3;
}

message CountByTagsResponse {
	repeated CountByTag data = 2;
}

message AvgResponseTimeRequest {
	optional string account_id = 2;
	optional string integration_id = 3;
	optional int32 from = 5; // deprecated
	optional int32 to = 6; // deprecated
	optional int32 from_hour = 7;
	optional int32 to_hour = 8;
}

message AvgResponseTimeResponse {
	optional double avg_response_sec = 2;
}

message TotalConversationResponse {
	optional int64 total_conversation = 2;
}

message AvailibilityReportRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string from = 5; // try date --rfc-3339=seconds date in rfc 3339 seconds standard. E.g: 2019-03-07T10:42:01+07:00
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
		month = 2;
	}
	optional int32 number_of_points = 13;
}

message CountReportRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;

	optional string integration_id = 3;
	optional string metric = 4;
	optional string from = 5; // try date --rfc-3339=seconds
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}

	optional string agent_id = 10;
	optional string group_id = 11;
	optional string tag_id = 12;
	optional int32 number_of_points = 13;
}

message ReportResponse {
	optional common.Context ctx = 1;
	optional string from = 3;
	optional string range = 4;
	repeated int64 data = 5;
}

message FilterCondition {
	optional string operator = 1; // eq | ne ...
	optional string value = 2; // encoded json
}

message SearchConversationRequest {
	optional string account_id = 2;
	optional string user_id = 3;
	optional string state = 4; // deprecated
	optional int64 limit = 6;
	optional string anchor = 7;
	optional string connector_id = 8; // deprecated
	optional string text = 9;
	repeated string tag_ids = 10;
	optional FilterCondition message_created = 11;
	repeated string states = 12;
	repeated string connector_ids = 14; // channel
}

message SearchConversationResponse {
	// optional int64 total = 2;
	repeated string conversation_ids = 3;
	optional string anchor = 4;
	repeated ESConversationMessage result = 5; // for preview matched messages
}

// conversation for index in elastic search
message ESConversation {
	optional string account_id = 2;
	optional string user_id = 3;
	repeated string tag_ids = 4;
 	optional string state = 5;
	optional string id = 9;
	optional int64 created = 10; // unix seconds
	repeated string segment_ids = 11;
	optional bool is_replied = 12; // deprecated
	optional int64 replied_at = 13; // deprecated
	repeated string assigned_agent_ids = 14;
	optional string assigned_group_id = 15;
	repeated string agent_ids = 16; // deprecated
	optional string connector_id = 17;
	optional string channel_source = 18;
	optional int64 last_message_time = 19;
	optional string connector_type = 20;
	optional bool user_replied = 22;
	optional bool agent_replied = 23;
	optional int64 agent_replied_at = 24; // unix seconds
	optional bool replied_by_bots = 25;
	optional bool replied_by_agents = 26;
	message ResponseTime {
		optional string agent_id = 1;
		optional int64 seconds = 2;
	}
	repeated ResponseTime response_times = 27;
	repeated string replied_agent_ids = 28;
}

// conversation message for index in elastic search
message ESConversationMessage {
	optional string account_id = 2;
	optional string user_id = 3;
	optional string conversation_state = 5;
	optional string connector_id = 7;
	optional string text = 8;
	optional string conversation_id = 9;
	optional int64 created = 10; // unix seconds
	optional string id = 11; // event id
	repeated string conversation_tag_ids = 12;
}

message ConversationListRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string assigned_agent_id = 3;
	optional string assigned_group_id = 4;
	optional bool agent_replied = 6;
	optional FilterCondition agent_replied_at = 7;
	optional FilterCondition created = 9;
	repeated string connector_ids = 10;
	optional string channel_source = 11;
	optional string anchor = 14;
	optional int64 limit = 15;
	repeated string agent_ids = 16; // any of
	optional FilterCondition user_id = 17;
	optional FilterCondition tag_ids = 18;
	repeated string connector_types = 19; // any of
	optional FilterCondition state = 20;
	optional bool user_replied = 21;
	optional bool replied_by_bots = 22;
	optional bool replied_by_agents = 23;
	optional FilterCondition response_time = 24;
	optional string replied_agent_id = 25;
}

message ConversationListResponse {
	optional string anchor = 2;
	repeated ESConversation result = 3;
	optional int64 total = 4;
	repeated string conversation_ids = 5;
}

message ReportConversationsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string assigned_agent_id = 3;
	optional string assigned_group_id = 4;
	optional bool agent_replied = 6;
	optional FilterCondition agent_replied_at = 7;
	optional FilterCondition created = 9;
	repeated string connector_ids = 10;
	optional string channel_source = 11;
	repeated string agent_ids = 16; // any of
	optional FilterCondition user_id = 17;
	optional FilterCondition tag_ids = 18;
	repeated string connector_types = 19; // any of
	optional FilterCondition state = 20;
	optional bool user_replied = 21;
	optional bool replied_by_bots = 22;
	optional bool replied_by_agents = 23;
	optional FilterCondition response_time = 24;
	optional string replied_agent_id = 25;
	optional string range = 26; // hour | day
	optional int64 number_of_points = 29;
	optional string from = 30; // rfc3339
}
