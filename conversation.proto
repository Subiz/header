syntax = "proto2";

package conversation;

option go_package = "github.com/subiz/header/conversation";

import "common.proto";
import "user3.proto";
import "user.proto";

message Rule {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional int32 priority = 4;
	enum AssignStrategy {
		all_agents = 0;
		agentgroup = 2;
		agents = 3;
		most_recent = 4;
		roundrobin_all_agents = 5;
		roundrobin_agents = 6;
	}
	optional string strategy = 5;
	repeated string assign_tos = 6;
	optional bool enabled = 8;
	optional int64 created = 9;
	optional int64 modified = 12;
	optional string name = 10;
	optional string description = 11;
	optional bool available_agents_only = 13;
	optional user.SCondition condition = 14;
}

message AvailabilityCheckRequest {
	optional common.Context ctx = 1;
	optional string integration_id = 3;
	optional user.User user = 4;
	optional string account_id = 5;
	optional string user_id = 6;
}

message AvailabilityCheckResult {
	optional common.Context ctx = 1;
	optional bool availability = 2;
	optional string reason = 3;
	optional string payload = 5;
	optional string integration_id = 6;
	optional string account_id = 7;
}

message Route {
	optional common.Context ctx = 1;
	repeated Rule rules = 2;
}

message RouteResult {
	optional string rule_id = 1;
	optional string strategy = 3;
	repeated string agent_ids = 4;
	optional string group_id = 5;
}

message MemberSeen {
	optional string member_id = 2;
	optional string message_id = 3;
}

message Member {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string type = 3; // type
	optional string subiz_id = 8;
	optional string id = 4;
	optional string name = 10;
	optional string avatar_url = 6;

	optional string conversation_id = 13;
	repeated Field fields = 14;
	optional string last_page_view_url = 15;
	optional string membership = 12;
	enum State {
		active = 0;
		left = 1;
		observer = 2;
	};
	optional common.By invited_by = 16;
}

enum State {
	none = 0; // convo
	unassigned = 2; // convo
	active = 6; // convo
	ended = 8; // convo
	pending = 9; // ticket and convo

	all = 10; // ticket
	open = 11; // ticket
	resolved = 13; // ticket
	closed = 14; // ticket
}

message Conversation {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional int64 created = 4;
	repeated Member members = 7;
	repeated Tag tags = 10;
	optional int64 ended = 12;
	optional string state = 11; // converation state
	optional int64 accepted = 15; // time chat is accepted after being in unassigned list

	optional Integration integration = 18;
	optional int64 actived = 19;
	optional string last_message_id = 21; // internal use only
	optional Message last_message = 20;
	optional int64 response_sec = 22;

	optional string chain_id = 24;
	optional Ticket ticket = 27;
	optional string ticket_id = 28;
	optional RouteResult assigned_to = 30;

	optional string first_message = 31;
	optional string subject = 32;
}

message UserConversation { // used in database
	optional string account_id = 6;
	optional string state = 11;
	optional string user_id = 2;
	optional string convo_id = 4;
	optional string last_seen_event = 5;
}

message StartRequest {
	optional common.Context ctx = 1;

	optional string account_id = 3;
	optional int64 created = 13;
	optional string conversation_id = 14;

	optional user.User user = 25;
	optional string integration_id = 26;
	optional string chain_id = 27;
	optional string message = 30;
	repeated Member members = 31;
}

message Conversations {
	optional common.Context ctx = 1;
	repeated Conversation conversations = 3;
	optional string anchor = 4;
	repeated string user_ids = 5;
}

message Search {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string keyword = 4;
	optional int32 limit = 5;
	optional string before_id = 6;
	optional string after_id = 7;
}

message ListConversationsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 3;
	optional string state = 4; // empty or unassigned
	optional string member_id = 8;
	optional string group_by = 9;
	optional string integration_id = 10;
	optional string user_id = 11;
	optional int32 limit = 5;
	optional string anchor = 6;
}

message ListEventsRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string start_id = 4;
	optional int32 limit = 6;
}

message ListConversationsByUserRequest {
	optional string account_id = 1;
	optional string channel_id = 2; // if null -> all channel
	optional string user_id = 3; // must be visitor id
	optional string start_id = 4;
	optional int32 limit = 5;
}

message Reaction {
	optional string name = 3;
	optional int32 count = 4;
	repeated string users = 5;
}

message EsMessage {
	optional string id = 2;
	optional string account_id = 3;
	optional string conversation_id = 4;
	repeated string member_ids = 5;
	optional string text = 6;
	repeated string attachments = 7;
	repeated string fields = 8;
}

message Message {
	optional common.Context ctx = 1;
	optional string account_id = 5;
	optional string conversation_id = 14;
	optional string id = 11;
	optional string text = 2;
	optional string format = 3;
	repeated Attachment attachments = 4;
	repeated Reaction reactions = 7;
	repeated Field fields =	10;
	optional Computed computed = 12;
	optional string integration_id = 15;
	optional string chain_id = 16;
}

message Computed {
	repeated Seen seen = 4;
	repeated Ack ack = 5;
	repeated Received received = 6;
}

message Seen {
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string event_id = 10;
	optional string member_id = 6;
	optional int64 at = 4;
}

message Ack {
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string event_id = 10;
	optional string member_id = 5;
	optional string error = 6;
	optional int64 at = 4;
}

message Received {
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string event_id = 10;
	optional string member_id = 4;
	optional int64 at = 5;
}

message Field {
	optional string value = 3;
	optional string key = 2;
}

message Button {
	enum ButtonType {
		url_button = 2;
		postback_button = 3;
		event_button = 4;
		call_button = 5;
		widget_ask_desktop_notify_button = 6;
		widget_ask_contact_info_button = 7;
	}

	optional string type = 2;

	optional string id = 15;
	// post back
	optional string title = 3;
	optional string payload = 4;
	optional string image_url = 5;
	optional string content_id = 10;

	//	optional RawEvent event = 12;
	optional string url = 14;

	optional string phone_number = 16;
}

message AskInfomationAnswer {
	optional string message_id = 2;
	optional string answer = 3;
}

message AskInfomation {
	optional string question = 2;
	optional string input_type = 3;
	optional string key = 4; // user.name user.phone
	optional string answer = 5;
	optional int64 answered = 6;
	enum InputType {
		phone = 0;
		email = 1;
		text = 2;
		password = 3;
		number = 4;
		date = 5;
		color = 6;
		location = 7;
		time = 8;
		url = 9;
	}
}

message ContentTemplate {
	optional string image_url = 2;
	optional string description = 5;
	optional string title = 6;
	optional string url = 7;
	repeated string labels = 8;
	enum Availability {
		in_stock = 1;
		out_of_stock = 2;
		preorder = 3;
		discontinued = 4;
	}
	optional string availability = 9;

	optional float price = 10;
	optional string currency = 11;
	optional float sale_price = 12;

	repeated string categories = 14;
	repeated string attachment_urls = 20;
	repeated string related_ids = 21; // releated content ids

	optional Button default_action = 22;
	repeated Button buttons = 23;
	optional string id = 24;
}

message GenericElementTemplate {
	optional string title = 2;
	optional string image_url = 3;
	optional string subtitle = 4;
	optional Button default_action = 5;
	repeated Button buttons = 6;
}

enum AttachmentType {
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
	input = 6;
	ask_info_form = 7;
	ask_info_form_answer = 8;
	form = 9;
	form_submit = 10;
	fallback = 11;
	content_template = 12;
	quick_replies = 13;
}

message Attachment {
	optional string type = 12;
	// file
	optional string mimetype = 2;
	optional string url = 3;
	optional string thumbnail_url = 4;
	optional string name = 5;
	optional string description = 6;
	//optional string data = 7; // for custom data
	optional int32 length = 15;
	optional int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;

	// preview
	optional string title = 9;
	optional string color = 10;
	optional string pretext = 11;

	repeated Button buttons = 16;
	optional AskInfomation ask_info = 17;
	optional AskInfomationAnswer ask_info_answer = 18;
	//repeated string inputtype = 17;

	optional Form form = 20;
	optional FormSubmit form_submit = 21;

	// content template
	repeated ContentTemplate contents = 22;

	repeated QuickReply quick_replies = 23;
}

message QuickReply {
	optional string content_type = 2; // should be 'text'
	optional string title = 3;
	optional string payload = 4;
	optional string image_url = 5;
}

message Form {
	optional string title = 2;
	optional string state = 3;
	repeated FormField fields = 4;
	optional string submit_url = 5;
}

message FormSubmit {
	optional string form_message_id = 2;
	repeated FormField fields = 3;
	optional string state = 4;
}

message FormField {
	optional string input_type = 2;
	repeated string items = 3;
	optional string state = 4;
	optional string title = 5;
	optional string image_url = 6;
	optional string name = 7;
	optional string answer = 8;
	optional int64 answered = 9;
}

message Tag {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	optional string title = 4;
	optional int64 created = 5;
	optional int64 modified = 6;
	optional string creator_id = 7;
	optional string color = 8;
}

message TemplateData {
	optional string type = 4;
	optional string key = 2;
	repeated string ids = 3;
}

message Template {
	optional common.Context ctx = 1;
	optional string id = 2;
	optional string account_id = 3;
	repeated string keys = 6;
	optional string channel_type = 17;
	optional Message message = 8;
	repeated TemplateData data = 18;
	optional bool is_public = 11;
	optional int64 created = 12;
	optional int64 modified = 13;
	optional string creator = 14;
}

message SearchTemplate {
	optional common.Context ctx = 1;
	optional string anchor = 2;
	optional int32 limit = 3;
	optional string account_id = 5;
}

message Templates {
	optional common.Context ctx = 1;
	repeated Template templates = 2;
	optional string anchor = 3;
	optional int64 total = 4;
}

message Tags {
	optional common.Context ctx = 1;
	repeated Tag tags = 4;
}

message Postback {
	optional Message message = 2;
	optional Button button = 3;
}

message UseConnector {
	optional string account_id = 2;
	optional string connector_id = 3;

	enum State {
		disabled = 0;
		activated = 1;
	}
	optional string state = 8;

	optional string updated = 9;
	optional string by = 10;
}

message Integrations {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	repeated Integration integrations = 3;
}

message Integration {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string connector_id = 3;
	optional string logo_url = 4;
	optional string name = 5;

	optional string connector_type = 12; // see client.Client_ChannelType
	optional int64 integrated = 6;
	optional int64 updated = 7;
	optional string state = 8;
	enum State {
		disabled = 0;
		activated = 1;
	}
	optional string id = 10; // generated by connector, must be format of accid.XXX.connectorid
}

message SearchMessageRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	repeated string user_ids = 4;
	optional string query = 5;
	optional string anchor = 6;
	optional int32 limit = 7;
}

message MessageId {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string message_id = 4;
}

message MessageAck {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string message_id = 4;
	optional string error = 5;
}

message TagRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string id = 4;
}

message CountByTagsRequest {
	optional string account_id = 2;
	optional string integration_id = 3;
	repeated string tag_ids = 4;
	optional int32 from = 5; // deprecated
	optional int32 to = 6; // deprecated
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}
	optional bool has_user = 9;
	optional int32 from_hour = 10;
	optional int32 to_hour = 11;
}

message CountByTag {
	optional string tag_id = 2;
	repeated int64 data = 3;
}

message CountByTagsResponse {
	repeated CountByTag data = 2;
}

message AvgResponseTimeRequest {
	optional string account_id = 2;
	optional string integration_id = 3;
	optional int32 from = 5; // deprecated
	optional int32 to = 6; // deprecated
	optional int32 from_hour = 7;
	optional int32 to_hour = 8;
}

message AvgResponseTimeResponse {
	optional double avg_response_sec = 2;
}

message TotalConversationResponse {
	optional int64 total_conversation = 2;
}

message Chain {
	optional string account_id = 2;
	optional string id = 3;
	optional string conversation_id = 4;
}

enum Path {
	ConversationSendMessageToConvo = 0;
	ConversationSendMessageToChain = 1;
	ConversationEndChain = 2;
	ConversationEndConvo = 3;
	ConversationStartConvo = 4;
	ConversationStartInChain = 5;
	ConversationAcceptConvo = 6;
	ConversationAcceptChain = 7;
	ConversationJoinConvo = 8;
	ConversationJoinChain = 9;
	ConversationLeaveConvo = 10;
	ConversationLeaveChain = 11;
	ConversationTagConvo = 13;
	ConversationTagChain = 14;
	ConversationJustSendConvo = 15;
	ConversationJustSendChain = 16;
	ConversationUpdateStateConvo = 17;
	ConversationUpdateStateChain = 18;
	ConversationCreateTicket = 19;
	ConversationUpdateTicket = 20;
	ConversationSendWebhook = 21;
	ConversationDeleteTicket = 22;
}

message Ticket {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string id = 4;
	optional string state = 5;
	optional string priority = 6; // deprecated
	optional int64 duedate = 7;
	optional string subject = 8;
	optional int64 created = 9;
	repeated TicketAttributeData attributes = 10;

	optional int64 updated = 11;
	repeated string user_ids = 12;
	repeated string agent_ids = 13;
	optional bool is_assigned = 14;
	optional string updated_by = 15;
	optional string created_by = 16;
}

message TicketListRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string state = 3; // "", "open", "resolved"
	optional string agent_id = 4;
	enum TicketListOrderBy {
		created = 1;
		duedate = 2;
		updated = 3;
	}
	optional string order_by = 5; // created, duedate, updated
	optional string anchor = 6;
	optional int32 limit = 7;
	optional bool is_assigned = 8;
}

message Tickets {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	repeated Ticket tickets = 3;
	optional string anchor = 4;
}

enum TicketPriority {
	low = 0;
	medium = 1;
	high = 2;
	urgent = 3;
}

enum TicketAttributeType {
	text = 0;
	number = 1;
	boolean = 2;
	datetime = 3;
	list = 4;
}

enum TicketAttributeKind {
	system = 0;
	default = 1;
	custom = 2;
}

message TicketAttributeDefinition {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string name = 3;
	optional string description = 4;
	optional string type = 5;
	repeated string list_items = 6;
	optional string key = 7;
	optional string kind = 8;
	optional int64 updated = 9;
}

message TicketAttributeDefinitions {
	optional common.Context ctx = 1;
	repeated TicketAttributeDefinition attributes = 2;
}

enum TicketAttributeDataState {
	live = 0;
	deleted = 1;
}

message TicketAttributeData {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string ticket_id = 3;
	optional string key = 4;

	optional string state = 6;
	optional int64 created = 7;
	optional int64 modified = 8;

	optional string text = 10;
	optional double number = 11;
	optional bool boolean = 12;
	optional string datetime = 13;
	repeated string list = 14;

	optional string setter = 16;
	optional string setter_type = 17;
}

message ServiceLevelAgreementTarget {
	optional string priority = 1;
	optional int32 resolve_within = 2; // hours
	enum OperationalHours {
		BUSINESS_HOURS = 0;
	}
	optional string operational_hours = 3;
	optional bool notification = 4;
}

message ServiceLevelAgreement {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string id = 3;
	optional string name = 4;
	optional string description = 5;

	enum AssignStrategy {
		ALL_AGENTS = 0;
		AGENT_GROUP = 1;
		AGENT = 2;
	}
	optional string strategy = 6;
	optional string assign_to = 7; // agent id, group id

	repeated ServiceLevelAgreementTarget targets = 8;
	optional bool is_default = 9;
	optional int64 created = 10;
	optional int64 updated = 11;
	optional int32 order = 12;
}

message ServiceLevelAgreements {
	optional common.Context ctx = 1;
	repeated ServiceLevelAgreement service_level_agreements = 2;
}

message DeleteTicketAttrRequest {
	optional common.Context ctx = 1;
	optional string key = 2;
}

message GetTicketRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string id = 4;
}

message DeleteTicketRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string conversation_id = 3;
	optional string id = 4;
}

message ReportTicket {
	optional string id = 2;
	optional string account_id = 3;
	optional string integration_id = 4;
	optional string state = 5;
	optional string priority = 6;
	repeated string agent_ids = 7;
	repeated string tag_ids = 8;
	optional int64 created_at = 9;
	optional int64 resolved_at = 10;
	optional bool is_resolved = 11;
	optional int64 resolve_time = 12; // seconds
	optional string group_id = 14;
	optional int64 closed_at = 15;
	optional bool is_unresolved = 16;
	optional bool is_violated = 17;
	optional bool has_agent = 18;
	repeated string user_ids = 19;
}

message CountTicketRequest {
	optional string account_id = 3;
	optional string integration_id = 4;
	optional string state = 5;
	optional string priority = 6;
	optional string agent_id = 7;
	optional string tag_id = 8;
	optional string group_id = 9;
	optional bool is_resolved = 10;
	optional bool has_agent = 11;
	optional int32 from_hour = 13;
	optional int32 to_hour = 14;
	optional string range = 15;
	enum Range {
		hour = 0;
		day = 1;
	}
	optional bool is_unresolved = 16;
	optional bool is_violated = 17;
	optional string user_id = 18;
}

message CountTicketResponse {
	repeated int64 data = 2;
}

message AvgResolveTimeRequest {
	optional string account_id = 2;
	optional string integration_id = 3;
	optional string priority = 4;
	optional string agent_id = 5;
	optional string tag_id = 6;
	optional string group_id = 7;
	optional int32 from_hour = 9;
	optional int32 to_hour = 10;
	optional string range = 11;
	enum Range {
		hour = 0;
		day = 1;
	}
}

message AvgResolveTimeResponse {
	optional double avg_resolve_sec = 2;
}

message AvailibilityReportRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string agent_id = 3;
	optional string from = 5; // try date --rfc-3339=seconds date in rfc 3339 seconds standard. E.g: 2019-03-07T10:42:01+07:00
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
		month = 2;
	}
	optional int32 number_of_points = 13;
}

// Report metrics
enum Metric {
	created_conversations = 0; // all conversation
	created_conversations_by_agent = 2;
	created_conversations_by_group = 3;
	created_conversations_by_tag = 4;

	agent_replied_conversations = 6;
	agent_replied_conversations_by_agents = 7;
	agent_replied_conversations_by_bots = 8;
	agent_replied_conversations_by_agent = 9;
	agent_replied_conversations_by_group = 10;
	agent_replied_conversations_by_tag = 11;

	user_replied_conversations = 12;
	user_replied_conversations_by_agent = 13;
	user_replied_conversations_by_group = 14;
	user_replied_conversations_by_tag = 15;

	agent_repling_conversations = 16;
	agent_repling_conversations_by_agents = 17;
	agent_repling_conversations_by_bots = 18;
	agent_repling_conversations_by_agent = 19;
	agent_repling_conversations_by_group = 20;

	no_agent_replied_in_1min_conversations = 32;
	agent_non_replied_in_1min_conversations = 34;

	no_agent_replied_in_5min_conversations = 35;
	agent_non_replied_in_5min_conversations = 37;

	no_agent_replied_in_15min_conversations = 38;
	agent_non_replied_in_15min_conversations = 40;

	no_agent_replied_in_24hour_conversations = 41;
	agent_non_replied_in_24hour_conversations = 43;
}

message CountReportRequest {
	optional common.Context ctx = 1;
	optional string account_id = 2;

	optional string integration_id = 3;
	optional string metric = 4;
	optional string from = 5; // try date --rfc-3339=seconds
	optional string range = 8;
	enum Range {
		hour = 0;
		day = 1;
	}

	optional string agent_id = 10;
	optional string group_id = 11;
	optional string tag_id = 12;
	optional int32 number_of_points = 13;
}

message ReportResponse {
	optional common.Context ctx = 1;
	optional string from = 3;
	optional string range = 4;
	repeated int64 data = 5;
}

message ConversationAgg {
	optional common.Context ctx = 1;
	optional string account_id = 2;
	optional string metric = 3;
	optional int32 hour = 4;
	optional string integration_id = 5;
}

message ConversationMetadata {
	optional string account_id = 2;
	optional string id = 3;
	// optional string state = 6;
	optional int64 created = 7;
	optional string integration_id = 8;
	optional string activated_by = 9;
	optional int64 first_user_replied = 10;
	map<string,int64> first_agent_replied = 11;
	map<string,int64> agent_joined = 12;
}

message FilterUserRequest {
	optional string account_id = 2;
	repeated string conversation_tags = 3;
	optional string conversation_state = 4;
	optional string ticket_status = 5;
	optional int64 limit = 6;
	optional string anchor = 7;
    message Condition {
	    optional string operator = 1;
	    optional string value = 2; // encoded json
    }
    optional string conversation_created = 8; // encoded json of Condition
}

message FilterUserResponse {
	// optional int64 total = 2;
	repeated string user_ids = 3;
	optional string anchor = 4;
}

message SearchConversationRequest {
	optional string account_id = 2;
	optional string user_id = 3;
	optional string state = 4;
	optional string ticket_status = 5;
	optional int64 limit = 6;
	optional string anchor = 7;
	optional string connector_id = 8; // channel
	optional string text = 9;
}

message SearchConversationResponse {
	// optional int64 total = 2;
	repeated string conversation_ids = 3;
	optional string anchor = 4;
}

// conversation for index in elastic search
message ESConversation {
	optional string account_id = 2;
	optional string user_id = 3;
	repeated string tags = 4;
	optional string state = 5;
	optional string ticket_status = 6;
	optional string id = 9;
	optional int64 created = 10; // unix seconds
}

// conversation message for index in elastic search
message ESConversationMessage {
	optional string account_id = 2;
	optional string user_id = 3;
	optional string conversation_state = 5;
	optional string ticket_status = 6;
	optional string connector_id = 7;
	optional string text = 8;
	optional string conversation_id = 9;
	optional int64 created = 10; // unix seconds
	optional string id = 11; // event id
}
