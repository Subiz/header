// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitbucket.org/subiz/header/lang/lang.proto

package lang;

public final class Lang {
  private Lang() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code lang.T}
   */
  public enum T
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>undefined = 0;</code>
     */
    undefined(0),
    /**
     * <code>user_has_already_in_conversation = 1;</code>
     */
    user_has_already_in_conversation(1),
    /**
     * <code>conversation_closed = 2;</code>
     */
    conversation_closed(2),
    /**
     * <code>invalid_invite = 3;</code>
     */
    invalid_invite(3),
    /**
     * <code>invalid_agent = 4;</code>
     */
    invalid_agent(4),
    /**
     * <code>member_is_not_in_conversation = 5;</code>
     */
    member_is_not_in_conversation(5),
    /**
     * <code>conversation_not_found = 6;</code>
     */
    conversation_not_found(6),
    /**
     * <code>internal_error = 30;</code>
     */
    internal_error(30),
    /**
     * <code>invalid_input = 22;</code>
     */
    invalid_input(22),
    /**
     * <code>invalid_form = 20;</code>
     */
    invalid_form(20),
    /**
     * <code>access_token_expired = 21;</code>
     */
    access_token_expired(21),
    /**
     * <code>credential_not_set = 7;</code>
     */
    credential_not_set(7),
    /**
     * <code>wrong_account_in_credential = 8;</code>
     */
    wrong_account_in_credential(8),
    /**
     * <code>access_deny = 9;</code>
     */
    access_deny(9),
    /**
     * <code>wrong_user_in_credential = 10;</code>
     */
    wrong_user_in_credential(10),
    /**
     * <code>unable_to_send_message = 11;</code>
     */
    unable_to_send_message(11),
    /**
     * <code>topic_is_empty = 12;</code>
     */
    topic_is_empty(12),
    /**
     * <code>invalid_credential = 13;</code>
     */
    invalid_credential(13),
    /**
     * <code>invalid_left = 14;</code>
     */
    invalid_left(14),
    /**
     * <code>invalid_json = 15;</code>
     */
    invalid_json(15),
    /**
     * <code>invalid_protobuf = 16;</code>
     */
    invalid_protobuf(16),
    /**
     * <code>invalid_password = 17;</code>
     */
    invalid_password(17),
    /**
     * <code>wrong_password = 18;</code>
     */
    wrong_password(18),
    /**
     * <code>invalid_agent_state = 19;</code>
     */
    invalid_agent_state(19),
    /**
     * <code>unable_to_lock = 40;</code>
     */
    unable_to_lock(40),
    /**
     * <pre>
     * the varialbe must not be empty but is empty
     * </pre>
     *
     * <code>empty = 41;</code>
     */
    empty(41),
    /**
     * <code>wrong_type = 42;</code>
     */
    wrong_type(42),
    /**
     * <code>invalid_kafka_topic = 43;</code>
     */
    invalid_kafka_topic(43),
    /**
     * <code>database_error = 44;</code>
     */
    database_error(44),
    /**
     * <code>timeout = 45;</code>
     */
    timeout(45),
    /**
     * <code>websocket_error = 46;</code>
     */
    websocket_error(46),
    /**
     * <code>kafka_error = 47;</code>
     */
    kafka_error(47),
    /**
     * <code>invalid_token = 48;</code>
     */
    invalid_token(48),
    /**
     * <code>account_not_found = 49;</code>
     */
    account_not_found(49),
    /**
     * <code>agent_not_found = 50;</code>
     */
    agent_not_found(50),
    /**
     * <code>invalid_email = 60;</code>
     */
    invalid_email(60),
    /**
     * <code>plan_not_found = 61;</code>
     */
    plan_not_found(61),
    /**
     * <code>agent_group_not_found = 62;</code>
     */
    agent_group_not_found(62),
    /**
     * <code>empty_client_type = 63;</code>
     */
    empty_client_type(63),
    /**
     * <code>empty_url = 64;</code>
     */
    empty_url(64),
    /**
     * <code>empty_name = 65;</code>
     */
    empty_name(65),
    /**
     * <code>client_not_found = 66;</code>
     */
    client_not_found(66),
    /**
     * <code>empty_account = 70;</code>
     */
    empty_account(70),
    /**
     * <code>invalid_conversation_state = 71;</code>
     */
    invalid_conversation_state(71),
    /**
     * <code>invalid_message_id = 80;</code>
     */
    invalid_message_id(80),
    /**
     * <code>invalid_mask = 81;</code>
     */
    invalid_mask(81),
    /**
     * <code>randomize_error = 82;</code>
     */
    randomize_error(82),
    /**
     * <code>duplicated_message_received_error = 83;</code>
     */
    duplicated_message_received_error(83),
    /**
     * <code>network_error = 84;</code>
     */
    network_error(84),
    /**
     * <code>rsa_key_not_found = 85;</code>
     */
    rsa_key_not_found(85),
    /**
     * <code>jwt_sign_error = 86;</code>
     */
    jwt_sign_error(86),
    /**
     * <code>env_config_error = 87;</code>
     */
    env_config_error(87),
    /**
     * <code>scrypt_error = 90;</code>
     */
    scrypt_error(90),
    /**
     * <code>challenge_not_found = 91;</code>
     */
    challenge_not_found(91),
    /**
     * <code>wrong_answer = 92;</code>
     */
    wrong_answer(92),
    /**
     * <code>server_listen_error = 93;</code>
     */
    server_listen_error(93),
    /**
     * <code>scrypt_file_not_found = 94;</code>
     */
    scrypt_file_not_found(94),
    /**
     * <code>invalid_topic = 95;</code>
     */
    invalid_topic(95),
    /**
     * <code>file_not_found = 99;</code>
     */
    file_not_found(99),
    /**
     * <code>user_not_found = 100;</code>
     */
    user_not_found(100),
    /**
     * <code>empty_md5 = 101;</code>
     */
    empty_md5(101),
    /**
     * <code>base_convert_error = 102;</code>
     */
    base_convert_error(102),
    /**
     * <code>s3_error = 103;</code>
     */
    s3_error(103),
    /**
     * <code>aws_credential_error = 104;</code>
     */
    aws_credential_error(104),
    /**
     * <code>aws_send_error = 105;</code>
     */
    aws_send_error(105),
    /**
     * <code>elasticsearch_error = 200;</code>
     */
    elasticsearch_error(200),
    /**
     * <code>invalid_template = 203;</code>
     */
    invalid_template(203),
    /**
     * <code>sendgrid_send_error = 204;</code>
     */
    sendgrid_send_error(204),
    /**
     * <code>whitelist_domain_not_found = 205;</code>
     */
    whitelist_domain_not_found(205),
    /**
     * <code>blacklist_ip_not_found = 206;</code>
     */
    blacklist_ip_not_found(206),
    /**
     * <code>blocked_user_not_found = 207;</code>
     */
    blocked_user_not_found(207),
    /**
     * <code>invalid_content_type = 210;</code>
     */
    invalid_content_type(210),
    /**
     * <code>parse_file_error = 211;</code>
     */
    parse_file_error(211),
    /**
     * <code>invalid_integration_id = 220;</code>
     */
    invalid_integration_id(220),
    /**
     * <code>invalid_integration = 221;</code>
     */
    invalid_integration(221),
    /**
     * <code>webhook_not_found = 222;</code>
     */
    webhook_not_found(222),
    /**
     * <code>tempfile_error = 223;</code>
     */
    tempfile_error(223),
    /**
     * <code>write_file_error = 224;</code>
     */
    write_file_error(224),
    /**
     * <code>close_file_error = 225;</code>
     */
    close_file_error(225),
    /**
     * <code>execute_shell_error = 226;</code>
     */
    execute_shell_error(226),
    /**
     * <code>invalid_css = 227;</code>
     */
    invalid_css(227),
    /**
     * <code>invalid_hmac = 228;</code>
     */
    invalid_hmac(228),
    /**
     * <code>consul_error = 230;</code>
     */
    consul_error(230),
    /**
     * <code>maxminddb_err = 231;</code>
     */
    maxminddb_err(231),
    /**
     * <code>invalid_condition_key = 232;</code>
     */
    invalid_condition_key(232),
    /**
     * <code>invalid_po_file = 233;</code>
     */
    invalid_po_file(233),
    /**
     * <code>integration_not_found = 234;</code>
     */
    integration_not_found(234),
    /**
     * <code>webhook_is_disabled = 235;</code>
     */
    webhook_is_disabled(235),
    /**
     * <code>agent_not_activated = 240;</code>
     */
    agent_not_activated(240),
    /**
     * <code>empty_message = 242;</code>
     */
    empty_message(242),
    /**
     * <code>message_too_large = 243;</code>
     */
    message_too_large(243),
    /**
     * <code>unknown_message_format = 244;</code>
     */
    unknown_message_format(244),
    /**
     * <code>too_many_attachments = 245;</code>
     */
    too_many_attachments(245),
    /**
     * <code>too_many_fields = 246;</code>
     */
    too_many_fields(246),
    /**
     * <code>attachment_too_large = 247;</code>
     */
    attachment_too_large(247),
    /**
     * <code>invalid_end = 248;</code>
     */
    invalid_end(248),
    /**
     * <code>invalid_ack = 249;</code>
     */
    invalid_ack(249),
    /**
     * <code>message_not_found = 250;</code>
     */
    message_not_found(250),
    /**
     * <code>invalid_apikey = 255;</code>
     */
    invalid_apikey(255),
    /**
     * <code>invalid_access_token = 256;</code>
     */
    invalid_access_token(256),
    /**
     * <code>field_too_long = 257;</code>
     */
    field_too_long(257),
    /**
     * <code>invalid_join = 258;</code>
     */
    invalid_join(258),
    /**
     * <code>automation_not_found = 259;</code>
     */
    automation_not_found(259),
    /**
     * <code>invalid_automation_condition = 260;</code>
     */
    invalid_automation_condition(260),
    /**
     * <code>automation_cache_miss = 261;</code>
     */
    automation_cache_miss(261),
    /**
     * <code>segment_loop_duplicated = 262;</code>
     */
    segment_loop_duplicated(262),
    /**
     * <code>segment_loop_stale = 263;</code>
     */
    segment_loop_stale(263),
    /**
     * <code>segment_not_found = 264;</code>
     */
    segment_not_found(264),
    /**
     * <code>domain_is_blocked = 265;</code>
     */
    domain_is_blocked(265),
    /**
     * <code>user_is_blocked = 266;</code>
     */
    user_is_blocked(266),
    /**
     * <code>ip_is_blocked = 267;</code>
     */
    ip_is_blocked(267),
    /**
     * <code>stripe_error = 270;</code>
     */
    stripe_error(270),
    /**
     * <code>missing_stripe_token = 271;</code>
     */
    missing_stripe_token(271),
    /**
     * <code>missing_stripe_customer_id = 272;</code>
     */
    missing_stripe_customer_id(272),
    /**
     * <code>payment_method_not_found = 273;</code>
     */
    payment_method_not_found(273),
    /**
     * <code>not_enough_money = 274;</code>
     */
    not_enough_money(274),
    /**
     * <code>invalid_account = 275;</code>
     */
    invalid_account(275),
    /**
     * <code>invalid_payment_method = 276;</code>
     */
    invalid_payment_method(276),
    /**
     * <code>invalid_subscription = 278;</code>
     */
    invalid_subscription(278),
    /**
     * <code>invalid_plan = 279;</code>
     */
    invalid_plan(279),
    /**
     * <code>invoice_not_found = 280;</code>
     */
    invoice_not_found(280),
    /**
     * <code>billing_not_found = 281;</code>
     */
    billing_not_found(281),
    /**
     * <code>exchange_rate_not_found = 282;</code>
     */
    exchange_rate_not_found(282),
    /**
     * <code>invalid_join_free = 283;</code>
     */
    invalid_join_free(283),
    /**
     * <code>invalid_active_free = 284;</code>
     */
    invalid_active_free(284),
    /**
     * <code>kv_not_found = 285;</code>
     */
    kv_not_found(285),
    /**
     * <code>attribute_not_found = 286;</code>
     */
    attribute_not_found(286),
    /**
     * <code>attribute_key_not_found = 287;</code>
     */
    attribute_key_not_found(287),
    /**
     * <code>attribute_max_allowed = 288;</code>
     */
    attribute_max_allowed(288),
    /**
     * <code>invalid_attribute = 289;</code>
     */
    invalid_attribute(289),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>undefined = 0;</code>
     */
    public static final int undefined_VALUE = 0;
    /**
     * <code>user_has_already_in_conversation = 1;</code>
     */
    public static final int user_has_already_in_conversation_VALUE = 1;
    /**
     * <code>conversation_closed = 2;</code>
     */
    public static final int conversation_closed_VALUE = 2;
    /**
     * <code>invalid_invite = 3;</code>
     */
    public static final int invalid_invite_VALUE = 3;
    /**
     * <code>invalid_agent = 4;</code>
     */
    public static final int invalid_agent_VALUE = 4;
    /**
     * <code>member_is_not_in_conversation = 5;</code>
     */
    public static final int member_is_not_in_conversation_VALUE = 5;
    /**
     * <code>conversation_not_found = 6;</code>
     */
    public static final int conversation_not_found_VALUE = 6;
    /**
     * <code>internal_error = 30;</code>
     */
    public static final int internal_error_VALUE = 30;
    /**
     * <code>invalid_input = 22;</code>
     */
    public static final int invalid_input_VALUE = 22;
    /**
     * <code>invalid_form = 20;</code>
     */
    public static final int invalid_form_VALUE = 20;
    /**
     * <code>access_token_expired = 21;</code>
     */
    public static final int access_token_expired_VALUE = 21;
    /**
     * <code>credential_not_set = 7;</code>
     */
    public static final int credential_not_set_VALUE = 7;
    /**
     * <code>wrong_account_in_credential = 8;</code>
     */
    public static final int wrong_account_in_credential_VALUE = 8;
    /**
     * <code>access_deny = 9;</code>
     */
    public static final int access_deny_VALUE = 9;
    /**
     * <code>wrong_user_in_credential = 10;</code>
     */
    public static final int wrong_user_in_credential_VALUE = 10;
    /**
     * <code>unable_to_send_message = 11;</code>
     */
    public static final int unable_to_send_message_VALUE = 11;
    /**
     * <code>topic_is_empty = 12;</code>
     */
    public static final int topic_is_empty_VALUE = 12;
    /**
     * <code>invalid_credential = 13;</code>
     */
    public static final int invalid_credential_VALUE = 13;
    /**
     * <code>invalid_left = 14;</code>
     */
    public static final int invalid_left_VALUE = 14;
    /**
     * <code>invalid_json = 15;</code>
     */
    public static final int invalid_json_VALUE = 15;
    /**
     * <code>invalid_protobuf = 16;</code>
     */
    public static final int invalid_protobuf_VALUE = 16;
    /**
     * <code>invalid_password = 17;</code>
     */
    public static final int invalid_password_VALUE = 17;
    /**
     * <code>wrong_password = 18;</code>
     */
    public static final int wrong_password_VALUE = 18;
    /**
     * <code>invalid_agent_state = 19;</code>
     */
    public static final int invalid_agent_state_VALUE = 19;
    /**
     * <code>unable_to_lock = 40;</code>
     */
    public static final int unable_to_lock_VALUE = 40;
    /**
     * <pre>
     * the varialbe must not be empty but is empty
     * </pre>
     *
     * <code>empty = 41;</code>
     */
    public static final int empty_VALUE = 41;
    /**
     * <code>wrong_type = 42;</code>
     */
    public static final int wrong_type_VALUE = 42;
    /**
     * <code>invalid_kafka_topic = 43;</code>
     */
    public static final int invalid_kafka_topic_VALUE = 43;
    /**
     * <code>database_error = 44;</code>
     */
    public static final int database_error_VALUE = 44;
    /**
     * <code>timeout = 45;</code>
     */
    public static final int timeout_VALUE = 45;
    /**
     * <code>websocket_error = 46;</code>
     */
    public static final int websocket_error_VALUE = 46;
    /**
     * <code>kafka_error = 47;</code>
     */
    public static final int kafka_error_VALUE = 47;
    /**
     * <code>invalid_token = 48;</code>
     */
    public static final int invalid_token_VALUE = 48;
    /**
     * <code>account_not_found = 49;</code>
     */
    public static final int account_not_found_VALUE = 49;
    /**
     * <code>agent_not_found = 50;</code>
     */
    public static final int agent_not_found_VALUE = 50;
    /**
     * <code>invalid_email = 60;</code>
     */
    public static final int invalid_email_VALUE = 60;
    /**
     * <code>plan_not_found = 61;</code>
     */
    public static final int plan_not_found_VALUE = 61;
    /**
     * <code>agent_group_not_found = 62;</code>
     */
    public static final int agent_group_not_found_VALUE = 62;
    /**
     * <code>empty_client_type = 63;</code>
     */
    public static final int empty_client_type_VALUE = 63;
    /**
     * <code>empty_url = 64;</code>
     */
    public static final int empty_url_VALUE = 64;
    /**
     * <code>empty_name = 65;</code>
     */
    public static final int empty_name_VALUE = 65;
    /**
     * <code>client_not_found = 66;</code>
     */
    public static final int client_not_found_VALUE = 66;
    /**
     * <code>empty_account = 70;</code>
     */
    public static final int empty_account_VALUE = 70;
    /**
     * <code>invalid_conversation_state = 71;</code>
     */
    public static final int invalid_conversation_state_VALUE = 71;
    /**
     * <code>invalid_message_id = 80;</code>
     */
    public static final int invalid_message_id_VALUE = 80;
    /**
     * <code>invalid_mask = 81;</code>
     */
    public static final int invalid_mask_VALUE = 81;
    /**
     * <code>randomize_error = 82;</code>
     */
    public static final int randomize_error_VALUE = 82;
    /**
     * <code>duplicated_message_received_error = 83;</code>
     */
    public static final int duplicated_message_received_error_VALUE = 83;
    /**
     * <code>network_error = 84;</code>
     */
    public static final int network_error_VALUE = 84;
    /**
     * <code>rsa_key_not_found = 85;</code>
     */
    public static final int rsa_key_not_found_VALUE = 85;
    /**
     * <code>jwt_sign_error = 86;</code>
     */
    public static final int jwt_sign_error_VALUE = 86;
    /**
     * <code>env_config_error = 87;</code>
     */
    public static final int env_config_error_VALUE = 87;
    /**
     * <code>scrypt_error = 90;</code>
     */
    public static final int scrypt_error_VALUE = 90;
    /**
     * <code>challenge_not_found = 91;</code>
     */
    public static final int challenge_not_found_VALUE = 91;
    /**
     * <code>wrong_answer = 92;</code>
     */
    public static final int wrong_answer_VALUE = 92;
    /**
     * <code>server_listen_error = 93;</code>
     */
    public static final int server_listen_error_VALUE = 93;
    /**
     * <code>scrypt_file_not_found = 94;</code>
     */
    public static final int scrypt_file_not_found_VALUE = 94;
    /**
     * <code>invalid_topic = 95;</code>
     */
    public static final int invalid_topic_VALUE = 95;
    /**
     * <code>file_not_found = 99;</code>
     */
    public static final int file_not_found_VALUE = 99;
    /**
     * <code>user_not_found = 100;</code>
     */
    public static final int user_not_found_VALUE = 100;
    /**
     * <code>empty_md5 = 101;</code>
     */
    public static final int empty_md5_VALUE = 101;
    /**
     * <code>base_convert_error = 102;</code>
     */
    public static final int base_convert_error_VALUE = 102;
    /**
     * <code>s3_error = 103;</code>
     */
    public static final int s3_error_VALUE = 103;
    /**
     * <code>aws_credential_error = 104;</code>
     */
    public static final int aws_credential_error_VALUE = 104;
    /**
     * <code>aws_send_error = 105;</code>
     */
    public static final int aws_send_error_VALUE = 105;
    /**
     * <code>elasticsearch_error = 200;</code>
     */
    public static final int elasticsearch_error_VALUE = 200;
    /**
     * <code>invalid_template = 203;</code>
     */
    public static final int invalid_template_VALUE = 203;
    /**
     * <code>sendgrid_send_error = 204;</code>
     */
    public static final int sendgrid_send_error_VALUE = 204;
    /**
     * <code>whitelist_domain_not_found = 205;</code>
     */
    public static final int whitelist_domain_not_found_VALUE = 205;
    /**
     * <code>blacklist_ip_not_found = 206;</code>
     */
    public static final int blacklist_ip_not_found_VALUE = 206;
    /**
     * <code>blocked_user_not_found = 207;</code>
     */
    public static final int blocked_user_not_found_VALUE = 207;
    /**
     * <code>invalid_content_type = 210;</code>
     */
    public static final int invalid_content_type_VALUE = 210;
    /**
     * <code>parse_file_error = 211;</code>
     */
    public static final int parse_file_error_VALUE = 211;
    /**
     * <code>invalid_integration_id = 220;</code>
     */
    public static final int invalid_integration_id_VALUE = 220;
    /**
     * <code>invalid_integration = 221;</code>
     */
    public static final int invalid_integration_VALUE = 221;
    /**
     * <code>webhook_not_found = 222;</code>
     */
    public static final int webhook_not_found_VALUE = 222;
    /**
     * <code>tempfile_error = 223;</code>
     */
    public static final int tempfile_error_VALUE = 223;
    /**
     * <code>write_file_error = 224;</code>
     */
    public static final int write_file_error_VALUE = 224;
    /**
     * <code>close_file_error = 225;</code>
     */
    public static final int close_file_error_VALUE = 225;
    /**
     * <code>execute_shell_error = 226;</code>
     */
    public static final int execute_shell_error_VALUE = 226;
    /**
     * <code>invalid_css = 227;</code>
     */
    public static final int invalid_css_VALUE = 227;
    /**
     * <code>invalid_hmac = 228;</code>
     */
    public static final int invalid_hmac_VALUE = 228;
    /**
     * <code>consul_error = 230;</code>
     */
    public static final int consul_error_VALUE = 230;
    /**
     * <code>maxminddb_err = 231;</code>
     */
    public static final int maxminddb_err_VALUE = 231;
    /**
     * <code>invalid_condition_key = 232;</code>
     */
    public static final int invalid_condition_key_VALUE = 232;
    /**
     * <code>invalid_po_file = 233;</code>
     */
    public static final int invalid_po_file_VALUE = 233;
    /**
     * <code>integration_not_found = 234;</code>
     */
    public static final int integration_not_found_VALUE = 234;
    /**
     * <code>webhook_is_disabled = 235;</code>
     */
    public static final int webhook_is_disabled_VALUE = 235;
    /**
     * <code>agent_not_activated = 240;</code>
     */
    public static final int agent_not_activated_VALUE = 240;
    /**
     * <code>empty_message = 242;</code>
     */
    public static final int empty_message_VALUE = 242;
    /**
     * <code>message_too_large = 243;</code>
     */
    public static final int message_too_large_VALUE = 243;
    /**
     * <code>unknown_message_format = 244;</code>
     */
    public static final int unknown_message_format_VALUE = 244;
    /**
     * <code>too_many_attachments = 245;</code>
     */
    public static final int too_many_attachments_VALUE = 245;
    /**
     * <code>too_many_fields = 246;</code>
     */
    public static final int too_many_fields_VALUE = 246;
    /**
     * <code>attachment_too_large = 247;</code>
     */
    public static final int attachment_too_large_VALUE = 247;
    /**
     * <code>invalid_end = 248;</code>
     */
    public static final int invalid_end_VALUE = 248;
    /**
     * <code>invalid_ack = 249;</code>
     */
    public static final int invalid_ack_VALUE = 249;
    /**
     * <code>message_not_found = 250;</code>
     */
    public static final int message_not_found_VALUE = 250;
    /**
     * <code>invalid_apikey = 255;</code>
     */
    public static final int invalid_apikey_VALUE = 255;
    /**
     * <code>invalid_access_token = 256;</code>
     */
    public static final int invalid_access_token_VALUE = 256;
    /**
     * <code>field_too_long = 257;</code>
     */
    public static final int field_too_long_VALUE = 257;
    /**
     * <code>invalid_join = 258;</code>
     */
    public static final int invalid_join_VALUE = 258;
    /**
     * <code>automation_not_found = 259;</code>
     */
    public static final int automation_not_found_VALUE = 259;
    /**
     * <code>invalid_automation_condition = 260;</code>
     */
    public static final int invalid_automation_condition_VALUE = 260;
    /**
     * <code>automation_cache_miss = 261;</code>
     */
    public static final int automation_cache_miss_VALUE = 261;
    /**
     * <code>segment_loop_duplicated = 262;</code>
     */
    public static final int segment_loop_duplicated_VALUE = 262;
    /**
     * <code>segment_loop_stale = 263;</code>
     */
    public static final int segment_loop_stale_VALUE = 263;
    /**
     * <code>segment_not_found = 264;</code>
     */
    public static final int segment_not_found_VALUE = 264;
    /**
     * <code>domain_is_blocked = 265;</code>
     */
    public static final int domain_is_blocked_VALUE = 265;
    /**
     * <code>user_is_blocked = 266;</code>
     */
    public static final int user_is_blocked_VALUE = 266;
    /**
     * <code>ip_is_blocked = 267;</code>
     */
    public static final int ip_is_blocked_VALUE = 267;
    /**
     * <code>stripe_error = 270;</code>
     */
    public static final int stripe_error_VALUE = 270;
    /**
     * <code>missing_stripe_token = 271;</code>
     */
    public static final int missing_stripe_token_VALUE = 271;
    /**
     * <code>missing_stripe_customer_id = 272;</code>
     */
    public static final int missing_stripe_customer_id_VALUE = 272;
    /**
     * <code>payment_method_not_found = 273;</code>
     */
    public static final int payment_method_not_found_VALUE = 273;
    /**
     * <code>not_enough_money = 274;</code>
     */
    public static final int not_enough_money_VALUE = 274;
    /**
     * <code>invalid_account = 275;</code>
     */
    public static final int invalid_account_VALUE = 275;
    /**
     * <code>invalid_payment_method = 276;</code>
     */
    public static final int invalid_payment_method_VALUE = 276;
    /**
     * <code>invalid_subscription = 278;</code>
     */
    public static final int invalid_subscription_VALUE = 278;
    /**
     * <code>invalid_plan = 279;</code>
     */
    public static final int invalid_plan_VALUE = 279;
    /**
     * <code>invoice_not_found = 280;</code>
     */
    public static final int invoice_not_found_VALUE = 280;
    /**
     * <code>billing_not_found = 281;</code>
     */
    public static final int billing_not_found_VALUE = 281;
    /**
     * <code>exchange_rate_not_found = 282;</code>
     */
    public static final int exchange_rate_not_found_VALUE = 282;
    /**
     * <code>invalid_join_free = 283;</code>
     */
    public static final int invalid_join_free_VALUE = 283;
    /**
     * <code>invalid_active_free = 284;</code>
     */
    public static final int invalid_active_free_VALUE = 284;
    /**
     * <code>kv_not_found = 285;</code>
     */
    public static final int kv_not_found_VALUE = 285;
    /**
     * <code>attribute_not_found = 286;</code>
     */
    public static final int attribute_not_found_VALUE = 286;
    /**
     * <code>attribute_key_not_found = 287;</code>
     */
    public static final int attribute_key_not_found_VALUE = 287;
    /**
     * <code>attribute_max_allowed = 288;</code>
     */
    public static final int attribute_max_allowed_VALUE = 288;
    /**
     * <code>invalid_attribute = 289;</code>
     */
    public static final int invalid_attribute_VALUE = 289;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static T valueOf(int value) {
      return forNumber(value);
    }

    public static T forNumber(int value) {
      switch (value) {
        case 0: return undefined;
        case 1: return user_has_already_in_conversation;
        case 2: return conversation_closed;
        case 3: return invalid_invite;
        case 4: return invalid_agent;
        case 5: return member_is_not_in_conversation;
        case 6: return conversation_not_found;
        case 30: return internal_error;
        case 22: return invalid_input;
        case 20: return invalid_form;
        case 21: return access_token_expired;
        case 7: return credential_not_set;
        case 8: return wrong_account_in_credential;
        case 9: return access_deny;
        case 10: return wrong_user_in_credential;
        case 11: return unable_to_send_message;
        case 12: return topic_is_empty;
        case 13: return invalid_credential;
        case 14: return invalid_left;
        case 15: return invalid_json;
        case 16: return invalid_protobuf;
        case 17: return invalid_password;
        case 18: return wrong_password;
        case 19: return invalid_agent_state;
        case 40: return unable_to_lock;
        case 41: return empty;
        case 42: return wrong_type;
        case 43: return invalid_kafka_topic;
        case 44: return database_error;
        case 45: return timeout;
        case 46: return websocket_error;
        case 47: return kafka_error;
        case 48: return invalid_token;
        case 49: return account_not_found;
        case 50: return agent_not_found;
        case 60: return invalid_email;
        case 61: return plan_not_found;
        case 62: return agent_group_not_found;
        case 63: return empty_client_type;
        case 64: return empty_url;
        case 65: return empty_name;
        case 66: return client_not_found;
        case 70: return empty_account;
        case 71: return invalid_conversation_state;
        case 80: return invalid_message_id;
        case 81: return invalid_mask;
        case 82: return randomize_error;
        case 83: return duplicated_message_received_error;
        case 84: return network_error;
        case 85: return rsa_key_not_found;
        case 86: return jwt_sign_error;
        case 87: return env_config_error;
        case 90: return scrypt_error;
        case 91: return challenge_not_found;
        case 92: return wrong_answer;
        case 93: return server_listen_error;
        case 94: return scrypt_file_not_found;
        case 95: return invalid_topic;
        case 99: return file_not_found;
        case 100: return user_not_found;
        case 101: return empty_md5;
        case 102: return base_convert_error;
        case 103: return s3_error;
        case 104: return aws_credential_error;
        case 105: return aws_send_error;
        case 200: return elasticsearch_error;
        case 203: return invalid_template;
        case 204: return sendgrid_send_error;
        case 205: return whitelist_domain_not_found;
        case 206: return blacklist_ip_not_found;
        case 207: return blocked_user_not_found;
        case 210: return invalid_content_type;
        case 211: return parse_file_error;
        case 220: return invalid_integration_id;
        case 221: return invalid_integration;
        case 222: return webhook_not_found;
        case 223: return tempfile_error;
        case 224: return write_file_error;
        case 225: return close_file_error;
        case 226: return execute_shell_error;
        case 227: return invalid_css;
        case 228: return invalid_hmac;
        case 230: return consul_error;
        case 231: return maxminddb_err;
        case 232: return invalid_condition_key;
        case 233: return invalid_po_file;
        case 234: return integration_not_found;
        case 235: return webhook_is_disabled;
        case 240: return agent_not_activated;
        case 242: return empty_message;
        case 243: return message_too_large;
        case 244: return unknown_message_format;
        case 245: return too_many_attachments;
        case 246: return too_many_fields;
        case 247: return attachment_too_large;
        case 248: return invalid_end;
        case 249: return invalid_ack;
        case 250: return message_not_found;
        case 255: return invalid_apikey;
        case 256: return invalid_access_token;
        case 257: return field_too_long;
        case 258: return invalid_join;
        case 259: return automation_not_found;
        case 260: return invalid_automation_condition;
        case 261: return automation_cache_miss;
        case 262: return segment_loop_duplicated;
        case 263: return segment_loop_stale;
        case 264: return segment_not_found;
        case 265: return domain_is_blocked;
        case 266: return user_is_blocked;
        case 267: return ip_is_blocked;
        case 270: return stripe_error;
        case 271: return missing_stripe_token;
        case 272: return missing_stripe_customer_id;
        case 273: return payment_method_not_found;
        case 274: return not_enough_money;
        case 275: return invalid_account;
        case 276: return invalid_payment_method;
        case 278: return invalid_subscription;
        case 279: return invalid_plan;
        case 280: return invoice_not_found;
        case 281: return billing_not_found;
        case 282: return exchange_rate_not_found;
        case 283: return invalid_join_free;
        case 284: return invalid_active_free;
        case 285: return kv_not_found;
        case 286: return attribute_not_found;
        case 287: return attribute_key_not_found;
        case 288: return attribute_max_allowed;
        case 289: return invalid_attribute;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<T>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        T> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<T>() {
            public T findValueByNumber(int number) {
              return T.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return lang.Lang.getDescriptor().getEnumTypes().get(0);
    }

    private static final T[] VALUES = values();

    public static T valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private T(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lang.T)
  }

  /**
   * Protobuf enum {@code lang.L}
   */
  public enum L
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * english
     * </pre>
     *
     * <code>en = 0;</code>
     */
    en(0),
    /**
     * <pre>
     * vietnamese
     * </pre>
     *
     * <code>vn = 1;</code>
     */
    vn(1),
    /**
     * <pre>
     * chinese
     * </pre>
     *
     * <code>cn = 3;</code>
     */
    cn(3),
    /**
     * <pre>
     * french
     * </pre>
     *
     * <code>fr = 5;</code>
     */
    fr(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * english
     * </pre>
     *
     * <code>en = 0;</code>
     */
    public static final int en_VALUE = 0;
    /**
     * <pre>
     * vietnamese
     * </pre>
     *
     * <code>vn = 1;</code>
     */
    public static final int vn_VALUE = 1;
    /**
     * <pre>
     * chinese
     * </pre>
     *
     * <code>cn = 3;</code>
     */
    public static final int cn_VALUE = 3;
    /**
     * <pre>
     * french
     * </pre>
     *
     * <code>fr = 5;</code>
     */
    public static final int fr_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static L valueOf(int value) {
      return forNumber(value);
    }

    public static L forNumber(int value) {
      switch (value) {
        case 0: return en;
        case 1: return vn;
        case 3: return cn;
        case 5: return fr;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<L>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        L> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<L>() {
            public L findValueByNumber(int number) {
              return L.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return lang.Lang.getDescriptor().getEnumTypes().get(1);
    }

    private static final L[] VALUES = values();

    public static L valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private L(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lang.L)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*bitbucket.org/subiz/header/lang/lang.p" +
      "roto\022\004lang*\332\027\n\001T\022\r\n\tundefined\020\000\022$\n user_" +
      "has_already_in_conversation\020\001\022\027\n\023convers" +
      "ation_closed\020\002\022\022\n\016invalid_invite\020\003\022\021\n\rin" +
      "valid_agent\020\004\022!\n\035member_is_not_in_conver" +
      "sation\020\005\022\032\n\026conversation_not_found\020\006\022\022\n\016" +
      "internal_error\020\036\022\021\n\rinvalid_input\020\026\022\020\n\014i" +
      "nvalid_form\020\024\022\030\n\024access_token_expired\020\025\022" +
      "\026\n\022credential_not_set\020\007\022\037\n\033wrong_account" +
      "_in_credential\020\010\022\017\n\013access_deny\020\t\022\034\n\030wro",
      "ng_user_in_credential\020\n\022\032\n\026unable_to_sen" +
      "d_message\020\013\022\022\n\016topic_is_empty\020\014\022\026\n\022inval" +
      "id_credential\020\r\022\020\n\014invalid_left\020\016\022\020\n\014inv" +
      "alid_json\020\017\022\024\n\020invalid_protobuf\020\020\022\024\n\020inv" +
      "alid_password\020\021\022\022\n\016wrong_password\020\022\022\027\n\023i" +
      "nvalid_agent_state\020\023\022\022\n\016unable_to_lock\020(" +
      "\022\t\n\005empty\020)\022\016\n\nwrong_type\020*\022\027\n\023invalid_k" +
      "afka_topic\020+\022\022\n\016database_error\020,\022\013\n\007time" +
      "out\020-\022\023\n\017websocket_error\020.\022\017\n\013kafka_erro" +
      "r\020/\022\021\n\rinvalid_token\0200\022\025\n\021account_not_fo",
      "und\0201\022\023\n\017agent_not_found\0202\022\021\n\rinvalid_em" +
      "ail\020<\022\022\n\016plan_not_found\020=\022\031\n\025agent_group" +
      "_not_found\020>\022\025\n\021empty_client_type\020?\022\r\n\te" +
      "mpty_url\020@\022\016\n\nempty_name\020A\022\024\n\020client_not" +
      "_found\020B\022\021\n\rempty_account\020F\022\036\n\032invalid_c" +
      "onversation_state\020G\022\026\n\022invalid_message_i" +
      "d\020P\022\020\n\014invalid_mask\020Q\022\023\n\017randomize_error" +
      "\020R\022%\n!duplicated_message_received_error\020" +
      "S\022\021\n\rnetwork_error\020T\022\025\n\021rsa_key_not_foun" +
      "d\020U\022\022\n\016jwt_sign_error\020V\022\024\n\020env_config_er",
      "ror\020W\022\020\n\014scrypt_error\020Z\022\027\n\023challenge_not" +
      "_found\020[\022\020\n\014wrong_answer\020\\\022\027\n\023server_lis" +
      "ten_error\020]\022\031\n\025scrypt_file_not_found\020^\022\021" +
      "\n\rinvalid_topic\020_\022\022\n\016file_not_found\020c\022\022\n" +
      "\016user_not_found\020d\022\r\n\tempty_md5\020e\022\026\n\022base" +
      "_convert_error\020f\022\014\n\010s3_error\020g\022\030\n\024aws_cr" +
      "edential_error\020h\022\022\n\016aws_send_error\020i\022\030\n\023" +
      "elasticsearch_error\020\310\001\022\025\n\020invalid_templa" +
      "te\020\313\001\022\030\n\023sendgrid_send_error\020\314\001\022\037\n\032white" +
      "list_domain_not_found\020\315\001\022\033\n\026blacklist_ip",
      "_not_found\020\316\001\022\033\n\026blocked_user_not_found\020" +
      "\317\001\022\031\n\024invalid_content_type\020\322\001\022\025\n\020parse_f" +
      "ile_error\020\323\001\022\033\n\026invalid_integration_id\020\334" +
      "\001\022\030\n\023invalid_integration\020\335\001\022\026\n\021webhook_n" +
      "ot_found\020\336\001\022\023\n\016tempfile_error\020\337\001\022\025\n\020writ" +
      "e_file_error\020\340\001\022\025\n\020close_file_error\020\341\001\022\030" +
      "\n\023execute_shell_error\020\342\001\022\020\n\013invalid_css\020" +
      "\343\001\022\021\n\014invalid_hmac\020\344\001\022\021\n\014consul_error\020\346\001" +
      "\022\022\n\rmaxminddb_err\020\347\001\022\032\n\025invalid_conditio" +
      "n_key\020\350\001\022\024\n\017invalid_po_file\020\351\001\022\032\n\025integr",
      "ation_not_found\020\352\001\022\030\n\023webhook_is_disable" +
      "d\020\353\001\022\030\n\023agent_not_activated\020\360\001\022\022\n\rempty_" +
      "message\020\362\001\022\026\n\021message_too_large\020\363\001\022\033\n\026un" +
      "known_message_format\020\364\001\022\031\n\024too_many_atta" +
      "chments\020\365\001\022\024\n\017too_many_fields\020\366\001\022\031\n\024atta" +
      "chment_too_large\020\367\001\022\020\n\013invalid_end\020\370\001\022\020\n" +
      "\013invalid_ack\020\371\001\022\026\n\021message_not_found\020\372\001\022" +
      "\023\n\016invalid_apikey\020\377\001\022\031\n\024invalid_access_t" +
      "oken\020\200\002\022\023\n\016field_too_long\020\201\002\022\021\n\014invalid_" +
      "join\020\202\002\022\031\n\024automation_not_found\020\203\002\022!\n\034in",
      "valid_automation_condition\020\204\002\022\032\n\025automat" +
      "ion_cache_miss\020\205\002\022\034\n\027segment_loop_duplic" +
      "ated\020\206\002\022\027\n\022segment_loop_stale\020\207\002\022\026\n\021segm" +
      "ent_not_found\020\210\002\022\026\n\021domain_is_blocked\020\211\002" +
      "\022\024\n\017user_is_blocked\020\212\002\022\022\n\rip_is_blocked\020" +
      "\213\002\022\021\n\014stripe_error\020\216\002\022\031\n\024missing_stripe_" +
      "token\020\217\002\022\037\n\032missing_stripe_customer_id\020\220" +
      "\002\022\035\n\030payment_method_not_found\020\221\002\022\025\n\020not_" +
      "enough_money\020\222\002\022\024\n\017invalid_account\020\223\002\022\033\n" +
      "\026invalid_payment_method\020\224\002\022\031\n\024invalid_su",
      "bscription\020\226\002\022\021\n\014invalid_plan\020\227\002\022\026\n\021invo" +
      "ice_not_found\020\230\002\022\026\n\021billing_not_found\020\231\002" +
      "\022\034\n\027exchange_rate_not_found\020\232\002\022\026\n\021invali" +
      "d_join_free\020\233\002\022\030\n\023invalid_active_free\020\234\002" +
      "\022\021\n\014kv_not_found\020\235\002\022\030\n\023attribute_not_fou" +
      "nd\020\236\002\022\034\n\027attribute_key_not_found\020\237\002\022\032\n\025a" +
      "ttribute_max_allowed\020\240\002\022\026\n\021invalid_attri" +
      "bute\020\241\002*#\n\001L\022\006\n\002en\020\000\022\006\n\002vn\020\001\022\006\n\002cn\020\003\022\006\n\002" +
      "fr\020\005b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
