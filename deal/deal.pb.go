// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deal/deal.proto

package deal

import (
	fmt "fmt"
	common "git.subiz.net/header/common"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StageTypes int32

const (
	StageTypes_won    StageTypes = 0
	StageTypes_lost   StageTypes = 1
	StageTypes_custom StageTypes = 2
)

var StageTypes_name = map[int32]string{
	0: "won",
	1: "lost",
	2: "custom",
}

var StageTypes_value = map[string]int32{
	"won":    0,
	"lost":   1,
	"custom": 2,
}

func (x StageTypes) Enum() *StageTypes {
	p := new(StageTypes)
	*p = x
	return p
}

func (x StageTypes) String() string {
	return proto.EnumName(StageTypes_name, int32(x))
}

func (x *StageTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StageTypes_value, data, "StageTypes")
	if err != nil {
		return err
	}
	*x = StageTypes(value)
	return nil
}

func (StageTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{0}
}

type Currency_DecimalPlace int32

const (
	Currency_zero  Currency_DecimalPlace = 0
	Currency_one   Currency_DecimalPlace = 1
	Currency_two   Currency_DecimalPlace = 2
	Currency_three Currency_DecimalPlace = 3
	Currency_four  Currency_DecimalPlace = 4
	Currency_five  Currency_DecimalPlace = 5
)

var Currency_DecimalPlace_name = map[int32]string{
	0: "zero",
	1: "one",
	2: "two",
	3: "three",
	4: "four",
	5: "five",
}

var Currency_DecimalPlace_value = map[string]int32{
	"zero":  0,
	"one":   1,
	"two":   2,
	"three": 3,
	"four":  4,
	"five":  5,
}

func (x Currency_DecimalPlace) Enum() *Currency_DecimalPlace {
	p := new(Currency_DecimalPlace)
	*p = x
	return p
}

func (x Currency_DecimalPlace) String() string {
	return proto.EnumName(Currency_DecimalPlace_name, int32(x))
}

func (x *Currency_DecimalPlace) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_DecimalPlace_value, data, "Currency_DecimalPlace")
	if err != nil {
		return err
	}
	*x = Currency_DecimalPlace(value)
	return nil
}

func (Currency_DecimalPlace) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{5, 0}
}

type Currency_Format int32

const (
	Currency_DotComma   Currency_Format = 0
	Currency_CommaDot   Currency_Format = 1
	Currency_SpaceComma Currency_Format = 2
)

var Currency_Format_name = map[int32]string{
	0: "DotComma",
	1: "CommaDot",
	2: "SpaceComma",
}

var Currency_Format_value = map[string]int32{
	"DotComma":   0,
	"CommaDot":   1,
	"SpaceComma": 2,
}

func (x Currency_Format) Enum() *Currency_Format {
	p := new(Currency_Format)
	*p = x
	return p
}

func (x Currency_Format) String() string {
	return proto.EnumName(Currency_Format_name, int32(x))
}

func (x *Currency_Format) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_Format_value, data, "Currency_Format")
	if err != nil {
		return err
	}
	*x = Currency_Format(value)
	return nil
}

func (Currency_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{5, 1}
}

type Stage struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                   *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	PipelineId           *string         `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	Type                 *string         `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Name                 *string         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Probability          *float32        `protobuf:"fixed32,6,opt,name=probability" json:"probability,omitempty"`
	DisplayOrder         *int32          `protobuf:"varint,7,opt,name=display_order,json=displayOrder" json:"display_order,omitempty"`
	CloseWon             *bool           `protobuf:"varint,8,opt,name=close_won,json=closeWon" json:"close_won,omitempty"`
	CloseLost            *bool           `protobuf:"varint,9,opt,name=close_lost,json=closeLost" json:"close_lost,omitempty"`
	Created              *int64          `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated              *int64          `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Stage) Reset()         { *m = Stage{} }
func (m *Stage) String() string { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()    {}
func (*Stage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{0}
}

func (m *Stage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stage.Unmarshal(m, b)
}
func (m *Stage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stage.Marshal(b, m, deterministic)
}
func (m *Stage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stage.Merge(m, src)
}
func (m *Stage) XXX_Size() int {
	return xxx_messageInfo_Stage.Size(m)
}
func (m *Stage) XXX_DiscardUnknown() {
	xxx_messageInfo_Stage.DiscardUnknown(m)
}

var xxx_messageInfo_Stage proto.InternalMessageInfo

func (m *Stage) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Stage) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Stage) GetPipelineId() string {
	if m != nil && m.PipelineId != nil {
		return *m.PipelineId
	}
	return ""
}

func (m *Stage) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Stage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Stage) GetProbability() float32 {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return 0
}

func (m *Stage) GetDisplayOrder() int32 {
	if m != nil && m.DisplayOrder != nil {
		return *m.DisplayOrder
	}
	return 0
}

func (m *Stage) GetCloseWon() bool {
	if m != nil && m.CloseWon != nil {
		return *m.CloseWon
	}
	return false
}

func (m *Stage) GetCloseLost() bool {
	if m != nil && m.CloseLost != nil {
		return *m.CloseLost
	}
	return false
}

func (m *Stage) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Stage) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Pipeline struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                   *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	IsDefault            *bool           `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Stages               []*Stage        `protobuf:"bytes,5,rep,name=stages" json:"stages,omitempty"`
	Created              *int64          `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated              *int64          `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{1}
}

func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pipeline.Unmarshal(m, b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return xxx_messageInfo_Pipeline.Size(m)
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Pipeline) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Pipeline) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Pipeline) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *Pipeline) GetStages() []*Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Pipeline) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Pipeline) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Pipelines struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Pipelines            []*Pipeline     `protobuf:"bytes,2,rep,name=pipelines" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Pipelines) Reset()         { *m = Pipelines{} }
func (m *Pipelines) String() string { return proto.CompactTextString(m) }
func (*Pipelines) ProtoMessage()    {}
func (*Pipelines) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{2}
}

func (m *Pipelines) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pipelines.Unmarshal(m, b)
}
func (m *Pipelines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pipelines.Marshal(b, m, deterministic)
}
func (m *Pipelines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipelines.Merge(m, src)
}
func (m *Pipelines) XXX_Size() int {
	return xxx_messageInfo_Pipelines.Size(m)
}
func (m *Pipelines) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipelines.DiscardUnknown(m)
}

var xxx_messageInfo_Pipelines proto.InternalMessageInfo

func (m *Pipelines) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Pipelines) GetPipelines() []*Pipeline {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type ExchangeRate struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id                   *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	CurrencyId           *string         `protobuf:"bytes,3,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Rate                 *float32        `protobuf:"fixed32,4,opt,name=rate" json:"rate,omitempty"`
	EffectiveDate        *int64          `protobuf:"varint,5,opt,name=effective_date,json=effectiveDate" json:"effective_date,omitempty"`
	Created              *int64          `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExchangeRate) Reset()         { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()    {}
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{3}
}

func (m *ExchangeRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeRate.Unmarshal(m, b)
}
func (m *ExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeRate.Marshal(b, m, deterministic)
}
func (m *ExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRate.Merge(m, src)
}
func (m *ExchangeRate) XXX_Size() int {
	return xxx_messageInfo_ExchangeRate.Size(m)
}
func (m *ExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRate proto.InternalMessageInfo

func (m *ExchangeRate) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ExchangeRate) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ExchangeRate) GetCurrencyId() string {
	if m != nil && m.CurrencyId != nil {
		return *m.CurrencyId
	}
	return ""
}

func (m *ExchangeRate) GetRate() float32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *ExchangeRate) GetEffectiveDate() int64 {
	if m != nil && m.EffectiveDate != nil {
		return *m.EffectiveDate
	}
	return 0
}

func (m *ExchangeRate) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

type ExchangeRates struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	ExchangeRates        []*ExchangeRate `protobuf:"bytes,2,rep,name=exchange_rates,json=exchangeRates" json:"exchange_rates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExchangeRates) Reset()         { *m = ExchangeRates{} }
func (m *ExchangeRates) String() string { return proto.CompactTextString(m) }
func (*ExchangeRates) ProtoMessage()    {}
func (*ExchangeRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{4}
}

func (m *ExchangeRates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeRates.Unmarshal(m, b)
}
func (m *ExchangeRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeRates.Marshal(b, m, deterministic)
}
func (m *ExchangeRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRates.Merge(m, src)
}
func (m *ExchangeRates) XXX_Size() int {
	return xxx_messageInfo_ExchangeRates.Size(m)
}
func (m *ExchangeRates) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRates.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRates proto.InternalMessageInfo

func (m *ExchangeRates) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ExchangeRates) GetExchangeRates() []*ExchangeRate {
	if m != nil {
		return m.ExchangeRates
	}
	return nil
}

type Currency struct {
	Ctx                  *common.Context        `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string                `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                   *string                `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	IsBase               *bool                  `protobuf:"varint,4,opt,name=is_base,json=isBase" json:"is_base,omitempty"`
	Name                 *string                `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Code                 *string                `protobuf:"bytes,6,opt,name=code" json:"code,omitempty"`
	Symbol               *string                `protobuf:"bytes,7,opt,name=symbol" json:"symbol,omitempty"`
	DecimalPlace         *Currency_DecimalPlace `protobuf:"varint,8,opt,name=decimal_place,json=decimalPlace,enum=deal.Currency_DecimalPlace" json:"decimal_place,omitempty"`
	Format               *Currency_Format       `protobuf:"varint,9,opt,name=format,enum=deal.Currency_Format" json:"format,omitempty"`
	Created              *int64                 `protobuf:"varint,10,opt,name=created" json:"created,omitempty"`
	Updated              *int64                 `protobuf:"varint,11,opt,name=updated" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{5}
}

func (m *Currency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currency.Unmarshal(m, b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
}
func (m *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(m, src)
}
func (m *Currency) XXX_Size() int {
	return xxx_messageInfo_Currency.Size(m)
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Currency) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *Currency) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Currency) GetIsBase() bool {
	if m != nil && m.IsBase != nil {
		return *m.IsBase
	}
	return false
}

func (m *Currency) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Currency) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *Currency) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *Currency) GetDecimalPlace() Currency_DecimalPlace {
	if m != nil && m.DecimalPlace != nil {
		return *m.DecimalPlace
	}
	return Currency_zero
}

func (m *Currency) GetFormat() Currency_Format {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return Currency_DotComma
}

func (m *Currency) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *Currency) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

type Currencies struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Currencies           []*Currency     `protobuf:"bytes,2,rep,name=currencies" json:"currencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Currencies) Reset()         { *m = Currencies{} }
func (m *Currencies) String() string { return proto.CompactTextString(m) }
func (*Currencies) ProtoMessage()    {}
func (*Currencies) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{6}
}

func (m *Currencies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currencies.Unmarshal(m, b)
}
func (m *Currencies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currencies.Marshal(b, m, deterministic)
}
func (m *Currencies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currencies.Merge(m, src)
}
func (m *Currencies) XXX_Size() int {
	return xxx_messageInfo_Currencies.Size(m)
}
func (m *Currencies) XXX_DiscardUnknown() {
	xxx_messageInfo_Currencies.DiscardUnknown(m)
}

var xxx_messageInfo_Currencies proto.InternalMessageInfo

func (m *Currencies) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Currencies) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type DeleteExchangeRateRequest struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	CurrencyId           *string         `protobuf:"bytes,2,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Id                   *string         `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeleteExchangeRateRequest) Reset()         { *m = DeleteExchangeRateRequest{} }
func (m *DeleteExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteExchangeRateRequest) ProtoMessage()    {}
func (*DeleteExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad123631c1433c8, []int{7}
}

func (m *DeleteExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteExchangeRateRequest.Unmarshal(m, b)
}
func (m *DeleteExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteExchangeRateRequest.Marshal(b, m, deterministic)
}
func (m *DeleteExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExchangeRateRequest.Merge(m, src)
}
func (m *DeleteExchangeRateRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteExchangeRateRequest.Size(m)
}
func (m *DeleteExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExchangeRateRequest proto.InternalMessageInfo

func (m *DeleteExchangeRateRequest) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *DeleteExchangeRateRequest) GetCurrencyId() string {
	if m != nil && m.CurrencyId != nil {
		return *m.CurrencyId
	}
	return ""
}

func (m *DeleteExchangeRateRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("deal.StageTypes", StageTypes_name, StageTypes_value)
	proto.RegisterEnum("deal.Currency_DecimalPlace", Currency_DecimalPlace_name, Currency_DecimalPlace_value)
	proto.RegisterEnum("deal.Currency_Format", Currency_Format_name, Currency_Format_value)
	proto.RegisterType((*Stage)(nil), "deal.Stage")
	proto.RegisterType((*Pipeline)(nil), "deal.Pipeline")
	proto.RegisterType((*Pipelines)(nil), "deal.Pipelines")
	proto.RegisterType((*ExchangeRate)(nil), "deal.ExchangeRate")
	proto.RegisterType((*ExchangeRates)(nil), "deal.ExchangeRates")
	proto.RegisterType((*Currency)(nil), "deal.Currency")
	proto.RegisterType((*Currencies)(nil), "deal.Currencies")
	proto.RegisterType((*DeleteExchangeRateRequest)(nil), "deal.DeleteExchangeRateRequest")
}

func init() { proto.RegisterFile("deal/deal.proto", fileDescriptor_7ad123631c1433c8) }

var fileDescriptor_7ad123631c1433c8 = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x6b, 0xe3, 0x46,
	0x17, 0x8e, 0xe4, 0x8f, 0x58, 0xc7, 0xb6, 0xa2, 0x77, 0x5e, 0xda, 0xaa, 0x59, 0xc2, 0xba, 0x5e,
	0x0a, 0x6e, 0xb7, 0x75, 0xba, 0xa6, 0x50, 0x0a, 0xbd, 0x28, 0x8d, 0xb7, 0x4b, 0x60, 0xa1, 0x8b,
	0xd2, 0xd2, 0x9b, 0x82, 0x18, 0x4b, 0xc7, 0xc9, 0x80, 0xa4, 0x51, 0x35, 0xe3, 0x24, 0xde, 0x3f,
	0x56, 0xe8, 0xef, 0xe8, 0x4d, 0xe9, 0x9f, 0x29, 0x33, 0x23, 0x69, 0x65, 0xc5, 0x0b, 0x26, 0xd0,
	0x1b, 0xfb, 0xcc, 0xf9, 0xd2, 0x79, 0x9e, 0xf3, 0x01, 0x27, 0x31, 0xd2, 0xe4, 0x5c, 0xfd, 0xcc,
	0xf3, 0x82, 0x4b, 0x4e, 0xba, 0x4a, 0x3e, 0x9d, 0x5d, 0x33, 0x39, 0x17, 0x9b, 0x15, 0x7b, 0x3b,
	0xcf, 0x50, 0x9e, 0xdf, 0x20, 0x8d, 0xb1, 0x38, 0x8f, 0x78, 0x9a, 0xf2, 0xac, 0xfc, 0x33, 0xfe,
	0xd3, 0x3f, 0x6d, 0xe8, 0x5d, 0x49, 0x7a, 0x8d, 0xe4, 0x13, 0xe8, 0x44, 0xf2, 0xde, 0xb7, 0x26,
	0xd6, 0x6c, 0xb8, 0x38, 0x99, 0x97, 0x5e, 0x17, 0x3c, 0x93, 0x78, 0x2f, 0x03, 0x65, 0x23, 0x2e,
	0xd8, 0x2c, 0xf6, 0xed, 0x89, 0x35, 0x73, 0x02, 0x9b, 0xc5, 0xe4, 0x29, 0x0c, 0x73, 0x96, 0x63,
	0xc2, 0x32, 0x0c, 0x59, 0xec, 0x77, 0xb4, 0x01, 0x2a, 0xd5, 0x65, 0x4c, 0x08, 0x74, 0xe5, 0x36,
	0x47, 0xbf, 0xab, 0x2d, 0x5a, 0x56, 0xba, 0x8c, 0xa6, 0xe8, 0xf7, 0x8c, 0x4e, 0xc9, 0x64, 0x02,
	0xc3, 0xbc, 0xe0, 0x2b, 0xba, 0x62, 0x09, 0x93, 0x5b, 0xbf, 0x3f, 0xb1, 0x66, 0x76, 0xd0, 0x54,
	0x91, 0x67, 0x30, 0x8e, 0x99, 0xc8, 0x13, 0xba, 0x0d, 0x79, 0x11, 0x63, 0xe1, 0x1f, 0x4f, 0xac,
	0x59, 0x2f, 0x18, 0x95, 0xca, 0x9f, 0x94, 0x8e, 0x3c, 0x01, 0x27, 0x4a, 0xb8, 0xc0, 0xf0, 0x8e,
	0x67, 0xfe, 0x60, 0x62, 0xcd, 0x06, 0xc1, 0x40, 0x2b, 0x7e, 0xe5, 0x19, 0x39, 0x03, 0x30, 0xc6,
	0x84, 0x0b, 0xe9, 0x3b, 0xda, 0x6a, 0xdc, 0x5f, 0x73, 0x21, 0x89, 0x0f, 0xc7, 0x51, 0x81, 0x54,
	0x62, 0xec, 0xc3, 0xc4, 0x9a, 0x75, 0x82, 0xea, 0xa9, 0x2c, 0x9b, 0x3c, 0xd6, 0x96, 0xa1, 0xb1,
	0x94, 0xcf, 0xe9, 0x5f, 0x16, 0x0c, 0xde, 0x94, 0x68, 0x0f, 0xe1, 0xef, 0x0c, 0x80, 0x46, 0x11,
	0xdf, 0x64, 0x32, 0xac, 0x79, 0x74, 0x4a, 0xcd, 0x65, 0x5c, 0xd2, 0xdb, 0xa9, 0xe9, 0x3d, 0x03,
	0x60, 0x22, 0x8c, 0x71, 0x4d, 0x37, 0x89, 0xd4, 0x1c, 0x0e, 0x02, 0x87, 0x89, 0xa5, 0x51, 0x90,
	0x67, 0xd0, 0x17, 0xaa, 0x73, 0xc2, 0xef, 0x4d, 0x3a, 0xb3, 0xe1, 0x62, 0x38, 0xd7, 0x73, 0xa0,
	0xbb, 0x19, 0x94, 0xa6, 0x47, 0xc1, 0xfa, 0x0d, 0x9c, 0x0a, 0x95, 0x38, 0x04, 0xd6, 0x17, 0xe0,
	0x54, 0x3d, 0x17, 0xbe, 0xad, 0x6b, 0x71, 0x4d, 0x2d, 0x55, 0x9a, 0xe0, 0x9d, 0xc3, 0xf4, 0x0f,
	0x0b, 0x46, 0x2f, 0xef, 0xa3, 0x1b, 0x9a, 0x5d, 0x63, 0x40, 0xe5, 0x63, 0x07, 0x2f, 0xda, 0x14,
	0x05, 0x66, 0xd1, 0xb6, 0x31, 0x78, 0x95, 0xca, 0x0c, 0x5e, 0x41, 0xa5, 0x19, 0x3c, 0x3b, 0xd0,
	0x32, 0xf9, 0x14, 0x5c, 0x5c, 0xaf, 0x31, 0x92, 0xec, 0x16, 0x43, 0x85, 0x54, 0x8f, 0x60, 0x27,
	0x18, 0xd7, 0xda, 0xa5, 0x72, 0x7b, 0x2f, 0x63, 0xd3, 0x14, 0xc6, 0xcd, 0xc2, 0x0f, 0xe2, 0xe6,
	0x5b, 0x70, 0xb1, 0x8c, 0x09, 0x55, 0x15, 0x15, 0x41, 0xc4, 0x10, 0xd4, 0xcc, 0x17, 0x8c, 0xb1,
	0x99, 0x7d, 0xfa, 0x4f, 0x07, 0x06, 0x17, 0x25, 0xa4, 0xff, 0x60, 0xba, 0x3e, 0x82, 0x63, 0x26,
	0xc2, 0x15, 0x15, 0x58, 0x8e, 0x56, 0x9f, 0x89, 0x1f, 0xa8, 0xd8, 0xbf, 0xa0, 0x04, 0xba, 0x11,
	0x8f, 0x51, 0x6f, 0xa6, 0x13, 0x68, 0x99, 0x7c, 0x08, 0x7d, 0xb1, 0x4d, 0x57, 0x3c, 0xd1, 0xbb,
	0xe8, 0x04, 0xe5, 0x8b, 0x7c, 0x0f, 0xe3, 0x18, 0x23, 0x96, 0xd2, 0x24, 0xcc, 0x13, 0x1a, 0xa1,
	0xde, 0x44, 0x77, 0xf1, 0xc4, 0x20, 0xae, 0x10, 0xcd, 0x97, 0xc6, 0xe7, 0x8d, 0x72, 0x09, 0x46,
	0x71, 0xe3, 0x45, 0xbe, 0x84, 0xfe, 0x9a, 0x17, 0x29, 0x35, 0x6b, 0xea, 0x2e, 0x3e, 0x68, 0x85,
	0xfe, 0xa8, 0x8d, 0x41, 0xe9, 0xf4, 0xa8, 0x19, 0xbf, 0x84, 0x51, 0xb3, 0x00, 0x32, 0x80, 0xee,
	0x5b, 0x2c, 0xb8, 0x77, 0x44, 0x8e, 0xa1, 0xc3, 0x33, 0xf4, 0x2c, 0x25, 0xc8, 0x3b, 0xee, 0xd9,
	0xc4, 0x81, 0x9e, 0xbc, 0x29, 0x10, 0xbd, 0x8e, 0x72, 0x5b, 0xf3, 0x4d, 0xe1, 0x75, 0xb5, 0xc4,
	0x6e, 0xd1, 0xeb, 0x4d, 0xbf, 0x86, 0xbe, 0x29, 0x88, 0x8c, 0x60, 0xb0, 0xe4, 0xf2, 0x82, 0xa7,
	0x29, 0xf5, 0x8e, 0xd4, 0x4b, 0x8b, 0x4b, 0x2e, 0x3d, 0x8b, 0xb8, 0x00, 0x57, 0x39, 0x8d, 0xd0,
	0x58, 0xed, 0x69, 0x08, 0x50, 0xe2, 0x61, 0x87, 0x4d, 0xd2, 0x1c, 0xaa, 0x01, 0x67, 0xed, 0x35,
	0xab, 0x88, 0x09, 0x1a, 0x1e, 0x53, 0x0e, 0x1f, 0x2f, 0x31, 0x41, 0x89, 0x3b, 0x33, 0x86, 0xbf,
	0x6f, 0x50, 0xc8, 0x43, 0xbe, 0xd7, 0xda, 0x31, 0xfb, 0xc1, 0x8e, 0xb5, 0x06, 0xea, 0xf3, 0xe7,
	0x00, 0xfa, 0xf6, 0xfc, 0xbc, 0xcd, 0x51, 0x28, 0xf6, 0xee, 0x78, 0xe6, 0x1d, 0x29, 0xa2, 0xd4,
	0xc5, 0xf5, 0x2c, 0x02, 0xd0, 0x8f, 0x36, 0x42, 0xf2, 0xd4, 0xb3, 0x17, 0x7f, 0xf7, 0x60, 0xb8,
	0x44, 0x9a, 0x5c, 0x61, 0x71, 0xcb, 0x22, 0x24, 0x5f, 0x81, 0x7b, 0xa1, 0x9b, 0x56, 0xdf, 0xd3,
	0xd6, 0x09, 0x39, 0x6d, 0xbd, 0x55, 0xc4, 0x2f, 0xba, 0x99, 0x07, 0x47, 0x3c, 0x07, 0xd7, 0x30,
	0x52, 0x6b, 0xa0, 0x42, 0x7e, 0x19, 0x9f, 0x8e, 0x2b, 0xf9, 0x65, 0x9a, 0xcb, 0x2d, 0x39, 0x87,
	0xf1, 0x6b, 0x26, 0xe4, 0xbb, 0x43, 0xb8, 0x6b, 0x3f, 0x3d, 0xd9, 0x4d, 0x2e, 0xc8, 0x67, 0x30,
	0x7c, 0x85, 0x72, 0x6f, 0xea, 0x76, 0x21, 0x2f, 0xc0, 0x55, 0xb9, 0x1b, 0xfd, 0x6f, 0x25, 0xf7,
	0x76, 0xfa, 0xca, 0xea, 0xec, 0xf5, 0x39, 0xd8, 0x93, 0xbd, 0xb6, 0xd5, 0x54, 0xd6, 0x9a, 0x96,
	0xc7, 0xbe, 0x08, 0x43, 0xe5, 0xc1, 0x11, 0x35, 0x95, 0x7b, 0x2b, 0x6a, 0x51, 0xf9, 0x0d, 0xfc,
	0x4f, 0xc1, 0xdd, 0xbd, 0x9d, 0x2d, 0xc4, 0xff, 0x7f, 0x78, 0x0f, 0x05, 0x79, 0x01, 0x27, 0xaf,
	0x70, 0x27, 0x6e, 0xe7, 0x33, 0x7b, 0x6e, 0x28, 0xf9, 0x0e, 0x88, 0x01, 0xbf, 0xa3, 0xdd, 0xe3,
	0xb9, 0x37, 0x7a, 0x09, 0xe4, 0xe1, 0xce, 0x90, 0xa7, 0xc6, 0xf3, 0xbd, 0xdb, 0xd4, 0xc2, 0xfb,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x0b, 0xa8, 0x7e, 0x95, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DealServiceClient is the client API for DealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DealServiceClient interface {
	CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	DeletePipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListPipelines(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Pipelines, error)
	GetPipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Pipeline, error)
	ListCurrencies(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Currencies, error)
	GetCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Currency, error)
	CreateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*Currency, error)
	UpdateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*Currency, error)
	DeleteCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListExchangeRates(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ExchangeRates, error)
	GetExchangeRate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*ExchangeRate, error)
	CreateExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error)
	DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type dealServiceClient struct {
	cc *grpc.ClientConn
}

func NewDealServiceClient(cc *grpc.ClientConn) DealServiceClient {
	return &dealServiceClient{cc}
}

func (c *dealServiceClient) CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/deal.DealService/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/deal.DealService/UpdatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) DeletePipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/deal.DealService/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) ListPipelines(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := c.cc.Invoke(ctx, "/deal.DealService/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) GetPipeline(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/deal.DealService/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) ListCurrencies(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Currencies, error) {
	out := new(Currencies)
	err := c.cc.Invoke(ctx, "/deal.DealService/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) GetCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/deal.DealService/GetCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) CreateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/deal.DealService/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) UpdateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/deal.DealService/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) DeleteCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/deal.DealService/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) ListExchangeRates(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ExchangeRates, error) {
	out := new(ExchangeRates)
	err := c.cc.Invoke(ctx, "/deal.DealService/ListExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) GetExchangeRate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := c.cc.Invoke(ctx, "/deal.DealService/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) CreateExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := c.cc.Invoke(ctx, "/deal.DealService/CreateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/deal.DealService/DeleteExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealServiceServer is the server API for DealService service.
type DealServiceServer interface {
	CreatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	UpdatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	DeletePipeline(context.Context, *common.Id) (*common.Empty, error)
	ListPipelines(context.Context, *common.Empty) (*Pipelines, error)
	GetPipeline(context.Context, *common.Id) (*Pipeline, error)
	ListCurrencies(context.Context, *common.Empty) (*Currencies, error)
	GetCurrency(context.Context, *common.Id) (*Currency, error)
	CreateCurrency(context.Context, *Currency) (*Currency, error)
	UpdateCurrency(context.Context, *Currency) (*Currency, error)
	DeleteCurrency(context.Context, *common.Id) (*common.Empty, error)
	ListExchangeRates(context.Context, *common.Empty) (*ExchangeRates, error)
	GetExchangeRate(context.Context, *common.Id) (*ExchangeRate, error)
	CreateExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error)
	DeleteExchangeRate(context.Context, *DeleteExchangeRateRequest) (*common.Empty, error)
}

func RegisterDealServiceServer(s *grpc.Server, srv DealServiceServer) {
	s.RegisterService(&_DealService_serviceDesc, srv)
}

func _DealService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).CreatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/UpdatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).UpdatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).DeletePipeline(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).ListPipelines(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).GetPipeline(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).ListCurrencies(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/GetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).GetCurrency(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).CreateCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).UpdateCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).DeleteCurrency(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/ListExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).ListExchangeRates(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).GetExchangeRate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/CreateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).CreateExchangeRate(ctx, req.(*ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_DeleteExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).DeleteExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.DealService/DeleteExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).DeleteExchangeRate(ctx, req.(*DeleteExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DealService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deal.DealService",
	HandlerType: (*DealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _DealService_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _DealService_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _DealService_DeletePipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _DealService_ListPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _DealService_GetPipeline_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _DealService_ListCurrencies_Handler,
		},
		{
			MethodName: "GetCurrency",
			Handler:    _DealService_GetCurrency_Handler,
		},
		{
			MethodName: "CreateCurrency",
			Handler:    _DealService_CreateCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _DealService_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _DealService_DeleteCurrency_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _DealService_ListExchangeRates_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _DealService_GetExchangeRate_Handler,
		},
		{
			MethodName: "CreateExchangeRate",
			Handler:    _DealService_CreateExchangeRate_Handler,
		},
		{
			MethodName: "DeleteExchangeRate",
			Handler:    _DealService_DeleteExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deal/deal.proto",
}
