syntax = "proto2";

package deal;

import "git.subiz.net/header/common/common.proto";

message Stage {
  optional common.Context ctx = 1;
  optional string id = 2;
  optional string pipeline_id = 3;
  optional string type = 4;
  optional string name = 5;
  optional float probability = 6;
  optional int32 display_order = 7;
  optional bool close_won = 8;
  optional bool close_lost = 9;
  optional int64 created = 10;
  optional int64 updated = 11;
}

enum StageTypes {
  won = 0;
  lost = 1;
  custom = 2;
}

message Pipeline {
  optional common.Context ctx = 1;
  optional string account_id = 2;
  optional string id = 3;
  optional bool is_default = 4;
  repeated Stage stages = 5;
  optional int64 created = 10;
  optional int64 updated = 11;
}

message Pipelines {
  optional common.Context ctx = 1;
  repeated Pipeline pipelines = 2;
}

message ExchangeRate {
  optional common.Context ctx = 1;
  optional string id = 2;
  optional string currency_id = 3;
  optional float rate = 4;
  optional int64 effective_date = 5;
  optional int64 created = 10;
}

message ExchangeRates {
  optional common.Context ctx = 1;
  repeated ExchangeRate exchange_rates = 2;
}

message Currency {
  optional common.Context ctx = 1;
  optional string account_id = 2;
  optional string id = 3;
  optional bool is_base = 4;
  optional string name = 5;
  optional string code = 6;
  optional string symbol = 7;

  enum DecimalPlace {
    zero = 0;
    one = 1;
    two = 2;
    three = 3;
    four = 4;
    five = 5;
  }
  optional DecimalPlace decimal_place = 8;

  enum Format {
    DotComma = 0;     // 12.345.678,01
    CommaDot = 1;     // 12,345,678.01
    SpaceComma = 2;   // 12 345 678,01
  }
  optional Format format = 9;
  optional int64 created = 10;
  optional int64 updated = 11;
}

message Currencies {
  optional common.Context ctx = 1;
  repeated Currency currencies = 2;
}

message DeleteExchangeRateRequest {
  optional common.Context ctx = 1;
  optional string currency_id = 2;
  optional string id = 3;
}

service DealService {
  rpc CreatePipeline(Pipeline) returns (Pipeline);
  rpc UpdatePipeline(Pipeline) returns (Pipeline);
  rpc DeletePipeline(common.Id) returns (common.Empty);
  rpc ListPipelines(common.Empty) returns (Pipelines);
  rpc GetPipeline(common.Id) returns (Pipeline);

  rpc ListCurrencies(common.Empty) returns (Currencies);
  rpc GetCurrency(common.Id) returns (Currency);
  rpc CreateCurrency(Currency) returns (Currency);
  rpc UpdateCurrency(Currency) returns (Currency);
  rpc DeleteCurrency(common.Id) returns (common.Empty);
  rpc ListExchangeRates(common.Empty) returns (ExchangeRates);
  rpc GetExchangeRate(common.Id) returns (ExchangeRate);
  rpc CreateExchangeRate(ExchangeRate) returns (ExchangeRate);
  rpc DeleteExchangeRate(DeleteExchangeRateRequest) returns (common.Empty);
}