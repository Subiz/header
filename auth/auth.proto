syntax = "proto3";

package auth;

message Credential {
	string account_id = 1;
	string issuer = 3;
	Type type = 4;
	// Method method = 5;
	Permission perm = 6;
	string client_id = 7;
	Type client_type = 8;
	string client_account_id = 10;
	// repeated string scopes = 9;

	// optional
	string avatar_url = 15;
	string name = 16;
	string email = 17;

	bool is_internal_client = 18;
}

message Scope {
	string id = 1;
	string name = 2;
	string logo_url = 3;
	string title = 4;
	string description = 5;
	// Method method = 6;
	repeated string event = 7;
}

message Permission {
	int32 account = 2;  //    ogu
	int32 agent = 3;    // 0x0777
	int32 agent_password = 4;
	int32 permission = 6;
	int32 agent_group = 7;
	int32 segmentation = 10;
	int32 client = 12;
	int32 rule = 13;
	int32 conversation = 14;
	int32 integration = 15;
	int32 canned_response = 16;
	int32 tag = 17;
	int32 whitelist_ip = 20;
	int32 whitelist_user = 21;
	int32 whitelist_domain = 22;
	int32 widget = 23;
	int32 subscription = 24;
	int32 invoice = 25;
	int32 payment_method = 26;
	int32 bill = 27;
	int32 payment_log = 28;
	int32 payment_comment = 29;
	int32 user = 30;
	int32 automation = 31;
	int32 ping = 32;
	int32 attribute = 33;
	int32 agent_notification = 34;
	int32 conversation_export = 35;
	int32 conversation_report = 36;
	int32 content = 37;
	int32 pipeline = 38;
	int32 currency = 39;
	int32 service_level_agreement = 40;
 	int32 message_template = 41;
	int32 agent_presence = 42;
 	int32 agent_preference = 43;
	int32 promotion_code = 44;
}

message GoogleCredential {
	string id_token = 2;
}

message PasswordCredential {
	string username = 1;
	string password = 2;
	GoogleCredential google = 3;
}

message SuperPasswordCredential {
	string subiz_username = 1;
	string subiz_password = 2;
	string subiz_token = 3;

	string issuer_id = 5; // default: owner
	// string client_id = 7; // default subiz
	// string client_type = 8;
	string account_id = 9;
	// string client_account_id = 10; // subiz
	int32 expired = 11; // default 24 hour
	repeated string scopes = 12; // default all
}

message AuthCookie {
	string user_id = 1;
	string account_id = 2;
	int32 expired = 4;
	int32 issued = 5;
	string type = 3;
}

message OauthAccessToken {
	string access_token = 1;
	string token_type = 3;
	int64 expires_in = 4;
	string refresh_token = 5;
	string scope = 6;
	string state = 7;
	string error = 8;
	string error_description = 9;
	string error_uri = 10;
}

message AccessToken {
	string issuer_id = 1;
	// string issuer_type = 7;
	string client_id = 2;
	// string client_type = 3;
	string account_id = 4;
	// string client_account_id = 5;
	// repeated string scopes = 6;
	int32 expired = 8;
	Type issuer_type = 9;
	Type client_type = 10;
	Permission permission = 11;
}

message CookieExpire {
	string user_id = 1;
	string account_id = 2;

	// expired_token will be mark as expired
	string expired_token = 3;

	// all token issue before before_time will be mark as expired, except for
	// except_token
	int64 before_time = 4;

	// this token will not be expired
	string except_token = 5;
}

enum Type {
	unknown = 0;
	user = 1;
	agent = 2;
	subiz = 3;
	// APP is general client type
	app = 5;
	rest = 8;
	// CHANNEL is special client, that can and only listen chat topics of an account
	connector = 6;

	bot = 7;
	dashboard = 10;
	// accmgr
	accmgr = 11;
}

message User {
	reserved 1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16;
	//	optioanl common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string email = 5;
	string encrypted_password = 17;
	bool is_active = 18;
	int64 upserted = 19;
	int32 v3_state = 20; // 0: not v3, 1: v3 but not convert, 2: converted v3
}

enum AuthorizationType {
	client_auth = 0;
	channel_auth = 1;
}

enum Event {
	AUTH = 0;
	AuthExpireCookie = 4; //CookieExpire
}

message UpdatePermRequest {
	string account_id = 1;
	string user_id = 2;
	// Method method = 3;
	Permission perm = 4;
}

message UpdateStateRequest {
	string account_id = 1;
	string user_id = 2;
	bool is_active = 3;
}

message ReadPermRequest {
	string account_id = 1;
	string user_id = 2;
}

message PingRequest {
	string message = 2;
}

message Pong {
	string message = 3;
}

message Empty {}

message ListUsersRequest {
	string account_id = 1;
	// Method method = 2;
	string start_id = 3;
	int32 limit = 4;
	Permission perm = 5;
}

message ListUsersResponse {
	repeated string ids = 1;
}

service Perm {
	rpc Update(UpdatePermRequest) returns (Empty);
	rpc UpdateState(UpdateStateRequest) returns (Empty);
	rpc ReadPerm(ReadPermRequest) returns (Permission);
	rpc Ping(PingRequest) returns (Pong);
}
