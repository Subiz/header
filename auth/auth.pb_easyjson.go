// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package auth

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth(in *jlexer.Lexer, out *permClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth(out *jwriter.Writer, in permClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v permClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v permClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *permClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *permClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth1(in *jlexer.Lexer, out *UserData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "encrypted_password":
			out.EncryptedPassword = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "upserted":
			out.Upserted = int64(in.Int64())
		case "v3_state":
			out.V3State = int32(in.Int32())
		case "kind":
			out.Kind = Type(in.Int32())
		case "issuer":
			out.Issuer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth1(out *jwriter.Writer, in UserData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.EncryptedPassword != "" {
		const prefix string = ",\"encrypted_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EncryptedPassword))
	}
	if in.IsActive {
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Upserted != 0 {
		const prefix string = ",\"upserted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Upserted))
	}
	if in.V3State != 0 {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.V3State))
	}
	if in.Kind != 0 {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Kind))
	}
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth1(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "encrypted_password":
			out.EncryptedPassword = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "upserted":
			out.Upserted = int64(in.Int64())
		case "v3_state":
			out.V3State = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.EncryptedPassword != "" {
		const prefix string = ",\"encrypted_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EncryptedPassword))
	}
	if in.IsActive {
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Upserted != 0 {
		const prefix string = ",\"upserted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Upserted))
	}
	if in.V3State != 0 {
		const prefix string = ",\"v3_state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.V3State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth2(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth3(in *jlexer.Lexer, out *UpdateStateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth3(out *jwriter.Writer, in UpdateStateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.IsActive {
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateStateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateStateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateStateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateStateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth3(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth4(in *jlexer.Lexer, out *UpdatePermRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(Permission)
				}
				(*out.Perm).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth4(out *jwriter.Writer, in UpdatePermRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Perm).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePermRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePermRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePermRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePermRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth4(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth5(in *jlexer.Lexer, out *SuperPasswordCredential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subiz_username":
			out.SubizUsername = string(in.String())
		case "subiz_password":
			out.SubizPassword = string(in.String())
		case "subiz_token":
			out.SubizToken = string(in.String())
		case "issuer_id":
			out.IssuerId = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "expired":
			out.Expired = int32(in.Int32())
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]string, 0, 4)
					} else {
						out.Scopes = []string{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Scopes = append(out.Scopes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth5(out *jwriter.Writer, in SuperPasswordCredential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SubizUsername != "" {
		const prefix string = ",\"subiz_username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubizUsername))
	}
	if in.SubizPassword != "" {
		const prefix string = ",\"subiz_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubizPassword))
	}
	if in.SubizToken != "" {
		const prefix string = ",\"subiz_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubizToken))
	}
	if in.IssuerId != "" {
		const prefix string = ",\"issuer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IssuerId))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Expired != 0 {
		const prefix string = ",\"expired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Expired))
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Scopes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuperPasswordCredential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuperPasswordCredential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuperPasswordCredential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuperPasswordCredential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth5(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth6(in *jlexer.Lexer, out *Scope) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "logo_url":
			out.LogoUrl = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "available_events":
			if in.IsNull() {
				in.Skip()
				out.AvailableEvents = nil
			} else {
				in.Delim('[')
				if out.AvailableEvents == nil {
					if !in.IsDelim(']') {
						out.AvailableEvents = make([]string, 0, 4)
					} else {
						out.AvailableEvents = []string{}
					}
				} else {
					out.AvailableEvents = (out.AvailableEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.AvailableEvents = append(out.AvailableEvents, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "review_required":
			out.ReviewRequired = bool(in.Bool())
		case "permission":
			if in.IsNull() {
				in.Skip()
				out.Permission = nil
			} else {
				if out.Permission == nil {
					out.Permission = new(Permission)
				}
				(*out.Permission).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth6(out *jwriter.Writer, in Scope) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.LogoUrl != "" {
		const prefix string = ",\"logo_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LogoUrl))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.AvailableEvents) != 0 {
		const prefix string = ",\"available_events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.AvailableEvents {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.ReviewRequired {
		const prefix string = ",\"review_required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReviewRequired))
	}
	if in.Permission != nil {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Permission).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scope) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scope) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scope) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scope) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth6(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth7(in *jlexer.Lexer, out *ReadPermRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth7(out *jwriter.Writer, in ReadPermRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadPermRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadPermRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadPermRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadPermRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth7(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth8(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = int32(in.Int32())
		case "agent":
			out.Agent = int32(in.Int32())
		case "agent_password":
			out.AgentPassword = int32(in.Int32())
		case "permission":
			out.Permission = int32(in.Int32())
		case "agent_group":
			out.AgentGroup = int32(in.Int32())
		case "segmentation":
			out.Segmentation = int32(in.Int32())
		case "client":
			out.Client = int32(in.Int32())
		case "rule":
			out.Rule = int32(in.Int32())
		case "conversation":
			out.Conversation = int32(in.Int32())
		case "integration":
			out.Integration = int32(in.Int32())
		case "canned_response":
			out.CannedResponse = int32(in.Int32())
		case "tag":
			out.Tag = int32(in.Int32())
		case "whitelist_ip":
			out.WhitelistIp = int32(in.Int32())
		case "whitelist_user":
			out.WhitelistUser = int32(in.Int32())
		case "whitelist_domain":
			out.WhitelistDomain = int32(in.Int32())
		case "widget":
			out.Widget = int32(in.Int32())
		case "subscription":
			out.Subscription = int32(in.Int32())
		case "invoice":
			out.Invoice = int32(in.Int32())
		case "payment_method":
			out.PaymentMethod = int32(in.Int32())
		case "bill":
			out.Bill = int32(in.Int32())
		case "payment_log":
			out.PaymentLog = int32(in.Int32())
		case "payment_comment":
			out.PaymentComment = int32(in.Int32())
		case "user":
			out.User = int32(in.Int32())
		case "automation":
			out.Automation = int32(in.Int32())
		case "ping":
			out.Ping = int32(in.Int32())
		case "attribute":
			out.Attribute = int32(in.Int32())
		case "agent_notification":
			out.AgentNotification = int32(in.Int32())
		case "conversation_export":
			out.ConversationExport = int32(in.Int32())
		case "conversation_report":
			out.ConversationReport = int32(in.Int32())
		case "content":
			out.Content = int32(in.Int32())
		case "pipeline":
			out.Pipeline = int32(in.Int32())
		case "currency":
			out.Currency = int32(in.Int32())
		case "service_level_agreement":
			out.ServiceLevelAgreement = int32(in.Int32())
		case "message_template":
			out.MessageTemplate = int32(in.Int32())
		case "agent_presence":
			out.AgentPresence = int32(in.Int32())
		case "agent_preference":
			out.AgentPreference = int32(in.Int32())
		case "promotion_code":
			out.PromotionCode = int32(in.Int32())
		case "referral":
			out.Referral = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth8(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Account))
	}
	if in.Agent != 0 {
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Agent))
	}
	if in.AgentPassword != 0 {
		const prefix string = ",\"agent_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPassword))
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Permission))
	}
	if in.AgentGroup != 0 {
		const prefix string = ",\"agent_group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentGroup))
	}
	if in.Segmentation != 0 {
		const prefix string = ",\"segmentation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Segmentation))
	}
	if in.Client != 0 {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Client))
	}
	if in.Rule != 0 {
		const prefix string = ",\"rule\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Rule))
	}
	if in.Conversation != 0 {
		const prefix string = ",\"conversation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Conversation))
	}
	if in.Integration != 0 {
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Integration))
	}
	if in.CannedResponse != 0 {
		const prefix string = ",\"canned_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.CannedResponse))
	}
	if in.Tag != 0 {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Tag))
	}
	if in.WhitelistIp != 0 {
		const prefix string = ",\"whitelist_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistIp))
	}
	if in.WhitelistUser != 0 {
		const prefix string = ",\"whitelist_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistUser))
	}
	if in.WhitelistDomain != 0 {
		const prefix string = ",\"whitelist_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.WhitelistDomain))
	}
	if in.Widget != 0 {
		const prefix string = ",\"widget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Widget))
	}
	if in.Subscription != 0 {
		const prefix string = ",\"subscription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Subscription))
	}
	if in.Invoice != 0 {
		const prefix string = ",\"invoice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Invoice))
	}
	if in.PaymentMethod != 0 {
		const prefix string = ",\"payment_method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentMethod))
	}
	if in.Bill != 0 {
		const prefix string = ",\"bill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Bill))
	}
	if in.PaymentLog != 0 {
		const prefix string = ",\"payment_log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentLog))
	}
	if in.PaymentComment != 0 {
		const prefix string = ",\"payment_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PaymentComment))
	}
	if in.User != 0 {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.User))
	}
	if in.Automation != 0 {
		const prefix string = ",\"automation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Automation))
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ping))
	}
	if in.Attribute != 0 {
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Attribute))
	}
	if in.AgentNotification != 0 {
		const prefix string = ",\"agent_notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentNotification))
	}
	if in.ConversationExport != 0 {
		const prefix string = ",\"conversation_export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationExport))
	}
	if in.ConversationReport != 0 {
		const prefix string = ",\"conversation_report\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ConversationReport))
	}
	if in.Content != 0 {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Content))
	}
	if in.Pipeline != 0 {
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Pipeline))
	}
	if in.Currency != 0 {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Currency))
	}
	if in.ServiceLevelAgreement != 0 {
		const prefix string = ",\"service_level_agreement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ServiceLevelAgreement))
	}
	if in.MessageTemplate != 0 {
		const prefix string = ",\"message_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MessageTemplate))
	}
	if in.AgentPresence != 0 {
		const prefix string = ",\"agent_presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPresence))
	}
	if in.AgentPreference != 0 {
		const prefix string = ",\"agent_preference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.AgentPreference))
	}
	if in.PromotionCode != 0 {
		const prefix string = ",\"promotion_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PromotionCode))
	}
	if in.Referral != 0 {
		const prefix string = ",\"referral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Referral))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth8(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth9(in *jlexer.Lexer, out *PasswordCredential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "google":
			if in.IsNull() {
				in.Skip()
				out.Google = nil
			} else {
				if out.Google == nil {
					out.Google = new(GoogleCredential)
				}
				(*out.Google).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth9(out *jwriter.Writer, in PasswordCredential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Google != nil {
		const prefix string = ",\"google\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Google).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordCredential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordCredential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordCredential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordCredential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth9(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth10(in *jlexer.Lexer, out *OauthAccessToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "token_type":
			out.TokenType = string(in.String())
		case "expires_in":
			out.ExpiresIn = int64(in.Int64())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "scope":
			out.Scope = string(in.String())
		case "state":
			out.State = string(in.String())
		case "error":
			out.Error = string(in.String())
		case "error_description":
			out.ErrorDescription = string(in.String())
		case "error_uri":
			out.ErrorUri = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth10(out *jwriter.Writer, in OauthAccessToken) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccessToken != "" {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessToken))
	}
	if in.TokenType != "" {
		const prefix string = ",\"token_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TokenType))
	}
	if in.ExpiresIn != 0 {
		const prefix string = ",\"expires_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresIn))
	}
	if in.RefreshToken != "" {
		const prefix string = ",\"refresh_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RefreshToken))
	}
	if in.Scope != "" {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scope))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	if in.ErrorDescription != "" {
		const prefix string = ",\"error_description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorDescription))
	}
	if in.ErrorUri != "" {
		const prefix string = ",\"error_uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorUri))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthAccessToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthAccessToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthAccessToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthAccessToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth10(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth11(in *jlexer.Lexer, out *GoogleCredential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_token":
			out.IdToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth11(out *jwriter.Writer, in GoogleCredential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IdToken != "" {
		const prefix string = ",\"id_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoogleCredential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoogleCredential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoogleCredential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoogleCredential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth11(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth12(in *jlexer.Lexer, out *Empty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth12(out *jwriter.Writer, in Empty) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Empty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Empty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Empty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Empty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth12(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth13(in *jlexer.Lexer, out *Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "issuer":
			out.Issuer = string(in.String())
		case "type":
			out.Type = Type(in.Int32())
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Perm = nil
			} else {
				if out.Perm == nil {
					out.Perm = new(Permission)
				}
				(*out.Perm).UnmarshalEasyJSON(in)
			}
		case "client_id":
			out.ClientId = string(in.String())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth13(out *jwriter.Writer, in Credential) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	if in.Perm != nil {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Perm).MarshalEasyJSON(out)
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.AvatarUrl != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarUrl))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Credential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Credential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Credential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Credential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth13(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth14(in *jlexer.Lexer, out *CookieExpire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "expired_token":
			out.ExpiredToken = string(in.String())
		case "before_time":
			out.BeforeTime = int64(in.Int64())
		case "except_token":
			out.ExceptToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth14(out *jwriter.Writer, in CookieExpire) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.ExpiredToken != "" {
		const prefix string = ",\"expired_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpiredToken))
	}
	if in.BeforeTime != 0 {
		const prefix string = ",\"before_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BeforeTime))
	}
	if in.ExceptToken != "" {
		const prefix string = ",\"except_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExceptToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CookieExpire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CookieExpire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CookieExpire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CookieExpire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth14(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth15(in *jlexer.Lexer, out *AuthCookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "expired":
			out.Expired = int32(in.Int32())
		case "issued":
			out.Issued = int32(in.Int32())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth15(out *jwriter.Writer, in AuthCookie) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Expired != 0 {
		const prefix string = ",\"expired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Expired))
	}
	if in.Issued != 0 {
		const prefix string = ",\"issued\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Issued))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthCookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthCookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthCookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthCookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth15(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth16(in *jlexer.Lexer, out *AccessToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issuer":
			out.Issuer = string(in.String())
		case "client_id":
			out.ClientId = string(in.String())
		case "account_id":
			out.AccountId = string(in.String())
		case "expired":
			out.Expired = int32(in.Int32())
		case "kind":
			out.Kind = Type(in.Int32())
		case "permission":
			if in.IsNull() {
				in.Skip()
				out.Permission = nil
			} else {
				if out.Permission == nil {
					out.Permission = new(Permission)
				}
				(*out.Permission).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth16(out *jwriter.Writer, in AccessToken) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Issuer != "" {
		const prefix string = ",\"issuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientId))
	}
	if in.AccountId != "" {
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountId))
	}
	if in.Expired != 0 {
		const prefix string = ",\"expired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Expired))
	}
	if in.Kind != 0 {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Kind))
	}
	if in.Permission != nil {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Permission).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComSubizHeaderAuth16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComSubizHeaderAuth16(l, v)
}
