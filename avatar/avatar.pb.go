// Code generated by protoc-gen-go. DO NOT EDIT.
// source: avatar/avatar.proto

package avatar

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/subiz/header/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Avatar struct {
	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Key                  string          `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	AvatarUrl            string          `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	AutoUpdate           bool            `protobuf:"varint,4,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Avatar) Reset()         { *m = Avatar{} }
func (m *Avatar) String() string { return proto.CompactTextString(m) }
func (*Avatar) ProtoMessage()    {}
func (*Avatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_29517e943f363412, []int{0}
}

func (m *Avatar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Avatar.Unmarshal(m, b)
}
func (m *Avatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Avatar.Marshal(b, m, deterministic)
}
func (m *Avatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Avatar.Merge(m, src)
}
func (m *Avatar) XXX_Size() int {
	return xxx_messageInfo_Avatar.Size(m)
}
func (m *Avatar) XXX_DiscardUnknown() {
	xxx_messageInfo_Avatar.DiscardUnknown(m)
}

var xxx_messageInfo_Avatar proto.InternalMessageInfo

func (m *Avatar) GetCtx() *common.Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Avatar) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Avatar) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Avatar) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func init() {
	proto.RegisterType((*Avatar)(nil), "avatar.Avatar")
}

func init() { proto.RegisterFile("avatar/avatar.proto", fileDescriptor_29517e943f363412) }

var fileDescriptor_29517e943f363412 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x91, 0x60, 0xa6, 0xfe, 0x63, 0xf5, 0x10, 0x02, 0x62, 0xf4, 0x62, 0x40, 0x4c,
	0xa0, 0x7e, 0x02, 0x11, 0x11, 0x0f, 0x5e, 0x22, 0x39, 0x97, 0x4d, 0x32, 0xb4, 0xc1, 0x26, 0x1b,
	0xa6, 0xb3, 0xa5, 0x11, 0xfc, 0xee, 0x92, 0xdd, 0xcd, 0xc5, 0xd3, 0xec, 0xbe, 0xdf, 0x3c, 0xe6,
	0x3d, 0xb8, 0x92, 0x7b, 0xc9, 0x92, 0x72, 0x3b, 0xb2, 0x81, 0x14, 0x2b, 0x11, 0xd8, 0x5f, 0xfc,
	0xb8, 0x6e, 0x79, 0xa3, 0xab, 0xac, 0x56, 0x5d, 0xbe, 0xd3, 0x55, 0xfb, 0x93, 0x6f, 0x50, 0x36,
	0x48, 0x79, 0xad, 0xba, 0x4e, 0xf5, 0x6e, 0x58, 0xd3, 0xfd, 0x2f, 0x04, 0x2f, 0xc6, 0x26, 0xee,
	0xc0, 0xaf, 0xf9, 0x10, 0x79, 0x89, 0x97, 0x2e, 0x96, 0x17, 0x99, 0xdb, 0x7a, 0x55, 0x3d, 0xe3,
	0x81, 0x8b, 0x89, 0x89, 0x4b, 0xf0, 0xbf, 0x71, 0x8c, 0x8e, 0x12, 0x2f, 0x0d, 0x8b, 0xe9, 0x29,
	0x6e, 0x00, 0xec, 0xd5, 0x95, 0xa6, 0x6d, 0xe4, 0x1b, 0x10, 0x5a, 0xa5, 0xa4, 0xad, 0xb8, 0x85,
	0x85, 0xd4, 0xac, 0x56, 0x7a, 0x68, 0x24, 0x63, 0x74, 0x9c, 0x78, 0xe9, 0x49, 0x01, 0x93, 0x54,
	0x1a, 0x65, 0xd9, 0xc3, 0xf5, 0x17, 0xd2, 0xbe, 0xad, 0xd1, 0xa6, 0xf8, 0x94, 0xbd, 0x5c, 0x23,
	0x89, 0x07, 0x08, 0xdf, 0x91, 0x5d, 0x32, 0x98, 0xc3, 0x7c, 0x34, 0xf1, 0x79, 0xe6, 0x3a, 0x3b,
	0xf6, 0x04, 0xa7, 0xe5, 0xb0, 0x43, 0x9a, 0x77, 0xff, 0xf1, 0xf8, 0x6c, 0xf6, 0xbe, 0x75, 0x03,
	0x8f, 0x55, 0x60, 0x5a, 0x3f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x25, 0xd3, 0x61, 0x41,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceAvatarManagerClient is the client API for ServiceAvatarManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceAvatarManagerClient interface {
	GetAvatar(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Avatar, error)
	UpsertAvatar(ctx context.Context, in *Avatar, opts ...grpc.CallOption) (*common.Empty, error)
}

type serviceAvatarManagerClient struct {
	cc *grpc.ClientConn
}

func NewServiceAvatarManagerClient(cc *grpc.ClientConn) ServiceAvatarManagerClient {
	return &serviceAvatarManagerClient{cc}
}

func (c *serviceAvatarManagerClient) GetAvatar(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Avatar, error) {
	out := new(Avatar)
	err := c.cc.Invoke(ctx, "/avatar.ServiceAvatarManager/GetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAvatarManagerClient) UpsertAvatar(ctx context.Context, in *Avatar, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/avatar.ServiceAvatarManager/UpsertAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAvatarManagerServer is the server API for ServiceAvatarManager service.
type ServiceAvatarManagerServer interface {
	GetAvatar(context.Context, *common.Id) (*Avatar, error)
	UpsertAvatar(context.Context, *Avatar) (*common.Empty, error)
}

func RegisterServiceAvatarManagerServer(s *grpc.Server, srv ServiceAvatarManagerServer) {
	s.RegisterService(&_ServiceAvatarManager_serviceDesc, srv)
}

func _ServiceAvatarManager_GetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAvatarManagerServer).GetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.ServiceAvatarManager/GetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAvatarManagerServer).GetAvatar(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAvatarManager_UpsertAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Avatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAvatarManagerServer).UpsertAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.ServiceAvatarManager/UpsertAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAvatarManagerServer).UpsertAvatar(ctx, req.(*Avatar))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceAvatarManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "avatar.ServiceAvatarManager",
	HandlerType: (*ServiceAvatarManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvatar",
			Handler:    _ServiceAvatarManager_GetAvatar_Handler,
		},
		{
			MethodName: "UpsertAvatar",
			Handler:    _ServiceAvatarManager_UpsertAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar/avatar.proto",
}
